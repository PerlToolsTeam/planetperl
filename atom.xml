<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="http://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-09-18T14:32:35Z</updated>
  <link rel="self" href="http://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>http://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Hacks: Blogging for Perl</title>
    <link rel="alternate" href="https://perlhacks.com/2020/09/blogging-for-perl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I think it was at YAPC Copenhagen in 2008 that a small group of us first discussed the idea of building a shared blogging platform for the Perl community. It was over a year later that we launched <a href="http://blogs.perl.org/">blogs.perl.org</a>.</p>
<p>I remember a lot of discussions over that time where we tried to thrash out exactly what we wanted to build. I know that one of my main drivers was that I wanted to replace the journals feature of use.perl. For those of you too young to remember, use.perl was a Perl community web site from the dawn of time. The site ran Perl news on its front page, but users could also have their own journal. For a few years, we had a nice little blogging community on the site. It used the same software as <a href="https://slashdot.org/">Slashdot</a> and, like Slashdot, was looking pretty dated at the time. I remember being particularly disappointed that you couldn’t put images in a journal entry.</p>
<p>So that was certainly where I started from when planning blogs.perl.org. I wanted a modern blogging platform to replace use.perl. Other people wanted slightly different things. At least one person argued strongly that what we really needed was a nice-looking blog aggregator and that people could do their actual blogging on their own sites (or some other blog provider).</p>
<p>But, as you can see, that point of view lost out and we implemented a full blogging system using <a href="https://www.movabletype.org/">Movable Type</a>.</p>
<p>Ten years on, I think that was a mistake. I think that having a community blogging platform for Perl is actively harmful to Perl.</p>
<p>I’ll explain why a bit later, but first let’s talk through a bit of more recent history of the site.</p>
<p>It’s well-known, I think, that the site is not is a good state. I’m happy to explain what happened there, but it’s a long and rather dull story. There have been a couple of attempts to build replacement systems but they both stalled before they were complete.</p>
<p>So we’re left in a situation where the site is broken and no-one really has the time or the expertise to fix it. And attempts to replace it seem doomed to failure.</p>
<p>Earlier this year I decided that the situation was untenable and that I wanted to close the site down. I spoke to Aaron and he pretty much agreed with me. We decided that we’d give people plenty of notice to take their blogging elsewhere and, rather than closing the site completely, we would make it read-only (so all the existing content would still be there). We ran the idea past the rest of the loose “management team” and <a href="http://blogs.perl.org/users/aristotle/">Aristotle</a> spoke up, saying that he would rather take the site over himself and try to improve matters. And that’s what happened. Over the last few months, Aaron and I have extricated ourselves from running the site and it’s all now handled by Aristotle.</p>
<p>I wish him all the best in those endeavours and really hope he manages to make the site better than it was (he’s already making great progress in removing loads of old spam blogs from the site).</p>
<p>But, really, I think that my original plan was a better idea. I don’t want people to blog about Perl on a Perl community site. I want people to blog about Perl on sites where people blog about other languages and technologies.</p>
<p>I’ve been giving talks about the need for the Perl community to break out of its echo chamber for almost as long as I’ve been part of the community. But I think it’s important. It’s a kind of low-key marketing. If you’re talking about your cool Perl project on a Perl community web site then only people who are looking for Perl articles will find it. But if you blog about it on a general programming web site then a) you’ll get a far bigger audience and b) some of that audience might say “oh! I never knew Perl could do that – perhaps I’ll give it a closer look.”</p>
<p>And that’s why I think blogs.perl.org (and, probably, use.perl before it) are harmful to Perl. It encourages Perl bloggers to blog for the Perl community – when it would be far better to get your blog posts in front of more people. Perl people will still read your Perl posts (through <a href="http://perlsphere.net/">Perlsphere</a> perhaps, or post the link to <a href="https://www.reddit.com/r/perl/">/r/perl</a> or the <a href="https://www.facebook.com/groups/perlcommunity">Perl Community Facebook group</a>) but other people will see them too. On blogs.perl.org, you’re pretty much guaranteed that only Perl programmers will see your posts.</p>
<p>To be honest, I don’t understand why people still use blogs.perl.org. Until Aristotle’s work bears fruit it’s painfully broken. What do you get that’s worth putting yourself through all of that pain? Why not just blog somewhere else and submit your web feed to Perlsphere? Or blog where other programmers blog – somewhere like <a href="https://dev.to/">dev.to</a>, perhaps (I’ve started publishing <a href="https://dev.to/davorg">my more technical blog posts</a> there).</p>
<p>I think it will be great if Aristotle gets blogs.perl.org working well. I really want that to happen. But it would be even better if he didn’t have to. If people stopped using it; if they went off and started spreading their interesting Perl blog posts all over the web.</p>
<p>Break out of the echo chamber. Find yourself a bigger audience. Spread the word beyond the Perl community.</p>
<p>Or, alternatively, explain to me why it’s so vital that the Perl community has its own centralised blogging platform.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/09/blogging-for-perl/">Blogging for Perl</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I think it was at YAPC Copenhagen in 2008 that a small group of us first discussed the idea of building a shared blogging platform for the Perl community. It was over a year later that we launched blogs.perl.org. I remember a lot of discussions over that time where we tried to thrash out exactly […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/09/blogging-for-perl/">Blogging for Perl</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2007</id>
    <published>2020-09-17T20:10:32Z</published>
    <updated>2020-09-17T20:10:32Z</updated>
    <category term="Miscellaneous"/>
    <category term="blogs.perl.org"/>
    <category term="echo chamber"/>
    <category term="perl. blogging"/>
  </entry>
  <entry>
    
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/09/perl-weekly-challenge-leader-element-and-left-rotation.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9880</id>

    <published>2020-09-17T02:31:06Z</published>
    <updated>2020-09-17T02:41:23Z</updated>

    <summary>These are some answers to the Week 78 of of the Perl Weekly Challenge organized by Mohammad S. Anwar Spoiler Alert: This weekly challenge deadline is due in a few days (September 20, 2020). This blog post offers some solutions...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 78 of of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-078/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a></p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (September 20, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Leader Element</h2>

<p><em>You are given an array <code>@A</code> containing distinct integers.</em></p>

<p><em>Write a script to find all leader elements in the array <code>@A</code>. Print (0) if none found.</em></p>

<pre><code>An element is leader if it is greater than all the elements to its right side.
</code></pre>

<p><em>Example 1:</em></p>

<pre><code>Input: @A = (9, 10, 7, 5, 6, 1)
Output: (10, 7, 6, 1)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @A = (3, 4, 5)
Output: (5)
</code></pre>

<p>Two small comments. First, if we set aside the (very special) case where the input array is empty, we will never have to print 0, since the last item of the array will always be a leader element. Second, I&#8217;ll interpret the leader element definition as <em>strictly</em> greater than all its successors.</p>

<h3>Leader Element in Raku</h3>

<p>We only need to read the input array backward and keep track of the maximum element seen so far. Any item strictly greater than all items seen previously is a leader. Here, we do it for the two arrays provided as examples.</p>

<pre><code>use v6;

my @in = [9, 10, 7, 5, 6, 1], [3, 4, 5];
for @in -&gt; @a {
    my @result = gather {
        my $max = @a[*-1];
        take $max;
        for @a.reverse -&gt; $item {
            if $item &gt; $max {
                take $item;
                $max = $item;
            }
        }
    }
    say "Input: @a[]; Output: ", @result.reverse;
}
</code></pre>

<p>The result is in conformity with what we expected:</p>

<pre><code>Input: 9 10 7 5 6 1; Output: (10 7 6 1)
Input: 3 4 5; Output: (5)
</code></pre>

<h3>Leader Element in Perl</h3>

<p>Just like in Raku, we read the input array backward and keep track of the maximum element seen so far. Any item strictly greater than all items seen previously is a leader.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @in = ([9, 10, 7, 5, 6, 1], [3, 4, 5]);
for my $aref (@in) {
    my @result;
    my $max = @$aref[-1];
    push @result, $max;
    for my $item (reverse @$aref) {
        if ($item &gt; $max) {
            push @result, $item;
            $max = $item;
        }
    }
    say "Input: @$aref; Output: ", join " ", reverse @result;
}
</code></pre>

<p>Here again, the result is what we expected:</p>

<pre><code>$ perl leader.pl
Input: 9 10 7 5 6 1; Output: 10 7 6 1
Input: 3 4 5; Output: 5
</code></pre>

<h3>Left Rotation</h3>

<p><em>You are given array <code>@A</code> containing positive numbers and <code>@B</code> containing one or more indices from the array <code>@A</code>.</em></p>

<p><em>Write a script to left rotate <code>@A</code> so that the number at the first index of <code>@B</code> becomes the first element in the array. Similarly, left rotate <code>@A</code> again so that the number at the second index of <code>@B</code> becomes the first element in the array.</em></p>

<p><em>Example:</em></p>

<pre><code>Input:
    @A = (10 20 30 40 50)
    @B = (3 4)

Explanation:

a) We left rotate the 3rd index element (40) in the @A to make it 0th index member in the array.
        [40 50 10 20 30]

b) We left rotate the 4th index element (50) in the @A to make it 0th index member in the array.
        [50 10 20 30 40]

Output:
    [40 50 10 20 30]
    [50 10 20 30 40]
</code></pre>

<h3>Left Rotation in Raku</h3>

<p>We can simply use array slices to get what we need. The only slight difficulty is that we need to flatten the two index slices into a single list.</p>

<pre><code>use v6;

my @a = 10, 20, 30, 40, 50;
my @indices = 3, 4;

say "Input array: ", @a;
for @indices -&gt; $i {
    my @out = @a[($i..@a.end, 0..$i -1).flat];
    say @out;
}
</code></pre>

<p>Output:</p>

<pre><code>$ raku left_rotate.raku
Input array: [10 20 30 40 50]
[40 50 10 20 30]
[50 10 20 30 40]
</code></pre>

<h3>Left Rotation in Perl</h3>

<p>Again, we use array slices. Here, the only slight difficulty is the relatively heavy use of nested array references.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @a = ( [[10, 20, 30, 40, 50],[3, 4]], 
          [[7, 4, 2, 6, 3], [1, 3, 4]] );
left_rotate($_) for @a;

sub left_rotate {
    my $inref = shift;
    my ($in, $indices) = @$inref;
    say "\nInput array: @$in - Indices: @$indices";
        for my $i (@$indices){
        my @out = @$in[$i..$#{$in}, 0..$i -1];
        say "@out";
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ perl left_rotate.pl

Input array: 10 20 30 40 50 - Indices: 3 4
40 50 10 20 30
50 10 20 30 40

Input array: 7 4 2 6 3 - Indices: 1 3 4
4 2 6 3 7
6 3 7 4 2
3 7 4 2 6
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, September 27, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
<title>blogs.perl.org: Perl Weekly Challenge 78: Leader Element and Left Rotation</title></entry>
  <entry>
    
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/toby_inkster/2020/09/zydecolite.html"/>
    <id>tag:blogs.perl.org,2020:/users/toby_inkster//1019.9878</id>

    <published>2020-09-15T03:02:45Z</published>
    <updated>2020-09-15T03:32:28Z</updated>

    <summary>Today I released Zydeco::Lite, a re-implementation of Zydeco but just using standard Perl syntax. So for example, class { ... } becomes class(sub { ...});. This has the advantage of much faster compile time, similar run time speed, fewer dependencies,...</summary>
    <author>
        <name>Toby Inkster</name>
        <uri>http://toby.ink/</uri>
    </author>
    
        <category term="Moo" scheme="http://www.sixapart.com/ns/types#category"/>
    
        <category term="Type-Tiny" scheme="http://www.sixapart.com/ns/types#category"/>
    
        <category term="Zydeco" scheme="http://www.sixapart.com/ns/types#category"/>
    
    <category term="mooxpress" label="MooX-Press" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="oop" label="OOP" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="zydeco" label="Zydeco" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/toby_inkster/">
        <![CDATA[<p>Today I released <a href="https://metacpan.org/pod/Zydeco::Lite">Zydeco::Lite</a>, a re-implementation of <a href="https://metacpan.org/pod/Zydeco">Zydeco</a> but just using standard Perl syntax. So for example, <code>class { ... }</code> becomes <code>class(sub { ...});</code>.</p>
<p>This has the advantage of much faster compile time, similar run time speed, fewer dependencies, and compatibility with older versions of Perl before the keyword API was introduced. Of course, in some circumstances these aren't important concerns, so the nicer syntax of the full Zydeco will be preferred.</p>
<p>Zydeco and Zydeco::Lite are both based on <a href="https://metacpan.org/pod/MooX::Press">MooX::Press</a> which itself is based on <a href="https://metacpan.org/pod/Moo">Moo</a>, <a href="https://metacpan.org/pod/Type::Tiny">Type::Tiny</a>, and other modules. I've taken the synopsis example from the Zydeco documentation and rewritten it using the different layers of abstraction.</p>]]>
        <![CDATA[<h2>Zydeco</h2>
<p>The shortest example.</p>
<script src="https://gist.github.com/tobyink/75f26790b7a9503e09c91a01e950b8f5.js"></script>

<h2>Zydeco::Lite</h2>
<p>Zydeco::Lite is pretty similar, but with a lot more explicit quoting, a few extra commas, etc. Method signatures are probably where the lack of the syntactic sugar shows the most. Of course, you can just avoid using signatures and manually deal with <code>@_</code> but I've tried to keep the examples as equivalent as possible.</p>
<script src="https://gist.github.com/tobyink/183a1581c4f8f40a4e672f29bc0ade9e.js"></script>

<h2>MooX::Press</h2>
<p>Both Zydeco and Zydeco::Lite are just cool DSLs for building a hashref that can be passed to MooX::Press. Here's how you can use MooX::Press directly.</p>
<script src="https://gist.github.com/tobyink/155c4c43712339ecdbcfc7d77335af88.js"></script>

<h2>Moo + Type::Tiny</h2>
<p>MooX::Press calls Moo under the hood to build the classes, manages a type library for you, etc. This example shows <em>most</em> of what's happening, though in fact MooX::Press does even more than this.</p>
<script src="https://gist.github.com/tobyink/d7af7070b53fcb9fe4660ba71708729a.js"></script>

<h2>Benchmarking</h2>
<p>The following timings are for my 3-year-old laptop to compile and run the code in the examples:</p>
<ul>
<li><b>Zydeco:</b> 0.84 seconds</li>
<li><b>Zydeco::Lite:</b> 0.16 seconds</li>
<li><b>MooX::Press:</b> 0.14 seconds</li>
<li><b>Moo + Type::Tiny:</b> 0.10 seconds</li>
</ul>]]>
    </content>
<title>blogs.perl.org: Zydeco::Lite</title></entry>
  <entry>
    
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/09/cy-077.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9875</id>

    <published>2020-09-13T17:22:50Z</published>
    <updated>2020-09-15T02:47:00Z</updated>

    <summary>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email). I found that I gained unnecessary promotion due to being in a GMT+8.00...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="perlweeklychallenge" label="perlweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p>

<p>I found that I gained unnecessary promotion due to being in a GMT+8.00 timezone - my blogpost appears on the top of <tt>http://blogs.perl.org</tt> for longer hours. </p>

<p>---</p>

<h4>Task 1 Fibonacci Sum</h4>

<p>Another dish for math geek!</p>

<p><i>Really??</i></p>

<h5>Coding Process</h5>

<p>I spent a whole day on the Perl script on Fib Sum task. I worked on 
it until night. Then I have a rest. In the morning next day, finally I 
gave up a subroutine for cases like <tt>"7, 5, 3" =&gt; "6, 5, 4, 3, 2, 1"</tt> or <tt>"11, 9" =&gt; "10, 9, 8, 7"</tt>.
 The hard time made me recall what I learnt after Challenge #055 Task 2 
Wave Array, using a hash to remove any duplicates occurred -- instead of
 crazy handling of exception cases again and again. </p>

<h5>Task Explanation</h5>

<p>For the sake of discussion, here we will use F<sub>0</sub> = 1 and F<sub>1</sub> = 1.</p>

<p>What pop up on my mind after examining the task statements was:</p>

<p>F<sub>k+2</sub> - 2 = F<sub>k</sub> + F<sub>k-1</sub> + F<sub>k-2</sub> + ... + F<sub>1</sub> (EQUATION I)</p>

<p>The second thought is the term "Fib base". I guess I heard of this 
jargon on Wikipedia or Online Encyclopedia of Integer Sequences. 
However, I hadn't studied the resources in details. Twist now. I could 
figure out there is always a summation of Fib number for all positive 
integers. It can be proved rigorously by mathematical induction with a 
construction from the greedy algorithm; assume all positive integers 
less than N can be written as a summation by Fib sum without 
repetitions, consider F<sub>r+1</sub> &gt; N ≥ F<sub>r</sub>: N - F<sub>r</sub> &lt; N and N - F<sub>r</sub> can be contructed by Fib numbers from the set {F<sub>r-2</sub>, ..., F<sub>2</sub>, F<sub>1</sub>} by the induction assumption, except N = F<sub>r</sub>.</p>

<p>By greedy algorithm, we can get a summation in which every term is seperated by at least one term in the Fib sequence.</p>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">get_fibfundsum_index</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$target</font>&nbsp;=&nbsp;<font color="#0000ff"><b>$_</b></font>[0];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@fans</font>&nbsp;=&nbsp;();<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$s</font>&nbsp;=&nbsp;<font color="#0000ff">$#FIBSEQ</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$target</font>&nbsp;!=&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$target</font>&nbsp;&gt;=&nbsp;<font color="#0000ff">$FIBSEQ</font>[<font color="#0000ff">$s</font>])&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$target</font>&nbsp;=&nbsp;<font color="#0000ff">$target</font>&nbsp;<font color="#ffa500">-</font>&nbsp;<font color="#0000ff">$FIBSEQ</font>[<font color="#0000ff">$s</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@fans</font>,&nbsp;<font color="#0000ff">$s</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$s</font>--;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#0000ff">@fans</font>;<br />
}<br />
<br />
</tt></div>

<p>I called it "the fundamental Fib summation of N". For example,  </p>
<ul><li>8 = 8</li><li>1 + 8 + 21 = 30</li><li>1 + 3 + 21 + 55 = 80</li><li>2 + 5 + 21 + 987 = 1015</li><li>8 + 55 + 987 = 1050</li></ul>

<p>Given N, are there more than one Fib summations which each term is seperated by at least one term in the Fib sequence?</p>

<p>No.</p>

<p>Why?</p>

<p>(Thanks for combinatorics textbook again.) Similar to Equation I, we have</p>

<ul><li>F<sub>k</sub> - 1 = F<sub>k-1</sub> + F<sub>k-3</sub> + F<sub>k-5</sub> + ... + F<sub>2</sub> for odd k (EQUATION II). </li><li>F<sub>k'</sub> - 1 = F<sub>k'-1</sub> + F<sub>k'-3</sub> + F<sub>k'-5</sub> + ... + F<sub>1</sub> for even k' (EQUATION III). </li></ul>

<p><small>(One can verify the three equations by mathematical induction.)</small></p>

<p>Since these sums are smaller than N, which is larger or equal to F<sub>k</sub> or F<sub>k'</sub>, we know from the greedy algorithm that a "reduced" Fib summation <sup>#</sup> of N must involved the largest Fib number which is smaller or equal to N.</p>

<p>As a feedback for the beginning sentence: This dish is not easy to be digested!</p>

<p>Now we have the one and only one reduced Fib summation for N. How do 
we get all other Fib summations (under the rule of no repetitions; omit 
this note starting from here)?</p>

<p><strong>Lemma:</strong> Every Fib summations of N can be constructed by some steps of "decomposing"/"<tt>expand</tt>ing"(used in my scripts) the fundamental Fib summation of N.</p>

<p><strong>Proof of the lemma:</strong> Proof by contradiction. Assume 
that there is a Fib summation of N which is unable to be decomposed from
 the fundamental Fib summation of N. <i>As it is not a reduced Fib 
summation of N, then it must be able to be composed as a reduced Fib 
summation of N. (I skipped some details for this statement.)</i> However, it exists one and only one reduced Fib summation of N, which is the fundamental Fib summation of N. !!!</p>

<p>Lots of math have been discussed. Here my Perl code comes as: </p>

<p>For&nbsp;each&nbsp;summation:</p>
<div><tt>
<b>while</b>&nbsp;(<font color="#0000ff">$bool_expandable</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">splice</font>(<font color="#0000ff">@newarr</font>,&nbsp;<font color="#0000ff">$index</font>,&nbsp;<font color="#00007f">1</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<font color="#0000ff">$arr</font>[<font color="#0000ff">$index</font>]<font color="#00007f">-1</font>,&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$index</font>]<font color="#00007f">-2</font>&nbsp;)&nbsp;)&nbsp;;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;is_it_new_discovery(<font color="#0000ff">@newarr</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@arr</font>&nbsp;=&nbsp;<font color="#0000ff">@newarr</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$index</font>&nbsp;=&nbsp;<font color="#0000ff">$index</font>+<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$bool_expandable</font>&nbsp;=&nbsp;(&nbsp;(&nbsp;<font color="#0000ff">$index</font>&nbsp;==&nbsp;<font color="#0000ff">$#arr</font>&nbsp;<font color="#ffa500">and</font>&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$index</font>]&nbsp;&gt;=&nbsp;<font color="#00007f">3</font>)&nbsp;<font color="#ffa500">or</font><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$index</font>+<font color="#00007f">1</font>])&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#ffa500">and</font>&nbsp;(<font color="#0000ff">$arr</font>[<font color="#0000ff">$index</font>]-<font color="#0000ff">$arr</font>[<font color="#0000ff">$index</font>+<font color="#00007f">1</font>]&nbsp;&gt;=&nbsp;<font color="#00007f">3</font>))&nbsp;);<br />
}&nbsp;&nbsp; #...<br /></tt></div>

<p><br /></p><p>For the "kernel":</p>
<div><tt><b>sub&nbsp;</b><font color="#007f00">fibsum</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$count</font>&nbsp;&gt;&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;0;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@oldlist</font>&nbsp;=&nbsp;<font color="#0000ff">@mainlist</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$size_of_oldlist</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@oldlist</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#0000ff">$size_of_oldlist</font>-<font color="#00007f">1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$p</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$oldlist</font>[<font color="#0000ff">$i</font>]})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expand(&nbsp;<font color="#0000ff">$p</font>&nbsp;,&nbsp;<font color="#0000ff">$oldlist</font>[<font color="#0000ff">$i</font>]&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}</tt></div>

<p><br /></p><p>Lastly, my script outputs summation by this line:</p>

<div><tt><font color="#007f00">print</font>&nbsp;<font color="#007f00">join</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">&nbsp;+&nbsp;</font><font color="#ffa500">"</font>,&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff">$FIBSEQ</font>[<font color="#0000ff"><b>$_</b></font>]}&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$array_k</font>};</tt></div>

<div><br /></div><p>Note: <tt>@mainlist</tt> stores lists, i.e. <tt>@mainlist</tt> is a list of lists; each list which stores the indices of the terms in a Fib summations.</p>

<p>Due to time concern, I did not work independently (not making a 
brute-force script to check the reliablity of my code). I verify my code
 against this calculator by Dr Ron Knott: <a href="http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibrep.html#section3.2">http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibrep.html#section3.2</a> .</p>

<p>Remarks: <br /># borrowed the term "reduced" from Linear Algebra. (/reduced echelon form/)</p>

<h4>Task 2 Lonely X</h4>

<p>It looks very simple. For a skeptical programmer, one will look for tricks. The characters of the trick are exactly "<tt>Y</tt>" and "<tt>P</tt>"
 (for vim users) from Challenge #076 Task 2 (the Grid). Trace: The idea 
is inspired by the tricks used by some other team members on Challenge 
#068 Task 2 Zero Matrix.</p>

<p>Here is the logic. My script goes through the columns, the rows, the diagonals and the anti-diagonals. If consecutive "X"s have been discovered, I name them as 
"I"s. If "XI" or "IX" has been discovered, turn the "X" into "I". 
Finally the script goes through the matrix once and count how many "X"s 
are left.</p>

<p>Questions to be asked: how much does my code optimize generally (or 
for what conditions)? Would this approach still behave nice in 3D grid 
or 4D grid?</p>

<h4>Experience on Other Programming Languages</h4>

<p>As said, unintentionally being occupied by Fib Sum task, I can only code Lisp and Python solution for Fib Sum task. (<tt><i>Lonely X</i></tt> is heavy for me: 155 lines.)</p>

<p>I tried to tidy my codes more.</p>

<p><b>For Lisp:</b> I need a throughout review of the Common Lisp textbook before I progress. Some syntax issues had dominated my time left.</p>

<p><b>For Python:</b> It is easy to translate the ideas from the Perl 
script into the Python script. Although there is no spare learning time,
 I still note that I want to know unit testing and commandline arguments
 for Python.</p>

<p>So many times I have ended blogposts with what to learn! I did <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-08/">an interview</a> for being last month's lucky coder in The Weekly Challenge; learning is again mentioned:</p>

<blockquote>Learning has been mentioned many times above. There are more
 than one ways to learn a programming language. Competitive programming 
is a way but it can be too stressful. Reading books is a way but it can 
be too lonely. Having the weekly challenges gets the balance.</blockquote>

<hr>
<p>The COVID-19 is being controlled in Hong Kong and social life is active again.</p>

<p>Near the closing of this blogpost, I admit that I cannot spell "Fibonacci" properly.</p>

<p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p>

<p>Stay alert and healthy! □</p>

<p><i>link for codes: <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-077/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-077/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt>, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-077/cheok-yin-fung/common-lisp/ch-1.lsp">ch-1.lsp</a></tt>, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-077/cheok-yin-fung/python/ch-1.py">ch-1.py</a></tt></i></p>]]>
        
    </content>
<title>blogs.perl.org:  Expand one into two - CY's Take on TWC#077</title></entry>
  <entry>
    
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/mohammad_s_anwar/2020/09/week-77-fibonacci-sum-and-lonely-x.html"/>
    <id>tag:blogs.perl.org,2020:/users/mohammad_s_anwar//990.9877</id>

    <published>2020-09-14T14:06:38Z</published>
    <updated>2020-09-14T14:10:28Z</updated>

    <summary> Please follow the blog where I discuss the "Fibonacci Sum" and "Lonely X" task of "The Weekly Challenge - 077". https://perlweeklychallenge.org/blog/weekly-challenge-077...</summary>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    
    <category term="perlrakuweeklychallenge" label="perl raku weekly challenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/weekly-challenge-077.jpg"></p>

<p>Please follow the blog where I discuss the "<strong>Fibonacci Sum</strong>"  and "<strong>Lonely X</strong>" task of <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-077">"The Weekly Challenge - 077"</a>.</p>

<p><a href="https://perlweeklychallenge.org/blog/weekly-challenge-077">https://perlweeklychallenge.org/blog/weekly-challenge-077</a></p>]]>
        
    </content>
<title>blogs.perl.org: Week #77: Fibonacci Sum and Lonely X</title></entry>
  <entry>
    
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/dean/2020/09/mid-september-software-releases-2020.html"/>
    <id>tag:blogs.perl.org,2020:/users/dean//558.9876</id>

    <published>2020-09-14T00:53:10Z</published>
    <updated>2020-09-14T00:57:28Z</updated>

    <summary>Perl5-IDEA 2020.2.3 (Perl5 plugins for IntelliJ IDEA) "Profiler support and bugfixes" https://github.com/Camelcade/Perl5-IDEA/releases/tag/2020.2.3 LemonLDAP-NG Apache::Session::Browseable v1.3.8 "This release contains fixes for CVE-2020-16093, which concerns LDAP server certificate verification when using LDAPS." https://github.com/LemonLDAPNG/Apache-Session-Browseable/releases/tag/v1.3.8 Pulled Pork 0.7.4 "This release includes numerous bug fixes...</summary>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p><strong>Perl5-IDEA 2020.2.3 (Perl5 plugins for IntelliJ IDEA)</strong></p>

<p>"Profiler support and bugfixes"</p>

<p><a href="https://github.com/Camelcade/Perl5-IDEA/releases/tag/2020.2.3">https://github.com/Camelcade/Perl5-IDEA/releases/tag/2020.2.3</a></p>

<p><strong>LemonLDAP-NG Apache::Session::Browseable v1.3.8</strong></p>

<p>"This release contains fixes for CVE-2020-16093, which concerns LDAP server certificate verification when using LDAPS."</p>

<p><a href="https://github.com/LemonLDAPNG/Apache-Session-Browseable/releases/tag/v1.3.8">https://github.com/LemonLDAPNG/Apache-Session-Browseable/releases/tag/v1.3.8</a></p>

<p><strong>Pulled Pork 0.7.4</strong></p>

<p>"This release includes numerous bug fixes for some issues that have been around for some time. PulledPork v0.7.4 has been tested with Snort 2.16.1 and Snort 3.0.1."</p>

<p><a href="https://github.com/shirkdog/pulledpork/releases/tag/v0.7.4">https://github.com/shirkdog/pulledpork/releases/tag/v0.7.4</a></p>

<p><strong>LedgerSMB</strong></p>

<p>Releases on each maintained branch</p>

<p><a href="https://github.com/ledgersmb/LedgerSMB/releases/tag/1.8.2">https://github.com/ledgersmb/LedgerSMB/releases/tag/1.8.2</a></p>

<p><a href="https://github.com/ledgersmb/LedgerSMB/releases/tag/1.7.21">https://github.com/ledgersmb/LedgerSMB/releases/tag/1.7.21</a></p>

<p><a href="https://github.com/ledgersmb/LedgerSMB/releases/tag/1.6.25">https://github.com/ledgersmb/LedgerSMB/releases/tag/1.6.25</a></p>

<p><br />
<strong>CLOC (Count Lines of Code) 1.88</strong></p>

<p>"Add missing Raku_or_Prolog() subroutine; new languages and file types LLVM IR, Logos, Meson, Mojo, Odin, Jinja Templates, WXML, WXSS; support MATLAB block comments; minor bug fixes."</p>

<p><a href="https://github.com/AlDanial/cloc/releases/tag/1.88">https://github.com/AlDanial/cloc/releases/tag/1.88</a></p>

<p><strong>SSL Tools (rolling)</strong></p>

<p>Pull requests accepted</p>

<p><a href="https://github.com/noxxi/p5-ssl-tools">https://github.com/noxxi/p5-ssl-tools</a></p>]]>
        
    </content>
<title>blogs.perl.org: Mid September Software Releases 2020</title></entry>
  <entry>
    <title>perl foundation news: Maintaining Perl 5 (Tony Cook): August 2020 Grant Report</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tony-report-20-08" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">


</div>
    </content>
    <id>https://news.perlfoundation.org/post/tony-report-20-08</id>
    <published>2020-09-07T13:06:21-04:00Z</published>
  </entry>
  <entry>
    <title>perl foundation news: Raku Development Fund</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/raku-development-fund" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
</div>
    </content>
    <id>https://news.perlfoundation.org/post/raku-development-fund</id>
    <published>2020-09-06T14:13:01-04:00Z</published>
  </entry>
  <entry>
    <title>perl foundation news: August report of the Raku Development Grant of Jonathan Worthington</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/jonathan-2020-08" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
</div>
    </content>
    <id>https://news.perlfoundation.org/post/jonathan-2020-08</id>
    <published>2020-09-04T08:12:29-04:00Z</published>
  </entry>
  <entry>
    <title>perl foundation news: Marketing Strategy for the Next Two Years</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/2yearmarketingstrategy" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
</div>
    </content>
    <id>https://news.perlfoundation.org/post/2yearmarketingstrategy</id>
    <published>2020-09-01T08:10:09-04:00Z</published>
  </entry>
  <entry>
    <title>perl foundation news: Maintaining Perl 5 (Tony Cook): July 2020 Grant Report</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tony-report-20-07" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">


</div>
    </content>
    <id>https://news.perlfoundation.org/post/tony-report-20-07</id>
    <published>2020-08-24T05:40:22-04:00Z</published>
  </entry>
  <entry>
    <title>perl.com: The Perl Ambassador: Curtis 'Ovid' Poe</title>
    <link rel="alternate" href="https://www.perl.com/article/the-perl-ambassador-curtis-poe/" type="text/html"/>
    <content type="html">

&lt;p&gt;This month&amp;rsquo;s interview is Curtis &amp;lsquo;Ovid&amp;rsquo; Poe, one of the most-respected and well-known leaders in the Perl community.&lt;/p&gt;

&lt;p&gt;Curtis has been building software for decades. He specializes in building database-driven websites through his global development and consulting firm, &lt;a href="https://allaroundtheworld.fr/"&gt;All Around The World&lt;/a&gt;. He&amp;rsquo;s the main developer behind &lt;a href="https://taustation.space/"&gt;Tau Station&lt;/a&gt;, a text-based Massive Multiplayer Online Browser Game (MMOBG) set in a vibrant, far-future universe.&lt;/p&gt;

&lt;p&gt;He&amp;rsquo;s the author of &lt;a href="https://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840/"&gt;Beginning Perl&lt;/a&gt; and &lt;a href="https://www.amazon.com/Perl-Hacks-Programming-Debugging-Surviving/dp/0596526741/"&gt;Perl Hacks&lt;/a&gt;. You can out more about his activities at &lt;a href="https://ovid.github.io/"&gt;https://ovid.github.io/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He joined The Perl Foundation &lt;a href="https://news.perlfoundation.org/post/new_board_member"&gt;boards of directors&lt;/a&gt; in 2009.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like me to interview you, or know someone you&amp;rsquo;d like me to interview, let me know. Take the same set of questions and send me your answers!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="how-did-you-first-start-using-perl"&gt;How did you first start using Perl?&lt;/h4&gt;

&lt;p&gt;I first started using Perl about 20 years ago, when I was doing mainframe programming. I was trying to fix a problem with a COBOL program that was converting a CSV file from an NT system to the fixed-width format that COBOL prefers. COBOL has many weaknesses and working with text is one of them. The code was 150 lines long, but that’s because the author didn’t understand how the COBOL’s unstring function worked. I got it down to 80 lines of COBOL. Out of curiosity, I tried it in Perl and got it down to 10 lines of code. Everything I touched in Perl was shorter and easier to read, so I jumped ship.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="what-do-you-think-about-perl-7-do-you-see-the-perl-is-on-the-path-of-recovery"&gt;What do you think about Perl 7? Do you see the Perl is on the path of recovery?&lt;/h4&gt;

&lt;p&gt;I am 100% on board with the project and yes, it&amp;rsquo;s the path for Perl&amp;rsquo;s recovery. I&amp;rsquo;ve seen widespread support for the change, which was heartening, and with the amount of press, even TIOBE moved Perl from 19 to 14th place, though I suspect it will drop back after the press dies down.&lt;/p&gt;

&lt;p&gt;However, there&amp;rsquo;s a difference between having a goal and having a plan. There&amp;rsquo;s widespread agreement on the goal, but there&amp;rsquo;s less agreement about the plan. That&amp;rsquo;s great so long as people can use this to find the best path. It&amp;rsquo;s less great if it devolves into acrimony. Fortunately, Sawyer&amp;rsquo;s been great at projecting a positive message.&lt;/p&gt;

&lt;p&gt;So long as we manage to protect businesses currently using Perl (and that means convincing Linux distros that we&amp;rsquo;re not going to break them), having a plan to better support active and new developers is awesome. And the version number change is a key first step.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="what-inspired-you-to-start-the-project-cor-when-are-you-planning-to-release-it"&gt;What inspired you to start the project &amp;ldquo;Cor&amp;rdquo;? When are you planning to release it?&lt;/h4&gt;

&lt;p&gt;First, for those who are not familiar with Cor, you can read about it at &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;https://github.com/Ovid/Cor/wiki&lt;/a&gt;. In short, Cor is a plan to add modern OO to the Perl core. But the motto is &amp;ldquo;&amp;lsquo;Good enough&amp;rsquo; is not good enough.&amp;rdquo; We have to stop settling for what we can have and start dreaming about what we want. For a trivial example, here&amp;rsquo;s a naïve LRU cache implementation in Cor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;class Cache::LRU {
    &lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Hash::Ordered;

    has $max_size :&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;(optional) :reader :isa(PositiveInt) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;;
    has $created  :reader &lt;span style="color:#f92672"&gt;=&lt;/span&gt; time;
    has $cache    :handles(get)  :builder;
    method _build_cache () { Hash::Ordered&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; }

    method set ( $key, $value ) {
        &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( $cache&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;exists($key) ) {
            $cache&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;delete($key);
        }
        &lt;span style="color:#66d9ef"&gt;elsif&lt;/span&gt; ( $cache&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;keys &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; $max_size ) {
            $cache&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;shift;
        }
        $cache&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;set( $key, $value );  &lt;span style="color:#75715e"&gt;# new values in front&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As for my motivation, like many developers, I was waiting for Stevan Little to finish his work to get a better OO system for the Perl core. But he was working mostly alone, for a long time, and that&amp;rsquo;s hard to do. So when I decided I wanted something, I was able to take a look at his work and realize it was solid. But I needed a better syntax.&lt;/p&gt;

&lt;p&gt;I tried to refine some of the syntax from Moo/se, but honestly, Moo/se has some serious limitations. Some are design decisions which can be easily corrected, but some are due to limitations in the Perl language itself. Once I had Sawyer&amp;rsquo;s backing, I realized that I didn&amp;rsquo;t just have to steal syntax, I could invent syntax, though I have done so very cautiously. It&amp;rsquo;s important that Cor still be Perl, but just a tiny sprinkling of syntactic sugar in the right spots makes a world of difference. So far it looks promising.&lt;/p&gt;

&lt;p&gt;And Sawyer said he hopes a v1 will be available under a feature guard in 7.2 or 7.4. With Perl 8, the feature guard would be removed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="how-does-your-company-all-around-the-world-help-people-with-perl"&gt;How does your company &amp;ldquo;All around the world&amp;rdquo; help people with Perl?&lt;/h4&gt;

&lt;p&gt;The consulting world is a mess. Anyone can call themselves a consultant and presto, they&amp;rsquo;re a consultant. This means that for the vast majority of consulting firms out there, quality is very hit-or-miss. So most companies hiring consultants are taking a huge gamble. But banks, insurance companies, and other &amp;ldquo;enterprise&amp;rdquo; companies prefer to stick with high-end consulting firms. From what I&amp;rsquo;ve seen, their code is more likely to do what you want it to do, but that&amp;rsquo;s only if you can afford them.&lt;/p&gt;

&lt;p&gt;So we decided to try a different approach. We can give our customers the reliability they want but at a more reasonable price if we do two things. First, we only hire the handful of senior developers who can pass both our technical test and a structured interview. Second, we limit the number of projects we take so we can dedicate serious attention to each customer. I&amp;rsquo;ll put our team&amp;rsquo;s quality up against the top-tier consulting firms any day of the week. But we&amp;rsquo;re going to cost a much less than they do and we&amp;rsquo;ll deliver faster, too.&lt;/p&gt;

&lt;p&gt;To give a concrete example, we had a client who had two weeks to improve their performance by an order of magnitude. They had worked with us before, so they turned to us. Here&amp;rsquo;s the &lt;a href="https://ovid.github.io/articles/project-500.html"&gt;case study&lt;/a&gt; of that project. It&amp;rsquo;s a fun read and gives you a lot of insight into how top-level developers really work.&lt;/p&gt;

&lt;p&gt;I should also note that while we have a deep specialization in Perl, we have also done work in quite a few other languages and technologies, such as Golang, C++, Lua, Node, Angular, and so on.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="how-is-tau-station-going-and-how-much-perl-helped-in-building-the-game"&gt;How is &amp;ldquo;Tau Station&amp;rdquo; going and how much Perl helped in building the game?&lt;/h4&gt;

&lt;p&gt;For those not familiar with it, &lt;a href="https://taustation.space"&gt;Tau Station&lt;/a&gt; is a free to play narrative MMORPG with the backend written entirely in Perl. It&amp;rsquo;s a beautiful sci-fi universe (unlike anything you&amp;rsquo;ve ever played before) and has all the stars within 20 light years of Earth. We&amp;rsquo;re around half a million lines of code and we&amp;rsquo;re still in open alpha. We&amp;rsquo;re currently in the &amp;ldquo;final stretch&amp;rdquo; of building what we feel we need, so we anticipate the launch by the end of this year. Perl&amp;rsquo;s tremendous flexibility has made it very easy to build out many of the features that we&amp;rsquo;ve needed. For example, we have a declarative system for building out many of the behaviors. Here&amp;rsquo;s how you refuel a spaceship:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;        Steps(
            Area(      $character &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; is_in            &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;docks&amp;#39;&lt;/span&gt; ),
            Ship(      $ship      &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; is_owned_by      &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $character ),
            Ship(      $ship      &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; is_docked_on     &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $character&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;station ),
            Character( $character &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; not_onboard_ship &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $ship ),
            Ship(      $ship      &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;needs_refueling&amp;#39;&lt;/span&gt; ),
            Money(     $character &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; pay              &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $ship&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_refuel_price ),
            Ship(      $ship      &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;refuel&amp;#39;&lt;/span&gt; ),
            Character(
                $character &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; set_cooldown &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
                    cooldown_type  &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;ship_refuel&amp;#39;&lt;/span&gt;,
                    period         &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $ship&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_refuel_time,
                },
            ),
        )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;People are sometimes surprised to learn that this is Perl code because it&amp;rsquo;s so easy to read, but they&amp;rsquo;d be even more surprised to learn that much of this would be harder to write in early-binding languages such as Java.&lt;/p&gt;

&lt;p&gt;And by creating standard components like that, the developer who creates a new kind of behavior for the game often doesn&amp;rsquo;t need to worry about database transactions, exceptions, or messages to the character. Instead, they can quickly assemble these &amp;ldquo;steps&amp;rdquo; in the correct order and you have new gameplay. If we ever had the time, we&amp;rsquo;d love to release the above framework as open source, but that would take time and we need to keep our clients happy, first.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="which-perl-modules-are-you-constantly-using-how-do-they-make-your-life-easier"&gt;Which Perl modules are you constantly using? How do they make your life easier?&lt;/h4&gt;

&lt;p&gt;&lt;a href="{&amp;lt;% mcpan Test::Class::Moose %&amp;gt;}"&gt;Test::Class::Moose&lt;/a&gt; is a go to module for me. Most Perl developers learn how to test modules, not applications. With &lt;a href="{&amp;lt;% mcpan Test::Class::Moose %&amp;gt;}"&gt;Test::Class::Moose&lt;/a&gt;, large test suites become easier to build and manage and, when it&amp;rsquo;s written correctly, many test suites can be an order of magnitude faster.&lt;/p&gt;

&lt;p&gt;I also have a module I write for personal code called &lt;code&gt;Less::Boilerplate&lt;/code&gt;. It&amp;rsquo;s not on the CPAN because it&amp;rsquo;s too fine-tuned for my personal needs, but naturally it enables &lt;a href="{&amp;lt;% mcpan strict %&amp;gt;}"&gt;strict&lt;/a&gt;, &lt;a href="{&amp;lt;% mcpan warnings %&amp;gt;}"&gt;warnings&lt;/a&gt;, signatures, &lt;a href="{&amp;lt;% mcpan autodie %&amp;gt;}"&gt;autodie&lt;/a&gt;, and other features without having to type everything out by hand. And it pleases me to have the double meaning of &lt;code&gt;use Less::Boilerplate&lt;/code&gt; at the top of my code. Yet it&amp;rsquo;s part of the issue that Sawyer&amp;rsquo;s pointed out with Perl. New Perl developers don&amp;rsquo;t know the strange incantations experienced Perl developers put at the top of their code to get Perl to be reasonable. That hurts the language because they get a poor &amp;ldquo;out of the box&amp;rdquo; experience.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="which-perl-feature-do-you-overuse"&gt;Which Perl feature do you overuse?&lt;/h4&gt;

&lt;p&gt;It used to be the punctuation variables that I would sprinkle around my code like magic pixie dust. Things like local &lt;code&gt;$&amp;quot; = ', '&lt;/code&gt; were natural to me. But I&amp;rsquo;ve stopped doing that because honestly, it&amp;rsquo;s not readable. I do a lot of client work so I take care to ensure that my code is (as much as I can), easy to read and maintain. I&amp;rsquo;ve even rewritten some of my code to &amp;ldquo;dumb it down&amp;rdquo; because I want to ensure that it&amp;rsquo;s maintainable.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="which-perl-feature-do-you-wish-you-could-use-more"&gt;Which Perl feature do you wish you could use more?&lt;/h4&gt;

&lt;p&gt;Given that clients call me in to help build new systems or fix existing ones, I pretty much get to pick and choose what features I want to use, so I&amp;rsquo;m fortunate in that regard. Thus, there&amp;rsquo;s not much I don&amp;rsquo;t get to use if I think it&amp;rsquo;s useful. However, a feature I wish I could use more is a feature that doesn&amp;rsquo;t exist: more standardized introspection tools, similar to a MOP. Mucking about in the symbol table for the things I need, or pulling in external libraries to find out where my code is located in the filesystem is frustrating. I often write code that magically &amp;ldquo;works&amp;rdquo; without having to be loaded (similar to plugins). But without standardized, cross-platform tools for finding the code, loading it dynamically, converting between package and filenames automatically, I find that I&amp;rsquo;m often rewriting this code again, for a different client, based on their operating system, file system layout, and so on.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h4 id="what-one-thing-you-d-like-to-change-about-perl"&gt;What one thing you&amp;rsquo;d like to change about Perl?&lt;/h4&gt;

&lt;p&gt;How variables behave. There are a few things in that, but mainly, I wish Perl had invariant sigils like Raku and that arrays and hashes wouldn&amp;rsquo;t flatten unless requested. But I&amp;rsquo;m not going to get that, so let&amp;rsquo;s pretend I didn&amp;rsquo;t ask :)&lt;/p&gt;

&lt;p&gt;(Hmm, working threads might be interesting, too)&lt;/p&gt;
</content>
    <id>https://www.perl.com/article/the-perl-ambassador-curtis-poe/</id>
    <published>2020-08-08T04:40:00Z</published>
    <updated>2020-08-08T04:40:00Z</updated>
  </entry>
  <entry>
    <title>perl.com: What's new on CPAN - June 2020</title>
    <link rel="alternate" href="https://www.perl.com/article/what-s-new-on-cpan-june-2020/" type="text/html"/>
    <content type="html">

&lt;p&gt;Welcome to &amp;ldquo;What&amp;rsquo;s new on CPAN&amp;rdquo;, a curated look at last month&amp;rsquo;s new CPAN uploads for your reading and programming pleasure. Enjoy!&lt;/p&gt;

&lt;h2 id="apis-apps"&gt;APIs &amp;amp; Apps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/App::Timestamper::WithElapsed"&gt;App::Timestamper::WithElapsed&lt;/a&gt; for every line of STDIN displays a timestamp and the elapsed seconds since the last line&lt;/li&gt;
&lt;li&gt;Get a command line client for cPanel UAPI and API 2 using &lt;a href="https://metacpan.org/pod/App::cpanel"&gt;App::cpanel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Introspect C/C++ code with CastXML &lt;a href="https://metacpan.org/pod/Clang::CastXML"&gt;Clang::CastXML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/OpenTelemetry"&gt;OpenTelemetry&lt;/a&gt; supports application process monitoring as defined by opentelemetry.io&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/OpenTracing::Interface"&gt;OpenTracing::Interface&lt;/a&gt; defines an API for opentracing (precursor to opentelemetry)&lt;/li&gt;
&lt;li&gt;Send SMS via VoIP.ms with &lt;a href="https://metacpan.org/pod/SMS::Send::VoIP::MS"&gt;SMS::Send::VoIP::MS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="config-devops"&gt;Config &amp;amp; Devops&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/App::PP::Autolink"&gt;App::PP::Autolink&lt;/a&gt; can create standalone Perl executables, finding dynamic libs automatically&lt;/li&gt;
&lt;li&gt;Get a simple interface for creating and verifying One Time Passwords as used by authenticator apps with &lt;a href="https://metacpan.org/pod/Authen::TOTP"&gt;Authen::TOTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Guacamole"&gt;Guacamole&lt;/a&gt; is a parser toolkit for Standard Perl - also see Sawyer X&amp;rsquo;s recent &lt;a href="https://www.youtube.com/watch?v=sTEshbh2lYQ"&gt;talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Neo4j::Client"&gt;Neo4j::Client&lt;/a&gt; helps configure and build the C based neo4j-client library&lt;/li&gt;
&lt;li&gt;Create and verify password hashes for OpenSMTPD using &lt;a href="https://metacpan.org/pod/OpenSMTPD::Password"&gt;OpenSMTPD::Password&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="data"&gt;Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quickly extract raw values from Excel XLSX spreadsheets with &lt;a href="https://metacpan.org/pod/Excel::ValueReader::XLSX"&gt;Excel::ValueReader::XLSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/SkewHeap::PP"&gt;SkewHeap::PP&lt;/a&gt; is a fast and flexible heap structure&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Text::Mrkdwn::Escape"&gt;Text::Mrkdwn::Escape&lt;/a&gt; can escape text for inclusion in the markdown variant used by Slack&lt;/li&gt;
&lt;li&gt;Perform HTTP Encrypted Content Encoding (AES 128-bit Galois/Counter Mode) with &lt;a href="https://metacpan.org/pod/Crypt::RFC8188"&gt;Crypt::RFC8188&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="development-version-control"&gt;Development &amp;amp; Version Control&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Analyze/Rename/Track Perl source code, includes a vim plugin: &lt;a href="https://metacpan.org/pod/Code::ART"&gt;Code::ART&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Future::Buffer"&gt;Future::Buffer&lt;/a&gt; implements a Futures-based string buffer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Mojolicious::Command::Author::generate::cpanfile"&gt;Mojolicious::Command::Author::generate::cpanfile&lt;/a&gt; creates a cpanfile by scanning your source code for dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Sys::Pipe"&gt;Sys::Pipe&lt;/a&gt; provides access to the non-blocking &lt;code&gt;pipe2()&lt;/code&gt; system call&lt;/li&gt;
&lt;li&gt;Get fast and minimal code coverage stats using &lt;a href="https://metacpan.org/pod/Test2::Plugin::Cover"&gt;Test2::Plugin::Cover&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="hardware"&gt;Hardware&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get a chip driver for Noritake GU-D display modules using &lt;a href="https://metacpan.org/pod/Device::Chip::NoritakeGU_D"&gt;Device::Chip::NoritakeGU_D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/PINE64::MCP300x"&gt;PINE64::MCP300x&lt;/a&gt; provides an interface to the MCP300x family of 10-bit analog to digital converters&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/PINE64::MCP3208"&gt;PINE64::MCP3208&lt;/a&gt; provides an interface to the MCP3208 12-bit SPI analog to digital converters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="language-international"&gt;Language &amp;amp; International&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Getopt::EX::i18n"&gt;Getopt::EX::i18n&lt;/a&gt; sets the environment locale via a command line option&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Translate::Fluent"&gt;Translate::Fluent&lt;/a&gt; is a Perl implementation of the Mozilla localization project to create more natural-sounding translations&lt;/li&gt;
&lt;/ul&gt;
</content>
    <id>https://www.perl.com/article/what-s-new-on-cpan-june-2020/</id>
    <published>2020-07-29T01:10:28Z</published>
    <updated>2020-07-29T01:10:28Z</updated>
  </entry>
  <entry>
    <title>perl.com: A tour with Net::FTP</title>
    <link rel="alternate" href="https://www.perl.com/article/a-tour-with-net-ftp/" type="text/html"/>
    <content type="html">

&lt;p&gt;When we want to have a way to exchange files between machines, we often think about rsync, scp, git or even something slow and complex (looking at you Artifactory and S3), but the answer is often right in front of your eyes: FTP!&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;File Transfer Protocol&amp;rdquo; provides a very simple and convenient way to share files. It&amp;rsquo;s battle-tested, requires almost no maintenance, and has a simple anonymous access mechanism. It can be integrated with several standard auth methods and even some virtual ones, none of which I show here.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/a-tour-with-net-ftp/battlereadymeow.jpeg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In this article, I&amp;rsquo;ll install a local FTP server and create a simple FTP client in Perl.&lt;/p&gt;

&lt;h2 id="a-bit-of-context"&gt;A bit of context&lt;/h2&gt;

&lt;p&gt;At &lt;code&gt;$work&lt;/code&gt; I have to carry on an army of developers that create customized build pipelines from handcrafted local configuration files.&lt;/p&gt;

&lt;p&gt;This file is not hosted &amp;ldquo;by design&amp;rdquo; like you would have with Travis CI or a GitHub Action, but it is used to feed a &amp;ldquo;heavy client&amp;rdquo; that parses, resolves templates, and creates a workspace in some centralized automations servers through HTTP API calls.&lt;/p&gt;

&lt;p&gt;It was a lot of support to help developers to create this file according to the spec (yet another file format), and we were blind when we wanted to help them with failing workspace creation/build (no way to retrieve configuration from workspace).&lt;/p&gt;

&lt;p&gt;I got the idea to backup and centralize automatically the configuration file during the creation of the build pipeline workspace. It was intended to help both developers (configuration &amp;ldquo;samples&amp;rdquo;) and support team (see history, versioned then we can check diffs, file to replay). The constraints were to be able to exchange file from various places with variable users. The FTP protocol is a perfect fit for that.&lt;/p&gt;

&lt;p&gt;I added also a cronjob to autocommit and push to a git repository and we had magically a website listing versioned configurations files.&lt;/p&gt;

&lt;p&gt;In addition, FTP proved later to also require zero support. I mean really zero maintenance!&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/a-tour-with-net-ftp/toolowmaintenance.jpg" alt="" /&gt;&lt;/p&gt;

&lt;h2 id="download-and-install-ftpd"&gt;Download and install ftpd&lt;/h2&gt;

&lt;p&gt;I decided to use &lt;a href="https://www.pureftpd.org/project/pure-ftpd/"&gt;pure-ftpd&lt;/a&gt; but there are some other good alternatives if you want.&lt;/p&gt;

&lt;p&gt;First I download the tarball, untar it, and change into its directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ wget https://download.pureftpd.org/pub/pure-ftpd/releases/pure-ftpd-1.0.49.tar.gz
$ tar xvzf pure-ftpd-1.0.49.tar.gz
$ cd pure-ftpd-1.0.49/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I configure &lt;code&gt;ftpd&lt;/code&gt; so I can execute it as casual (non-root) user using a non-restricted port, and I&amp;rsquo;ll set the destination directory to my &lt;code&gt;$HOME/ftpd&lt;/code&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ ./configure --prefix&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$HOME/ftpd --with-nonroot &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I create two directories. The &lt;em&gt;ftp&lt;/em&gt; is what I&amp;rsquo;ll publish and &lt;em&gt;run&lt;/em&gt; is where I&amp;rsquo;ll put the pidfile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ cd $HOME/ftpd
$ mkdir ftp
$ mkdir run&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the ftp server. I need to give some custom configurations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FTP_ANON_DIR&lt;/code&gt; is the directory I want to publish&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; allows anonymous access&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-M&lt;/code&gt; allows anonymous users to create directories&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; specifies the directory for the pidfile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ FTP_ANON_DIR&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;pwd&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;/ftp ; ./sbin/pure-ftpd -e -M -g run &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point I should have a running ftp server. Let&amp;rsquo;s check!&lt;/p&gt;

&lt;h2 id="test-with-ftp"&gt;Test with ftp&lt;/h2&gt;

&lt;p&gt;First, I test with the preinstalled &lt;code&gt;ftp&lt;/code&gt; client. If everything is fine I see the typical FTP exchange:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ ftp localhost &lt;span style="color:#ae81ff"&gt;2121&lt;/span&gt;
Connected to localhost.
&lt;span style="color:#ae81ff"&gt;220&lt;/span&gt;---------- Welcome to Pure-FTPd ----------
&lt;span style="color:#ae81ff"&gt;220&lt;/span&gt;-You are user number &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; of &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt; allowed.
&lt;span style="color:#ae81ff"&gt;220&lt;/span&gt;-Local time is now &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;:56. Server port: &lt;span style="color:#ae81ff"&gt;2121&lt;/span&gt;.
&lt;span style="color:#ae81ff"&gt;220&lt;/span&gt;-Only anonymous FTP is allowed here
&lt;span style="color:#ae81ff"&gt;220&lt;/span&gt; You will be disconnected after &lt;span style="color:#ae81ff"&gt;15&lt;/span&gt; minutes of inactivity.
Name &lt;span style="color:#f92672"&gt;(&lt;/span&gt;localhost:tib&lt;span style="color:#f92672"&gt;)&lt;/span&gt;:
&lt;span style="color:#ae81ff"&gt;230&lt;/span&gt; Anonymous user logged in
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I get &lt;code&gt;ftp: connect: Connection refused&lt;/code&gt; it&amp;rsquo;s probably one of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ftpd&lt;/code&gt; is not running (check with &lt;code&gt;ps aux | grep &amp;quot;ftp[d]&amp;quot;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using the wrong port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I get &lt;code&gt;421 Can't change directory to /home/tib/ftpd/ftp/ [/]&lt;/code&gt; it&amp;rsquo;s probably because I haven&amp;rsquo;t created the directory I specified in &lt;code&gt;FTP_ANON_DIR&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="simple-client-in-perl"&gt;Simple client in Perl&lt;/h2&gt;

&lt;p&gt;Ok that&amp;rsquo;s cool, but I only played with ftp server and preinstalled &lt;code&gt;ftp&lt;/code&gt; client until now. What about writing some Perl now?&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/a-tour-with-net-ftp/whatif.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="h{{&amp;lt; mcpan &amp;quot;Net::FTP&amp;quot; &amp;gt;}}"&gt;Net::FTP&lt;/a&gt; is a superb &lt;a href="https://metacpan.org/"&gt;CPAN&lt;/a&gt; module dedicated to FTP protocol and I&amp;rsquo;ll use that.&lt;/p&gt;

&lt;h3 id="simple-listing"&gt;Simple listing&lt;/h3&gt;

&lt;p&gt;First, a very simple listing script &lt;code&gt;ls.pl&lt;/code&gt;. This program connects to the server, asks for a list of files, and outputs each one. It&amp;rsquo;s clear that&amp;rsquo;s super easy and straightforward to play with FTP in Perl!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Net::FTP;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $HOST &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $PORT &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2121&lt;/span&gt;;


&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ftp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Net::FTP&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;($HOST, Port &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
	&lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
&lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $f ($ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;ls()) { &lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;$f\n&amp;#34;&lt;/span&gt;; }
$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;quit;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="upload"&gt;Upload&lt;/h3&gt;

&lt;p&gt;What next?  Maybe upload something? Again, it&amp;rsquo;s super simple. Instead of listing files, I&amp;rsquo;m &lt;code&gt;put&lt;/code&gt;ting them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Net::FTP;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $HOST &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $PORT &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2121&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ftp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Net::FTP&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;($HOST, Port &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
	&lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
&lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $file(@ARGV) {
    $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;put(&lt;span style="color:#e6db74"&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;)
    	&lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot put $file&amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
}
$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;quit;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I run this and supply the files I want to upload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl upload.pl file1.txt file2.txt&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="put-things-together"&gt;Put things together&lt;/h2&gt;

&lt;p&gt;I propose a more complete client with some command-line parsing and more actions. In addition to the previous code for listing and uploading, here I added a way to view a file. &lt;a href="https://metacpan.org/pod/Getopt::Long"&gt;Getopt::Long&lt;/a&gt; to handle command line parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Getopt::Long;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; File::Slurp;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Net::FTP;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $HOST &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $PORT &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2121&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %options &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ();

GetOptions(
	&lt;span style="color:#e6db74"&gt;&amp;#34;action|c=s&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;\&lt;/span&gt;$options{&lt;span style="color:#e6db74"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;},
	&lt;span style="color:#e6db74"&gt;&amp;#34;file|f=s&amp;#34;&lt;/span&gt;   &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;\&lt;/span&gt;$options{&lt;span style="color:#e6db74"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;},
	&lt;span style="color:#e6db74"&gt;&amp;#34;help|h&amp;#34;&lt;/span&gt;     &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;\&lt;/span&gt;$options{&lt;span style="color:#e6db74"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;}
	);

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;print_usage&lt;/span&gt;() {
	&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;List all files :\n\t$0 -c list\n&amp;#34;&lt;/span&gt;;
	&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Upload file :\n\t$0 -c upload -f file.txt\n&amp;#34;&lt;/span&gt;;
	&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Print file :\n\t$0 -c view -f file.txt\n\n&amp;#34;&lt;/span&gt;;
}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_ftp&lt;/span&gt;() {
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ftp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Net::FTP&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;($HOST, Port &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $PORT, Debug &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
		&lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot connect to $HOST: $@&amp;#34;&lt;/span&gt;;
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
}

&lt;span style="color:#75715e"&gt;# ls / on remote ftp&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;list&lt;/span&gt;() {
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ftp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_ftp();
	&lt;span style="color:#66d9ef"&gt;foreach&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $f ($ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;ls()) { &lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;$f\n&amp;#34;&lt;/span&gt;; }
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style="color:#75715e"&gt;# Upload a file&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;upload&lt;/span&gt;($) {
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;
	(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;e $file) &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ftp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_ftp();
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;login() &lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot login &amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;put(&lt;span style="color:#e6db74"&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot put $file &amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style="color:#75715e"&gt;# Read a file&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;view&lt;/span&gt;($) {
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $file &lt;span style="color:#f92672"&gt;=&lt;/span&gt; shift;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ftp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_ftp();
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get(&lt;span style="color:#e6db74"&gt;&amp;#34;$file&amp;#34;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;or&lt;/span&gt; die &lt;span style="color:#e6db74"&gt;&amp;#34;Cannot read $file &amp;#34;&lt;/span&gt;, $ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;message;
        &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;e $file) { &lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; read_file($file); }
	$ftp&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;quit;
}

&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt;($options{&lt;span style="color:#e6db74"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style="color:#f92672"&gt;eq&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;list&amp;#39;&lt;/span&gt;) {
	list();
} &lt;span style="color:#66d9ef"&gt;elsif&lt;/span&gt;($options{&lt;span style="color:#e6db74"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style="color:#f92672"&gt;eq&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;) {
	upload($options{&lt;span style="color:#e6db74"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;});
} &lt;span style="color:#66d9ef"&gt;elsif&lt;/span&gt;($options{&lt;span style="color:#e6db74"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;} &lt;span style="color:#f92672"&gt;eq&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;view&amp;#39;&lt;/span&gt;) {
	view($options{&lt;span style="color:#e6db74"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;});
} &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
	print_usage();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="more-about-design-and-security"&gt;More about design and security&lt;/h2&gt;

&lt;p&gt;This thin wrapper can be extended to do more tasks, such as checking allowed or disallowed name patterns or tidying files depending the uploader or the prefix in the name of the file. Remember, this is only on the client side! If you want real guarantees you would better have to implement some kind of protections on the server side too. But, the goal was not to discuss security here but to play with FTP! And I hope you had a pleasant tour with me and &lt;a href="https://metacpan.org/pod/Net::FTP"&gt;Net::FTP&lt;/a&gt;!&lt;/p&gt;
</content>
    <id>https://www.perl.com/article/a-tour-with-net-ftp/</id>
    <published>2020-07-13T11:48:52Z</published>
    <updated>2020-07-13T11:48:52Z</updated>
  </entry>
  <entry>
    <title>perl.com: Listen to Larry Wall's State of the Onion 2000 on YouTube</title>
    <link rel="alternate" href="https://www.perl.com/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/author/TODDR"&gt;Todd Rinaldo&lt;/a&gt; has uploaded Larry&amp;rsquo;s State of the Onion talk from YAPC &lt;del&gt;19100&lt;/del&gt; 2000 to &lt;a href="https://www.youtube.com/watch?v=a1SEt_-QMDo"&gt;YouTube&lt;/a&gt;. Previously it was available in separate mp3 files, but this is much more accessible.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a typical Larry talk filled with quirky, humorous observations about life and programming, and notably he announces the Perl 6 project.&lt;/p&gt;

&lt;p&gt;Unfortunately the audio is low quality (hey it was 20 years ago at a low-budget conference); you can read a transcript of the talk &lt;a href="https://www.perl.com/pub/2000/10/23/soto2000.html/"&gt;here&lt;/a&gt; (with mp3 download links at the bottom). We also have collection of attendees&amp;rsquo; &lt;a href="https://www.perl.com/pub/2000/07/yapc19101.html/"&gt;reports&lt;/a&gt; from the conference.&lt;/p&gt;

&lt;p&gt;If you enjoy Larry&amp;rsquo;s talks, you might like some of his other &lt;a href="https://www.perl.com/authors/larry-wall/"&gt;transcribed talks / articles&lt;/a&gt;.&lt;/p&gt;
</content>
    <id>https://www.perl.com/article/listen-to-larry-wall-s-state-of-the-onion-2000-on-youtube/</id>
    <published>2020-07-10T09:07:55Z</published>
    <updated>2020-07-10T09:07:55Z</updated>
  </entry>
  <entry>
    <title>perl.com: Announcing Perl 7</title>
    <link rel="alternate" href="https://www.perl.com/article/announcing-perl-7/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;image credit: &lt;a href="https://www.flickr.com/photos/darren/"&gt;Darren Wood&lt;/a&gt;, &lt;a href="https://www.flickr.com/photos/darren/3680674672/in/photolist-6Bfqm9-ino1FQ-g9QYp-LBqJ8U-2imZyN9-2g4LBC9-JrtM4R-MsDZU1-MkbMoz-BSxoYD-KHTzJX-JYzksq-G9dfcP-G5Byr3-LrnQMb-6hwfHT-9i4upm-oJfAkJ-8cQQBf-6NVCN1-Ph8487-N1UVUo-mrXQmx-8GoTKf-6fqvZk-Gi1cPH-Mae7Mo-282AxcA-Hvehqx-HbZrvj-YoKVff-H1FRCw-d81uq-jyUXx9-JZGmJj-JTpLp-82ZDob-P19B5f-EQFLnh-aJpXi-LyYS7u-9X3iK-CCTZD-bdCtm-5SGWuB-ET4D6C-9vWh2c-4mieMj-HpYqSw-2iHee4g"&gt;&amp;ldquo;7&amp;rdquo;&lt;/a&gt;, on Flickr.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;This morning at &lt;a href="https://perlconference.us/tpc-2020-cloud/"&gt;The Perl Conference in the Cloud&lt;/a&gt;, Sawyer X announced that Perl has a new plan moving forward. Work on Perl 7 is already underway, but it&amp;rsquo;s not going to be a huge change in code or syntax. It&amp;rsquo;s Perl 5 with modern defaults and it sets the stage for bigger changes later. My latest book &lt;a href="https://leanpub.com/preparing_for_perl7"&gt;Preparing for Perl 7&lt;/a&gt; goes into much more detail.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="perl-7-is-going-to-be-perl-5-32-mostly"&gt;Perl 7 is going to be Perl 5.32, mostly&lt;/h2&gt;

&lt;p&gt;Perl 7.0 is going to be v5.32 but with different, saner, more modern defaults. You won&amp;rsquo;t have to enable most of the things you are already doing because they are enabled for you. The major version jump sets the boundary between how we have been doing things and what we can do in the future.&lt;/p&gt;

&lt;p&gt;Remember, Perl was the &amp;ldquo;Do what I mean&amp;rdquo; language where the defaults were probably what you wanted to do. In Perl 4 and the early days of Perl 5, that was easy. But, it&amp;rsquo;s been a couple of decades and the world is more complicated now. We kept adding pragmas, but with Perl&amp;rsquo;s commitment to backward compatibility, we can&amp;rsquo;t change the default settings. Now we&amp;rsquo;re back to the old days of C where we have to include lots of boilerplate before we start doing something:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; utf8;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; open &lt;span style="color:#e6db74"&gt;qw(:std :utf8)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; feature &lt;span style="color:#e6db74"&gt;qw(indirect)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; feature &lt;span style="color:#e6db74"&gt;qw(signatures)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; warnings &lt;span style="color:#e6db74"&gt;qw(experimental::signatures)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is slightly better with v5.12 and later because we get &lt;a href="https://www.effectiveperlprogramming.com/2010/08/implicitly-turn-on-strictures-with-perl-5-12/"&gt;&lt;code&gt;strict&lt;/code&gt; for free&lt;/a&gt; by using setting a minimum version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.32&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; utf8;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; open &lt;span style="color:#e6db74"&gt;qw(:std :utf8)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; feature &lt;span style="color:#e6db74"&gt;qw(indirect)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; feature &lt;span style="color:#e6db74"&gt;qw(signatures)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; warnings &lt;span style="color:#e6db74"&gt;qw(experimental::signatures)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl 7 is a chance to make some of these the default even without specifying the version. Perl 5 still has Perl 5&amp;rsquo;s extreme backward compatibility behavior, but Perl 7 gets modern practice with minimal historical baggage. I&amp;rsquo;m personally hoping signatures makes the cut, but there&amp;rsquo;s still much to be done to make Unicode the default, so you&amp;rsquo;ll probably need to keep some of that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; utf8;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; open &lt;span style="color:#e6db74"&gt;qw(:std :utf8)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might miss some seedier features that you shouldn&amp;rsquo;t be using anyway, such as the indirect object notation. Larry Wall said he had to do something for the C++ programmers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $cgi &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; CGI;  &lt;span style="color:#75715e"&gt;# indirect object, but not in Perl 7&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $cgi &lt;span style="color:#f92672"&gt;=&lt;/span&gt; CGI&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;; &lt;span style="color:#75715e"&gt;# direct object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, the feature doesn&amp;rsquo;t really disappear in Perl 7. It&amp;rsquo;s already &lt;a href="https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/"&gt;a setting in v5.32&lt;/a&gt;, but now with a different default.&lt;/p&gt;

&lt;h2 id="what-s-happening-to-perl-5"&gt;What&amp;rsquo;s happening to Perl 5?&lt;/h2&gt;

&lt;p&gt;No one is taking Perl 5 away from you; it goes into long term maintenance mode—a lot longer than the two years of rolling support for the two latest user versions. That might be up to a decade from now (or half the time Perl 5 has already been around).&lt;/p&gt;

&lt;h2 id="when-is-this-happening"&gt;When is this happening?&lt;/h2&gt;

&lt;p&gt;The work is happening now, but you won&amp;rsquo;t need to worry about it for about six months when the first release candidate should appear. The target for a user release of Perl 7.0 within the next year, with some release candidates along the way.&lt;/p&gt;

&lt;p&gt;This is an easy promise to keep, too, since Perl 7 is mostly v5.32 with different defaults. There&amp;rsquo;s no big rewrite or new features, although some currently experimental features may stabilize (please choose signatures!).&lt;/p&gt;

&lt;h2 id="what-about-cpan"&gt;What about CPAN?&lt;/h2&gt;

&lt;p&gt;The Comprehensive Perl Archive Network, CPAN, has almost 200,000 modules. The maintained modules that people are using should still work, and for the rest there will be a compatibility mode. Remember  Perl 7 is mostly v5.32 so you shouldn&amp;rsquo;t need to change much.&lt;/p&gt;

&lt;p&gt;You may not know that the &lt;a href="https://lists.perl.org/list/perl5-porters.html"&gt;Perl5 Porters&lt;/a&gt; tests new versions against almost all of CPAN. There&amp;rsquo;s a long history of tools to check the effect that changes may have on the Perl community. As a module author, I often get messages from various people, mostly Andreas Koenig or Slaven Rezić, about weird things in my modules that may break with new Perls. Usually, it&amp;rsquo;s something I need to update anyway. Tracking down problems with existing code is a solved problem. Fixing code shouldn&amp;rsquo;t be that onerous because it&amp;rsquo;s still Perl 5, but with better practices.&lt;/p&gt;

&lt;p&gt;Will there be a separate CPAN for Perl 7? No one has said there can&amp;rsquo;t be, but in the jump to Perl 7, the developers don&amp;rsquo;t want to redo what&amp;rsquo;s already working. This change should be manageable with as few side quests as possible.&lt;/p&gt;

&lt;p&gt;Also, PAUSE, the Perl Authors Upload Server, has received quite a bit of love in the past couple of years. That makes it easier for them to adapt to future needs. The people working on that are experienced and talented, and they&amp;rsquo;ve made the codebase much more tractable.&lt;/p&gt;

&lt;h2 id="why-the-jump-to-a-major-version"&gt;Why the jump to a major version?&lt;/h2&gt;

&lt;p&gt;A major version can have a different contract with the user. A major version jump changes that contract with new default behavior, even if that conflicts with the past. There will be a way to reset all of those settings to the old Perl 5 default if you like. Perl 7 code will still be v5.32 code (mostly) in syntax and behavior though.&lt;/p&gt;

&lt;p&gt;Sawyer speaks about three major market segments of Perl users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People who are never going to change their code&lt;/li&gt;
&lt;li&gt;People who use new features&lt;/li&gt;
&lt;li&gt;People starting from scratch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perl 5&amp;rsquo;s social contract is extreme backward compatibility, and has been amazingly successful with that. The problem is that the extreme backward compatibility works for those who won&amp;rsquo;t update their code, but doesn&amp;rsquo;t help the two other segments. The new features crowd has to deal with a longer boilerplate section in every program, and newbies wonder why they have to include so much just to create a program so people on StackOverflow won&amp;rsquo;t hector them over missing pragmas.&lt;/p&gt;

&lt;h2 id="why-7-and-not-6"&gt;Why 7 and not 6?&lt;/h2&gt;

&lt;p&gt;There are two parts to this answer. First, &amp;ldquo;Perl 6&amp;rdquo; was already taken by what is now known as &lt;a href="https://raku.org"&gt;Raku&lt;/a&gt;. A long time ago, we thought that a very ambitious rewrite effort would replace v5.8. In short, that&amp;rsquo;s not what happened and the language has gone on to live a life of its own.&lt;/p&gt;

&lt;p&gt;So, 7 was the next available number. That&amp;rsquo;s it. It&amp;rsquo;s just the next cardinal number in line. It&amp;rsquo;s not unheard of to make such a jump: PHP went directly from 5 to 7, and isn&amp;rsquo;t it time to steal something from that community? Consider these other weird jumps in history:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Solaris 2.6 to Solaris 7&lt;/li&gt;
&lt;li&gt;Java 1.4 to Java 5&lt;/li&gt;
&lt;li&gt;Postgres 9.x as the major version to Postgres 10 as the major version&lt;/li&gt;
&lt;li&gt;Windows 3.1 to Windows 95 (98, ME, 2000, XP, Vista, 7, 8, 10)&lt;/li&gt;
&lt;li&gt;TeX (each new version more closely approximates π)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At least it&amp;rsquo;s not Perl 34.&lt;/p&gt;

&lt;h2 id="what-s-disappearing"&gt;What&amp;rsquo;s disappearing?&lt;/h2&gt;

&lt;p&gt;Not much. Some things will be disabled by default, but again, this is essentially Perl 5.32 with the knobs and dials in different places. There are some things you should learn to live without, even in Perl 5 land. These are the likely candidates for the first round of changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;indirect object notation&lt;/li&gt;
&lt;li&gt;bareword filehandles (except maybe the standard filehandles)&lt;/li&gt;
&lt;li&gt;fake multidimensional arrays and hashes (old Perl 4 trick)&lt;/li&gt;
&lt;li&gt;Old-style prototype definitions (use &lt;code&gt;:prototype()&lt;/code&gt; instead)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="what-s-appearing"&gt;What&amp;rsquo;s appearing?&lt;/h2&gt;

&lt;p&gt;Not much. Perl 7 is mostly Perl v5.32, but with all of the features enabled by default. You don&amp;rsquo;t have to do anything to get most new features, such as &lt;a href="https://www.effectiveperlprogramming.com/2014/09/use-postfix-dereferencing/"&gt;postfix dereferencing&lt;/a&gt;, the new &lt;a href="https://www.effectiveperlprogramming.com/2020/01/use-the-infix-class-instance-operator/"&gt;&lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;, or several other features. That&amp;rsquo;s the benefit of the new social contract a major version provides. It&amp;rsquo;s a hard boundary where new features can exist by default on one side without disturbing the other side.&lt;/p&gt;

&lt;h2 id="what-should-i-do-right-now"&gt;What should I do right now?&lt;/h2&gt;

&lt;p&gt;If you need an older Perl to run your code, you are going to be fine. Those old versions are not going to disappear. Just like Perl 5.6 is still available, if that&amp;rsquo;s the version you wish to run.&lt;/p&gt;

&lt;p&gt;If your code runs without a problem under strictures and warnings, and you are using modern Perl style, you&amp;rsquo;re probably mostly good. If you have some bareword filehandles, start converting those. Same with the indirect object notation.&lt;/p&gt;

&lt;p&gt;With messy code, you aren&amp;rsquo;t out of luck. There will be compatibility modes to assist you in the transition from Perl 5 to 7 (but not Perl 5 to 8). A pragma will set the knobs and dials back to the old settings (but this is more of a one version thing):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; compat::perl5;  &lt;span style="color:#75715e"&gt;# act like Perl 5&amp;#39;s defaults&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For modules, there are some issues to shake out, but there will be a compatibility mechanism for those too.&lt;/p&gt;

&lt;p&gt;The good news is that these things are already being tested by major Perl stakeholders in production settings. This isn&amp;rsquo;t a paper plan: it&amp;rsquo;s already happening and the rough edges are being sanded out.&lt;/p&gt;

&lt;p&gt;And, v5.32 has one of these knobs and dials in place already. You can &lt;a href="https://www.effectiveperlprogramming.com/2020/06/turn-off-indirect-object-notation/"&gt;turn off the indirect object notation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; feature &lt;span style="color:#e6db74"&gt;qw(indirect)&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But expect two more knobs or dials, maybe like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; multidimensional;
&lt;span style="color:#66d9ef"&gt;no&lt;/span&gt; bareword::filehandle;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;m collecting all of this information in &lt;a href="https://leanpub.com/preparing_for_perl7"&gt;Preparing for Perl 7&lt;/a&gt;, my latest offering through &lt;a href="https://perlschool.com"&gt;Perl School&lt;/a&gt; and LeanPub.&lt;/p&gt;

&lt;h2 id="the-bottom-line"&gt;The bottom line&lt;/h2&gt;

&lt;p&gt;Perl 7 is v5.32 with different settings. Your code should work if it&amp;rsquo;s not a mess. Expect a user release within a year.&lt;/p&gt;
</content>
    <id>https://www.perl.com/article/announcing-perl-7/</id>
    <published>2020-06-24T11:34:35Z</published>
    <updated>2020-06-24T11:34:35Z</updated>
  </entry>
  <entry>
    <title>Perl Hacks: The Best of Perl Hacks</title>
    <link rel="alternate" href="https://perlhacks.com/2020/04/the-best-of-perl-hacks/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>What do you do when you’re stuck inside because Coronavirus means that your country is in lockdown? Well, you write a book, of course. Or, to be more accurate, you cobble together fifty or so old blog posts into a book.</p>
<p>So that’s what I’ve done. Now you can read some of your favourite Perl Hacks blog posts in a handy Kindle book. Other ebook marketplaces are, of course, available – but I haven’t had the time to make a version that’s available from anywhere else yet. That might follow if enough people ask for it.</p>
<p>The book is, predictably, called <em>The Best of Perl Hacks</em> and it’s <a href="https://amzn.to/2RixX0k">available from Amazon now</a> (that link goes to the UK store, but it should be available on all Amazon sites).</p>
<p>Please buy it, read it and let me know what you think.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/04/the-best-of-perl-hacks/">The Best of Perl Hacks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>What do you do when you’re stuck inside because Coronavirus means that your country is in lockdown? Well, you write a book, of course. Or, to be more accurate, you cobble together fifty or so old blog posts into a book. So that’s what I’ve done. Now you can read some of your favourite Perl […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/04/the-best-of-perl-hacks/">The Best of Perl Hacks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=1983</id>
    <published>2020-04-07T15:05:30Z</published>
    <updated>2020-04-07T15:05:30Z</updated>
    <category term="Miscellaneous"/>
  </entry>
  <entry>
    <title>Perl Hacks: PerlCon Europe 2019</title>
    <link rel="alternate" href="https://perlhacks.com/2019/08/perlcon-europe-2019/" type="text/html"/>
    <content type="html">&lt;p&gt;Last week I was in Riga for this year’s European PerlCon (the conference formerly known as YAPC::Europe). As has become traditional, here’s my report of the conference.&lt;/p&gt;
&lt;p&gt;My conference began on Tuesday night at the pre-conference meet-up. Most people get into town on the night before the conference starts and the organisers always designate a local bar as a meeting place. This time, as the conference was being held in a hotel, the meeting place was a room in the hotel just outside the main conference room. It’s always good to meet up with friends who you might not have seen since the previous conference and I spent a pleasant hour or two, chatting to people before wandering back over the river to the hotel where I was staying before the conference started. As I walked back over the bridge, I could hear the dulcet tones of Rammstein playing a gig about 4km downstream.&lt;/p&gt;
&lt;p&gt;The first day of the conference proper was slightly complicated by the need to check out of one hotel and into another. Effectively, it meant that I spent a lot of the day without a room – which was slightly annoying.&lt;/p&gt;
&lt;p&gt;The first keynote was Sawyer X talking about &lt;a href="https://perlcon.eu/talk/72"&gt;The past, the present, and one possible future&lt;/a&gt; of Perl 5. From talking to other people afterwards, I think most of the audience was as impressed by his vision as I was. I particularly look forward to hearing more about his plans to engage more companies in the development of Perl. I think that is a great idea.&lt;/p&gt;
&lt;p&gt;Following a coffee break, I saw Thomas Klausner talking about &lt;a href="https://perlcon.eu/talk/27"&gt;Deploying Perl Apps using Docker, Gitlab &amp; Kubernetes&lt;/a&gt;. This is a particular area of interest to me currently and it was interesting to see his take on it. I followed that by watching Mohammad Anwar encouraging people to start contributing to CPAN.&lt;/p&gt;
&lt;p&gt;After lunch, I took a brief break from the conference (I guess that’s a benefit to knowing that the videoing of the talks is in really capable hands!) I returned in time to see Kenichi Ishigaki describing &lt;a href="https://perlcon.eu/talk/86"&gt;Recent PAUSE Changes&lt;/a&gt;. Because the overall UI of the site has barely changed, I had failed to spot the wholesale changes that have been taking place behind the scenes. It was interesting to be brought up to date.&lt;/p&gt;
&lt;p&gt;After the coffee break, I saw Curtis Poe’s talk on &lt;a href="https://perlcon.eu/talk/113"&gt;Testing Lies&lt;/a&gt;. The big takeaway from that seems to be to never trust anyone who claims that something is “always true”.&lt;/p&gt;
&lt;p&gt;Then came the first set of lightning talks. As usual, it was a wide-ranging selection including me talking about &lt;a href="https://twitter.com/apollo11at50"&gt;my Apollo 11 Twitterbot&lt;/a&gt;. I particularly enjoyed Job’s amusing walk down memory lane.&lt;/p&gt;
&lt;p&gt;After the conference ended for the day there was a new (as far as I know) experiment for a Perl conference – a cocktail party for people who had bought specific kinds of tickets. I had been invited and went along, only to be slightly surprised to find that the drinks selection didn’t include cocktails. I was further surprised to bump into someone who I used to work with back in 2004 and we spent most of the evening catching up.&lt;/p&gt;
&lt;p&gt;The second day started with Liz Mattijsen’s keynote &lt;em&gt;DeMythifying Perl 6&lt;/em&gt;. I was surprised when she stated that “Perl 6 has damaged Perl 5” was not a myth, but a fact and was totally blown away when she followed that up with a proposal to rename Perl 6. I’ve been saying for ten years that the only thing I don’t like about Perl 6 is its name and I’m really excited to see core Perl 6 developers finally agreeing with this. I’ll be following the developments here really closely.&lt;/p&gt;
&lt;p&gt;I then watched Hauke Dämpfling’s &lt;a href="https://perlcon.eu/talk/40"&gt;WebPerl – Run Perl in the Browser!&lt;/a&gt; – which was certainly very clever, but I’m not sure how useful it is. Then I gave my first long talk of the conference – &lt;a href="https://perlcon.eu/talk/52"&gt;Monoliths, Balls of Mud and Silver Bullets&lt;/a&gt;. I think it went well. I certainly got some interesting questions after it.&lt;/p&gt;
&lt;p&gt;I’m not really sure what happened after lunch. I think I went back to my room for a bit of lie down and the next thing I knew it was time for the second day of lightning talks. Before that, there were presentations by the two teams vying to organise next years conference (in either Amsterdam or Limassol) and then this year’s attendees got to vote to choose the winner (that’s what’s going on in the photo above). The winner (by only seven votes) was Amsterdam.&lt;/p&gt;
&lt;p&gt;I was slightly embarrassed when Lee Johnson mentioned in his lightning talk that my amazing(!) SEO work for last year’s conference meant that Google still thinks all Perl conferences take place in Glasgow – I should probably work out how to fix that! Best of this set of lightning talks was Mark Keating’s adaptation of Dr. Seuss’s “The Sneetches”.&lt;/p&gt;
&lt;p&gt;That evening, the attendees’ dinner took place. This was at the same beer hall that the same event took place at the last time the conference was in Riga. Much buffet was had and a lot of beer was drunk.&lt;/p&gt;
&lt;p&gt;Day three started in a slightly more muted vein (it often does – as the attendees’ dinner is always on the second night). I missed the keynote and only made it in time for Mohammad Anwar’s second talk of the conference. This one was on how to &lt;a href="https://perlcon.eu/talk/44"&gt;Protect your Perl script from common security issues&lt;/a&gt;. I had to skip out before he got to the questions as I needed to set up in another room for my final talk of the conference – &lt;a href="https://perlcon.eu/talk/28"&gt;Measuring the Quality of your Perl Code&lt;/a&gt;. I was rather (pleasantly) surprised to see the room was completely full and people seemed to find it useful and interesting.&lt;/p&gt;
&lt;p&gt;I took the afternoon easy again. I saw Robert Acock on &lt;a href="https://perlcon.eu/talk/79"&gt;Progressive Web Applications&lt;/a&gt; (something else, I really want to get to know about – and I have the feeling it’s not as complicated as my brain seems to want to make it) and Mallory on &lt;a href="https://perlcon.eu/talk/129"&gt;Designing and Coding for Low Vision&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then it was time for the final set of lightning talks. It was great to see Thomas re-running his Acme::ReturnValues talk from 2008 (in celebration of the fact that this was the 20th European Perl Conference).&lt;/p&gt;
&lt;p&gt;And then it was over. Andrew Shitov, the organiser, thanked all the helpers, speakers and sponsors. And then some of us went off on a cruise on the river.&lt;/p&gt;
&lt;p&gt;The post &lt;a rel="nofollow" href="https://perlhacks.com/2019/08/perlcon-europe-2019/"&gt;PerlCon Europe 2019&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://perlhacks.com"&gt;Perl Hacks&lt;/a&gt;.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Last week I was in Riga for this year’s European PerlCon (the conference formerly known as YAPC::Europe). As has become traditional, here’s my report of the conference. My conference began on Tuesday night at the pre-conference meet-up. Most people get into town on the night before the conference starts and the organisers always designate a […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2019/08/perlcon-europe-2019/">PerlCon Europe 2019</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=1961</id>
    <published>2019-08-11T13:40:03Z</published>
    <updated>2019-08-11T13:40:03Z</updated>
    <category term="Conferences"/>
    <category term="conferences"/>
    <category term="perlcon"/>
    <category term="perlcon19"/>
    <category term="riga"/>
    <category term="theperlconference"/>
  </entry>
  <entry>
    <title>Perl Hacks: Counting Weekends and Wrapping Text</title>
    <link rel="alternate" href="https://perlhacks.com/2019/08/counting-weekends-and-wrapping-text/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I said that I probably wouldn’t have time to get involved with the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a> every week and that has, unfortunately, proven to be the case. But I had a few free minutes earlier in the week so I decided to look at <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-019/">this week’s challenges</a>. I’m glad I did because they seemed to fit the way my brain works pretty well and I had solutions written rather quickly.</p>
<blockquote><p>Challenge 1: Write a script to display months from the year 1900 to 2019 where you find 5 weekends i.e. 5 Friday, 5 Saturday and 5 Sunday.</p></blockquote>
<p>This would be simple enough to just brute-force. But when I started to think about it, I realised there’s a bit of a trick we can use which can cut down our search space quite significantly.</p>
<p>If we’re looking for a month with five Fridays, Saturdays and Sundays then we need a month with 31 days (as four weeks is twenty-eight days and we need three extra days). Only seven months ever have 31 days – January, March, May, July, August, October and December. There is no point at all in ever looking in any other month. You might also realise that those three extra days need to be Friday 29th, Saturday 30th and Sunday 31st. And that means that the first day of the month also needs to be a Friday.</p>
<p>So, the problem simplifies to “Find months with 31 days where the 1st is a Friday”. And here’s the code I wrote to do that:</p><pre class="urvanov-syntax-highlighter-plain-tag">#!/usr/bin/perl

use strict;
use warnings;
use feature 'say';

use Time::Piece;

# Array of months with 31 days
my @months = (qw[Jan Mar May Jul Aug Oct Dec]);
my $format = '%Y-%b';

for my $y (1900 .. 2019) {
  for my $m (@months) {
    # Get the first day of the month as a Time::Piece object
    my $first = Time::Piece-&gt;strptime("$y-$m", $format);
    # Print the date if the 1st is a Friday
    say $first-&gt;strftime('%b %Y') if $first-&gt;day eq 'Fri';
  }
}</pre><p>I’ve seen a few other solutions published and people seem to split into one group who spotted the shortcuts and another who didn’t. But the actual solutions seem very similar. Some people used DateTime instead of Time::Piece and others used low-level functions like timelocal().</p>
<blockquote><p>Challenge 2: Write a script that can wrap the given paragraph at a specified column using the <a href="https://en.wikipedia.org/wiki/Line_wrap_and_word_wrap#Minimum_number_of_lines">greedy algorithm</a>.</p></blockquote>
<p>Honestly, I didn’t think very hard about this at all. I just read the Wikipedia description of the algorithm and wrote a pretty much word-for-word Perl translation of that.</p><pre class="urvanov-syntax-highlighter-plain-tag">#!/usr/bin/perl

use strict;
use warnings;

use constant SPACE =&gt; ' ';
use constant SPACE_WIDTH =&gt; length(SPACE);

my $line_len = shift || 72; # Old-skool Unix

my $text = join ' ', &lt;DATA&gt;;

my $space_left = $line_len;

for (split /\s+/, $text) {
  if (SPACE_WIDTH + length() &gt; $space_left) {
    print "\n$_" . SPACE;
    $space_left = $line_len - length();
  } else {
    print $_ . SPACE;
    $space_left -= (length() + SPACE_WIDTH);
  }
}

print "\n";

__DATA__
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis volutpat,
ipsum nec luctus dictum, velit nisi sodales dui, ut feugiat risus dolor
vel metus. Morbi ut pretium velit. Proin ultricies enim magna, at semper
odio molestie vitae. In hac habitasse platea dictumst. Fusce non sapien
bibendum ligula pellentesque volutpat in et lectus. Vestibulum ante ipsum
primis in faucibus orci luctus et ultrices posuere cubilia Curae;
Vestibulum sodales molestie dignissim.</pre><p>Next week is all about the European Perl Conference so I very much doubt if I’ll have time to try the Perl Weekly Challenges. But I hope to be able to try more of the problems in the coming weeks.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2019/08/counting-weekends-and-wrapping-text/">Counting Weekends and Wrapping Text</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I said that I probably wouldn’t have time to get involved with the Perl Weekly Challenge every week and that has, unfortunately, proven to be the case. But I had a few free minutes earlier in the week so I decided to look at this week’s challenges. I’m glad I did because they seemed to […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2019/08/counting-weekends-and-wrapping-text/">Counting Weekends and Wrapping Text</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=1954</id>
    <published>2019-08-01T12:25:08Z</published>
    <updated>2019-08-01T12:25:08Z</updated>
    <category term="Programming"/>
    <category term="calendar"/>
    <category term="perl weekly challenge"/>
    <category term="programming"/>
    <category term="weekends"/>
    <category term="word wrapping"/>
  </entry>
  <entry>
    <title>Perl Hacks: Perl Conference in Riga</title>
    <link rel="alternate" href="https://perlhacks.com/2019/07/perl-conference-in-riga/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s only two weeks until I head to Riga for <a href="https://perlcon.eu/">PerlCon 2019</a>. I thought it was worthwhile posting a quick update confirming that I was going and telling you what I would be doing there.</p>
<p>Firstly, I’ve <a href="https://perlhacks.com/2019/01/plans-for-riga/">previously mentioned</a> that I was planning to run my “Modern Web Development with Dancer” workshop on the day before the conference. That’s now not going to happen as we didn’t manage to sell enough tickets to make the workshop economically viable.</p>
<p>But I will be giving two talks at the conference. On day two (Thursday) I’ll be speaking on <a href="https://perlcon.eu/talk/52">Monoliths, Balls of Mud and Silver Bullets</a>. That’s at 12:30 in the main room. This is a version of a talk I tried out at a London Perl Mongers technical meeting back in February. It’s a not-entirely-serious look at some of the problems you might encounter when replacing old monolithic code with new, shiny micro-services. Then on day three (Friday) I’ll be giving a longer talk on <a href="https://perlcon.eu/talk/28">Measuring the Quality of your Perl Code</a>. That’s, again, at 12:30, but in the second room. This does exactly what its title says. We’ll look at some measurements you can use to determine how good your Perl code is and ways to make those measurements automatic.</p>
<p>I have also submitted a proposal for a lightning talk. It’s about a Twitter bot that I wrote last weekend called <a href="https://twitter.com/apollo11at50">Apollo 11 at 50</a> so, hopefully, you’ll find that interesting if you’re interested in either space or Twitter bots.</p>
<p>I’ll be a tourist in Riga for a few days before the conference. I’m arriving on Saturday 3rd August and leaving a week later on the 10th. Hope to see some of you there.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2019/07/perl-conference-in-riga/">Perl Conference in Riga</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s only two weeks until I head to Riga for PerlCon 2019. I thought it was worthwhile posting a quick update confirming that I was going and telling you what I would be doing there. Firstly, I’ve previously mentioned that I was planning to run my “Modern Web Development with Dancer” workshop on the day […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2019/07/perl-conference-in-riga/">Perl Conference in Riga</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=1950</id>
    <published>2019-07-20T16:35:18Z</published>
    <updated>2019-07-20T16:35:18Z</updated>
    <category term="Conferences"/>
    <category term="conferences"/>
    <category term="perl"/>
    <category term="perlcon19"/>
    <category term="riga"/>
  </entry>
</feed>
