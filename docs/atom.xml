<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-03-25T00:56:29Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>This week in PSC (101)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-101.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11057</id>
    <published>2023-03-18T01:00:00Z</published>
    <updated>2023-03-25T05:07:20Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>Porters,                                                                                                                                                                                                           </p>

<p>We had an abbreviated PSC call today, largely due to an unexpected delay.                                                                                                                                          </p>

<p>We discussed offering split-up deprecation categories, so you can <code>no warnings 'deprecated::.xyz'</code> and re-affirmed that we want to do this.                                                                         </p>

<p>We talked about improving the backcompat of strict-vs-version behavior for <code>use vX</code> where X is older than v5.36 and agreed we'd bring that back, but wanted to discuss more about other related changes to the use-vX code.                                                                                                                                                                                                       </p>
]]>
        

    </content>
</entry>
  <entry>
    <title>This week in PSC (102)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/03/this-week-in-psc-102.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11056</id>
    <published>2023-03-24T22:48:33Z</published>
    <updated>2023-03-24T22:49:28Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>Topics discussed:</p>

<ul>
<li>Bug reporting by email: we commit to nothing as an organisation.  Some would-be submitters of issues don't want to use GitHub.  They can just send an email to perl5-porters and hope that some helpful soul will copy-paste to GitHub.  We encourage the conventional use of GitHub.</li>
<li>On the topic email bug reports, it's likely time to deprecate perlbug as a way to send bug reports. It could be updated to point the user to GitHub, and to print <code>perl -V</code> output (etc.) to copy and paste. We should also have a better set of templates for issues on GitHub.</li>
<li>The segfaults on feature-class and refaliasing won't be fixed before 5.38, and should just be documented as "known bugs"</li>
<li>After we discussed renaming RFC to PPC, the general sentiment seemed to be "in favor", so we're going to make the rename</li>
<li>Rik volunteered to release 5.38, we still need a release manager for 5.37.11</li>
<li>Some discussions about preparing the Perl Toolchain Summit plans (which will host the first ever in-person PSC meeting)</li>
</ul>
]]>
        

    </content>
</entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75772085</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Perl's XML-Sig library adding dsig element to XML tags</title>
            <category scheme="https://stackoverflow.com/tags" term="xml"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="digital-signature"/>
        <author>
            <name>Jorge_Freitas</name>
            <uri>https://stackoverflow.com/users/2533201</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75772085/perls-xml-sig-library-adding-dsig-element-to-xml-tags"/>
        <published>2023-03-17T20:43:58Z</published>
        <updated>2023-03-24T21:16:22Z</updated>
        <summary type="html">
            &lt;p&gt;I'm trying to sign a XML document using Perl's &lt;a href="https://metacpan.org/pod/XML::Sig" rel="nofollow noreferrer"&gt;XML::Sig&lt;/a&gt; library. I based the code below on the example provided in its Meta CPAN example page. Using this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use XML::Sig;

my xml = '&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&amp;lt;foo ID=&amp;quot;abc&amp;quot;&amp;gt;&amp;lt;bar&amp;gt;123&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;';

my $pkey = '/path/to/X509/private.key';
my $cert = '/path/to/X509/certificate.pem';


my $signer = XML::Sig-&amp;gt;new({
    key         =&amp;gt; $pkey,
    cert        =&amp;gt; $cert,
    x509        =&amp;gt; 1,
    sig_hash    =&amp;gt; 'sha256',
    digest_hash =&amp;gt; 'sha256'
});

my $signedXml = $signer -&amp;gt; sign($xml);

print $signedXml;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Should produce something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
    &amp;lt;foo ID=&amp;quot;abc&amp;quot;&amp;gt;
        &amp;lt;bar&amp;gt;123&amp;lt;/bar&amp;gt;
        &amp;lt;Signature xmlns=&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot;&amp;gt;
            &amp;lt;SignedInfo xmlns=&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot; xmlns:samlp=&amp;quot;urn:oasis:names:tc:SAML:2.0:protocol&amp;quot; xmlns:xenc=&amp;quot;http://www.w3.org/2001/04/xmlenc#&amp;quot;&amp;gt;
              &amp;lt;CanonicalizationMethod Algorithm=&amp;quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments&amp;quot; /&amp;gt;
              &amp;lt;SignatureMethod Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&amp;quot; /&amp;gt;
              &amp;lt;Reference URI=&amp;quot;#abc&amp;quot;&amp;gt;
                &amp;lt;Transforms&amp;gt;
                  &amp;lt;Transform Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot; /&amp;gt;
                &amp;lt;/Transforms&amp;gt;
                &amp;lt;DigestMethod Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#sha1&amp;quot; /&amp;gt;
                &amp;lt;DigestValue&amp;gt;9kpmrvv3peVJpNSTRycrV+jeHVY=&amp;lt;/DigestValue&amp;gt;
              &amp;lt;/Reference&amp;gt;
            &amp;lt;/SignedInfo&amp;gt;
            &amp;lt;SignatureValue&amp;gt;
              HXUBnMgPJf//j4ihaWnaylNwAR5AzDFY83HljFIlLmTqX1w1C72ZTuRObvYve8TNEbVsQlTQkj4R
              hiY0pgIMQUb75GLYFtc+f0YmBZf5rCWY3NWzo432D3ogAvpEzYXEQPmicWe2QozQhybaz9/wrYki
              XiXY+57fqCkf7aT8Bb6G+fn7Aj8gnZFLkmKxwCdyGsIZOIZdQ8MWpeQrifxBR0d8W1Zm6ix21WNv
              ONt575h7VxLKw8BDhNPS0p8CS3hOnSk29stpiDMCHFPxAwrbKVL1kGDLaLZn1q8nNRmH8oFxG15l
              UmS3JXDZAss8gZhU7g9T4XllCqjrAvzPLOFdeQ==
            &amp;lt;/SignatureValue&amp;gt;
            &amp;lt;KeyInfo&amp;gt;
              &amp;lt;KeyValue&amp;gt;
                &amp;lt;RSAKeyValue&amp;gt;
                  &amp;lt;Modulus&amp;gt;
            1b+m37u3Xyawh2ArV8txLei251p03CXbkVuWaJu9C8eHy1pu87bcthi+T5WdlCPKD7KGtkKn9vq
            i4BJBZcG/Y10e8KWVlXDLg9gibN5hb0Agae3i1cCJTqqnQ0Ka8w1XABtbxTimS1B0aO1zYW6d+U
            Yl0xIeAOPsGMfWeu1NgLChZQton1/NrJsKwzMaQy1VI8m4gUleit9Z8mbz9bNMshdgYEZ9oC4bH
            n/SnA4FvQl1fjWyTpzL/aWF/bEzS6Qd8IBk7yhcWRJAGdXTWtwiX4mXb4h/2sdrSNvyOsd/shCf
            OSMsf0TX+OdlbH079AsxOwoUjlzjuKdCiFPdU6yAJw==
                  &amp;lt;/Modulus&amp;gt;
                  &amp;lt;Exponent&amp;gt;Iw==&amp;lt;/Exponent&amp;gt;
                &amp;lt;/RSAKeyValue&amp;gt;
              &amp;lt;/KeyValue&amp;gt;
            &amp;lt;/KeyInfo&amp;gt;
       &amp;lt;/Signature&amp;gt;
     &amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I'm getting this weird output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
     &amp;lt;foo xmlns:dsig=&amp;quot;http://www.w3.org/2000/09/xmldsig#&amp;quot; ID=&amp;quot;abc&amp;quot;&amp;gt;
         &amp;lt;bar&amp;gt;123&amp;lt;/bar&amp;gt;
            &amp;lt;dsig:Signature&amp;gt;
                &amp;lt;dsig:SignedInfo xmlns:xenc=&amp;quot;http://www.w3.org/2001/04/xmlenc#&amp;quot;&amp;gt;
                    &amp;lt;dsig:CanonicalizationMethod Algorithm=&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;/&amp;gt;
                        &amp;lt;dsig:SignatureMethod Algorithm=&amp;quot;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&amp;quot;/&amp;gt;
                        &amp;lt;dsig:Reference URI=&amp;quot;#abc&amp;quot;&amp;gt;
                            &amp;lt;dsig:Transforms&amp;gt;
                                &amp;lt;dsig:Transform Algorithm=&amp;quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&amp;quot;/&amp;gt;
                                &amp;lt;dsig:Transform Algorithm=&amp;quot;http://www.w3.org/2001/10/xml-exc-c14n#&amp;quot;/&amp;gt;
                            &amp;lt;/dsig:Transforms&amp;gt;
                        &amp;lt;dsig:DigestMethod Algorithm=&amp;quot;http://www.w3.org/2001/04/xmlenc#sha256&amp;quot;/&amp;gt;
                            &amp;lt;dsig:DigestValue&amp;gt;FHuo2WkVLRpa7bNfiojdVEHxa0nrhC1/uKoRjnkWJ94=
                            &amp;lt;/dsig:DigestValue&amp;gt;
                        &amp;lt;/dsig:Reference&amp;gt;
                &amp;lt;/dsig:SignedInfo&amp;gt;
                &amp;lt;dsig:SignatureValue&amp;gt;kgp/+lPtErMFmtYIVJ+vpzzABLYOa0UEz6I7/LjHu/X+45vqpfVNZdLMjDzqShITA38LnNe+KuY/ qmXUplBXFQd26dP9opiAlh9rzS8YQ/yiWXcpQKoM2Ssam9c84ELUDy64Dw5NHXJUaFCVfyuwth/m Fju7J3r42KOvzl3YSAduqEVotDmyVx2WGv3/vr9MAkUfSrlc5PtQP9NU3et2lCVp+4B7wWD7vrDd w4Qnz7NYlc1xcbMtcHGNWHqzoWRInJgJG/wawRp8LRgeyxYFUTV7+U6gzbkCIbgy1CKGmfqkoWgJ vVO2kwwu7cKcZ6peFDdVSKriN/EpZOUn7uC2DA==
                &amp;lt;/dsig:SignatureValue&amp;gt;
                &amp;lt;dsig:KeyInfo&amp;gt;
                    &amp;lt;dsig:X509Data&amp;gt;
                        &amp;lt;dsig:X509Certificate&amp;gt;MIIIGjCCBgKgAwIBAgIITEy4wqEVR0kwDQYJKoZIhvcNAQELBQAwdDELMAkGA1UE BhMCQlIxEzARBgNVBAoTCklDUC1CcmFzaWwxNjA0BgNVBAsTLVNlY3JldGFyaWEg ZGEgUmVjZWl0YSBGZWRlcmFsIGRvIEJyYXNpbCAtIFJGQjEYMBYGA1UEAxMPQUMg VkFMSUQgUkZCIHY1MB4XDTIyMDgwMzE5MjkwMloXDTIzMDgwMzE5MjkwMlowggEn MQswCQYDVQQGEwJCUjELMAkGA1UECBMCU1AxDzANBgNVBAcTBlNVTUFSRTETMBEG A1UEChMKSUNQLUJyYXNpbDE2MDQGA1UECxMtU2VjcmV0YXJpYSBkYSBSZWNlaXRh IEZlZGVyYWwgZG8gQnJhc2lsIC0gUkZCMRYwFAYDVQQLEw1SRkIgZS1DTlBKIEEx MRYwFAYDVQQLEw1BUiBJTkZPUk1CQU5LMRkwFwYDVQQLExBWaWRlb2NvbmZlcmVu Y2lhMRcwFQYDVQQLEw4xNjY5NjA2MTAwMDE3NTFJMEcGA1UEAxNATUFYSU1VUyBE SVNUUklCVUlET1JBIERFIEVRVUlQQU1FTlRPUyBBVVRPTU9USVZPUzozNDMzMzIz MzAwMDEyODCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKtSXumD8s+I EutiXQuQqSiEXoIUvrsvgtOL4TbVlQTHwO/PXSitGdberioaYiQoC4ZKod48S9iJ 2X8gi+SUsrsvaVpNGEZFAbGHI0RD6NfUbuUZe3Ecq4NxJ7QxJNi34gkRHBrcOemd b8LtOtq6Ny0rujl6wvlNCQPFGGnjHCwzeO/qnGmiGLRedTr/xme2xD8wXwvyy1qR 1sYPzbUKCvAw74usAxN3aOGRwQgiMohsUysD3HcJyjCc5vLMFrgyRJ3aqujUXQj3 kOrfgo+w7fq2YG2RXjH0F7CpcKULXaNqCmmce9A764drrkq36Ty4cAXw3UnKWkw9 ZBk9UEYhItkCAwEAAaOCAvkwggL1MIGcBggrBgEFBQcBAQSBjzCBjDBVBggrBgEF BQcwAoZJaHR0cDovL2ljcC1icmFzaWwudmFsaWRjZXJ0aWZpY2Fkb3JhLmNvbS5i ci9hYy12YWxpZHJmYi9hYy12YWxpZHJmYnY1LnA3YjAzBggrBgEFBQcwAYYnaHR0 cDovL29jc3B2NS52YWxpZGNlcnRpZmljYWRvcmEuY29tLmJyMAkGA1UdEwQCMAAw HwYDVR0jBBgwFoAUU8ul5HVQmUAsvlsVRcm+yzCqicUwcAYDVR0gBGkwZzBlBgZg TAECASUwWzBZBggrBgEFBQcCARZNaHR0cDovL2ljcC1icmFzaWwudmFsaWRjZXJ0 aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9kcGMtYWMtdmFsaWRyZmJ2NS5w ZGYwgbYGA1UdHwSBrjCBqzBToFGgT4ZNaHR0cDovL2ljcC1icmFzaWwudmFsaWRj ZXJ0aWZpY2Fkb3JhLmNvbS5ici9hYy12YWxpZHJmYi9sY3ItYWMtdmFsaWRyZmJ2 NS5jcmwwVKBSoFCGTmh0dHA6Ly9pY3AtYnJhc2lsMi52YWxpZGNlcnRpZmljYWRv cmEuY29tLmJyL2FjLXZhbGlkcmZiL2xjci1hYy12YWxpZHJmYnY1LmNybDAOBgNV HQ8BAf8EBAMCBeAwHQYDVR0lBBYwFAYIKwYBBQUHAwIGCCsGAQUFBwMEMIHNBgNV HREEgcUwgcKBIGZyYW5jaXNjby5iYXJjZWxsb3NhZHZAZ21haWwuY29toDgGBWBM AQMEoC8ELTIxMTIxOTY2MDg0NzUxMDY4OTcwMDAwMDAwMDAwMDAwMDAwMDAwMDAw MDAwMKAwBgVgTAEDAqAnBCVGUkFOQ0lTQ08gQ0FSTE9TIERPUyBTQU5UT1MgQkFS Q0VMTE9ToBkGBWBMAQMDoBAEDjM0MzMzMjMzMDAwMTI4oBcGBWBMAQMHoA4EDDAw MDAwMDAwMDAwMDANBgkqhkiG9w0BAQsFAAOCAgEAEGcTeHal+ZqMse5zRXNDVO2T AAEWdOEfF4ssR0H67+R0KFy0RJ6NQa7QwnwHwaymw3TWd+lcRwEmp//6+v0xmBYm 7SiHjgsvVVZdC9WIN51BhskXZJltX+g8uTv1BafZ93YcEJiDJlj0Ng3GSwMOPg80 FXqjtAml5uas8KV2jI5r5Pm3gM2F+tbGFB8ybb4HgQfdvtUexgN/gTT+Mp4y9UsQ znuIu1XBNQHWSaYT1BKLh/cAdrE5hNwdwYkSuvHeiA20ak2m4fmdH8rhMsWHOtua kUh6fpoQCJXjJr5wxMD40boFSQQHdEasSRBPKOXNIbmmRWBVE9RhV+xxIwPDuZY+ E8W3H0mdOtzgXLgj/9y31jMNiQCymZ6MUxUJfwqIecOQsCVunREOPFD/u8fuIX+3 gpbcQudVTtD0duZMO5Uqa2z6hzMXuLR1/og4TnZoKJ4HrFijt5vrNKxIiJKDd9zz qOqFfvPOQ8AaBxmYfYzcn7V4NYSrU7wliGl92vdD1ZUC2HsgNzwAjEbI+Je+yWSM ria3Vr+f3X3qvoiARpZ7AuhpvUpVCdl0Khb7FlqFqfjebUZvvqqu2aREPmdPsagT DIu4BesHL8JIUs8nKEEqApYTHQukxMSq5Ixind9ZY8eaB69PqVO5a0qqfQxvOUwA AoF8N+KW4C8r5OvN6Mw= 
                    &amp;lt;/dsig:X509Certificate&amp;gt;
                &amp;lt;/dsig:X509Data&amp;gt;
            &amp;lt;/dsig:KeyInfo&amp;gt;
        &amp;lt;/dsig:Signature&amp;gt;
     &amp;lt;/foo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;foo&lt;/code&gt; tag is being marked with a &lt;code&gt;dsig&lt;/code&gt; element, and every other element references it afterwards. This is causing problems because it alters the structure of the document I'm expected to sign, making it fail its structure validation.  Why is this happening? And how can I remove this &lt;code&gt;dsig&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Edit: Corrected typos in the example code&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75824150</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">How to run a 'INSERT INTO SELECT" with 2 databases in Perl?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="dbi"/>
        <author>
            <name>troubadour</name>
            <uri>https://stackoverflow.com/users/13575132</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75824150/how-to-run-a-insert-into-select-with-2-databases-in-perl"/>
        <published>2023-03-23T14:14:06Z</published>
        <updated>2023-03-24T19:42:49Z</updated>
        <summary type="html">
            &lt;p&gt;Since each mysql statement in Perl is linked to its connection handler :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $handlerDB1 = DBI-&amp;gt;connect(etc ...);
my $handlerDB2 = DBI-&amp;gt;connect(etc ...);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wonder if there's a trick to do a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INSERT INTO tableDB2
SELECT * FROM tableDB1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if not, what would be the simpler way to get and insert these data ?&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75836145</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">Perl Async/Await example</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="asynchronous"/>
            <category scheme="https://stackoverflow.com/tags" term="async-await"/>
        <author>
            <name>Arsenii</name>
            <uri>https://stackoverflow.com/users/4895979</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75836145/perl-async-await-example"/>
        <published>2023-03-24T16:30:21Z</published>
        <updated>2023-03-24T18:56:07Z</updated>
        <summary type="html">
            &lt;p&gt;I am trying to get an idea of how to implement async (parallel) function call in Perl (in one of my Mojolicious controllers to process lots of data sets).&lt;/p&gt;
&lt;p&gt;Here is what I have (a simple example):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use Future::AsyncAwait;

async sub asyncSub{
    
    async sub funcA{
        my $num = shift;
        print &amp;quot;This is $num (START)\n&amp;quot;;
        sleep 1;
        print &amp;quot;This is $num (END)\n&amp;quot;;
    };

    funcA(1);
    funcA(2);
    funcA(4);
    funcA(5);
    funcA(6);
    funcA(7);
    funcA(8);
    funcA(9);
    funcA(10);

}

asyncSub();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code prints out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is 1 (START)
This is 1 (END)
This is 2 (START)
This is 2 (END)
This is 4 (START)
This is 4 (END)
This is 5 (START)
This is 5 (END)
This is 6 (START)
This is 6 (END)
This is 7 (START)
This is 7 (END)
This is 8 (START)
This is 8 (END)
This is 9 (START)
This is 9 (END)
This is 10 (START)
This is 10 (END)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It always works synchronously.&lt;/p&gt;
&lt;p&gt;Thank you in advance for your help.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75834283</id>
        <re:rank scheme="https://stackoverflow.com">-8</re:rank>
        <title type="text">Can't locate SVG.pm in @INC [closed]</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>shrek</name>
            <uri>https://stackoverflow.com/users/21481952</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75834283/cant-locate-svg-pm-in-inc"/>
        <published>2023-03-24T13:30:58Z</published>
        <updated>2023-03-24T13:30:58Z</updated>
        <summary type="html">
            &lt;p&gt;在使用LDblockshow这个软件的时候：报这个错误&lt;/p&gt;
&lt;p&gt;Can't locate SVG.pm in @INC (@INC contains: /pub/anaconda3/bin/svg_kit /hwfssz4/BC_PUB/Software/03.Soft_ALL/PerlInfo/lib/perl5/ /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /pub/anaconda3/bin/ShowLDSVG line 24.&lt;/p&gt;
&lt;p&gt;有没有遇到这个这个问题的朋友？谢谢&lt;/p&gt;
&lt;p&gt;用的linux 系统centos，我查看了环境已经安装了perl 也有svg.pm 这个模块&lt;/p&gt;
&lt;p&gt;ls /pub/anaconda3/lib/site_perl/5.26.2
SVG  SVG.pm  SVG.pm.bak  x86_64-linux-thread-multi&lt;/p&gt;
&lt;p&gt;也添加了环境变量，但还是不行，运行程序还是报以上的错误&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75832476</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">add a simple pre formatting to mojolicious lite app</title>
            <category scheme="https://stackoverflow.com/tags" term="html"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="mojolicious"/>
        <author>
            <name>719016</name>
            <uri>https://stackoverflow.com/users/719016</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75832476/add-a-simple-pre-formatting-to-mojolicious-lite-app"/>
        <published>2023-03-24T10:26:43Z</published>
        <updated>2023-03-24T13:03:37Z</updated>
        <summary type="html">
            &lt;p&gt;I am following the Mojolicious lite tutorial but struggling to generate a page with the &lt;code&gt;&amp;lt;pre&amp;gt;content&amp;lt;/pre&amp;gt;&lt;/code&gt; formatting.&lt;/p&gt;
&lt;p&gt;Waht do I need to change so that the output is formatted as a block of &lt;code&gt;&amp;lt;pre&amp;gt;content&amp;lt;/pre&amp;gt;&lt;/code&gt; HTML?&lt;/p&gt;
&lt;p&gt;Here is what I have:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl                                                                                      
use Mojolicious::Lite -signatures;

get '/foo' =&amp;gt; sub ($c) {
  my $id = $c-&amp;gt;param(&amp;quot;id&amp;quot;);
  my $cmd = &amp;quot;perl /home/user/tool.pl -id $id 2&amp;gt;&amp;amp;1&amp;quot;;
  my $ret = `$cmd`;
  # $c-&amp;gt;render(text =&amp;gt; $id);                                                                             
  $c-&amp;gt;render(text =&amp;gt; $ret, layout =&amp;gt; 'default');
};

app-&amp;gt;start;
__DATA__
@@ layouts/foo.html.ep
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;pre&amp;gt;
    %= content
  &amp;lt;/pre&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry>
    <title>PWC209 - Merge Account</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/24/pwc209-merge-account/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209/">#209</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given an array of accounts i.e. name with list of email addresses.</p>

  <p>Write a script to merge the accounts where possible. The accounts can only
be merged if they have at least one email address in common.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @accounts = [ ["A", "a1@a.com", "a2@a.com"],
                     ["B", "b1@b.com"],
                     ["A", "a3@a.com", "a1@a.com"] ]
                   ]

Output: [ ["A", "a1@a.com", "a2@a.com", "a3@a.com"],
          ["B", "b1@b.com"] ]
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @accounts = [ ["A", "a1@a.com", "a2@a.com"],
                     ["B", "b1@b.com"],
                     ["A", "a3@a.com"],
                     ["B"m "b2@b.com", "b1@b.com"] ]

Output: [ ["A", "a1@a.com", "a2@a.com"],
          ["A", "a3@a.com"],
          ["B", "b1@b.com", "b2@b.com"] ]
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>Should the merging be “stable”? I mean, should we preserve as much as
possible the order of appearance of the different groups? It seems not,
because in the second example the two “A” groups both appear <em>before</em> the
“B” group, despite a “B” group appearing between them.</p>

<p>Which begs a related question: maybe it’s some kind of “stable”, but moving
forward instead of keeping things backwards? I’m digressing.</p>

<p>Another question relates to the order of the addresses. The inputs are
arranged in arrays, which seems to imply that order <em>might</em> be important. ON
the other hand, these arrays contain semantically different data (a name,
addresses), so maybe it’s more like a tuple and order does not matter. I’ll
assume the latter.</p>

<h1 id="the-solution">The solution</h1>

<p>The solution in <a href="https://www.perl.org/">Perl</a> is somehow intentionally long and complicated. I
took the challenge of producing a <em>stable</em> result, i.e. try to preserve the
order of appearance of addresses if possible. Additionally, I tried to
minimize the copying and duplications and iterations and whatsnot, in pure
evil spirit of <a href="https://en.wikiquote.org/wiki/Donald_Knuth">premature optimization</a>.</p>

<p>Addresses are iterated over and amassed in “groups” by name. Each group
contains all disjoint addresses belonging to that name, trying to pack them
as much as possible while we do the input’s sweep. If we can merge, we merge
and move on to see if additional merging is possible (because previous
addresses A and B might be disjoint, but both joined with later address C).</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">use</span> <span class="nv">constant</span> <span class="s">TRUE</span>  <span class="o">=&gt;</span> <span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span>
<span class="k">use</span> <span class="nv">constant</span> <span class="s">FALSE</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="o">!!</span><span class="mi">0</span><span class="p">);</span>

<span class="k">my</span> <span class="nv">@accounts</span> <span class="o">=</span> <span class="p">(</span>
   <span class="p">['</span><span class="s1">A</span><span class="p">',</span> <span class="p">'</span><span class="s1">a1@a.com</span><span class="p">',</span> <span class="p">'</span><span class="s1">a2@a.com</span><span class="p">'],</span>
   <span class="p">['</span><span class="s1">B</span><span class="p">',</span> <span class="p">'</span><span class="s1">b1@b.com</span><span class="p">'],</span>
   <span class="p">['</span><span class="s1">A</span><span class="p">',</span> <span class="p">'</span><span class="s1">a3@a.com</span><span class="p">',</span> <span class="p">'</span><span class="s1">a4@a.com</span><span class="p">'],</span>
   <span class="p">['</span><span class="s1">B</span><span class="p">',</span> <span class="p">'</span><span class="s1">b2@b.com</span><span class="p">',</span> <span class="p">'</span><span class="s1">b1@b.com</span><span class="p">'],</span>
   <span class="p">['</span><span class="s1">A</span><span class="p">',</span> <span class="p">'</span><span class="s1">a8@a.com</span><span class="p">'],</span>
   <span class="p">['</span><span class="s1">A</span><span class="p">',</span> <span class="p">'</span><span class="s1">a3@a.com</span><span class="p">',</span> <span class="p">'</span><span class="s1">a2@a.com</span><span class="p">'],</span>
<span class="p">);</span>

<span class="k">for</span> <span class="k">my</span> <span class="nv">$merged</span> <span class="p">(</span><span class="nv">merge_accounts</span><span class="p">(</span><span class="o">\</span><span class="nv">@accounts</span><span class="p">)</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">)</span> <span class="p">{</span>
   <span class="nv">say</span> <span class="p">'</span><span class="s1">[</span><span class="p">',</span> <span class="nb">join</span><span class="p">('</span><span class="s1">, </span><span class="p">',</span> <span class="nb">map</span> <span class="p">{</span> <span class="o">+</span><span class="p">"</span><span class="s2">'</span><span class="si">$_</span><span class="s2">'</span><span class="p">"}</span> <span class="nv">$merged</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span> <span class="p">),</span> <span class="p">'</span><span class="s1">]</span><span class="p">';</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">hashes_intersect</span> <span class="p">($h1, $h2) {</span>
   <span class="k">my</span> <span class="nv">$n1</span> <span class="o">=</span> <span class="nb">scalar</span><span class="p">(</span><span class="nb">keys</span><span class="p">(</span><span class="nv">$h1</span><span class="o">-&gt;%*</span><span class="p">));</span>
   <span class="k">my</span> <span class="nv">$n2</span> <span class="o">=</span> <span class="nb">scalar</span><span class="p">(</span><span class="nb">keys</span><span class="p">(</span><span class="nv">$h2</span><span class="o">-&gt;%*</span><span class="p">));</span>
   <span class="p">(</span><span class="nv">$h1</span><span class="p">,</span> <span class="nv">$h2</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$h2</span><span class="p">,</span> <span class="nv">$h1</span><span class="p">)</span> <span class="k">if</span> <span class="nv">$n1</span> <span class="o">&gt;</span> <span class="nv">$n2</span><span class="p">;</span>

   <span class="c1"># now $h1 has *at most* as many elements as $h2, it's beneficial to</span>
   <span class="c1"># iterate over it</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$key</span> <span class="p">(</span><span class="nb">keys</span> <span class="nv">$h1</span><span class="o">-&gt;%*</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nv">TRUE</span> <span class="k">if</span> <span class="nb">exists</span> <span class="nv">$h2</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$key</span><span class="p">};</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">FALSE</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">merge_accounts</span> <span class="p">($aref) {</span>
   <span class="k">my</span> <span class="nv">%alternatives_for</span><span class="p">;</span>  <span class="c1"># track each name separately</span>
   <span class="k">my</span> <span class="nv">%group_for</span><span class="p">;</span>         <span class="c1"># track aggregated groups by order of appearance</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">0</span> <span class="o">..</span> <span class="nv">$aref</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*) {</span>
      <span class="k">my</span> <span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">@addresses</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$aref</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">-&gt;</span><span class="nv">@*</span><span class="p">;</span>
      <span class="nv">$group_for</span><span class="p">{</span><span class="nv">$i</span><span class="p">}</span> <span class="o">=</span> <span class="k">my</span> <span class="nv">$new</span> <span class="o">=</span> <span class="p">{</span>
         <span class="s">i</span> <span class="o">=&gt;</span> <span class="nv">$i</span><span class="p">,</span>
         <span class="s">name</span> <span class="o">=&gt;</span> <span class="nv">$name</span><span class="p">,</span>
         <span class="s">addresses</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nb">map</span> <span class="p">{</span> <span class="vg">$_</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span> <span class="nv">@addresses</span> <span class="p">},</span>
      <span class="p">};</span>

      <span class="c1"># Add this group like it's detached</span>
      <span class="k">my</span> <span class="nv">$all_groups</span> <span class="o">=</span> <span class="nv">$alternatives_for</span><span class="p">{</span><span class="nv">$name</span><span class="p">}</span> <span class="sr">//</span><span class="o">=</span> <span class="o">[]</span><span class="p">;</span>
      <span class="nb">push</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">,</span> <span class="nv">$new</span><span class="p">;</span>

      <span class="c1"># sweep back to merge when necessary</span>
      <span class="k">my</span> <span class="nv">$challenger</span> <span class="o">=</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="nv">$#*</span><span class="p">;</span>
      <span class="k">my</span> <span class="nv">$resistant</span> <span class="o">=</span> <span class="nv">$challenger</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
      <span class="k">my</span> <span class="nv">$last_wiped</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="nv">$resistant</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$cas</span> <span class="o">=</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$challenger</span><span class="p">]{</span><span class="nv">addresses</span><span class="p">};</span>
         <span class="k">my</span> <span class="nv">$ras</span> <span class="o">=</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$resistant</span><span class="p">]{</span><span class="nv">addresses</span><span class="p">};</span>
         <span class="k">if</span> <span class="p">(</span><span class="nv">hashes_intersect</span><span class="p">(</span><span class="nv">$cas</span><span class="p">,</span> <span class="nv">$ras</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$ras</span><span class="o">-&gt;%*</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$ras</span><span class="o">-&gt;%*</span><span class="p">,</span> <span class="nv">$cas</span><span class="o">-&gt;%*</span><span class="p">);</span>     <span class="c1"># merge</span>

            <span class="p">(</span><span class="nv">$last_wiped</span><span class="p">,</span> <span class="nv">$challenger</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$challenger</span><span class="p">,</span> <span class="nv">$resistant</span><span class="p">);</span>
            <span class="nb">delete</span> <span class="nv">$group_for</span><span class="p">{</span><span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$last_wiped</span><span class="p">]{</span><span class="nv">i</span><span class="p">}};</span>
            <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$last_wiped</span><span class="p">]</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="o">--</span><span class="nv">$resistant</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1"># sweep ahead to remove wiped out stuff, if necessary</span>
      <span class="k">if</span> <span class="p">(</span><span class="nb">defined</span><span class="p">(</span><span class="nv">$last_wiped</span><span class="p">))</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$marker</span> <span class="o">=</span> <span class="k">my</span> <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$last_wiped</span><span class="p">;</span>
         <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nv">$cursor</span> <span class="o">&lt;</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*) {</span>
            <span class="k">next</span> <span class="k">if</span> <span class="nb">defined</span><span class="p">(</span><span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$cursor</span><span class="p">]);</span>
            <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$marker</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$cursor</span><span class="p">];</span>
         <span class="p">}</span>
         <span class="nb">splice</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">,</span> <span class="nv">$marker</span> <span class="k">if</span> <span class="nv">$marker</span> <span class="o">&lt;</span> <span class="nv">$all_groups</span><span class="o">-&gt;</span><span class="nv">@*</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>

   <span class="k">my</span> <span class="nv">@accounts</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$group</span> <span class="o">=</span> <span class="nv">$group_for</span><span class="p">{</span><span class="vg">$_</span><span class="p">};</span>
      <span class="p">[</span> <span class="nv">$group</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">name</span><span class="p">},</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span> <span class="ow">cmp</span> <span class="nv">$b</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">$group</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">addresses</span><span class="p">}</span><span class="o">-&gt;%*</span> <span class="p">];</span>
   <span class="p">}</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">%group_for</span><span class="p">;</span>

   <span class="k">return</span> <span class="o">\</span><span class="nv">@accounts</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For contrast, in the <a href="https://raku.org/">Raku</a> implementation I chose to ditch the
<em>stability</em> and opted for some copying of data around, which I think
improves readability and maintainability. Otherwise, the approach is pretty
much the same: sweep and merge, keeping disjoint addresses.</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN {
   my @accounts =
      ['A', 'a1@a.com', 'a2@a.com'],
      ['B', 'b1@b.com'],
      ['A', 'a3@a.com', 'a4@a.com'],
      ['B', 'b2@b.com', 'b1@b.com'],
      ['A', 'a8@a.com'],
      ['A', 'a3@a.com', 'a2@a.com'],
   ;

   for merge-accounts(@accounts) -&gt; $merged {
      put '[', $merged.map({"'$_'"}).join(', '), ']';
   }
}

sub merge-accounts (@accounts) {
   my %alternatives_for;
   for @accounts -&gt; $account {
      my ($name, @addresses) = @$account;
      my $new = { name =&gt; $name, addresses =&gt; @addresses.Set };

      my @disjoint;
      my $all = %alternatives_for{$name} //= [];
      for @$all -&gt; $candidate {
         if ($new&lt;addresses&gt; ∩ $candidate&lt;addresses&gt;) { # merge
            $new&lt;addresses&gt; = (
               $new&lt;addresses&gt;.keys.Slip,
               $candidate&lt;addresses&gt;.keys.Slip
            ).Set;
         }
         else {
            @disjoint.push: $candidate;
         }
      }
      @disjoint.push: $new;
      %alternatives_for{$name} = @disjoint;
   }
   return %alternatives_for.values».Slip.flat
      .map({[ $_&lt;name&gt;, $_&lt;addresses&gt;.keys.Slip ]})
      .Array;
}
</code></pre>

<p>All in all, this challenge was a bit more… <em>challenging</em> than the average
for me. All of this, of course, thanks to <a href="http://www.manwar.org/">manwar</a>!</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/24/pwc209-merge-account/</id>
    <published>2023-03-24T07:00:00+01:00</published>
    <updated>2023-03-24T07:00:00+01:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/095fd90e6ff7791c309ef4175edebb2295e5ea04</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/095fd90e6ff7791c309ef4175edebb2295e5ea04"/>
    <title>
        report uninit variable name even in optimized cases
    </title>
    <updated>2023-03-23T23:55:49Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/278465?s=30&amp;v=4"/>
    <author>
      <name>mauke</name>
      <uri>https://github.com/mauke</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;report uninit variable name even in optimized cases

Several cases that used to be simple assignment ops with lexical
variables have been optimized in some way:

 - $foo = undef is now a single OP_UNDEF with special flags
 - $foo = ... is now a single OP_PADSV_STORE
 - $foo[0] = ... is now a single OP_AELEMFASTLEX_STORE

This is mostly transparent to users, except for &amp;quot;Use of uninitialized
value&amp;quot; warnings, which previously mentioned the name of the undefined
variable, but don&amp;#39;t do so anymore in blead.

This commit teaches find_uninit_var() about the new ops, so error
messages for these ops can mention variable names again.

Fixes #20945.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/fe937a9fe468d3821699cc22af3e9cdcadf2608a</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/fe937a9fe468d3821699cc22af3e9cdcadf2608a"/>
    <title>
        [doc] clarify behavior of File::Copy::cp re: permissions
    </title>
    <updated>2023-03-23T22:10:27Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/278465?s=30&amp;v=4"/>
    <author>
      <name>mauke</name>
      <uri>https://github.com/mauke</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;[doc] clarify behavior of File::Copy::cp re: permissions

In particular, explain that &amp;quot;preserve permission bits like cp&amp;quot; means the
default behavior of /bin/cp, not &amp;quot;cp -p&amp;quot; or &amp;quot;cp --preserve&amp;quot;, so the
umask still applies.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/9a3a94ffdd8cf71ee39fede590ae136ce59f7cf7</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/9a3a94ffdd8cf71ee39fede590ae136ce59f7cf7"/>
    <title>
        don't set a special filetype for generated .gitignore
    </title>
    <updated>2023-03-23T22:10:05Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/278465?s=30&amp;v=4"/>
    <author>
      <name>mauke</name>
      <uri>https://github.com/mauke</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;don&amp;#39;t set a special filetype for generated .gitignore

Previously it would default to Perl, which happens to produce the right
comment character (&amp;quot;#&amp;quot;), but results in nonsensical syntax highlighting.
Now we set $lang to the special value &amp;#39;None&amp;#39;, which still produces
read-only declarations, but doesn&amp;#39;t force a mode/filetype on editors.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/b7eedb08953678c5b222f3776892756053dc00aa</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/b7eedb08953678c5b222f3776892756053dc00aa"/>
    <title>
        fix incorrect vi filetype declarations in generated files
    </title>
    <updated>2023-03-23T22:10:05Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/278465?s=30&amp;v=4"/>
    <author>
      <name>mauke</name>
      <uri>https://github.com/mauke</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;fix incorrect vi filetype declarations in generated files

Vim&amp;#39;s filetype declarations are case sensitive. The correct types for
Perl, C, and Pod are perl, c, and pod, respectively.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>An Interesting Perl Pattern That Doesn't Work</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/an-interesting-perl-pattern-that-doesnt-work-41mf" type="text/html"/>
    <content type="html">&lt;p&gt;I recently came up with a pattern that is supposed to use a closure to protect a configuration hash from being mutated by its callers. Unfortunately this pattern has a terrible flaw.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;create_config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;config()&lt;/code&gt; subroutine is a lexical closure over the &lt;code&gt;%config&lt;/code&gt; hash. No other code in a program would be able to access the &lt;code&gt;%config&lt;/code&gt; variable, as everything is defined in its own &lt;a href="https://perldoc.perl.org/perlsyn#Basic-BLOCKs"&gt;block&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As an aside, this pattern could just as easily be written with a &lt;a href="https://perldoc.perl.org/functions/state"&gt;state variable&lt;/a&gt;, but I find it harder to explain the pattern when done this way.&lt;/p&gt;

&lt;h1&gt;
  
  
  Blocks
&lt;/h1&gt;

&lt;p&gt;To understand this pattern we first have to understand how blocks work. Here is a code example that shows how blocks work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from inside the block where &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;var is defined &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;var = &lt;/span&gt;&lt;span class="si"&gt;$var&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from the most inner block &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;var = &lt;/span&gt;&lt;span class="si"&gt;$var&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from outside the block &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;var = &lt;/span&gt;&lt;span class="si"&gt;$var&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
from inside the block where $var is defined $var = foo
from the most inner block $var = foo
from outside the block $var = 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code shows that a block introduces a lexical scope. Variables defined in a lexical scope are only available in its defining scope, and scopes nested inside their defining scope. The program output shows that the &lt;code&gt;$var&lt;/code&gt; variable is available in the scope it is defined in, and from the scope nested in its defining scope. However, outside of its defining scope, &lt;code&gt;$var&lt;/code&gt; is not defined.&lt;/p&gt;

&lt;p&gt;If we turn on &lt;code&gt;strict&lt;/code&gt; we get a fatal compilation error for trying to use &lt;code&gt;$var&lt;/code&gt; from outside its defining scope:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Global symbol "$var" requires explicit package name (did you forget to declare "my $var"?) at tmp.pl line 14.
Execution of tmp.pl aborted due to compilation errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be wondering if the &lt;code&gt;config()&lt;/code&gt; subroutine is accessible from outside the block it was defined in. The answer is that it is indeed available, because subroutine declarations are always global to the current package. This code example shows this fact:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello from foo!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
hello from foo!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  
  
  Closures
&lt;/h1&gt;

&lt;p&gt;Now that we understand blocks we can understand closures. In Perl, a closure is a subroutine that has access to the lexical environment that it was defined in. Here is the classic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        

    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment() -&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment() -&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement() -&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment() -&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;increment() -&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;decrement() -&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
increment() -&amp;gt; 1
increment() -&amp;gt; 2
decrement() -&amp;gt; 1
increment() -&amp;gt; 2
increment() -&amp;gt; 3
decrement() -&amp;gt; 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;increment()&lt;/code&gt; and &lt;code&gt;decrement()&lt;/code&gt; subroutines are both able to access the &lt;code&gt;$n&lt;/code&gt; variable, though no other subroutines in a larger program would be able to, due to the outer block. For this reason the &lt;code&gt;increment()&lt;/code&gt; and &lt;code&gt;decrement()&lt;/code&gt; subroutines are closures over &lt;code&gt;$n&lt;/code&gt;;&lt;/p&gt;

&lt;h1&gt;
  
  
  The Problem
&lt;/h1&gt;

&lt;p&gt;We should now have all the knowledge needed to understand the pattern that this article is about.&lt;/p&gt;

&lt;p&gt;The idea of the pattern is that if the &lt;code&gt;%config&lt;/code&gt; variable has already been set then we just return it, and otherwise we set its value before returning it. This means that &lt;code&gt;%config&lt;/code&gt; will only be set the first time that we call &lt;code&gt;config()&lt;/code&gt;, and on all subsequent calls it will simply be returned. Therefore &lt;code&gt;config()&lt;/code&gt; can be thought of as a function constant ... right?&lt;/p&gt;

&lt;p&gt;Here is a code example where our pattern works as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;create_config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;create_config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello from create_config()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$config1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1004&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%config2's foo key = &lt;/span&gt;&lt;span class="si"&gt;$config2&lt;/span&gt;&lt;span class="s2"&gt;{foo}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
hello from create_config()
%config2's foo key = 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This output displays a couple of important points. First, we know that the &lt;code&gt;create_config()&lt;/code&gt; subroutine was only invoked a single time, even though we invoked &lt;code&gt;config()&lt;/code&gt; twice. We know this because the "hello from create_config()" message is only printed a single time. The other important thing to note is that because we got the output "%config2's foo key = 12", we know that our modification of &lt;code&gt;%config1&lt;/code&gt;'s &lt;code&gt;foo&lt;/code&gt; key (which we set to 1004), did not effect the &lt;code&gt;%config&lt;/code&gt; variable that our &lt;code&gt;config()&lt;/code&gt; subroutine closes over. If it had, then &lt;code&gt;%config2&lt;/code&gt;'s &lt;code&gt;foo&lt;/code&gt; key would associate to &lt;code&gt;1004&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what is the problem? Well ... everything falls apart when the &lt;code&gt;%config&lt;/code&gt; variable is set to a multi-dimensional data structure. The following code encapsulates the fundamental problem with our pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;create_config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;create_config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$config1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1004&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%config2's foo key = [&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$config2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;}}),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
%config2's foo key = [1004, 2, 3]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uh oh! We were able to mutate the &lt;code&gt;%config&lt;/code&gt; variable that &lt;code&gt;config()&lt;/code&gt; closes over, which means that &lt;code&gt;config()&lt;/code&gt; is not actually a constant function. Now we come to the fundamental problem of our pattern. Because in Perl multi-dimensional data structures are made up of references, and perl does not perform &lt;a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"&gt;deep-copying&lt;/a&gt; by default, we are able to mutate the underlying references of multi-dimensional data structures.&lt;/p&gt;

&lt;p&gt;Here is a code example that shows that Perl does not perform deep-copying:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@array1 contents:&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$elem&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@array1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;    &lt;/span&gt;&lt;span class="si"&gt;$elem&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# copy @array1 to @array2&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@array1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@array2 contents:&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$elem&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@array2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;    &lt;/span&gt;&lt;span class="si"&gt;$elem&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;__END__

$ perl tmp.pl
@array1 contents:
    ARRAY(0x13875e8)
    ARRAY(0x13d1ef8)
    ARRAY(0x13d1fe8)
@array2 contents:
    ARRAY(0x13875e8)
    ARRAY(0x13d1ef8)
    ARRAY(0x13d1fe8)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this programs output we can see that &lt;code&gt;@array1&lt;/code&gt; and &lt;code&gt;@array2&lt;/code&gt; contain the exact same references, which means that Perl does not perform deep-copying. If Perl did perform deep-copying, then when we copied &lt;code&gt;@array1&lt;/code&gt; into &lt;code&gt;@array2&lt;/code&gt;, Perl would have made (recursive) copies of all the references in &lt;code&gt;@array1&lt;/code&gt; into new refererences. Perl's lack of deep-copying is the fundamental flaw of our pattern, as it means that we can modify &lt;code&gt;%config&lt;/code&gt;'s references from its copies that are returned by &lt;code&gt;config()&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  
  
  Solutions
&lt;/h1&gt;

&lt;p&gt;There are many ways we can solve this problem. First, we could use &lt;a href="https://perldoc.perl.org/Hash::Util#lock_hash_recurse"&gt;lock_hash_recurse&lt;/a&gt; from the core &lt;a href="https://perldoc.perl.org/Hash::Util"&gt;Hash::Util&lt;/a&gt; module to lock &lt;code&gt;%config&lt;/code&gt;. After locking &lt;code&gt;%config&lt;/code&gt;, we would get an error if we tried to mutate any of its values.&lt;/p&gt;

&lt;p&gt;We could also use &lt;a href="https://metacpan.org/pod/Const::Fast"&gt;Const::Fast&lt;/a&gt; from CPAN to make &lt;code&gt;%config&lt;/code&gt; an actual read-only hash. Similarly to locking the hash, we would get an error if we tried to mutate &lt;code&gt;%config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we could use &lt;a href="https://metacpan.org/pod/Clone"&gt;Clone&lt;/a&gt; from CPAN to return a deep-copy of &lt;code&gt;%config&lt;/code&gt; from the &lt;code&gt;config()&lt;/code&gt; subroutine. Unlike the other solutions, our code could freely modify copies of &lt;code&gt;%config&lt;/code&gt; without getting any errors, but these modifications would not affect the actual &lt;code&gt;%config&lt;/code&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/an-interesting-perl-pattern-that-doesnt-work-41mf</id>
    <published>2023-03-23T18:24:00Z</published>
    <updated>2023-03-23T18:24:00Z</updated>
    <category term="perl"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/3ae398fba4a16b2da69f72f21ace25d2bf0370e6</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/3ae398fba4a16b2da69f72f21ace25d2bf0370e6"/>
    <title>
        perlio.c: remove silly casts
    </title>
    <updated>2023-03-23T10:39:01Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/278465?s=30&amp;v=4"/>
    <author>
      <name>mauke</name>
      <uri>https://github.com/mauke</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;perlio.c: remove silly casts&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>PWC209 - Special Bit Characters</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/23/pwc209-special-bit-characters/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209/">#209</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given an array of binary bits that ends with 0.</p>

  <p>Valid sequences in the bit string are:</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0] -decodes-to-&gt; "a"
[1, 0] -&gt; "b"
[1, 1] -&gt; "c"
</code></pre></div>  </div>

  <p>Write a script to print 1 if the last character is an “a” otherwise print
0.</p>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @bits = (1, 0, 0)
Output: 1

The given array bits can be decoded as 2-bits character (10) followed
by 1-bit character (0).
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @bits = (1, 1, 1, 0)
Output: 0

Possible decode can be 2-bits character (11) followed by 2-bits
character (10) i.e. the last character is not 1-bit character.
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>No questions! Well, maybe one: why an <em>array</em> of bits, and not a string or
some other numeric value to scan?</p>

<h1 id="the-solution">The solution</h1>

<p>My question was not only to bug our fine host <a href="http://www.manwar.org/">manwar</a>, but also because I
found it easy to address this challenge with a <em>regular expression</em>:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN ($bits) { put special-bits-characters($bits.comb.Array) }

sub special-bits-characters ($bits) {
   $bits.join('') ~~ m{^ [ 1 &lt;[ 0 1 ]&gt; | 0 ]* 0 $} ?? 1 !! 0;
}
</code></pre>

<p>So I have an array as the official interface of my function, but it comes
from a string and I turn it into a string as soon as it enters the function.
And I’m skeptical about cryptocurrencies!</p>

<p><a href="https://www.perl.org/">Perl</a> is pretty much the same, even though I admit to being able to read
regular expressions with a bit more ease:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">@bits</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">split</span> <span class="sr">m{}mxs</span> <span class="p">}</span> <span class="nv">@ARGV</span><span class="p">;</span>
<span class="nv">say</span> <span class="nv">special_bits_characters</span><span class="p">(</span><span class="o">\</span><span class="nv">@bits</span><span class="p">);</span>

<span class="k">sub </span><span class="nf">special_bits_characters</span> <span class="p">($bits) {</span>
   <span class="nb">join</span><span class="p">('',</span> <span class="nv">$bits</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">m{\A (?: 1[01] | 0 )* 0 \z}mxs</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As I’m lazy and I don’t want to explain what the regular expression does,
I’ll let <a href="https://metacpan.org/pod/YAPE::Regex::Explain">YAPE::Regex::Explain</a> do the heavy lifting, with <em>just a bit of
editing</em> for clarity on my side:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
The regular expression:

(?msx: \A (?: 1[01] | 0 )* 0 \z )

matches as follows:
  
NODE                     EXPLANATION
----------------------------------------------------------------------
(?msx:                   group, but do not capture (with ^ and $      
                         matching start and end of line) (with .      
                         matching \n) (disregarding whitespace and    
                         comments) (case-sensitive):                  
----------------------------------------------------------------------
  \A                       the beginning of the string                
----------------------------------------------------------------------
  (?:                      group, but do not capture (0 or more times      
                           (matching the most amount possible)):
----------------------------------------------------------------------
    1                        '1'                                      
----------------------------------------------------------------------
    [01]                     any character of: '0', '1'               
----------------------------------------------------------------------
   |                        OR                                        
----------------------------------------------------------------------
    0                        '0'                                      
----------------------------------------------------------------------
  )*                       end of grouping                            
----------------------------------------------------------------------
  0                        '0'                                        
----------------------------------------------------------------------
  \z                       the end of the string                      
----------------------------------------------------------------------
)                        end of grouping                              
----------------------------------------------------------------------
</code></pre></div></div>

<p><a href="https://www.perl.org/">Perl</a> is wonderful (well.. <a href="https://raku.org/">Raku</a> too!)</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/23/pwc209-special-bit-characters/</id>
    <published>2023-03-23T07:00:00+01:00</published>
    <updated>2023-03-23T07:00:00+01:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
  <title>Now Accepting: TPRC Proposals for 2024</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprcproposals2024"/>
  <id>tag:news.perlfoundation.org,2023-03-22:/post/tprcproposals2024</id>
  <published>2023-03-22T15:23:23</published>
  <updated>2023-03-22T15:23:23</updated>
  <summary>
  <![CDATA[
      It’s time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. Please view the information, along with a sample RFP you can send to possible vendors here. When ready to submit your proposal, please use the same form. If you have any questions, please contact us at hello@perlfoundation.org 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/298983015c683950e6b5ede69dbae0d3f27f1fd6/combo logo.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>It’s time to plan TPRC 2024. If you are interested in organizing the event in your city, please submit a proposal by April 28th. <p>Please view the information, along with a sample RFP you can send to possible vendors <a href="https://forms.gle/tYHSK5XDw2p55qgx5">here</a>. When ready to submit your proposal, please <a href="https://forms.gle/tYHSK5XDw2p55qgx5">use the same form.</a><p> If you have any questions, please contact us at hello@perlfoundation.org .</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Text::Extract::Word, MsOffice::Word::Surgeon - Weekly Travelling in CPAN</title>
    <link rel="alternate" href="https://blogs.perl.org/users/c_y_fung/2023/03/textextractword-msofficewordsurgeon---weekly-travelling-in-cpan.html"/>
    <id>tag:blogs.perl.org,2023:/users/c_y_fung//3481.11054</id>
    <published>2023-03-22T12:26:21Z</published>
    <updated>2023-03-22T12:44:08Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://e7-87-83.github.io/</uri>
    </author>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p></p>

<div style="text-align: center;">Destination: <a href="https://metacpan.org/pod/Text::Extract::Word">Text::Extract::Word</a></div>

<p></p>

<div><strong>Date of Latest Release: Mar 09, 2012<br>
Distribution: Text::Extract::Word<br>
Module version: 0.02<br>
Main Contributors: Stuart Watt (SNKWATT)<br>
License: The Artistic License 2.0</strong></div>

<p></p>

<div style="text-align: center;">Destination: <a href="https://metacpan.org/pod/MsOffice::Word::Surgeon">MsOffice::Word::Surgeon</a></div>

<p></p>

<div><strong>Date of Latest Release: Jan 26, 2023<br>
Distribution: MsOffice::Word::Surgeon<br>
Module version: 2.01<br>
Main Contributors: Laurent Dami (DAMI)<br>
License: The Artistic License 2.0</strong></div>

<hr>

<p><b>Notice</b></p>

<p>Thanks to demerphq and Sebastian Schleussner's comments, we should visit a better and easy way to do a regex matching in Perl now. It is not Regexp::Assemble introduced two weeks before - the Perl compiler after version 5.10 has already done the optimization for us! But we have to use the correct syntax. To see what happens, the bottom of this post gives a comparison of regexes for Roman numerals again; we give two more players in the race, <tt>/^($r_str_combine)$/</tt> [given <tt>my $r_str_combine = join "|", @roman;</tt>] and <tt>$rx = sprintf qr/^(?:%s)$/, join "|", @roman</tt>. We can see the former has almost the same performance as Regexp::Assemble, while the latter is usually the fastest. We do not need to import any modules and get a fast result!</p>

<hr>

<p>Today let us have a short tour on two modules which can perform a similar function: text searching in MS Office Word documents.</p>

<p>Well, we know there are two common formats of MS Office Word document: .docx and the earlier .doc.</p>

<p>Text::Extract::Word deals with .doc. You can use the function <tt>get_all_text</tt> to get all text (I'm a verbose tour guide...), or use its object oriented interface which get the text in different location of a document:</p>

<pre>
# taken from synopsis of the module:
my $file = Text::Extract::Word->new("test1.doc");
my $text = $file->get_text();
my $body = $file->get_body();
my $footnotes = $file->get_footnotes();
my $headers = $file->get_headers();
my $annotations = $file->get_annotations();
my $bookmarks = $file->get_bookmarks();</pre>

<p><br />
MsOffice::Word::Surgeon deals with .docx. Besides functionalities to extract text, you can also replace text by regular expression, and write a new .docx file.</p>

<p><br />
Here comes a use case of the two modules. I was maintaining a collection of curricula vitae and database of candidate details, but due to a coding bug, some of the CV were missing or overwritten by others' CV. The CVs are in .doc, .docx or .pdf format, and have filenames as <tt>CV[number].[extension]</tt>. I use Text::Extract::Word and MsOffice::Word::Surgeon to check the MS Office documents.</p>

<p>Note that in the database, since I am physically located in Hong Kong, each candidate name is stored with Chinese characters and English alphabets. And names of some people consist of only two Chinese characters (some, like me, have 3; some people have 4(two characters for the surname, two characters for the given name)), so I chose to take the first two English words in the candidate name field and checked whether the two words are in the corresponding document. ID of each suspicious record will be printed.</p>

<p>Script one:</p>

<pre>
use utf8;
use DBI;
use Text::Extract::Word qw(get_all_text);
use v5.30.0;

<p>for my $num (1..999) {<br />
    search_cv($num) if -e "CV".$num.".doc" || -e "CV".$num.".DOC";<br />
}</p>

<p>sub search_cv {</p>

<p>    my $cv_id = $_[0];<br />
    my $filename = "CV".$cv_id.".doc";</p>

<p>    my $dsn = "DBI:mysql:database=cvdb;host=127.0.0.1";<br />
    my $dbh = DBI->connect($dsn, 'mydatabaseadmin', 'mypassword', { mysql_enable_utf8 => 1 });</p>

<p>    my $fullname;<br />
    my $first_two_eng;<br />
    my $sth = $dbh->prepare("SELECT name FROM candidate WHERE id=".$cv_id);<br />
    $sth->execute;<br />
    while (my $ref = $sth->fetchrow_hashref) {<br />
        $fullname = $ref->{'name'};<br />
    }</p>

<p>    $fullname !~ s/[^[:ascii:]]//g;</p>

<p>    my $engname = $fullname;</p>

<p>    my $second_space = index($engname, " ", index($engname, " ")+1 );</p>

<p>    my $first_two_eng = ($second_space != -1) ? (substr $engname, 0, $second_space) : (substr $engname, 0);</p>

<p>    my $found;</p>

<p>    my $text = get_all_text($filename);<br />
    $found = index($text, $first_two_eng);</p>

<p>    if ($found != -1) {<br />
#        say "found: ". $cv_id;<br />
    }<br />
    else {<br />
        say "SUSPICIOUS: ". $cv_id;<br />
    }<br />
}</p>

</pre>

<p>Script two</p>

<pre>

<p>use utf8;<br />
use DBI;<br />
use MsOffice::Word::Surgeon;<br />
use v5.30.0;</p>

<p>for my $num (1..999) {<br />
    search_cv($num) if -e "CV".$num.".docx";<br />
}</p>

<p>sub search_cv {</p>

<p>    my $cv_id = $_[0];<br />
    my $filename = "CV".$cv_id.".docx";</p>

<p>    my $dsn = "DBI:mysql:database=cvdb;host=127.0.0.1";<br />
    my $dbh = DBI->connect($dsn, 'mydatabaseadmin',  'mypassword', { mysql_enable_utf8 => 1 });</p>

<p>    my $fullname;<br />
    my $first_two_eng;<br />
    my $sth = $dbh->prepare("SELECT name FROM candidate WHERE id=".$cv_id);<br />
    $sth->execute;<br />
    while (my $ref = $sth->fetchrow_hashref) {<br />
        $fullname = $ref->{'name'};<br />
    }</p>

<p>    $fullname !~ s/[^[:ascii:]]//g;</p>

<p>    my $engname = $fullname;</p>

<p>    my $second_space = index($engname, " ", index($engname, " ")+1 );</p>

<p>    my $first_two_eng = ($second_space != -1) ? (substr $engname, 0, $second_space) : (substr $engname, 0);</p>

<p>    my $found;</p>

<p>    my $surgeon = MsOffice::Word::Surgeon->new(docx => $filename);</p>

<p>    my $text =  $surgeon->document->plain_text;<br />
    $found = index($text, $first_two_eng);</p>

<p><br />
    if ($found != -1) {<br />
#        say "found: ". $cv_id;<br />
    }<br />
    else {<br />
        say "SUSPICIOUS: ". $cv_id;<br />
    }</p>

<p>}</p>

</pre>
The above is just a very straightforward use case of these two modules. You may explore their POD and use them to suit your need!

<p># For PDF text search, I will introduce modules later.</p>

<div style="text-align: center;">THE HIGHLIGHTED PERL MODULES OF WEEK 12 OF 2023:<br>Text::Extract::Word, MsOffice::Word::Surgeon</div>

<hr>

<p><b>Comparison of Regexes for Roman Numerals</b><br />
<pre><br />
use v5.30.0;<br />
use List::Util qw/shuffle sample any/;<br />
use Regexp::Assemble;<br />
use Regexp::Trie;<br />
use feature 'say';</p>

<p>my @roman = qw/I II III IV V<br />
               VI VII VIII IX X<br />
               XI XII XIII XIV XV<br />
               XVI XVII XVIII IXX XX/;</p>

<p>sub repr {<br />
    return sample int 4*rand(), <br />
        shuffle('I' x (int 4*rand()), 'V', 'X');<br />
}</p>

<p>my $size = 1000;</p>

<p>sub c0 {<br />
    my $count = 0;<br />
    for (1..$size) {<br />
        my $letters = repr();<br />
        $count++ if any {$letters =~ /^$_$/} @roman;<br />
    }<br />
    return $count;<br />
}</p>

<p>my $ra = Regexp::Assemble->new;<br />
$ra->anchor_line;<br />
$ra->add(@roman);<br />
my $ra_computed = $ra->re;</p>

<p>sub c1 {<br />
    my $count = 0;<br />
    for (1..$size) {<br />
        $count++ if repr() =~ $ra_computed;<br />
    }<br />
    return $count;<br />
}</p>

<p>my $rt = Regexp::Trie->new;<br />
$rt->add($_) for @roman;<br />
my $rt_computed = $rt->regexp;</p>

<p>sub c2 {<br />
    my $count = 0;<br />
    for (1..$size) {<br />
        $count++ if repr() =~ /^$rt_computed$/;<br />
    }<br />
    return $count;<br />
}</p>

<p><br />
my $r_str_combine = join "|", @roman;</p>

<p>sub cn {<br />
    my $count = 0;<br />
    for (1..$size) {<br />
        $count++ if repr() =~ /^($r_str_combine)$/;<br />
    }<br />
    return $count;<br />
}</p>

<p>my $rx = sprintf qr/^(?:%s)$/, join "|", @roman;</p>

<p>sub cx {<br />
    my $count = 0;<br />
    for (1..$size) {<br />
        $count++ if repr() =~ $rx;<br />
    }<br />
    return $count;<br />
}</p>

<p>say c0()/$size;<br />
say c1()/$size;<br />
say c2()/$size;<br />
say cn()/$size;<br />
say cx()/$size;</p>

<p><br />
use Benchmark q/cmpthese/;<br />
cmpthese(10_000, {<br />
    RAW => sub {c0},<br />
    Assemble => sub {c1},<br />
    Trie => sub {c2},<br />
    naive => sub {cn},<br />
    QR => sub {cx}<br />
});</pre></p>

<p><br />
<b>Result:</b><br />
<pre>0.705<br />
0.691<br />
0.68<br />
0.681<br />
0.708<br />
           Rate      RAW     Trie    naive Assemble       QR<br />
RAW      42.7/s       --     -94%     -94%     -94%     -95%<br />
Trie      669/s    1468%       --      -6%      -7%     -23%<br />
naive     711/s    1565%       6%       --      -2%     -18%<br />
Assemble  724/s    1595%       8%       2%       --     -17%<br />
QR        867/s    1932%      30%      22%      20%       --</pre><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>AutoHotKey</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/22/autohotkey/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>It beats me that I had to use <a href="https://www.autohotkey.com">AutoHotKey</a> for two simple keys.</p>
</blockquote>

<p>I’m Italian and I use the Italian keyboard layout. No big deal.</p>

<p>Up to some Windowses ago, I had to build my own custom keyboard layout
because, as it appears, neither the backtick nor the tilde are anywhere to
be found in the keyboard.</p>

<p>No, I don’t consider typing the code on the numeric pad anything that is
meaningful to consider. <em>Especially</em> on a laptop keyboard without a separate
numeric pad.</p>

<p>As much as it already left me extremely dubious about the care that
Microsoft might have for foreigners, it went even beyond this. With Windows
11 (Home edition, at least) it seems that I’m <strong>neither</strong> able to install
the keyboard layout generator, <strong>nor</strong> able to install a previously cooked
layout.</p>

<p>So much for Windows Subsystem for Linux, right?</p>

<p>I looked around and found <a href="https://www.autohotkey.com">AutoHotKey</a>, which is a big cannon to fire at a
mosquito, but still it’s the only thing that seems to solve my problem. By
the way, these are the mappings that I added and work for me:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#Requires AutoHotkey v2.0
&lt;^&gt;!'::Send "``"
&lt;^&gt;!vkDD::Send "~"
</code></pre></div></div>

<p>I took inspiration from <a href="https://gist.github.com/scollovati/3b4a6b44176797ff727f5c261c6b4975">this gist</a>, which in a turn of events didn’t work
right off the bat for me. I don’t know if it’s because of the <a href="https://www.autohotkey.com">AutoHotKey</a>
version, or because quotation characters got lost in producing the gist, or
just because everything seems to necessarily be cumbersome and frustrating
when dealing with such basic needs.</p>

<p>My last thought is for the people who accept to type the Alt-whatever
combination on the numeric pad: there’s a better way and you are encouraged
to not settle with such nonsense.</p>

<p>Rant concluded, stay safe folks!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/22/autohotkey/</id>
    <published>2023-03-22T06:00:00+01:00</published>
    <updated>2023-03-22T06:00:00+01:00</updated>
    <category term="windows"/>
    <category term="keyboard"/>
  </entry>
  <entry>
    <title>Fixing code and documentation, setting up CI - Sending Pull-Requests</title>
    <link rel="alternate" href="https://dev.to/szabgab/fixing-code-and-documentation-setting-up-ci-a-session-in-osdc-6pk" type="text/html"/>
    <content type="html">&lt;p&gt;This was the 6th session of the the &lt;a href="https://osdc.code-maven.com/"&gt;Open Source Developer Course (OSDC)&lt;/a&gt; that I started to teach at the end of January. (We have a weekly session, but we had to skip several weeks in the middle).&lt;/p&gt;

&lt;p&gt;This time instead of having a grand presentation we worked on a Perl library (module) that was failing its tests. Here are my notes about what we have accomplished during the session.&lt;/p&gt;

&lt;p&gt;The changes we made were not huge, but I believe a little improvement every day by many people can lead to a lot of value to the whole open source ecosystem and through that to the world.&lt;/p&gt;

&lt;h2&gt;
  
  
  Pull-Requests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We sent several pull-requests to &lt;a href="https://github.com/reneeb/Types-RENEEB"&gt;Types-RENEEB&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/reneeb/Types-RENEEB/pull/7"&gt;updated files generated by &lt;code&gt;dist zilla&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reneeb/Types-RENEEB/pull/8"&gt;fixing a test failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/reneeb/Types-RENEEB/pull/9"&gt;Adding GitHub Actions&lt;/a&gt;. We started with the &lt;a href="https://code-maven.com/github-actions"&gt;GitHub Action skeleton&lt;/a&gt; for Dist::Zilla.&lt;/li&gt;
&lt;li&gt;Renee, the author of this project accepted our Pull-Requests within a few minutes. Then we sent another PR&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reneeb/Types-RENEEB/pull/10"&gt;enabling more OSes and versions of Perl in GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  The workflow
&lt;/h2&gt;

&lt;p&gt;During the session we first cloned the already forked repository, but I think it is better to clone the original repository and add the forked repository using &lt;code&gt;git remote add fork URL&lt;/code&gt; so this is what I described here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the original repository
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone git@github.com:reneeb/Types-RENEEB.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a fork of the repository via GitHub UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup a new git remote to point to the forked repository:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add fork git@github.com:yewtc/Types-RENEEB.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a branch to prepare a pull-request
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b BRANCH
  make changes
git add .
git commit -m "..."
git push --set-upstream fork BRANCH
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Send the pull-request from the GitHub UI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrate the progress of original repository to our local clone&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout master
git pull origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Once the Pull-request was accepted we could delete the branch locally and remotely
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -d BRANCH
git push -d origin BRANCH
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We created Test coverage report of the Types-RENEEB pacakge. It was not too interesting as everything was 100%.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cpanm Dist::Zilla::App::Command::cover

dzil cover
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Another Pull-Request
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We also sent a &lt;a href="https://github.com/pjcj/Devel--Cover/pull/319"&gt;pull-request&lt;/a&gt; to &lt;a href="https://github.com/pjcj/Devel--Cover"&gt;Devel::Cover&lt;/a&gt; with this information.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Plans
&lt;/h2&gt;

&lt;p&gt;In the upcoming sessions we plan to work on more projects. Set up local development environments and configure GitHub Action workflows for projects require a database or access to some external system.&lt;/p&gt;

&lt;p&gt;We will also find packages where the test coverage report is not 100% to understand that better.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/fixing-code-and-documentation-setting-up-ci-a-session-in-osdc-6pk</id>
    <published>2023-03-21T20:26:29Z</published>
    <updated>2023-03-21T20:26:29Z</updated>
    <category term="perl"/>
    <category term="github"/>
    <category term="osdc"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Analyzing New York City Traffic Collisions with Perl One-Liners and Linux</title>
    <link rel="alternate" href="https://dev.to/austin_62/analyzing-new-york-city-traffic-collisions-with-perl-one-liners-and-linux-pnn" type="text/html"/>
    <content type="html">&lt;h6&gt;
  
  
  Just when you think it’s safe outside. Here are some statistics relating to traffic collisions in New York City.
&lt;/h6&gt;

&lt;h3&gt;
  
  
  Background
&lt;/h3&gt;

&lt;p&gt;NYC publishes vehicle collision data which anyone can access using their API. You can also download this information in standard &lt;a href="https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Crashes/h9gi-nx95"&gt;CSV (Comma Separated Values) file format&lt;/a&gt;.&lt;br&gt;
The file is fairly large, 420 MB, with almost 2 Million lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; 1 austin austin 402M Mar  4 20:38 all_motor_vehicle_collision_data.csv
…
bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;wc&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; all_motor_vehicle_collision_data.csv 
1972886 all_motor_vehicle_collision_data.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Display the first five records of the dataset using &lt;a href="https://ss64.com/bash/head.html"&gt;head&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n5&lt;/span&gt; all_motor_vehicle_collision_data.csv 
CRASH DATE,CRASH TIME,BOROUGH,ZIP CODE,LATITUDE,LONGITUDE,LOCATION,ON STREET NAME,CROSS STREET NAME,OFF STREET NAME,NUMBER OF PERSONS INJURED,NUMBER OF PERSONS KILLED,NUMBER OF PEDESTRIANS INJURED,NUMBER OF PEDESTRIANS KILLED,NUMBER OF CYCLIST INJURED,NUMBER OF CYCLIST KILLED,NUMBER OF MOTORIST INJURED,NUMBER OF MOTORIST KILLED,CONTRIBUTING FACTOR VEHICLE 1,CONTRIBUTING FACTOR VEHICLE 2,CONTRIBUTING FACTOR VEHICLE 3,CONTRIBUTING FACTOR VEHICLE 4,CONTRIBUTING FACTOR VEHICLE 5,COLLISION_ID,VEHICLE TYPE CODE 1,VEHICLE TYPE CODE 2,VEHICLE TYPE CODE 3,VEHICLE TYPE CODE 4,VEHICLE TYPE CODE 5
09/11/2021,2:39,,,,,,WHITESTONE EXPRESSWAY,20 AVENUE,,2,0,0,0,0,0,2,0,Aggressive Driving/Road Rage,Unspecified,,,,4455765,Sedan,Sedan,,,
03/26/2022,11:45,,,,,,QUEENSBORO BRIDGE UPPER,,,1,0,0,0,0,0,1,0,Pavement Slippery,,,,,4513547,Sedan,,,,
06/29/2022,6:55,,,,,,THROGS NECK BRIDGE,,,0,0,0,0,0,0,0,0,Following Too Closely,Unspecified,,,,4541903,Sedan,Pick-up Truck,,,
09/11/2021,9:35,BROOKLYN,11208,40.667202,-73.8665,&lt;span class="s2"&gt;"(40.667202, -73.8665)"&lt;/span&gt;,,,1211      LORING AVENUE,0,0,0,0,0,0,0,0,Unspecified,,,,,4456314,Sedan,,,,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Using &lt;a href="https://ss64.com/bash/head.html"&gt;head&lt;/a&gt; to display the first record only
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n1&lt;/span&gt; all_motor_vehicle_collision_data.csv 
CRASH DATE,CRASH TIME,BOROUGH,ZIP CODE,LATITUDE,LONGITUDE,LOCATION,ON STREET NAME,CROSS STREET NAME,OFF STREET NAME,NUMBER OF PERSONS INJURED,NUMBER OF PERSONS KILLED,NUMBER OF PEDESTRIANS INJURED,NUMBER OF PEDESTRIANS KILLED,NUMBER OF CYCLIST INJURED,NUMBER OF CYCLIST KILLED,NUMBER OF MOTORIST INJURED,NUMBER OF MOTORIST KILLED,CONTRIBUTING FACTOR VEHICLE 1,CONTRIBUTING FACTOR VEHICLE 2,CONTRIBUTING FACTOR VEHICLE 3,CONTRIBUTING FACTOR VEHICLE 4,CONTRIBUTING FACTOR VEHICLE 5,COLLISION_ID,VEHICLE TYPE CODE 1,VEHICLE TYPE CODE 2,VEHICLE TYPE CODE 3,VEHICLE TYPE CODE 4,VEHICLE TYPE CODE 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Use Perl to list the column names in numerical order
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;bash&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$. == 1 &amp;amp;&amp;amp; say $i++ . "\t$_" for @F&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;  &lt;span class="nv"&gt;all_motor_vehicle_collision_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;   &lt;span class="nv"&gt;CRASH&lt;/span&gt; &lt;span class="nv"&gt;DATE&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="nv"&gt;CRASH&lt;/span&gt; &lt;span class="nv"&gt;TIME&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="nv"&gt;BOROUGH&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="nv"&gt;ZIP&lt;/span&gt; &lt;span class="nv"&gt;CODE&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="nv"&gt;LATITUDE&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;   &lt;span class="nv"&gt;LONGITUDE&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="nv"&gt;LOCATION&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;   &lt;span class="nv"&gt;ON&lt;/span&gt; &lt;span class="nv"&gt;STREET&lt;/span&gt; &lt;span class="nv"&gt;NAME&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;   &lt;span class="nv"&gt;CROSS&lt;/span&gt; &lt;span class="nv"&gt;STREET&lt;/span&gt; &lt;span class="nv"&gt;NAME&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;   &lt;span class="nv"&gt;OFF&lt;/span&gt; &lt;span class="nv"&gt;STREET&lt;/span&gt; &lt;span class="nv"&gt;NAME&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;PERSONS&lt;/span&gt; &lt;span class="nv"&gt;INJURED&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;PERSONS&lt;/span&gt; &lt;span class="nv"&gt;KILLED&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;PEDESTRIANS&lt;/span&gt; &lt;span class="nv"&gt;INJURED&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;PEDESTRIANS&lt;/span&gt; &lt;span class="nv"&gt;KILLED&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;CYCLIST&lt;/span&gt; &lt;span class="nv"&gt;INJURED&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;CYCLIST&lt;/span&gt; &lt;span class="nv"&gt;KILLED&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;MOTORIST&lt;/span&gt; &lt;span class="nv"&gt;INJURED&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;  &lt;span class="nv"&gt;NUMBER&lt;/span&gt; &lt;span class="nv"&gt;OF&lt;/span&gt; &lt;span class="nv"&gt;MOTORIST&lt;/span&gt; &lt;span class="nv"&gt;KILLED&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;  &lt;span class="nv"&gt;CONTRIBUTING&lt;/span&gt; &lt;span class="nv"&gt;FACTOR&lt;/span&gt; &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;19&lt;/span&gt;  &lt;span class="nv"&gt;CONTRIBUTING&lt;/span&gt; &lt;span class="nv"&gt;FACTOR&lt;/span&gt; &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;  &lt;span class="nv"&gt;CONTRIBUTING&lt;/span&gt; &lt;span class="nv"&gt;FACTOR&lt;/span&gt; &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt;  &lt;span class="nv"&gt;CONTRIBUTING&lt;/span&gt; &lt;span class="nv"&gt;FACTOR&lt;/span&gt; &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;22&lt;/span&gt;  &lt;span class="nv"&gt;CONTRIBUTING&lt;/span&gt; &lt;span class="nv"&gt;FACTOR&lt;/span&gt; &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;  &lt;span class="nv"&gt;COLLISION_ID&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;  &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="nv"&gt;TYPE&lt;/span&gt; &lt;span class="nv"&gt;CODE&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;  &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="nv"&gt;TYPE&lt;/span&gt; &lt;span class="nv"&gt;CODE&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;26&lt;/span&gt;  &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="nv"&gt;TYPE&lt;/span&gt; &lt;span class="nv"&gt;CODE&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt;  &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="nv"&gt;TYPE&lt;/span&gt; &lt;span class="nv"&gt;CODE&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;28&lt;/span&gt;  &lt;span class="nv"&gt;VEHICLE&lt;/span&gt; &lt;span class="nv"&gt;TYPE&lt;/span&gt; &lt;span class="nv"&gt;CODE&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'perl -an -E'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Split up the column values into array &lt;code&gt;'@F'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-F,'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Specifies a &lt;strong&gt;comma&lt;/strong&gt; field separator.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'$. == 1'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;The Perl special variable &lt;code&gt;'$.'&lt;/code&gt; contains the current line number. &lt;/li&gt;
&lt;li&gt;Display the first line only. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'say $i++ . "\t$_" for @F'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Prints a tab separated counter variable &lt;code&gt;'$i'&lt;/code&gt;, and the corresponding column name, stored in the Perl default variable &lt;code&gt;'$_'&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Create a work-file containing the zip-code, injury count, and fatality count. Only get records that include a zip-code and at least one injury or fatality.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;3   ZIP CODE
10  NUMBER OF PERSONS INJURED
11  NUMBER OF PERSONS KILLED
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  
  
  Method
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Unfortunately the previous method for splitting a comma delimited file has limitations. It cannot handle fields with embedded commas. The &lt;em&gt;Street Name&lt;/em&gt; fields often have embedded commas which will throw off our column numbering.
&lt;/li&gt;
&lt;li&gt;To get around this we can use &lt;a href="https://metacpan.org/pod/Text::CSV"&gt;Text::CSV&lt;/a&gt;, which has both functional and OO interfaces.  For one-liners, it exports a handy &lt;a href="https://metacpan.org/pod/Text::CSV#csv"&gt;csv function&lt;/a&gt;. From the Text::CSV documentation &lt;code&gt;'my $aoa = csv (in =&amp;gt; "test.csv") or die Text::CSV_XS-&amp;gt;error_diag;''&lt;/code&gt;, it’ll convert the CSV file into an array of arrays.&lt;/li&gt;
&lt;li&gt;I'll modify this example slightly to &lt;code&gt;'csv( in =&amp;gt; $ARGV[0], headers =&amp;gt; qq/skip/ )'&lt;/code&gt;. The @ARGV array contains any input arguments. The first element $ARGV[0] will contain the input CSV file. We don’t need the header row, so it’ll be skipped.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nn"&gt;MText::&lt;/span&gt;&lt;span class="nv"&gt;CSV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$aofa = csv( in =&amp;gt; $ARGV[0], headers =&amp;gt; qq/skip/ ); ( $_-&amp;gt;[3] =~ /^\S+$/ ) &amp;amp;&amp;amp; say qq/$_-&amp;gt;[3],$_-&amp;gt;[10],$_-&amp;gt;[11]/ for @{$aofa}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;  &lt;span class="nv"&gt;all_motor_vehicle_collision_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_zip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Input file &lt;code&gt;'all_motor_vehicle_collision_data.csv'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'perl -MText::CSV=csv'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt; Run the perl command with &lt;code&gt;'-M'&lt;/code&gt; switch to load a Perl module.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'Text::CSV=csv'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Export the ‘csv’ function from the &lt;code&gt;'Text::CSV'&lt;/code&gt; module. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'( $_-&amp;gt;[3] =~ /^\S+$/ )'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Use a Regular expression to only process rows that have non-blank data in the &lt;em&gt;ZIP CODE&lt;/em&gt; field. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'say qq/$&lt;em&gt;-&amp;gt;[3],$&lt;/em&gt;-&amp;gt;[10],$_-&amp;gt;[11]/ for @{$aofa}'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Loop through the Array of Arrays &lt;code&gt;'$aofa'&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Print the contents of columns 3,10,11 followed by a line break.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The output is piped &lt;code&gt;'|'&lt;/code&gt; into the Linux sort command. 

&lt;ul&gt;
&lt;li&gt;Sorting on the first field, &lt;em&gt;ZIP CODE&lt;/em&gt; and redirecting, &lt;code&gt;'&amp;gt;'&lt;/code&gt; into a new file, &lt;code&gt;'sorted_injured_killed_by_zip.csv'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;See the &lt;a href="https://ss64.com/bash/sort.html"&gt;ss64.com site&lt;/a&gt; for more details on the Linux sort command. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The new file has about 1.36 Million lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  
  
  Get a line count with &lt;a href="https://ss64.com/bash/wc.html"&gt;wc&lt;/a&gt;. Display the first 10 records using &lt;a href="https://ss64.com/bash/head.html"&gt;head&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;wc&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; sorted_injured_killed_by_zip.csv 
1359291 sorted_injured_killed_by_zip.csv
bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n10&lt;/span&gt; sorted_injured_killed_by_zip.csv | column &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;, &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ZipCode,#Injured,#Killed
ZipCode  &lt;span class="c"&gt;#Injured  #Killed&lt;/span&gt;
11697    4         0
11697    3         0
11697    2         0
11697    2         0
11697    2         0
11697    1         0
11697    1         0
11697    1         0
11697    1         0
11697    1         0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'wc -l'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Counts the number of lines in our new file &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'head -n 10'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Prints out the first 10 lines of the file&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'column -t -s, --table-columns=ZipCode,#Injured,#Killed'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.man7.org/linux/man-pages/man1/column.1.html"&gt;column&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;code&gt;'-t'&lt;/code&gt; switch will tell &lt;code&gt;'column'&lt;/code&gt; to print in table format. &lt;/li&gt;
&lt;li&gt; &lt;code&gt;'-s'&lt;/code&gt; switch specifies an input delimiter of ','. &lt;/li&gt;
&lt;li&gt; The output is tabbed. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  List the 10 worst zip codes for injuries
&lt;/h3&gt;

&lt;h4&gt;
  
  
  We can use the output file, sorted_injured_killed_by_zip.csv, from the previous example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@a=split(q/,/,$_);$h{$a[0]} += $a[1]; END{say qq/$_,$h{$_}/ for keys %h}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_zip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;column&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;ZipCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#Injured&lt;/span&gt;
&lt;span class="nv"&gt;ZipCode&lt;/span&gt;  &lt;span class="c1"&gt;#Injured&lt;/span&gt;
&lt;span class="mi"&gt;11207&lt;/span&gt;    &lt;span class="mi"&gt;10089&lt;/span&gt;
&lt;span class="mi"&gt;11236&lt;/span&gt;    &lt;span class="mi"&gt;7472&lt;/span&gt;
&lt;span class="mi"&gt;11203&lt;/span&gt;    &lt;span class="mi"&gt;7426&lt;/span&gt;
&lt;span class="mi"&gt;11212&lt;/span&gt;    &lt;span class="mi"&gt;6676&lt;/span&gt;
&lt;span class="mi"&gt;11226&lt;/span&gt;    &lt;span class="mi"&gt;6103&lt;/span&gt;
&lt;span class="mi"&gt;11208&lt;/span&gt;    &lt;span class="mi"&gt;6027&lt;/span&gt;
&lt;span class="mi"&gt;11234&lt;/span&gt;    &lt;span class="mi"&gt;5505&lt;/span&gt;
&lt;span class="mi"&gt;11434&lt;/span&gt;    &lt;span class="mi"&gt;5403&lt;/span&gt;
&lt;span class="mi"&gt;11233&lt;/span&gt;    &lt;span class="mi"&gt;5159&lt;/span&gt;
&lt;span class="mi"&gt;11385&lt;/span&gt;    &lt;span class="mi"&gt;4440&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'@a=split(q/,/,$_);'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;As there are no embedded commas in this file we use the Perl ‘split’ function to break up the 3 CSV fields in each row into array &lt;code&gt;'@a'&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'$h{$a[0]} += $a[1];'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;The first element of each row, &lt;em&gt;ZIP CODE&lt;/em&gt; is used as a key for Hash'&lt;code&gt;%h'&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The value is the accumulated number of injuries for that &lt;em&gt;ZIP CODE&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'$h{$a[0]} += $a[1]'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;We accumulate the second element, $[1], which contains &lt;code&gt;'NUMBER OF PERSONS INJURED'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We can set a value for a Hash key without checking if it exists already. &lt;/li&gt;
&lt;li&gt;This is called Autovivification which is explained nicely by &lt;a href="https://perlmaven.com/autovivification"&gt;The Perl Maven&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'END{say qq/$&lt;em&gt;,$h{$&lt;/em&gt;}/ for keys %h}'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;'END{}&lt;/code&gt;'block runs after all the rows are processed. &lt;/li&gt;
&lt;li&gt;The keys(Zip Codes) are read and printed along with their corresponding values. &lt;/li&gt;
&lt;li&gt;We could have used Perl to sort the output by the keys, or values. &lt;/li&gt;
&lt;li&gt;I used the Linux &lt;a href="https://ss64.com/bash/sort.html"&gt;sort&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'sort -nr -t, -k 2'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Will perform a numeric sort, descending on the # of people injured. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'head -n10'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Will get the first 10 records printed. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'column -t -s, --table-columns=ZipCode,#Injured'&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;'columns'&lt;/code&gt; command will produce a prettier output.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'-t'&lt;/code&gt; for table format.&lt;/li&gt;
&lt;li&gt; &lt;code&gt;'-s'&lt;/code&gt; to specify that the fields are comma separated&lt;/li&gt;
&lt;li&gt; &lt;code&gt;'--table-columns''&lt;/code&gt; to add column header names. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;p&gt;Zip code &lt;a href="http://www.neighborhoodlink.com/zip/11207"&gt;11207&lt;/a&gt;, which encompasses East New York, Brooklyn, as well as a small portion of Southern Queens, has a lot of issues with traffic safety. &lt;/p&gt;

&lt;h3&gt;
  
  
  Display the 10 worst zip codes for traffic fatalities
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@a=split(q/,/,$_);$h{$a[0]} += $a[2]; END{say qq/$_,$h{$_}/ for keys %h}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_zip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;column&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;ZipCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#Killed&lt;/span&gt;
&lt;span class="nv"&gt;ZipCode&lt;/span&gt;  &lt;span class="c1"&gt;#Killed&lt;/span&gt;
&lt;span class="mi"&gt;11236&lt;/span&gt;    &lt;span class="mi"&gt;44&lt;/span&gt;
&lt;span class="mi"&gt;11207&lt;/span&gt;    &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="mi"&gt;11234&lt;/span&gt;    &lt;span class="mi"&gt;29&lt;/span&gt;
&lt;span class="mi"&gt;11434&lt;/span&gt;    &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="mi"&gt;11354&lt;/span&gt;    &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="mi"&gt;11229&lt;/span&gt;    &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;11208&lt;/span&gt;    &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="mi"&gt;11206&lt;/span&gt;    &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="mi"&gt;11233&lt;/span&gt;    &lt;span class="mi"&gt;22&lt;/span&gt;
&lt;span class="mi"&gt;11235&lt;/span&gt;    &lt;span class="mi"&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;With a few minor adjustments, we got the worst zip codes for traffic collision fatalities&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'$h{$a[0]} += $a[2]'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Accumulate the third element, $[2], which contains &lt;code&gt;'NUMBER OF PERSONS KILLED'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Zip code &lt;a href="http://www.neighborhoodlink.com/zip/11236"&gt;11236&lt;/a&gt;, which includes Canarsie Brooklyn is the worst for traffic fatalities according to this data. 

&lt;ul&gt;
&lt;li&gt;Zip code &lt;strong&gt;11207&lt;/strong&gt; is also very bad for traffic fatalities, as well as being the worst for collision injuries &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;These stats are not 100 percent correct, as out of 1,972,886 collision records, 1,359,291 contained Zip codes. 

&lt;ul&gt;
&lt;li&gt;We have 613,595 records with no zip code, which were not included in the calculations. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Some NYC Borough Stats
&lt;/h3&gt;

&lt;p&gt;Similar to how we created the &lt;code&gt;'sorted_injured_killed_by_zip.csv'&lt;/code&gt;, we can run the following command sequence to create a new file &lt;code&gt;'sorted_injured_killed_by_borough.csv'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nn"&gt;MText::&lt;/span&gt;&lt;span class="nv"&gt;CSV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$aofa = csv( in =&amp;gt; $ARGV[0], headers =&amp;gt; qq/skip/ ) ; ( $_-&amp;gt;[2] =~ /^\S+/ ) &amp;amp;&amp;amp; say qq/$_-&amp;gt;[2],$_-&amp;gt;[10],$_-&amp;gt;[11]/ for @{$aofa}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;  &lt;span class="nv"&gt;all_motor_vehicle_collision_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nv"&gt;rn&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nv"&gt;rn&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;  &lt;span class="nv"&gt;sorted_injured_killed_by_borough&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The Borough field is the third column, &lt;code&gt;'2   BOROUGH'&lt;/code&gt;, starting from 0, in the &lt;code&gt;'all_motor_vehicle_collision_data.csv'&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'( $_-&amp;gt;[2] =~ /^\S+/ )'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Only get rows which have non blank data in the &lt;em&gt;BOROUGH&lt;/em&gt; field. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'sort -t, -k 3rn -k 2rn -k 1'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;I added some more precise sorting, which is unnecessary except to satisfy my curiosity.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ss64.com/bash/sort.html"&gt;sort&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-k 3rn&lt;/code&gt;''&lt;/li&gt;
&lt;li&gt;Sort by column 3(starting @ 1), which is the fatality count field.&lt;/li&gt;
&lt;li&gt;This is sorted numerically in descending order. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-k 2rn&lt;/code&gt;'' 

&lt;ul&gt;
&lt;li&gt;When equal, the injury count is also sorted numerically, descending. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-k 1'&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;The Borough is sorted in ascending order as a tiebreaker.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  
  
  Display the first 10 rows of this file.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n10&lt;/span&gt; sorted_injured_killed_by_borough.csv | column &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;, &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Borough,#Injured,#Killed
Borough        &lt;span class="c"&gt;#Injured  #Killed&lt;/span&gt;
MANHATTAN      12        8
QUEENS         3         5
QUEENS         15        4
QUEENS         1         4
STATEN ISLAND  6         3
BROOKLYN       4         3
BROOKLYN       3         3
QUEENS         3         3
BROOKLYN       1         3
QUEENS         1         3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Sanity check if we got all five boroughs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f&lt;/span&gt; 1  sorted_injured_killed_by_borough.csv | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; 
BRONX
BROOKLYN
MANHATTAN
QUEENS
STATEN ISLAND
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'cut -d, -f 1'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://ss64.com/bash/cut.html"&gt;cut&lt;/a&gt; to split the comma delimited file records.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'-d,'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Specifies that the cut will comma delimited&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-f 1'&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Get the first field from the &lt;code&gt;cut&lt;/code&gt;, which is the Borough Name. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'sort -u'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Sorts and prints only the unique values to STDOUT&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We got all 5 New York City boroughs in this file. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Display collision injuries for each borough
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;bash&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@a=split(q/,/,$_);$h{$a[0]} += $a[1]; END{say qq/$_,$h{$_}/ for keys %h}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_borough&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;column&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nv"&gt;BROOKLYN&lt;/span&gt;       &lt;span class="mi"&gt;137042&lt;/span&gt;
&lt;span class="nv"&gt;QUEENS&lt;/span&gt;         &lt;span class="mi"&gt;105045&lt;/span&gt;
&lt;span class="nv"&gt;BRONX&lt;/span&gt;          &lt;span class="mi"&gt;62880&lt;/span&gt;
&lt;span class="nv"&gt;MANHATTAN&lt;/span&gt;      &lt;span class="mi"&gt;61400&lt;/span&gt;
&lt;span class="nv"&gt;STATEN&lt;/span&gt; &lt;span class="nv"&gt;ISLAND&lt;/span&gt;  &lt;span class="mi"&gt;15659&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Brooklyn emerges as the Borough with the most traffic injuries. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Display collision fatalities by Borough
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;bash&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@a=split(q/,/,$_);$h{$a[0]} += $a[2]; END{say qq/$_,$h{$_}/ for keys %h}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_borough&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;nr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;column&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;J&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sr"&gt;s, --table-columns Borough,#Killed
{
   "table": [
      {
         "borough": "BROOKLYN",&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#killed&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;564&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},{&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;borough&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;QUEENS&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#killed&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;482&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},{&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;borough&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MANHATTAN&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#killed&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;300&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},{&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;borough&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BRONX&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#killed&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;241&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},{&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;borough&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;STATEN ISLAND&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
         &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#killed&lt;/span&gt;&lt;span class="p"&gt;":&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;88&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Similar to the Injury count by Borough, this counts all fatalities by borough and prints the output in JSON format.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'column -J -s, --table-columns Borough,#Killed'&lt;/code&gt;  Use the &lt;code&gt;'column'&lt;/code&gt; command with the &lt;code&gt;'-J'&lt;/code&gt; switch, for JSON, instead of &lt;code&gt;'-t'&lt;/code&gt; for Table. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  I forgot to mention what date range is involved with this dataset. We can check this with the &lt;a href="https://ss64.com/bash/cut.html"&gt;cut&lt;/a&gt; command.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f1&lt;/span&gt; all_motor_vehicle_collision_data.csv | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;/ &lt;span class="nt"&gt;-f3&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt;
2012
2013
2014
2015
2016
2017
2018
2019
2020
2021
2022
2023
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Get the date field, &lt;code&gt;'0  CRASH DATE'&lt;/code&gt; which is in &lt;code&gt;'mm/dd/yyyy'&lt;/code&gt; format. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'cut -d, -f '&lt;/code&gt; &lt;code&gt;'all_motor_vehicle_collision_data.csv'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Get the first column/field of data for every row of this CSV file. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-d,'&lt;/code&gt; specifies that we are cutting on the comma delimiters. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-f 1'&lt;/code&gt; specifies that we want the first column/field only&lt;/li&gt;
&lt;li&gt;This is the date in &lt;code&gt;'mm/dd/yyyy'&lt;/code&gt; format. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'cut -d/ -f3'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Will cut the date using &lt;code&gt;'/&lt;/code&gt;’ as the delimiter. &lt;/li&gt;
&lt;li&gt;Grab the third field from this, which is the four digit year. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'sort -u'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;The years are then sorted with duplicates removed. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The dataset started sometime in 2012 and continues until now, March 2023. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Display the 20 worst days for collisions in NYC
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f1&lt;/span&gt; all_motor_vehicle_collision_data.csv | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="s1"&gt;'{print $3 "-" $1 "-" $2}'&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; | &lt;span class="nb"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-k&lt;/span&gt; 1nr | &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n20&lt;/span&gt; | column &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;#Collisions,Date&lt;/span&gt;
&lt;span class="c"&gt;#Collisions  Date&lt;/span&gt;
1161        2014-01-21
1065        2018-11-15
999         2017-12-15
974         2017-05-19
961         2015-01-18
960         2014-02-03
939         2015-03-06
911         2017-05-18
896         2017-01-07
884         2018-03-02
883         2017-12-14
872         2016-09-30
867         2013-11-26
867         2018-11-09
857         2017-04-28
851         2013-03-08
851         2016-10-21
845         2017-06-22
845         2018-06-29
841         2018-12-14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Get a count for all collisions for each date on record &lt;/li&gt;
&lt;li&gt;Display the first 20 with the highest collision count &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ss64.com/bash/cut.html"&gt;cut&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;Get the first column from the dataset.&lt;/li&gt;
&lt;li&gt;Pipe this date into the &lt;a href="https://ss64.com/bash/awk.html"&gt;awk&lt;/a&gt; command. &lt;/li&gt;
&lt;li&gt;AWK is a very useful one-liner tool as well as being a full scripting language. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'awk -F '/' '{print $3 "-" $1 "-" $2}'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'-F '/' '&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Split the date into separate fields using the &lt;code&gt;’/’&lt;/code&gt; as a delimiter. &lt;/li&gt;
&lt;li&gt;$1 contains the month value, $2 contains the day of month and $3 contains the four digit year value. &lt;/li&gt;
&lt;li&gt;These will be printed in the format &lt;code&gt;'”yyyy-mm-dd”&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dates are then sorted and piped into the &lt;a href="https://ss64.com/bash/uniq.html"&gt;uniq&lt;/a&gt; command. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'uniq -c'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Will create a unique output. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-c'&lt;/code&gt; switch gets a count of all the occurrences for each value. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The output is piped into another sort command, which sorts by the number of occurrences descending. &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;I’m not sure if there is any explanation for why some days have a lot more collisions than others. Weatherwise, January 21 2014 was a cold day, but otherwise uneventful. November 15 2018 had some snow, but not a horrific snowfall. The clocks went back on November 4, so that wouldn’t be a factor. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wunderground.com/history/daily/us/ny/new-york-city/KLGA/date/2014-1-21"&gt;2014-01-21 weather &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wunderground.com/history/daily/us/ny/new-york-city/KLGA/date/2018-11-15"&gt;2018-11-15 weather&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Display the twenty worst times during the day for collisions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f2&lt;/span&gt; all_motor_vehicle_collision_data.csv | &lt;span class="nb"&gt;sort&lt;/span&gt; | &lt;span class="nb"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-k&lt;/span&gt; 1nr | &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n20&lt;/span&gt; |column &lt;span class="nt"&gt;-t&lt;/span&gt;  &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;#Collisions,Time&lt;/span&gt;
&lt;span class="c"&gt;#Collisions  Time&lt;/span&gt;
27506       16:00
26940       17:00
26879       15:00
24928       18:00
24667       14:00
22914       13:00
20687       9:00
20641       12:00
20636       19:00
19865       16:30
19264       8:00
19107       10:00
19106       14:30
19010       0:00
18691       11:00
18688       17:30
16646       18:30
16602       20:00
16144       8:30
16008       13:30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;We use the time field, &lt;code&gt;'1   CRASH TIME'&lt;/code&gt;, which is in 24 hour format, 'HH:MM'&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Using the 'actual time' may be a bit too specific. I’ll use the 'hour of day' instead to give a 60 minute time frame.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f2&lt;/span&gt; all_motor_vehicle_collision_data.csv | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; : &lt;span class="nt"&gt;-f1&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; | &lt;span class="nb"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-k&lt;/span&gt; 1nr | &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n10&lt;/span&gt; | column &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;#Collisions,Hour&lt;/span&gt;
&lt;span class="c"&gt;#Collisions  Hour&lt;/span&gt;
143012      16
139818      17
132443      14
123761      15
122971      18
114555      13
108925      12
108593      8
105206      9
102541      11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Similar to the previous example, except this time the &lt;a href="https://ss64.com/bash/cut.html"&gt;cut&lt;/a&gt; command is used to split the time HH:MM, delimited by &lt;code&gt;':'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'cut -d : -f 1'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'-d'&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;The 'cut' delimiter is ':'&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'-f 1'&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Grab the first field, 'HH' of the 'HH:MM'. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Use something like the &lt;a href="https://ss64.com/bash/printf.html"&gt;printf&lt;/a&gt; command to append &lt;code&gt;':00'&lt;/code&gt; to those hours. &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;p&gt;As you would expect, most collisions happen during rush hour. &lt;/p&gt;

&lt;h3&gt;
  
  
  Display the worst years for collisions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-f1&lt;/span&gt; all_motor_vehicle_collision_data.csv | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="nt"&gt;-f3&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; | &lt;span class="nb"&gt;uniq&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-k&lt;/span&gt; 1nr | &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n10&lt;/span&gt; | column &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;#Collisions,Year&lt;/span&gt;
&lt;span class="c"&gt;#Collisions  Year&lt;/span&gt;
231564       2018
231007       2017
229831       2016
217694       2015
211486       2019
206033       2014
203734       2013
112915       2020
110546       2021
103745       2022
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;We use the first column, &lt;code&gt;'0 CRASH DATE'&lt;/code&gt; again&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'cut -d '/' -f3'&lt;/code&gt; 

&lt;ul&gt;
&lt;li&gt;Extracts the &lt;code&gt;'yyyy'&lt;/code&gt; from the &lt;code&gt;'mm/dd/yyyy'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Some improvement seen in 2020, 2021 and 2022, if you can believe the data. &lt;/li&gt;
&lt;li&gt;One unscientific observation here is that the NYPD may have been much less vigilant in the past few years than they were prior to Commissioner Raymond Kelly and his successors. &lt;/li&gt;
&lt;li&gt;Also, by only printing out the worst 10 years, partial years 2012 and 2023 were excluded. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  For a comparison. See how many people were injured or killed in traffic collisions.
&lt;/h3&gt;

&lt;h5&gt;
  
  
  First create a work file, &lt;code&gt;'sorted_injured_killed_by_year.csv'&lt;/code&gt;, with three columns, Year, Injured count and Fatality count
&lt;/h5&gt;

&lt;p&gt;We need the &lt;a href="https://metacpan.org/pod/Text::CSV"&gt;Text::CSV&lt;/a&gt; Perl module here due to those embedded commas in earlier fields.  Below are the three fields needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0   CRASH DATE
10  NUMBER OF PERSONS INJURED
11  NUMBER OF PERSONS KILLED
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;bash&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nn"&gt;MText::&lt;/span&gt;&lt;span class="nv"&gt;CSV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$aofa = csv( in =&amp;gt; $ARGV[0], headers =&amp;gt; qq/skip/ ); ($_-&amp;gt;[10] || $_-&amp;gt;[11]) &amp;amp;&amp;amp; say substr($_-&amp;gt;[0],6,4) . qq/,$_-&amp;gt;[10],$_-&amp;gt;[11]/ for @{$aofa}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;all_motor_vehicle_collision_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Check out the work file we just created
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;wc&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; sorted_injured_killed_by_year.csv 
433081 sorted_injured_killed_by_year.csv

bash &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n10&lt;/span&gt; sorted_injured_killed_by_year.csv | column &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt;, &lt;span class="nt"&gt;--table-columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Year,#Injured,#Killed
Year  &lt;span class="c"&gt;#Injured  #Killed&lt;/span&gt;
2012  0         1
2012  0         1
2012  0         1
2012  0         1
2012  0         1
2012  0         1
2012  0         1
2012  0         1
2012  0         1
2012  0         1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  
  
  Worst years for collision injuries
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@a=split(q/,/,$_);$h{$a[0]} += $a[1]; END{say qq/$_,  $h{$_}/ for sort {$h{$b} &amp;lt;=&amp;gt; $h{$a} } keys %h}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nv"&gt;column&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;Year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#Injured &lt;/span&gt;
&lt;span class="nv"&gt;Year&lt;/span&gt;  &lt;span class="c1"&gt;#Injured&lt;/span&gt;
&lt;span class="mi"&gt;2018&lt;/span&gt;    &lt;span class="mi"&gt;61941&lt;/span&gt;
&lt;span class="mi"&gt;2019&lt;/span&gt;    &lt;span class="mi"&gt;61389&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;    &lt;span class="mi"&gt;60656&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;    &lt;span class="mi"&gt;60317&lt;/span&gt;
&lt;span class="mi"&gt;2013&lt;/span&gt;    &lt;span class="mi"&gt;55124&lt;/span&gt;
&lt;span class="mi"&gt;2022&lt;/span&gt;    &lt;span class="mi"&gt;51883&lt;/span&gt;
&lt;span class="mi"&gt;2021&lt;/span&gt;    &lt;span class="mi"&gt;51780&lt;/span&gt;
&lt;span class="mi"&gt;2015&lt;/span&gt;    &lt;span class="mi"&gt;51358&lt;/span&gt;
&lt;span class="mi"&gt;2014&lt;/span&gt;    &lt;span class="mi"&gt;51223&lt;/span&gt;
&lt;span class="mi"&gt;2020&lt;/span&gt;    &lt;span class="mi"&gt;44615&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;This is similar to how we got the Zip Code and Borough data previously. &lt;/li&gt;
&lt;li&gt;This time the Perl sort is used instead of the Linux sort. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'END{say qq/$_,  $h{$_}/ for sort {$h{$b} &amp;lt;=&amp;gt; $h{$a} } keys %h}'&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'for'&lt;/code&gt; statement loops through the &lt;code&gt;'%h'&lt;/code&gt; hash keys(years). &lt;/li&gt;
&lt;li&gt;The corresponding Hash values(Injured count), are sorted in descending order.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'sort {$h{$b} &amp;lt;=&amp;gt; $h{$a} }'&lt;/code&gt;. 

&lt;ul&gt;
&lt;li&gt;$a and $b are default Perl sort variables.&lt;/li&gt;
&lt;li&gt;Rearranged it to &lt;code&gt;'sort {$h{$a} &amp;lt;=&amp;gt; $h{$b} }'&lt;/code&gt;, to sort the injury count in ascending order. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;p&gt;While the collision count may have gone down, there isn't any real corresponding downward trend in injuries. &lt;/p&gt;

&lt;h4&gt;
  
  
  The worst years for collision fatalities.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;bash&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@a=split(q/,/,$_);$h{$a[0]} += $a[2]; END{say qq/$_,  $h{$_}/ for sort {$h{$b} &amp;lt;=&amp;gt; $h{$a} } keys %h}&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;sorted_injured_killed_by_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nv"&gt;column&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;table&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;Year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;#Killed&lt;/span&gt;
&lt;span class="nv"&gt;Year&lt;/span&gt;  &lt;span class="c1"&gt;#Killed&lt;/span&gt;
&lt;span class="mi"&gt;2013&lt;/span&gt;    &lt;span class="mi"&gt;297&lt;/span&gt;
&lt;span class="mi"&gt;2021&lt;/span&gt;    &lt;span class="mi"&gt;294&lt;/span&gt;
&lt;span class="mi"&gt;2022&lt;/span&gt;    &lt;span class="mi"&gt;285&lt;/span&gt;
&lt;span class="mi"&gt;2020&lt;/span&gt;    &lt;span class="mi"&gt;268&lt;/span&gt;
&lt;span class="mi"&gt;2014&lt;/span&gt;    &lt;span class="mi"&gt;262&lt;/span&gt;
&lt;span class="mi"&gt;2017&lt;/span&gt;    &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;span class="mi"&gt;2016&lt;/span&gt;    &lt;span class="mi"&gt;246&lt;/span&gt;
&lt;span class="mi"&gt;2019&lt;/span&gt;    &lt;span class="mi"&gt;244&lt;/span&gt;
&lt;span class="mi"&gt;2015&lt;/span&gt;    &lt;span class="mi"&gt;243&lt;/span&gt;
&lt;span class="mi"&gt;2018&lt;/span&gt;    &lt;span class="mi"&gt;231&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  
  
  Explanation
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Slightly modified version of the injury by year count. &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  
  
  Observation
&lt;/h5&gt;

&lt;p&gt;Same as with the injuries count. There isn't any real corresponding downward trend in traffic collision fatalities. &lt;/p&gt;

&lt;h3&gt;
  
  
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There’s lots more work that can be done to extract meaningful information from this dataset.&lt;br&gt;&lt;br&gt;
What’s clear to me, is that all the political rhetoric and money poured into &lt;a href="https://www.nyc.gov/content/visionzero/pages/"&gt;Vision Zero&lt;/a&gt; has yielded little in terms of results. &lt;br&gt;
Most of the solutions are obvious from a logical point of view, but not a political point of view. I walk and cycle these streets and know how dangerous it is to cross at the “designated” crosswalks when cars and trucks are turning in on top of you. Cycling in NYC is even worse.&lt;/p&gt;

&lt;h4&gt;
  
  
  Some sugggested solutions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Delayed green lights co cars cars don't turn in on pedestrians at crosswalks. &lt;/li&gt;
&lt;li&gt;Much higher tax and registraton fees for giant SUV's and pickup trucks. The don’t belong in the city. &lt;/li&gt;
&lt;li&gt;Better bike lanes, instead of meaningless lines painted on the road.

&lt;ul&gt;
&lt;li&gt; Many bike lanes are used as convenient parking for NYPD and delivery vehicles. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Basic enforcement of traffic laws, which isn't being done now. 

&lt;ul&gt;
&lt;li&gt;Drivers ignore red lights, speed limits, noise restrictions etc. when they know they aren't being enforced. &lt;/li&gt;
&lt;li&gt;Driving while texting or yapping on the phone is the norm, not the exception. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Drastically improve public transit, especially in areas not served by the subway system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Some Perl CLI Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlrun"&gt;Perldocs - perlrun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://catonmat.net/books"&gt;Peteris Krumins has some great e-books&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.perl.com/pub/2004/08/09/commandline.html/"&gt;Dave Cross - From one of his older posts on perl.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  
  
  Some NYC Street Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nyc.streetsblog.org/"&gt;StreetsBlog NYC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://hellgatenyc.com/"&gt;Hellgate NYC - Local NYC News&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elkue.com/"&gt;Liam Quigley - Local Reporter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/_elkue"&gt;More Liam Quigley - Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=jN7mSXMruEo"&gt;These Stupid Trucks are Literally Killing Us - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  
  
  Me
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/austin-kenny-87515311/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.aibistin.com/"&gt;My Blog&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Austin</name>
    </author>
    <id>https://dev.to/austin_62/analyzing-new-york-city-traffic-collisions-with-perl-one-liners-and-linux-pnn</id>
    <published>2023-03-21T17:12:33Z</published>
    <updated>2023-03-21T17:12:33Z</updated>
    <category term="perl"/>
    <category term="linux"/>
    <category term="data"/>
    <category term="traffic"/>
  </entry>
  <entry>
  <title>Report on Volunteerism in the Perl Community</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/reportonperlvolunteerism"/>
  <id>tag:news.perlfoundation.org,2023-03-21:/post/reportonperlvolunteerism</id>
  <published>2023-03-21T13:14:44</published>
  <updated>2023-03-21T13:14:44</updated>
  <summary>
  <![CDATA[
     This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering scenario within these communities and create techniques that will help in better management of volunteers. The Perl community is ideal for this research project as there is no single large corporate entity behind the communities. Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/11d7bbec952d46a9332b896177e91328c59d9a35/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>This report is a collaboration between Dr. Ann Barcomb's research lab and TPRF. <p>
The research was primarily conducted by Aadharsh Hariharan. The goal of this research project is to analyse the current existing volunteering
scenario within these communities and create techniques that will help in better management of volunteers. The Perl
community is ideal for this research project as there is no single large corporate entity behind the communities. <p><p> 
Please <a href="https://drive.google.com/file/d/1xlSSbqJnfpBMBZaxnjgC9JwbQwTMJ60c/view?usp=share_link">click here</a> to view the report in it's entirety. <p>
We will be discussing the report at the next Community and Reps meeting, which will be held on April 21st at 17:30 UTC. <p> 
To join the meeting virtually, please follow <a href="https://us02web.zoom.us/j/89049224605?pwd=cU5sTVdDR0x4bnRFQU4zR2dRQ0o2dz09">this Zoom link. </a> <p>
Meeting ID: 890 4922 4605<p>
Passcode: 8675309<p>
We hope to see you at the meeting and look forward to your input. <p> </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Fantasy Name Generator</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/21/fantasyname/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I submitted a <a href="https://github.com/skeeto/fantasyname/pull/20">Pull Request</a> to <a href="https://github.com/skeeto/fantasyname">Fantasy Name Generator</a>.</p>
</blockquote>

<p>About two years and a half ago I run a little series of post starting with
post <a href="/ETOOBUSY/2020/11/02/fng-grammar/">Fantasy Name Generator - a grammar</a>. The gist of it is that the
<a href="https://github.com/skeeto/fantasyname">Fantasy Name Generator</a> repository contains a <a href="https://www.perl.org/">Perl</a> implementation,
but it can become quickly slow for moderately complex expressions, as also
noted in the project itself.</p>

<p>I finally got to generate a <a href="https://github.com/skeeto/fantasyname/pull/20">Pull Request</a> about it, proposing a
different parser implementation.</p>

<p>I suspect that there’s not much interest in that repository since a long
time, because my <a href="https://github.com/skeeto/fantasyname/issues/19">previous issue</a> didn’t receive any answer, and I
see stalled pull requests as well. Anyway, maybe people interested into the
project will anyway figure that there’s been some improvement desppite the
reduced attention that the project got in these latest years.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/21/fantasyname/</id>
    <published>2023-03-21T06:00:00+01:00</published>
    <updated>2023-03-21T06:00:00+01:00</updated>
    <category term="perl"/>
    <category term="parsing"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 209: Special Bit Characters and Merge Account</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/03/perl-weekly-challenge-209-special-bit-characters-and-merge-account.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11053</id>
    <published>2023-03-21T03:36:20Z</published>
    <updated>2023-03-21T03:40:07Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 209 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-209/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on March 26, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Special Bit Characters</h2>

<p><em>You are given an array of binary bits that ends with 0.</em></p>

<p><em>Valid sequences in the bit string are:</em></p>

<pre><code>[0] -decodes-to-&gt; "a"
[1, 0] -&gt; "b"
[1, 1] -&gt; "c"
</code></pre>

<p><em>Write a script to print 1 if the last character is an “a” otherwise print 0.</em></p>

<p><em>Example 1</em>:</p>

<pre><code>Input: @bits = (1, 0, 0)
Output: 1

The given array bits can be decoded as 2-bits character (10) followed by 1-bit character (0).
</code></pre>

<p><em>Example 2</em>:</p>

<pre><code>Input: @bits = (1, 1, 1, 0)
Output: 0

Possible decode can be 2-bits character (11) followed by 2-bits character (10) i.e. the last character is not 1-bit character.
</code></pre>

<p>This is an example of variable-length code. In order to decode such a bit string, we need to start from the beginning of the string. If the string starts with 0, then we have an "a" and can continue decoding with the next bit. If the string starts with 1, then we need to check the next digit, to figure out whether the first letter is a "b or a "c", and we can continue decoding with the third bit. And so on. So, for example, if we have the following string:</p>

<pre><code>0110100100111011100
</code></pre>

<p>We will effectively split it as follows:</p>

<pre><code>0 11 0 10 0 10 0 11 10 11 10 0,
</code></pre>

<p>yielding the following decoded string: "acababacbcba."</p>

<p>It is easy to see that such an encoding is totally unambiguous: at any point in the process, there can be only one decoded letter.</p>

<p>But if we pick one bit somewhere in the middle of the bit string, we can't know how to proceed. If it is a 0, this can be an "a", or the second bit of a "b". Similarly, if it is a 1, then it can be the first bit of a "b", or the first or the second bit of a "c". So, we can be sure to always unambiguously decode the string only if we start from the beginning. There are cases, however, where it is possible to decode part of the string starting from somewhere in the middle. For example, if we find two consecutive 0, we know that the second one can only be an "a" and proceed from there. We don't need to proceed from the beginning to find that the last letter in the above bit string is an "a". But, since we cannot be sure to meet such a situation, the best is to start from the beginning as explained above. For much longer strings, looking for the last occurrence of a "00" pattern, and proceed from the second 0 (an "a"), may be an interesting performance improvement, since we're really interested in finding out whether the final 0 is an "a" or the second bit of a "b". With the small examples at hand, this optimization would be useless.</p>

<h3>Special Bit Characters in Raku</h3>

<p>The program goes through the bit string and consume either one or two bits, depending on whether the current digit is a 0 or a 1. If the last bit (necessarily a 0) is the start of a group, then it is an "a". Otherwise, it is the second bit of a "10" group (i.e. of a "b"). Note that a <code>loop</code> statement alone, without three statements in parentheses, is just an infinite loop, from which we exit with either of the return statements.</p>

<pre><code>sub ends-with-a (@in) {
    my $i = 0;
    my $end = @in.end;
    loop {
        return 1 if $i == $end;
        $i += @in[$i] == 0 ?? 1 !! 2;
        return 0 if $i &gt; $end;
    }
}

for &lt;1 0 0&gt;, &lt;1 1 1 0&gt;, &lt;0 0 0 1 0&gt;, &lt;1 1 0&gt; -&gt; @test {
    say (~ @test).fmt("%-12s =&gt; "), ends-with-a @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./main.raku
1 0 0        =&gt; 1
1 1 1 0      =&gt; 0
0 0 0 1 0    =&gt; 0
1 1 0        =&gt; 1
</code></pre>

<h3>Special Bit Characters in Perl</h3>

<p>This is a port to Perl of the above Raku program. Please refer to the previous sections if you need additional explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub ends_with_a {
    my $i = 0;
    my $end = $#_;
    while (1) {
        return 1 if $i == $end;
        $i += $_[$i] == 0 ? 1 : 2;
        return 0 if $i &gt; $end;
    }
}

for my $test ([&lt;1 0 0&gt;], [&lt;1 1 1 0&gt;], 
    [&lt;0 0 0 1 0&gt;], [&lt;1 1 0&gt;]) {
    printf "%-12s =&gt; %d\n", "@$test", ends_with_a @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./special-bit-characters.pl
1 0 0        =&gt; 1
1 1 1 0      =&gt; 0
0 0 0 1 0    =&gt; 0
1 1 0        =&gt; 1
</code></pre>

<h2>Task 2: Merge Account</h2>

<p><em>You are given an array of accounts, i.e. name with list of email addresses.</em></p>

<p><em>Write a script to merge the accounts where possible.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 
    @accounts = [ ["A", "a1@a.com", "a2@a.com"],
                  ["B", "b1@b.com"],
                  ["A", "a3@a.com", "a1@a.com"] ]
                ]

Output: [ ["A", "a1@a.com", "a2@a.com", "a3@a.com"],
          ["B", "b1@b.com"] ]
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: 
    @accounts = [ ["A", "a1@a.com", "a2@a.com"],
                  ["B", "b1@b.com"],
                  ["A", "a3@a.com"],
                  ["B"m "b2@b.com", "b1@b.com"] ]

Output: [ ["A", "a1@a.com", "a2@a.com"],
          ["A", "a3@a.com"],
          ["B", "b1@b.com", "b2@b.com"] ]
</code></pre>

<h3>Merge Account in Raku</h3>

<p>We use a hash of hashes to merge items belonging to the same name and remove possible duplicates.</p>

<pre><code>sub merge-account (@in) {
    my %merged;
    for @in -&gt; @part {
        my ($key, @values) = @part;
        %merged{$key}{$_} = True for @values;
    }
    return %merged;
}

my @tests = ( &lt;A a1@a.com a2@a.com&gt;, 
              &lt;B b1@b.com&gt;,
              &lt;A a3@a.com a1@a.com&gt; ),
            ( &lt;A a1@a.com a2@a.com&gt;,
              &lt;B b1@b.com&gt;,
              &lt;A a3@a.com&gt;,
              &lt;B b2@b.com b1@b.com&gt; );
for @tests -&gt; @test {
    say @test, " =&gt; ";
    my %merged = merge-account @test;
    for %merged.keys.sort -&gt; $k {
        say "\t[", (join " ", $k, |%merged{$k}.keys.sort), "]";
    };
    say "";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./merge-account.raku
((A a1@a.com a2@a.com) (B b1@b.com) (A a3@a.com a1@a.com)) =&gt; 
    [A a1@a.com a2@a.com a3@a.com]
    [B b1@b.com]

((A a1@a.com a2@a.com) (B b1@b.com) (A a3@a.com) (B b2@b.com b1@b.com)) =&gt; 
    [A a1@a.com a2@a.com a3@a.com]
    [B b1@b.com b2@b.com]
</code></pre>

<h3>Merge Account in Perl</h3>

<p>This is a port to Perl of the previous Raku program. We use a hash of hashes to merge items belonging to the same name and remove possible duplicates.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub merge_account {
    my %merged;
    for my $part (@_) {
        # say   Dumper $part;
        my ($key, @values) = @$part;
        $merged{$key}{$_} = 1 for @values;
    }
    # say %merged;
    return \%merged;
}

my @tests = ( [ [&lt;A a1\@a.com a2\@a.com&gt;], 
                [&lt;B b1\@b.com&gt;],
                [&lt;A a3\@a.com a1\@a.com&gt;] ],

              [ [&lt;A a1\@a.com a2\@a.com&gt;],
                [&lt;B b1\@b.com&gt;],
                [&lt;A a3\@a.com&gt;],
                [&lt;B b2\@b.com b1\@b.com&gt;] ] );

for my $test (@tests) {
    # say Dumper $test, " =&gt; ";
    for my $part (@$test) {
        print join " ", @$part;
        print " - ";
    }
    say " =&gt;";
    my %merged = %{merge_account @$test};
    for my $k (sort keys %merged) {
        say "\t[", (join " ", $k, sort keys %{$merged{$k}}), "]";
    };
    say "";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./merge-account.pl
A a1@a.com a2@a.com - B b1@b.com - A a3@a.com a1@a.com -  =&gt;
        [A a1@a.com a2@a.com a3@a.com]
        [B b1@b.com]

A a1@a.com a2@a.com - B b1@b.com - A a3@a.com - B b2@b.com b1@b.com -  =&gt;
        [A a1@a.com a2@a.com a3@a.com]
        [B b1@b.com b2@b.com]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 2, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Community Input Requested - Future of TPRF website(s)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/websiteproposalcall"/>
  <id>tag:news.perlfoundation.org,2023-03-20:/post/websiteproposalcall</id>
  <published>2023-03-20T19:06:24</published>
  <updated>2023-03-20T19:06:24</updated>
  <summary>
  <![CDATA[
     TPRF is looking for community input on the future of the TPRF website We are asking for community members to submit proposals for the Perl/Raku website The proposals would ideally address the following: Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/66cd095b5eeac285673c26906d11cd712f234d20/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>TPRF is looking for community input on the future of the TPRF website(s). <p>
We are asking for community members to submit proposals for the Perl/Raku website(s). The proposals would ideally address the following: <p><p>
* Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language specific donations?<p>
* An approach to the professional graphic designing of the website (Please provide links to any examples/existing websites that show what a website along these lines would look like)<p>
* Cost to deploy<p>
* Ongoing costs for technical aspects and maintenance<p></p>

<p>Suggestions should also be:<p>
1. Template-based, for custom branding<p>
2. easy to add, update, move and delete content<p>
3. customizable menus<p>
4. mobile friendly<p>
5. multi-domain support<p>
6. access to logs etc for analysis and SEO purposes<p><p><p>
You can submit your ideas using our form template at https://forms.gle/s9uKWorzQ3GSHe8JA OR you can submit a free form proposal to board@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#608 - Love You Perl!!!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/608.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>My 6 years old twins reminded me on Sunday morning about Mother's Day. Although I didn't even know such day existed when I was in India but this country exposed me to all kind of celebrations. I miss my mom a lot. Let me share with you one of my childhood memory. During my school days, everytime somebody complain to my mom about my fight she wouldn't listen to my side of story. In fact she would start beating me up infront of the complainant. All my so-called friends knew this and they would blackmail me all the time. My mom would never defend me and believe what others have to say about me. I hated it to the bottom of my heart. This affected my personality and made me an introvert. I have been fighting with my nature all my life, even today.</p>
<p>I see the similar treatment to my beloved programming language <strong>Perl</strong>. It pains me when I see some <strong>Perl Gurus</strong> never defend the language same like my mom. I expect them to show the bright side of the language to the rest of the world instead, being the language guru. Even a single negative statement about <strong>Perl</strong> would take us one step back and create a bad image. I am fully aware of all the shortcomings but I am not going to go out and tell everyone about it. I would rather find the solutions, if I can. There is nothing wrong to try other programming languages from the job prospective. In fact, I have recently played with <strong>Python</strong> and <strong>Raku</strong>, thanks to <a href="https://theweeklychallenge.org">The Weekly Challenge</a> but <strong>Perl</strong> remains my first choice of programming language.</p>
<p>I know I don't blog regularly any more but I have done it in the past every time I have done something nice using <strong>Perl</strong>. You can find some of them <a href="https://theweeklychallenge.org/blogs">here</a> and <a href="https://blogs.perl.org/users/mohammad_s_anwar">bpo</a>. I know there are many <strong>Perl</strong> fans out there doing their bits to dust off the negative image. Honestly speaking, we need more people to come forward. For example, <strong>Gabor Szabo</strong> has been running dedicated website, <a href="https://perlmaven.com">Perl Maven</a> where he showcase the cool features of <strong>Perl</strong>.</p>
<p>I have seen some of the brightest brain creating magic using <strong>Perl</strong> every week when it comes to solving the weekly challenge. The best part is that they even share the code with others on various platforms like <strong>Facebook</strong>.</p>
<p>Last but not the least, <strong>Happy Mother's Day</strong> to all the moms out there, including mine who is in India right now. I love you mom. I would like to apologise to all the readers of the newsletter about the last week incident when I couldn't get my contributions to the newsletter available on time. I will try to be more organised in future, promise.</p></div>
    </content>
    <id>https://perlweekly.com/archive/608.html</id>
    <published>2023-03-20T10:00:00Z</published>
    <updated>2023-03-20T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Perl Weekly #608 - Love You Perl!!!</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-608-love-you-perl-46eh" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/608.html"&gt;Perl Weekly 608&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;My 6 years old twins reminded me on Sunday morning about Mother's Day. Although I didn't even know such day existed when I was in India but this country exposed me to all kind of celebrations. I miss my mom a lot. Let me share with you one of my childhood memory. During my school days, everytime somebody complain to my mom about my fight she wouldn't listen to my side of story. In fact she would start beating me up infront of the complainant. All my so-called friends knew this and they would blackmail me all the time. My mom would never defend me and believe what others have to say about me. I hated it to the bottom of my heart. This affected my personality and made me an introvert. I have been fighting with my nature all my life, even today.&lt;/p&gt;

&lt;p&gt;I see the similar treatment to my beloved programming language &lt;strong&gt;Perl&lt;/strong&gt;. It pains me when I see some &lt;strong&gt;Perl Gurus&lt;/strong&gt; never defend the language same like my mom. I expect them to show the bright side of the language to the rest of the world instead, being the language guru. Even a single negative statement about &lt;strong&gt;Perl&lt;/strong&gt; would take us one step back and create a bad image. I am fully aware of all the shortcomings but I am not going to go out and tell everyone about it. I would rather find the solutions, if I can. There is nothing wrong to try other programming languages from the job prospective. In fact, I have recently played with &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;Raku&lt;/strong&gt;, thanks to &lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge&lt;/a&gt; but &lt;strong&gt;Perl&lt;/strong&gt; remains my first choice of programming language.&lt;/p&gt;

&lt;p&gt;I know I don't blog regularly any more but I have done it in the past every time I have done something nice using &lt;strong&gt;Perl&lt;/strong&gt;. You can find some of them &lt;a href="https://theweeklychallenge.org/blogs"&gt;here&lt;/a&gt; and &lt;a href="https://blogs.perl.org/users/mohammad_s_anwar"&gt;bpo&lt;/a&gt;. I know there are many &lt;strong&gt;Perl&lt;/strong&gt; fans out there doing their bits to dust off the negative image. Honestly speaking, we need more people to come forward. For example, &lt;strong&gt;Gabor Szabo&lt;/strong&gt; has been running dedicated website, &lt;a href="https://perlmaven.com"&gt;Perl Maven&lt;/a&gt; where he showcase the cool features of &lt;strong&gt;Perl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have seen some of the brightest brain creating magic using &lt;strong&gt;Perl&lt;/strong&gt; every week when it comes to solving the weekly challenge. The best part is that they even share the code with others on various platforms like &lt;strong&gt;Facebook&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Last but not the least, &lt;strong&gt;Happy Mother's Day&lt;/strong&gt; to all the moms out there, including mine who is in India right now. I love you mom. I would like to apologise to all the readers of the newsletter about the last week incident when I couldn't get my contributions to the newsletter available on time. I will try to be more organised in future, promise.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  &lt;strong&gt;Your editor: Mohammad S. Anwar.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/aristotle/2023/03/template-toolkit-default-directive.html"&gt;Template Toolkit’s DEFAULT is not too useful&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For all Template Toolkit user, do checkout the DEFAULT behaviour.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/16/1000th-consecutive-posting-day/"&gt;1000th consecutive posting day&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;What an achievements!!! Congratulation for reaching the milestone. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/kido_mitsuru/2023/03/the-first-line-of-perl-cgi-script-env-perl-vs-perl-only-how-different.html"&gt;The first line of Perl_CGI script, env perl vs perl only, how different?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another post showing what not to do when using Perl. &lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/15/tempfile-mktemp/"&gt;tempfile and mktemp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Deal with the warning tempfile is deprecated. Nice work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/john_napiorkowski/2023/03/chatgpt-for-perl-learning.html"&gt;ChatGPT for Perl Learning&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ever played with ChatGPT? This should give you fresh perspective.&lt;/p&gt;




&lt;h2&gt;
  
  
  CPAN
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/03/quiq---weekly-travelling-in-cpan.html"&gt;Quiq - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A brief introduction to the CPAN module Quiq..&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/19/validate-codicefiscale/"&gt;First release of Validate::CodiceFiscale&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Find the reason behind the creation of Validate::CodiceFiscale.&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209"&gt;The Weekly Challenge - 209&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Special Bit Characters" and "Merge Account". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-208"&gt;RECAP - The Weekly Challenge - 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Minimum Index Sum" and "Duplicate and Missing" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/mis-ing.html"&gt;MIS-ing&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A detailed discussion of the solutions in Raku can be very handy with the official documentation. Great work, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/oldtechaa/perl-weekly-challenge-208-1gc3"&gt;Perl Weekly Challenge #208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Happy to see the speed up in the getting the task done. Well done. Please do checkout the details.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/boblied/pwc-208-smells-like-teen-sql-2bh6"&gt;Smells like teen SQL&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Just loved the SQL twist. You don't want to miss the fun. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/17/pwc208-minimum-index-sum/"&gt;PWC208 - Minimum Index Sum&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Valid questions raised but we still have working solutions in Perl and Raku. Thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/18/pwc208-duplicate-and-missing/"&gt;PWC208 - Duplicate and Missing&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A rather lengthy blog post for the task. Thanks for sharing the knowledge.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.braincells.com/perl/2023/03/perl_weekly_challenge_week_208.html"&gt;Perl Weekly Challenge: Week 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice showcase of Raku features with line-by-line explanation. Cool contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-208/james-smith#readme"&gt;The Weekly Challenge 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Compact and powerful solutions in Perl. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/03/perl-weekly-challenge-208-minimum-index-sum-and-duplicate-and-missing.html"&gt;Perl Weekly Challenge 208: Minimum Index Sum and Duplicate and Missing&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Side by side Perl and Raku solutions make it great to learn the trick. Great job.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/03/17/PerlWeeklyChallenge208.html"&gt;grep, grep and grep!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;grep in action with full force using Raku. Easy to follow the solution.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/03/13/PWC208/"&gt;Perl Weekly Challenge 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Yet another one-liner in Perl for you. Do checkout it out.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/MatthiasMuth/perlweeklychallenge-club/tree/muthm-208/challenge-208/matthias-muth#readme"&gt;Juggling with indexes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Simple and easy to follow solutions in Perl. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/208"&gt;Matching strings and missing numbers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Give it a try the online solutions. This is exceptional. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/03/robbie-hatleys-perl-solutions-to-weekly_15.html"&gt;The Weekly Challenge #208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice attempt to solve the weekly challenge. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/03/The_Weekly_Challenge_208__Missing_Index__Just_Duplicate_.html"&gt;Missing Index? Just Duplicate!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ruby is choice of language for this week blog. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/weekly-challenge-208-3i23"&gt;Weekly Challenge 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You get the nitty gritty exposed in the blog post with examples. Well done.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/03/13/2023-11-ainions/"&gt;2023.11 Ainions&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dxlix-metacpan-weekly-report-playwright.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dlxxvi-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  The corner of Gabor
&lt;/h2&gt;

&lt;p&gt;A couple of entries sneaked in by Gabor.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/the-problem-with-open-source-not-enough-contributors-5gpm"&gt;The problem with open source: not enough contributors&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I have a feeling that there are not enough people contributing to open source, but GitHub reports to have 94M users. Am I mistaken or is that number misleading?&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/github-actions-and-workflows-20p1"&gt;GitHub Actions and Workflows&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The name 'GitHub Actions' reffers to two different things. One of them is also called 'GitHub Actions Workflows'.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/one-liner-remove-first-two-characters-of-every-line-in-thousands-of-files-2jm4"&gt;One-liner: Remove first two characters of every line in thousands of files&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A very simple problem for someone who knows Perl. So it was posted on a forum where few people know Perl.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/pxi"&gt;Adventure! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game and they’re looking for experienced Perl people who have passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/uww"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The best senior developers know that variety is the spice of life. Sure, you’ve got Perl chops for days, but that’s not all you can do — and that’s why our client wants to meet you. They’re looking for senior Perl developers, Node engineers, and those with mighty Python and SQL skills to lead their team.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/0cg"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-608-love-you-perl-46eh</id>
    <published>2023-03-20T06:49:17Z</published>
    <updated>2023-03-20T06:49:17Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Modulabile</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/20/modulabile/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I want to tack a new meaning to the Italian word <strong>Modulabile</strong>.</p>
</blockquote>

<p><em>Modulabile</em> is an Italian word that more or less means <em>adjustable</em>. I’d
like to attach a new meaning in a <a href="https://www.perl.org/">Perl</a> context, though, and in
particular <em>of a module that can be easily used in a one-liner</em>.</p>

<p>We already know about <a href="https://gitlab.com/polettix/notechs/-/snippets/1868370">Modulino</a>s: a <a href="https://www.perl.org/">Perl</a> module that doubles down as
an executable, if needed.</p>

<p>Now, with a <em>Modulabile</em> I’d like to do something much in that spirit, but
going a bit farther. Where modulinos are normally created as an evolution
from programs to make them more easily testable, with a <em>Modulabile</em> I’d
like to add an easy way to use a module from the command line, or at least
its most obvious functionality.</p>

<p>The concept is by no means new or invented by me. The most egregious example
<em>that I personally know of</em> is the <a href="https://metacpan.org/pod/ojo">ojo</a> module, that allows placing a
catch <code class="language-plaintext highlighter-rouge">-Mojo</code> command line option to import a bunch of one-letter-long
functions to do all sorts of wonders with <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a>. From the
SYNOPSIS:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>perl <span class="nt">-Mojo</span> <span class="nt">-E</span> <span class="s1">'say g("mojolicious.org")-&gt;dom-&gt;at("title")-&gt;text'</span>
</code></pre></div></div>

<p>This way of having modules that can be also easily called as programs
<em>without the need to know where they have been installed</em> fascinates me. It
make the <em>module</em> somehow <em>able</em> to be run, hence the name by merging the
two words.</p>

<p>As an example, in recent module <a href="https://metacpan.org/pod/Validate::CodiceFiscale">Validate::CodiceFiscale</a> I added this
function, which can also be imported:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sub </span><span class="nf">r</span> <span class="p">(@args) {</span>
   <span class="nv">@args</span> <span class="o">=</span> <span class="nv">@ARGV</span> <span class="k">unless</span> <span class="nv">@args</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$cf</span> <span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">validate_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">))</span> <span class="p">{</span>
         <span class="nv">say</span> <span class="p">"</span><span class="si">$i</span><span class="s2"> not ok - </span><span class="p">"</span> <span class="o">.</span> <span class="nb">join</span><span class="p">('</span><span class="s1">, </span><span class="p">',</span> <span class="nv">$errors</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">);</span>
         <span class="o">++</span><span class="nv">$n</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="nv">say</span> <span class="p">"</span><span class="si">$i</span><span class="s2"> ok - </span><span class="si">$cf</span><span class="p">";</span>
      <span class="p">}</span>
      <span class="o">++</span><span class="nv">$i</span><span class="p">;</span>
   <span class="p">}</span> <span class="c1">## end for my $cf (@ARGV)</span>
   <span class="k">return</span> <span class="nv">$n</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub r</span>
</code></pre></div></div>

<p>The short name makes it easy to import it from the command line: just use
option <code class="language-plaintext highlighter-rouge">-M</code> with the addition of two characters, i.e.
<code class="language-plaintext highlighter-rouge">-MValidate::CodiceFiscale=r</code>.</p>

<p>The way it takes arguments, defaulting to what comes from the command line
itself, makes it <em>extremely</em> easy to run the function. All in all, it’s
possible to do validation of a few strings on the command line like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl <span class="nt">-MValidate</span>::CodiceFiscale<span class="o">=</span>r <span class="nt">-er</span> <span class="s2">"</span><span class="nv">$string1</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$string2</span><span class="s2">"</span> ...
</code></pre></div></div>

<p>I was a bit surprised that the <code class="language-plaintext highlighter-rouge">-er</code> part works, I initially thought I would
have had to put it like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -M... -e 'r()' ...
</code></pre></div></div>

<p>or something similar. I quickly discovered that, having imported function
<code class="language-plaintext highlighter-rouge">r</code>, I could do away with the round parentheses and quotation marks, so this
would work as well:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -M... -e r ...
</code></pre></div></div>

<p>Then I just tried to remove the space, and it worked too!</p>

<p>There are many times when the functions in a module are better imported and
used in a <em>full</em> program; other times, though, they can come handy from the
command line, so why not enrich our module and make it a… <em>modulabile</em>?</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/20/modulabile/</id>
    <published>2023-03-20T06:00:00+01:00</published>
    <updated>2023-03-20T06:00:00+01:00</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 208</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-208/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-208/</id>
    <published>2023-03-20T00:00:00Z</published>
    <updated>2023-03-20T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 209</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Special Bit Characters 10. TASK #2: Merge Account HEADLINES  Welcome to the Week #209 of The Weekly Challenge.
We have new guest Simon Dueck joined Team PWC and shared solutions to Week #207 and Week #208 in F#.
E. Alvarez blog post sharing Javascript magic once again.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-209/</id>
    <published>2023-03-20T00:00:00Z</published>
    <updated>2023-03-20T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #208</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/03/perl-weekly-challenge-208.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11052</id>
    <published>2023-03-19T16:41:00Z</published>
    <updated>2023-03-19T17:25:48Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perlweeklychallengepractice" label="#perlweeklychallenge #practice" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>First of all, a greeting. I posted an introduction with a notification of intent to take over a module on CPAN, but the maintainer responded to me. I'm Avery, I'm developing <a href="https://github.com/oldtechaa/SeekMIDI">SeekMIDI</a>, a small graphical MIDI sequencer. I started it in 2016 and I took a long break from programming entirely, and I've just restarted developing my programming skills again. For starters, I'm working on Perl Weekly Challenges and bug fixes to modules.</p>

<p>Without further ado, here are my solutions to the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208">PWC #208</a>. All solutions are about to be posted, but this could be a spoiler if you're trying to solve it too. I was very pleased this week that I got it down to about 15-25 minutes for each task, so I'm definitely getting more comfortable in Perl again.</p>

<p>First, task 1:</p>

<pre><code>use strict;
use v5.10;

my @list1 = ("Perl", "Raku", "Love");
my @list2 = ("Raku", "Perl", "Hate");

# my @list1 = ("A", "B", "C");
# my @list2 = ("D", "E", "F");

# my @list1 = ("A", "B", "C");
# my @list2 = ("C", "A", "B");

my $minindex;
my @results;
for (my $index1 = 0; $index1 &lt; scalar @list1; $index1++) {
    for (my $index2 = 0; $index2 &lt; scalar @list2; $index2++) {
        if ($list1[$index1] eq $list2[$index2] &amp;&amp; defined($minindex)) {
            if ($index1 + $index2 &lt; $minindex) {
                @results = ($list1[$index1]);
                $minindex = $index1 + $index2;
            } elsif ($index1 + $index2 == $minindex) {
                push (@results, $list1[$index1]);
            }
        } elsif ($list1[$index1] eq $list2[$index2] &amp;&amp; !defined($minindex)) {
            @results = ($list1[$index1]);
            $minindex = $index1 + $index2;
        }
    }
}
if (scalar @results == 0) {exit}
foreach (@results) {
    say $_;
}
</code></pre>

<p>Pretty simple. For every item in list 1, I iterate through list 2 and look for a match with a lower sum than the previous lowest sum. If I find one it replaces the previous results, if it's equal I add it to the results. Then I say the results.</p>

<p>Now task 2:</p>

<pre><code>use strict;
use v5.10;

my $index;
my ($duplicate, $missing);
foreach (@ARGV) {
    if (!defined($index)) {$index = 1 and next}
    if ($_ == $ARGV[$index - 1]) {$duplicate = $_}
    if ($_ != $ARGV[$index - 1] + 1) {$missing = $ARGV[$index - 1] + 1}
    $index++;
}
defined($duplicate) &amp;&amp; defined($missing) ? say ("Duplicate is $duplicate", "\n", "Missing is $missing") : say -1;
</code></pre>

<p>For this one, I iterate through them and if it's the same thing as the previous one it's my duplicate and if it's not the previous item plus 1 then it's your missing number.</p>

<p>Anyways, hope you liked them this week. I always look at the other solutions blogged about and get ideas for use in my code. If you have any better ideas comment below.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge #208</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-208-1gc3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I've been doing the Perl Weekly Challenge, so here are my solutions to the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208">PWC #208</a>. All solutions are about to be posted, but this could be a spoiler if you're trying to solve it too. I was very pleased this week that I got it down to about 15-25 minutes for each task, so I'm definitely getting more comfortable in Perl again.</p>

<p>First, task 1:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use strict;
use v5.10;

my @list1 = ("Perl", "Raku", "Love");
my @list2 = ("Raku", "Perl", "Hate");

# my @list1 = ("A", "B", "C");
# my @list2 = ("D", "E", "F");

# my @list1 = ("A", "B", "C");
# my @list2 = ("C", "A", "B");

my $minindex;
my @results;
for (my $index1 = 0; $index1 &lt; scalar @list1; $index1++) {
    for (my $index2 = 0; $index2 &lt; scalar @list2; $index2++) {
        if ($list1[$index1] eq $list2[$index2] &amp;&amp; defined($minindex)) {
            if ($index1 + $index2 &lt; $minindex) {
                @results = ($list1[$index1]);
                $minindex = $index1 + $index2;
            } elsif ($index1 + $index2 == $minindex) {
                push (@results, $list1[$index1]);
            }
        } elsif ($list1[$index1] eq $list2[$index2] &amp;&amp; !defined($minindex)) {
            @results = ($list1[$index1]);
            $minindex = $index1 + $index2;
        }
    }
}
if (scalar @results == 0) {exit}
foreach (@results) {
    say $_;
}
</code></pre>

</div>

<p>Pretty simple. For every item in list 1, I iterate through list 2 and look for a match with a lower sum than the previous lowest sum. If I find one it replaces the previous results, if it's equal I add it to the results. Then I say the results.</p>

<p>Now task 2:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use strict;
use v5.10;

my $index;
my ($duplicate, $missing);
foreach (@ARGV) {
    if (!defined($index)) {$index = 1 and next}
    if ($_ == $ARGV[$index - 1]) {$duplicate = $_}
    if ($_ != $ARGV[$index - 1] + 1) {$missing = $ARGV[$index - 1] + 1}
    $index++;
}
defined($duplicate) &amp;&amp; defined($missing) ? say ("Duplicate is $duplicate", "\n", "Missing is $missing") : say -1;
</code></pre>

</div>

<p>For this one, I iterate through them and if it's the same thing as the previous one it's my duplicate and if it's not the previous item plus 1 then it's your missing number.</p>

<p>Anyways, hope you liked them this week. I always look at the other solutions blogged about and get ideas for use in my code. If you have any better ideas comment below.</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-208-1gc3</id>
    <published>2023-03-19T12:28:59Z</published>
    <updated>2023-03-19T12:28:59Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="challenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5037014830039743391</id>
    <published>2023-03-19T08:58:00.000+01:00</published>
    <updated>2023-03-19T08:58:08.089+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxvi) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.320&lt;/strong&gt; on 2023-03-14, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.316 was 23 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.010&lt;/strong&gt; on 2023-03-14, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.009 was 5 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.68&lt;/strong&gt; on 2023-03-14, with 52 votes&lt;/li&gt;  &lt;li&gt;Previous version: 7.66 was 2 months, 20 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-2.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.07&lt;/strong&gt; on 2023-03-14, with 58 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.05 was 3 months, 28 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PLICEASE'&gt;PLICEASE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2023-03-17, with 56 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 5 months before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2023-03-17, with 45 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.64 was 1 month, 3 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2023-03-13, with 25 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.36 was 2 months, 14 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/NLNETLABS'&gt;NLNETLABS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.014' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.014&lt;/strong&gt; on 2023-03-14, with 31 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.013 was 3 months, 11 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RHANDOM'&gt;RHANDOM&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.758' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.758&lt;/strong&gt; on 2023-03-17, with 13 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.757 was 8 months before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302194' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302194&lt;/strong&gt; on 2023-03-14, with 182 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.302193 was 8 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5037014830039743391/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5037014830039743391"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5037014830039743391"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html" title="(cdxxxvi) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7841764249391873793</id>
    <published>2023-03-19T08:08:00.001+01:00</published>
    <updated>2023-03-19T08:08:22.913+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlix) metacpan weekly report - Playwright</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/03/19 07:07:48 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Affix" target="_blank"&gt;Affix&lt;/a&gt; - A Foreign Function Interface eXtension&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Roundtrip" target="_blank"&gt;Data::Roundtrip&lt;/a&gt; - convert between Perl data structures, YAML and JSON with unicode support (I believe ...)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Numeral" target="_blank"&gt;Lingua::RU::Numeral&lt;/a&gt; - Perl extension for generate Russian wording of numerals from the natural numbers and 0 (zero).&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::DirectoryServer" target="_blank"&gt;Mojolicious::Plugin::DirectoryServer&lt;/a&gt; - Serve static files from document root with directory index&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::OAuth" target="_blank"&gt;Net::Google::OAuth&lt;/a&gt; - Simple Google oauth api module&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::Deb::Control" target="_blank"&gt;Parse::Deb::Control&lt;/a&gt; - parse and manipulate debian/control in a controlable way&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlX::ScopeFunction" target="_blank"&gt;PerlX::ScopeFunction&lt;/a&gt; - new keywords for creating scopes.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Terse" target="_blank"&gt;Terse&lt;/a&gt; - Lightweight Web Framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Contact" target="_blank"&gt;WWW::Contact&lt;/a&gt; - Get contacts/addressbook from Web&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Google::Contacts" target="_blank"&gt;WWW::Google::Contacts&lt;/a&gt; - Google Contacts Data API&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/app::paperback" target="_blank"&gt;app::paperback&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::RecordStream" target="_blank"&gt;App::RecordStream&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Business::ISMN" target="_blank"&gt;Business::ISMN&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cassandra::Client" target="_blank"&gt;Cassandra::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::GGPlot" target="_blank"&gt;Chart::GGPlot&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPANPLUS" target="_blank"&gt;CPANPLUS&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Compare" target="_blank"&gt;Data::Compare&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Frame" target="_blank"&gt;Data::Frame&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Games::Chess" target="_blank"&gt;Games::Chess&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::RestApi" target="_blank"&gt;Google::RestApi&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hydrogen" target="_blank"&gt;Hydrogen&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager" target="_blank"&gt;Imager&lt;/a&gt; (+1=62)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Graphics::Prima" target="_blank"&gt;PDL::Graphics::Prima&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perldoc::Server" target="_blank"&gt;Perldoc::Server&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=141)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Moment" target="_blank"&gt;Time::Moment&lt;/a&gt; (+1=71)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::API" target="_blank"&gt;Twitter::API&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UNIVERSAL::Object" target="_blank"&gt;UNIVERSAL::Object&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Venus" target="_blank"&gt;Venus&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=95)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Firefox" target="_blank"&gt;WWW::Mechanize::Firefox&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X11::Protocol" target="_blank"&gt;X11::Protocol&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7841764249391873793/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlix-metacpan-weekly-report-playwright.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7841764249391873793"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7841764249391873793"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlix-metacpan-weekly-report-playwright.html" title="(dxlix) metacpan weekly report - Playwright"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1895189475877227587</id>
    <published>2023-03-19T08:06:00.000+01:00</published>
    <updated>2023-03-19T08:06:15.347+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2023-03-19 07:05:48 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75751245" target="_blank"&gt;Subroutine with same name in 2 different CPAN modules&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75773212" target="_blank"&gt;Where in the perl documentation does it mention 0.0001, 0.00001 printing differences?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75715549" target="_blank"&gt;How do you use globbing in perl for a one-liner with many files, avoiding xargs/find/etc&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75756560" target="_blank"&gt;why do @- and @+ have different sizes after perl regex match&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75760912" target="_blank"&gt;Using a module or a feature in another package than where it is supposed to be used&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1895189475877227587/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1895189475877227587"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1895189475877227587"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxvi-stackoverflow-perl-report.html" title="(dlxxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Interview question and answers 2023</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Collection of resources for anyone preparing for a Perl programming interview. These frequently asked questions and their detailed answers&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/ec4458f6f26a</id>
    <published>2023-03-05T16:23:53Z</published>
    <updated>2023-03-19T05:10:07.604000Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="perl-programming"/>
    <category term="interview-questions"/>
    <category term="perl-interview-questions"/>
  </entry>
  <entry>
    <title>Perl Coding Interview Question and Answers</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;As a Perl developer, you need to have a solid understanding of the language&amp;#x2019;s syntax, semantics, and best practices. This blog provides a&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/a7c5b8e823e1</id>
    <published>2023-03-19T05:07:58Z</published>
    <updated>2023-03-19T05:07:58.592000Z</updated>
    <category term="interview-preparation"/>
    <category term="programming"/>
    <category term="coding-interviews"/>
    <category term="perl-interview-questions"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, F#, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Korn Shell, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2023-03-19T00:00:00Z</published>
    <updated>2023-03-19T00:00:00Z</updated>
  </entry>
  <entry>
  <title>Deadline for TPRC </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprctalks"/>
  <id>tag:news.perlfoundation.org,2023-03-17:/post/tprctalks</id>
  <published>2023-03-17T13:58:45</published>
  <updated>2023-03-17T13:58:45</updated>
  <summary>
  <![CDATA[
     The Perl Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers. The Perl Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023. The deadline to submit your talks is coming up quickly! Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl &amp; Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers.</p>

<p>The Perl &amp; Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023.</p>

<p>The deadline to submit your talks is coming up quickly! Please visit https://www.papercall.io/tprctor23 to submit your talk before March 31st. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>One-liner: Remove first two characters of every line</title>
  <summary type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></summary>
  <updated>2023-03-14T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/remove-first-two-characters-of-every-line"/>  <id>https://perlmaven.com/remove-first-two-characters-of-every-line</id>
  <content type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#607 - The Perl Planetarium</title>
    <link rel="alternate" href="https://perlweekly.com/archive/607.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>In the previous newsletter Mohammad included a blog post of Dave Cross about the <a href="https://perl.theplanetarium.org/">Perl Planetarium</a>, but I think it is worth another highlighting. It is an excellent way to follow what's going on in and around Perl on a daily basis. Now also including commits to the source code of Perl and questions on Stack overflow. I've also opened two issues asking Dave to allow the user to filter the messages based on source and to color-code the sources. Something one of you could implement in the front-end.</p>
<p>A couple of days ago I saw <a href="https://www.facebook.com/curtis.poe/posts/pfbid02TKsTS9KQi9TbW7hH2gmUNwm1dDJ387TquNkiUR5CCj3kfdmQM9C7RkHXusmUHN2Jl">a post on Facebook</a> by Curtis Ovid Poe and then <a href="https://www.facebook.com/groups/perlprogrammers/posts/6296612980371437/">Will Braswell reposted it</a>. The rant was on why Perl is dying. Basically Ovid says that Perl lags behind the more popular languages adopting new features. Including features that were available to some other languages 10-20-40 years ago. Predictably some people jumped on blaming the Perl 6 effort. Others pointed out the lack of volunteers. The lack of outreach. The missing modules from the standard libraries.</p>
<p>Some very interesting comment, but you might need to be Facebook account to be able to read them. Sorry for that.</p>
<p>While preparing a blog post I searched GitHub for repositories written in Perl and then it gave me the idea to check out the other languages and got this table on <a href="https://dev.to/szabgab/the-most-popular-programming-languages-on-github-2i6b">The most popular programming languages on GitHub</a>. I posted the link to the Perl programmers group on Facebook. They did not like the numbers.</p>
<p>Here is an idea to make GitHub better for Perl projects: The dependabot helps developers keep their dependencies up-to-date. As far as I can tell it does <a href="https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem">not support Perl.</a>. However, it's <a href="https://github.com/dependabot/">source code is on GitHub</a> so interested parties could probaly add this support. Let me know when it becomes available so I can try it.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/607.html</id>
    <published>2023-03-13T10:00:00Z</published>
    <updated>2023-03-13T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 207</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-207/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-207/</id>
    <published>2023-03-13T00:00:00Z</published>
    <updated>2023-03-13T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 208</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Minimum Index Sum 10. TASK #2: Duplicate and Missing HEADLINES  Welcome to the Week #208 of The Weekly Challenge.
Please do accept my apology for the late release of the weekly challenge. Thank you for your kind messages. It means a lot.
Did you notice, we now have over 10,000+ solutions in Perl?</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-208/</id>
    <published>2023-03-13T00:00:00Z</published>
    <updated>2023-03-13T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2382336803997880397</id>
    <published>2023-03-11T23:20:00.002+01:00</published>
    <updated>2023-03-11T23:20:52.007+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxv) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Alien-Build-2.78" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.78&lt;/strong&gt; on 2023-03-07, with 22 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.77 was 1 month, 18 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.060010" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060010&lt;/strong&gt; on 2023-03-10, with 14 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.060007 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/OLIVER"&gt;OLIVER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETHER/Class-Method-Modifiers-2.15" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Class::Method::Modifiers&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Provides Moose-like method modifiers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.15&lt;/strong&gt; on 2023-03-05, with 29 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.15 was  before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.009" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.009&lt;/strong&gt; on 2023-03-09, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.007 was 25 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16.1&lt;/strong&gt; on 2023-03-06, with 92 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.16.0 was 6 months, 29 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/TURNSTEP"&gt;TURNSTEP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.14" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.14&lt;/strong&gt; on 2023-03-06, with 31 votes&lt;/li&gt;  &lt;li&gt;Previous version: 5.13 was 2 months, 28 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.9001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.9001&lt;/strong&gt; on 2023-03-07, with 16 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.9000 was 2 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/DCANTRELL"&gt;DCANTRELL&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SHANCOCK/Perl-Tidy-20230309" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20230309&lt;/strong&gt; on 2023-03-08, with 132 votes&lt;/li&gt;  &lt;li&gt;Previous version: 20221112 was 3 months, 27 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SHANCOCK"&gt;SHANCOCK&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/FERKI/Rex-1.14.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.14.1&lt;/strong&gt; on 2023-03-05, with 82 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.14.0 was 1 month, 6 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/FERKI"&gt;FERKI&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9695" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9695&lt;/strong&gt; on 2023-03-06, with 28 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.9694 was 3 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test-Simple-1.302193" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302193&lt;/strong&gt; on 2023-03-06, with 182 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.302192 was 1 month, 4 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test2-Harness-1.000151" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000151&lt;/strong&gt; on 2023-03-08, with 13 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.000150 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test2-Suite-0.000148" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000148&lt;/strong&gt; on 2023-03-05, with 39 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.000147 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2382336803997880397/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2382336803997880397"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2382336803997880397"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html" title="(cdxxxv) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3970470711935013068</id>
    <published>2023-03-11T23:15:00.000+01:00</published>
    <updated>2023-03-11T23:15:46.573+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlviii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/03/11 22:14:10 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PerlNitpick" target="_blank"&gt;App::PerlNitpick&lt;/a&gt; - change-suggester about insignificant details.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/jacode" target="_blank"&gt;jacode&lt;/a&gt; - Perl program for Japanese character code conversion&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsOffice::Word::Template" target="_blank"&gt;MsOffice::Word::Template&lt;/a&gt; - generate Microsoft Word documents from Word templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::PiHole" target="_blank"&gt;WWW::PiHole&lt;/a&gt; - Perl interface to Pi-hole&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Combinatorics" target="_blank"&gt;Algorithm::Combinatorics&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Pod" target="_blank"&gt;App::Pod&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=119)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Audit" target="_blank"&gt;CPAN::Audit&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Table" target="_blank"&gt;Data::Table&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID" target="_blank"&gt;Data::UUID&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::SHA" target="_blank"&gt;Digest::SHA&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::CopyFilesFromBuild" target="_blank"&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Pod2Readme" target="_blank"&gt;Dist::Zilla::Plugin::Pod2Readme&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::ReadmeFromPod" target="_blank"&gt;Dist::Zilla::Plugin::ReadmeFromPod&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::ReadmeMarkdownFromPod" target="_blank"&gt;Dist::Zilla::Plugin::ReadmeMarkdownFromPod&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Run" target="_blank"&gt;Dist::Zilla::Plugin::Run&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME" target="_blank"&gt;Email::MIME&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Faker" target="_blank"&gt;Faker&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=72)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIME::Lite" target="_blank"&gt;MIME::Lite&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OAuth2" target="_blank"&gt;Mojolicious::Plugin::OAuth2&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Todoist" target="_blank"&gt;Net::Todoist&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2" target="_blank"&gt;PDF::API2&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=132)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPR" target="_blank"&gt;PPR&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quiq" target="_blank"&gt;Quiq&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Nginx" target="_blank"&gt;Test::Nginx&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::GoogleAPI::Client" target="_blank"&gt;WebService::GoogleAPI::Client&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword::FromPerl" target="_blank"&gt;XS::Parse::Keyword::FromPerl&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3970470711935013068/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3970470711935013068"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3970470711935013068"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html" title="(dxlviii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Mendapatkan Username Login pada Wordpress versi 4.9.4</title>
    <link rel="alternate" href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/954/1*POyRpFXOGS0cmL9V8Dy0PQ.png" width="954"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Hai, disini saya akan menjelaskan cara mendapatkan username pada Login wordpress, yangmana cocok sekali apabila digabungkan dengan teknik&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>SamUkhid</name>
    </author>
    <id>https://medium.com/p/6621547dc4bf</id>
    <published>2023-03-09T18:32:41Z</published>
    <updated>2023-03-09T20:06:46.424000Z</updated>
    <category term="wordpress"/>
    <category term="perl"/>
    <category term="vulnerability"/>
    <category term="username"/>
  </entry>
  <entry>
    <title>#606 - First Love Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/606.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Do you remember the first programming language you picked up?</p>
<p>I am sure in the life span of a programmer, one picks more than one programming language but still have special place for one. I remember during my first encounter in the year <strong>1993</strong>, I was introduced to <strong>COBOL</strong> as part of the course I joined immediately after getting through <strong>12th or (+2 as some remember)</strong>. I had only access to PC at the institute and that too 2 times a week for one hour each. Imagine relying on books and nothing else, I was attracted towards many other programming languages. During that period, I picked up <strong>Fortran</strong> as well and I loved it more than <strong>COBOL</strong>. When I got bored of <strong>Fortran</strong>, I went to <strong>Pascal</strong>. That too didn't last long before I moved to <strong>C</strong>. I stayed with <strong>C</strong> longer than any of the programming languages I picked before. I remember when I moved to <strong>Mumbai</strong> for a better opportunity in the year <strong>1997</strong>, I hardly got any offer so I took a part-time job to build a desktop application for a small factory using <strong>FoxPRO</strong>. It was during this period, I got the offer to join a startup looking for fresher willing to learn <strong>Perl</strong>. It was my first proper job as a programmer. Infact, I was given two choices, <strong>Perl</strong> or <strong>Java</strong>. I choose <strong>Perl</strong> as it was easier to move from <strong>C</strong>. And here I am today, in the year <strong>2023</strong>, working as a <strong>Perl Developer</strong>.</p>
<p>Reason I am sharing my story is last week I came across some post on social media talking about (again) <strong>Perl</strong> is dead or not moving fast enough to keep up with the younger generations. I don't want to repeat what is said in favour or against <strong>Perl</strong> but it pains to see not many coming forward to stop the lies. I remember when <strong>Perl v5.36</strong> was released, it made a big impact and everyone started talking about it. I even did daily series on the new features of latest release. I have kept it recorded in the <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a> for anyone to have a look. In few months time, there is going to be another big release that every <strong>Perl</strong> fans are looking forward to it. So to all ignorants and haters, <strong>Perl</strong> is not going anywhere and will remain stronger as ever.</p>
<p>Just for fun, I asked <strong>ChatGPT</strong> his views on <strong>Perl</strong>. I must say it didn't dissappoint me. It tried to be polite and diplomatic in his response. I liked it. Please don't get me wrong, I don't live in the fantasy world. I know the fact, we don't have many new projects being developed in <strong>Perl</strong>. So what? That doesn't make it any lesser than others. You can try other while still in love with <strong>Perl</strong>. I am not suggesting you do but if you do then there is nothing wrong in it. I know many experts in <strong>Perl</strong> equally good in many other languages. You can find them doing <a href="https://theweeklychallenge.org">weekly challenges</a> in so many different languages.</p>
<p>The moral of the story, <strong>Perl</strong> will remain my first love no matter what. How about you, <strong>Perl</strong> fans?</p>
<p>Last but not the least, <strong>Enlightened Perl Organisation (EPO)</strong> is closing down, <strong>Mark Keating</strong> made it public the <a href="https://ww2.enlightenedperl.org/2023/02/27/closing-down">sad news</a>. I would like to take this opportunity to thank <strong>Mark Keating</strong> and his entire team for all the hard work and support, specially to the <strong>London Perl Workshop</strong>.</p>
<p>Please enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/606.html</id>
    <published>2023-03-06T10:00:00Z</published>
    <updated>2023-03-06T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Improvements to Planet Perl and Perlanet</title>
    <link rel="alternate" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins.</p>
<p>On Reddit, a few days ago, someone asked <a href="https://www.reddit.com/r/perl/comments/119hu00/perl_rss_feeds/">‘Is there a “Planet Perl” with an RSS feed?’</a> and a few people replied, pointing out the existence of Planet Perl (which is the first Google result for <a href="https://www.google.com/search?q=planet+perl">“Planet Perl”</a>). I’m obviously not marketing that site very well as every time I mention it, I get people (pleasantly) surprised that it exists.</p>
<p>On this occasion, it was <a href="https://www.reddit.com/user/rwp0/">Elvin Aslanov</a> who seemed to discover my site for the first time. And, very soon afterwards, he started sending <a href="https://github.com/davorg/planetperl/pulls">pull requests</a> to add feeds to the site. As a result, we now have three more feeds that are being pulled into the site.</p>
<ul>
<li><a href="https://medium.com/tag/perl">Perl on Medium</a>. I’m slightly embarrassed that I hadn’t thought of this myself. I did, after all, once try to start <a href="https://medium.com/cultured-perl">a Perl publication on Medium</a>. I think I must have decided that there are better sites for technical blogging and blanked it from consideration. Medium’s not the busiest of places for Perl bloggers, but there are a few posts there and they’re mostly from people who are outside of the echo chamber – so getting more eyes on their posts is a good idea.</li>
<li><a href="https://stackoverflow.com/feeds/tag/perl">Perl questions on Stack Overflow</a>. Another one that would have been obvious if I had thought for a second. I’ve been answering questions on SO for years. It’s a good way to get more perspective on how Perl is being used across the industry. Unfortunately, the feed only includes the titles of the posts – you’ll need to click the link to actually see the question.</li>
<li><a href="https://github.com/Perl/perl5/commits/blead.atom">Perl commits on GitHub</a>. I’m interested in hearing how useful people think this is. I worry slightly that there will be times when the number of commits will overwhelm the other feeds. But maybe that’s a good idea. Perhaps it’s good for more people to see just how busy the Perl 5 Porters are. I’m a bit annoyed that the feed puts everything in a fixed-width font, but not (yet) annoyed enough to do anything about it.</li>
</ul>
<p>You might know that Planet Perl is driven by <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>. So adding new feeds is just a case of adding a few lines to <a href="https://github.com/davorg/planetperl/blob/master/perlanetrc">a configuration file</a>. And looking at the pull requests I got from Elvin, showed a potential problem in the way the configuration was laid out. Each feed has three lines of YAML configuration. There’s a title for the feed, a URL for a web page that displays the content of the feed and the URL for the feed itself. They’re called “title”, “web” and “url”. And it’s that last name that’s slightly problematic – it’s just not clear enough. Elvin got “web” and “url” muddled up in one of his PRs and, when I pointed that out to him, he suggested that renaming “url” to “feed” would make things much clearer.</p>
<p>I agreed, and the next day I hacked away for a while before releasing <a href="https://metacpan.org/release/DAVECROSS/Perlanet-v3.0.0/view/lib/Perlanet.pm">version 3.0.0 of Perlanet</a>. In this version, the “url” key is renamed to “feed”. It still accepts the old name (so older config files will still work) but you’ll get a warning if you try to use a config name in the old config.</p>
<p>I didn’t stop there. Last year, I wrote <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">a blog post about producing a docker image that already had Perlanet installed</a> – so that it was quicker to rebuild my various planets every few hours. Since then I’ve been rebuilding <a href="https://hub.docker.com/repository/docker/davorg/perl-perlanet/general">that image</a> every time I updated Perlanet. But it’s been rather a manual process. And because I’m old and decrepit, I can never remember the steps I go through to rebuild it, tag it correctly and push it to the Docker Hub. This means it always takes far longer than it’s supposed to. So this time, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/build">a script to do that for me</a>. And because I now have the kind of mind set that sees GitHub Workflows everywhere I look, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/.github/workflows/publish_image.yml">a Workflow definition that builds and publishes the image</a> any time the Dockerfile changes. I guess the next step will be to write an action that automatically updates the Dockerfile (thereby triggering the rebuild) each time I release a new version of Perlanet.</p>
<p>But that’s a problem for another day. For now, I’m happy with the improvements I’ve made to Planet Perl, Perlanet and the Perlanet Docker infrastructure.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins. On Reddit, a few days ago, someone asked ‘Is there a “Planet Perl” with an RSS feed?’ and a few people replied, pointing out the existence… <a class="more-link" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Continue reading <span class="screen-reader-text">Improvements to Planet Perl and Perlanet</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2097</id>
    <published>2023-03-03T10:16:30Z</published>
    <updated>2023-03-03T10:16:30Z</updated>
    <category term="Programming"/>
    <category term="docker"/>
    <category term="perlanet"/>
    <category term="planet perl"/>
  </entry>
  <entry>
    <title>What is Perl?</title>
    <link rel="alternate" href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1280/1*b0-VWhhifQolimiOjmNsbw.jpeg" width="1280"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Perl is a general-purpose, high-level, interactive, and interpreted programming language created by Larry Wall in 1987, originally&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Nediir?</name>
    </author>
    <id>https://medium.com/p/3cf44720bc32</id>
    <published>2023-03-02T16:10:41Z</published>
    <updated>2023-03-02T16:10:41.209000Z</updated>
    <category term="technology"/>
    <category term="software-development"/>
    <category term="software"/>
    <category term="perl"/>
    <category term="software-engineering"/>
  </entry>
  <entry>
  <title>TPRC 2023 March Newsletter</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-2023-march-newsletter"/>
  <id>tag:news.perlfoundation.org,2023-03-01:/post/tprc-2023-march-newsletter</id>
  <published>2023-03-01T20:06:44</published>
  <updated>2023-03-01T20:06:44</updated>
  <summary>
  <![CDATA[
     The Perl and Raku Conference 2023 in Toronto, Canada  July 11-13, 2023 is open! Sign up for talks. Book your ticket and hotel. 

The Perl Foundation is delighted to announce that the annual North American Perl and Raku Conference will be held in Toronto, Canada on July 11 to 13, 2023. The venue will be the DoubleTree (a Hilton Hotels property), located at 108 Chestnut St in downtown Toronto. That's directly North from Toronto's city hall, close to public transit and one of the country's biggest malls, the Toronto Eaton Centre.
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/3fe71fef169a5e9ca9ab275a75baa4eb3d968b24/TPRC.to.512x512.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h1>The Perl and Raku Conference 2023</h1>

<p>The Perl and Raku Foundation is delighted to announce that the annual <strong>North American Perl and Raku Conference</strong> will be held in <strong>Toronto, Canada on July 11 to 13, 2023</strong>. The venue will be the <a href="https://tprc.to/location">DoubleTree (a Hilton Hotels property), located at 108 Chestnut St in downtown Toronto</a>. That's directly North from Toronto's city hall, close to public transit and one of the country's biggest malls, the Toronto Eaton Centre.</p>

<p>Toronto is Canada's largest city, and the city and surrounding area offers many attractions for a vacation before or after your conference attendance. For our American visitors: you're in luck, three of your dollars are about the same as four of ours.</p>

<p>Call For Papers is now open! You can submit your talk Ideas at https://tprc.to/papers. Talk submission deadline is <strong>March 31 Midnight UTC.</strong> Talks must be given live and in-person. If you are looking for any talk ideas, try out the <a href="https://github.com/perlconference/tprc-2023-tor/wiki/Topics-we-want">conference wiki</a>.</p>

<p>Early bird pricing is available. Purchase your ticket now through April 15th for the low price of $275 USD. You can purchase your tickets now at https://tprc2023.sched.com/tickets.</p>

<p>Visit our website at https://tprc.to/. Information on special hotel rates can be found at https://tprc.to/location/. We've managed to arrange for a really great room rate for the conference days, and there are a few rooms for before and after the conference, in case you'd like to stay longer for a little vacation.</p>

<p>If you are flying, you can book your tickets to YYZ (Pearson, the main airport; many public and private transit options) or YTZ (Billy Bishop, on Toronto Island; 5 minute cab ride); you can also fly into BUF (Buffalo, NY) and drive (2 hours by car) across the border. Just remember to bring your passport.</p>

<h1>Unique to this year / Be Advised</h1>

<ul>
<li>The CFP closes in only 30 days! </li>
<li>The hotel has fewer rooms than prior years, and our price is half of what you can find anywhere close-by. Book your room early!</li>
<li>The hotel’s rooms are almost all King rooms. Contact the hotel directly, and pay an extra $30CAD if you want a room with two Queen beds!</li>
</ul>

<h1>How to reach our organizers</h1>

<ul>
<li>Visit our website: https://tprc.to</li>
<li>Follow us on Twitter: @PerlConferences</li>
<li>Like us on Facebook: The Perl Foundation (@tpf.perl)</li>
<li>Subscribe to the mailing list: https://tprc.to/subscribe</li>
<li>Post a message to us at https://tprc.to/tprc-2023-tor/contact-us/. </li>
</ul>

<p>An organizer will get back to you shortly!</p>

<p>Organizer: Alex Beamish and the Toronto Perl Mongers.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Feb 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/03/01/list-of-new-cpan-distributions-feb-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ANSI-Palette">ANSI-Palette</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new ANSI::Palette!</td>
<td>2023-02-19T08:11:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Matrix">Acme-Matrix</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Heavenly digital rain</td>
<td>2023-02-16T16:53:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-newsradio">Acme-MetaSyntactic-newsradio</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Characters from the sitcom Newsradio (1995-1999)</td>
<td>2023-02-18T10:26:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-CPython3">Alien-CPython3</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Python</td>
<td>2023-02-14T09:03:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Deno">Alien-Deno</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Deno</td>
<td>2023-02-14T09:43:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Go">Alien-Go</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Go</td>
<td>2023-02-14T09:22:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-LLVM">Alien-LLVM</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build LLVM</td>
<td>2023-02-14T09:20:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Nodejs">Alien-Nodejs</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Node.js</td>
<td>2023-02-14T09:41:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-OpenJDK">Alien-OpenJDK</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build OpenJDK</td>
<td>2023-02-14T09:06:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Rust">Alien-Rust</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Rust</td>
<td>2023-02-14T09:39:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Zig">Alien-Zig</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Zig</td>
<td>2023-02-14T09:21:35</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-innoextract">Alien-innoextract</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build innoextract</td>
<td>2023-02-16T05:03:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-APA">App-APA</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Access APA News via RSS</td>
<td>2023-02-16T11:39:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-AdditivesUtils">App-AdditivesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives</td>
<td>2023-02-05T09:40:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Additives">App-BPOMUtils-Additives</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives in BPOM</td>
<td>2023-02-05T00:05:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-RPO-Checker">App-BPOMUtils-RPO-Checker</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Various checker utilities to help with Processed Food Registration (RPO – Registrasi Pangan Olahan) at BPOM</td>
<td>2023-02-11T04:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table">App-BPOMUtils-Table</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Some utilities providing table data related to BPOM</td>
<td>2023-02-05T00:37:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodAdditive">App-BPOMUtils-Table-FoodAdditive</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List additives in BPOM processed food division</td>
<td>2023-02-13T13:26:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodCategory">App-BPOMUtils-Table-FoodCategory</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List food categories in BPOM processed food division</td>
<td>2023-02-13T13:27:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodIngredient">App-BPOMUtils-Table-FoodIngredient</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List ingredients in BPOM processed food division</td>
<td>2023-02-13T13:27:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodType">App-BPOMUtils-Table-FoodType</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List food types in BPOM processed food division</td>
<td>2023-02-13T13:27:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-MicrobeInput">App-BPOMUtils-Table-MicrobeInput</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List of microbe specification in BPOM processed food division</td>
<td>2023-02-13T13:27:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-RegCodePrefix">App-BPOMUtils-Table-RegCodePrefix</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List known alphabetical prefixes in BPOM registered product codes</td>
<td>2023-02-13T13:27:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ChemistryUtils">App-ChemistryUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to chemistry</td>
<td>2023-02-19T00:05:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FoodAdditivesUtils">App-FoodAdditivesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives</td>
<td>2023-02-05T09:42:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-tee">App-Greple-tee</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>module to replace matched text by the external command result</td>
<td>2023-02-19T11:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-HTMLUtils-Grep">App-HTMLUtils-Grep</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Command-line utilities related to grepping HTML files</td>
<td>2023-02-08T14:24:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KBLIUtils">App-KBLIUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to chemistry</td>
<td>2023-02-14T13:21:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Toot">App-Toot</a></td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>post a status to Mastodon</td>
<td>2023-02-05T15:50:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-financeta-new">App-financeta-new</a></td>
<td><a href="https://metacpan.org/author/VIKAS">VIKAS</a></td>
<td>App::financeta is a Technical Analysis GUI</td>
<td>2023-02-28T03:05:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lastaccess">App-lastaccess</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>現行ディレクトリの下のファイルを、最後にアクセスされた順で網羅的に表示する。</td>
<td>2023-02-27T05:05:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-madeafter">App-madeafter</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>各ファイルの3個の日時情報が、現在から何秒前であるかを、表形式で表示。</td>
<td>2023-02-27T07:47:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-samesize">App-samesize</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>現行ディレクトリにある全く同じバイトサイズのファイルを一覧にする。MD5ハッシュ値を使うオプションもある。</td>
<td>2023-02-27T06:09:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sponge">App-sponge</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Soak up standard input and write to a file</td>
<td>2023-02-14T08:46:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-Assemble">Bencher-Scenario-Regexp-Assemble</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::Assemble</td>
<td>2023-02-05T00:05:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-IPv4">Bencher-Scenario-Regexp-IPv4</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::IPv4</td>
<td>2023-02-12T00:05:47</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-IPv6">Bencher-Scenario-Regexp-IPv6</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::IPv6</td>
<td>2023-02-19T00:06:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-Pattern-Git">Bencher-Scenario-Regexp-Pattern-Git</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark patterns in Regexp::Pattern::Git</td>
<td>2023-02-26T00:05:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Blockchain-Contract-Solidity-ABI">Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>Contract ABI utilities</td>
<td>2023-02-02T17:17:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chrome-Policy">Chrome-Policy</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Chrome Policy class</td>
<td>2023-02-04T01:26:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-CryptColumn">DBIx-Class-CryptColumn</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Automatically hash password/passphrase columns</td>
<td>2023-02-08T00:42:46</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-WithClass">DBIx-WithClass</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>DBIx::Class, with more class!</td>
<td>2023-02-12T22:01:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Resolver">Data-Resolver</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>resolve keys to data</td>
<td>2023-02-05T09:58:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-RWP">Dist-Zilla-PluginBundle-RWP</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Add [@RWP] plugin bundle into dist.ini</td>
<td>2023-02-04T19:09:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Env-Assert">Env-Assert</a></td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>Ensure that the environment variables match what you need, or abort.</td>
<td>2023-02-15T13:52:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Env-Dot">Env-Dot</a></td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>Read environment variables from .env file</td>
<td>2023-02-19T11:46:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Copy-clonefile">File-Copy-clonefile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>call clonefile system call</td>
<td>2023-02-16T17:05:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-IncludesTimeRange">File-Find-IncludesTimeRange</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>Takes a array of time stamped items(largely meant for use with files) returns ones that include the specified time range.</td>
<td>2023-02-27T05:35:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Meta-Cache">File-Meta-Cache</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Cache open file descriptors and stat meta data</td>
<td>2023-02-27T08:03:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Text-CSV">File-Text-CSV</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>Easy access to CSV data files</td>
<td>2023-02-23T13:44:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Hooks">Future-AsyncAwait-Hooks</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>scoped hook blocks that run extra code around await expressions</td>
<td>2023-02-12T00:37:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GetoptLongWrapper">GetoptLongWrapper</a></td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>A wrapper for the Getopt::Long module</td>
<td>2023-02-05T06:47:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graph-Geometric">Graph-Geometric</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>create and work with geometric graphs</td>
<td>2023-02-08T13:27:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-Magick">Image-Magick</a></td>
<td><a href="https://metacpan.org/author/JCRISTY">JCRISTY</a></td>
<td>objected-oriented Perl interface to ImageMagick. Use it to create, edit, compose, or convert bitmap images from within a Perl script.</td>
<td>2023-02-04T03:49:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Insight-Scriptures">Insight-Scriptures</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Insight::Scriptures!</td>
<td>2023-02-10T23:04:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LWP-UserAgent-msgraph">LWP-UserAgent-msgraph</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td/>
<td>2023-02-16T21:21:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Manipulator">Manipulator</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>manipulate data structs via codeblocks</td>
<td>2023-02-11T17:15:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Formula">Math-Formula</a></td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>Expressions on steriods</td>
<td>2023-02-24T14:21:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mockery">Mockery</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Mock objects for testing purposes</td>
<td>2023-02-11T01:17:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Passphrase">Mojolicious-Plugin-Passphrase</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Securely hash and validate your passwords.</td>
<td>2023-02-12T22:20:19</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-PrometheusTiny">Mojolicious-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/JAVIER">JAVIER</a></td>
<td>Export metrics using Prometheus::Tiny::Shared</td>
<td>2023-02-05T08:03:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Keyword-Chain">MooX-Keyword-Chain</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Subroutine chains</td>
<td>2023-02-06T01:48:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Keyword-Random">MooX-Keyword-Random</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>return a random result!</td>
<td>2023-02-07T17:26:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Chord-Progression-T">Music-Chord-Progression-T</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Generate transposed chord progressions</td>
<td>2023-02-02T04:08:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Chord-Progression-Transform">Music-Chord-Progression-Transform</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Generate transformed chord progressions</td>
<td>2023-02-02T12:36:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-CreatingRhythms">Music-CreatingRhythms</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Perl from the C code of the book</td>
<td>2023-02-26T16:55:23</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Netkit">Netkit</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>create netkit labs with code.</td>
<td>2023-02-26T20:21:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NetworkManager-Strict">NetworkManager-Strict</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>NetworkManager strict settings class</td>
<td>2023-02-12T13:56:23</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDF-Collage">PDF-Collage</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>PDF manipulation with scissors and glue</td>
<td>2023-02-12T18:53:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-7zDownload">RT-Extension-7zDownload</a></td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>RT-Extension-7zDownload Extension</td>
<td>2023-02-21T17:19:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Redis-Cluster-Fast">Redis-Cluster-Fast</a></td>
<td><a href="https://metacpan.org/author/PLAIN">PLAIN</a></td>
<td>A fast perl binding for Redis Cluster</td>
<td>2023-02-02T19:14:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-N_Queens">Regexp-N_Queens</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>Abstract</td>
<td>2023-02-17T18:46:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Reply-Plugin-Prompt">Reply-Plugin-Prompt</a></td>
<td><a href="https://metacpan.org/author/FREED">FREED</a></td>
<td>reply plugin for powerlevel10k style prompt</td>
<td>2023-02-26T13:37:11</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SMS-Send-IN-Textlocal">SMS-Send-IN-Textlocal</a></td>
<td><a href="https://metacpan.org/author/INDRADG">INDRADG</a></td>
<td>Regional context SMS::Send driver to send messages via Textlocal's India service ( <a href="https://api.textlocal.in/send/" rel="nofollow">https://api.textlocal.in/send/</a> )</td>
<td>2023-02-14T16:07:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Copy">SPVM-File-Copy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Copying and Moving Files</td>
<td>2023-02-09T05:35:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Find">SPVM-File-Find</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Short Description</td>
<td>2023-02-23T02:12:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Glob">SPVM-File-Glob</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>The glob Function</td>
<td>2023-02-16T01:35:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Path">SPVM-File-Path</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Creating and Removing Multi-Level Path</td>
<td>2023-02-15T01:07:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Spec">SPVM-File-Spec</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>foo</td>
<td>2023-02-03T22:32:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Temp">SPVM-File-Temp</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Short Description</td>
<td>2023-02-21T05:37:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-FindBin">SPVM-FindBin</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Locate Directory of Original Program</td>
<td>2023-02-07T01:12:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-RE2">SPVM-Resource-RE2</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Google/RE2 Resources</td>
<td>2023-02-28T00:56:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Array">Sah-Schemas-Array</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Sah schemas related to array type</td>
<td>2023-02-12T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Spreadsheet-Edit">Spreadsheet-Edit</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>Slice and dice spreadsheets, optionally using tied variables.</td>
<td>2023-02-08T02:01:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Middler">Sub-Middler</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Middleware subroutine chaining</td>
<td>2023-02-27T08:32:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sys-GetRandom">Sys-GetRandom</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>Perl interface to getrandom(2)</td>
<td>2023-02-10T00:59:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Chemistry-Element">TableData-Chemistry-Element</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Chemical elements</td>
<td>2023-02-05T09:40:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-BBIA">TableDataBundle-Business-ID-BBIA</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Collection of TableData:: modules related to BBIA (Balai Besar Industri Agro)</td>
<td>2023-02-20T12:01:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Test">TableDataBundle-Test</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Collection of more TableData::Test::* modules for testing</td>
<td>2023-02-11T04:09:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataRole-Spec-TableDef">TableDataRole-Spec-TableDef</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Role to require methods related to TableDef</td>
<td>2023-02-25T01:28:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-BeLike-RWP">Task-BeLike-RWP</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl modules bundle to install from CPAN</td>
<td>2023-02-12T18:05:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Es">Terse-Es</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse Elasticsearch.</td>
<td>2023-02-02T21:50:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-CHI">Terse-Plugin-CHI</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse response cache</td>
<td>2023-02-03T19:28:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-Glitch">Terse-Plugin-Glitch</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Terse::Plugin::Glitch!</td>
<td>2023-02-12T06:02:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-UA">Terse-Plugin-UA</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse LWP::UserAgent plugin.</td>
<td>2023-02-01T17:48:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Runtime">Terse-Runtime</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse Runtime</td>
<td>2023-02-17T22:52:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Builder-SubtestSelection">Test-Builder-SubtestSelection</a></td>
<td><a href="https://metacpan.org/author/SVW">SVW</a></td>
<td>Select subtests by name or by number</td>
<td>2023-02-23T17:20:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-NoTty">Test-NoTty</a></td>
<td><a href="https://metacpan.org/author/NWCLARK">NWCLARK</a></td>
<td/>
<td>2023-02-26T10:37:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-cpan-versioning">Test-cpan-versioning</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>Testing how CPAN uploader treats non-standard version</td>
<td>2023-02-10T08:51:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Wrap-NoStrip">Text-Wrap-NoStrip</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Line wrapping without stripping the whitespace</td>
<td>2023-02-18T10:27:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Thread-GoChannel">Thread-GoChannel</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Fast thread queues with go-like semantics</td>
<td>2023-02-24T16:34:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tie-Indirect">Tie-Indirect</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>tie variables to access data located at run-time.</td>
<td>2023-02-07T23:45:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-PopList">Tk-PopList</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Popping a selection list relative to a widget</td>
<td>2023-02-28T17:37:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Meteo">Weather-Meteo</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>Interface to <a href="https://open-meteo.com" rel="nofollow">https://open-meteo.com</a> for historical weather data</td>
<td>2023-02-28T16:13:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-WeatherKit">Weather-WeatherKit</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Apple WeatherKit REST API client</td>
<td>2023-02-22T00:05:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-IdoitAPI">WebService-IdoitAPI</a></td>
<td><a href="https://metacpan.org/author/MAMAWE">MAMAWE</a></td>
<td>a library to access the i-doit JSON RPC API</td>
<td>2023-02-17T14:37:36</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Workflow-Inotify">Workflow-Inotify</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>Linux::Inotify2 wrapper</td>
<td>2023-02-09T19:50:39</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wrapper-GetoptLong">Wrapper-GetoptLong</a></td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>A wrapper for the Getopt::Long module</td>
<td>2023-02-08T04:50:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XS-Parse-Keyword-FromPerl">XS-Parse-Keyword-FromPerl</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>drive XS::Parse::Keyword directly from Perl</td>
<td>2023-02-16T23:33:53</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>109</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>42</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>12</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>9</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>8</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>3</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MAMAWE">MAMAWE</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/JCRISTY">JCRISTY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/JAVIER">JAVIER</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/VIKAS">VIKAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SVW">SVW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/FREED">FREED</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PLAIN">PLAIN</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/NWCLARK">NWCLARK</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/INDRADG">INDRADG</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date ANSI-Palette LNATION The great new ANSI::Palette! 2023-02-19T08:11:12 Acme-Matrix LNATION Heavenly digital rain 2023-02-16T16:53:43 Acme-MetaSyntactic-newsradio PERLANCAR Characters from the sitcom Newsradio (1995-1999) 2023-02-18T10:26:03 Alien-CPython3 ZMUGHAL Find or build Python 2023-02-14T09:03:20 Alien-Deno ZMUGHAL Find or build Deno 2023-02-14T09:43:22 Alien-Go ZMUGHAL Find or build Go 2023-02-14T09:22:54 Alien-LLVM ZMUGHAL Find or build LLVM 2023-02-14T09:20:09 Alien-Nodejs … <a href="https://perlancar.wordpress.com/2023/03/01/list-of-new-cpan-distributions-feb-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Feb 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2053</id>
    <published>2023-03-01T03:02:34Z</published>
    <updated>2023-03-01T03:02:34Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Programming Language Developer Road Map</title>
    <link rel="alternate" href="https://medium.com/@azmisahin/perl-programming-language-developer-road-map-a6ca0667f189?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Perl Syntax: Master the Perl syntax. Get a basic understanding of Perl’s language features, data types, conditional expressions, loops…</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@azmisahin/perl-programming-language-developer-road-map-a6ca0667f189?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Azmi ŞAHİN</name>
    </author>
    <id>https://medium.com/p/a6ca0667f189</id>
    <published>2023-02-28T11:33:22Z</published>
    <updated>2023-02-28T11:33:22.017000Z</updated>
    <category term="roadmaps"/>
    <category term="language"/>
    <category term="programming"/>
    <category term="developer"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#605 - Trying to save a disappearing language</title>
    <link rel="alternate" href="https://perlweekly.com/archive/605.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>In 1492 the Jews were <a href="https://www.jewishvirtuallibrary.org/the-spanish-expulsion-1492">expelled from Spain</a> and 4 years later also from Portugal. Many of those Jews settled in the Ottoman Empire and kept talking and changing their language. This is what created the language we call 'Judeo-Espanyol' or in its modern name 'Ladino'. For 500 years these people kept speaking and improving their language which is now a mix of medieval Spanish, Portuguese, Catalan, Turkish, Greek, Italian, Hebrew, Arabic, and probably a few other languages. These Jews are usually referred to as the 'Sephardic' Jews because 'Sepharad' means Spain in Hebrew. It was originally written using old Hebrew letters called <a href="https://en.wikipedia.org/wiki/Rashi_script">Rashi</a> and <a href="https://en.wikipedia.org/wiki/Solitreo">Solitreo</a>, but in the last 100 years or so it was switched to Latin letters.</p>
<p>Unfortunately due to various reasons (The modernization of Turkey by Atatürk, the Holocaust, emigration to USA, Israel and elsewhere) the majority of remaining Ladino speakers switched to the local language and today there are only a few ten thousands of native Ladino speakers, most of them above 60.</p>
<p>There are various grass-root projects to revitalize the language. One of them is called <a href="https://kantoniko.com/">Kantoniko</a>. It is a multi-lingual dictionary with sample sentences, audio, poster etc. There are also experiments to use the material for educational purposes for people who would like to learn Ladino. The project has some Open Source code written in Python and JavaScript. There is also a lot of data under various Creative-Commons licenses.</p>
<p>I know Python is not your cup of tea, but the whole project might be interesting to some of you and might take a look at it. I recorded a <a href="https://www.youtube.com/playlist?list=PLw7UYp3N0eUYt8ARGB4DbNffB4MPROFDY">series of videos in English</a> about the site and how to contribute to it.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/605.html</id>
    <published>2023-02-27T10:00:00Z</published>
    <updated>2023-02-27T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
</feed>
