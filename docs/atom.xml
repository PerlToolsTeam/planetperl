<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-05-06T05:51:03Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Mejorar una librería, Utilizar GitHub Actions</title>
    <link rel="alternate" href="https://dev.to/szabgab/mejorar-una-libreria-utilizar-github-actions-3ado" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Estoy aprendiendo Español por dos años y media y pienso que la mejor manera para mejorar mi conosimiento es practicar.</p>

<p>Por eso empecé hacer eventos de programacion por pares en Español. Vale, en Español se roto que tengo.</p>

<p><iframe width="710" height="399" src="https://www.youtube.com/embed/D2rn54h0BDM">
</iframe>
</p>

<p><a href="https://es.code-maven.com/utilizar-github-actions">links</a></p>

<p>Sí tú tienes la paciencia para hablar conmigo y quieres hacer una sesión conmigo, ¡contactarme!</p>

<p>Yo hice <a href="https://code-maven.com/live">otros eventos</a> sobre otras tecnologias pero en inglés.</p>

</div>
    </content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/mejorar-una-libreria-utilizar-github-actions-3ado</id>
    <published>2021-05-06T04:47:30Z</published>
    <updated>2021-05-06T04:47:30Z</updated>
    <category term="spanish"/>
    <category term="perl"/>
    <category term="github"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Search Matrix and Ordered Letters</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-111-search-matrix-and-ordered-letters.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10205</id>
    <published>2021-05-05T22:48:19Z</published>
    <updated>2021-05-05T22:49:57Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 111 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few  days (May 9, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Search Matrix</h2>

<p><em>You are given 5x5 matrix filled with integers such that each row is sorted from left to right and the first integer of each row is greater than the last integer of the previous row.</em></p>

<p><em>Write a script to find a given integer in the matrix using an efficient search algorithm.</em></p>

<p><em>Example:</em></p>

<pre><code>Matrix: [  1,  2,  3,  5,  7 ]
        [  9, 11, 15, 19, 20 ]
        [ 23, 24, 25, 29, 31 ]
        [ 32, 33, 39, 40, 42 ]
        [ 45, 47, 48, 49, 50 ]

Input: 35
Output: 0 since it is missing in the matrix

Input: 39
Output: 1 as it exists in the matrix
</code></pre>

<p>We&#8217;re only trying to know whether an integer exists in the matrix. What I would normally do in such case is transform the data structure, i.e. store all the matrix items into a hash and then simply look whether an item exists in the hash. And I&#8217;ll also present such a solution.</p>

<p>However, looking carefully at the working of the task, we can see that the task insists on the fact that the integers are in ascending order from left to right and from top to bottom. The task further tells us that we should use an efficient algorithm. Although this is not explicitly specified, it is quite clear that we&#8217;re expected to implement a binary search algorithm, which is an efficient algorithm with sorted data.</p>

<p>The first idea might be to flatten the matrix into a one-dimension array, making the dataset much easier to use with a canonical binary search algorithm. But, obviously, that&#8217;s also not really what we&#8217;re expected to do. The task author wants us to implement a binary search algorithm on a 2-D matrix. We could come up with an &#8220;approximate&#8221; binary search, i.e. an heuristic looking for the approximate mid-point between two values. For example, we could start by testing any item on the third row and then goto the 2nd or 4th row depending on the result of the test. But that&#8217;s not satisfactory: that would not scale easily to other dimensions.</p>

<p>So I decided to perform the binary search on a list of consecutive integers between 0 and 24, and to provide a subroutine to convert these integers into 2-D indices. For example, the sixth item in that range corresponds to indices <code>[1][0]</code>.</p>

<h3>Search Matrix in Raku</h3>

<h4>Using Binary Search</h4>

<p>The <code>A2AoA</code> subroutine converts a flat rank into 2-D indices. We simply run a binary search on the <code>0..24</code> range and use the <code>A2AoA</code> subroutine to find out the correspond values in the matrix. Our test cases will be quite exhaustive, since we&#8217;ll be searching the matrix for every integer between 0 and 54.</p>

<pre><code>use v6;

my @matrix = (  1,  2,  3,  5,  7 ),
             (  9, 11, 15, 19, 20 ),
             ( 23, 24, 25, 29, 31 ),
             ( 32, 33, 39, 40, 42 ),
             ( 45, 47, 48, 49, 50 );

sub A2AoA ($index) {
    my ($i, $j) = $index.polymod(5).reverse;
}
sub binary ($in) {
    my ($min, $max) = 0, 24;
    while $max &gt; $min {
        my $pivot = (($max + $min) /2).Int;
        my ($i, $j) = A2AoA $pivot;
        my $val = @matrix[$i][$j];
        # say "val = $val, $i, $j";
        return 1 if $val == $in;
        if $in &gt; $val {
            $min = $pivot + 1;
        } else {
            $max = $pivot;
        }
    }
    return 0;
}
say "$_ =&gt; ", binary $_ for 0..54;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./search_item.raku
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
8 =&gt; 0
9 =&gt; 1
10 =&gt; 0
11 =&gt; 1
12 =&gt; 0
13 =&gt; 0
14 =&gt; 0
15 =&gt; 1
16 =&gt; 0
17 =&gt; 0
18 =&gt; 0
19 =&gt; 1
20 =&gt; 1
21 =&gt; 0
22 =&gt; 0
23 =&gt; 1
24 =&gt; 1
25 =&gt; 1
26 =&gt; 0
27 =&gt; 0
28 =&gt; 0
29 =&gt; 1
30 =&gt; 0
31 =&gt; 1
32 =&gt; 1
33 =&gt; 1
34 =&gt; 0
35 =&gt; 0
36 =&gt; 0
37 =&gt; 0
38 =&gt; 0
39 =&gt; 1
40 =&gt; 1
41 =&gt; 0
42 =&gt; 1
43 =&gt; 0
44 =&gt; 0
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 0
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<p>Note that I&#8217;m happy that I used such exhaustive test cases, since my original implementation had a relatively rare bug that I had not seen with the six or seven values I initially tested.</p>

<h4>Using a Hash</h4>

<p>As I said in the introduction, in the real life, I would transform the input data into a hash and simply perform hash lookup.</p>

<pre><code>use v6;

my @matrix = (  1,  2,  3,  5,  7 ),
             (  9, 11, 15, 19, 20 ),
             ( 23, 24, 25, 29, 31 ),
             ( 32, 33, 39, 40, 42 ),
             ( 45, 47, 48, 49, 50 );

my %hash;
for @matrix -&gt; @row {
    %hash{$_} = 1 for @row;
}
say "$_ =&gt; ", %hash{$_} ?? 1 !! 0 for 0..54;
</code></pre>

<p>As it can be seen, the code is much shorter, much simpler and much less prone to errors. It produces the same output:</p>

<pre><code>$ raku ./search_item2.raku
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
8 =&gt; 0
9 =&gt; 1
... Lines omitted for brevity...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 1
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h3>Search Matrix in Perl</h3>

<h4>Using Binary Search</h4>

<p>This is a port to Perl of the binary search algorithm explained in the introduction above. The <code>A2AoA</code> subroutine converts a flat rank into 2-D indices. We simply run a binary search on the <code>0..24</code> range and use the <code>A2AoA</code> subroutine to find out the correspond values in the matrix. Our test cases will be quite exhaustive, since we&#8217;ll be searching the matrix for every integer between 0 and 54.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @matrix = ( [  1,  2,  3,  5,  7 ],
               [  9, 11, 15, 19, 20 ],
               [ 23, 24, 25, 29, 31 ],
               [ 32, 33, 39, 40, 42 ],
               [ 45, 47, 48, 49, 50 ]
             );

sub A2AoA {
    my $index = shift;
    my ($i, $j) = (int $index / 5, $index % 5);
}
sub bin_search {
    my $in = shift;
    my ($min, $max) = (0, 24);
    while ($max &gt; $min) {
        my $pivot =  int (($max + $min) /2);
        my ($i, $j) = A2AoA $pivot;
        my $val = $matrix[$i][$j];
        # say "val = $val, $i, $j";
        return 1 if $val == $in;
        if ($in &gt; $val) {
            $min = $pivot + 1;
        } else {
            $max = $pivot;
        }
    }
    return 0;
}
say "$_ =&gt; ", bin_search $_ for 0..54;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>perl  ./search_item.pl
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
... lines omitted for brevity ...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 0
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h4>Using a Hash</h4>

<p>As mentioned above, in the real life, I would transform the input data into a hash and simply perform hash lookup. In Raku, I had to use nested <code>for</code> loops to populate the hash because my attempts using chained <code>map</code>s did not work as expected. There is certainly a way to do it with chained <code>map</code>s, but it is not easy to find the right syntax. No such problem with Perl where my chained <code>map</code>s worked perfectly on my first attempt (see below). There has to be something for which Perl is better or (more convenient) than Raku.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @matrix = ( [  1,  2,  3,  5,  7 ],
               [  9, 11, 15, 19, 20 ],
               [ 23, 24, 25, 29, 31 ],
               [ 32, 33, 39, 40, 42 ],
               [ 45, 47, 48, 49, 50 ]
             );

my %hash = map { $_ =&gt; 1 } map { @$_ } @matrix;
say "$_ =&gt; ", exists $hash{$_} ? 1 : 0 for 0..54;
</code></pre>

<p>This displays the same output as before:</p>

<pre><code>$ perl search_item2.pl
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
... Lines omitted for brevity ...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 1
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h2>Task 2: Ordered Letters</h2>

<p><em>Given a word, you can sort its letters alphabetically (case insensitive). For example, “beekeeper” becomes “beeeeekpr” and “dictionary” becomes “acdiinorty”.</em></p>

<p><em>Write a script to find the longest English words that don’t change when their letters are sorted.</em></p>

<p>For this, I&#8217;ll use an English word list contributed to the public domain by Grady Ward as part of the <a href="https://en.wikipedia.org/wiki/Moby_Project">Moby Lexicon</a> project. It is a list of 113,809 crosswords, that is words that are considered valid in crossword puzzles and other word games. The list can be found on my <a href="https://github.com/LaurentRosenfeld/think_raku/blob/master/Supplementary/words.txt">github repository</a>.</p>

<h3>Ordered Letters in Raku</h3>

<p>We don&#8217;t really need to sort the letters: we only need to know whether they are already in the alphabetical order. In Raku, we can use the <code>[...]</code> reduce metaoperator together with the <code>le</code> less than or equal to operator on the letters of the word. Checking whether a list is sorted has a smaller computational complexity than sorting the list, so this should presumably be faster (although it is so fast with my 113-k word list that it doesn&#8217;t really matter).</p>

<pre><code>use v6;

my @long-words;
my $max-length = 0;

for './words.txt'.IO.lines -&gt; $word {
    next unless [le] $word.comb;
    my $length = $word.chars;
    if  $length &gt; $max-length {
        @long-words = $word,;
        $max-length = $length;
    } elsif $length == $max-length {
        push @long-words, $word;
    }
}
say @long-words.join(", ");
</code></pre>

<p>This program finds two 7-letter words satisfying the task&#8217;s criteria and displays the following output:</p>

<pre><code>$ raku ./ordered-letters.raku
beefily, billowy
</code></pre>

<p>I do not know what these two words mean, but they are in the input list and they satisfy the criteria.</p>

<h3>Ordered Letters in Perl</h3>

<p>It is slightly less convenient in Perl than in Raku to check that the letters are already in the proper order, so I&#8217;ll simply sort the letters and compare the output with the input word.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @long_words;
my $max_length = 0;

my $word_list = "./words.txt";
open my $IN, "&lt;", $word_list or die "Cannot open $word_list $!";
while (my $word = &lt;$IN&gt;) {
    chomp $word;
    next unless $word eq join '', sort split //, $word;
    my $length = length $word;
    if  ($length &gt; $max_length) {
        @long_words = ($word);
        $max_length = $length;
    } elsif ($length == $max_length) {
        push @long_words, $word;
    }
}
say "@long_words";
</code></pre>

<p>This program produces the same two words:</p>

<pre><code>$ perl ordered-letters.pl
beefily billowy
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 16, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Easier web sites for CPAN modules</title>
    <link rel="alternate" href="https://dev.to/davorg/easier-web-sites-for-cpan-modules-1nn4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A few months ago, Gabor asked if <a href="https://dev.to/szabgab/perl-modules-with-their-own-web-site-2gmo">more CPAN modules should have their own web sites</a>. I replied, saying thought it was a good idea and pointing out <a href="https://dev.to/davorg/simple-cpan-module-web-sites-with-github-pages-29ka">how easy it was to create project web sites</a> on GitHub Pages.</p>

<p>But since then, I've been wondering if could be made even easier. Perhaps we could make it easy enough that there was really no reason not to have a web site for your CPAN module.</p>

<p>And today I've released <a href="https://metacpan.org/release/App-CPANModuleSite">App::CPANModuleSite</a> that does just that.</p>

<p>The default usage is pretty easy.</p>

<ul>
<li>Install the module</li>
<li>In your repo checkout run <code>mksite &lt;distribution-name&gt;</code>
</li>
<li>Run <code>git add docs</code> to add your new website directory to your repo</li>
<li>Commit the changes and push the commit</li>
<li>Configure your repo to support GitHub pages (I covered that in <a href="https://dev.to/davorg/simple-cpan-module-web-sites-with-github-pages-29ka">my earlier blog post</a>)</li>
</ul>

<p>And you'll have a basic web site for your module at the web address https://&lt;github-user&gt;.github.io/&lt;repo-name&gt;.</p>

<p>The default site is pretty basic. And it has a big banner across the page saying that you haven't put any effort into the site yet. But that's simple enough to fix. Just add a file called <code>tt_lib/intro.tt</code> to your repo that contains a bit of HTML which explains more about what your module does. The next time you rebuild the site, that text will replace the default paragraph.</p>

<p>Other than that, the default site contains:</p>

<ul>
<li>The documentation for all of the modules in your distribution</li>
<li>Links to other standard pages about your module (CPAN, CPAN testers, CPANTS, things like that)</li>
<li>Links to your code repo and issue tracker (if they are defined in your CPAN metadata)</li>
</ul>

<p>It's also simple to add more pages to your site. Just add files in a <code>site_src</code> directory in your repo. Any file in that directory whose name ends in <code>.tt</code> will be processed by the Template Toolkit and the output will be stored in the <code>/docs</code> directory (with the <code>.tt</code> stripped from the name). Any files without a <code>.tt</code> extension will just be copied into <code>/docs</code>. If you're adding pages, then you'll almost certainly also want to edit the navbar on the page to contain links to your new pages.</p>

<p>Default versions of various template files in <code>/site_src</code> and <code>/tt_lib</code> are installed as part of App::CPANModuleSite's installation. To edit them, you just copy them into the same directory in your repo and edit the copied versions. Any files found inside your repo will take precedence over the versions in the default directories.</p>

<p>Any templates that you write (or existing ones that you edit) will have access to a few template variables:</p>

<ul>
<li>
<strong>distribution</strong> is a <a href="https://metacpan.org/pod/MetaCPAN::Client::Distribution">MetaCPAN::Client::Distribution</a> object containing details of your distribution</li>
<li>
<strong>release</strong> is a <a href="https://metacpan.org/pod/MetaCPAN::Client::Release">MetaCPAN::Client::Release</a> object containing details of the latest release of your distribution</li>
<li>
<strong>modules</strong> is an array reference, where each element of the array is a <a href="https://metacpan.org/pod/MetaCPAN::Client::Module">MetaCPAN::Client::Module</a> object containing details of one module in your distribution</li>
</ul>

<p>This is all pretty experimental currently. I'm very happy to add more information to the default pages, more variables to the template engine and make pretty much any other changes that any users suggest. Let's work together to make this a useful and powerful web site generation tool.</p>

<p>I have a couple of thoughts for things I want to do next:</p>

<ul>
<li>I've already started work on creating a GitHub Action, so that you can automatically regenerate the site, for example, whenever you check in a change to your code</li>
<li>The whole point of this is that more CPAN web sites mean better SEO for Perl. So I plan to think of ways that make the default sites as SEO-friendly as possible</li>
</ul>

<p>Please let me know what you think. Do you think this is a good idea? Will you use the module?</p>

<p>Oh, and the site that App::CPANModuleSite generated for itself is at <a href="https://davorg.dev/app-cpanmodulesite/">https://davorg.dev/app-cpanmodulesite/</a>.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/easier-web-sites-for-cpan-modules-1nn4</id>
    <published>2021-05-05T18:46:43Z</published>
    <updated>2021-05-05T18:46:43Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="githubpages"/>
  </entry>
  <entry>
    <title>CPANdeps end of life</title>
    <link rel="alternate" href="https://dev.to/drhyde/cpandeps-end-of-life-1pdf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Back in 2007 I wrote CPANdeps, a web site which analysed dependencies between distributions on the CPAN, and displayed them along with their <a href="http://www.cpantesters.org/">CPAN testers</a> results.</p>

<p>I have decided to retire it, for several reasons. First, <a href="https://metacpan.org/">metacpan</a> has sprouted tentacles to do the dependency analysis. Second, the code is a mess and it needs quite a bit of work to cope with the current size of the CPAN-testers database. But third, and most importantly, the employer that I left over a year ago are withdrawing the free hosting.</p>

<p>I've not actually <em>used</em> the site myself for a while, preferring the <a href="https://metacpan.org/pod/distribution/CPAN-FindDependencies/bin/cpandeps">command line version</a>. That, like metacpan, doesn't include test results, but I've found that I generally don't care much. Nigh on everything Just Works on every platform I care about.</p>

<p>It's going away on or shortly after the 17th of May. If anyone would like to take it over and host it themselves please email me.</p>

</div>
    </content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/cpandeps-end-of-life-1pdf</id>
    <published>2021-05-04T17:53:56Z</published>
    <updated>2021-05-04T17:53:56Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="dependencies"/>
  </entry>
  <entry>
    <title>TPF made me wait 301 hours to learn my punishment</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mithaldu/2021/05/tpf-made-me-wait-301-hours-to-learn-my-punishment.html"/>
    <id>tag:blogs.perl.org,2021:/users/mithaldu//415.10204</id>
    <published>2021-05-03T10:48:39Z</published>
    <updated>2021-05-04T14:10:02Z</updated>
    <author>
        <name>Mithaldu</name>
        <uri>http://cat.eatsmou.se</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mithaldu/">
        <![CDATA[<p>Edit2: After further talk with CAT, i will acknowledge that it was not the intent of the CAT to make me wait, and they in fact did not even realize this was the effect.</p>

<p>I am the "second individual", i am intimately familiar with the events of both their investigations.</p>

<p>Shortly before the TPF informed me that their start-of-may update was nearly ready to be posted, i informed them that these were my expectations:</p>

<p>2021-04-29 19:00<br />
> all i care about are correct, accurate, truthful and useful consequences</p>

<p>I was wholly disappointed.</p>

<p>----</p>

<p>Context: <a href="https://news.perlfoundation.org/post/cat-transparency-report-updates0">https://news.perlfoundation.org/post/cat-transparency-report-updates0</a></p>

<p>----</p>

<p>Edit:</p>

<p>And interestingly the perl.reddit.com moderation team saw fit to censor the submission of this post. It can <a href="https://old.reddit.com/r/perl/comments/n3yv5q/tpf_made_me_wait_301_hours_to_learn_my_punishment/">still be seen directly</a>, but is <a href="https://gist.github.com/wchristian/ee943ee3884bb62440cd84e37aa47993/raw/22ffe3f79e8799bc9d3b91a2142511e866b51521/Screenshot%25202021-05-04%2520050457.png">not in the feed</a> anymore. This is notable as a wide variety of posts and comments that violate the "no personal attacks" rule, but also were in nature against the accused by the TPF, were allowed to remain up and are up to this day and hour, <a href="https://gist.github.com/wchristian/ee943ee3884bb62440cd84e37aa47993/raw/ba77effcf57d09ba7558df811cd3c0dc90134c79/Bild1.png">often with completely false claims about people</a>. chromatic and briandfoy are currently the most (and probably only) active moderators there.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Localizing Dates in a Perl web application with JavaScript</title>
    <link rel="alternate" href="https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-with-javascript-1n24" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://phoenixtrap.com/2021/04/20/localizing-dates-in-a-perl-web-application/">Last week’s article</a> received a comment on a private Facebook group that amounted to “just use JavaScript’s built-in formatting.” So what would that look like?</p>


<div class="ltag_gist-liquid-tag">
  
</div>


<p>It’s structured much like the <a href="https://phoenixtrap.com/2021/04/20/localizing-dates-in-a-perl-web-application/">Perl-only solution</a>, with a default <code>"/"</code> route and a <code>localize_date</code> <a href="https://docs.mojolicious.org/Mojolicious/Lite#helper">Mojolicious helper</a> to do the formatting. I opted to output a piece of JavaScript from the helper on <strong>lines 11 through 14</strong> since it could be repeated several times in a document. You could instead declare a function in the default layout’s HTML <code>&lt;head&gt;</code> on line 38 that would receive a date and a formatting style, outputting the resulting formatted date.</p>

<p>In the template’s list from <strong>lines 22 through 31</strong> I decided to use JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/write"><code>document.write</code></a> method calls to add our generated code. This has a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/write#notes">slew of caveats</a> but works for our example here.</p>

<p>Worth noting is the double equals sign (<code>&lt;%== %&gt;</code>) when <a href="https://docs.mojolicious.org/Mojolicious/Guides/Rendering#Embedded-Perl">embedding a Perl expression</a>. This prevents Mojolicious from XML-escaping special characters, e.g., replacing <code>"</code>quotes<code>"</code> with <code>&amp;quot;</code>, <code>&lt;</code>angle brackets<code>&gt;</code> with <code>&amp;lt;</code> and <code>&amp;gt;</code>, etc. This is important when returning HTML and JavaScript code.</p>

<p>I also chose to use the JavaScript <code>Date</code> object’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"><code>toLocaleString()</code></a> method for my formatting on <strong>line 12</strong>. There are other ways to do this:</p>

<ul>
<li>Date objects also have a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"><code>toLocaleDateString</code></a> method. However, Mozilla has a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString#performance">performance note</a> that states it’s better to use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat"><code>Intl.DateTimeFormat</code></a> object’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format"><code>format</code></a> property.</li>
<li>But <code>Intl.DateTimeFormat</code>’s <a href="https://caniuse.com/mdn-javascript_builtins_intl_datetimeformat_datetimeformat_datestyle">browser support</a> stands at about 70%, leaving out Safari (that’s Mac, iPhone, and iPad) and Internet Explorer users.</li>
<li>There are JavaScript libraries and <a href="https://javascript.info/polyfills">polyfills</a> to address these issues, but I’m trying to keep this example simple.</li>
</ul>

<p>Note that <strong>line 10</strong> builds the parameters for JavaScript’s <code>Date</code> constructor using the <a href="https://metacpan.org/pod/DateTime#%24dt-%3Eyear"><code>year</code></a>, <code>month_0</code>, and <a href="https://metacpan.org/pod/DateTime#%24dt-%3Eday"><code>day</code></a> methods of our Perl <a href="https://metacpan.org/pod/DateTime"><code>DateTime</code></a> object; <code>month_0</code> because the <code>Date</code> constructor takes its month as an integer from 0 to 11 rather than 1 to 12. JavaScript <code>Date</code>s can be <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#parameters">constructed in many ways</a>; this seemed the simplest without having to explain things like epochs and inconsistent parsing.</p>

<p>Why are we using Perl <code>DateTime</code>s and a helper anyway? I’m assuming that our dates are coming from the backend of our application, possibly <a href="https://metacpan.org/pod/DBIx::Class::InflateColumn::DateTime">inflated from a database column</a>. If your dates are strictly on the frontend, you might decide to put your formatting code there in a JavaScript function, perhaps using a JavaScript-based templating library.</p>

<p>The bottom line is to do whatever makes sense for your situation. I prefer the Perl solution because I like the language and its ecosystem and perhaps have acclimated to its quirks. The complications of JavaScript browser support, competing frameworks, and layers of tooling make my head hurt. Despite this, I’m still learning; if you have any comments or suggestions, please leave them below.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-with-javascript-1n24</id>
    <published>2021-05-04T14:00:00Z</published>
    <updated>2021-05-04T14:00:00Z</updated>
    <category term="perl"/>
    <category term="mojolicious"/>
    <category term="javascript"/>
    <category term="l10n"/>
  </entry>
  <entry>
    <title>US Based, Modern Perl Developer Role - 100% remote!</title>
    <link rel="alternate" href="https://job.perl.careers/i18" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is looking for a Perl programmer who wants to tame the job jungle for employers and employees through their candidate sourcing and data management products. TThe perfect candidate has strong experience with Modern Perl, is located within the US and is keen for a remote role! Is that you?</div>
    </content>
    <id>https://job.perl.careers/i18</id>
    <published>2021-05-03T10:00:52Z</published>
    <updated>2021-05-03T10:00:52Z</updated>
  </entry>
  <entry>
    <title>The Future is Now! Perl Role in Malaysia</title>
    <link rel="alternate" href="https://job.perl.careers/2x6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you’re a Perl programmer with a passion for finance, this role may be the one for you. Our client is a financial company whose stunning growth over the last twenty years shows that they belong in the city of the future. They’ve built a company with an international presence on that idea, and business is booming.</div>
    </content>
    <id>https://job.perl.careers/2x6</id>
    <published>2021-05-03T10:00:51Z</published>
    <updated>2021-05-03T10:00:51Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/mhx" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The organization whose servers handle a jaw-dropping 80% of the UK’s job ads is looking for a few good humans, and you could be one of them! The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks.</div>
    </content>
    <id>https://job.perl.careers/mhx</id>
    <published>2021-05-03T10:00:50Z</published>
    <updated>2021-05-03T10:00:50Z</updated>
  </entry>
  <entry>
    <title>Cooking Up Something Good. Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/x90" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">With a knack for tailoring content to a variety of site aesthetics, our client sets a banquet of advertising delights for over 349 million consumers around the world. If your mouth is watering at the thought of joining this dynamic team and you’re a senior Perl programmer with a solid understanding of Go programming languages, they just might set a place for you at the table.</div>
    </content>
    <id>https://job.perl.careers/x90</id>
    <published>2021-05-03T10:00:49Z</published>
    <updated>2021-05-03T10:00:49Z</updated>
  </entry>
  <entry>
    <title>Not All Heroes Wear Capes. Perl in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/sxl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Very well-known Austrian e-commerce brand looking for a heroic Perl programmer to develop and deliver quality content and all the info users need to find their gadgets for the right price. Client is willing to consider all candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/sxl</id>
    <published>2021-05-03T10:00:48Z</published>
    <updated>2021-05-03T10:00:48Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://perlconference.us/tprc-2021-cloud/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 8-10 June 2021.</div>
    </content>
    <id>https://perlconference.us/tprc-2021-cloud/</id>
    <published>2021-05-03T10:00:47Z</published>
    <updated>2021-05-03T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 22, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-05-03T10:00:46Z</published>
    <updated>2021-05-03T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Houston Perl Mongers Online Meeting: OpenMP &amp; Perl &amp; perl</title>
    <link rel="alternate" href="https://houston.pm.org/announce_meeting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">May 13th, 2021 06:00 PM Central Time (US and Canada)</div>
    </content>
    <id>https://houston.pm.org/announce_meeting.html</id>
    <published>2021-05-03T10:00:45Z</published>
    <updated>2021-05-03T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, May 12, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-05-03T10:00:44Z</published>
    <updated>2021-05-03T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Washington, DC Perl (DCPM) - Bob King to discuss the Dancer Framework</title>
    <link rel="alternate" href="http://dc.pm.org/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, May 5, 2021; 07:00 PM Eastern Time (US and Canada)</div>
    </content>
    <id>http://dc.pm.org/</id>
    <published>2021-05-03T10:00:43Z</published>
    <updated>2021-05-03T10:00:43Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/05/cccxxxix-12-great-cpan-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cccxxxix-12-great-cpan-modules-released.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdlxxxviii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-05-03T10:00:42Z</published>
    <updated>2021-05-03T10:00:42Z</updated>
  </entry>
  <entry>
    <title>2021.17 Releastable</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/04/26/2021-17-releastable/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/04/26/2021-17-releastable/</id>
    <published>2021-05-03T10:00:41Z</published>
    <updated>2021-05-03T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Live Video - Transpose File by Mohammad Anwar</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=wIx1m__r4SQ" type="text/html"/>
    <id>https://www.youtube.com/watch?v=wIx1m__r4SQ</id>
    <published>2021-05-03T10:00:40Z</published>
    <updated>2021-05-03T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Live Video - Valid Phone Numbers by Mohammad Anwar</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=nrL0sS-klo0" type="text/html"/>
    <id>https://www.youtube.com/watch?v=nrL0sS-klo0</id>
    <published>2021-05-03T10:00:39Z</published>
    <updated>2021-05-03T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Live Video - Four Squares Puzzle by Mohammad Anwar</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=DvW9Jig42cg" type="text/html"/>
    <id>https://www.youtube.com/watch?v=DvW9Jig42cg</id>
    <published>2021-05-03T10:00:38Z</published>
    <updated>2021-05-03T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Further live events</title>
    <link rel="alternate" href="https://code-maven.com/live" type="text/html"/>
    <id>https://code-maven.com/live</id>
    <published>2021-05-03T10:00:37Z</published>
    <updated>2021-05-03T10:00:37Z</updated>
  </entry>
  <entry>
    <title>DevOps work - setting up CI and Docker for the course management project</title>
    <link rel="alternate" href="https://code-maven.com/setting-up-ci-and-docker-for-course-management-app" type="text/html"/>
    <id>https://code-maven.com/setting-up-ci-and-docker-for-course-management-app</id>
    <published>2021-05-03T10:00:36Z</published>
    <updated>2021-05-03T10:00:36Z</updated>
  </entry>
  <entry>
    <title>s3path the Python File-System/Path like interface for AWS S3</title>
    <link rel="alternate" href="https://code-maven.com/working-on-s3path" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lior Mizrahi, the author of the package introduces it and then we fix a bug.</div>
    </content>
    <id>https://code-maven.com/working-on-s3path</id>
    <published>2021-05-03T10:00:35Z</published>
    <updated>2021-05-03T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Setting up ELK using Rexify</title>
    <link rel="alternate" href="https://code-maven.com/elk-with-rex" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Another episode of the 'Automation with Rex' series in which we follow the Ansible playbook to set up Elasticsearch and Nginx on CentOS.</div>
    </content>
    <id>https://code-maven.com/elk-with-rex</id>
    <published>2021-05-03T10:00:34Z</published>
    <updated>2021-05-03T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - part 5</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The 5th part in which we set up redirection, refactored the tests, and started to test the upload file phase.</div>
    </content>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-5</id>
    <published>2021-05-03T10:00:33Z</published>
    <updated>2021-05-03T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 110</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-110-22ao" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cool use of map and logical-defined-or; thanks for sharing the magic.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-110-22ao</id>
    <published>2021-05-03T10:00:32Z</published>
    <updated>2021-05-03T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110: Transpose Numbers</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_110__Transpose_Numbers.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I noticed Roger not using \d in the regex, instead using [0-9]. I remember reading somewhere it is the preferred choice.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_110__Transpose_Numbers.html</id>
    <published>2021-05-03T10:00:31Z</published>
    <updated>2021-05-03T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110: Mangling Text File</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/04/26/PerlWeeklyChallenge110.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca shared some cool Raku magic dealing with regex. Thanks for sharing the knowledge.</div>
    </content>
    <id>https://fluca1978.github.io/2021/04/26/PerlWeeklyChallenge110.html</id>
    <published>2021-05-03T10:00:30Z</published>
    <updated>2021-05-03T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/04/27/PWC110/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis shared multiple solutions to the Transpose File task. Simply loved it. Thanks.</div>
    </content>
    <id>https://wlmb.github.io/2021/04/27/PWC110/</id>
    <published>2021-05-03T10:00:29Z</published>
    <updated>2021-05-03T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110: Valid Phone Numbers and Transposed File</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-110-valid-phone-numbers-and-transposed-file.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent has been consistently sharing solutions in more than just Perl and Raku. Thanks for sharing.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-110-valid-phone-numbers-and-transposed-file.html</id>
    <published>2021-05-03T10:00:28Z</published>
    <updated>2021-05-03T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #110</title>
    <link rel="alternate" href="https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-110/james-smith" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the discussion about memory usage for the Transpose File task. It is always a pleasure to read code showing the memory utilisation. Thanks for sharing.</div>
    </content>
    <id>https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-110/james-smith</id>
    <published>2021-05-03T10:00:27Z</published>
    <updated>2021-05-03T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Week 110</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2021/05/perl_weekly_challenge_week_110.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jaldhar shared a mix of Perl and Raku magics. Cool use. Thanks.</div>
    </content>
    <id>https://www.braincells.com/perl/2021/05/perl_weekly_challenge_week_110.html</id>
    <published>2021-05-03T10:00:26Z</published>
    <updated>2021-05-03T10:00:26Z</updated>
  </entry>
  <entry>
    <title>PWC110 - Transpose File</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/29/pwc110-transpose-file/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio shared a special use of open(). Thanks for sharing the knowledge.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/29/pwc110-transpose-file/</id>
    <published>2021-05-03T10:00:25Z</published>
    <updated>2021-05-03T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC110 - Valid Phone Numbers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/28/pwc110-valid-phone-numbers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio never misses the opportunity to surprise us. Thanks for the short and sweet discussion on the subject.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/28/pwc110-valid-phone-numbers/</id>
    <published>2021-05-03T10:00:24Z</published>
    <updated>2021-05-03T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Hanging On The Telephone: Perl Weekly Challenge #110</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/04/28/hanging-on-the-telephone-perl-weekly-challenge-110.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave presented us some information background about Phone Numbers. Also shared s special use of Text::CSV. Thanks for sharing.</div>
    </content>
    <id>https://jacoby.github.io/2021/04/28/hanging-on-the-telephone-perl-weekly-challenge-110.html</id>
    <published>2021-05-03T10:00:23Z</published>
    <updated>2021-05-03T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Flip Me Your Digits, Baby</title>
    <link rel="alternate" href="https://colincrain.com/2021/05/02/flip-me-your-digits-baby/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cool use of regex, something I never used before. Thanks Colin.</div>
    </content>
    <id>https://colincrain.com/2021/05/02/flip-me-your-digits-baby/</id>
    <published>2021-05-03T10:00:22Z</published>
    <updated>2021-05-03T10:00:22Z</updated>
  </entry>
  <entry>
    <title>CY's Take on PWC#110</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/05/cys-take-on-pwc110.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved his frank admission the checking other contributions and building a different solution is not an easy job. Kudo to your efforts.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2021/05/cys-take-on-pwc110.html</id>
    <published>2021-05-03T10:00:21Z</published>
    <updated>2021-05-03T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Validly Transposed Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/validly-transposed.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne used a special trick to deal with the Valid Phone Numbers task by only looking at the first 4 characters.</div>
    </content>
    <id>https://raku-musings.com/validly-transposed.html</id>
    <published>2021-05-03T10:00:20Z</published>
    <updated>2021-05-03T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Challenge 110</title>
    <link rel="alternate" href="https://andinus.tilde.institute/pwc/challenge-110/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thanks for introducing Raku grammars and welcome back after the short break.</div>
    </content>
    <id>https://andinus.tilde.institute/pwc/challenge-110/</id>
    <published>2021-05-03T10:00:19Z</published>
    <updated>2021-05-03T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Checking Phone Numbers and Transposing Tabular Data the Hard Way: The Weekly Challenge 110</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/05/02" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam never hesitates to try a unique tool. This week he used Parse::Yapp grammar. Thanks for sharing.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/05/02</id>
    <published>2021-05-03T10:00:18Z</published>
    <updated>2021-05-03T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110: Transpose File</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-110-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's blog post is full of magical code. I loved the one-liner solution in Perl.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-110-2.html</id>
    <published>2021-05-03T10:00:17Z</published>
    <updated>2021-05-03T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110: Valid Phone Numbers</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-110-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I have learnt something new today - chained regexes in Perl. Thanks Abigail for sharing.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-110-1.html</id>
    <published>2021-05-03T10:00:16Z</published>
    <updated>2021-05-03T10:00:16Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 110</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-110/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please check out these Raku solutions by Aaron Smith.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-110/</id>
    <published>2021-05-03T10:00:15Z</published>
    <updated>2021-05-03T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 108</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-108" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-108</id>
    <published>2021-05-03T10:00:14Z</published>
    <updated>2021-05-03T10:00:14Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 110</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-110" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions from Team PWC dealing with the "Valid Phone Numbers" and "Transpose File" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-110</id>
    <published>2021-05-03T10:00:13Z</published>
    <updated>2021-05-03T10:00:13Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 111</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "Search Matrix" and "Ordered Letters". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the <a href="https://perlweeklychallenge.org/faq">FAQ</a>.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-111</id>
    <published>2021-05-03T10:00:12Z</published>
    <updated>2021-05-03T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Scalar::Type</title>
    <link rel="alternate" href="https://metacpan.org/release/Scalar-Type" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">David released a complete new distribution to figure out what type a scalar is.</div>
    </content>
    <id>https://metacpan.org/release/Scalar-Type</id>
    <published>2021-05-03T10:00:11Z</published>
    <updated>2021-05-03T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Perl test coverage when you don’t have a Makefile</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/04/26/perl-test-coverage-when-you-dont-have-a-makefile/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark trying to resolve a test coverage issue in this blog post.</div>
    </content>
    <id>https://phoenixtrap.com/2021/04/26/perl-test-coverage-when-you-dont-have-a-makefile/</id>
    <published>2021-05-03T10:00:10Z</published>
    <updated>2021-05-03T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Creating REST APIs with Perl, Mojolicious and OpenAPI</title>
    <link rel="alternate" href="https://dev.to/raigaurav/creating-rest-apis-with-perl-mojolicious-and-openapi-1bng" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Gaurav has been blogging regularly to create a REST API using Mojolicious and OpenAPI. Always fun to read his blog posts.</div>
    </content>
    <id>https://dev.to/raigaurav/creating-rest-apis-with-perl-mojolicious-and-openapi-1bng</id>
    <published>2021-05-03T10:00:09Z</published>
    <updated>2021-05-03T10:00:09Z</updated>
  </entry>
  <entry>
    <title>EV charge pricing per State in US</title>
    <link rel="alternate" href="http://blogs.perl.org/users/itcharlie/2021/05/ev-charge-pricing-per-state-in-us.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Charlie's attempt to solve a practical problem using Perl. A very cool attempt.</div>
    </content>
    <id>http://blogs.perl.org/users/itcharlie/2021/05/ev-charge-pricing-per-state-in-us.html</id>
    <published>2021-05-03T10:00:08Z</published>
    <updated>2021-05-03T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Perl tops coding salary rankings</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-tops-coding-salary-rankings-4fp3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark shared a discussion about Perl salary rankings.</div>
    </content>
    <id>https://dev.to/mjgardner/perl-tops-coding-salary-rankings-4fp3</id>
    <published>2021-05-03T10:00:07Z</published>
    <updated>2021-05-03T10:00:07Z</updated>
  </entry>
  <entry>
    <title>There's no such thing as "The Perl Community"</title>
    <link rel="alternate" href="http://neilb.org/2021/04/27/perl-communities.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil's take on what actually is community. He took pains to explain the term in great detail.</div>
    </content>
    <id>http://neilb.org/2021/04/27/perl-communities.html</id>
    <published>2021-05-03T10:00:06Z</published>
    <updated>2021-05-03T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Heail - head and tail together</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/30/heail/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio once again created a very handy tool, Heail, in this blog post.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/30/heail/</id>
    <published>2021-05-03T10:00:05Z</published>
    <updated>2021-05-03T10:00:05Z</updated>
  </entry>
  <entry>
    <title>JSONify a string</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/01/jsonify-string/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio continued with his daily blogging series and presents how to stringify CSS as JSON.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/01/jsonify-string/</id>
    <published>2021-05-03T10:00:04Z</published>
    <updated>2021-05-03T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Downloading and Installing Perl in 2021</title>
    <link rel="alternate" href="https://www.perl.com/article/downloading-and-installing-perl-in-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark continued his blogging series and presented the basics of installing Perl on various platforms.</div>
    </content>
    <id>https://www.perl.com/article/downloading-and-installing-perl-in-2021/</id>
    <published>2021-05-03T10:00:03Z</published>
    <updated>2021-05-03T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Installing wxPerl for Strawberry Perl v5.32.0, or: Future of wxPerl?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/john_ankarstrom/2021/05/wxperl.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">John shares his experience dealing with wxPerl.</div>
    </content>
    <id>http://blogs.perl.org/users/john_ankarstrom/2021/05/wxperl.html</id>
    <published>2021-05-03T10:00:02Z</published>
    <updated>2021-05-03T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Community Affairs Team Transparency Report Update</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/cat-transparency-report-updates0" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The CAT would like to make some corrections, as well as address some of the comments and questions we received on the initial transparency report.</div>
    </content>
    <id>https://news.perlfoundation.org/post/cat-transparency-report-updates0</id>
    <published>2021-05-03T10:00:01Z</published>
    <updated>2021-05-03T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#510 - The Perl Community?</title>
    <link rel="alternate" href="http://perlweekly.com/archive/510.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I am not sure if you have read the recent <a href="http://neilb.org/2021/04/27/perl-communities.html">blog post</a> by Neil Bowers. I have read it multiple times to understand the subject of the post. I must admit, I had never read such an in depth analysis of the term "Community". As my vocabulary is rather limited, I found it very interesting to read such a long blog post. To me, community is group of like-minded people. When I attended my first London Perl Workshop, I immediately felt part of the community. The organiser and everybody was so accommodating and friendly. It made me come again the following year and I became addicted to it afterwards. I always looked up to the big names of the community everytime I needed some inspiration. Take a look at the <a href="https://www.perl.org/advocacy/white_camel/">past recipients</a> of the White Camel Award, you can get some idea of who's who in the community. Unfortunately it hasn't been awarded since 2018 for some reason that I am not aware of. I miss the community spirit of attending Perl Conferences. You can never experience that feeling unless you attend one. I hope and wish we get back to attending conferences. Although there has been virtual events in recent times, it can't replace real events in my humble opinion. I must give credit to everyone who is keeping the community spirit alive.</p>
<p>Today is a bank holiday in the UK, so all the British readers of the newsletter, enjoy your break with the newsletter. Rest of the world, start your week with weekly doses of Perl news. Stay safe and healthy.</p></div>
    </content>
    <id>http://perlweekly.com/archive/510.html</id>
    <published>2021-05-03T10:00:00Z</published>
    <updated>2021-05-03T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 110: Valid Phone Numbers and Transposed File</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-110-valid-phone-numbers-and-transposed-file.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10201</id>
    <published>2021-05-01T21:59:17Z</published>
    <updated>2021-05-03T03:06:23Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 110 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (May 2, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Valid Phone Numbers</h2>

<p><em>You are given a text file.</em></p>

<p><em>Write a script to display all valid phone numbers in the given text file.</em></p>

<p><em>Acceptable Phone Number Formats:</em></p>

<pre><code>+nn  nnnnnnnnnn
(nn) nnnnnnnnnn
nnnn nnnnnnnnnn
</code></pre>

<p><em>Input File:</em></p>

<pre><code>0044 1148820341
 +44 1148820341
  44-11-4882-0341
(44) 1148820341
  00 1148820341
</code></pre>

<p><em>Output</em></p>

<pre><code>0044 1148820341
 +44 1148820341
(44) 1148820341
</code></pre>

<p>This is obviously typically a job for regular expressions (or regexes). I will not even try to consider a language or solution not using regular expressions. I will not use a separate text file but simulate it with an array of strings or some other means.</p>

<h3>Valid Phone Numbers in Raku</h3>

<p>Please remember that Raku&#8217;s regexes are trying to renew the subject and have some differences with the traditional Perl or Perl-compatible regexes. Among other things, spaces are usually not relevant in a regex pattern (unless you use an option to force it).</p>

<pre><code>use v6;

my @tests = " 0044 1148820341 42 ", "  +44 1148820342 abc", 
            " 44-11-4882-0343 ", " (44) 1148820344  ", " 00 1148820345";

my $ten-dgts = rx/\d ** 10/;
for @tests -&gt; $str {
    say ~$0 if $str ~~ / ( [ \d ** 4 || '+' \d\d || \( \d\d \) ] \s+ &lt;$ten-dgts&gt; ) /;
}
</code></pre>

<p>To make things clearer, the regex above could be rewritten more clearly as:</p>

<pre><code>(                 # Capture content within  poarens
  [               # group items within the [] alternative
    \d ** 4 ||    # Four digits or...
    '+' \d\d ||   # + sign and 2 digits, or ..
    \( \d\d \) ]  # two digits within parentheses
  ]               # end of the alternative
  \s+             # spaces
  &lt;$ten-dgts&gt;     # Ten-digits regex
)                 # end of capture
</code></pre>

<p>The above program displays the following output</p>

<pre><code>$ perl phone.pl
0044 1148820341
+44 1148820342
(44) 1148820344
(39) 1148820344
</code></pre>

<h3>Valid Phone Numbers in Perl</h3>

<p>This is a port to Perl of the above Raku program. Note that we have included a test case in which thee are two phone numbers in the same input line.</p>

<pre><code>use strict;
use warnings;
use feature "say";

# simulate a text file with an array of strings
my @tests = (" 0044 1148820341 42 ", "  +44 1148820342 abc", 
            " 44-11-4882-0343 ", " (44) 1148820344 foo (39) 1148820345", " 00 1148820346");

for my $str (@tests) {
    say $1 while $str =~ / ( (?: \d {4} | \+ \d\d | \( \d\d \)  ) \s+ \d{10} ) /gx;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl phone.pl
0044 1148820341
+44 1148820342
(44) 1148820344
(39) 1148820345
</code></pre>

<h3>Valid Phone Numbers in Other Languages</h3>

<h4>Phone Numbers in Scala</h4>

<p>We need to import the <code>cala.util.matching.Regex</code> core Scala package. Note that every backslash appears twice in the pattern of the program below. This is because in Java and Scala, a single backslash is an escape character in a string literal, not a regular character that shows up in the string. So instead of ‘\’, you need to write ‘\’ to get a single backslash in the string.</p>

<pre><code>import scala.util.matching.Regex

object phoneNumber extends App {
  val pattern = "((?:\\d{4}|\\+\\d\\d|\\(\\d\\d\\))\\s+\\d{10})".r
  val tests = Array(
    " 0044 1148820341 42 ",
    "  +44 1148820342 abc",
    " 44-11-4882-0343 ",
    " (44) 1148820344  (33) 1148820345",
    " 00 1148820346"
  );
  for (str &lt;- tests) {
    if (pattern.unanchored.matches(str)) {
      println((pattern findAllIn str).mkString(", "))
    }
  }
}
</code></pre>

<p>Output:</p>

<pre><code>0044 1148820341
+44 1148820342
(44) 1148820344, (33) 1148820345
</code></pre>

<h4>Phone Numbers in Python</h4>

<p>This program uses the <code>re</code> core Python package:</p>

<pre><code>import re 

tests = ("foo 0044 1148820341 42", "xyz +44 1148820342 abc", "44-11-4882-0343", " (44) 1148820344  ", "00 1148820345")

for str in tests:
    match = re.search("(\d{4}|\+\d\d|\(\d\d\))\s+\d{10}", str)
    if (match):
        print (match.group())
</code></pre>

<p>Output:</p>

<pre><code>$ python3 phone.py
0044 1148820341
+44 1148820342
(44) 1148820344
</code></pre>

<h4>Phone Numbers in Awk</h4>

<p>Awk was the first programming language to include regular expressions, even before Perl, so it was an obvious guest language candidate for this task. I had a bit of trouble to get it to work properly because, for some reason, the <code>\d</code> and <code>[:digit:]</code> character classes did not work properly on the platform where I tested it (although they&#8217;re supposed to be part of the awk language). I used <code>[0-9]</code> instead, which is a quite simple solution, but I wasted quite a bit of time before I figured why it did not work as I expected. Here, we&#8217;re using a shell pipe with an awk one-liner:</p>

<pre><code>$ echo '
0044 1148820341
+44 1148820342
44-11-4882-0343
(44) 1148820344
00 1148820346
' | awk '/([0-9]{4}|\+[0-9]{2}|\([0-9]{2}\))\s+[0-9]{10}/ { print $0 }'
0044 1148820341
+44 1148820342
(44) 1148820344
</code></pre>

<h4>Phone Numbers in Julia</h4>

<p>No need to import a dedicated library in Julia, since regexes are built into the language.</p>

<pre><code>tests = ["foo 0044 1148820341 42", "xyz +44 1148820342 abc", 
         "44-11-4882-0343", " (44) 1148820344  ", "00 1148820345"]
pattern = r"(\d{4}|\+\d\d|\(\d\d\))\s+\d{10}"

for str in tests 
    m = match(pattern, str)
    if (! (m === nothing)) 
        println(m.match)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>    $julia phone.jl
    0044 1148820341
    +44 1148820342
    (44) 1148820344
</code></pre>

<h4>Phone Numbers in Ruby</h4>

<p>For some reason the <code>\d</code> character class and the <code>\+</code> literal plus sign don&#8217;t seem to work on my Ruby installation, although they should if I understand the documentation correctly. So, I used the <code>[0-9]</code> and <code>[+]</code> character classes instead.</p>

<pre><code>tests = ["foo 0044 1148820341 42", "xyz +44 1148820342 abc", 
         "44-11-4882-0343", " (44) 1148820344  ", "00 1148820345"]
pattern = %r{((\d{4}|\+\d{2}|\(\d{2}\))\s+\d{10})}
for str in tests
    match = str.match(pattern)
    if match then
        print(match[0], "\n")
    end
end
</code></pre>

<p>Output:</p>

<pre><code>0044 1148820341                                                                                                                               
+44 1148820342                                                                                                                                
(44) 1148820344
</code></pre>

<h4>Phone Numbers in Rust</h4>

<p>Here, I have chosen to use a single string containing several phone numbers as input and check that we can extract several valid phone numbers from that input string.</p>

<pre><code>use regex::Regex;

fn main() {
    let pattern = Regex::new(r"((\d{4}|\+\d{2}|\(\d{2}\))\s+\d{10})").unwrap();
    let test = "foo 0044 1148820341 42 xyz +44 1148820342 abc 
        44-11-4882-0343 (44) 1148820344 00 1148820345";
    for matches in pattern.captures_iter(test) {
        println!("{:?}", &amp;matches[0]);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>"0044 1148820341"
"+44 1148820342"
"(44) 1148820344"
</code></pre>

<h2>Task 2: Transpose File</h2>

<p><em>You are given a text file.</em></p>

<p><em>Write a script to transpose the contents of the given file.</em></p>

<p><em>Input File</em></p>

<pre><code>name,age,sex
Mohammad,45,m
Joe,20,m
Julie,35,f
Cristina,10,f
</code></pre>

<p><em>Output:</em></p>

<pre><code>name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<p>For practical reasons, I will not use an external file but simulate it in various ways.</p>

<h3>Transpose File in Raku</h3>

<p>We simulate the input file with an array of strings. The program takes the <code>@input</code> array of strings, reads each line in turn (as we would do with an actual file), split each line and on commas, and store the individual items in a <code>@transposed</code> array of arrays. At the end, we just need to output the rows of the <code>@transposed</code> array.</p>

<pre><code>use v6;

my @input = &lt;name,age,sex Mohammad,45,m 
             Joe,20,m Julie,35,f Cristina,10,f&gt;;

my @transposed;
for @input -&gt; $in {
    my $i = 0;
    for $in.split(',') -&gt; $str {
        push @transposed[$i], $str;
        $i++;
    }
}
for @transposed -&gt; @line {
    say @line.join(',');
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./transpose.raku
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<h3>Transpose File in Perl</h3>

<p>We simulate the input file with space-separated string. The construction of the <code>@transposed</code> array of arrays is following the same idea as in Raku.</p>

<pre><code>use strict;
use warnings;
use feature "say";

# Note: input array simulated with a string
my $in_string = "name,age,sex  Mohammad,45,m 
         Joe,20,m Julie,35,f  Cristina,10,f";
my @input = split /\s+/, $in_string;
my @transposed;
for my $in (@input) {
    my $i = 0;
    for my $str (split /,/, $in) {
        push @{$transposed[$i]}, $str;
        $i++;
    }
}
for my $line (@transposed) {
    say join ',', @$line;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  transpose.pl
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<h3>Transpose File in Awk</h3>

<p>We pipe the input to the awk program standard input. </p>

<pre><code>BEGIN{ 
    FS = "," 
}
{ table[0,NR] = $1 }
{ table[1,NR] = $2 }
{ table[2,NR] = $3 }
{ max = NR }
END {
    for (i = 0; i &lt; 3; i++) {
        for (j = 1; j &lt; max - 1; j++) printf "%s,", table[i,j]
        printf "%s\n", table[i,max-1]
    }
}
</code></pre>

<p>This is an example run:</p>

<pre><code>$  echo 'name,age,sex
&gt; Mohammad,45,m
&gt; Joe,20,m
&gt; Julie,35,f
&gt; Cristina,10,f
&gt; ' | awk -f transpose.awk
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 9, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Checking Phone Numbers and Transposing Tabular Data the Hard Way: The Weekly Challenge 110</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/02#pwc110" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to display all valid phone numbers in the given text file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use Capture::Tiny q/capture_stdout/;
use PhoneNumberParser;

MAIN:{
    my $parser = new PhoneNumberParser();
    while(my $line = &lt;DATA&gt;){
        $line =~ s/^\s+|\s+$//g;
        my $syntax_error = capture_stdout {
            $parser-&gt;parse($line); 
        };
        print("$line\n") if !$syntax_error;
    }
}   

__DATA__
0044 1148820341
 +44 1148820341
  44-11-4882-0341
(44) 1148820341
 00 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; grammar.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
%token SPACE DIGIT OPEN CLOSE PLUS
%%

phone_number: prefix SPACE area_exchange_subscriber
;

prefix: DIGIT DIGIT DIGIT DIGIT
    | OPEN DIGIT DIGIT CLOSE
    | PLUS DIGIT DIGIT
;   

area_exchange_subscriber: DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT
;

%%

sub lexer{
    my($parser) = @_;
    $parser-&gt;YYData-&gt;{INPUT} or return('', undef);
    ##
    # send tokens to parser
    ##
    for($parser-&gt;YYData-&gt;{INPUT}){
        s/^(\s)// and return ("SPACE", $1);
        s/^(\d)// and return ("DIGIT", $1);
        s/^(\()// and return ("OPEN", $1);
        s/^(\))// and return ("CLOSE", $1);
        s/^(\+)// and return ("PLUS", $1);
    }  
}

sub error{
    exists $_[0]-&gt;YYData-&gt;{ERRMSG}
    and do{
        print $_[0]-&gt;YYData-&gt;{ERRMSG};
            return;
    };
    print "syntax error\n"; 
}

sub parse{
    my($self, $input) = @_;
    $self-&gt;YYData-&gt;{INPUT} = $input;
    my $result = $self-&gt;YYParse(yylex =&gt; \&amp;lexer, yyerror =&gt; \&amp;error);
    return $result;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ yapp perl/PhoneNumberParser.yp
$ perl -Iperl perl/ch-1.pl
0044 1148820341
+44 1148820341
(44) 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;While a set of regular expression would have done the job quite nicely I figured I’d use this problem as a reason to shake the rust off my grammar writing skills. Not that I am a master parser writer or anything, but &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; makes it easy enough!&lt;/p&gt;
&lt;p&gt;Well, easy is a bit relative I suppose. This is definitely not the simplest way of performing this task.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to transpose the contents of the given file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
sub transpose{
    my @columns = @_;
    return transpose_r([], \@columns);  
}

sub transpose_r{
    my($transposed, $remaining) = @_;
    return $transposed if(@{$remaining} == 0);   
    $transposed = transpose_row_r($transposed, $remaining-&gt;[0]);  
    shift @{$remaining}; 
    transpose_r($transposed, $remaining);  
}

sub transpose_row_r{
    my($transposed, $row) = @_;
    return $transposed if(@{$row} == 0); 
    my $index = @{$row} - 1;
    push @{$transposed-&gt;[$index]}, pop @{$row};  
    transpose_row_r($transposed, $row);    
}

MAIN:{
    my @columns;
    while(my $line = &lt;DATA&gt;){
        chomp($line);
        my @fields = split(/,/, $line);   
        push @columns, \@fields; 
    }
    my $transposed = transpose(@columns);   
    for my $i (0 .. @{$transposed} - 1){
        print join(",", @{$transposed-&gt;[$i]}) . "\n";       
    }    
}

__DATA__
name,age,sex
Mohammad,45,m
Joe,20,m
Julie,35,f
Cristina,10,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Similar to Part 1 this is also not the easiest way to perform this task. Here the same sort of recursion is used that is used in the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/05/02"&gt;Prolog version&lt;/a&gt; of the solution to this part. That is, we recurse over the table itself and then for each row perform a separate recursion to perform the transpostion.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/"&gt;Challenge 110&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc110</id>
    <published>2021-05-02T19:03:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 5</title>
  <summary type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-02T22:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-5"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-5</id>
  <content type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>CY's Take on PWC#110</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/05/cys-take-on-pwc110.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10203</id>
    <published>2021-05-02T20:58:43Z</published>
    <updated>2021-05-02T21:45:29Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    <category term="java" label="java" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[

<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p>

<p><strong>Do tell me, if I am wrong or you strongly oppose my statements! </strong></p>

<p>Well, I wake up early and get some time to blog about <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a> again (in addition, correct some parts of my submitted code ‐ a brain with good rest well spots bugs!).</p><p>Both Perl and (guest language) Java codes for the two tasks have been done this week.<br /></p>

<h4>Task 1: Valid Phone Number</h4>

<div>I started my Sunday afternoon with Java. "Eat the frog first."</div>

<div>There are <a href="https://www.geeksforgeeks.org/different-ways-reading-text-file-java/">several ways to read text files</a> in Java, I chose the default class which I am most familiar with: <tt>java.util.Scanner</tt>.
</div>

<pre>File file = new File(args[0]);
Scanner sc = new Scanner(file);
while (sc.hasNextLine()) {
    // blah blah blah
}
</pre>

<div>Before I started, I peeked on the <a href="https://perlweeklychallenge.org/blog/guest-contribution/#110">Guest Contribution</a>
 page and briefly looked what packages the regular Java contributor Mr 
Zia use, and intentionally avoided repetition. Oh, Mr Zia used Java 
Regex in Task 1 and some usual packages for Task 2. Though not every 
programming language works with the TIMTOWTDI motto, for Task 1 we can 
have different approaches.
</div>

<div> Actually I am not familiar Java Regex yet. I divided the verification process into three parts:
<ol><li>Check the first 4 characters;</li><li>check the character in between regional calling codes and the latter codes is an empty space character;</li><li>finally check the last 10 characters are digits.</li></ol>
My Perl codes do with the same divisions, just have an additional taking
 care for the total length of the input line because I use <tt>substr($s, <i>negative number</i>)</tt>
 for the third checking, so the code would be unsure of the total length
 unless an additional check was inserted; and make some use of regular 
expression ^o^.
</div>

<p>Perl codes:</p>
<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">$s</font>;<br />
<b>while</b>&nbsp;(<font color="#0000ff">$s</font>&nbsp;=&nbsp;<b>&lt;STDIN&gt;</b>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">chomp</font>(<font color="#0000ff">$s</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(&nbsp;<font color="#007f00">length</font>&nbsp;<font color="#0000ff">$s</font>&nbsp;==&nbsp;<font color="#00007f">15</font>&nbsp;&amp;&amp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">substr</font>(<font color="#0000ff">$s</font>,&nbsp;4,&nbsp;<font color="#00007f">1</font>)&nbsp;<font color="#ffa500">eq</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>&nbsp;&amp;&amp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">substr</font>(<font color="#0000ff">$s</font>,&nbsp;<font color="#00007f">-11</font>)&nbsp;=~&nbsp;<font color="#ffa500">/</font><font color="#b03060">&nbsp;</font><font color="#007f00">\d</font><font color="#ff00ff">{10}</font><font color="#ffa500">/</font>&nbsp;&amp;&amp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<font color="#007f00">substr</font>(<font color="#0000ff">$s</font>,0,4)&nbsp;=~&nbsp;<font color="#ffa500">/</font><font color="#007f00">\d</font><font color="#ff00ff">{4}</font><font color="#ffa500">/</font>&nbsp;||<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">substr</font>(<font color="#0000ff">$s</font>,0,4)&nbsp;=~&nbsp;<font color="#ffa500">/</font><font color="#b03060">\+</font><font color="#007f00">\d</font><font color="#ff00ff">{2}</font><font color="#ffa500">/</font>&nbsp;||<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">substr</font>(<font color="#0000ff">$s</font>,0,4)&nbsp;=~&nbsp;<font color="#ffa500">/</font><font color="#b03060">\(</font><font color="#007f00">\d</font><font color="#ff00ff">{2}</font><font color="#b03060">\)</font><font color="#ffa500">/</font>)<br />
&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#0000ff">$s</font>,&nbsp;<font color="#ffa500">"</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
<br />
</tt></div>

Selection of Java codes:
<pre>if ( checkHead(num) &amp;&amp; checkMid(num) &amp;&amp;
     num.substring(5).trim().length() == 10 &amp;&amp; checkTail(num))
    System.out.println(num);

// blah blah blah

private static boolean isNumeric(char ch)
{
    if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') return true;
    else return false;
}

</pre>

<div>It is also worth mentioned that Java requires attention for exception
 handling whenever the file I/O package is being used. From my limited 
exploration, the exception handling feature is closely linked with 
object-oriented programming. Exception handling in Perl requires a Perl 
hacker with expertise to discuss.</div><div><br /></div>

<h4>Task 2: Transpose File </h4>

<div>After reading the task statement on Monday, immediately I thought 
of the Perl module for CSV file, hence I thought it would be a sincere 
task in Perl. From the search engine, it is recommended that the use of 
already-made external packages for CSV file in Java; but I thought it is
 okay to handle the special cases (for example, the delimitter comma is 
used in a field) by myself. </div>
<br /><br />
<div>Some CSV files were made from LibreOffice for testing:</div>

<pre><u>task2_str2.csv</u>
"""",",",char
ok,pdl,int
cu,uml,str</pre>

<pre><u>task2_str4.csv</u>
"""",okay,char
ok,pdl,int
cu,uml,str</pre>

<pre><u>task2_ex2.csv</u> (when the number of fields in each row is not the same)
name,age,sex
Mohammad,45,m,n
Joe,20,m
Julie,35,f
Cristina,10,f<br />
<font color="#FF6666"><u><i>Expected Output</i></u>
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
,n,,,</font>
</pre>

<div>For Java, I made use of <tt>ArrayList&lt;ArrayList&lt;String&gt;&gt;</tt>. Omitting the details here.</div>

<div>For Perl, <tt><a href="https://metacpan.org/pod/Text::CSV_XS">Text::CSV_XS</a></tt> did a good job. But I want quotation marks protecting the comma and handling cases like <tt>task2_ex2.csv</tt>, therefore a subroutine for printing is added:</div>

<br />

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">print_item</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$item</font>&nbsp;=&nbsp;<font color="#0000ff"><b>$_</b></font>[0];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$item</font>))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">\"</font><font color="#ffa500">"</font>&nbsp;<b>if</b>&nbsp;<font color="#0000ff">$item</font>&nbsp;&nbsp;=~&nbsp;<font color="#ffa500">/</font><font color="#b03060">,</font><font color="#ffa500">/</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#0000ff">$item</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">\"</font><font color="#ffa500">"</font>&nbsp;<b>if</b>&nbsp;<font color="#0000ff">$item</font>&nbsp;&nbsp;=~&nbsp;<font color="#ffa500">/</font><font color="#b03060">,</font><font color="#ffa500">/</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
<br />
</tt></div>

<div>Perl Script Output:
<pre><u># the example from task statement</u>
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f

<u># task2_str2.csv</u>
",ok,cu
",",pdl,uml
char,int,str

<u># task2_str4.csv</u>
",ok,cu
okay,pdl,uml
char,int,str

<u># task2_ex2.csv</u>
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
,n,,,
</pre>
</div>

<div>Differences from my Java compiled program for <tt><tt>task2_str2.csv </tt>, task2_str4.csv</tt>:</div>
<pre><u><br /># task2_str2.csv</u>
"""",ok,cu<br />",",pdl,uml<br />char,int,str
</pre><pre><u># task2_str4.csv</u>
"""",ok,cu
okay,pdl,uml
char,int,str<br /></pre>

<p><font color="red">Oooops... it seems that the <tt>""""</tt> for the output is better. See <a href="https://tools.ietf.org/html/rfc4180">RFC 4180</a> Section 2, point 7.</font> ...</p>
<hr>
<p>Stay alert and healthy! □</p>

<div><i>link for codes: 
<tt><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-110/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>
, <tt><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-110/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt>,
<a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-110/cheok-yin-fung/java/PhoneNumber.java">Java (Task 1)</a>, 
<a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-110/cheok-yin-fung/java/TransposeFile.java">Java (Task 2)</a></i></div>]]>
        
    </content>
</entry>
  <entry>
    <title>Part 5 video of pair programming a Perl web app</title>
    <link rel="alternate" href="https://dev.to/mjgardner/part-5-video-of-pair-programming-a-perl-web-app-2oja" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Gábor’s already <a href="https://perlmaven.com/course-management-app-in-mojolicious-5">posted today’s video</a>!</p>

<p><iframe width="710" height="399" src="https://www.youtube.com/embed/ooxYP38usgs">
</iframe>
</p>

<p>It’s really interesting to see our different development styles work together. Gábor’s all about trying things immediately and searching the entire web for answers, while I like to read the documentation and work out its writers’ intent.</p>

<p>I’m also embarrassed that we ended on a “cliffhanger” with an unresolved error, though Gábor posted that he managed to resolve it.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/part-5-video-of-pair-programming-a-perl-web-app-2oja</id>
    <published>2021-05-02T21:37:43Z</published>
    <updated>2021-05-02T21:37:43Z</updated>
    <category term="perl"/>
    <category term="webdev"/>
    <category term="meetup"/>
    <category term="mojolicious"/>
  </entry>
  <entry>
    <title>Installing wxPerl for Strawberry Perl v5.32.0, or: Future of wxPerl?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/john_ankarstrom/2021/05/wxperl.html"/>
    <id>tag:blogs.perl.org,2021:/users/john_ankarstrom//3750.10202</id>
    <published>2021-05-02T18:00:00Z</published>
    <updated>2021-05-02T17:57:57Z</updated>
    <author>
        <name>John Ankarström</name>
        <uri>http://john.ankarstrom.se/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/john_ankarstrom/">
        <![CDATA[<p>I've been wanting to explore the Wx GUI toolkit bindings for Perl, but I couldn't get it to install correctly on my 64-bit Windows 7 machine.</p>

<p>When I ran <tt>cpan Wx</tt>, it failed to install the dependency <tt>Alien::wxWidgets</tt>. There were some cryptic errors about <tt>CreateProcess</tt>, which is (basically) Windows' equivalent of fork(2). Presumably, some process started by the build script was having some problems, but there wasn't much in the error message to go on.</p>

<p>From Google, I found <a href="https://www.perlmonks.org/?node_id=1033184">an old reply</a> posted on PerlMonks by Mark Dootson, the maintainer of Wx and Alien::wxWidgets, where he recommended to make sure to correctly set the PATH before building it.</p>

<p>Technically, my PATH seemed fine &ndash; it had all the necessary Perl directories in it. Still, suspecting that the problems may be caused by some <em>other</em> directory in the PATH, I reduced it to its bare elements and then ran <tt>cpan</tt> again:</p>

<pre><code>C:\>set PATH=C:\Windows\system32;C:\Windows;C:\Perl\c\bin;C:\Perl\perl\site\bin;C:\Perl\perl\bin
C:\>cpan
cpan>install Alien::wxWidgets</code></pre>

<p>It worked! I suspect that some file in C:\Perl\c\bin (of which there are 113) was overridden by some other file in my PATH.</p>

<p>Now, onto the next problem: <a href="https://rt.cpan.org/Public/Bug/Display.html?id=129768">apparently</a> the Wx module itself doesn't compile successfully on recent (5.30+) versions of (Strawberry?) Perl. As I understand it, the problem is that a new <tt>calloc</tt> macro has been added to the Perl source. To fix this, you need to edit the source code of the file cpp/wxapi.h and simply add the following:</p>

<pre>#undef calloc</pre>

<p>You can start a subshell in the build directory by issuing <tt>cpan</tt> the command <tt>look Wx</tt>. After making the edit, you can build, test and install Wx by issuing the following commands:</p>

<pre>gmake test install</pre>

<p>All this should result in a successful wxPerl installation &ndash; problem solved.</p>

<p>Well, sort of. This has left me wondering why this simple patch hasn't been applied to the Wx module yet. The solution (<a href="https://rt.cpan.org/Public/Bug/Display.html?id=129768">linked here again</a>) was posted on the bug tracker for Wx in July of 2019. The last release of Wx was in April of 2017.</p>

<p>There doesn't seem to be any maintainers other than Mark Dootson. Perhaps he and wxPerl would be helped by somebody else getting involved.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Community Affairs Team Transparency Report Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-transparency-report-updates0"/>
  <id>tag:news.perlfoundation.org,2021-05-02:/post/cat-transparency-report-updates0</id>
  <published>2021-05-02T02:45:44</published>
  <updated>2021-05-02T02:45:44</updated>
  <summary>
  <![CDATA[
     The CAT would like to make some corrections, as well as address some of the comments and questions we received to the initial transparency report. The CAT plans to publish a separate statement in the coming days relating to general changes and improvements to the process. The subject of investigations #1 and #2, as referenced in the previous transparency report and below in this document, is the same and therefore 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The CAT would like to make some corrections, as well as address some of the comments and questions we received to the <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">initial transparency report</a>. The CAT plans to publish a separate statement in the coming days relating to general changes and improvements to the process.</p>

<p>The subject of investigations #1 and #2, as referenced in the previous transparency report and below in this document, is the same and therefore will be known as the Subject throughout this document. The other individual mentioned in the previous transparency report is not mentioned except under the Corrections section.</p>

<p>There have been questions and concerns raised by members of the community regarding TPF CAT’s process in handling the incidents in question and our authority to sanction someone in response. We believe that this is within our authority for several reasons.</p>

<p>First, while TPF has never published a “year round” Standards of Conduct document, all TPF conferences have had a Standards of Conduct document (or equivalent) since YAPC in 2012 (Madison). The exact content of that document has varied over the years, though it’s been in something close to its current form for quite a number of years. The Subject has attended many of these conferences, and has agreed to these Standards of Conduct in the past as a matter of attending.</p>

<p>Second, the investigations we conducted and the sanctions we imposed in response are based on reports of harmful behavior by the Subject in multiple forums across a number of years. A subset of these were investigated in detail and reported on as investigation #1 and #2. While there are other reports, the results of both investigations combined were enough to take action.</p>

<p>Third, while some of the most recent behavior did not occur at a TPF event or in a TPF-controlled online space, we believe that the purpose of the CAT is primarily to protect people from harm in the spaces we do control. If someone demonstrates through their behavior that they are overwhelmingly likely to cause harm to the community in our events and spaces, we believe it is within our authority to impose sanctions on them because of that behavior in order to prevent future harm.</p>

<p>However, we do have a significant correction we want to make to the previous report in regards to authority. The initial report stated: “The CAT has instructed the Subject to leave and cease participation...” and went on to mention various online spaces that TPF <em>does not</em> control. This was not intended to be an instruction to take technical measures, but a request for the Subject to cease participation, and was done to prevent any further harm from occurring. However, we recognize that this was poorly worded, and we never intended to assert any control over these spaces. We recognize that these spaces are operated independently by various communities and each community must decide for themselves how to manage their community. The initial report further stated the CAT “may: explicitly extend the scope of the ban, take further technical measures”. TPF recognizes that this is out of scope.</p>

<p>In addition, there are a number of other corrections and clarifications we would like to make.</p>

<h2>Corrections</h2>

<ol>
<li>The ban from attending TPF conferences, events, and using TPF online chat platforms (Slack) stands. However:
<ol>
<li>This is modified to a minimum duration of 1 year.</li>
<li>The length of the ban is modified because having a year round Standards of Conduct is new, as is the CAT. Given all this, we felt it was fairer to start with a more limited sanction.</li>
<li>For the ban to be lifted, the Subject must agree to not repeat their past unacceptable behavior and agree to abide by the Standards of Conduct going forward.</li>
<li>Unacceptable behavior within that 1 year period could lead to an extension or modification of the length or the terms of the ban. This includes interactions between the Subject and others in the Perl and Raku communities, even outside of TPF events and online platforms.</li>
<li>For examples of unacceptable behavior, please see the current <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Standards of Conduct for the 2021 Conference in the Cloud</a>.</li>
</ol></li>
<li>The initial transparency report stated that warning would be issued to the second individual investigated as part of “investigation #1”.
<ol>
<li>The CAT apologizes and recognizes that this individual should not have been mentioned in the transparency report.</li>
<li>After reconsideration, it was decided that the warning is not appropriate based on the evidence in “investigation #1” and therefore will not be issued.</li>
<li>The CAT had a conversation with the second individual to discuss this.</li>
</ol></li>
<li>The CAT acknowledges it should have delayed the publication of the transparency report to give the Subject more time to respond.
<ol>
<li>The Subject disagrees with the extent of CAT’s assertion that the events of investigation #1 and #2 are part of a pattern of bad behavior.</li>
<li>The Subject disagrees with the level of harm this pattern of bad behavior causes the community.</li>
<li>The Subject is willing to leave or step down from their responsibilities within various online spaces, communities, and subcommunities if asked by the leaders or committees responsible for those online spaces, communities, or subcommunities.</li>
<li>The Subject does not commit to leaving other online spaces, communities, or subcommunities, except those which they have since been banned from.</li>
<li>The Subject accepts the ban on attending TPF conferences and events.</li>
</ol></li>
</ol>

<h2>Clarifications and responses to specific questions</h2>

<p>The CAT would like to address a few of the questions and comments it received on the last transparency report:</p>

<ol>
<li>The CAT wants to be clear that the behavior from investigation #1 alone would not have resulted in the CAT’s decision.
<ol>
<li>The events of “investigation #1” and “investigation #2” were investigated as a pattern of behavior which extends beyond the events of either investigation.</li>
<li>The CAT found that there was a pattern of bad behavior.</li>
</ol></li>
<li>Regarding the event from “investigation #2”: whether the Subject willingly left or was given an ultimatum did not have any bearing on the CAT’s decision.</li>
<li>The community member who was harmed in investigation #1 is a different person than the community member harmed in investigation #2.</li>
<li>The second investigation was opened due to reports that there was a pattern of bad behavior. Aside from that, the investigations are not related.</li>
<li>Discriminatory statements need not be intended to attack nor directed at a specific person to cause harm.</li>
<li>As part of investigation #2, the CAT talked to multiple people who attended the event.</li>
<li>The CAT has subsequently provided a more detailed transparency report to the board of directors whilst respecting privacy of the subjects.
<ol>
<li>This more detailed version does not share the names of any parties of the investigations, but was deemed too detailed for public release.</li>
</ol></li>
</ol>

<h2>Conclusion</h2>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this public statement you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject.</p>

<p>If you want to report: discriminatory, harassing, or otherwise unacceptable behavior, please contact <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a>. For examples of what may constitute unacceptable behavior, please see the Standards of Conduct for this year’s <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Conference in the Cloud</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-05-01T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5844314466895359676</id>
    <published>2021-05-01T16:39:00.000+02:00</published>
    <updated>2021-05-01T16:39:05.016+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxix) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Beam-Wire-1.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Beam::Wire&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight Dependency Injection Container &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.024&lt;/strong&gt; on 2021-04-27&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.023 was 2 years, 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.072' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.072&lt;/strong&gt; on 2021-04-29&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.071 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.22 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.08&lt;/strong&gt; on 2021-04-27&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 6.07 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.023&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.022 was 11 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 2 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.17&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.16 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.22 was 4 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.03&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.02 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.044' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.044&lt;/strong&gt; on 2021-05-01&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.039 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RTKH/Raisin-0.91' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Raisin&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A REST API microframework for Perl. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.91&lt;/strong&gt; on 2021-04-28&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 0.90 was 10 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0949' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0949&lt;/strong&gt; on 2021-04-30&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0946 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5844314466895359676/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxxxix-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5844314466895359676"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5844314466895359676"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxxxix-12-great-cpan-modules-released.html" title="(cccxxxix) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3052151456011882087</id>
    <published>2021-05-01T16:34:00.000+02:00</published>
    <updated>2021-05-01T16:34:09.395+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxv) metacpan weekly report - List::Keywords</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 34&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/01 14:33:20 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Enum" target="_blank"&gt;Data::Enum&lt;/a&gt; - fast, immutable enumeration classes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DataTables" target="_blank"&gt;DataTables&lt;/a&gt; - a server-side solution for the jQuery DataTables plugin&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LWP::UserAgent::Throttled" target="_blank"&gt;LWP::UserAgent::Throttled&lt;/a&gt; - Throttle requests to a site&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Coverage::TrustMe" target="_blank"&gt;Pod::Coverage::TrustMe&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny::Strict" target="_blank"&gt;Template::Tiny::Strict&lt;/a&gt; - Template Toolkit reimplemented in as little code as possible&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Symlinks" target="_blank"&gt;Win32::Symlinks&lt;/a&gt; - A maintained, working implementation of Perl symlink built in features for Windows.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::MetaSyntactic::Themes" target="_blank"&gt;Acme::MetaSyntactic::Themes&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Avro" target="_blank"&gt;Avro&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Alias" target="_blank"&gt;Data::Alias&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Encode" target="_blank"&gt;Deep::Encode&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Emailesque" target="_blank"&gt;Emailesque&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future" target="_blank"&gt;Future&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mock::MonkeyPatch" target="_blank"&gt;Mock::MonkeyPatch&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::RecDescent" target="_blank"&gt;Parse::RecDescent&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pegex" target="_blank"&gt;Pegex&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=222)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POD2::Base" target="_blank"&gt;POD2::Base&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PSGI" target="_blank"&gt;PSGI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Script::Toolbox" target="_blank"&gt;Script::Toolbox&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny" target="_blank"&gt;Template::Tiny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=86)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3052151456011882087/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3052151456011882087"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3052151456011882087"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxv-metacpan-weekly-report.html" title="(cdlxv) metacpan weekly report - List::Keywords"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2265785990340966947</id>
    <published>2021-05-01T16:28:00.000+02:00</published>
    <updated>2021-05-01T16:28:04.665+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-05-01 14:26:11 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67250819" target="_blank"&gt;Is there a way to have dependencies defined by OS in a CPAN distribution?&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67319032" target="_blank"&gt;How can I quickly count the maximum number of consecutive single characters in a string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67292717" target="_blank"&gt;What does scalar mean in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67324732" target="_blank"&gt;Take Longitude/Latitude and get UTC Offset in Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67320002" target="_blank"&gt;Perl PAWS SelectObjectContent - "Precondition Failed"&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67248904" target="_blank"&gt;What means "Can't locate object method.." in this specific example using Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67264013" target="_blank"&gt;how to terminate a command that has started in a perl script, using 'system()'&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67327545" target="_blank"&gt;There are two files, pm and pl under one file. If you run the pl file, the pm package call is unsuccessful&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67309261" target="_blank"&gt;How to know when a PSGI nonblocking streaming writer is ready for more data in a PSGI compatible way?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67271710" target="_blank"&gt;Script correction for count positive values in text file&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2265785990340966947/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxxxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2265785990340966947"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2265785990340966947"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxxxviii-stackoverflow-perl-report.html" title="(cdlxxxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRAINBUZ/Acme-Brainbuz-markdown-0.001-TRIAL">Acme-Brainbuz-markdown</a></td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>0.001</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-BrowsingTableInteractively-0.001">Acme-CPANModules-BrowsingTableInteractively</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors-0.001">Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-0.01">Acme-Markdown-Embarrassing</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>Testing the MetaCPAN Markdown converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Alien-OpenMP-0.001">Alien-OpenMP</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>Encapsulate system info for OpenMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-ical-0.01">App-Greple-ical</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>Module to support Apple OS X Calendar data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/App-MigrateToTest2V0-0.01">App-MigrateToTest2V0</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Migrate your tests from Test::More to Test2::V0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/App-ProxyThat-0.001">App-ProxyThat</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.001</td>
<td>Proxy an URL from the command line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-SQLiteUtils-0.001">App-SQLiteUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-dateseq-idn-0.003">App-dateseq-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Like dateseq, but with built-in support for Indonesian holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/App-perlimports-0.000001">App-perlimports</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Make implicit imports explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayData-0.1.0">ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Specification for ArrayData::*, modules that contains array data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayDataRoles-Standard-0.001">ArrayDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Standard set of roles for ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Constellations-0.01">Astro-Coord-Constellations</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Identify the constellation for position (RA, Dec)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Precession-0.01">Astro-Coord-Precession</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Precess coordinates between 2 epochs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMICO/Beekeeper-0.01">Beekeeper</a></td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>0.01</td>
<td>Framework for building applications with a microservices architecture</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GROUSSE/BigIP-REST-0.1">BigIP-REST</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.1</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Book-Bilingual-v0.001">Book-Bilingual</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.001</td>
<td>Data structure for a bilingual book</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BOD/Business-Stripe-WebCheckout-0.1_1">Business-Stripe-WebCheckout</a></td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>0.1_1</td>
<td>Simple way to implement payments using Stripe hosted checkout</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBOOK/CGI-Tiny-0.001">CGI-Tiny</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>0.001</td>
<td>Common Gateway Interface, with no frills</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DJERIUS/CXC-Number-0.03">CXC-Number</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.03</td>
<td>A namespace for modules which deal with numbers.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OVID/CodeGen-Protection-0.01">CodeGen-Protection</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.01</td>
<td>Safely rewrite parts of generated code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-API-0.01">Crypto-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-API-0.01">Crypto-Exchange-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-0.01">Crypto-Exchange-Binance</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-Spot-API-0.01">Crypto-Exchange-Binance-Spot-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance Spot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Data-Enum-v0.1.0">Data-Enum</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>fast, immutable enumeration classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Lookup-0.002">Data-TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Object-0.112">Data-TableData-Object</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.112</td>
<td>Manipulate data structure via table object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Devel-GlobalSub-0.01">Devel-GlobalSub</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.01</td>
<td>Automagically import a subroutine into all namespaces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CCM/File-Codeowners-0.50">File-Codeowners</a></td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>0.50</td>
<td>Read and write CODEOWNERS files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/File-Edit-0.0.1">File-Edit</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.0.1</td>
<td>A naive, probably buggy, file editor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/File-SortedSeek-PERLANCAR-0.015.0">File-SortedSeek-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015.0</td>
<td>A fork of File::SortedSeek with some more options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SANKO/Finance-Alpaca-0.9900">Finance-Alpaca</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.9900</td>
<td>Perl Wrapper for Alpaca's Commission-free Stock Trading API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CHROMATIC/Finance-Dogechain-1.20210418.2306">Finance-Dogechain</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210418.2306</td>
<td>use the dogecoin.info API from Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDN/Fork-Utils-0.01">Fork-Utils</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>set of usefull methods to work with processes and signals</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Function-Version-0.0001">Function-Version</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.0001</td>
<td>Define and use different function versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FAYLAND/Google-UULE-Generator-0.01">Google-UULE-Generator</a></td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>0.01</td>
<td>Generate Google UULE param</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-ExtendedKeys-0.01">Hash-ExtendedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>Hash Keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-RestrictedKeys-0.01">Hash-RestrictedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>restricted hash keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VRAG/JSON-Pointer-Extend-0.01">JSON-Pointer-Extend</a></td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>0.01</td>
<td>JSON::Pointer extension module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/LINQ-Database-0.000_001">LINQ-Database</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.000_001</td>
<td>LINQ extension for working with databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Lagrange-0.1.3">Lagrange</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>Perl extension for Lagrange Theory and Applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-CPUInfo-0.001">Lib-CPUInfo</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to PyTorch's libcpuinfo C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-PWQuality-0.001">Lib-PWQuality</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to the libpwquality C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NATARAJ/Lingua-StarDict-Writer-0.01">Lingua-StarDict-Writer</a></td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>0.01</td>
<td>A module that allows to create a StarDict dictionary</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/Linux-MCELog-0.01">Linux-MCELog</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to extract memory failure information from MCELog UNIX domain socket on Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/List-AllUtils-Null-0.001">List-AllUtils-Null</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>List subroutines that treat undef as contagious unknown, like null in SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/List-Keywords-0.01">List-Keywords</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a selection of list utility keywords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RVOSA/MIDI-SP404sx-v1.0.0">MIDI-SP404sx</a></td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>v1.0.0</td>
<td>Convert between MIDI files and SP404sx patterns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DFUG/Minion-Backend-Redis-0.002">Minion-Backend-Redis</a></td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>0.002</td>
<td>Redis backend for Minion job queue</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojo-OBS-Client-0.01">Mojo-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>Mojolicious client for the OBS WebSocket remote plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARASIK/Mojo-Reactor-Prima-1.00">Mojo-Reactor-Prima</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1.00</td>
<td>Prima event loop backend for Mojo::Reactor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DERIV/Myriad-0.001">Myriad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>async microservice framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Net-Protocol-OBSRemote-0.01">Net-Protocol-OBSRemote</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>event-loop agnostic protocol to control OBS via the WebSocket plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABIGAIL/OEIS-2021041201">OEIS</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2021041201</td>
<td>Fetch values from sequences of the OEIS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOOJONIO/OpenAPI-Generator-0.01">OpenAPI-Generator</a></td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>0.01</td>
<td>generate openapi definition</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/OpenMP-Environment-1.0.0">OpenMP-Environment</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1.0.0</td>
<td>Perl extension managing OpenMP variables in %ENV within a script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLICEASE/Package-Checkpoint-0.01">Package-Checkpoint</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>Checkpoint the scalar, array and hash values in a package for later restoration</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Perl-Oberon-0.1.3">Perl-Oberon</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>an Oberon compiler system written in Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASDAGO/Perl-PrereqScanner-Scanner-DistZilla-PluginBundle-0.001">Perl-PrereqScanner-Scanner-DistZilla-PluginBundle</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>scan for required plugins in Dist::Zilla plugin bundles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LTM/Plack-App-WWW-0.01">Plack-App-WWW</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>Serve cgi-bin and static files from root directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HAARG/Pod-Coverage-TrustMe-0.001_001">Pod-Coverage-TrustMe</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001_001</td>
<td>Pod::Coverage but more powerful</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Collection-0.001">Role-TinyCommons-Collection</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Roles related to collections</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Iterator-0.001">Role-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>A basic iterator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KEEDI/SMS-Send-KR-Aligo-0.004">SMS-Send-KR-Aligo</a></td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>0.004</td>
<td>An SMS::Send driver for the smartsms.aligo.in SMS service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Finance-SE-IDX-0.001">Sah-Schemas-Finance-SE-IDX</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Schemas related to the Indonesian Stock Exchange</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/INA/See-0.01">See</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>Debug See</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Fermi-0.1.2">Stats-Fermi</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.2</td>
<td>Perl extension for Fermi, Boltzmann potentials</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Hawking-0.1.1">Stats-Hawking</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Perl extension for a Hawking Boltzmann Model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-0.05-TRIAL">Sub-Genius</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.05</td>
<td>manage concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-TRIAL-0.01">Sub-Genius-TRIAL</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.01</td>
<td>module for managing concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Match-0.01">Syntax-Keyword-Match</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a match/case syntax for perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/TOML-XS-0.01">TOML-XS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Parse TOML with XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-0.1.3">TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.3</td>
<td>Specification for TableData::*, modules that contains table data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableDataRoles-Standard-0.007">TableDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>Standard set of roles for TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-TickitWidget-0.001">Text-Table-TickitWidget</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>View table data on the terminal using Tickit::Widget::Table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Trek-20210424">Tree-Trek</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210424</td>
<td>Trek through a tree one character at a time.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Trim-20210401">Trim</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210401</td>
<td>Trim various things by removing leading and trailing whitespace.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/UniEvent-Socks-0.1.0">UniEvent-Socks</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>Socks support for UniEvent's tcp handles.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Unicode-Confuse-0.01">Unicode-Confuse</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Win32-Symlinks-0.03">Win32-Symlinks</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.03</td>
<td>A maintained, working implementation of Perl symlink built in features for Windows.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.01">XS-Parse-Keyword</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>XS functions to assist in parsing keyword syntax</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>50</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>16</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>49</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Brainbuz-markdown BRAINBUZ 0.001 turns baubles into trinkets Acme-CPANModules-BrowsingTableInteractively PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-Markdown-Embarrassing CONTRA 0.01 Testing the MetaCPAN Markdown converter Alien-OpenMP ETJ 0.001 Encapsulate system info for OpenMP App-Greple-ical UTASHIRO 0.01 Module to support Apple OS … <a href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1941</id>
    <published>2021-05-01T00:37:07Z</published>
    <updated>2021-05-01T00:37:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Live coding session with Gabor Szabo</title>
    <link href="http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html"/>
    <id>http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html</id>
    <updated>2021-04-29T20:06:52+00:00</updated>
    <category term="perl"/>
    <summary>Today I was invited to join Gabor Szabo for a live pair programming session, where we worked on adding Docker and CI to his course management application. You can view the video of our informal ...</summary>
    <content type="html">&lt;p&gt;Today I was invited to join &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt; for a &lt;a href="https://code-maven.com/setting-up-ci-and-docker-for-course-management-app"&gt;live pair programming session&lt;/a&gt;, where we worked on adding Docker and CI to his &lt;a href="https://github.com/szabgab/course-management"&gt;course management application&lt;/a&gt;. You can view the video of our informal competition who is the worst typist &lt;a href="https://www.youtube.com/watch?v=byugeGi1cNc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first I was bit skeptical about the concept of live coding (who wants to watch people google^w code for two hours?), but in the end it was a funny and informative (for me) session. Maybe I'm just totally deprived of live human interaction (thanks, Corona), but I think I'd enjoy similar sessions also under normal circumstances.&lt;/p&gt;

&lt;h4&gt;Things I learned&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I forgot a lot of docker command line options after mostly using docker-compose.&lt;/li&gt;
&lt;li&gt;There is no really smooth way to &lt;code&gt;COPY&lt;/code&gt; a lot of dirs into the container.&lt;/li&gt;
&lt;li&gt;Adding a &lt;code&gt;.dockerignore&lt;/code&gt; file (to ignore at least &lt;code&gt;~/.git/&lt;/code&gt;) saves some time and network, because docker will not send the ignored files to the docker daemon in the famous &lt;code&gt;sending build context to docker daemon&lt;/code&gt; step at the start of each build.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;/code&gt; exposes the ports listed in &lt;code&gt;EXPOSE&lt;/code&gt;, but maps them to random ports on the host (which makes no sense during dev, but probably when deploying to clouds)&lt;/li&gt;
&lt;li&gt;Some people prefer &lt;code&gt;-ti&lt;/code&gt;, some prefer &lt;code&gt;-it&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I'm a bit rusty on using the github pull request workflow (esp. the part where you have to fetch upgrades from upstream), due to mostly working on repos where several devs have direct write access.&lt;/li&gt;
&lt;li&gt;Setting up github CI is really not a lot of work (at least to only run the basic tests). Only &lt;a href="https://github.com/szabgab/course-management/commit/2bfb424f8e1b14481def0886a198f4715cff5f8a"&gt;16 lines of &lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt;. I will try to add this to my &lt;span class="caps"&gt;CPAN &lt;/span&gt;github repos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're interested in the Dockerfile aspect of this session, may I point you to my talk &lt;a href="/talks/writing_a_good_dockerfile_for_perl_app.html"&gt;Writing a good Dockerfile for a (Perl) app&lt;/a&gt; from the 2020 Perl Conference, where I elaborate on some of the finer points, and with better preparation than today :-)&lt;/p&gt;

&lt;p&gt;Oh, and this reminds me that I should submit a talk (maybe on docker-compose?) for &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;this years Perl &amp;amp; Raku conference&lt;/a&gt;. The CfP runs until tomorrow, so I better hurry.&lt;/p&gt;</content>
    <category term="docker"/>
    <category term="CI"/>
  </entry>
  <entry>
    <title>Downloading and Installing Perl in 2021</title>
    <link rel="alternate" href="https://perl.com/article/downloading-and-installing-perl-in-2021/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;[This article is part of our &lt;a href="https://github.com/tpf/perldotcom/projects/1"&gt;Popular articles&lt;/a&gt; project to update
Perl.com for contemporary practices]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re reading this article, you&amp;rsquo;re likely looking for a simple way
to download and install the Perl programming language. Or you already
have Perl installed as part of your operating system, but it&amp;rsquo;s older
than the currently-supported versions (5.32.1 or 5.30.3) and you&amp;rsquo;d
like to use the latest and greatest features. &lt;a href="https://www.perl.org/get.html"&gt;The download
options&lt;/a&gt; may seem daunting, especially
if you&amp;rsquo;re new to computers or programming. We&amp;rsquo;ll take things step by
step, and soon you&amp;rsquo;ll be on your way to writing your first Perl
program.&lt;/p&gt;

&lt;p&gt;A word of warning, though: Several of these steps (and usually Perl
itself) require using your computer&amp;rsquo;s command-line or terminal
interface.&lt;/p&gt;

&lt;h2 id="the-first-step-download-pre-built"&gt;The first step: Download pre-built&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re getting started in Perl development, you may only need a
pre-built binary distribution. Further on, though, you might want to
consider building your own, especially if you need to juggle different
versions to support different environments or want to use a later
version than is available pre-made.&lt;/p&gt;

&lt;p&gt;For now, though, let&amp;rsquo;s consider the pre-built options. You have
several, depending on what computer operating system you&amp;rsquo;re using.&lt;/p&gt;

&lt;h3 id="microsoft-windows"&gt;Microsoft Windows&lt;/h3&gt;

&lt;p&gt;The two main &amp;ldquo;flavors&amp;rdquo; of Perl for Windows are
&lt;a href="https://www.activestate.com/products/perl/"&gt;ActiveState Perl&lt;/a&gt; and
&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;. Which one you choose depends
on what you plan to use it for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveState&lt;/strong&gt; provides a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition of ActivePerl&lt;/a&gt;
licensed only for development purposes. If you intend to do
commercial work or want technical support beyond community forums, you&amp;rsquo;ll
need to
&lt;a href="https://www.activestate.com/solutions/pricing/"&gt;subscribe to a team plan or higher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The free community edition is also 64-bit only, and as of this writing, only
the earlier versions 5.28 (2018) and 5.26 (2017) are available, with an
experimental 5.32 (2020) release licensed for any purpose. The latter is
also currently only installable via the Windows command line; earlier
versions use a standard Windows setup wizard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;&lt;/strong&gt; is a Perl environment for
Windows that strives to be as close as possible to Perl on Unix and Linux
systems, where the language got its start. Besides the Perl binaries, it
also includes a compiler, related tools, external libraries, and database
clients. This is important as many modules for extending Perl&amp;rsquo;s
functionality need a compiler. It&amp;rsquo;s also available in both 64-bit and
32-bit editions of the current 5.32 version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do I recommend?&lt;/strong&gt; There&amp;rsquo;s no escaping Perl&amp;rsquo;s Unix heritage, so you&amp;rsquo;ll
have an easier time with Strawberry Perl. That said, if you think you&amp;rsquo;ll be
taking advantage of ActiveState&amp;rsquo;s commercial offerings of support and their
&lt;a href="https://www.activestate.com/products/platform/"&gt;ActiveState Platform&lt;/a&gt; for
managing different language runtimes, you may want to give them a try.&lt;/p&gt;

&lt;p&gt;Windows also has two Linux-like environments in the form of
&lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/"&gt;Windows Subsystem for Linux&lt;/a&gt;.
Follow the Linux directions below to install Perl in one of these.&lt;/p&gt;

&lt;p&gt;There is also the &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; package manager for
Windows, which provides an option for installing either ActiveState or
Strawberry Perl.&lt;/p&gt;

&lt;h3 id="apple-macos"&gt;Apple macOS&lt;/h3&gt;

&lt;p&gt;macOS comes with Perl pre-installed: version
5.18 (2013) on macOS Catalina 10.15 and 5.28 (2018) on Big Sur 11. But,
&lt;a href="https://developer.apple.com/documentation/macos-release-notes/macos-catalina-10_15-release-notes#Scripting-Language-Runtimes"&gt;Apple has said that scripting language runtimes are deprecated&lt;/a&gt;,
and are only &amp;ldquo;included &amp;hellip; for compatibility with legacy software.&amp;rdquo; You
should consider installing your own.&lt;/p&gt;

&lt;p&gt;Like Windows, ActiveState has a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition&lt;/a&gt;
for developers. The Windows caveats above apply, except for a current Perl
version 5.32—it&amp;rsquo;s &amp;ldquo;coming soon&amp;rdquo; as of this writing.&lt;/p&gt;

&lt;p&gt;Your best bet is to &lt;a href="https://brew.sh/"&gt;install the Homebrew package manager&lt;/a&gt;
in the macOS Terminal application (after
&lt;a href="https://docs.brew.sh/Installation#macos-requirements"&gt;installing its requirements&lt;/a&gt;),
and then issue the command &lt;code&gt;brew install perl&lt;/code&gt;. This will install the latest
version of Perl, as well as give you instructions for making sure that
installed Perl modules stay that way across updates by Homebrew.&lt;/p&gt;

&lt;h3 id="linux-or-another-unix-like-system"&gt;Linux or another Unix-like system&lt;/h3&gt;

&lt;p&gt;Like macOS, most Linux and Unix
systems come with Perl pre-installed, or installable using the operating
system&amp;rsquo;s software package manager. Also like macOS, these are usually older
versions provided for compatibility with other software provided by the
OS.&lt;/p&gt;

&lt;p&gt;To install your own on Linux, you can
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;go the ActiveState route&lt;/a&gt;
as above, or also use the
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux"&gt;Homebrew package manager&lt;/a&gt;. There are
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux#requirements"&gt;several requirements to install first&lt;/a&gt;,
and then you can
&lt;a href="https://brew.sh/"&gt;follow the directions for installing Homebrew&lt;/a&gt; and issue
the command &lt;code&gt;brew install perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For other Unix systems with an older version of Perl, I&amp;rsquo;m afraid you&amp;rsquo;re going
to have to build from source as detailed below.&lt;/p&gt;

&lt;h2 id="next-steps-building-your-own-with-perlbrew-or-plenv"&gt;Next steps: Building your own with perlbrew or plenv&lt;/h2&gt;

&lt;p&gt;Perl&amp;rsquo;s source code (the instructions that build a program) is freely
available and compiles on &lt;a href="https://perldoc.pl/perlport#PLATFORMS"&gt;over 100
platforms&lt;/a&gt;. You can &lt;a href="https://www.perl.org/get.html"&gt;download
it directly&lt;/a&gt; and build a version
yourself, after installing any prerequisite packages used to build
software on your operating system (see below). However, most Perl
developers choose to use a tool to automate that process and manage
different versions of Perl side-by-side. Enter
&lt;a href="https://perlbrew.pl/"&gt;perlbrew&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perlbrew requires an already-installed system version of Perl, but it
can be as old as 5.8 (2002), which should cover most Linux and Unix
systems in use today. Once you&amp;rsquo;ve installed your operating system&amp;rsquo;s
build tools and followed the directions on &lt;a href="https://perlbrew.pl/"&gt;the perlbrew home
page&lt;/a&gt;, typing &lt;code&gt;perlbrew install 5.32.1&lt;/code&gt; followed
by &lt;code&gt;perlbrew switch 5.32.1&lt;/code&gt; will install and switch to the latest
version of Perl as of this writing. Installing older versions of Perl
and switching between them use the same steps, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perlbrew install &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;.30.3 --as older-perl
perlbrew switch older-perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use an alternative, &lt;a href="https://github.com/tokuhirom/plenv"&gt;plenv&lt;/a&gt;,
which uses a different mechanism to manage versions of Perl using the &lt;code&gt;bash&lt;/code&gt;
command shell. It also enables you to use different versions of Perl depending
on which file system directory you&amp;rsquo;re working in. It&amp;rsquo;s
&lt;a href="https://github.com/tokuhirom/plenv/blob/master/README.md#installation"&gt;set up&lt;/a&gt;
using either Homebrew or &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Windows users have the option of
&lt;a href="https://github.com/stevieb9/berrybrew"&gt;berrybrew&lt;/a&gt;, which acts much like
perlbrew for Strawberry Perl with slightly different
&lt;a href="https://github.com/stevieb9/berrybrew#commands"&gt;options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="building-from-the-source-directly"&gt;Building from the source directly&lt;/h2&gt;

&lt;p&gt;If you feel you don&amp;rsquo;t need to manage multiple installations of Perl or you
want to do things old-school, you can always download and build directly from
the source code. Select &amp;ldquo;Download Latest Stable Source&amp;rdquo; from the
&lt;a href="https://www.perl.org/get.html"&gt;Perl Download&lt;/a&gt; web page, then
&lt;a href="https://opensource.com/article/17/7/how-unzip-targz-file"&gt;unarchive it&lt;/a&gt;
into a directory.&lt;/p&gt;

&lt;p&gt;You should always check the included &lt;code&gt;README&lt;/code&gt; files for information on how to
build on your system; there&amp;rsquo;s a generic one as well as specific &lt;code&gt;README&lt;/code&gt;s for
various platforms (&lt;code&gt;README.linux&lt;/code&gt;, &lt;code&gt;README.macosx&lt;/code&gt;, &lt;code&gt;README.win32&lt;/code&gt;, etc.).
Note that the &lt;code&gt;README.macosx&lt;/code&gt; document applies to current versions of macOS,
which was previously called Mac OS X; &lt;code&gt;README.macos&lt;/code&gt; is for the &amp;ldquo;Classic&amp;rdquo;
Macintosh operating system, unsupported since 2004.&lt;/p&gt;

&lt;p&gt;On most Unix-like systems (including macOS), you can then configure, build,
test, and install Perl by issuing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;./Configure -des -Dprefix&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/
make
make test
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will build Perl with all default options for your system and install it
in the &lt;code&gt;/usr/local&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id="up-and-running"&gt;Up and running&lt;/h2&gt;

&lt;p&gt;Regardless of whether you&amp;rsquo;ve chosen to install a pre-built package or roll
your own, you should now be able to issue the following at your command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perl -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip;and receive a reply that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is perl 5, version 32, subversion 1 (v5.32.1) built for darwin-2level
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2021, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, you&amp;rsquo;re now using the latest version of Perl on your computer!
Now head on over to &lt;a href="https://perl.org"&gt;Perl.org&lt;/a&gt; and start learning!&lt;/p&gt;
</content>
    <id>https://perl.com/article/downloading-and-installing-perl-in-2021/</id>
    <published>2021-04-27T04:05:40Z</published>
    <updated>2021-04-27T04:05:40Z</updated>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 4</title>
  <summary type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-26T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-4"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-4</id>
  <content type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Chowla Numbers and Numbers in Boxes: The Weekly Challenge 109</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/25#pwc109" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 20 Chowla Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant CHOWLA_COUNT =&gt; 20;
sub factor{
    my($n) = @_;
    my @factors = ();
    foreach my $j (2..sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }    
    return @factors;  
}

sub chowla{
    my(@factors) = @_;
    my $sum = unpack("%32I*", pack("I*", @factors)); 
}

MAIN:{
    my @chowla_numbers;
    for my $n (1 .. CHOWLA_COUNT){
        push @chowla_numbers, chowla(factor($n));
    }
    print join(", ", @chowla_numbers) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code borrowed quite a bit a previous challenge involving &lt;a href="https://adamcrussell.livejournal.com/2607.html"&gt;Perfect Numbers&lt;/a&gt;. Indeed, the code is nearly identical! After we get the factors there is only the matter of summing them and displaying them.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Place the given unique numbers in the square box so that sum of numbers in each box is the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given four squares as below with numbers named a,b,c,d,e,f,g.
# to place the given unique numbers in the square box so that sum of 
# numbers in each box is the same. 
#               (1)                    (3)
#        +--------------+      +--------------+
#        ?              ?      ?              ?
#        ?      a       ?      ?      e       ?
#        ?              ? (2)  ?              ?  (4)
#        ?          +---+------+---+      +---+---------+
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ? b ?      ? d ?      ? f ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        +----------+---+      +---+------+---+         ?
#                   ?       c      ?      ?      g      ?
#                   ?              ?      ?             ?
#                   ?              ?      ?             ?
#                   +--------------+      +-------------+
##
use AI::Prolog;

my $prolog = do{
    local $/;
    &lt;DATA&gt;;
}; 
$prolog = new AI::Prolog($prolog); 
$prolog-&gt;query("sums_in_squares([1,2,3,4,5,6,7], Squares).");

my $result;
print join("\t", "a" .. "g") . "\n";  
while ($result = $prolog-&gt;results()){
    print join("\t", @{$result-&gt;[2]}) . "\n";
}

__DATA__
member(X,[X|T]).
member(X,[H|T]):- member(X,T).
sums_in_squares(Numbers, [A, B, C, D, E, F, G]):-  
    member(A, Numbers), 
    member(B, Numbers),
    member(C, Numbers),
    member(D, Numbers),
    member(E, Numbers),
    member(F, Numbers),
    member(G, Numbers),
    A \= B, A \= C, A \= D, A \= E, A \= F, A \= G,
    B \= A, B \= C, B \= D, B \= E, B \= F, B \= G,
    C \= A, C \= B, C \= D, C \= E, C \= F, C \= G,
    D \= A, D \= B, D \= C, D \= E, D \= F, D \= G,
    E \= A, E \= B, E \= C, E \= D, E \= F, E \= G,
    F \= A, F \= B, F \= C, F \= D, F \= E, F \= G,
    G \= A, G \= B, G \= C, G \= D, G \= E, G \= F,
    Box1 is A + B,
    Box2 is B + C + D,
    Box3 is D + E + F,
    Box4 is F + G,
    Box1 == Box2,
    Box2 == Box3,
    Box3 == Box4.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
a       b       c       d       e       f       g
3       7       2       1       5       4       6
4       5       3       1       6       2       7
4       7       1       3       2       6       5
5       6       2       3       1       7       4
6       4       1       5       2       3       7
6       4       5       1       2       7       3
7       2       6       1       3       5       4
7       3       2       5       1       4       6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This sort of problem practically screams out for a Prolog solution! In the interest of keeping with the name, if not the spirit of the weekly challenge, this first part is indeed Perl, albeit using AI::Prolog, a module which offers a pure Perl implementation of a basic Prolog.&lt;/p&gt;
&lt;p&gt;I have used AI::Prolog &lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;previously&lt;/a&gt; and it’s a neat way to take advantage of Prolog within a Perl based solution. The two main downsides are that (1) it is not a full ISO Prolog and (2) it is slow. So very very slow. I suspect, in fact, there is a serious bug in the implementation. Even accounting for the fact that a pure Perl Prolog would be much slower than one written in C, such as Gnu Prolog, the execution time differences are laughably dramatic. I didn’t bother with precise metrics but the code above takes about an hour to run on fairly current hardware (i.e. my 2018 Mac Mini). Essentially the same code run on the same hardware but with Gnu Prolog completes in mere seconds.&lt;/p&gt;
&lt;p&gt;Still, this is a nice way to incorporate a bit of Symbolic AI in a Perl code base if there is a small search space. Say, for some simple game logic or a small chat bot.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/25"&gt;pure Prolog solution&lt;/a&gt; I did for this uses the same approach, in part, although I also wrote this to take advantage of Gnu Prolog’s FD solver. The FD version of the code completes in about 10ms!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109/"&gt;Challenge 109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Sarvadaman_Chowla"&gt;Sarvadaman D. S. Chowla&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/AI::Prolog"&gt;AI::Prolog&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc109</id>
    <published>2021-04-25T16:00:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8022544487213407871</id>
    <published>2021-04-24T21:15:00.000+02:00</published>
    <updated>2021-04-24T21:15:23.925+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxviii) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301002&lt;/strong&gt; on 2021-04-18&lt;/li&gt;  &lt;li&gt;Votes: 124&lt;/li&gt;  &lt;li&gt;Previous version: 0.301001 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2021-04-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.21 was 3 years, 4 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9721' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9721&lt;/strong&gt; on 2021-04-18&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9720 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/JavaScript-V8-0.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JavaScript::V8&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the V8 JavaScript engine &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.10&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.09 was 2 years, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/List-AllUtils-0.19' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;List::AllUtils&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Combines List::Util, List::SomeUtils and List::UtilsBy in one bite-sized package &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.19&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.18 was 7 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210420' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210420&lt;/strong&gt; on 2021-04-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210320 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/Module-ScanDeps-1.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::ScanDeps&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Recursively scan Perl code for dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.31&lt;/strong&gt; on 2021-04-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.30 was 3 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJATRIA/Mojolicious-Plugin-Authentication-1.36' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Authentication&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A plugin to make authentication a bit easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.36&lt;/strong&gt; on 2021-04-21&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.33 was 3 years before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.039' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.039&lt;/strong&gt; on 2021-04-24&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.037 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.78' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2021-04-24&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.76 was 4 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Perl-MinimumVersion-1.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::MinimumVersion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Find a minimum required version of perl for Perl code &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.40&lt;/strong&gt; on 2021-04-22&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 6 years, 8 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Pod-Weaver-4.017' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Weaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave together a Pod document from an outline &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.017&lt;/strong&gt; on 2021-04-17&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 4.015 was 4 years, 6 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.61&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.60 was 5 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0946' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0946&lt;/strong&gt; on 2021-04-23&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0942 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MANWAR/SVG-2.86' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SVG&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for generating Scalable Vector Graphics (SVG) documents. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.86&lt;/strong&gt; on 2021-04-22&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 2.85 was 9 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8022544487213407871/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxviii-15-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8022544487213407871"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8022544487213407871"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxviii-15-great-cpan-modules.html" title="(cccxxxviii) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5587204421157334982</id>
    <published>2021-04-24T21:11:00.005+02:00</published>
    <updated>2021-04-24T21:11:42.970+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxiv) metacpan weekly report - App::perlimports </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/App::perlimports"&gt;App::perlimports&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/24 19:10:30 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Monitor::CPU" target="_blank"&gt;AnyEvent::Monitor::CPU&lt;/a&gt; - monitors your process CPU usage, with high/low watermark triggers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Atomic::Pipe" target="_blank"&gt;Atomic::Pipe&lt;/a&gt; - Send atomic messages from multiple writers across a POSIX pipe.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; - Common Gateway Interface, with no frills&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CodeGen::Protection" target="_blank"&gt;CodeGen::Protection&lt;/a&gt; - Safely rewrite parts of generated code&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Version" target="_blank"&gt;Function::Version&lt;/a&gt; - Define and use different function versions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Slice" target="_blank"&gt;IO::Slice&lt;/a&gt; - restrict reads to a range in a file&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; - async microservice framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Application" target="_blank"&gt;Proc::Application&lt;/a&gt; - interface scoreboard class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Versions" target="_blank"&gt;Sub::Versions&lt;/a&gt; - Subroutine versioning syntactic sugar&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Valiant" target="_blank"&gt;Valiant&lt;/a&gt; - Validation Library&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::XML::DocBook::Builder" target="_blank"&gt;App::XML::DocBook::Builder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Assert::More" target="_blank"&gt;Carp::Assert::More&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=124)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Encode" target="_blank"&gt;Deep::Encode&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::PluginBundle::Starter" target="_blank"&gt;Dist::Zilla::PluginBundle::Starter&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Kingpin" target="_blank"&gt;Getopt::Kingpin&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/grpc::xs" target="_blank"&gt;grpc::xs&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Merge" target="_blank"&gt;Hash::Merge&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Untemplate" target="_blank"&gt;HTML::Untemplate&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::APT" target="_blank"&gt;Linux::APT&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=83)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteFork" target="_blank"&gt;Mojo::IOLoop::ReadWriteFork&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::mysql" target="_blank"&gt;Mojo::mysql&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mom" target="_blank"&gt;Mom&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace::autoclean::0.30" target="_blank"&gt;namespace::autoclean::0.30&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/NativeCall" target="_blank"&gt;NativeCall&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parser::MGC" target="_blank"&gt;Parser::MGC&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=373)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::CPUUsage" target="_blank"&gt;Proc::CPUUsage&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RapidApp" target="_blank"&gt;RapidApp&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/self" target="_blank"&gt;self&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Descriptive" target="_blank"&gt;Statistics::Descriptive&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SVG" target="_blank"&gt;SVG&lt;/a&gt; (+2=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::NoLeaks" target="_blank"&gt;Test::NoLeaks&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::LTSV" target="_blank"&gt;Text::LTSV&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/version" target="_blank"&gt;version&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5587204421157334982/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5587204421157334982"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5587204421157334982"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxiv-metacpan-weekly-report.html" title="(cdlxiv) metacpan weekly report - App::perlimports "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>March report of the Raku Development Grant of Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/jonathan-2021-03</id>
  <published>2021-04-19T15:21:34</published>
  <updated>2021-04-19T15:21:34</updated>
  <summary>
  <![CDATA[
     Jonathan writes: March didn't see me doing that many grant hours; I was keeping my keyboard time down for the first half of the month, and then had a lot to catch up on in the second half On the upside, the time that was spent was productive: I got some way into implementing more of Raku's multiple dispatch semantics in terms of the new dispatcher. I've written a blog 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan writes:
<hr></p>

<p>March didn't see me doing that many grant hours; I was keeping my keyboard time down for
the first half of the month, and then had a lot to catch up on in the second half (and
still needed to avoid putting in more than a usual working day). On the upside, the time
that was spent was productive: I got some way into implementing more of Raku's multiple
dispatch semantics in terms of the new dispatcher. I've written a <a href="https://6guts.wordpress.com/2021/04/15/raku-multiple-dispatch-with-the-new-moarvm-dispatcher/">blog post</a>
about that work (although some of the work it covers was done during April).</p>

<p><code>
Total time worked:: 7 hours 29 minutes
</code></p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Affairs Team Transparency Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/cat-transparency-repor-19-april-2021</id>
  <published>2021-04-19T13:39:03</published>
  <updated>2021-04-19T13:39:03</updated>
  <summary>
  <![CDATA[
     Following issues raised within the community, the CAT opened an investigation into community conduct. A second investigation was opened based on information discovered during the first investigation. What follows constitutes our second transparency report as well as an additional conclusion statement by the CAT. If you have not read it already, we highly recommend you read our latest Community Affairs Team Update. Investigation #1 Based on a recent public post 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Following issues raised within the community, the CAT opened an investigation into community conduct. A second investigation was opened based on information discovered during the first investigation.</p>

<p>What follows constitutes our second transparency report as well as an additional conclusion statement by the CAT. If you have not read it already, we highly recommend you read our latest <a href="https://news.perlfoundation.org/post/cat-update-19-april-2021">Community Affairs Team Update</a>.</p>

<h1>Investigation #1</h1>

<p>Based on a recent public post viewed by the CAT, the CAT investigated two individuals for potentially unacceptable behavior over IRC and Twitter. The investigation found that the first individual continued communication on multiple platforms despite being asked repeatedly to stop. Past behavior by the first individual was discovered during the course of the investigation. The CAT opened a separate investigation into this past behavior, and that investigation’s results are explained as part of “Investigation #2”.</p>

<p>Regarding the second individual investigated as part of “Investigation #1”, the CAT has decided to issue them a warning. The CAT is in contact with them and has scheduled a meeting with them to discuss this.</p>

<h1>Investigation #2</h1>

<p>Based on the previous investigation, the CAT investigated past behavior by the first individual. The CAT found that as an attendee of a 2019 Perl event, they had made repeated discriminatory statements and arguments in a conversation with the target, which was also overheard by other attendees. The individual continued arguing for this position despite being asked repeatedly to stop, the next day there were asked to leave the event.</p>

<p>They were instructed not to repeat the discriminatory statements and arguments. They were told an apology should not be made to the target of the harassment. Later, the individual repeated the discriminatory statements publicly on Twitter in discussions with other members of the community which were also viewed by the target. The target told the individual not to contact them ever again. Despite being asked explicitly not to contact them, the individual later contacted the target by email, which was an additional instance of unacceptable behavior.</p>

<h1>Consequences</h1>

<p>The CAT has informed the individual investigated as part investigation #1 and #2 that they are banned from attending any Perl Foundation conferences or events in perpetuity.</p>

<p>The CAT has instructed the individual to leave and cease participation on any public IRC channels on irc.perl.org, leave and cease participation on the Perl and Raku public channels on Freenode, unsubscribe and cease participation on any Perl and Raku community mailing lists including but not limited to the perl5-porters mailing list. The CAT has informed them to not contact the targets of their behavior from “Investigation #1” or “Investigation #2”. The CAT has informed them to not repeat the offending statements or arguments from “Investigation #2”. If the CAT decides the letter or the spirit of this decision has been violated, it may: explicitly extend the scope of the ban, take further technical measures to ensure compliance, or take other actions as it deems necessary.</p>

<h1>Other findings</h1>

<p>In addition to the findings of both investigations, the CAT wants to make it clear that separate and inclusive of the two reported investigations, it found many instances of communication which alone may not have constituted unacceptable behavior, but when taken together did constitute unacceptable behavior. The CAT asks all members of the Perl community to be respectful of others and that discriminatory or harassing conduct will not be tolerated.</p>

<h1>Conclusion</h1>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this public statement you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject. If you want to report: discriminatory, harassing, or otherwise unacceptable behavior, including evasion of CAT decisions, please contact <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a>. For examples of what may constitute unacceptable behavior, please see the Standards of Conduct for this year’s <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Conference in the Cloud</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Affairs Team Update April 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-update-19-april-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/cat-update-19-april-2021</id>
  <published>2021-04-19T13:33:50</published>
  <updated>2021-04-19T13:33:50</updated>
  <summary>
  <![CDATA[
     The CAT’s purpose is to foster a positive and safe environment for anyone who shares an interest in Perl and Raku. It has been one year since the Community Affairs Team was first announced in March of 2020. In June, the Perl Raku Conference in the Cloud took place. This was the first conference where Community Affairs Moderators were present to respond to and handle Standards of Conduct violations. Prior 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The CAT’s purpose is to foster a positive and safe environment for anyone who shares an interest in Perl and Raku. </p>

<p>It has been one year since the Community Affairs Team <a href="https://news.perlfoundation.org/post/introducing-tpf-community-affairs-team">was first announced</a> in March of 2020.  In June, the Perl &amp; Raku Conference in the Cloud took place. This was <a href="https://perlconference.us/tpc-2020-cloud/">the first conference</a> where Community Affairs Moderators were present to respond to and handle Standards of Conduct violations. Prior to the conference, Community Affairs Moderators and <a href="https://perlconference.us/tpc-2020-cloud/handling-standards-of-conduct-incidents/">the CAT committee for the event</a> received training on handling and responding to SoC complaints within the community. A month later in July, the Chair of the CAT <a href="https://news.perlfoundation.org/post/board-2020-07">was appointed by the TPF board</a>. In October, the <a href="https://news.perlfoundation.org/post/cic-2020-soc-transparency-report">first Standards of Conduct transparency report</a> was released.</p>

<p>Following that, the CAT has been working on a charter document which outlines in more concrete terms its role and responsibilities as it relates to the community, as well as an updated Standards of Conduct which would apply not just to conferences, but to other TPF online spaces. Recent events in the community have expedited the CAT’s work and the board’s approval of these documents, which are planned to be publicly released within the next week.</p>

<p>The CAT is also preparing for the upcoming <a href="https://perlconference.us/tprc-2021-cloud/">Perl &amp; Raku Conference in the Cloud</a>, and training similar that received in 2020 is planned for the moderators and CAT committee for this event. The CAT thanks the many people who provided their input to the formation of the CAT, and Samantha McVey, Stuart Mackintosh, and Ricardo Signes for continuing their work on the CAT committee as well as their work on the CAT committee during last year’s conference. </p>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this update you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): March 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_march_report"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/maintaining_perl_5_march_report</id>
  <published>2021-04-19T09:50:16</published>
  <updated>2021-04-19T09:50:16</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 29 tickets were reviewed, and 3 patches were applied  1.63 #18519 manually rebase and some clean up, make PR #18647  0.17 #18523 recheck and apply to blead  2.33 #18557 review, find several similar tickets, work on  adding a warning, create #18643  
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.
```
Approximately 29 tickets were reviewed, and 3 patches were
applied</p>

<p>[Hours]         [Activity]
  1.63          #18519 manually rebase and some clean up, make PR #18647
  0.17          #18523 recheck and apply to blead
  2.33          #18557 review, find several similar tickets, work on
                adding a warning, create #18643
  2.52          #18587 review discussion and changes, and review perlguts,
                comment
                #18587 review and comment
  0.22          #18589 review and apply to blead
  0.08          #18629 review and approve
  0.70          #18632 review makemeta, work on a fix
                #18632 more work on a fix, testing, make PR #18670
  1.12          #18634 review changes, review list discussion
  0.38          #18639 review and research, comment
  1.74          #18642 research and comment
                #18642 documentation fix, and look over magic handling for
                setsockopt and make PR 18660
                #18642 fix non-portable new test
  3.06          #18643 add each @{ anonarray } too, fixes, debugging
                #18643 add more tests, testing, force push
                #18643 update each() documentation too
  1.97          more autovivification, debugging, work out what’s wrong,
                tests and make PR #18650
                #18650 review, research and comment
  6.64          #18651 review ticket, work on a reproducer, debugging,
                research and comment
                #18651 debugging, try a fix and bounce off my_snprintf(),
                try a simpler solution, testing, add new test, debug test
                to ensure code works as expected, polish (need a bit more
                test debugging)
                #18651 more testing, code checks (some code handling q
                size flag or not)
                #18651 post PR with comment, comment on original ticket
  0.35          #18652 review and briefly comment
  0.35          #18656 comment
  0.68          #18658 recheck and apply to blead, perldelta update
  0.33          #18662 review and comment (request changes)
  0.45          #18663 request more information
                #18663 ask for more information again
  0.53          #18664 research and comment
  4.96          #18667 testing, reproduce, try bisect
                #18667 try bisect again on different hardware
                #18667 review commit found by bisect - it’s not the cause
                (fa353c3d2), debug some, the error feels like a stack-not-
                refcounted
                #18667 more debugging, trying to find code that might
                trigger stack-not-refcounted
  0.72          cage cleaning - review tickets, closing some, seeing which
                need work
  0.23          comment on Fix string leaks thread
  0.82          feature.[ch] on perl5-porters
  1.87          list catch up, also some cygwin testing for khw
  0.72          look at autovivication feature
  0.92          more list catch up
  0.58          review github notifications
  1.67          review list discussion
  1.02          review The current state of perl email and the following</p>

<h1>                discussion</h1>

<p>38.76 hours total
39.```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 3</title>
  <summary type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-19T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-3"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-3</id>
  <content type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Digital Ocean API using Perl</title>
  <summary type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></summary>
  <updated>2021-04-19T07:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/digital-ocean-api"/>  <id>https://perlmaven.com/digital-ocean-api</id>
  <content type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Memory Addresses and Bell Numbers: The Weekly Challenge 108</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/18#pwc108" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to declare a variable or constant and print it’s location in the memory.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Devel::Peek;
use Capture::Tiny q/capture_stderr/;
use constant A =&gt; "test";
my $a = 1;    
my $address;  
my $stderr = capture_stderr {
    Dump(A)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of constant A: $address\n"; 
$stderr = capture_stderr {
    Dump($a)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of \$a: $address\n";
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Address of constant A: 0xfd31ae90
Address of $a: 0xfdb2f770
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a somewhat unusual challenge for Perl. Sometimes these challenges allow for a certain amount of interpretation. For example, under the hood, the representation of Perl data in memory involves more complicated data structures. I think it is in the spirit of this challenge to demonstrate access to this, without necessarily implementing complete and fully generalized solution.&lt;/p&gt;
&lt;p&gt;Here I use &lt;code&gt;Devel::Peek&lt;/code&gt; in order to get a report on the underlying memory usage of the given variables. The &lt;code&gt;Dump&lt;/code&gt; function only prints a memory report to STDERR, so in order to obtain the information we seek &lt;code&gt;Capture::Tiny&lt;/code&gt; is used to encapsulate the STDERR output and save it to a variable. A regex is then used to pull out the memory address which is then printed.&lt;/p&gt;
&lt;p&gt;The memory address printed here is the &lt;em&gt;reference address&lt;/em&gt;. For additional details on Perl’s core see the perlguts documentation.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 10 Bell Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub bell_triangle{
    my($n) = @_; 
    my @bell_numbers = ([]);
    $bell_numbers[0]-&gt;[0] = 1;
    for (my $i=1; $i&lt;=$n; $i++) {
      $bell_numbers[$i]-&gt;[0] = $bell_numbers[$i-1]-&gt;[$i-1];
      for (my $j=1; $j&lt;=$i; $j++){  
          $bell_numbers[$i]-&gt;[$j] = $bell_numbers[$i-1]-&gt;[$j-1] + $bell_numbers[$i]-&gt;[$j-1];
       }
   }
   return $bell_numbers[$n]-&gt;[0];
}

MINA:{
    for my $b (0 .. 9){  
        print "B_$b: " . bell_triangle($b) . "\n";  
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
B_0: 1
B_1: 1
B_2: 2
B_3: 5
B_4: 15
B_5: 52
B_6: 203
B_7: 877
B_8: 4140
B_9: 21147
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is an interesting problem. At first glance one might be tempted to proceed and compute the partitions and then take the total number of them all. Instead, it turns out that there is a simpler closed form solution whereby we can compute the &lt;em&gt;Bell Triangle&lt;/em&gt; and then take the values on the leftmost diagonal to be the &lt;em&gt;Bell Numbers&lt;/em&gt; as required.&lt;/p&gt;
&lt;p&gt;For fun the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/18"&gt;Prolog solution&lt;/a&gt; does indeed compute the partitions instead of simply using the Bell Triangle!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/"&gt;Challenge 108&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlguts"&gt;perlguts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_number"&gt;Bell Numbers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_triangle"&gt;Bell Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc108</id>
    <published>2021-04-18T15:55:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Static Analysis and Self Describing Numbers (now with Threads!): The Weekly Challenge 107</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/11#pwc107" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to generate self-descriptive numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Thread; 
use boolean;
use constant SDN_COUNT =&gt; 3;
use constant THREAD_COUNT =&gt; 4;
use constant RANGE_SIZE =&gt; 10_000;

sub self_describing{
    my($i) = @_;
    my @digits = split(//, $i);
    for my $x (0 .. @digits - 1){
        my $count = 0;
        for my $j (0 .. @digits - 1){
            $count++ if($digits[$j] == $x);
            return false if($count &gt; $digits[$x]);
        }
        return false if($count != $digits[$x]);
    }
    return true;
}

sub self_describing_number{
    my($start, $end) = @_;  
    my @r = (); 
    for(my $i = $start; $i &lt; $end; $i++){
        push @r, [length($i), $i] if(self_describing($i));  
    }   
    return \@r;  
}

MAIN:{
    my @threads; 
    my $count = 0; 
    my $lower = 1; 
    my $upper = RANGE_SIZE; 
    do{
        for(0..(THREAD_COUNT - 1)){  
            my $t = Thread-&gt;new(\&amp;self_describing_number, ($lower, $upper));
            push @threads, $t;  
            $lower = $upper + 1;  
            $upper = $lower +  RANGE_SIZE;  
        }  
        foreach my $t (@threads){  
            my $sdns = $t-&gt;join();                 
            foreach my $sdn (@{$sdns}){ 
                print "Base " . $sdn-&gt;[0] . ":" .  $sdn-&gt;[1] . "\n" if $count &lt; SDN_COUNT; 
                $count++;  
            }  
        }   
        @threads = ();   
    } while($count &lt; SDN_COUNT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Base 4:1210
Base 4:2020 
Base 5:21200
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 1 this week is repeated from Challenge 043. In order to provide something fresh for the same problem I modified the previous code to be multi-threaded.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to list methods of a package/class.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub analyze{
    my($file) = @_;
    my @subs;
    my @uses; 
    my @subroutines;
    my $subs = `perlanalyst $file --analysis Sub`;
    $subs =~ s/$file://;
    @subs = split(/\n/, $subs);   
    my $uses = `perlanalyst $file --analysis Use`;
    $uses =~ s/$file://;
    @uses = split(/\n/, $uses);   
    for my $s (@subs){
        $s =~ s/\s+//;
        my @fields = split(/:/, $s); 
        push @subroutines, $fields[1] if(length($s) &gt; 0); 
    }
    push @subroutines, "BEGIN" if(@uses); 
    return @subroutines; 
}

MAIN:{
    my $FILE = $ARGV[0];
    my @subroutines = analyze($FILE);
    print join("\n", sort {$a cmp $b} @subroutines) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl perl/Calc.pm 
BEGIN
DESTROY
add
div
mul
new
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Getting a list of methods can &lt;em&gt;mostly&lt;/em&gt; be done via just some plain analysis of the code. Rather than re-invent the wheel I am using a module, Perl::Analysis::Static, to do that for me. This is a pretty neat tool but has been left in an alpha state. The most stable way to use it is via the command line instead of its incomplete API. In this code I call the &lt;code&gt;perlanalyst&lt;/code&gt; command and then parse the output.&lt;/p&gt;
&lt;p&gt;If given a &lt;code&gt;BEGIN&lt;/code&gt; block or if &lt;code&gt;use&lt;/code&gt;-ing a module Perl will execute a &lt;code&gt;BEGIN&lt;/code&gt; at compile time. &lt;em&gt;I would argue that this is out of scope for this challenge.&lt;/em&gt; However, as given in the problem statement we are expected to catch this it seems. I do this by inspecting the &lt;code&gt;perlanalyst&lt;/code&gt; output for &lt;code&gt;use&lt;/code&gt; lines. I could have done a few other things as well but decided not to do more with this since it seems like a funny requirement anyway!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107/"&gt;Challenge 107&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;Challenge 043&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/release/GGOLDBACH/Perl-Analysis-Static-0.003-TRIAL/lib/Perl/Analysis/Static.pm"&gt;Perl::Analysis::Static&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc107</id>
    <published>2021-04-11T17:51:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
