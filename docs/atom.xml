<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-12-04T21:55:50Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Hello World</title>
    <link rel="alternate" href="https://dev.to/anjan50/hello-world-3c9k" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbtVBidX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ww6pm6bzod6wsg5b7fws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbtVBidX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ww6pm6bzod6wsg5b7fws.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A big syntax comparison is here, same word from different languages may help you to select your desired programming languages🧠💻💡&lt;/p&gt;

</content>
    <author>
      <name>Anjan Diyora</name>
    </author>
    <id>https://dev.to/anjan50/hello-world-3c9k</id>
    <published>2020-12-04T16:06:42Z</published>
    <updated>2020-12-04T16:06:42Z</updated>
    <category term="python"/>
    <category term="javascript"/>
    <category term="java"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Advent of Code Day 4 - validating regex</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_04.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_04.html</id>
    <updated>2020-12-04T13:13:09+00:00</updated>
    <category term="perl"/>
    <summary>Todays task (esp part 2) was the task the most resembles my daily work... Part 1 For parsing the input I decided to also go the string/regex way. I concatenate the whole input into on long string, ...</summary>
    <content type="html">&lt;p&gt;Todays task (esp part 2) was the task the most resembles my daily work...&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;For parsing the input I decided to also go the string/regex way. I concatenate the whole input into on long string, replace an empty line (i.e. two newlines) with a record seperator (&lt;code&gt;|&lt;/code&gt;, pipe), replace all remaning spaces and newlines (&lt;code&gt;\s&lt;/code&gt;) with a field seperator (&lt;code&gt;;&lt;/code&gt;), and then split the long string into an array on the record seperator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $in = join('',&amp;lt;STDIN&amp;gt;);
$in =~ s/\n\n/SEP/gm;
$in =~ s/\s/;/g;
my @d = split(/SEP/,$in);

my $valid;
for my $l (@d) {
    my %p = map { split /:/ } split( /;/, $l);
    $valid++ if (keys %p  8 || (keys %p  7 &amp;amp;&amp;amp; !$p{cid}));
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can convert each line (&lt;code&gt;eyr:2039;hcl:#cfa07d;hgt:171cm&lt;/code&gt;) into an hash, by first splitting on the field seperator and then on the key/value seperator (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then we only need to check if the hash has either 8 keys, or 7 keys, none of which shall be &lt;code&gt;cid&lt;/code&gt;;&lt;/p&gt;


&lt;p&gt;Now that I'm writing this I realized that I could choose &lt;code&gt;:&lt;/code&gt; as the field seperator, and thus do not need the two splits when converting a line to the hash, again using one of the slightly confusing features of Perl that is actually very powerful. You can assign a list to either an array or an hash, and if you do the latter, Perl will use one value for the key and the other for the value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %hash = ( &amp;quot;a&amp;quot;, &amp;quot;apple&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;banana&amp;quot; );  # { a =&amp;gt; 'apple', b =&amp;gt; 'banana' }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we don't need to first split into fields and then into key/value, we can do this in one go by replacing this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %p = map { split /:/ } split( /;/, $l);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %p = split( /:/, $l);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which leads to bit more light golfing and:&lt;/p&gt;

&lt;h4&gt;Part 1 - No spaces&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$_=join('',&amp;lt;STDIN&amp;gt;);s/\n\n/|/gm;s/\s/:/g;for(split/\|/){my%p=split/:/;$a++if(keys%p==8||(keys%p==7&amp;amp;&amp;amp;!$p{cid}))}say$a&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not as good as &lt;span class="caps"&gt;APL, &lt;/span&gt;but we're getting there :-)&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Now we just have to implement a few more validators, which translate very straight forward from the spec to some regex and value checks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $in = join('',&amp;lt;STDIN&amp;gt;);
$in =~ s/\n\n/SEP/gm;
$in =~ s/\s/;/g;
my @d = split(/SEP/,$in);

my $valid = 0;
for my $l (@d) {
    my %p = map { split /:/ } split( /;/, $l);
    next unless (keys %p  8 || (keys %p  7 &amp;amp;&amp;amp; !$p{cid}));
    next unless $p{byr} =~ /^\d{4}$/ &amp;amp;&amp;amp; $p{byr} &amp;gt;= 1920 &amp;amp;&amp;amp; $p{byr} &amp;lt;= 2002;
    next unless $p{iyr} =~ /^\d{4}$/ &amp;amp;&amp;amp; $p{iyr} &amp;gt;= 2010 &amp;amp;&amp;amp; $p{iyr} &amp;lt;= 2020;
    next unless $p{eyr} =~ /^\d{4}$/ &amp;amp;&amp;amp; $p{eyr} &amp;gt;= 2020 &amp;amp;&amp;amp; $p{eyr} &amp;lt;= 2030;
    next unless $p{hcl} =~ /^#[0-9a-f]{6}$/;
    next unless $p{ecl} =~ /^(amb|blu|brn|gry|grn|hzl|oth)$/;
    next unless $p{pid} =~ /^\d{9}$/;
    if ($p{hgt} =~ /^(\d\d\d)cm$/) {
        next unless $1 &amp;gt;= 150 &amp;amp;&amp;amp; $1 &amp;lt;= 193;
    }
    elsif ($p{hgt} =~ /^(\d\d)in$/) {
        next unless $1 &amp;gt;= 59 &amp;amp;&amp;amp; $1 &amp;lt;= 76;
    }
    else {
        next;
    }

    $valid++;
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One small "trick" was to test for height last, so we don't have to check for other invalid heights. I lost a few minutes here because I wrote two if-blocks (for centimeter and inches), which discard all valid passports. After using the valid example data and some debugging (see &lt;a href="https://github.com/domm/adventofcode2020/blob/d8cfee7345b5c73f1f5a0adabca990fdc8c766fc/04_2.pl"&gt;this commit&lt;/a&gt;) I found my error and submitted a valid result.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;First 4 digit rank (for second task)!&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 10:55 / 09:27&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11732 / 7688&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/4"&gt;https://adventofcode.com/2020/day/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Japhs autopsies (2)</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/japhs-autopsies-2-41jl" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#con-de-mime" class="anchor"&gt;
  &lt;/a&gt;
  Con de MIME
&lt;/h2&gt;

&lt;p&gt;This is a french joke 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5EiuE3mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzxl2wrlekteq65y8ky3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5EiuE3mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzxl2wrlekteq65y8ky3.gif" alt="Barrez vous, cons de MIMES"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Japh is from &lt;strong&gt;Reynold Scem&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MIME::&lt;/span&gt;&lt;span class="nv"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;decode_base64&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ==&lt;/span&gt;&lt;span class="p"&gt;'))&lt;/span&gt;&lt;span class="o"&gt;=~&lt;/span&gt;&lt;span class="sr"&gt;/.*/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="vg"&gt;$&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This one... We can't guess what will happen when we eval this encoded string...&lt;/p&gt;

&lt;p&gt;It uses actually 2 steps to produce the Japh, first &lt;strong&gt;base64 encoding&lt;/strong&gt;, that we can check with &lt;code&gt;base64 -d&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ=="&lt;/span&gt; | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;map&lt;span class="o"&gt;{&lt;/span&gt;chr&lt;span class="o"&gt;()}(&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt;/&lt;span class="se"&gt;\S&lt;/span&gt;/,split&lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;/,&lt;span class="s1"&gt;'074117115116032097110111116104101114032080101114108032104097099107101114044'&lt;/span&gt;&lt;span class="o"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From decoding I got the actual Perl code to evaluate and I feel a bit better now 😁&lt;/p&gt;

&lt;p&gt;The code Japh string creation code looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('',&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt;&lt;span class="sr"&gt;/\S/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(...)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;074117115116032097110111116104101114032080101114108032104097099107101114044&lt;/span&gt;&lt;span class="p"&gt;'))))&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then in the perl code there is &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;chr&lt;/code&gt; (convert value to char), &lt;code&gt;grep \S&lt;/code&gt; (match all non whitespace), &lt;code&gt;split(/(...)/,&lt;/code&gt; (split per 3 chars).&lt;/p&gt;

&lt;p&gt;It's a nice showcase 😃 even if a lot of things are actually useless and only there to obfuscate the Perl code.&lt;/p&gt;

&lt;p&gt;The Japh creation could be simply reduced to :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('',&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(...)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;074117115116032097110111116104101114032080101114108032104097099107101114044&lt;/span&gt;&lt;span class="p"&gt;')));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;join&lt;/code&gt; seems useless but forces the &lt;strong&gt;string context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So here is the complete Japh unfolded :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MIME::&lt;/span&gt;&lt;span class="nv"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Base 64 encoding&lt;/span&gt;
&lt;span class="c1"&gt;# am9pbignJywobWFwe2NocigpfShncmVwL1xTLyxzcGxpdCgvKC4uLikvLCcwNzQxMTcxMTUxMTYwMzIwOTcxMTAxMTExMTYxMDQxMDExMTQwMzIwODAxMDExMTQxMDgwMzIxMDQwOTcwOTkxMDcxMDExMTQwNDQnKSkpKQ==&lt;/span&gt;
&lt;span class="c1"&gt;# join('',(map{chr()}(grep/\S/,split(/(...)/,'074117115116032097110111116104101114032080101114108032104097099107101114044'))))&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('',&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt;&lt;span class="sr"&gt;/\S/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(...)/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;074117115116032097110111116104101114032080101114108032104097099107101114044&lt;/span&gt;&lt;span class="p"&gt;'))))&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;# Take 3 chars (...), do not keep space (\S), tranform to corresponding string representation, concat without space, eval (useless)&lt;/span&gt;

&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/.*/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# Match everything&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="vg"&gt;$&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# The string matched by the last successful pattern match&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Maybe you noticed that there is also some fun with regex match and captured match print. It is just for fun ! 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-format-write" class="anchor"&gt;
  &lt;/a&gt;
  Open Format Write
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,"&lt;/span&gt;&lt;span class="s2"&gt;|perl&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;format=&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Just another Perl hacker,&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;write&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After some ordering, it looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;P&lt;/span&gt;&lt;span class="p"&gt;,"&lt;/span&gt;&lt;span class="s2"&gt;|perl&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;P&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;
format=
Just another Perl hacker,
.
write&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are 2 tricks here :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The open filehandle to another perl process&lt;/li&gt;
&lt;li&gt;The "format", an old Perl function that is less and less used nowadays &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is actually the same than :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;Just&lt;/span&gt; &lt;span class="nv"&gt;another&lt;/span&gt; &lt;span class="nv"&gt;Perl&lt;/span&gt; &lt;span class="nv"&gt;hacker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;write&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kisses" class="anchor"&gt;
  &lt;/a&gt;
  Kisses
&lt;/h2&gt;

&lt;p&gt;Here is a simple but interesting japh with some kisses inside ! 😘 😘 😘 😘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Just another Perl hacker,&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(.*) (.*) (.*) (.*)/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9EjVF2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/82r897owzb3e1gdr6045.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9EjVF2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/82r897owzb3e1gdr6045.jpeg" alt="Kisses"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This japh demonstrates default variable &lt;code&gt;@_&lt;/code&gt; and matching.&lt;/p&gt;

&lt;p&gt;I think it can be rewritten like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Just another Perl hacker,&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/(.*) (.*) (.*) (.*)/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Perl developers should be comfortable with this form 😄&lt;/p&gt;

&lt;p&gt;It's probably time to address &lt;em&gt;regex greediness&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This kind of greedy &lt;code&gt;.*&lt;/code&gt; matches is "dangerous" (depends what you want), because it will try to match as much as possible.&lt;/p&gt;

&lt;p&gt;For instance &lt;code&gt;"Just another Perl 7 hacker,"&lt;/code&gt; with the greedy version will produce a string split like the following : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Just another&lt;/code&gt; &lt;code&gt;Perl&lt;/code&gt; &lt;code&gt;7&lt;/code&gt; &lt;code&gt;hacker,&lt;/code&gt; (because the &lt;code&gt;.*&lt;/code&gt; happily eats also the space)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#x25" class="anchor"&gt;
  &lt;/a&gt;
  x25
&lt;/h2&gt;

&lt;p&gt;Let's have a look at a simple japh using &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; and ASCII conversion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The operator &lt;code&gt;x&lt;/code&gt; is magic :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;perl &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Will produce :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="nv"&gt;perl&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the japh, the &lt;code&gt;x 25&lt;/code&gt; is applied to &lt;code&gt;"%c"&lt;/code&gt;, therefore it can be translated like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;117&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;104&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;114&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrow-here" class="anchor"&gt;
  &lt;/a&gt;
  Arrow here
&lt;/h2&gt;

&lt;p&gt;Again a &lt;code&gt;printf "%c"&lt;/code&gt; but this time the input being in hexadecimal and the whole thing being stored in a string assignment :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-- &lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt; &lt;span class="sr"&gt;s/../printf "%c",hex($&amp;amp;)/g&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nv"&gt;a75737420616e6f74686572205065726c206861636b65722c&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It starts with a &lt;a href="https://perldoc.perl.org/perlop#%3C%3CEOF"&gt;"here-doc"&lt;/a&gt; delimited by &lt;code&gt;--&lt;/code&gt; (dash + dash + space not represented by DevTo).&lt;/p&gt;

&lt;p&gt;What is weird, is that the whole thing looks only like a string assignation...&lt;/p&gt;

&lt;p&gt;Actually, the &lt;code&gt;printf&lt;/code&gt; inside the regex will print to stdout. At the end &lt;code&gt;$_&lt;/code&gt; does not even contains the string, but &lt;code&gt;sprintf&lt;/code&gt; would have done the job.&lt;/p&gt;

&lt;p&gt;And what is exactly &lt;code&gt;s/../printf "%c",hex($&amp;amp;)/ge&lt;/code&gt; ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;s///&lt;/code&gt; is for substitution.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&amp;amp;&lt;/code&gt; is what have been &lt;a href="(https://perldoc.perl.org/perlvar#%24&amp;amp;)"&gt;matched&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/e&lt;/code&gt; modifier allows the right part of the substitution to be actually executed as normal Perl code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;/g&lt;/code&gt; modifier is the "looping modifier" or "global modifier" and just repeats the match along the string !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, I propose this rewrite of the japh :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4a75737420616e6f74686572205065726c206861636b65722c&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/../g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# Or $str =~ s/..//&lt;/span&gt;
       &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;%c&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cristal clear like this isn't it ?&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/japhs-autopsies-2-41jl</id>
    <published>2020-12-04T11:27:22Z</published>
    <updated>2020-12-04T11:27:22Z</updated>
    <category term="japh"/>
    <category term="perl"/>
    <category term="obfuscation"/>
  </entry>
  <entry>
    <title>Gitlab umziehen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-04-gitlab-umziehen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In verschiedenen Projekten setzen wir ein jeweils selbst gehostetes Gitlab ein. Gitlab bietet viel mehr als nur die Versionskontrolle. Gregor hat vor einiger Zeit schon einmal etwas dazu geschrieben, wie wir bei Perl-Services.de Gitlab benutzen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-04-gitlab-umziehen</id>
    <published>2020-12-04T10:00:00Z</published>
    <updated>2020-12-04T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2020/12/04/list-of-new-cpan-distributions-nov-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ColorThemed-0.002">Acme-CPANModules-ColorThemed</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that has color theme support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Getopt-0.002">Acme-CPANModules-Getopt</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that parse command-line options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ModulesThatJustContainData-0.001">Acme-CPANModules-ModulesThatJustContainData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that just contain data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Acme-Marvel-CinematicUniverse-Characters-0.001">Acme-Marvel-CinematicUniverse-Characters</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>example of distributing instance data on CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMOYAMA/Acme-TOMOYAMA-Utils-0.01">Acme-TOMOYAMA-Utils</a></td>
<td><a href="https://metacpan.org/author/TOMOYAMA">TOMOYAMA</a></td>
<td>0.01</td>
<td>The great new Acme::TOMOYAMA::Utils!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Algorithm-Diff-JSON-1.000">Algorithm-Diff-JSON</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>find the differences between two lists and report on them in JSON</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libavro_c-0.01">Alien-libavro_c</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libavro_c, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libgraphqlparser-0.01">Alien-libgraphqlparser</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libgraphqlparser, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libjansson-0.01">Alien-libjansson</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libjansson, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libmariadbclient-0.01">Alien-libmariadbclient</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libmariadbclient, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-librdkafka-0.01">Alien-librdkafka</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>librdkafka, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libsnappy-0.01">Alien-libsnappy</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.01</td>
<td>libsnappy, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HUGMEIR/Alien-libzookeeper-0.02">Alien-libzookeeper</a></td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>0.02</td>
<td>libzookeeper, with alien</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/Amazon-SNS-V4-1.4">Amazon-SNS-V4</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1.4</td>
<td>Amazon Simple Notification Service, V4 Signatures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TANIGUCHI/Amon2-Auth-Site-LINE-0.01">Amon2-Auth-Site-LINE</a></td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>0.01</td>
<td>LINE integration for Amon2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRAVATTJ/Ansible-Util-0.001">Ansible-Util</a></td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>0.001</td>
<td>Utilities for interacting with Ansible.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/App-Device-Chip-UI-0.01">App-Device-Chip-UI</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>Tickit-based UI for Device::Chip drivers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/App-GhaInstall-0.001">App-GhaInstall</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>provides the gha-install command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/App-GhaProve-0.001">App-GhaProve</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>provides gha-prove app</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-GrepUtils-0.001">App-GrepUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to the Unix command 'grep'</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-Tables-CLI-0.003">App-Tables-CLI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Manipulate Tables::* modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-ansicolumn-1.01">App-ansicolumn</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>ANSI sequence aware column command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-colortheme-0.001">App-lcpan-CmdBundle-colortheme</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>lcpan subcommands related to ColorTheme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-lupapona-1">App-lupapona</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>a simple static Gemini server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-mokupona-2.01">App-mokupona</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>2.01</td>
<td>a feed aggregator for Gopher, Gemini, RSS and Atom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HKOBA/App-oo_modulino_zsh_completion_helper-0.01">App-oo_modulino_zsh_completion_helper</a></td>
<td><a href="https://metacpan.org/author/HKOBA">HKOBA</a></td>
<td>0.01</td>
<td>provides zsh completion for OO-Modulinos</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-optex-xform-1.01">App-optex-xform</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>data transform filter module for optex</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-phoebe-1.1">App-phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1.1</td>
<td>an app that serves a wiki as a Gemini and web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-LMDB-0.000_01">AtteanX-Store-LMDB</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>LMDB-based RDF store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRIANG/BRIANG-Dist-Perfect-0.01-TRIAL">BRIANG-Dist-Perfect</a></td>
<td><a href="https://metacpan.org/author/BRIANG">BRIANG</a></td>
<td>0.01</td>
<td>A perfect distribution for a perfect year. Or perhaps not.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Bencher-Scenario-AppSorted-0.001">Bencher-Scenario-AppSorted</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Benchmark sorted vs is-sorted</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Bencher-Scenario-StringSimpleEscape-0.001">Bencher-Scenario-StringSimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Benchmark String::SimpleEscape</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/Config-MorePerl-1.2.0">Config-MorePerl</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v1.2.0</td>
<td>Convenient and flexible config loader in perl format.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VANSTYN/DBIx-Class-StateMigrations-0.001">DBIx-Class-StateMigrations</a></td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>0.001</td>
<td>Schema migrations via checksums instead of versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-TCS3472x-0.01">Device-Chip-TCS3472x</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for TCS3472x-family</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SHLOMIF/File-ShouldUpdate-0.0.1">File-ShouldUpdate</a></td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>0.0.1</td>
<td>should files be rebuilt?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Genealogy-ObituaryDailyTimes-0.01">Genealogy-ObituaryDailyTimes</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Compare a Gedcom against the Obituary Daily Times</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenTable-0.001">Health-BladderDiary-GenTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRAVATTJ/Linux-Utils-0.001">Linux-Utils</a></td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>0.001</td>
<td>Miscellaneous utilities for Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-Output-Test-Counter-0.001">Log-ger-Output-Test-Counter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Increase internal counter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseDataDumperCompact-0.001">Log-ger-UseDataDumperCompact</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Dumper::Compact to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRIBUSER/Minio-0.02">Minio</a></td>
<td><a href="https://metacpan.org/author/GRIBUSER">GRIBUSER</a></td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MONSTAR/Mojolicious-Plugin-MoreHelpers-0.02">Mojolicious-Plugin-MoreHelpers</a></td>
<td><a href="https://metacpan.org/author/MONSTAR">MONSTAR</a></td>
<td>0.02</td>
<td>More helpers lacking in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/Net-Camera-Sercomm-ICamera2-0.01">Net-Camera-Sercomm-ICamera2</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>Perl Interface for Sercomm ICamera2 network camera</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-PKCE-0.001">Net-OAuth2Server-PKCE</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A PKCE extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1dBase-0.01">Net-SNMP-Mixin-NXOSDot1dBase</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for some Bridge base values from NXOS switches.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1dStp-0.01">Net-SNMP-Mixin-NXOSDot1dStp</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for 802.1D spanning tree information from Cisco NXOS devices.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GAISSMAI/Net-SNMP-Mixin-NXOSDot1qFdb-0.01">Net-SNMP-Mixin-NXOSDot1qFdb</a></td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>0.01</td>
<td>mixin class for 802.1-Q switch forwarding databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZMUGHAL/Orbital-Transfer-0.001">Orbital-Transfer</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>Software project manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/Package-Role-ini-0.02">Package-Role-ini</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.02</td>
<td>Perl role for "ini" object the returns a Config::IniFiles object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/Perl-Critic-Policy-ControlStructures-ProhibitReturnInDoBlock-0.01">Perl-Critic-Policy-ControlStructures-ProhibitReturnInDoBlock</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Do not "return" in "do" block</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/Perl-Critic-Policy-ProhibitOrReturn-0.01">Perl-Critic-Policy-ProhibitOrReturn</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Do not use `or return`</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Perl-LineNumber-Comment-0.001">Perl-LineNumber-Comment</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Add line number to Perl source as comment</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HMBRAND/PerlIO-via-xz-0.02">PerlIO-via-xz</a></td>
<td><a href="https://metacpan.org/author/HMBRAND">HMBRAND</a></td>
<td>0.02</td>
<td>PerlIO layer for XZ (de)compression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEODESIAN/Playwright-0.001">Playwright</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>0.001</td>
<td>Perl client for Playwright</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CRAIGKAI/RT-Extension-ToggleTheme-0.02">RT-Extension-ToggleTheme</a></td>
<td><a href="https://metacpan.org/author/CRAIGKAI">CRAIGKAI</a></td>
<td>0.01</td>
<td>RT-Extension-ToggleTheme Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Require-Hook-Source-DzilBuild-0.003">Require-Hook-Source-DzilBuild</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Load module source code from Dist::Zilla build files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Require-Hook-Source-MetaCPAN-0.002">Require-Hook-Source-MetaCPAN</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Load module source code from MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Tables-0.001">Sah-Schemas-Tables</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to the Tables module family</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/String-Binary-Interpolation-1.0.0">String-Binary-Interpolation</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v1.0.0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/String-SimpleEscape-0.001">String-SimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Simple string escaping &amp; unescaping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Tables-Quotes-JamesFT-0.001">Tables-Quotes-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Tables-WordList-0.001">Tables-WordList</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Table from a WordList module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Test-ExpectAndCheck-0.01">Test-ExpectAndCheck</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>expect/check-style unit testing with object methods</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Test-Future-IO-0.01">Test-Future-IO</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>unit testing on Future::IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/Text-Conceal-0.99">Text-Conceal</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>conceal and recover interface for text processing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASB/Tk-Zinc-3.304">Tk-Zinc</a></td>
<td><a href="https://metacpan.org/author/ASB">ASB</a></td>
<td>3.304</td>
<td>a canvas offering groups, tranformations, transparency, color gradient…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-Corncob-0.001">WordList-EN-Corncob</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Corncob word list</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-Phrase-EN-Quote-JamesFT-0.001">WordList-Phrase-EN-Quote-JamesFT</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Famous quotes from JamesFT github repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DMOL/XS-libpanda-backtrace-1.0.0">XS-libpanda-backtrace</a></td>
<td><a href="https://metacpan.org/author/DMOL">DMOL</a></td>
<td>v1.0.0</td>
<td>C++ runtime backtraces library for XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Zydeco-Lite-App-0.001">Zydeco-Lite-App</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>use Zydeco::Lite to quickly develop command-line apps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/notice-0.01">notice</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Breaking-Change Acknowledgement Enforcement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOCHSTEN/rdf-ldf-0.251">rdf-ldf</a></td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>0.251</td>
<td>Linked Data Fragments client</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>73</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>32</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/HUGMEIR">HUGMEIR</a></td>
<td>7</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/GAISSMAI">GAISSMAI</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/GRAVATTJ">GRAVATTJ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ASB">ASB</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/HMBRAND">HMBRAND</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMOYAMA">TOMOYAMA</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/DMOL">DMOL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BRIANG">BRIANG</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GRIBUSER">GRIBUSER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HKOBA">HKOBA</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MONSTAR">MONSTAR</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TANIGUCHI">TANIGUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/CRAIGKAI">CRAIGKAI</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/VANSTYN">VANSTYN</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-ColorThemed PERLANCAR 0.002 Modules that has color theme support Acme-CPANModules-Getopt PERLANCAR 0.002 Modules that parse command-line options Acme-CPANModules-ModulesThatJustContainData PERLANCAR 0.001 Modules that just contain data Acme-Marvel-CinematicUniverse-Characters TOBYINK 0.001 example of distributing instance data on CPAN Acme-TOMOYAMA-Utils TOMOYAMA 0.01 The great new Acme::TOMOYAMA::Utils! Algorithm-Diff-JSON DCANTRELL 1.000 find the differences between two lists … <a href="https://perlancar.wordpress.com/2020/12/04/list-of-new-cpan-distributions-nov-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1929</id>
    <published>2020-12-04T09:47:51Z</published>
    <updated>2020-12-04T09:47:51Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>About Perl books review</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2WGgD7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xapwycst9cl153u6oh0f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2WGgD7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xapwycst9cl153u6oh0f.jpg" alt="books"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fonda Lee &lt;a href="https://twitter.com/FondaJLee/status/1221647630368854019"&gt;said on Twitter&lt;/a&gt; something like this about books marketing : &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"In the long run, the thing that sells books the most 
is word of mouth. 

This goes 10x for books that aren’t launched with big marketing 
or publicity support i.e. 95% of books. 

What I’m saying is, talk up the books you love, 
because their survival depends on it."
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That's why I started a serie of Perl books review 😃&lt;br&gt;
(and also for personal notetaking 👍)&lt;/p&gt;

&lt;p&gt;So far, here is the list of reviewed books (list always under construction) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-and-lwp-emd"&gt;Perl and LWP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-xml-and-perl-2jj4"&gt;Perl and XML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-pour-l-impatient-4dfi"&gt;Perl pour l'impatient [FR]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-and-dbi-fbf"&gt;Perl and DBI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-for-system-administration-53jn"&gt;Perl for system administration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want more Perl books ? You can find them on my almost &lt;a href="https://github.com/thibaultduponchelle/perlres#books-books"&gt;complete list of Perl books&lt;/a&gt; &lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6</id>
    <published>2020-12-04T08:52:00Z</published>
    <updated>2020-12-04T08:52:00Z</updated>
    <category term="books"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>FOSDEM 2021: Call for papers open</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem-2021-call-for-papers"/>
  <id>tag:news.perlfoundation.org,2020-12-04:/post/fosdem-2021-call-for-papers</id>
  <published>2020-12-04T08:45:39</published>
  <updated>2020-12-04T08:45:39</updated>
  <summary>
  <![CDATA[
     About FOSDEM Perl and Raku have taken part in the annual free FOSDEM event for many years and we have now been accepted for a virtual devroom in 2021. There is no registration, but attendees must follow FOSDEM code of conduct and for the first time this year the event will be on-line. We are now calling for papers for talks in our virtual devroom. CfP Deadlines Submission deadline: Dec 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Hackathons" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>About FOSDEM</h2>

<p>Perl and Raku have taken part in the annual free <a href="https://fosdem.org/2021/">FOSDEM</a> event for many years and we have now been accepted for a virtual devroom in 2021.</p>

<p>There is no registration, but attendees must follow <a href="https://fosdem.org/2021/practical/conduct/">FOSDEM code of conduct</a> and for the first time this year the event will be on-line.</p>

<p>We are now calling for papers (CfP) for talks in our virtual devroom.</p>

<h2>CfP Deadlines</h2>

<ul>
<li>Submission deadline: Dec 23rd, 2020</li>
<li>Selected talks announced by Dec 31st, 2020</li>
<li>Conference dates 6 &amp; 7 February 2021 online</li>
<li>Perl &amp; Raku devroom taking place on Saturday February 2021.</li>
<li>Talk video submission: mid-January.</li>
</ul>

<h2>What kind of talks we're interested in</h2>

<p>The main topic of the room will be "Perl&amp;Raku in a world in flux", and the open call for papers will include the following topics:</p>

<ul>
<li>data science</li>
<li>infrastructure as code</li>
<li>visualization and  containers</li>
<li>development practices</li>
<li>teaching</li>
<li>data munging</li>
<li>data storage</li>
<li>interfacing Perl &amp; Raku to the rest of the world</li>
<li>testing, continuous integration and continuous development best practices</li>
<li>Perl, Raku and other scripting languages, what they can learn from each other</li>
</ul>

<h3>Talk details</h3>

<ul>
<li>The default duration for talks is about 45 minutes including discussion. 
<ul>
<li>Please select the most suitable duration for your talk, excluding Q&amp;A.</li>
</ul></li>
<li>Talks will be pre-recorded in advance, and streamed during the event. This means that you should be ready to submit your recorded talk by mid-January.
<ul>
<li>⚠️ Presentations has to be pre-recorded and submited by mid-January⚠️. Your whole talk needs to be ready by then</li>
</ul></li>
<li>The reference time will be Brussels local lime (CET).</li>
<li>Q/A session will be live, so you need to be present when your presentation is aired to take these questions.</li>
<li>Attendees will be able to chat, and will also have a way to submit questions.</li>
<li>Food and drinks is now allowed during the talks, but you are responsible for cleaning your own space. 
<ul>
<li>If you don't, we'll call your roommates and they will change the password for the WiFi to punish you.</li>
</ul></li>
</ul>

<h2>Submit your talk!</h2>

<p>All submissions for devrooms are made through the FOSDEM <a href="https://penta.fosdem.org/">Pentabarf website</a> - you need to register, in case you haven't done so already. 
- Select the "Perl and Raku devroom" as the track for your "event", which is FOSDEMspeak for talk. 
- Add all the info requested and whatever you think it's necessary for us to select it for FOSDEM. 
- Please remember to include your time zone in your bio or where you think it's reasonable so that we can schedule your talk accordingly.</p>

<h2>We need volunteers!</h2>

<p>If you want to help with selecting the talks, helping speakers, reviewing talks once they're ready, just let us know!</p>

<h2>Get in touch</h2>

<p>If you have questions, contact:
- JJ Merelo <a href="&#109;&#97;&#105;&#x6C;&#x74;&#111;:&#106;&#x6A;&#x6D;&#101;&#114;&#101;&#x6C;&#111;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6F;&#109;">&#106;&#x6A;&#x6D;&#101;&#114;&#101;&#x6C;&#111;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6F;&#109;</a> 
- Stuart Mackintosh <a href="&#x6D;&#97;&#x69;&#x6C;&#116;&#111;:&#x73;&#116;&#x75;&#x61;r&#116;&#64;&#112;&#x65;&#114;&#108;&#102;&#111;&#x75;&#x6E;&#100;a&#116;&#x69;o&#110;&#46;&#x6F;&#x72;&#x67;">&#x73;&#116;&#x75;&#x61;r&#116;&#64;&#112;&#x65;&#114;&#108;&#102;&#111;&#x75;&#x6E;&#100;a&#116;&#x69;o&#110;&#46;&#x6F;&#x72;&#x67;</a>.</p>

<p>You can also get in touch with us:</p>

<ul>
<li>via IRC at #raku on Freenode </li>
<li>in our #FOSDEM Slack channel
<ul>
<li>through this share link available for 7 days: https://join.slack.com/share/zt-jv3d9yec-2Ub7~dYc6kHMff2r9jMqWg?cdn_fallback=1</li>
</ul></li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Book review "Perl For System Administration"</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/book-review-perl-for-system-administration-53jn" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBNIBnru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ahkuxfyxed7dwkrr8n3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBNIBnru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ahkuxfyxed7dwkrr8n3.jpg" alt="Perl Sysadmin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Yet another book review ! \o/  &lt;/p&gt;

&lt;p&gt;This book was released in Y2K. Seems like there was no new edition since then.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perl for System Administration&lt;/strong&gt; is written by &lt;strong&gt;David N. Blank-Edelman&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#very-cool" class="anchor"&gt;
  &lt;/a&gt;
  Very cool
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#old-bits" class="anchor"&gt;
  &lt;/a&gt;
  Old bits
&lt;/h3&gt;

&lt;p&gt;Some fun facts about how &lt;em&gt;old&lt;/em&gt; is the book : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The book mentions &lt;strong&gt;"Perl is not ubiquitous"&lt;/strong&gt; as a weakness 
when having to choose between Perl and other scripts languages.&lt;/li&gt;
&lt;li&gt;The author thanks Usenix, SAGE and LISA conferences.&lt;/li&gt;
&lt;li&gt;Recommends search.cpan.org 😄&lt;/li&gt;
&lt;li&gt;"NTFS driver will be integrated in Linux kernel 2.2"... ah memories&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security" class="anchor"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Security is always one of the numerous hats of a System Administrator...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UK8ZqHMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s94r2hu2yes0f11qz1ai.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UK8ZqHMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s94r2hu2yes0f11qz1ai.jpg" alt="Security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some notions explained in the book :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Poison null byte (still possible in 2020 ?)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;open(TEMPFILE, "&amp;gt;/tmp/tmp.$$);&lt;/code&gt; Predicatble &lt;code&gt;$$&lt;/code&gt; on multi user machine, 
a malicious user can predict and &lt;em&gt;steal&lt;/em&gt; a temp file and write custom text/command to force
reader to execute what he wants&lt;/li&gt;
&lt;li&gt;I discovered that "..." ". " were valid filenames (for bad people).&lt;/li&gt;
&lt;li&gt;Interesting exercise with system monitoring (dates, content, DNS dump...) &lt;/li&gt;
&lt;li&gt;The idea of Postmortem, long time before devops mindset :D&lt;/li&gt;
&lt;li&gt;Classic DDoS SYN flood attack (I think the first time I heard about it was in a story about Kevin Mitnick)&lt;/li&gt;
&lt;li&gt;Cool part mentioning "John the ripper", "Crack" or "L0phtCrack". "libcrack" and "npasswd" 💀&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-discovered" class="anchor"&gt;
  &lt;/a&gt;
  Things I discovered
&lt;/h3&gt;

&lt;p&gt;I learnt also : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lot of things about PPM.&lt;/li&gt;
&lt;li&gt;A lot about macperl : cpan-mac and &lt;strong&gt;installme&lt;/strong&gt; where you can drag and drop tarballs to install &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chapter-about-file-systems" class="anchor"&gt;
  &lt;/a&gt;
  Chapter about file systems
&lt;/h3&gt;

&lt;p&gt;Very cool !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How MAC is different (data fork, resource fork)&lt;/li&gt;
&lt;li&gt;How Windows is LOL (vfat = how to build something on top of a technical debt)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#corrupted-check-file" class="anchor"&gt;
  &lt;/a&gt;
  Corrupted check file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The sample code is cool&lt;/li&gt;
&lt;li&gt;The sysread trick vs &amp;lt; &amp;gt; (read sequentially and stop at first error)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, how the author tells a story and explains sysadmin concepts each time is very cool -- I LOVE IT --&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quotas" class="anchor"&gt;
  &lt;/a&gt;
  Quotas
&lt;/h3&gt;

&lt;p&gt;How quotas are explained is very cool.&lt;/p&gt;

&lt;p&gt;Quotas edition samples are a bit hacky and brittle (not by the fault of the author) but proves "how to get the job done" with Perl.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-users" class="anchor"&gt;
  &lt;/a&gt;
  Handling users
&lt;/h3&gt;

&lt;p&gt;Some tips detailed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GID is primary group&lt;/li&gt;
&lt;li&gt;We can have a group password &lt;/li&gt;
&lt;li&gt;Password &lt;code&gt;*&lt;/code&gt; to disable login&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&amp;lt;&lt;/code&gt; and &lt;code&gt;$&amp;gt;&lt;/code&gt; and &lt;code&gt;$)&lt;/code&gt; and &lt;code&gt;$(&lt;/code&gt; for real/effective user/group&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#windows" class="anchor"&gt;
  &lt;/a&gt;
  Windows
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Windows : RID + DID = SID &lt;/li&gt;
&lt;li&gt;Impossible to recreate same user then computer owner change implies to rename user&lt;/li&gt;
&lt;li&gt;Windows cannot &lt;em&gt;give&lt;/em&gt; ownership, we can only &lt;em&gt;take&lt;/em&gt; ownership&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#unix-vs-win" class="anchor"&gt;
  &lt;/a&gt;
  Unix vs Win
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;There is a password hash incompatibility (algorithm)&lt;/li&gt;
&lt;li&gt;On Unix there is a superuser whereas on Windows it's more like super-heros (users with super powers)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sysadmin-mindset" class="anchor"&gt;
  &lt;/a&gt;
  Sysadmin mindset
&lt;/h3&gt;

&lt;p&gt;Sysadmins have their own mindset (and the ones I know have a great sense of humor).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTSJeRln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzypd39kfrex3vb1883r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTSJeRln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hzypd39kfrex3vb1883r.jpg" alt="Sysadmin starter pack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Nothing is foolproof because fools are so ingenious"&lt;/li&gt;
&lt;li&gt;"Something is wrong and I have no idea what" (how some users report problems) lol&lt;/li&gt;
&lt;li&gt;"Sysadmins are log file linguists"&lt;/li&gt;
&lt;li&gt;"Handle with pack and unpack - this way lies madness and misery" 😃&lt;/li&gt;
&lt;li&gt;"There are times where death is too good for a process"&lt;/li&gt;
&lt;li&gt;"Security is continuum"&lt;/li&gt;
&lt;li&gt;"You can be more secure but you will never be 100% secure" and in the same theme "It is always possible to find more to fear"&lt;/li&gt;
&lt;li&gt;"Oog's password to get back into the clan's cave was probably "oog" " (about weak passwords)&lt;/li&gt;
&lt;li&gt;"Detect local signs of perils" (nothing special but it sounds good to me 😄)&lt;/li&gt;
&lt;li&gt;"Learn something from incident instead of only loosing time and effort"&lt;/li&gt;
&lt;li&gt;"An user does not login from a lot of different places" (probably still true today even in the "mobility world" that we know today)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#process-handling" class="anchor"&gt;
  &lt;/a&gt;
  Process handling
&lt;/h3&gt;

&lt;p&gt;Very nice chapter !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inspect process with &lt;code&gt;/dev/kmem&lt;/code&gt;, &lt;code&gt;Proc::ProcessTable&lt;/code&gt;, &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;proc&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Filewatcher windows very contemporary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#directories-services" class="anchor"&gt;
  &lt;/a&gt;
  Directories services
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finger&lt;/li&gt;
&lt;li&gt;whois&lt;/li&gt;
&lt;li&gt;LDAP (LDIF)&lt;/li&gt;
&lt;li&gt;Active Directory (ADSI, DCOM, OLE)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caracteristics : structured or not, some implementation details etc...&lt;/p&gt;

&lt;p&gt;Networked, remote, hierarchical, structured, read many write few...&lt;/p&gt;

&lt;p&gt;Very good chapter about LDAP, I skipped some parts at the end, but at least I have ready to use code if needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-cool-things" class="anchor"&gt;
  &lt;/a&gt;
  Other cool things
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Control Windows windows with API !&lt;/li&gt;
&lt;li&gt;Security bits&lt;/li&gt;
&lt;li&gt;References at the end of chapter, original but cool&lt;/li&gt;
&lt;li&gt;Very nice chapter about DNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#not-cool" class="anchor"&gt;
  &lt;/a&gt;
  Not cool
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Not for Perl beginners, sometimes complex notions are thrown without any explanation (&lt;code&gt;@&lt;/code&gt;, &lt;code&gt;\%&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;$_&lt;/code&gt;, &lt;code&gt;refs&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Sometimes too much details that will be outdated one day after the book is released (a bug in a very specific version of &lt;code&gt;Net::NIS&lt;/code&gt;...)&lt;/li&gt;
&lt;li&gt;Sometimes too much code (one snippet was 5 pages long, tldr;)&lt;/li&gt;
&lt;li&gt;Lost with chapter about XML, not clear&lt;/li&gt;
&lt;li&gt;SNMP and LDAP are probably not so well explained&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#various-tips-and-tricks" class="anchor"&gt;
  &lt;/a&gt;
  Various Tips and tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Compare 2 tabs that contains numbers &lt;code&gt;if("@arr[1..12]" ne "@arr2")&lt;/code&gt; nice Perl idiom (slice then convert to string to compare).&lt;/li&gt;
&lt;li&gt;Do you know the SQL "SELECT ... &lt;em&gt;INTO&lt;/em&gt; ..." ? Me not ! 😁&lt;/li&gt;
&lt;li&gt;Good idea to compare SQL operators to Perl regex operators !&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appendix" class="anchor"&gt;
  &lt;/a&gt;
  Appendix
&lt;/h2&gt;

&lt;p&gt;There are really short introductions, quality depends the topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XS and XML intros are cool. &lt;/li&gt;
&lt;li&gt;LDAP and SNMP intros are too hard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Very pleasant to let the author give a tour of Operating Systems for us for each topic, even (especially) if I'm less interested in some OS.&lt;/p&gt;

&lt;p&gt;You should read this book! Definitely ! 👍&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/book-review-perl-for-system-administration-53jn</id>
    <published>2020-12-04T07:57:29Z</published>
    <updated>2020-12-04T07:57:29Z</updated>
    <category term="perl"/>
    <category term="books"/>
    <category term="sysadmin"/>
    <category term="systems"/>
  </entry>
  <entry>
    <title>Advent of Code Day 3 - the first modulo</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_03.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_03.html</id>
    <updated>2020-12-04T00:02:19+00:00</updated>
    <category term="perl"/>
    <summary>Part 1 .. and the first 2D map! Which is quite simple to parse in Perl (or Perl makes parsing simple?) We just need to look ahead in the map and search for trees. my @map = map { chomp; ...</summary>
    <content type="html">&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;.. and the first 2D map!&lt;/p&gt;

&lt;p&gt;Which is quite simple to parse in Perl (or Perl makes parsing simple?)&lt;/p&gt;

&lt;p&gt;We just need to look ahead in the map and search for trees.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @map = map { chomp; [split(//,$_)] } &amp;lt;STDIN&amp;gt;;
my $w = $map[0]-&amp;gt;@*;

my $trees;
my $c=0;
my $r=0;
while (my $pos = $map[$r]-&amp;gt;[$c]) {
    $trees++ if $pos eq '#';
    $c = ($c + 3) % $w;
    $r++;
}
say $trees;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of repeating the pattern (as hinted in the instruction, ts, ts), we of course use &lt;code&gt;modulo&lt;/code&gt; to keep the horizontal counter inside the map definition.&lt;/p&gt;

&lt;p&gt;I still managed to waste at least 5 minutes to a scoping bug:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while (my $pos = $map[$r]-&amp;gt;[$c]) {
    $trees++ if $pos eq '#';
    my $c = ($c + 3) % $w;
    $r++;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;my&lt;/code&gt; before the assignment to &lt;code&gt;$c&lt;/code&gt;. Thanks to this I was always checking the first column, for not very correct results...&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;For part two we just need to check a few (5) different ways to calculate where we should look for a tree, so we pack those instructions into an array, and adapt the lookahead to use these values instead of the hardcoded ones.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @map = map { chomp; [split(//,$_)] } &amp;lt;STDIN&amp;gt;;
my $w = $map[0]-&amp;gt;@*;

my @slopes=([1,1],[3,1],[5,1],[7,1],[1,2]);

my $prod=1;
for my $slope (@slopes) {
    my $trees;
    my $c=0;
    my $r=0;
    while (my $pos = $map[$r]-&amp;gt;[$c]) {
        $trees++ if $pos eq '#';
        $c = ($c + $slope-&amp;gt;[0]) % $w;
        $r += $slope-&amp;gt;[1];
    }
    $prod*=$trees;
}
say $prod;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The basic logic stays the same, which would probably look nicer if I would have moved it into a function.&lt;/p&gt;

&lt;p&gt;I wasted a few minuts on the second part because I was running the file &lt;code&gt;03_2.pl&lt;/code&gt; but put my changes into an old, buggy version of &lt;code&gt;03_1.pl&lt;/code&gt; - and I was very annoyed why the loop did no stop...&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 14:13 / 06:23&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11319 / 11060&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/3"&gt;https://adventofcode.com/2020/day/3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Advent of Code Day 2 - counting regex</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_02.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_02.html</id>
    <updated>2020-12-03T23:36:50+00:00</updated>
    <category term="perl"/>
    <summary type="html">Part 1

Again rather simple task, simple solution. I've seen the regex to parse the input in a lot of solutions in various languages - it's nice that even though the languages look rather different, ...</summary>
    <content type="html">&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;Again rather simple task, simple solution. I've seen the regex to parse the input in a lot of solutions in various languages - it's nice that even though the languages look rather different, regex unites them all (in a very weird way :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $valid;
while ( my $line = &amp;lt;STDIN&amp;gt; ) {
    chomp($line);
    my ( $min, $max, $letter, $pwd ) = $line =~ /^(\d+)-(\d+) (\w): (\w+)$/;
    my $cnt =()= $pwd =~ /$letter/g;

    $valid++ if ( $min &amp;lt;= $cnt &amp;amp;&amp;amp; $cnt &amp;lt;= $max );
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing of interest is the "Saturn" operator &lt;code&gt;=()=&lt;/code&gt;, which (using some fancy list/scalar contexts) gets the number of times the regex matches (and thus counts how often the letter occurs in the password)&lt;/p&gt;

&lt;p&gt;Oh, and wait a minute: Since Perl 5.32 (released a few months ago) we can finally say (via &lt;a href="https://metacpan.org/pod/distribution/perl/pod/perldelta.pod#Chained-comparisons-capability"&gt;chained comparisons capability&lt;/a&gt; )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $valid++ if ( $min &amp;lt;= $cnt &amp;lt;= $max );&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;Also not hard, but I tripped over my variable names: I copied the Part-1 solution to a new file, and kept the &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt; names. And because I wasn't reading the spec properly, I thought we have to count how often the letter occurs in the range defined by min and max. So I got a wrong result and lost a few minutes...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $valid;
while ( my $line = &amp;lt;STDIN&amp;gt; ) {
    chomp($line);
    my ( $p1, $p2, $letter, $pwd ) = $line =~ /^(\d+)-(\d+) (\w): (\w+)$/;
    my @pwd = ( 'X', split( //, $pwd ) );

    my $hit = 0;
    for my $i ( $p1, $p2 ) {
        $hit++ if $pwd[$i] eq $letter;
    }
    $valid++ if $hit == 1;
}
say $valid;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of fiddling with the array index &lt;code&gt;$i&lt;/code&gt; I just padded the array with an extra value, so I could use the provided values as-is.&lt;/p&gt;

&lt;p&gt;Oh, and here's my bug:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   for my $i ( $min .. $max ) {
        $hit++ if $pwd[$i] eq $letter;
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;strong&gt;..&lt;/strong&gt; between &lt;code&gt;$min&lt;/code&gt; and &lt;code&gt;$max&lt;/code&gt;. That's why I renamed the vars to &lt;code&gt;$p1&lt;/code&gt; and &lt;code&gt;$p2&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; 07:54 / 07:18&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11514 / 10843&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/2"&gt;https://adventofcode.com/2020/day/2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Advent of Code Day 1 - brute loops</title>
    <link href="http://domm.plix.at/perl/2020_12_aoc_day_01.html"/>
    <id>http://domm.plix.at/perl/2020_12_aoc_day_01.html</id>
    <updated>2020-12-03T22:59:14+00:00</updated>
    <category term="perl"/>
    <summary type="html">I'll write about by Advent of Code 2020 solutions here. Let's see how long I'll manage to particiate, and how big my blog-lag will be...

Part 1

Straight forward, brute force solution, with a tiny ...</summary>
    <content type="html">&lt;p&gt;I'll write about by &lt;a href="https://adventofcode.com/2020/"&gt;Advent of Code 2020&lt;/a&gt; solutions here. Let's see how long I'll manage to particiate, and how big my blog-lag will be...&lt;/p&gt;

&lt;h4&gt;Part 1&lt;/h4&gt;

&lt;p&gt;Straight forward, brute force solution, with a tiny bit of smartness. I remove each element after checking it in the inner loop, because additions are commutative.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @exp = ( &amp;lt;STDIN&amp;gt; );
while (my $a = shift (@exp)) {
    for my $b (@exp) {
        if ($a + $b == 2020) {
            die $a*$b.&amp;quot;\n&amp;quot;;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;die&lt;/code&gt; with a sting ending with a newline for a shorter &lt;code&gt;print () &amp;amp;&amp;amp; exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But I did not know about the trick where you store the values in a hash and then go through the hash, subtract the value from 2020 and look for an entry in the hash with the result. Maybe it's clearer in code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %data = map { chomp; $_=&amp;gt;1 } ( &amp;lt;STDIN&amp;gt; );
for my $a (keys %data) {
    my $b = 2020 - $a;
    if ($data{2020 - $a}) {
        die $a*$b.&amp;quot;\n&amp;quot;;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Presumably this is a lot faster, but with this small data set, it makes no difference.&lt;/p&gt;

&lt;h4&gt;Part 2&lt;/h4&gt;

&lt;p&gt;As the data set is so small, I didn't even consider an smartness and just added another loop. This means we're in O(n^3) territory, but with a runtime of 0.2sec I just don't care...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @exp = ( &amp;lt;STDIN&amp;gt; );
while (my $a = shift (@exp)) {
    for my $b (@exp) {
        for my $c (@exp) {
            if ($a + $b +$c == 2020) {
                say $a*$b*$c;
                exit;
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, and here I did do &lt;code&gt;say &amp;amp;&amp;amp; exit&lt;/code&gt; (even in two statements...)&lt;/p&gt;

&lt;h4&gt;Look Ma, no spaces!&lt;/h4&gt;

&lt;p&gt;Here's the same code, slightly golfed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@d=&amp;lt;STDIN&amp;gt;;for$a(@d){for$b(@d){for$c(@d){die$a*$b*$c.&amp;quot;\n&amp;quot;if$a+$b+$c==2020}}}&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Stats &amp;amp; Links&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Time:&lt;/b&gt; ~5:00 / 5:39&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Rank:&lt;/b&gt; 11236 / 10430&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com/2020/day/1"&gt;https://adventofcode.com/2020/day/1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/adventofcode2020"&gt;https://github.com/domm/adventofcode2020&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>A Perl love letter</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj" type="text/html"/>
    <content type="html">&lt;p&gt;I sometimes wonder why I love so much Perl. I feel like some &lt;em&gt;empathy&lt;/em&gt; for Perl. Like a good tool that you are attached to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fF1Y2fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ap4jtibcn0an8ml122zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fF1Y2fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ap4jtibcn0an8ml122zz.png" alt="Love"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I once wondered myself what was rational and what was emotional...&lt;/p&gt;

&lt;p&gt;Perl being not my first programming language, I know that Perl has real virtues that make me feel good and stick with it, but what are these ?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-perl-killer-features-quickcards" class="anchor"&gt;
  &lt;/a&gt;
  My Perl killer features quickcards
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrtIXg3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/byosdvprn9sh1ow7qn2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrtIXg3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/byosdvprn9sh1ow7qn2k.png" alt="Killer features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Perl killer features detailed below are not always only Perl specifics, good ideas are often shared, but when I tried to list what I enjoy with Perl, this is the items I found.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flexible-parser" class="anchor"&gt;
  &lt;/a&gt;
  Flexible parser
&lt;/h2&gt;

&lt;p&gt;The parser is incredibly smart, giving the user the true power instead forcing developer to adapt himself to the parser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cpan" class="anchor"&gt;
  &lt;/a&gt;
  CPAN
&lt;/h2&gt;

&lt;p&gt;This is the "Alexandria library" for coders, giving you free and reusable high quality modules for almost every tasks. &lt;/p&gt;

&lt;p&gt;I insist on "high quality"... because it is, really.&lt;/p&gt;

&lt;p&gt;A major Perl programmer said : "CPAN is the language, Perl is just the syntax" &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community" class="anchor"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;Perl coders are very respectful towards existing tools and ecosystem in general. This is something very important, for me, in the today's world, and every non-junior programmer should agree with me. &lt;/p&gt;

&lt;p&gt;This virtue eventually leads to improve existing pieces of software and incrementally grow "things that works" without bursting our ecosystem into a myriad of tiny pieces.&lt;/p&gt;

&lt;p&gt;And these previous qualities are something that gives an overall feeling of wisdom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zD9MG3tR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/snp9kmai5c401c0lbh1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zD9MG3tR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/snp9kmai5c401c0lbh1i.png" alt="Community"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perl folks are also funny, doing coding challenges or playing with software computing weirdnesses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toolchain" class="anchor"&gt;
  &lt;/a&gt;
  Toolchain
&lt;/h2&gt;

&lt;p&gt;This is probably the most impressive part of Perl, the Perl toolchain were and still is more than awesome !&lt;/p&gt;

&lt;p&gt;Should I remind that Perl is ultra portable and stable ? Of course no :D&lt;/p&gt;

&lt;p&gt;Perl has great build system that have stages prerequisites, dynamic configuration, isolated installation, external dependencies and versions range constraints (against parser, build system itself or other modules !).&lt;/p&gt;

&lt;p&gt;Everything in a ecosystem that : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;helps developers to create reliable and portable modules&lt;/li&gt;
&lt;li&gt;guarantees the best quality to users &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And despite the full freedom given to Perl developers (TIMTOWTDI), it is remarkably well harmonized on top of it.&lt;/p&gt;

&lt;p&gt;This is a direct consequence of the "respecting constraints" community value that I discussed earlier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mojolicious" class="anchor"&gt;
  &lt;/a&gt;
  Mojolicious
&lt;/h2&gt;

&lt;p&gt;This is a masterpiece providing one of the best web framework between all languages plus a general purpose programming framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex" class="anchor"&gt;
  &lt;/a&gt;
  Regex
&lt;/h2&gt;

&lt;p&gt;No need to introduce regular expression and their strong roots interlaced with Perl.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-culture" class="anchor"&gt;
  &lt;/a&gt;
  Testing culture
&lt;/h2&gt;

&lt;p&gt;This is something that always impressed me, Perl folks are doing tests for real. &lt;/p&gt;

&lt;p&gt;Not that it surprises me to test programs, but really it's deep in the Perl DNA.&lt;/p&gt;

&lt;p&gt;During module installation, after CPAN upload, on various platform and parser versions. &lt;/p&gt;

&lt;p&gt;Anonymous individuals are testing for you, all the time, and the vast majority of modules has a lot of tests, it's crazy.&lt;/p&gt;

&lt;p&gt;"Perl testing" is true business, not a buzzword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dbi" class="anchor"&gt;
  &lt;/a&gt;
  DBI
&lt;/h2&gt;

&lt;p&gt;Purely another masterpiece, invented when database interfaces were not even existing. &lt;/p&gt;

&lt;p&gt;The way it is made is for me a model of software architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backward-compatibility" class="anchor"&gt;
  &lt;/a&gt;
  Backward Compatibility
&lt;/h2&gt;

&lt;p&gt;When you run old code on recent machine or recent code on old parser, it's often lost in advance... with other languages !&lt;/p&gt;

&lt;p&gt;For a lot of challengers, the recommendation is often to &lt;em&gt;always&lt;/em&gt; run code almost isolated (all deps installed for each app with specific version) or environmentized (override interpreter and lib path). &lt;/p&gt;

&lt;p&gt;It's is not Perl main approach (but we have also first class tools for it) and perl porters and modules owners try hard to make this happen. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPMZgESS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qi3cecn3ryrx01ehyth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPMZgESS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qi3cecn3ryrx01ehyth.png" alt="Yeah"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meaningful-error-messages" class="anchor"&gt;
  &lt;/a&gt;
  Meaningful error messages
&lt;/h2&gt;

&lt;p&gt;Programming is sometimes dancing with a parser, the perl interpreter gives very smart messages and point often the exact place where you made this fu$!i%g typo.&lt;/p&gt;

&lt;p&gt;No stackstrace, no cryptic error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-what-i-mean" class="anchor"&gt;
  &lt;/a&gt;
  Do What I Mean
&lt;/h2&gt;

&lt;p&gt;When you learn to program with Perl, you don't need the full "idiomatic" Perl skills but you can easily do "baby Perl" because of the expressiveness of Perl and his "least astonishment" principle. &lt;/p&gt;

&lt;p&gt;And this virtue is still a pleasure for experienced Perl programmers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-tools" class="anchor"&gt;
  &lt;/a&gt;
  Web Tools
&lt;/h2&gt;

&lt;p&gt;I already mentionned Mojolicious but there are web framework alternatives that are as good as it.&lt;/p&gt;

&lt;p&gt;Perl has also one of the best "network toolbox" to achieve all network related tasks like scraping, crawling, pentesting, crypto, ssl, snmp, ftp, sftp, ssh or whatever you could need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-more-unixlike-language" class="anchor"&gt;
  &lt;/a&gt;
  The more "Unix-like" language
&lt;/h2&gt;

&lt;p&gt;It is not really a quality but I always loved that Perl smells so "Unix". It also have a sort of reputation of "hacker language" and I find it cool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was my testimonial about why I love Perl.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLYlhtoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/phuw89enq3ugelxdd2ve.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLYlhtoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/phuw89enq3ugelxdd2ve.jpg" alt="Crying cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There would be much more to add but I think I already discussed some topics that are really Perl "killer features" for me but not being the ones that are usually highlighted.&lt;/p&gt;

&lt;p&gt;And now what about you, why do you love Perl ? &lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj</id>
    <published>2020-12-03T15:19:04Z</published>
    <updated>2020-12-03T15:19:04Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Development community that we can see to development of Perl Part1 -　C language specification creating group</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/yuki_kimoto/2020/12/development-community-that-we-can-see-to-development-of-perl-part1--c-language-specification-creatin.html"/>
    <id>tag:blogs.perl.org,2020:/users/yuki_kimoto//2020.9976</id>

    <published>2020-12-02T11:20:26Z</published>
    <updated>2020-12-02T11:23:57Z</updated>

    <summary>The Perl core team seems to be looking for resources to help in language development. Currently, it seems the material in python. perlgov: the perl governance document I feel that Perl and Python cultures are quite different. It's also based...</summary>
    <author>
        <name>Yuki Kimoto</name>
        <uri>http://d.hatena.ne.jp/perlcodesample</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>The Perl core team seems to be looking for resources to help in language development.</p>

<p>Currently, it seems the material in python.</p>

<p><a href="https://github.com/Perl/perl5/pull/18357">perlgov: the perl governance document</a></p>

<p>I feel that Perl and Python cultures are quite different.</p>

<p>It's also based on an improvised document in 2019 when the Python reader quit.</p>

<p>I can understand how envious we are when we see Python attracting users(although<br />
I'm watching a lot of cheating at the same time).</p>

<p>On the other hand Perl has long been a conservative culture.</p>

<p>So, we can refer to the methods used by developers of languages, operating systems and tools that also have a conservative mindset.</p>

<p>The first thing I would like us to refer to is the method used by the group that creates C language specifications.</p>

<h2>C language specification creating group</h2>

<p>C89, C99, C11</p>

<p>Development of C language has continued some slowly, but functions that users think are lacking have been added.</p>

<p>Specially C99 is added good features I wanted.</p>

<p>It would be worthwhile to ask the C specification group how it was achieved.</p>

<p>I think it's less repulsive and less likely to fail if we adopt a method from a culture similar to Perl rather than a culture opposite to Perl.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Monthly Report - November</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html"/>
    <id>tag:blogs.perl.org,2020:/users/mohammad_s_anwar//990.9971</id>

    <published>2020-12-01T12:44:07Z</published>
    <updated>2020-12-01T12:48:33Z</updated>

    <summary> Welcome last month of the year 2020 Generally, I always look forward to festive month, December. But I don't expect it to be any different from other months, unfortunately. With so much going on in my personal life, it...</summary>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    
    <category term="perlmonthlyreport" label="perl monthly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2020-11.jpg"/></p>

<p><strong>Welcome last month of the year 2020</strong></p>

<p>Generally, I always look forward to festive month, December. But I don't expect it to be any different from other months, unfortunately.</p>

<p>With so much going on in my personal life, it is hard to focus on anything. One thing that I really miss these days are personal time. I am constantly working on it with the help of experts in the field. I try to look at the positive side of the life but I can't ignore the fact I am not giving 100% to my pet project <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a>. Having said that I must thank the entire team for the support and encouragement in this difficult time. As of today, we entered into the 89th week. I can't wait to see when we get to the 100th week.</p>

<p>Ever since I shared about my treatment, I have had many encouraging and supporting messages from friends. I read them again and again. I feel blessed to have such caring friends around me. I have let myself down by not taking part in Hacktoberfest 2020 in the same spirit as before. Atleast I completed the challenge by submitting the required number of Pull Requests. </p>

<p>Let me share some happy news as well, I have now become co-editor of <a href="https://perlweekly.com/">Perl Weekly Newsletter</a> with the most editions, going past greats like Yanick Champoux and Neil Bowers.</p>

<p>On professional front, there are so much going on, I hope to share some good news very soon.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Adopt CPAN Module</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>6 Pull Requests</strong> submitted in the month of November.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2020-11.png"/></p>

<p><strong>2345 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2020-11.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>855 commits</strong> recorded in the month of November.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2020-11.png"/></p>

<p>Overall <strong>8237 commits</strong> recorded in the year 2020.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2020-11.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of November:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-085">Challenge #085</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-086">Challenge #086</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-087">Challenge #087</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088">Challenge #088</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089">Challenge #089</a></li>
</ul>

<p>And RECAPS are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-084">RECAP Challenge #084</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-085">RECAP Challenge #085</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-086">RECAP Challenge #086</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-087">RECAP Challenge #087</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-088">RECAP Challenge #088</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>There are plenty of vides available on my <a href="https://studio.youtube.com/channel/UCT91RkThBWByo1NL_M8R8Ig">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<p>No new video created last month, sorry :-(</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-10">Andrew Shitov</a> as the Champion of the Weekly Challenge.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/release/Net-Dict">Net::Dict</a> by Neil Bowers. I submitted <a href="https://github.com/neilb/Net-Dict/pull/6">one</a> Pull Request.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2020-11.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/11/monthly-report---october-2.html">Monthly Report - October</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited three editions of The Perl Weekly newsletter i.e. <a href="http://perlweekly.com/archive/484.html">Issue #484</a>, <a href="http://perlweekly.com/archive/486.html">Issue #486</a> and <a href="http://perlweekly.com/archive/488.html">Issue #488</a>.</p>

<hr id="i"/>
<h2>Adopt CPAN Module</h2>

<p>None in the last month.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl::Critic-Regeln umsetzen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-01-perl-critic-regeln-erstellen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Gregor hat vor längerer Zeit das Modul `Test::Perl::Critic::Progressive` und ich vor kurzem  das Modul `PPI` vorgestellt. In diesem Blogpost zeige ich, wie man mit `PPI` Perl::Critic-Regeln umsetzen kann, die dann in den Tests verwendet werden.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-01-perl-critic-regeln-erstellen</id>
    <published>2020-12-01T10:00:00Z</published>
    <updated>2020-12-01T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Find the first element in an array in Perl that satisfies a condition</title>
  <summary type="html"><![CDATA[<p>
When you need to find the first element in an array that satisfies some condition, the first solution that might come to mind is to loop
over all the elements using <b>for</b> and check them one by one. This would yield a working code, but there are nicer solution.
<p>
BTw if you are interested I've also written a solution to
<a href="https://code-maven.com/python-find-first-element-in-list-matching-condition">find the first matching element of a list in Python</a>.
It might be interesting to compare.
<p>
]]></summary>
  <updated>2020-11-30T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/first"/>  <id>https://perlmaven.com/first</id>
  <content type="html"><![CDATA[<p>
When you need to find the first element in an array that satisfies some condition, the first solution that might come to mind is to loop
over all the elements using <b>for</b> and check them one by one. This would yield a working code, but there are nicer solution.
<p>
BTw if you are interested I've also written a solution to
<a href="https://code-maven.com/python-find-first-element-in-list-matching-condition">find the first matching element of a list in Python</a>.
It might be interesting to compare.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Shopping, Skating, and Swimming – Is This Even Work? Perl developer in Dubai</title>
    <link rel="alternate" href="https://job.perl.careers/jn4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is a financial company whose growth over the last twenty years has been nothing short of impressive. They started with the idea that online trading should be available to all, and from there, they’ve built a company with multiple locations worldwide. If you want to be part of a business that is thriving, this may be the perfect opportunity for you.</div>
    </content>
    <id>https://job.perl.careers/jn4</id>
    <published>2020-11-30T10:00:44Z</published>
    <updated>2020-11-30T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Business Casual has a Whole New Meaning. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/3g9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online shopping, socializing, working—it’s a digital world now, which is perfect for our client. As an international IT company managing millions of domains for retail and corporate customers in nearly every country in the world, they’re busier than ever—and they need a few senior Perl developers to help them continue to thrive.</div>
    </content>
    <id>https://job.perl.careers/3g9</id>
    <published>2020-11-30T10:00:43Z</published>
    <updated>2020-11-30T10:00:43Z</updated>
  </entry>
  <entry>
    <title>If it was Good Enough for Mozart - Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/i2k" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the largest product and price comparison platforms in German-speaking countries, they know all about finding the best products at a price that would make Mozart shout, “Wunderbar!” They want to find a Perl programmer who thrives on delivering quality content, well-executed user information that’s easy to understand, and is as committed to transparency and excellence as they are.</div>
    </content>
    <id>https://job.perl.careers/i2k</id>
    <published>2020-11-30T10:00:42Z</published>
    <updated>2020-11-30T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Distraction-free Workplace - Escape Standups and Scrum - Perl Developer West London</title>
    <link rel="alternate" href="https://job.perl.careers/yt2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Client is a small development team where everyone is expected to pull their own weight. No daily standups, no planning poker, just you and your work, aided by some of the most experienced technical colleagues in London. You’ll be encouraged to make sensible use of Modern Perl tooling and grow your personal experience of best development practices under excellent technical leadership.</div>
    </content>
    <id>https://job.perl.careers/yt2</id>
    <published>2020-11-30T10:00:41Z</published>
    <updated>2020-11-30T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Paging Dr. Perl! Perl Role in Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/s2w" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This organization is one of the world’s leading developers of medical diagnostic technologies and clinical software. They believe in security, wellness, and the importance of driving innovation to deliver patient benefit. You won’t be in a white coat, but it’s better than that—your work will be used by the NHS, research labs, and healthcare providers worldwide.</div>
    </content>
    <id>https://job.perl.careers/s2w</id>
    <published>2020-11-30T10:00:40Z</published>
    <updated>2020-11-30T10:00:40Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-11-30T10:00:39Z</published>
    <updated>2020-11-30T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-11-30T10:00:38Z</published>
    <updated>2020-11-30T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-11-30T10:00:37Z</published>
    <updated>2020-11-30T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Starship Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/</id>
    <published>2020-11-30T10:00:36Z</published>
    <updated>2020-11-30T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Quantum::Superpositions, 2021 election</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 3, 2020, 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/</id>
    <published>2020-11-30T10:00:35Z</published>
    <updated>2020-11-30T10:00:35Z</updated>
  </entry>
  <entry>
    <title>COVID 19 charts by DungeonTiger</title>
    <link rel="alternate" href="https://code-maven.com/covid-19-charts-by-dungeontiger" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Screencast showing a GitHub pages project where the content is re-generated twice a day with a scheduled GitHub Actions job.</div>
    </content>
    <id>https://code-maven.com/covid-19-charts-by-dungeontiger</id>
    <published>2020-11-30T10:00:34Z</published>
    <updated>2020-11-30T10:00:34Z</updated>
  </entry>
  <entry>
    <title>CPAN Digger - CPAN Dashboard - CPAN Rocks</title>
    <link rel="alternate" href="https://perlmaven.com/cpan-digger-dashboard-rocks" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Screencast showing you around three projects: CPAN Digger by Gabor Szabo, CPAN Dashboard by Dave Cross, both written in Perl and hosted on GitHub pages. Also, CPAN Rocks by James Raspass, written in Raku and hosted on GitLab.</div>
    </content>
    <id>https://perlmaven.com/cpan-digger-dashboard-rocks</id>
    <published>2020-11-30T10:00:33Z</published>
    <updated>2020-11-30T10:00:33Z</updated>
  </entry>
  <entry>
    <title>GitLab CI for Perl projects</title>
    <link rel="alternate" href="https://perlmaven.com/gitlab-ci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A list of Perl projects hosted on GitLab that already have GitLab CI enabled. Some projects to learn from.</div>
    </content>
    <id>https://perlmaven.com/gitlab-ci</id>
    <published>2020-11-30T10:00:32Z</published>
    <updated>2020-11-30T10:00:32Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-11-30T10:00:31Z</published>
    <updated>2020-11-30T10:00:31Z</updated>
  </entry>
  <entry>
    <title>2020.47 Present Release</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2020/11/23/2020-47-present-release/" type="text/html"/>
    <id>https://rakudoweekly.blog/2020/11/23/2020-47-present-release/</id>
    <published>2020-11-30T10:00:30Z</published>
    <updated>2020-11-30T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Use Perl::Tidy module in your application</title>
    <link rel="alternate" href="https://perlmaven.com/use-perl-tidy-in-your-application" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simple example showing how to use Perl::Tidy as a module, rather than as a command line tool, embedded in your application.</div>
    </content>
    <id>https://perlmaven.com/use-perl-tidy-in-your-application</id>
    <published>2020-11-30T10:00:29Z</published>
    <updated>2020-11-30T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge - 088</title>
    <link rel="alternate" href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/walt-mankowski/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Walt used state variables very elegantly to solve the Spiral Matrix task.</div>
    </content>
    <id>https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/walt-mankowski/README.md</id>
    <published>2020-11-30T10:00:28Z</published>
    <updated>2020-11-30T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 088</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-088-5c5f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon presenting a step-by-step solution to the Spiral Matrix is interesting.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-088-5c5f</id>
    <published>2020-11-30T10:00:27Z</published>
    <updated>2020-11-30T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="https://samirparikh.com/blog/perl-weekly-challenge-088.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The best part of this blog post is the discussion of the Spiral Matrix solution. Must Read.</div>
    </content>
    <id>https://samirparikh.com/blog/perl-weekly-challenge-088.html</id>
    <published>2020-11-30T10:00:26Z</published>
    <updated>2020-11-30T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Spiral Product</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_88__Spiral_Product.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's blog post is not limited to a Perl solution. You will find comparable solutions in other languages too.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_88__Spiral_Product.html</id>
    <published>2020-11-30T10:00:25Z</published>
    <updated>2020-11-30T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="https://v.kolouch.org/nextcloud/index.php/apps/cms_pico/pico/lubos/20201128_perl_weekly_088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lubos writing Perl and Python side by side is really interesting. He makes it easy to read.</div>
    </content>
    <id>https://v.kolouch.org/nextcloud/index.php/apps/cms_pico/pico/lubos/20201128_perl_weekly_088</id>
    <published>2020-11-30T10:00:24Z</published>
    <updated>2020-11-30T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Array of Products and Spiral Matrices</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent writing Raku first then porting the code to Perl is really cool. His contributions in Perl and Raku are equally great.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html</id>
    <published>2020-11-30T10:00:23Z</published>
    <updated>2020-11-30T10:00:23Z</updated>
  </entry>
  <entry>
    <title>PWC088 - Spiral Matrix</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/27/pwc088-spiral-matrix/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's style of question and answer in his blog post makes me think again and again.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/27/pwc088-spiral-matrix/</id>
    <published>2020-11-30T10:00:22Z</published>
    <updated>2020-11-30T10:00:22Z</updated>
  </entry>
  <entry>
    <title>PWC088 - Array of Product</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/26/pwc088-array-of-product/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio continued his weekly challenge journey, having so much fun.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/26/pwc088-array-of-product/</id>
    <published>2020-11-30T10:00:21Z</published>
    <updated>2020-11-30T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challege: 088</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2020/11/perl_weekly_challenge_week_88.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the blogging style used by Jaldhar; keeping track of the code while discussing the solution.</div>
    </content>
    <id>https://www.braincells.com/perl/2020/11/perl_weekly_challenge_week_88.html</id>
    <published>2020-11-30T10:00:20Z</published>
    <updated>2020-11-30T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 088 -- Array of Prodict vs Spiral Matrix</title>
    <link rel="alternate" href="https://gugod.org/2020/11/pwc-088-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min's use of map to keep track of direction is really nice. His blog post shows the real power of Raku.</div>
    </content>
    <id>https://gugod.org/2020/11/pwc-088-en/</id>
    <published>2020-11-30T10:00:19Z</published>
    <updated>2020-11-30T10:00:19Z</updated>
  </entry>
  <entry>
    <title>The Product of the Absence – Spiralize the Day Away</title>
    <link rel="alternate" href="https://colincrain.com/2020/11/29/the-product-of-the-absence-spiralize-the-day-away/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin, our in-house Perl Reviewer, came up with an interesting blog post showing the power of Perl and Raku.</div>
    </content>
    <id>https://colincrain.com/2020/11/29/the-product-of-the-absence-spiralize-the-day-away/</id>
    <published>2020-11-30T10:00:18Z</published>
    <updated>2020-11-30T10:00:18Z</updated>
  </entry>
  <entry>
    <title>CY's Take on PWC#088</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cheok-Yin's blog is always fun to read. Plenty to absorb on the meat of the solution.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html</id>
    <published>2020-11-30T10:00:17Z</published>
    <updated>2020-11-30T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Arrayed Spiral with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/arrayed-spiral.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne's use of a mapping analogy for the Spiral Matrix is the coolest approach. We are blessed to have both Perl and Raku versions this week.</div>
    </content>
    <id>https://raku-musings.com/arrayed-spiral.html</id>
    <published>2020-11-30T10:00:16Z</published>
    <updated>2020-11-30T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/29" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam keeps the discussion short and sweet.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/29</id>
    <published>2020-11-30T10:00:15Z</published>
    <updated>2020-11-30T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/29/perl-weekly-challenge-88-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail has been a great supporter and this blog contribution is the talk of the town.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/29/perl-weekly-challenge-88-part-2/</id>
    <published>2020-11-30T10:00:14Z</published>
    <updated>2020-11-30T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/27/perl-weekly-challenge-88-part-1/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This blog post goes into the finer details of the task in terms of Perl, C and Node.js.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/27/perl-weekly-challenge-88-part-1/</id>
    <published>2020-11-30T10:00:13Z</published>
    <updated>2020-11-30T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Meet The Champion - Andrew Shitov</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-10/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Finally we managed to get this interview done. Well worth the wait, imho.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/meet-the-champion-2020-10/</id>
    <published>2020-11-30T10:00:12Z</published>
    <updated>2020-11-30T10:00:12Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 088</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC, dealing with the "Array of Products" and "Spiral Matrix" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-088</id>
    <published>2020-11-30T10:00:11Z</published>
    <updated>2020-11-30T10:00:11Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 089</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "GCD Sum" and "Magical Matrix". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the <a href="https://perlweeklychallenge.org/faq">FAQ</a>.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-089</id>
    <published>2020-11-30T10:00:10Z</published>
    <updated>2020-11-30T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for October 2020</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/dave-report-2020-october" type="text/html"/>
    <id>https://news.perlfoundation.org/post/dave-report-2020-october</id>
    <published>2020-11-30T10:00:09Z</published>
    <updated>2020-11-30T10:00:09Z</updated>
  </entry>
  <entry>
    <title>CPAN Digger explained</title>
    <link rel="alternate" href="https://perlmaven.com/cpan-digger-explained" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Gabor shared the internals of CPAN Digger.</div>
    </content>
    <id>https://perlmaven.com/cpan-digger-explained</id>
    <published>2020-11-30T10:00:08Z</published>
    <updated>2020-11-30T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Variables, loops, and redirections</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/23/variables-loops-redirections/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting discussion about the very basics of variables, loops and redirections.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/23/variables-loops-redirections/</id>
    <published>2020-11-30T10:00:07Z</published>
    <updated>2020-11-30T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Peek in containers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/29/peek-in-containers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Take a peek into containers with this short blog post.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/29/peek-in-containers/</id>
    <published>2020-11-30T10:00:06Z</published>
    <updated>2020-11-30T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Put a file in a Kubernetes Pod</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/24/kube-put/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio has another gem of a blog post showing how to put a file in a Kubernetes pod.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/24/kube-put/</id>
    <published>2020-11-30T10:00:05Z</published>
    <updated>2020-11-30T10:00:05Z</updated>
  </entry>
  <entry>
    <title>A few tips for Perl on Docker and Kubernetes</title>
    <link rel="alternate" href="https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A very handy introduction for anyone trying to get their hand dirty.</div>
    </content>
    <id>https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg</id>
    <published>2020-11-30T10:00:04Z</published>
    <updated>2020-11-30T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 5; DevTo: 5; Perl.com: 0; PerlAcademy: 2; PerlHacks: 0; PerlMaven: 4; Reddit: 17; TPF: 1;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-11-30T10:00:03Z</published>
    <updated>2020-11-30T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://metacpan.org/recent" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 171 uploads to CPAN of 137 distinct distributions by 80 different authors. Number of distributions with link to VCS: 94. Number of distros with CI: 44. Number of distros with bugtracker: 66.</div>
    </content>
    <id>https://metacpan.org/recent</id>
    <published>2020-11-30T10:00:02Z</published>
    <updated>2020-11-30T10:00:02Z</updated>
  </entry>
  <entry>
    <title>The Pearls of Perl - The top 10 Perl tools for every developer</title>
    <link rel="alternate" href="https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">From A (Ack) to Z (Dist-Zilla), check out the &lt;a href="https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition"&gt;10 Perl tools&lt;/a&gt; that should be in every developer’s toolbox. Or Download our &lt;a href="https://platform.activestate.com/Pizza-Team/Pearls-of-Perl?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition"&gt;“Pearls of Perl”&lt;/a&gt; build to get a version of Perl 5.28 with all the tools listed in this post so you can test them out for yourself!</content>
    <id>https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition</id>
    <published>2020-11-30T10:00:01Z</published>
    <updated>2020-11-30T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#488 - Advent Calendar 2020</title>
    <link rel="alternate" href="http://perlweekly.com/archive/488.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>It is time to get ready for 2020's Advent Calendars. Last year's Advent was the best so far as there was a flood of Advent Calendars. Most notable were the <a href="http://www.perladvent.org/2019/">Perl</a> and <a href="https://perl6advent.wordpress.com/2019/12/">Raku</a> Advent Calendars. The best of all was the one by <a href="https://andrewshitov.com/category/advent-calendar-2019/">Andrew Shitov</a>, where we were introduced to a new language every day.</p>
<p>So what do I expect in the COVID-19 year, 2020?</p>
<p>Well, first of all, I would like to have the Advent Calendar for Dancer2 back. I missed it dearly last year. Dancer2 is very close to my heart. I had the honour to be part of this Advent Calendar once in the past. Whoever is responsible this year, please don't let us down this time.</p>
<p>Have you contributed to Perl/Raku Advent Calendar?</p>
<p>If not, then why not give it a try? For me it is like getting your name in the history books forever. Last year, I contributed to the Raku Advent Calendar for the first time. Before that, I had the pleasure to be part of the Perl Advent Calendar. The best part of any Advent Calendar is the element of surprise. Every day brings a new fun subject to explore.</p>
<p>My pet project <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a> also created its first <a href="https://perlweeklychallenge.org/blog/advent-calendar-2019/">Advent Calendar</a> last year. I haven't had the time to plan this year's Advent Calendar. But, having said that, I will do my best to not disappoint fans of The Weekly Challenge.</p>
<p>Is that all for us in the month of December?</p>
<p>Well, no. There is another fun challenge for those who enjoy contributing to open source codebases and it is called <a href="https://24pullrequests.com/">24 Pull Requests</a>. I haven't had as good a time contributing in the year 2019 compared to my past records, for many reasons. Having said that, I will be taking part again this year and hope to complete the challenge without fail.</p>
<p>We would love to know your plans with regard to Advent Calendars or 24 Pull Requests. Please do share your story with us. Last, but not least, please do take care of yourself and your family. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/488.html</id>
    <published>2020-11-30T10:00:00Z</published>
    <updated>2020-11-30T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>My Advent of Code 2019</title>
    <link href="http://domm.plix.at/perl/2020_11_a_very_late_advent_of_code_2019_review.html"/>
    <id>http://domm.plix.at/perl/2020_11_a_very_late_advent_of_code_2019_review.html</id>
    <updated>2020-11-29T19:15:16+00:00</updated>
    <category term="perl"/>
    <summary type="html">I wrote this during and shortly after Advent of Code 2019, but never published it here. Which I'm doing now, just in time before the new 2020 edition :-) I again plan to take part this year (and ...</summary>
    <content type="html">&lt;p&gt;I wrote this during and shortly after &lt;a href="https://adventofcode.com/2019"&gt;Advent of Code 2019&lt;/a&gt;, but never published it here. Which I'm doing now, just in time before the new 2020 edition :-) I again plan to take part this year (and we've set up a private leaderboard, if you want to join, contact me), but hopefull I'll manage to get a bit less involved..&lt;/p&gt;

&lt;p&gt;My code can be found &lt;a href="https://github.com/domm/adventofcode2019"&gt;on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solutions in Perl.&lt;/p&gt;

&lt;p&gt;Most of the time I use &lt;a href="http://timetracker.plix.at/"&gt;App::TimeTracker&lt;/a&gt; to see how long it takes me. I generally try the first part after getting up (~8:00 CET), and the second part after my morning yoga or (depending on work stress / problem complexity) later during the day.&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;A very easy start..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 3:00 / 12:14&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 7494 / 6679&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;We meet Intcode, and I try out some new Perl features. Read more about it &lt;a href="https://domm.plix.at/perl/2019_12_advent_of_code_intcode.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 23:00 / 06:55 / plus more to clean up Intcode.pm&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 5952 / 5091&lt;/p&gt;

&lt;h2&gt;Day 3&lt;/h2&gt;

&lt;p&gt;Not very hard, but I used an array to map all the wires instead of an hash to only index the coordinates, which makes the program not very fast. Oh, and I had a "Lattenzaun" error in the second part (which I realized after getting the wrong answer, and I just corrected the error in my head but not in the code; sorry, &lt;a href="https://github.com/grauwolf"&gt;Farhad&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 36:42 / 14:32&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4363 / 3493&lt;/p&gt;

&lt;h2&gt;Day 4&lt;/h2&gt;

&lt;p&gt;Another simple brute force attack...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; ? / 20:33&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 6324 / 5266&lt;/p&gt;

&lt;h2&gt;Day 5&lt;/h2&gt;

&lt;p&gt;Yay, I can reuse Intcode.pm. Oh no, the new &lt;code&gt;modes&lt;/code&gt; do not work at all with my previous implementation... hence the long time it took me to solve part 1. And my solution to parse the modes is very ugly (Read about it &lt;a href="https://domm.plix.at/perl/2019_12_advent_of_code_intcode_day_5.html"&gt;here&lt;/a&gt; where I also describe how I rewrote / cleaned up Intcode)&lt;/p&gt;

&lt;p&gt;But adding the new opcodes from part 2 was easy and they fit quite well into Intcode.pm!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 1:26:08 / 21:06&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4192 / 3524&lt;/p&gt;

&lt;h2&gt;Day 6&lt;/h2&gt;

&lt;p&gt;Again a not-so-hard problems: graphs. Which I solved by reversing the graph into an array...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/adventofcode/comments/e6tyva/2019_day_6_solutions/f9vjikv/?context=3"&gt;Here&lt;/a&gt; is a slightly golfed solution for part 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 13:35 / 11:45&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3557 / 2981&lt;/p&gt;

&lt;h2&gt;Day 7&lt;/h2&gt;

&lt;p&gt;Intcode again. The first example was not too hard; as I have implemented Intcode in a class, I can just have several instances of the class in one script, where each instance has its own memory.&lt;/p&gt;

&lt;p&gt;But part 2 took me ages (about 2 hours, but I was also watching "TV"), mostly because I did not understood how the inputs / signal / phase settings have to be provided to the amplifiers. Only after reading some of the posts on reddit I understood what I was supposed to do.&lt;/p&gt;

&lt;p&gt;And I also had to change the whole input/output handling if Intcode...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; ? / ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4194 / 6490&lt;/p&gt;

&lt;h2&gt;Day 8&lt;/h2&gt;

&lt;p&gt;Some simple Hash / Array munging again. It took me quite a while to realize that I had to actually "render" the image for part 2, so I can read the message...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 20:52 / 20:09&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 6175 / 5624&lt;/p&gt;

&lt;h2&gt;Day 9&lt;/h2&gt;

&lt;p&gt;Intcode day!&lt;/p&gt;

&lt;p&gt;The large numbers / large memory hints did not bother my Intcode, and the one new opcode / mode was easy to implement. But I wasn't reading the instructions very carefully and did not implement &lt;code&gt;relative mode&lt;/code&gt; for writes, which cost me at least 15min of debugging... But task 2 was very easy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 26:22 / 1:12&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2651 / 2597&lt;/p&gt;

&lt;h2&gt;Day 10&lt;/h2&gt;

&lt;p&gt;That was a tough one. It took me rather long to understand that the asteroids on the map are tiny points and do not take up the whole block (but it says so very clear in the instructions..). But after grabbing some graph paper and drawing the map I realized that this is not an array problem, but has to be solved with vectors. So, &lt;strong&gt;math&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://metacpan.org/pod/Math::Vec"&gt;Math::Vec&lt;/a&gt; (because it came up first on CPAN) to calculate the unit vector (or "Einheitsvektor", which sound much cooler in German..), and using this unit vector it was trivial to filter out vectors pointing in the same direction.&lt;/p&gt;

&lt;p&gt;After that, I needed a break, and finished the second task in the evening, using a very stupid approach to calculate the angle via tangens, and the sorting the asteroids by angle to nuke them. Even though I was quite proud that I still remembered enough math from school to cobble together my code (using some online math tutorials for the math details), I have the feeling that there are way more elegant solutions than mine...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 1:07:32 / 30:34&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt;  2441 / 4853&lt;/p&gt;

&lt;h2&gt;Day 11&lt;/h2&gt;

&lt;p&gt;Intcode again, but this time there were no changes to the "compiler" necessary, just a simple program using Intcode. For the second part I remembered to "render" the result, reusing the code from day 8 to dump the array in a format where I can read the generated code.&lt;/p&gt;

&lt;p&gt;Oh, and I was very lazy and just used a rather big two-dimensional array for the hull, of which only a small part was actually used. But I did not want to handle negative array indices...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 22:22 / 5:20&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2370 / 2617&lt;/p&gt;

&lt;h2&gt;Day 12&lt;/h2&gt;

&lt;p&gt;The first part was rather easy and straightforward (though my code is overly verbose and can probably be compacted to a few lines of dense Perl). For the second part, I was quite sure that I need to use the least common multiple (LCM), but when I calculated it based on the whole position/vector sets, I got wrong results.&lt;/p&gt;

&lt;p&gt;After reading reddit, I figured out (from various code fragments) that I can calculate each axis on its own, look for the repetition there, and then use the LCM of the first rep on each axis. Which was easy to implement, but I still have no clue &lt;strong&gt;why&lt;/strong&gt; this works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 36:50 / 26:31 + a bit more after reading reddit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3035 / 2071&lt;/p&gt;

&lt;h2&gt;Day 13&lt;/h2&gt;

&lt;p&gt;Part one was a rather easy Intcode exercise, part two not so much.&lt;/p&gt;

&lt;p&gt;As I did not want to play the game, I thought I could cheat by looking at the Intcode source of the game to figure out how the scores are calculated. I wasted an hour adding debugging and introspection to Intcode, but made no progress, so I stopped (and baked a cake).&lt;/p&gt;

&lt;p&gt;Later I added a manual interface so I could actually play the game, the interface was very clunky and I always died before even coming close to cleaning the board. Reddit suggested writing some AI to steer the paddle, which I did (with a lot of hilarious mistakes on my part) and took me another hour.&lt;/p&gt;

&lt;p&gt;But in the end I got a working solution! I added an option to render the game play (at different speeds), and later learned to use &lt;code&gt;byzanz-record&lt;/code&gt; to record my term to a &lt;a href="https://github.com/domm/adventofcode2019/blob/master/13_2.gif"&gt;gif&lt;/a&gt;. To make this nicer, I used some simple unicode chars to render the game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 07:34 / 02:01:16 plus some time for cleanup and recording a gif&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2692 / 3338&lt;/p&gt;

&lt;h2&gt;Day 14&lt;/h2&gt;

&lt;p&gt;Things start to get annoyingly complex, not sure I want too keep up with it for a lot longer...&lt;/p&gt;

&lt;p&gt;In theory, the task looked simple (walk a chain of dependencies, and calculate some sums), but the fact that each reaction produced weird amount of chemicals, and that you have to use the leftovers made this my most-hated task (up to now..). I worked an hour during the late afternoon, and two more after coming back from a friends exhibition.&lt;/p&gt;

&lt;p&gt;The second part was then quite easy, though I got some errors because I forgot to reset the leftovers between each run. And I was too lazy to implement a binary search, and just did a quick guesstimate from the commandline, and then run a stupid incrementing brute force attack (all of which took another 20min, but at 1:00 in the morning...)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 02:53:16 / 00:19:12&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4954 / 4337&lt;/p&gt;

&lt;h2&gt;Day 15&lt;/h2&gt;

&lt;p&gt;I hardly notice that I'm using Intcode anymore :-)&lt;/p&gt;

&lt;p&gt;Getting to move the droid through the maze was not that hard, but I could not figure out how to implement a proper maze solver, so I went for a "random mouse" approach, which I later finetuned to not enter known dead-ends again.&lt;/p&gt;

&lt;p&gt;I actually found the oxygen system quite fast using a pure random
approach, but spend about 30 minutes implementing the dead-end
detection (because some random runs took ages, and I didn't figure out
how to calculate the minimum distance)&lt;/p&gt;

&lt;p&gt;Getting the minimum distance turned out to be quite easy: I just
counted the steps and stored them at each coordinate; if I later
backtracked through an already visited point, I started counting again
from the distance stored there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/domm/adventofcode2019/master/15_1.gif"&gt;Here is a gif for part 1&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For the second part I took a maybe weird approach: From a previous
run, I had a complete map lying around (when the random mouse was very
thorough), so I applied 4 regex to simulate the spread of the
oxygen:&lt;/p&gt;

&lt;p&gt;```
$maze=~s/.O/oO/g;               # spread left
$maze=~s/O(.{$width})./O$1o/sg; # spread down&lt;/p&gt;

&lt;h1&gt;etc&lt;/h1&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I missed a few corner cases in my first try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s/.O/OO/g&lt;/code&gt; would allow the next regex to pick up an oxygen that was just generated, so I changed the 4 regex to &lt;code&gt;s/.O/Oo/g&lt;/code&gt; and then converted &lt;code&gt;o&lt;/code&gt; to &lt;code&gt;O&lt;/code&gt; after all where done.&lt;/li&gt;
&lt;li&gt;a bit trickier to catch was that if there were two up/downward spreads in the same row, only one would match, so I packed each regex into a while-loop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/domm/adventofcode2019/master/15_2.gif"&gt;And here is a gif for part 2&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 02:05:27 / 00:45:56&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3015 / 2794&lt;/p&gt;

&lt;h2&gt;Day 16&lt;/h2&gt;

&lt;p&gt;A not too hard first part (though my solution is rather convoluted), and a second part I could have never solved without reddit and looking at various solutions.&lt;/p&gt;

&lt;p&gt;I found [this comment]:https://www.reddit.com/r/adventofcode/comments/ebf5cy/2019_day_16_part_2_understanding_how_to_come_up/fb4a34p especially helpful. As pointed out on reddit, the sequence we are looking for is always in the second half of the signal. But the pattern for the second half will only consist of 0 and 1. So we can calculate the next row by working through the current row from behind:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ?  ?  ?  ?
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Work from right to left (i.e. reverse the list). For the last digit, just copy the last digit to the next row (because the last &lt;code&gt;pattern&lt;/code&gt; will always be  &lt;code&gt;… 0 0 0 1&lt;/code&gt;, so we need to add a lot of zeros to &lt;code&gt;1 * last digit&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ?  ?  ?  8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From then on, take the current digit and add the all the following digits, because the pattern will always be &lt;code&gt;… 0 1 1+&lt;/code&gt;. But as we store the sum of this calculation into the next row, we don't have to always calc this long sum. We can just re-use the result of the last calculation, i.e. the field in the next phase we have just calculated:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9 &amp;gt;9&amp;lt; 8
next_phase: ... ?  ?  ? &amp;gt;8&amp;lt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;8 + 9 = 17&lt;/code&gt;, take the last digit (i.e. &lt;code&gt;modulo 10&lt;/code&gt;) and store it in the next phase&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ?  ? &amp;gt;7&amp;lt; 8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the next phase the pre-calced sum trick should be obvious:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ? &amp;gt;?&amp;lt; 7 8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We could do &lt;code&gt;9 + 9 + 8 = 16&lt;/code&gt;. But we have just calculated &lt;code&gt;9 + 8 = 17 =&amp;gt; mod 10 =&amp;gt; 7&lt;/code&gt; and stored this in the next row. And thanks to math, &lt;code&gt;9 + 7 = 16 =&amp;gt; mod 10 =&amp;gt; 6&lt;/code&gt; yields the same result as &lt;code&gt;9 + 9 + 8 = 16 =&amp;gt; mod 10 =&amp;gt; 6&lt;/code&gt;. yay!&lt;/p&gt;

&lt;p&gt;so, this will be much quicker: 9 + 7 = 16 =&gt; 6; 6 + 6 = 12 =&gt; 2, ...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 36:38 / at least 2 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2612 / 2374 - wow, good rank at 12:52:09 :-)&lt;/p&gt;

&lt;h2&gt;Day 17&lt;/h2&gt;

&lt;p&gt;That was a nice one, by favorite puzzle so far!&lt;/p&gt;

&lt;p&gt;The first part was rather easy, just convert the Incode output to ASCII and then walk the map to find intersections.&lt;/p&gt;

&lt;p&gt;For the second part, it took me some time to rework my run-loop to handle all the input/output (I should really add a proper &lt;code&gt;prompt&lt;/code&gt; method to Intcode). I really liked the "live video feed" feature and spend some time implementing a clear-screen feature so I can properly view the feed.&lt;/p&gt;

&lt;p&gt;For solving the actual puzzle, I was too lazy to implement anything. Instead I just counted the steps / directions by hand, wrote them down, and very easily spotted the correct pattern. This took my less then 10 minutes, considerably faster then any smart solution I could code (the human brain &lt;strong&gt;is&lt;/strong&gt; a quite powerful computer / pattern detector, especially when we're only caring about one case...)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 28:24 / 56:41 (45min to get IO etc working, then 10 minutes to solve the maze by hand)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2072 / 1062 (damn it, just missed 3 digits, but best rank ever)&lt;/p&gt;

&lt;h2&gt;Day 18&lt;/h2&gt;

&lt;p&gt;No, thanks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: - / -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; - / -&lt;/p&gt;

&lt;h2&gt;Day 19&lt;/h2&gt;

&lt;p&gt;Part 1 was another easy Intcode test. Part 2 was not that hard (in the end), but I managed to fuck up quite spectacularly.&lt;/p&gt;

&lt;p&gt;First I was doing a lookahead 100 rows down, but always used the same y coordinate. But of course you have to go to the end of the current row, subtract 100 and look down from there. As I wasn't finding anything, I did quite some calculations on the slope of the beam, and jumped 10.000 rows ahead. But I could never find something because I was looking in the wrong place.&lt;/p&gt;

&lt;p&gt;After I realized that I implemented a proper lookahead, but I called my &lt;code&gt;scan&lt;/code&gt; function with bad params (I forgot to pass in the row, so I was always checking the 0th row... I guess one can find an argument for strong typing or at least param validation / signatures here...)&lt;/p&gt;

&lt;p&gt;After I fixed that, I found the result reasonably fast using brute force (and some skipping).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 08:59 / 02:47:06&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 1731 / 1862&lt;/p&gt;

&lt;h2&gt;Day 20&lt;/h2&gt;

&lt;p&gt;ugh, another maze. I still don't feel like a rat, so another skip for me...&lt;/p&gt;

&lt;p&gt;But maybe I should learn how to write a maze solver some time before next advent :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: - / -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; - / -&lt;/p&gt;

&lt;h2&gt;Day 21++&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;if ($holidays-&amp;gt;started) { $me-&amp;gt;stop('advent') }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I might do some/all tasks later...&lt;/p&gt;

&lt;h2&gt;Day 22 (part 2 done on the 28th)&lt;/h2&gt;

&lt;p&gt;Some simple array munging, which does not scale for part 2 :-(&lt;/p&gt;

&lt;p&gt;I "solved" part 2 on the 28th; even after reading a lot of the reddit posts, I had no idea how to implement the math. So I took the Python code found &lt;a href="https://www.reddit.com/r/adventofcode/comments/ee0rqi/2019_day_22_solutions/fbpz92k"&gt;here&lt;/a&gt; and reimplemented it in Perl, which is rather convoluted thanks to Math::BigInt (well, at least it works...). But after getting the correct result, I figured out how to replace most of the method calls like &lt;code&gt;bmul&lt;/code&gt; and &lt;code&gt;bsub&lt;/code&gt; with overloaded operators, making the final code much cleaner (and more similar to the Python solution).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 32:06 / 01:24:17&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2984 / 2617&lt;/p&gt;

&lt;h2&gt;Day 23 (done on 27th evening)&lt;/h2&gt;

&lt;p&gt;Some nice Intcode hacking, I added some more helpers to my Intcode (and needed to finally add buffered output..)&lt;/p&gt;

&lt;p&gt;Part 1 was rather easy and straight-forward: set up 50 Intcode machines, loop through each one, set some input, get the output and set the next inputs.&lt;/p&gt;

&lt;p&gt;Part 2 was basically the same, but I had a problem in my Intcode, where output values would be lost unless you very carefully collect return values. As this was too fragile, I finally added some buffered output helper methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 33:04 / 01:09:23&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3463 / 3328&lt;/p&gt;

&lt;h2&gt;Day 24 (done on 27th morning)&lt;/h2&gt;

&lt;p&gt;The first part was a rather easy Game Of Life, which I implemented using nested arrays.&lt;/p&gt;

&lt;p&gt;For the second part I converted my data structure to an hash using a string for level/row/col (&lt;code&gt;-3;1;3&lt;/code&gt;) for the index. I solved the recursion by pushing new layer-tiles onto a queue (well, an array...), but somehow added a new layer each minute, resulting in a lot of empty layers. But as the runtime is 14s, I'm not very motivated to fix that bug. Oh, and I lost aprox 10 minutes because I still used the test data when submitting my result (and then tried to figure out what the bug could be..)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 33:44 / 1:56:39&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3975 / 2896&lt;/p&gt;

&lt;h2&gt;Day 25&lt;/h2&gt;

&lt;p&gt;Hm, it was very easy to get some Intcode processor to manually explore the ship and figure out which items to collect where. Then it took me ages to correctly use Math::Combinatorics to get all the combinations of items to try. And in the end my Intcode just crashed after providing the hopefully correct solution (which I fixed now, see next para)&lt;/p&gt;

&lt;p&gt;I verified my solution using &lt;a href="https://github.com/choroba/"&gt;somebody elses&lt;/a&gt; solution. ~~So it seems there is a bug in my Intcode???~~ No, the problem was that for debugging I buffered the output, but did not print the output after the last iteration. D'oh!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 2:17:57 / -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2142 / -&lt;/p&gt;
</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/29#pwc088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2 id="part-1">Part 1</h2>
<p><em>You are given an array of positive integers <span class="citation" data-cites="N">@N</span>. Write a script to return an array <span class="citation" data-cites="M">@M</span> where $M[i] is the product of all elements of <span class="citation" data-cites="N">@N</span> except the index $N[i].</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given an array of positive integers @N.
# Write a script to return an array @M where $M[i] 
# is the product of all elements of @N except the index $N[i].
##
sub list_product{
    my @numbers = @_;
    my $product = 1;
    map {$product *= $_ } @numbers;
    return $product;
}

MAIN:{
    my(@N, @M);
    @N = (5, 2, 1, 4, 3);
    for my $i (0 .. (@N - 1)){
        my @numbers = @N[0 .. $i - 1, $i+1 .. (@N - 1)];
        push @M, list_product(@numbers);
    }
    print "(" . join(", ", @M) . ")\n";
    @M = ();
    @N = (2, 1, 4, 3);
    for my $i (0 .. (@N - 1)){
        my @numbers = @N[0 .. $i - 1, $i+1 .. (@N - 1)];
        push @M, list_product(@numbers);
    }
    print "(" . join(", ", @M) . ")\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
(24, 60, 120, 30, 40)
(12, 24, 6, 8)
</code></pre>
<h3 id="notes">Notes</h3>
<p>Taking the product of a list of numbers is a well known perl idiom using <a href="https://perldoc.perl.org/functions/map">map</a>. To keep the code somewhat cleaner I placed the list_product computation in it’s own subroutine. The trickiest part, then, is to make sure the list has the right element removed. This is done using array slices. as we loop over the array of numbers we construct a list of indices which do not include the current element.</p>
<p>Another possible approach would be to use a <code>map</code> inside the loop to identify the elements we want to retain. I decided against that approach since it would be a second complete full iteration over the list. To be fair, I don’t necessarily try to always make these challenge solutions all that efficient, but this just happened to strike me as particularly egregious at the time!</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given m x n matrix of positive integers. Write a script to print spiral matrix as a list.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given m x n matrix of positive integers.
# Write a script to print spiral matrix as a list.
##
sub print_remove_top{
    my(@matrix) = @_;
    print join(", ", @{$matrix[0]}) . ", ";
    splice(@matrix, 0, 1);
    return @matrix;
}

sub print_remove_right{
    my(@matrix) = @_;
    my @right;
    for my $row (@matrix){
        push @right, $row-&gt;[-1];
        my @a = @{$row}[0 .. (@{$row} - 2)];
        $row = \@a;
    }
    print join(", ", @right) . ", ";
    return @matrix;
}

sub print_remove_bottom{
    my(@matrix) = @_;
    print join(", ", reverse(@{$matrix[-1]})) . ", ";
    splice(@matrix, -1);
    return @matrix;
}

sub print_remove_left{
    my(@matrix) = @_;
    my @left;
    for my $row (@matrix){
        push @left, $row-&gt;[0];
        my @a = @{$row}[1 .. (@{$row} - 1)];
        $row = \@a;
    }
    print join(", ", reverse(@left)) . ", ";
    return @matrix;
}

sub spiral_print{
    my(@matrix) = @_;
    print "[";
    {
        @matrix = print_remove_top(@matrix) if @matrix;
        @matrix = print_remove_right(@matrix) if @matrix;
        @matrix = print_remove_bottom(@matrix) if @matrix;
        @matrix = print_remove_left(@matrix) if @matrix;
        redo if @matrix;
    }
    print "\b\b]\n";
}

MAIN:{
    spiral_print(
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    );
    spiral_print(
        [ 1,  2,  3,  4],
        [ 5,  6,  7,  8],
        [ 9, 10, 11, 12],
        [13, 14, 15, 16]
    );
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
[1, 2, 3, 6, 9, 8, 7, 4, 5] 
[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] 
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>The spiral print works in a repeated pattern from the outside in: top row, right column, bottom row, left column. My solution put each print/remove step of this pattern in their own subroutines. A few things worth pointing out</p>
<ul>
<li>The matrix is a 2d array: a perl array with inner array references.</li>
<li>In some cases I use <a href="https://perldoc.perl.org/functions/splice">splice</a> to remove from the matrix. <code>splice</code> doesn’t work on array references (since perl v5.24) so when needing to remove from the matrice’s inner array references I just use the slicing syntax.</li>
<li><a href="https://perldoc.perl.org/functions/redo">redo</a> looked better to me than the equivalent <code>while</code> loop although obviously either one would work fine.</li>
<li>for the spiral effect we need to print bottom up and right to left. In those cases I first use <a href="https://perldoc.perl.org/functions/reverse">reverse</a> on the elements being printed.</li>
</ul></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc088</id>
    <published>2020-11-29T13:56:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CY's Take on PWC#088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9969</id>

    <published>2020-11-29T12:06:36Z</published>
    <updated>2020-11-29T12:18:22Z</updated>

    <summary> If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email).This blogpost is not in shortage of unanswered questions... Task 1 Array of...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[
<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i><br /></p><p><br /></p><p>This blogpost is not in shortage of unanswered questions...<br /></p>



<h4>Task 1 Array of Product</h4>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">myproduct</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@arr</font>&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#&nbsp;short&nbsp;for&nbsp;"previous&nbsp;product"</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@arr</font>,&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#0000ff">$#arr</font>-<font color="#00007f">1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$entry</font>&nbsp;=&nbsp;<font color="#0000ff">$pre_prod</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$entry</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">$i</font>+<font color="#00007f">1.</font>.<font color="#0000ff">$#arr</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$i</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$entry</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
</tt></div>

<div>The above, I designed, is a prototype for multiplication (and division, if possible) when it is expensive to do mulitplication,
such as matrices. Since I don't know much about
<a href="https://en.wikipedia.org/wiki/Matrix_multiplication_algorithm">those algorithmic knowledge</a>, just leave the codes here for personal future digestion.</div>

<div>---</div>

<div>What I have submitted is an one-liner:</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$_</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br />
</tt></div>

<div><br /><br />I get another item for "investigation" here. Why doesn't the following line work?</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$i</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$i</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br /></tt>


<h4><br /></h4><h4>Task 2 Spiral Matrix</h4>

<h5>the Testing</h5>

<div>This is time for <tt>Test::Deep</tt> and <tt>Test::More</tt> again:</div>

<pre>cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,],
    [  7, 8, 9,  ]]),
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5  ]
, "Example 1");
cmp_deeply(
    flat([[  1,  2,  3,  4 ],
    [  5,  6,  7,  8 ],
    [  9, 10, 11, 12 ],
    [ 13, 14, 15, 16 ]]), 
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
, "Example 2");
cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,]]),
    [ 1, 2, 3, 6, 5, 4 ]
, "small test case");

cmp_deeply(
    flat([
    [ 2, 3, 5, 7],
    [11,13,17,19],
    [23,29,31,37],
    [41,43,47,53],
    [59,61,67,71]])
, [2, 3, 5, 7, 19, 37, 53, 71, 67, 61, 59,
    41, 23, 11, 13, 17, 31, 47, 43, 29]
, "prime numbers 5 x 4");
</pre>

<pre>$ perl ch-2.pl
1..4
ok 1 - Example 1
ok 2 - Example 2
ok 3 - small test case
ok 4 - prime numbers 5 x 4
</pre>

Or customize a test:

<pre>$ perl ch-2.pl 3 5 A B C D E F G H I J K L M N 
[A, B, C, D, E]
[F, G, H, I, J]
[K, L, M, N, O]
A, B, C, D, E, J, O, N, M, L, K, F, G, H, I
</pre>

<h5>the codes</h5>

<div>Honestly I did not plan much on the task. (I) I created a "helper matrix" (<tt>@helper_mat</tt>)
 to record which terms on the original matrix is traversed: traversed, 
1; not yet traversed, 0. (II) I went through the outermost terms -- the 
four sides -- of the matrix by counting off one by one. (III) I made use
 of a boolean variable <tt>$success_click</tt> to tackle the change of direction.</div>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">flat</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@mat</font>&nbsp;=&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff"><b>$_</b></font>[0]};&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$M</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$N</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$mat</font>[0]};<br />
<br />
<font color="#7f7f7f"><i>#&nbsp;(I)&nbsp;initialize&nbsp;of&nbsp;the&nbsp;helper&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@helper_mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@helper_mat</font>,&nbsp;[(<font color="#ffa500">"</font><font color="#ff0000">0</font><font color="#ffa500">"</font>)&nbsp;x&nbsp;<font color="#0000ff">$N</font>]&nbsp;<b>for</b>&nbsp;(0..<font color="#0000ff">$M</font>-<font color="#00007f">1</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;(&nbsp;&nbsp;0,&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;(&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>,&nbsp;&nbsp;0&nbsp;);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$r</font>,&nbsp;<font color="#0000ff">$c</font>)&nbsp;=&nbsp;(&nbsp;0&nbsp;,&nbsp;0&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(I)</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<font color="#7f7f7f"><i>#&nbsp;(II): &nbsp;preparation&nbsp;of&nbsp;clockwise&nbsp;traverse&nbsp;of&nbsp;the&nbsp;outermost&nbsp;part&nbsp;of&nbsp;the&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br />
<font color="#7f7f7f"><i>(II): traverse the outermost matrix terms</i></font><font color="#7f7f7f"><i><br />
</i></font>
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$q</font>&nbsp;(0.<font color="#00007f">.3</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">@</font>{<font color="#0000ff">$numbering</font>[<font color="#0000ff">$q</font>]})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(II)</i></font><br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;<font color="#00007f">3</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$count</font>&nbsp;&lt;&nbsp;<font color="#0000ff">$M</font>*<font color="#0000ff">$N</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$success_click</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;==&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$count</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)&nbsp;</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;(<font color="#0000ff">$time_now</font>+<font color="#00007f">1</font>)&nbsp;%&nbsp;4;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
<br />
</tt></div>

<h5>Extras</h5>

<div><i>Here I am going to describe two extra functionalities I added:</i></div>

<div>(A) I find that addition or modification of a few lines can create anticlockwise traverse:</div>

<div><tt>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@row_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@col_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$M</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$M</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br />
</tt></div>

<div><br /></div><div><br /></div><div><br /></div><div>(B) An inverse subroutine <tt>&amp;matrixize</tt> for the original task: given parameters <tt>m</tt>, <tt>n</tt>, put a list of <tt>m x n</tt> integers as a <tt>m x n</tt> spiral matrix.</div>

<div>
<br /><br />
Code inserted:
<div><pre><tt><b>my</b>&nbsp;<font color="#0000ff">@test</font>&nbsp;=&nbsp;matrixize([<font color="#00007f">1..60</font>],&nbsp;<font color="#00007f">6</font>,&nbsp;<font color="#00007f">10</font>);<br />
print_matrix([<font color="#0000ff">@test</font>]);<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;end</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
</tt></pre></div>

Output:
<pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[28, 29, 30, 31, 32, 33, 34, 35, 36, 11]
[27, 48, 49, 50, 51, 52, 53, 54, 37, 12]
[26, 47, 60, 59, 58, 57, 56, 55, 38, 13]
[25, 46, 45, 44, 43, 42, 41, 40, 39, 14]
[24, 23, 22, 21, 20, 19, 18, 17, 16, 15]
test end

</pre>
</div>

<div>The codes for this subroutine (<tt>&amp;matrixize</tt>) largely reuse that in <tt>&amp;flat</tt>.</div><div><br /></div>

<h5>Dissatifaction</h5>

<div><ol><li>As said, can one make a more maintainable and concise version of <tt>&amp;matrixize</tt> and <tt>&amp;flat</tt>? (A bit more thought: the current <tt>&amp;matrixize</tt> has only clockwise version.)</li><li>I could set every initial term as <tt>0</tt>, <tt>'z'</tt>, <tt>'.'</tt> or <tt>undef</tt>, etc. , hence skipped <tt>@helper_mat</tt> with little amount of typing. Is there a case which a <tt>@helper_mat</tt> is really need?</li><li><tt>$success</tt> changes once or none for each occupant of the 
matrix (a note for more preciseness: except those of the "perimeter" of 
the matrix). Are there any cases which a <tt>$success</tt> is need to change twice? (Or change with respect to a task with more subtlies?)</li></ol></div>

<div>For the latter two questions, I am thinking whether irregular 2D boards can make full use of <tt>@helper_mat</tt> and <tt>$success</tt>. But <u>not</u> every irregular 2D polyomino can have a spiral path traversing each grid... </div>

<div>...</div>
<div>...</div>
<div>...</div>

<hr>

<p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p>

<p>Stay alert and healthy! □</p>


<div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt></i>
</div>


<hr>
<pre>Irregular boards:

sample input 1:
######### 
# * * x #
# * * * # 
# * * * # 
# * * x # 
#########

sample output 1:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 5 4 # 
# 7 6 x # 
#########

sample input 2:
######### 
# * * x #
# * * * # 
# * * * # 
# x * * # 
#########

sample output 2:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 7 4 # 
# x 6 5 # 
#########

sample input 3:
######### 
# * * * #
# * * * # 
# x * * # 
# x * * # 
#########

sample output 3:
######### 
# 0 1 2 #
# 9 8 3 # 
# x 7 4 # 
# x 6 5 # 
#########
</pre>




</div>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/samir_parikh/2020/11/perl-weekly-challenge-088.html"/>
    <id>tag:blogs.perl.org,2020:/users/samir_parikh//3527.9968</id>

    <published>2020-11-29T13:04:02Z</published>
    <updated>2020-11-29T03:13:25Z</updated>

    <summary>Despite the holiday week here in the U.S., I was able to tackle this week's Perl Weekly Challenge. I have to say that this week's challenge was the most satisfying for me as it allowed me to not only come...</summary>
    <author>
        <name>Samir Parikh</name>
        <uri>https://samirparikh.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/samir_parikh/">
        <![CDATA[<p>Despite the holiday week here in the U.S., I was able to tackle this week's <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Perl Weekly Challenge</a>.  I have to say that this week's challenge was the most satisfying for me as it allowed me to not only come up with a novel solution (for me!), but it also provided an opportunity for me to leverage two areas of Perl programming that have been a real challenge for me:  recursion and references.  The deadline to submit solutions for this challenge is <a href="https://www.timeanddate.com/countdown/generic?iso=20201129T2359&amp;p0=136&amp;msg=Perl+Weekly+Challenge+088+Deadline&amp;font=serif">fast approaching</a> so if you haven't solved it yourself yet, you may want to come back to this post later.</p>

<h2>Task 1</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/#TASK1">Task #1</a>, "Array of Product", asks the following:</p>

<blockquote>
  <p>You are given an array of positive integers <code>@N</code>.</p>

<p>Write a script to return an array <code>@M</code> where <code>$M[i]</code> is the product of all elements of <code>@N</code> except the index <code>$N[i]</code>.</p>

<p>Example 1:</p>
</blockquote>

<pre><code>    Input:
        @N = (5, 2, 1, 4, 3)
    Output:
        @M = (24, 60, 120, 30, 40)

        $M[0] = 2 x 1 x 4 x 3 = 24
        $M[1] = 5 x 1 x 4 x 3 = 60
        $M[2] = 5 x 2 x 4 x 3 = 120
        $M[3] = 5 x 2 x 1 x 3 = 30
        $M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<blockquote>
  <p>Example 2:</p>
</blockquote>

<pre><code>    Input:
        @N = (2, 1, 4, 3)
    Output:
        @M = (12, 24, 6, 8)

        $M[0] = 1 x 4 x 3 = 12
        $M[1] = 2 x 4 x 3 = 24
        $M[2] = 2 x 1 x 3 = 6
        $M[3] = 2 x 1 x 4 = 8
</code></pre>

<p>Like many of my prior solutions, I settled for using a brute force technique to solve this task.  I used an outer <code>for</code> loop iterating a variable <code>$i</code> which moves through each element in the input array <code>@N</code>.  An inner <code>for</code> loop using the variable <code>$j</code> does the same thing.  Both loops start at index <code>0</code> and go through the last index of the array.  An <code>if</code> statement checks to see whether or not <code>$i</code> and <code>$j</code> are equal.  If they are <em>not</em>, we update the running <code>$product</code> variable which is keeping track of our current product for <code>$M[0]</code>, <code>$M[1]</code>, etc. to satisfy the "product of all elements of <code>@N</code> except the index <code>$N[i]</code>" portion of the requirement.  If <code>i$</code> and <code>$j</code> are equal, we just move on to the next value of <code>$j</code>.  Once we are done executing the inner loop for a given value of <code>$i</code>, we update our output array <code>@M</code> by <code>push</code>ing the current value of <code>$product</code> into the end of the array <code>@M</code>.</p>

<p>This was actually the easy part.</p>

<p>The difficult part was formatting the output to match what was given in the challenge.  Not only do you have to print the summary of the products of the elements, e.g.:</p>

<pre><code>@M = (24, 60, 120, 30, 40)
</code></pre>

<p>but you also have to print the individual products for each element of <code>@M</code>:</p>

<pre><code>$M[0] = 2 x 1 x 4 x 3 = 24
$M[1] = 5 x 1 x 4 x 3 = 60
$M[2] = 5 x 2 x 4 x 3 = 120
$M[3] = 5 x 2 x 1 x 3 = 30
$M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<p>The tricky part is you have to print the summary <strong>before</strong> the individual line items have been determined (i.e. you don't know what the final elements of the array <code>@M</code> are until you calculate them all).</p>

<p>To solve this portion of the problem, I relied on two string variables:  <code>$m_string</code> and <code>$output_string</code>.  The former string contains each individual product equation for each element of the array <code>@M</code>:</p>

<pre><code>$M[2] = 5 x 2 x 4 x 3 = 120
</code></pre>

<p>I update <code>$m_string</code> by "building it up" during each iteration of the inner <code>for my $j</code> loop by adding each element of the input array <code>@N</code> and the multiplication sign ("<code>x</code>").  The multiplication symbol is printed <em>before</em> each number and thus is not required for the first element, hence the <code>if ($first)</code> statement.  At the conclusion of the inner <code>for</code> loop, I update <code>$m_string</code> with the final product:</p>

<pre><code>$m_string .= " = " . $product;
</code></pre>

<p>and then append the whole string to <code>$output_string</code> which contains the overall detailed line items:</p>

<pre><code>$output_string .= "\t". $m_string . "\n";
</code></pre>

<p>Once we are done executing through both of our loops, I can then print the summary of the <code>@M</code> array followed by the detailed line items which are stored in <code>$output_string</code>.  I thought this was a pretty clever solution (for me) to storing the intermediate results before we had to print them.  Originally, I was going to write the intermediate results to a temporary file but then thought better of it.  Putting it all together, we come up with our solution:</p>

<pre><code>use warnings;
use strict;
use diagnostics;
use v5.10;

# run program as:
# $ ./ch-1.pl "100, 4, 50, 3, 2"
my @N = split /, /, $ARGV[0];
my @M;
my $output_string = "";

for (my $i = 0; $i &lt; scalar(@N); $i++) {
    my $product = 1;
    my $m_string = "\$M[" . $i . "] = ";
    my $first = 1;
    for (my $j = 0; $j &lt; scalar(@N); $j++) {
        my $print_x;
        if ($i != $j) {
            $product = $product * $N[$j];
            if ($first) {
                $print_x = "";
                $first = 0;
            } else {
                $print_x = " x ";
            }
            $m_string .= $print_x . $N[$j]; 
        }
    }
    push (@M, $product);
    $m_string .= " = " . $product;
    $output_string .= "\t". $m_string . "\n";
}

say "Input:\n\t\@N = (", join(", ", @N), ")";
say "Output:";
say "\t\@M = (", join(", ", @M), ")\n";
say "$output_string";
</code></pre>

<h2>Task 2</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/#TASK2">Task #2</a>, "Spiral Matrix", was the one I was both most looking forward to and dreading at the same time!  The task states: </p>

<blockquote>
  <p>You are given <code>m x n</code> matrix of positive integers.</p>

<p>Write a script to print a spiral matrix as a list.</p>

<p>Example 1:</p>
</blockquote>

<pre><code>    Input:
        [ 1, 2, 3 ]
        [ 4, 5, 6 ]
        [ 7, 8, 9 ]
    Output:
        [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]
</code></pre>

<blockquote>
  <p>Example 2:</p>
</blockquote>

<pre><code>    Input:
        [  1,  2,  3,  4 ]
        [  5,  6,  7,  8 ]
        [  9, 10, 11, 12 ]
        [ 13, 14, 15, 16 ]
    Output:
        [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
</code></pre>

<p>I was excited because I've solved similar spiral challenges like this before using Python, specifically <a href="https://projecteuler.net/problem=28">Problem 28</a> of the <a href="https://projecteuler.net/about">Project Euler</a> series of coding problems.  In my version, I used a series of <code>for</code> loops to work my way around a two-dimensional array.  But for this task of Challenge 088, I wanted to try my hand at using a recursive solution which has been a <a href="https://samirparikh.com/blog/permutations-and-recursion.html">pain point</a> for me.  I also got the sense that this problem would also require me to work with Perl references and multi-dimensional arrays, other areas where I've <a href="https://www.perlmonks.org/?node_id=11123691">been</a> <a href="https://www.perlmonks.org/?node_id=11124042">struggling</a>.  But despite these reservations, I plowed ahead and here is what I did.</p>

<p>The main portion of the solution resides in the subroutine <code>return_spiral</code>.  I pass it a two-dimensional array, <code>@array</code>, which is formulated using the subroutine <code>define_matrix</code> which I've <a href="https://samirparikh.com/blog/perl-weekly-challenge-084.html">used</a> <a href="https://samirparikh.com/blog/perl-weekly-challenge-087.html">before</a>.  The purpose of <code>return_spiral</code> is to return an array, <code>@spiral</code>, comprised solely of those elements around the perimeter of <code>@array</code>, starting at the top-left corner and then moving in a clockwise fashion, plus the resulting two-dimensional matrix that remains.  For example, if we were to pass it the array <code>@array</code> in Example 2 from above:</p>

<pre><code>[  1,  2,  3,  4 ]
[  5,  6,  7,  8 ]
[  9, 10, 11, 12 ]
[ 13, 14, 15, 16 ]
</code></pre>

<p>the subroutine should return a simple array <code>@spiral</code>:</p>

<pre><code>(1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5)
</code></pre>

<p>and the remaining two-dimensional array:</p>

<pre><code>[  6,  7 ]
[ 10, 11 ]
</code></pre>

<p>which gets passed back to the subroutine in a recursive fashion.  To make it recursive, I'd need a statement like:</p>

<pre><code>return ( @spiral, &amp;return_spiral(@array) );
</code></pre>

<p>To get the elements around the perimeter of the array, there are four steps (since there are four "sides" to the matrix):</p>

<ol>
<li>Get the elements in the first row using the statement <code>push ( @spiral, @{$array[0]} )</code>.</li>
<li>Get the elements in the right column, going down, using the <code>for my $y</code> loop</li>
<li>Get the elements of the last row (in reverse order) using the statement <code>push ( @spiral, reverse ( @{$array[$#array]} ) )</code>.</li>
<li>Get the elements of the left column, going up, using the <code>for my $i</code> loop.</li>
</ol>

<p>All recursive functions need what is called a "base case", or terminating condition.  Otherwise, you'd end up in an endless loop.  For my subroutine, I actually came up with four base cases which would cause the subroutine to ultimately finish by just returning the spiral portion of the array.  Those four cases are:</p>

<ol>
<li>The array has just one row.</li>
<li>The array has just one column.</li>
<li>The array has just two rows.</li>
<li>The array has just two columns. </li>
</ol>

<p>I check the first two conditions near the beginning of the subroutine.  Assuming that the array passed to <code>return_spiral</code> has at least two rows and two columns, I check the third and fourth terminating conditions after we've done one "lap" around the array to define <code>@spiral</code>.  The checks for the third and fourth base cases is done by the <code>if</code> statement:</p>

<pre><code>if (scalar( @array ) == 2 || scalar ( @{$array[0]} ) == 2)
</code></pre>

<p>If that <code>if</code> statement is true, that means that the array that was originally passed to <code>return_spiral</code> only had two rows or two columns, in which case one "lap" around the array is all we need.</p>

<p>If we haven't hit a base case, the subroutine "trims" off the peripheral elements we've populated in the array <code>@sprial</code> using a series of <code>shift</code> and <code>pop</code> statements and concludes with returning both the <code>@sprial</code> array (which contains all of the elements around the perimeter of the original array) and by recursively calling the subroutine itself with the remaining interior elements of <code>@array</code>.  The resulting script becomes:</p>

<pre><code>use v5.10;
use warnings;
use strict;

# assumptions:
# matrix does not have to be square
# spiral is clockwise

sub define_matrix {
    open (INPUT, '&lt;', $_[0]) or die "$!: could not open file $_[0]";
    say "Input:";
    my (@line, @matrix);
    while (&lt;INPUT&gt;) {
        chomp;
        say $_;
        s/\s+//g; # remove any whitespace
        s/\[//;
        s/\]//;
        @line = split /,/, $_;
        push (@matrix, [@line]);
    }
    close (INPUT) or die "$!: could not close file $_[0]";
    return ( @matrix );
}

sub return_spiral {
    my @array = @_;
    my @spiral;
# handle special cases
# just one row
    if (scalar(@array) == 1) {
        return ( @{$array[0]} );
# just one column
    } elsif ( scalar ( @{$array[0]} ) == 1 ) {
        for (my $i = 0; $i &lt; scalar(@array); $i++) {
            push ( @spiral, @{$array[$i]}[0] );
        }
        return ( @spiral );
# we have at least a 2 x 2 array
    } else {
# get first row
        push ( @spiral, @{$array[0]} );
# get right column
        my $right_ci = scalar ( @{$array[0]} ) - 1;
        for (my $y = 1; $y &lt; scalar ( @array ); $y++) {
            push ( @spiral, @{$array[$y]}[$right_ci] );
        }
# remove last element from last row
        pop ( @{$array[$#array]} );
# get last row in reversed order
        push ( @spiral, reverse ( @{$array[$#array]} ) );
# get left column
        for (my $i = ($#array - 1); $i &gt; 0; $i--) {
            push ( @spiral, @{$array[$i]}[0] );
        }
# check if resulting array is empty (i.e. we were originally sent
# just a two-row or two-column array to begin with
        if (scalar( @array ) == 2 || scalar ( @{$array[0]} ) == 2) {
            return ( @spiral );
        } else {
# trim array
# trim top row:
            shift @array;
# trim bottom row:
            pop @array;
# remove first and last element from remaining rows
            for (my $i = 0; $i &lt; scalar(@array); $i++) {
                shift ( @{$array[$i]} );
                pop   ( @{$array[$i]} );
            }
            return ( @spiral, &amp;return_spiral(@array) );
        }
    }
}

my @matrix = &amp;define_matrix($ARGV[0]);
my @spiral2 = &amp;return_spiral(@matrix);
say "Output:";
say "[ ", join(", ", @spiral2), " ]";
</code></pre>

<p>I suppose that I could have combined the "trim" operations with the statements where I traverse the perimeter in the first place to populate <code>@spiral</code> to tighten up the script, but in the end, that wasn't an optimization I had the energy to pursue.</p>

<p>As I said before, I really enjoyed working on this week's tasks and solving the programming and algorithmic challenges they presented.  I'm eager to see how others in the Perl Weekly Challenge community came up with their own solution as there is always so much to learn from them.  Until next time!</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3134593967427671253</id>
    <published>2020-11-28T16:55:00.000+01:00</published>
    <updated>2020-11-28T16:55:47.550+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxvii) 9 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.995' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.995&lt;/strong&gt; on 2020-11-28&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 0.994 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.005&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.004 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MHX/Convert-Binary-C-0.84' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Convert::Binary::C&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Binary Data Conversion using C Types &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.84&lt;/strong&gt; on 2020-11-23&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.83 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9711' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9711&lt;/strong&gt; on 2020-11-27&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.9708 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JBERGER/Mojo-JWT-0.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token the Mojo way &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.09&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.08 was 1 year, 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.004004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.004004&lt;/strong&gt; on 2020-11-25&lt;/li&gt;  &lt;li&gt;Votes: 277&lt;/li&gt;  &lt;li&gt;Previous version: 2.004003 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Package-Stash-0.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Package::Stash&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Routines for manipulating stashes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.39&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.38 was 1 year, 10 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.20&lt;/strong&gt; on 2020-11-24&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.18 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.63' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.63&lt;/strong&gt; on 2020-11-28&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.61 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3134593967427671253/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3134593967427671253"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3134593967427671253"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html" title="(cccxvii) 9 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8775178624719885</id>
    <published>2020-11-28T16:52:00.002+01:00</published>
    <updated>2020-11-28T16:52:10.101+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxliv) metacpan weekly report - Plack</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 36&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Plack"&gt;Plack&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/11/28 15:51:00 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Working::Out::Dependencies::From::META::files::Will::Be::Wrong::At::Some::Point::Like::This::Module::For::Instance" target="_blank"&gt;Acme::Working::Out::Dependencies::From::META::files::Will::Be::Wrong::At::Some::Point::Like::This::Module::For::Instance&lt;/a&gt; - Because there is nothing like being right&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::XML::DocBook::Builder" target="_blank"&gt;App::XML::DocBook::Builder&lt;/a&gt; - Build DocBook/XML files.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; - A toolkit to help sign and verify XML Digital Signatures.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Amon2" target="_blank"&gt;Amon2&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CallBackery" target="_blank"&gt;CallBackery&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLDR::Number" target="_blank"&gt;CLDR::Number&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Tiny" target="_blank"&gt;Dancer2::Plugin::Auth::Tiny&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Database" target="_blank"&gt;Dancer2::Plugin::Database&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Locale::Wolowitz" target="_blank"&gt;Dancer2::Plugin::Locale::Wolowitz&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/EV" target="_blank"&gt;EV&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=105)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Maketext" target="_blank"&gt;Locale::Maketext&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Wolowitz" target="_blank"&gt;Locale::Wolowitz&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any::Adapter::TAP" target="_blank"&gt;Log::Any::Adapter::TAP&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+2=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Command::Author::generate::cpanfile" target="_blank"&gt;Mojolicious::Command::Author::generate::cpanfile&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::API::REST" target="_blank"&gt;Net::API::REST&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::NDBin" target="_blank"&gt;PDL::NDBin&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=364)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+3=218)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE" target="_blank"&gt;POE&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TheSchwartz" target="_blank"&gt;TheSchwartz&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widgets" target="_blank"&gt;Tickit::Widgets&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::Indexed" target="_blank"&gt;Tie::Hash::Indexed&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Hash::XS" target="_blank"&gt;XML::Hash::XS&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8775178624719885/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8775178624719885"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8775178624719885"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html" title="(cdxliv) metacpan weekly report - Plack"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7978604697808215360</id>
    <published>2020-11-28T16:38:00.000+01:00</published>
    <updated>2020-11-28T16:38:51.558+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2020-11-28 15:35:26 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64993183" target="_blank"&gt;Perl: Best way to open a file exclusively?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64956649" target="_blank"&gt;Store and read string with newline from Config::Simple config file&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65012690" target="_blank"&gt;(Windows 10) Trying to Install Perl Modules both PPM and CPAN fail?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64957598" target="_blank"&gt;atom feed: script to combine multiple &amp;lt;author&amp;gt; items into one?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64974031" target="_blank"&gt;Why does File::Slurp get UTF8 characters wrong when I use open ':std', ':encoding(UTF-8)';?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64993281" target="_blank"&gt;create a hash of occurrences in an array with map&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64963938" target="_blank"&gt;What difference does curly brace make in accessing an object&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64971546" target="_blank"&gt;How do I change a Perl Readonly scalar in a module for a unit test?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65002289" target="_blank"&gt;Perl load module BEGIN&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64949457" target="_blank"&gt;Monitoring stdout of a forked process in perl by character&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7978604697808215360/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7978604697808215360"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7978604697808215360"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html" title="(cdlxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Use Perl::Tidy module in your application</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Perl::Tidy">Perl::Tidy</a> is usually used as a stand-alone program to <a href="/run-perl-tidy-to-beautify-the-code">beautify your Perl code</a>.
Sometimes, for example when you'd like to <a href="/introducing-perltidy-tk-project">build a GUI for it</a>, you need to be able to use it as part of your application.
<p>
This is a simple example showing how to do it.
<p>
]]></summary>
  <updated>2020-11-27T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/use-perl-tidy-in-your-application"/>  <id>https://perlmaven.com/use-perl-tidy-in-your-application</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Perl::Tidy">Perl::Tidy</a> is usually used as a stand-alone program to <a href="/run-perl-tidy-to-beautify-the-code">beautify your Perl code</a>.
Sometimes, for example when you'd like to <a href="/introducing-perltidy-tk-project">build a GUI for it</a>, you need to be able to use it as part of your application.
<p>
This is a simple example showing how to do it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>CPAN Digger - CPAN Dashboard - CPAN Rocks</title>
  <summary type="html"><![CDATA[<p>
CPAN Digger monitors the most recently uploaded distributions, CPAN Dashboard provides an overview to the authors, CPAN Rocks provides stats from Meta::CPAN.
<p>
]]></summary>
  <updated>2020-11-26T13:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-digger-dashboard-rocks"/>  <id>https://perlmaven.com/cpan-digger-dashboard-rocks</id>
  <content type="html"><![CDATA[<p>
CPAN Digger monitors the most recently uploaded distributions, CPAN Dashboard provides an overview to the authors, CPAN Rocks provides stats from Meta::CPAN.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Wie setzen wir die Gitlab-CI ein?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-26-wie-setzen-wir-gitlab-ci-ein" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In meinem Artikel über die Optimierung von Docker-Images habe ich erwähnt, dass wir die »Gitlab-CI« einsetzen. In diesem Artikel beschreibe ich nun näher, was das eigentlich ist und welche Erfahrungen wir gemacht haben.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-26-wie-setzen-wir-gitlab-ci-ein</id>
    <published>2020-11-26T10:00:00Z</published>
    <updated>2020-11-26T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Array of Products and Spiral Matrices</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9966</id>

    <published>2020-11-25T23:07:28Z</published>
    <updated>2020-11-25T23:13:07Z</updated>

    <summary>These are some answers to the Week 88 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a couple of days (November 29, 2020). This blog post offers some solutions...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 88 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (November 29, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Array of Products</h2>

<p><em>You are given an array of positive integers @N.</em></p>

<p><em>Write a script to return an array @M where $M[i] is the product of all elements of @N except the index $N[i].</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    @N = (5, 2, 1, 4, 3)
Output:
    @M = (24, 60, 120, 30, 40)

    $M[0] = 2 x 1 x 4 x 3 = 24
    $M[1] = 5 x 1 x 4 x 3 = 60
    $M[2] = 5 x 2 x 4 x 3 = 120
    $M[3] = 5 x 2 x 1 x 3 = 30
    $M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    @N = (2, 1, 4, 3)
Output:
    @M = (12, 24, 6, 8)

    $M[0] = 1 x 4 x 3 = 12
    $M[1] = 2 x 4 x 3 = 24
    $M[2] = 2 x 1 x 3 = 6
    $M[3] = 2 x 1 x 4 = 8
</code></pre>

<h3>Array of Products in Raku</h3>

<p>I immediately thought about two methods to solve this problem. Although I thought the second method was probably better, let me show first the first one.</p>

<p>The first way to do it is to traverse the input array and, for each item, multiply all items before with all items after and store the product in the equivalent position of the result array. Here we use the reduction metaoperator with multiplication, <code>[*]</code>, to compute the chained multiplication. And we use array slices to pick the relevant items to be multiplied. For some reason, array slice did not work properly for the first element of the array, so I computed it separately before entering the <code>for</code> loop.</p>

<pre><code>use v6;

my @tests = [5, 2, 1, 4, 3], [2, 1, 4, 3];
for @tests -&gt; @array {
    my @result; 
    @result[0] = [*] @array[1..@array.end];
    for 1..@array.end -&gt; $i {
        @result[$i] = ([*] @array[0..$i-1]) * [*] (@array[$i+1..@array.end]);
    }
    say "Input array: ", @array;
    say "Result: ", @result;
}
</code></pre>

<p>This script produces the following output:</p>

<pre><code>$ raku array-of_products.raku
Input array: [5 2 1 4 3]
Result: [24 60 120 30 40]
Input array: [2 1 4 3]
Result: [12 24 6 8]
</code></pre>

<p>There may be a better way to handle the special case of the first item of the list, but, rather than trying to improve it, I preferred to implement the second method. Here, the idea is to compute only once the product of all elements of the input array. Then, for each position in the array, we divide the overall product by the item in the current position. The code becomes slightly simpler, and the performance is also likely to be better, since we&#8217;re performing much less arithmetical operations overall (especially if the input array is somewhat large).</p>

<pre><code>my @tests = [5, 2, 1, 4, 3], [2, 1, 4, 3];
for @tests -&gt; @array {
    my $product = [*] @array;
    my @result = map { $product / $_ }, @array;
    say "Input array: ", @array;
    say "Result: ", @result;
}
</code></pre>

<p>This script produces the same result as before:</p>

<pre><code>Input array: [5 2 1 4 3]
Result: [24 60 120 30 40]
Input array: [2 1 4 3]
Result: [12 24 6 8]
</code></pre>

<h3>Array of Products in Perl</h3>

<p>This is a port to Perl of the method used in the second Rakudo script above: we compute the product of all elements of the input array. Then, for each position in the array, we divide the overall product by the item in the current position.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = ([5, 2, 1, 4, 3], [2, 1, 4, 3]);
for my $array_ref (@tests) {
    my $product = 1;
    $product *= $_ for @$array_ref;
    my @result = map $product / $_, @$array_ref;
    say "Input: @$array_ref";
    say "Result: @result";
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl array-of-products.pl
Input: 5 2 1 4 3
Result: 24 60 120 30 40
Input: 2 1 4 3
Result: 12 24 6 8
</code></pre>

<h2>Task 2: Spiral Matrix</h2>

<p><em>You are given <code>m x n</code> matrix of positive integers.</em></p>

<p><em>Write a script to print spiral matrix as list.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    [ 1, 2, 3 ]
    [ 4, 5, 6 ]
    [ 7, 8, 9 ]
Ouput:
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    [  1,  2,  3,  4 ]
    [  5,  6,  7,  8 ]
    [  9, 10, 11, 12 ]
    [ 13, 14, 15, 16 ]
Output:
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
</code></pre>

<h3>Spiral Matrix in Raku</h3>

<p>For this task, we&#8217;ll use a <code>@tests</code> array of five rectangular matrices. The <code>print-matrix</code> subroutine is a helper function to pretty print the input matrix. Note that, when applied to a list, the <a href="https://docs.raku.org/routine/fmt">fmt</a> method applies the formatting string to each element of the list (contrary to <code>sprintf</code>), so that there is no need to add a <code>map</code> to process each item of a matrix line. For example:</p>

<pre><code>say &lt;1 2 3 4&gt;.fmt("%04i");
</code></pre>

<p>will print:</p>

<pre><code>0001 0002 0003 0004
</code></pre>

<p>The main <code>loop</code> reads the values of the matrix (in accordance to the rules explained just after) and stores them into the <code>@result</code> array. It processes first the first matrix line (left to right); it then processes the last column, i.e. the last item of each line, from top to bottom, and deletes it at the same time; it then processes (right to left) the last line of the matrix and also deletes this line; and it processes the first column (bottom to top) of the matrix. It then assign to <code>@matrix</code> a version of the original matrix with all values on the four edges removed. And the loop is restarted with the new smaller matrix if it is not empty.</p>

<p>Note that the <code>:delete</code> adverb removes entirely the last item of an array, but it leaves a &#8220;hole&#8221; when applied to any other element of the array. </p>

<pre><code>use v6;

my @tests =
    [ [ |(0..3) ], [ |(4..7)  ],  [ |(8..11)  ], [ |(12..15) ] ],
    [ [ |(0..4) ], [ |(5..9)  ],  [ |(10..14) ], [ |(15..19) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ], [ |(18..23) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ] ],
    [ [ |(0..2) ], [ |(4..6)  ],  [ |(8..10)  ], [ |(12..14) ] ];

sub print-matrix (@matrix) {
        say "[ {$_.fmt("% 3i")} ]" for @matrix;
        say "";
}

for @tests -&gt; @matrix {
    my @result;
    print-matrix @matrix;
    loop {
        push @result, |@matrix[0];
        push @result, @matrix[$_][*-1]:delete for 1..@matrix.end;
        push @result, |(reverse @matrix[@matrix.end]:delete);
        last if @matrix.elems == 1;
        push @result, @matrix[$_][0]:delete for reverse 1..@matrix.end;
        @matrix = map { [$_[|(1..$_.end)]] }, @matrix[|(1..@matrix.end)];
        # print-matrix @matrix;
        last unless @matrix;
    }
    say @result, "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

[0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9]

[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]

[0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]
[  18  19  20  21  22  23 ]

[0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]

[0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10]

[   0   1   2 ]
[   4   5   6 ]
[   8   9  10 ]
[  12  13  14 ]

[0 1 2 6 10 14 13 12 8 4 5 9]
</code></pre>

<p>We can make it slightly simpler by stripping out the used matrix edges as we go, using the <code>pop</code> and <code>shift</code> methods each time we use some values, so that we don&#8217;t have to reassign the <code>@matrix</code> at each iteration. This also simplifies the handling of array subscripts. In the code below, the only changes are in the <code>loop</code> block:</p>

<pre><code>use v6;

my @tests =
    [ [ |(0..3) ], [ |(4..7)  ],  [ |(8..11)  ], [ |(12..15) ] ],
    [ [ |(0..4) ], [ |(5..9)  ],  [ |(10..14) ], [ |(15..19) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ], [ |(18..23) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ] ],
    [ [ |(0..2) ], [ |(4..6)  ],  [ |(8..10)  ], [ |(12..14) ] ];

sub print-matrix (@matrix) {
        say "[ {$_.fmt("% 3i")} ]" for @matrix;
        say "";
}
for @tests -&gt; @matrix {
    my @result;
    print-matrix @matrix;
    loop {
        push @result, |@matrix.shift;
        push @result, @matrix[$_].pop for 0..@matrix.end;
        last unless @matrix.elems;
        push @result, |(reverse @matrix.pop);
        push @result, @matrix[$_].shift for reverse 0..@matrix.end;
        last unless @matrix;
    }
    say @result, "\n";
}
</code></pre>

<p>This produces the same output as before:</p>

<pre><code>[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

[0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9]

[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]

[0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]
[  18  19  20  21  22  23 ]

[0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]

[0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10]

[   0   1   2 ]
[   4   5   6 ]
[   8   9  10 ]
[  12  13  14 ]

[0 1 2 6 10 14 13 12 8 4 5 9]
</code></pre>

<h3>Spiral Matrix in Perl</h3>

<p>For this task, we&#8217;ll use a <code>@tests</code> array of five rectangular matrices. The <code>print_matrix</code> subroutine is a helper function to pretty print the input matrix.</p>

<p>The main <code>while</code> loop reads the values of the matrix (in accordance to the rules explained just after) and stores them into the <code>@result</code> array. It processes first the first matrix line (left to right) and removes it from the matrix; it then processes the last column, i.e. the last item of each line, from top to bottom, and deletes it at the same time; it then processes (right to left) the last line of the matrix and also deletes this line; and finally it processes the first column (bottom to top) of the matrix and removes it. 
After one iteration, the original matrix is stripped of all its edge items. And the loop is restarted with the new smaller matrix if it is not empty.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;


my @tests = ( [ [ 0..3 ], [ (4..7) ],  [ (8..11) ],  [ (12..15) ] ],
              [ [ 0..4 ], [ (5..9) ],  [ (10..14) ], [ (15..19) ] ],
              [ [ 0..5 ], [ (6..11) ], [ (12..17) ], [ (18..23) ] ],
              [ [ 0..5 ], [ (6..11) ], [ (12..17) ] ],
              [ [ 0..2 ], [ (4..6) ],  [ (8..10) ],  [ (12..14) ] ]
            );

# @tests = ( [ [ 0..3 ], [ (4..7) ],  [ (8..11) ],  [ (12..15) ] ] );

sub print_matrix {
    my @matrix = @{$_[0]};
    say "";
    say "[ ", (map { sprintf "% 3i", $_ } @$_), " ]" for @matrix;
    say "";
}

for my $m_ref (@tests) {
    print_matrix($m_ref);
    my @result;
    my @matrix = @$m_ref;
    while (1) {
        push @result, @{shift @matrix};
        last if scalar @matrix == 0;
        push @result, pop @{$matrix[$_]} for 0..$#matrix;
        push @result, reverse @{pop @matrix};
        push @result, shift @{$matrix[$_]} for reverse 0..$#matrix;
        last if @matrix == 0;
    }
    say join " ", @result;    
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>[   0  1  2  3 ]
[   4  5  6  7 ]
[   8  9 10 11 ]
[  12 13 14 15 ]

0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9

[   0  1  2  3  4 ]
[   5  6  7  8  9 ]
[  10 11 12 13 14 ]
[  15 16 17 18 19 ]

0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11

[   0  1  2  3  4  5 ]
[   6  7  8  9 10 11 ]
[  12 13 14 15 16 17 ]
[  18 19 20 21 22 23 ]

0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13

[   0  1  2  3  4  5 ]
[   6  7  8  9 10 11 ]
[  12 13 14 15 16 17 ]

0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10

[   0  1  2 ]
[   4  5  6 ]
[   8  9 10 ]
[  12 13 14 ]

0 1 2 6 10 14 13 12 8 4 5 9
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 6, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>GitLab CI for Perl projects</title>
  <summary type="html"><![CDATA[<p>
According to <a href="https://cpan.rocks/">CPAN Rocks</a> there are 29 CPAN modules that use GitLab as their bug-tracking system. That probably means those
are the projects that use GitLab as a VCS.
<p>
]]></summary>
  <updated>2020-11-24T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/gitlab-ci"/>  <id>https://perlmaven.com/gitlab-ci</id>
  <content type="html"><![CDATA[<p>
According to <a href="https://cpan.rocks/">CPAN Rocks</a> there are 29 CPAN modules that use GitLab as their bug-tracking system. That probably means those
are the projects that use GitLab as a VCS.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2020-october"/>
  <id>tag:news.perlfoundation.org,2020-11-24:/post/dave-report-2020-october</id>
  <published>2020-11-24T02:53:09</published>
  <updated>2020-11-24T02:53:09</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Dave Mitchell on his grant under Perl 5 Core Maintenance Fund. We thank the TPF sponsors to make this grant possible. This mainly consisted in tracking down a off-by-one error in Cwd.xs, which I thought was being flagged up by valgrind. As it turned out, the valgrind report was a false positive caused by a bug in valgrind when perl is built with -D_FORTIFY_SOURCE, 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Dave Mitchell on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
We thank the TPF sponsors to make this grant possible.</p>

<pre>
This mainly consisted in tracking down a (harmless as it turned out)
off-by-one error in Cwd.xs, which I thought was being flagged up by
valgrind. As it turned out, the valgrind report was a false positive caused
by a bug in valgrind when perl is built with -D_FORTIFY_SOURCE, and I
found the Cwd bug by manual code inspection of the area complained about
by valgrind!

SUMMARY:
      4:35 add some magic free vtable methods for faster freeing
     15:59 investigate ASan failure in t/op/coreamp.t
      2:30 process p5p mailbox
    ------
     23:04 TOTAL (HH::MM)
</pre>

    ]]>
  </content>
</entry>
  <entry>
  <title>CPAN Digger explained</title>
  <summary type="html"><![CDATA[<p>
The web site of <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> shows the most recently uploaded CPAN distributions. Currently about 110 of them
and some meta information about them. Let me go through quickly what you see there, why is that interesting and what to do about it.
<p>
]]></summary>
  <updated>2020-11-23T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-digger-explained"/>  <id>https://perlmaven.com/cpan-digger-explained</id>
  <content type="html"><![CDATA[<p>
The web site of <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> shows the most recently uploaded CPAN distributions. Currently about 110 of them
and some meta information about them. Let me go through quickly what you see there, why is that interesting and what to do about it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
