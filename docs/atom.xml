<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-08-10T04:47:06Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge 177: Damm Algorithm and Palindromic Prime Cyclops</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/perl-weekly-challenge-177-damm-algorithm-and-palindromic-prime-cyclops.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10872</id>
    <published>2022-08-08T20:21:01Z</published>
    <updated>2022-08-10T04:03:48Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 177 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-177/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Aug. 14, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Damm Algorithm</h2>

<p><em>You are given a positive number, <code>$n</code>.</em></p>

<p><em>Write a script to validate the given number against the included check digit.</em></p>

<p><em>Please checkout the <a href="https://en.wikipedia.org/wiki/Damm_algorithm">wikipedia page</a> for information.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $n = 5724
Output: 1 as it is valid number
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $n = 5727
Output: 0 as it is invalid number
</code></pre>

<p>The algorithm is a check digit algorithm named after H. Michael Damm, who presented it in 2004.</p>

<p>The process is quite simple. We&#8217;ll use the quasi-group table provided in the afore-mentioned Wikipedia article:</p>

<pre><code>0 3 1 7 5 9 8 6 4 2
7 0 9 2 1 5 4 8 6 3
4 2 0 6 8 7 1 3 5 9
1 7 5 0 9 8 3 4 2 6
6 1 2 3 0 4 5 9 7 8
3 6 7 4 2 0 9 5 8 1
5 8 6 9 7 2 0 1 3 4
8 9 4 5 3 6 2 0 1 7
9 4 3 8 6 1 7 2 0 5
2 5 8 1 4 3 6 7 9 0
</code></pre>

<h3>Damm Algorithm in Raku</h3>

<p>The process is simple. We start with a temporary value of 0. For each digit in the input number, we look up the table with the temporary variable and the digit, and set the temporary variable to the integer found in the table. At the end, the number is valid is the temporary variable is 0. For our test, we will use the two examples provided in the task specification, and we will test all numbers in the <code>5700..5800</code> range.</p>

<pre><code>my @damm =  &lt; 0 3 1 7 5 9 8 6 4 2 &gt;,
            &lt; 7 0 9 2 1 5 4 8 6 3 &gt;,
            &lt; 4 2 0 6 8 7 1 3 5 9 &gt;,
            &lt; 1 7 5 0 9 8 3 4 2 6 &gt;,
            &lt; 6 1 2 3 0 4 5 9 7 8 &gt;,
            &lt; 3 6 7 4 2 0 9 5 8 1 &gt;,
            &lt; 5 8 6 9 7 2 0 1 3 4 &gt;,
            &lt; 8 9 4 5 3 6 2 0 1 7 &gt;,
            &lt; 9 4 3 8 6 1 7 2 0 5 &gt;,
            &lt; 2 5 8 1 4 3 6 7 9 0 &gt;;

sub is-valid ($n) {
    my $t = 0;
    $t = @damm[$t][$_] for $n.comb;
    return $t == 0;
}

for 5724, 5727 -&gt; $test {
    say $test, is-valid($test) ?? " is valid." !! " is not valid.";
}
say "\nValid numbers between 5700 and 5800 are: ";
for 5700..5800 -&gt; $i {
    print "$i " if is-valid $i;
}
say "";
</code></pre>

<p>This program displays the following output: </p>

<pre><code>$ raku ./damm-algo.raku
5724 is valid.
5727 is not valid.

Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h3>Damm Algorithm in Perl</h3>

<p>The algorithm for finding the check digit is the same as the one for testing whether a number is valid. So, rather than simply testing the validity directly as we did in Raku, we&#8217;ll write a <code>find_check</code> subroutine to find the check digit. Then, a number will be valid if its check digit is 0. Thus, we sort of get the two functions for the price of one. Besides that, the process is essentially the same as in Raku. Check the Raku section above is you need further explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @damm =  (
[ &lt; 0 3 1 7 5 9 8 6 4 2 &gt; ],
[ &lt; 7 0 9 2 1 5 4 8 6 3 &gt; ],
[ &lt; 4 2 0 6 8 7 1 3 5 9 &gt; ],
[ &lt; 1 7 5 0 9 8 3 4 2 6 &gt; ],
[ &lt; 6 1 2 3 0 4 5 9 7 8 &gt; ],
[ &lt; 3 6 7 4 2 0 9 5 8 1 &gt; ],
[ &lt; 5 8 6 9 7 2 0 1 3 4 &gt; ],
[ &lt; 8 9 4 5 3 6 2 0 1 7 &gt; ],
[ &lt; 9 4 3 8 6 1 7 2 0 5 &gt; ],
[ &lt; 2 5 8 1 4 3 6 7 9 0 &gt; ] );

sub find_check {
    my $n = shift;
    my $t = 0;
    $t = $damm[$t][$_] for split //, $n;
    return $t;
}

sub is_valid {
    my $n = shift;
    return find_check($n) == 0;
}

for my $test (5724, 5727) {
    say $test, is_valid($test) ? " is valid." : " is not valid.";
}
say "\nValid numbers between 5700 and 5800 are: ";
for my $i (5700..5800) {
    print "$i " if is_valid $i;
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./damm-algo.pl
5724 is valid.
5727 is not valid.

Valid numbers between 5700 and 5800 are:
5708 5719 5724 5735 5743 5756 5762 5770 5781 5797
</code></pre>

<h2>Task 2: Palindromic Prime Cyclops</h2>

<p><em>Write a script to generate first 20 Palindromic Prime Cyclops Numbers.</em></p>

<blockquote>
  <p><em>A cyclops number is a number with an odd number of digits that has a zero in the center only.</em></p>
</blockquote>

<p><em>Output</em></p>

<pre><code>101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049,
1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821,
1360631, 1390931, 1490941, 1520251
</code></pre>

<h3>Palindromic Prime Cyclops in Raku</h3>

<p>In order to reduce the pointless computations, we&#8217;ll only test number ranges with an odd number of digits (<code>100..999, 10000..99999, 1000000..9999999</code>). As it turns out, the process is quite fast (about 2.6 seconds), so that performance enhancement wasn&#8217;t really required. I find it nonetheless better to avoid useless computations.</p>

<pre><code>sub is-cyclops ($n) {
    my $length = $n.chars;
    return False if $length %% 2;
    my $mid = ($length - 1) /2;
    return False if substr($n, $mid, 1) != 0;
    return False if $n.comb[0..$mid-1] ~~ /0/;
    return False if $n.comb[$mid+1..$length-1] ~~ /0/;
    return True;
}

my $count = 0;
for |(100..999), |(10000..99999), |(1000000..9999999) -&gt; $i {
    next unless $i eq $i.flip;
    next unless $i.is-prime;
    if is-cyclops $i {
        print "$i ";
        $count++;
        last if $count == 20;
    }
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./cyclops.raku
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251

real    0m2,573s
user    0m0,015s
sys     0m0,015s
</code></pre>

<h3>Palindromic Prime Cyclops in Perl</h3>

<p>This is a port to Perl of the Raku program above. Since Perl doesn&#8217;t have a built-in <code>is_prime</code> subroutine, we roll out our own.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub is_cyclops {
    my $n = shift;
    my $len = length $n;
    return 0 if $len % 2 == 0;
    my $mid = ($len - 1) /2;
    return 0 if substr($n, $mid, 1) != 0;
    return 0 if (split //, $n)[0..$mid-1] =~ /0/;
    return 0 if (split //, $n)[$mid+1..$len-1] =~ /0/;
    return 1;
}

sub is_prime {
   my $n = shift;
   return 1 if $n == 2;
   return 0 if $n % 2 == 0;
   return 0 if $n == 1;
   my $p = 3;
   my $sqrt = sqrt $n;
   while ($p &lt;= $sqrt) {
       return 0 if $n % $p == 0;
       $p += 2;
   }
   return 1;
}

my $count = 0;
for my $i (100..999, 10000..99999, 1000000..9999999) {
    next unless $i eq reverse $i;
    next unless is_cyclops $i;
    if (is_prime $i) {
        print "$i ";
        $count++;
        last if $count == 20;
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./cyclops.pl
101 16061 31013 35053 38083 73037 74047 91019 94049 1120211 1150511 1160611 1180811 1190911 1250521 1280821 1360631 1390931 1490941 1520251
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 21, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-08-09T00:00:00Z</published>
    <updated>2022-08-09T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Regex basics</title>
    <link rel="alternate" href="https://dev.to/nottrobin/regex-basics-3224" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;Originally published &lt;a href="https://robinwinslow.uk/regex"&gt;on my blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In my team we  run "masterclasses" every couple of weeks, where someone in the team presents a topic to the rest of the team.&lt;/p&gt;

&lt;p&gt;This article is basically the content of the class on regular expressions (otherwise known as regex) I gave recently.&lt;/p&gt;

&lt;p&gt;It's an introduction to the basics of regular expressions. There &lt;a href="https://regular-expressions.mobi/quickstart.html?wlr=1"&gt;are&lt;/a&gt; &lt;a href="https://regexone.com/"&gt;many&lt;/a&gt; &lt;a href="https://www.aivosto.com/articles/regex.html"&gt;like&lt;/a&gt; &lt;a href="https://medium.com/better-programming/introduction-to-regex-8c18abdd4f70"&gt;it&lt;/a&gt;, but this is mine.&lt;/p&gt;

&lt;h1&gt;
  
  
  What is a regular expression (or regex)?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Regular_expression"&gt;Wikipedia&lt;/a&gt; defines regular expressions as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"a sequence of characters that define a search pattern"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They are available in basically every programming language, and you’ll probably most commonly encounter them used for string matches in conditionals that are too complicated for simple logical comparisons (like "or", "and", "in"). &lt;/p&gt;

&lt;p&gt;A couple of examples of regular expressions to get started:&lt;/p&gt;

&lt;p&gt;| &lt;code&gt;[ -~]&lt;/code&gt; | Any ASCII character&lt;br&gt;(ASCII characters fall between space and "~") |&lt;br&gt;
| &lt;code&gt;^[a-z0-9_-]{3,15}$&lt;/code&gt; | Usernames between 3 and 15 characters |&lt;/p&gt;
&lt;h1&gt;
  
  
  When to use regex
&lt;/h1&gt;

&lt;p&gt;Use regular expressions with caution. The complexity of regex carries a cost.&lt;/p&gt;
&lt;h2&gt;
  
  
  Avoid coding in regex if you can
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‘Some people, when confronted with a problem, think "I know, I'll use regular expressions." &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;Now they have two problems&lt;/a&gt;.’ - Jamie Zawinski&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In programming, only use regular expressions as a last resort. Don’t solve important problems with regex.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.loggly.com/blog/regexes-the-bad-better-best/"&gt;regex is expensive&lt;/a&gt; - regex is often the most CPU-intensive part of a program. And a non-matching regex can be even more expensive to check than a matching one.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/canonical-web-and-design/ubuntu.com/issues/9028#issuecomment-760859952"&gt;regex is greedy&lt;/a&gt; - It’s extremely easy to match much more than intended, leading to bugs. We have multiple times had problems with regexes being too greedy, causing issues in our sites.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;regex is opaque&lt;/a&gt; - Even people who know regex well will take a while to pick apart a new regex string, and are still likely to make mistakes. This has a huge cost to project maintenance in the long run. (Check out this amazing &lt;a href="https://blog.codinghorror.com/regex-use-vs-regex-abuse/"&gt;regex for RFC822 email addresses&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Always try to be aware of all the language features at your disposal for operating on and checking strings, that could help you avoid regular expressions. &lt;a href="https://www.codecademy.com/learn/learn-python-3/modules/learn-python3-strings/cheatsheet"&gt;In Python&lt;/a&gt;, for example, the &lt;code&gt;in&lt;/code&gt; keyword, the powerful &lt;code&gt;[]&lt;/code&gt; indexing, and string methods like &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;startswith&lt;/code&gt; (which can be fed either strings or tuples for multiple values) can be combined very effectively.&lt;/p&gt;

&lt;p&gt;Most importantly, regexes should not be used for &lt;em&gt;parsing&lt;/em&gt; &lt;em&gt;strings&lt;/em&gt;. You should instead use or write a &lt;a href="https://medium.com/the-mighty-programmer/what-is-parsing-4012f997d265"&gt;bespoke parser&lt;/a&gt;. For example, &lt;a href="https://stackoverflow.com/a/1732454"&gt;you can't parse HTML with regex&lt;/a&gt; (in Python, use &lt;a href="https://pypi.org/project/beautifulsoup4/"&gt;BeautifulSoup&lt;/a&gt;; in JavaScript, use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;the DOM&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;
  
  
  When to code in regex
&lt;/h2&gt;

&lt;p&gt;Of course, there are times when regular expressions can or should be used in programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  When it already exist and you have to maintain it (although if you can remove it, you should)&lt;/li&gt;
&lt;li&gt;  String validation, where there's no other option&lt;/li&gt;
&lt;li&gt;  String manipulation (substitution), where there's no other option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are writing anything more than the most basic regex, any maintainers are unlikely to be able to understand your regex easily, so you might want to consider adding liberal comments. E.g. &lt;a href="https://softwareengineering.stackexchange.com/questions/178355/commenting-regular-expressions"&gt;this in Python&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
^                   # beginning of string
M{0,4}              # thousands - 0 to 4 M's
(CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 C's),
                    #            or 500-800 (D, followed by 0 to 3 C's)
(XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 X's),
                    #        or 50-80 (L, followed by 0 to 3 X's)
(IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 I's),
                    #        or 5-8 (V, followed by 0 to 3 I's)
$                   # end of string
"""&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VERBOSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Other great uses for regex
&lt;/h2&gt;

&lt;p&gt;Regular expressions can be extremely powerful for quickly solving problems for yourself, where future maintenance is not a concern. E.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://en.wikipedia.org/wiki/Grep"&gt;Grep&lt;/a&gt; (or &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;Ripgrep&lt;/a&gt;), &lt;a href="https://en.wikipedia.org/wiki/Sed"&gt;Sed&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Less_(Unix)"&gt;Less&lt;/a&gt; and other command line tools&lt;/li&gt;
&lt;li&gt;  In editors (e.g. &lt;a href="https://docs.microsoft.com/en-us/visualstudio/ide/using-regular-expressions-in-visual-studio?view=vs-2019#capture-groups-and-replacement-patterns"&gt;VSCode&lt;/a&gt;), for quickly reformatting text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's also worth taking advantage of opportunities to use regex in these ways to practice your regex skills. &lt;/p&gt;

&lt;p&gt;For example, I recently used the following regex substitution in VSCode to format a dump of text into a table format:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00Z09PbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/dR5m7AyBayo8O9JFzjjfGlO-wdKSaIBxb_kxIfDGnJMGKmWI8Y2dDwmNAUlUjMlli6I5UtH3OheTGTmY9hEEluj6ieab68TbXG8oxk0QoSTV_SKQb1af95SXHoieMoOynVUqX44C" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00Z09PbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/dR5m7AyBayo8O9JFzjjfGlO-wdKSaIBxb_kxIfDGnJMGKmWI8Y2dDwmNAUlUjMlli6I5UtH3OheTGTmY9hEEluj6ieab68TbXG8oxk0QoSTV_SKQb1af95SXHoieMoOynVUqX44C" alt="regex replacement in VSCode" width="733" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  How to use regex
&lt;/h1&gt;

&lt;p&gt;Bear in mind that regular expressions parsers come in a few varieties. Basically, &lt;a href="https://en.m.wikipedia.org/wiki/Comparison_of_regular-expression_engines"&gt;every language implements its own parser&lt;/a&gt;. However, Perl’s regex parser is the gold standard. If you have a choice, use &lt;a href="https://www.pcre.org/"&gt;Perl Compatible Regular Expressions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  What regex looks like
&lt;/h2&gt;

&lt;p&gt;The traditional way to write a regular expression is by surrounding it with slashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;/^he[l]{2}o\wworld$/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how they're written in Perl and JavaScript, and in many command-line tools like Less.&lt;/p&gt;

&lt;p&gt;Many more modern languages (e.g. Python), however, have opted not to include a native regex type, and so regular expressions are simply written as strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"^he[l]{2}o\wworld$"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Common regex characters
&lt;/h2&gt;

&lt;p&gt;| &lt;code&gt;.&lt;/code&gt; | Matches any single character (except newlines, normally) |&lt;br&gt;
| &lt;code&gt;\&lt;/code&gt; | Escape a special character (e.g. &lt;code&gt;\.&lt;/code&gt; matches a literal dot) |&lt;br&gt;
| &lt;code&gt;?&lt;/code&gt; | The preceding character may or may not be present (e.g. &lt;code&gt;/hell?o/&lt;/code&gt; would match &lt;code&gt;hello&lt;/code&gt; or &lt;code&gt;helo&lt;/code&gt;) |&lt;br&gt;
| &lt;code&gt;*&lt;/code&gt; | Any number of the preceding character is allowed (e.g. &lt;code&gt;.*&lt;/code&gt; will match any single-line string, including an empty string, and gets used a lot) |&lt;br&gt;
| &lt;code&gt;+&lt;/code&gt; | One or more of the preceding character (&lt;code&gt;.+&lt;/code&gt; is the same as &lt;code&gt;.*&lt;/code&gt; except that it won’t match an empty string) |&lt;br&gt;
| &lt;code&gt;|&lt;/code&gt; | "or", match the preceding section or the following section (e.g. &lt;code&gt;hello|mad&lt;/code&gt; will match "hello" or "mad") |&lt;br&gt;
| &lt;code&gt;()&lt;/code&gt; | group a section together. This can be useful for conditionals (&lt;code&gt;(a|b)&lt;/code&gt;), multipliers (&lt;code&gt;(hello)+&lt;/code&gt;), or to create groups for substitutions (see below) |&lt;br&gt;
| &lt;code&gt;{}&lt;/code&gt; | Specify how many of the preceding character (e.g. &lt;code&gt;a{12}&lt;/code&gt; matches 12 "a"s in a row) |&lt;br&gt;
| &lt;code&gt;[]&lt;/code&gt; | Match any character in this set. &lt;code&gt;-&lt;/code&gt; defines ranges (e.g. &lt;code&gt;[a-z]&lt;/code&gt; is any lowercase letter), &lt;code&gt;^&lt;/code&gt; means "not" (e.g. &lt;code&gt;[^,]+&lt;/code&gt; match any number of non-commas in a row) |&lt;br&gt;
| &lt;code&gt;^&lt;/code&gt; | Beginning of line |&lt;br&gt;
| &lt;code&gt;$&lt;/code&gt; | End of line |&lt;/p&gt;
&lt;h2&gt;
  
  
  Character shortcuts in regex
&lt;/h2&gt;

&lt;p&gt;In most regex implementations, you can use backslash followed by a letter (&lt;code&gt;\x&lt;/code&gt;) as a shortcut for a character set. Here’s a list of some common ones from &lt;a href="https://www.rexegg.com/regex-quickstart.html"&gt;rexegg.com's regex cheat sheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRQlz6FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mLDT-nkK2WI62ovJy_t5GCadgA82pQ_W8FA_23Yvs0uPD0x4WPdq6mbgPj-GTHiePU5bLKiT7bStwgJzPq8boyreFekfcP21FFDVD9NDom1XXTPPAzw_2la0Fixbv6e2UPNlktPu" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRQlz6FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mLDT-nkK2WI62ovJy_t5GCadgA82pQ_W8FA_23Yvs0uPD0x4WPdq6mbgPj-GTHiePU5bLKiT7bStwgJzPq8boyreFekfcP21FFDVD9NDom1XXTPPAzw_2la0Fixbv6e2UPNlktPu" alt="RexEgg character table" width="609" height="597"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  
  
  Regex in conditionals
&lt;/h2&gt;

&lt;p&gt;The simplest use-case for regexes in programming is a string comparison. This looks different in different languages, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;Perl&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^he[l]{2}o\sworld$/&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;/^he&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;l&lt;/span&gt;&lt;span class="se"&gt;]{2}&lt;/span&gt;&lt;span class="sr"&gt;o&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;world$/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"^he[l]{2}o\sworld$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Regex in substitutions
&lt;/h2&gt;

&lt;p&gt;You can also use regex to manipulate strings through substitution. In the following examples, "mad world" will be printed out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;Perl&lt;/span&gt;
&lt;span class="nv"&gt;$hw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="nv"&gt;$hw&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/^(he[l]{2}o)\s(world)$/mad \2/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$hw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;he&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;l&lt;/span&gt;&lt;span class="se"&gt;]{2}&lt;/span&gt;&lt;span class="sr"&gt;o&lt;/span&gt;&lt;span class="se"&gt;)\s(&lt;/span&gt;&lt;span class="sr"&gt;world&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mad $2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"^(he[l]{2}o)\s(world)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"mad \2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Regex modifiers
&lt;/h2&gt;

&lt;p&gt;You can alter how regular expressions behave based on a few &lt;a href="https://www.rexegg.com/regex-modifiers.html"&gt;modifiers&lt;/a&gt;. I’m just going to illustrate one here, which is the modifier to make regex case insensitive. In Perl, JavaScript and other more traditional regex contexts, the modifiers are added after the last &lt;code&gt;/&lt;/code&gt;. More modern languages often user constants instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;Perl&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HeLlO wOrLd&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^he[l]{2}o\sworld$/i&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// JavaScript&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;/^he&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;l&lt;/span&gt;&lt;span class="se"&gt;]{2}&lt;/span&gt;&lt;span class="sr"&gt;o&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;world$/i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HeLlO wOrLd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{..}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"^he[l]{2}o\sworld$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"HeLlO wOrLd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Lookahead and lookbehind in regex
&lt;/h2&gt;

&lt;p&gt;These are only supported in some implementations of regular expressions, and give you the opportunity to match strings that precede or follow other strings, but without including the prefix or suffix in the match itself:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8PAKjY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/WIc9KXTDsqV-j14f5aJwfDXPQTHjAG6ybL8RUR1d7cR-Px0gq4YpOBoPzI0e7Q5KzllNAB0AMw_3UU0UOT5gEWWawWDjlAwYEzhR6qnc6D20pEmoK4r759e3p0R-EFfjTYPwT5xE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8PAKjY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/WIc9KXTDsqV-j14f5aJwfDXPQTHjAG6ybL8RUR1d7cR-Px0gq4YpOBoPzI0e7Q5KzllNAB0AMw_3UU0UOT5gEWWawWDjlAwYEzhR6qnc6D20pEmoK4r759e3p0R-EFfjTYPwT5xE" alt="RexEgg lookaround table" width="622" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Again, taken from &lt;a href="https://www.rexegg.com/regex-quickstart.html"&gt;rexegg.com's regex cheat sheet&lt;/a&gt;)&lt;/p&gt;

&lt;h1&gt;
  
  
  Regex resources
&lt;/h1&gt;

&lt;p&gt;That is all I have for now. If you want to learn more, there’s are a lot of useful resources out there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.rexegg.com/"&gt;Rexegg.com&lt;/a&gt; - Many great articles on most aspects of regex&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://regex101.com/"&gt;Regex101&lt;/a&gt; - A tester for your regex, offering a few different implementations&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ihateregex.io/"&gt;iHateRegex&lt;/a&gt; - A collection of example regex patterns for matching some common types of strings (e.g. phone number, email address)&lt;/li&gt;
&lt;li&gt;  The official &lt;a href="https://www.pcre.org/current/doc/html/"&gt;Perl Compatible Regular Expressions documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>Robin Winslow</name>
    </author>
    <id>https://dev.to/nottrobin/regex-basics-3224</id>
    <published>2022-08-08T21:53:00Z</published>
    <updated>2022-08-08T21:53:00Z</updated>
    <category term="regex"/>
    <category term="python"/>
    <category term="javascript"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#576 - Perl is on the Rise?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/576.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Personally I have noticed the fresh energy among all <strong>Perl</strong> fans ever since the release of latest <strong>Perl v5.36</strong>. I am telling this based on the amount of positive noise I heard on various public platform. There are still few in the pipeline that would give further push e.g. <strong>Corinna</strong>. If you are interested to know more then please do checkout this <a href="https://github.com/Ovid/Cor/wiki">page</a> maintained by <strong>Curtis Poe</strong>.</p>
<p><a href="https://metacpan.org/recent">MetaCPAN</a> is another place where you can see all the latest cool <strong>Perl</strong> projects. I know plenty of volunteers helping to improve the code base. If you use a distribution and you like it then why not share your experience with the <strong>Perl Community</strong> and submit your proposal to <a href="http://cfp.perladvent.org">Perl Advent Calendar 2022</a>? Or if you have created one then why not share with rest of the world.</p>
<p>If you are new to <strong>Perl</strong> and needs help then please do give us a shout. There are plenty of help available on various public platforms.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/576.html</id>
    <published>2022-08-08T10:00:00Z</published>
    <updated>2022-08-08T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Route-based Multi-Counter</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-08T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-route-based-multicounter"/>  <id>https://perlmaven.com/dancer2-solution-2-route-based-multicounter</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 176</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-176/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-176/</id>
    <published>2022-08-08T00:00:00Z</published>
    <updated>2022-08-08T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 177</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-177/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Damm Algorithm 10. TASK #2: Palindromic Prime Cyclops HEADLINES  Welcome to Week #177 of the weekly challenge.
Please checkout the interview with our champion PokGoPun.
I forgot to mention that Dave Cross is back in action last week. Two weeks in a row, Week 175 and Week 176, incredible.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-177/</id>
    <published>2022-08-08T00:00:00Z</published>
    <updated>2022-08-08T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Permuted Reversibly</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/07#pwc176" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the smallest integer x such that x, 2x, 3x, 4x, 5x and 6x are 
permuted multiples of each other.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_permuted{
    my($x, $y) = @_;
    my(@x, @y); 
    map {$x[$_]++} split(//, $x);
    map {$y[$_]++} split(//, $y);
    return false if $#x != $#y;
    my @matched = grep {(!$x[$_] &amp;&amp; !$y[$_]) || ($x[$_] &amp;&amp; $y[$_] &amp;&amp; $x[$_] == $y[$_])} 0 .. @y - 1;
    return true if @matched == @x;
    return false;
}

sub smallest_permuted{
    my $x = 0;
    {
        $x++;
        redo unless is_permuted($x, 2 * $x)     &amp;&amp; is_permuted(2 * $x, 3 * $x) &amp;&amp; 
                    is_permuted(3 * $x, 4 * $x) &amp;&amp; is_permuted(4 * $x, 5 * $x) &amp;&amp; 
                    is_permuted(5 * $x, 6 * $x);
    }
    return $x;
}

MAIN:{
    print smallest_permuted . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
142857
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is to check if any two numbers are permutations of each other by 
counting up the digits for each and comparing the counts. A fun use of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;
but I will admit it is a bit unnecessary. I implemented solutions to this problem in 
multiple languages and in doing so just sorted the lists of digits and compared them. Much
easier, but less fun!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find out all Reversible Numbers below 100.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub is_reversible{
    my($x) = @_;
    my @even_digits = grep { $_ % 2 == 0 } split(//, ($x + reverse($x)));
    return @even_digits == 0;
}

sub reversibles_under_n{
    my($n) = @_;
    my @reversibles;
    do{
        $n--;
        unshift @reversibles, $n if is_reversible($n);

    }while($n &gt; 0);
    return @reversibles;
}

MAIN:{
    print join(", ", reversibles_under_n(100)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My favorite use of Perl is to prototype algorithms. I'll get an idea for how to solve a
problem and then quickly prove out the idea in Perl. Once demonstrated to be effective
the same approach can be implemented in another language if required, usually for business
reasons but also sometimes simply for performance.&lt;/p&gt;

&lt;p&gt;The code here is concise, easy to read, and works well. It's also 3 times slower than
a Fortran equivalent.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ time perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90

real    0m0.069s
user    0m0.048s
sys     0m0.020s
-bash-5.0$ time fortran/ch-2     
          10
          12
          14
          16
          18
          21
          23
          25
          27
          30
          32
          34
          36
          41
          43
          45
          50
          52
          54
          61
          63
          70
          72
          81
          90

real    0m0.021s
user    0m0.001s
sys     0m0.016s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, the Fortran took at least 3x longer to write. These are the tradeoffs that get 
considered on a daily basis!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/"&gt;Challenge 176&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc176</id>
    <published>2022-08-07T12:16:00-04:00</published>
    <updated>2022-08-07T12:16:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Big number, small numbers</title>
    <link rel="alternate" href="https://dev.to/simongreennet/big-number-small-numbers-49h4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 176
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-176/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Permuted Multiples
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to find the smallest positive integer <code>x</code> such that <code>x</code>, <code>2x</code>, <code>3x</code>, <code>4x</code>, <code>5x</code> and <code>6x</code> are permuted multiples of each other.</p>

<h3>
  
  
  My solution
</h3>

<p>This is one challenge where we could over-engineer it to make it faster. Given that the solution can be found in a fraction of a second, this won't be necessary.</p>

<p>For example after 1,666, the next possible solution is 100,000. 1667 × 6 will result in a five digit number which can't possibly be a permutation of the original number.</p>

<p>The easiest way to work out if a number is a permutation is simply to sort the numbers numerically. In Python, we can do this by <code>''.join(sorted(str(num)))</code>. While <code>join '', sort split //, $num</code> will do a similar thing in Perl.</p>

<p>Like a lot of the challenges, I have a counter that starts at one, and increments until we have a solution. For each number, we figure out if the number multiplied 2 to 6 are a permutation of the original number, and exit the inner loop if it isn't. </p>

<p>Finally when I do find a solution, I print it out, and exit the <code>main()</code> function.</p>

<p>Did you know? The solution (142,857) has its own <a href="https://en.wikipedia.org/wiki/142,857">Wikipedia page</a>.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 
142857

$ ./ch-1.pl
142857
</code></pre>

</div>



<h2>
  
  
  Task 2: Reversible Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to find out all Reversible Numbers below 100. A number is said to be a reversible if sum of the number and its reverse had only odd digits.</p>

<h3>
  
  
  My solution
</h3>

<p>This is relatively straight forward challenge. Count from 1 to 99, and add to a <code>solutions</code> list if the number is a reversible number.</p>

<p>As python doesn't have an easy way to reverse an integer, I convert it to a string and back to an integer with <code>int(str(num)[::-1])</code>. In Perl, this simply done with the <code>reverse</code> method. To see if the number is odd, I compare it with the regular expression <code>^[13579]+$</code>.</p>

<p>I then print all the numbers in a <code>solutions</code> list.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90

$ ./ch-2.pl 
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/big-number-small-numbers-49h4</id>
    <published>2022-08-07T11:47:28Z</published>
    <updated>2022-08-07T11:47:28Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title># Perl Weekly Challenge 176: Permuted Multiples and Reversible Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/-perl-weekly-challenge-176-permuted-multiples-and-reversible-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10868</id>
    <published>2022-08-02T14:06:47Z</published>
    <updated>2022-08-07T03:08:12Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 176 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-176/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Aug. 7, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Permuted Multiples</h2>

<p><em>Write a script to find the smallest positive integer <code>x</code> such that <code>x</code>, <code>2x</code>, <code>3x</code>, <code>4x</code>, <code>5x</code> and <code>6x</code> are permuted multiples of each other.</em></p>

<p><em>For example, the integers 125874 and 251748 are permuted multiples of each other as</em></p>

<pre><code>251784 = 2 x 125874
</code></pre>

<p><em>and also both have the same digits but in different order.</em></p>

<p><em>Output</em></p>

<pre><code>142857
</code></pre>

<p>In Raku, Perl, and some other programming languages, conversions between numbers and strings are simple or even implicit and automatic. This task will be very easy for them. In some other languages, the strong typing system might make it more difficult. In such an event, we may also use a purely arithmetic method to retrieve the individual digits (see for example the C and bc implementations). This may have an impact on my choice of guest languages: I will not try guest languages that are crippled by a type system straitjacket.</p>

<h3>Permuted Multiples in Raku</h3>

<p>We&#8217;re essentially trying to find if the first six integer multiples of an integer are anagrams of each other. One way to go might be to store the individual digits in a hash and check whether we have the same digits. But it&#8217;s not so easy when the input number has twice or several times the same digit. It is usually easier (and probably faster) to reduce the input number to a normalized form (for example with the digits rearranged in ascending order) and to compare the normalized form of the input number with the normalized forms of the multiples. In the program below, the <code>ordered</code> variable is a string in which the digits of the input integer have been rearranged in ascending order. At the end, we only need a string comparison to find out whether the various integers have the same digits.</p>

<pre><code>sub check_multiples ($j) {
    my $ordered = join '', $j.comb.sort;
    for 2..6 -&gt; $k {
        return False if ($k * $j).comb.sort.join ne $ordered;
    }
    return True;
}

.say and last if check_multiples $_ for 1..Inf;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./permuted-multiples.raku
142857

real    0m3,370s
user    0m0,015s
sys     0m0,088s
</code></pre>

<p>We can significantly improve performance by adding one code line at the beginning of the <code>check_multiples</code> subroutine:</p>

<pre><code>sub check_multiples ($j) {
    return False if $j.chars != (6 * $j).chars; 
    my $ordered = join '', $j.comb.sort;
    for 2..6 -&gt; $k {
        return False if ($k * $j).comb.sort.join ne $ordered;
    }
    return True;
}
</code></pre>

<p>By returning early from the subroutine when the length of <code>6 * $j</code> is more than the length of <code>$j</code> we save quite a bit of useless computations. The execution time goes down to 1.390 sec. Another possibility would be to reverse the tests in the <code>for</code> loop, i.e. to go down from 6 to 2. </p>

<h3>Permuted Multiples in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the description in the Raku section above in you need explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub check_multiples {
    my $j = shift;
    my $ordered = join '', sort split //, $j;
    for my $k (2..6) {
        return 0 if $ordered ne join '', sort {$a cmp $b}  split //, ($k * $j);
    }
    return 1;
}

my $i = 1;
while (1) {
    if (check_multiples $i) {
        say $i;
        last;
    }
    $i++;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl  permuted-multiples.pl
142857

real    0m0,604s
user    0m0,546s
sys     0m0,046s
</code></pre>

<p>The Perl code is a bit longer than the Raku code, but the Perl program runs 5,6 times faster.</p>

<h3>Permuted Multiples in Julia</h3>

<p>In Julia, the built-in <code>digits</code> function returns the digits of a number. No need for conversions between integer and string and the other way around, and this leads to a quite concise program.</p>

<pre><code>function check_multiples(n)
    ordered = sort(digits(n))
    for j in 2:6
        if sort(digits(n * j)) != ordered
            return false
        end
    end
    return true
end

i = 1
while true
    if check_multiples(i)
        println(i)
        break
    end
    global i += 1
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia .\permuted-multiples.jl
142857
</code></pre>

<h3>Permuted Multiples in Python</h3>

<pre><code>def check_multiples(n):
  input = [int(c) for c in str(n)]
  input.sort()
  for i in range(2, 7):
    test = [int(c) for c in str(n * i)]
    test.sort()
    if input != test:
      return False
  return True


i = 2
while True:
  if check_multiples(i):
    print(i)
    break
  i += 1
</code></pre>

<p>Output:</p>

<pre><code>$ time python3 ./permuted-multiples.py
142857

real  0m0,745s
user  0m0,640s
sys   0m0,077s
</code></pre>

<h3>Permuted Multiples in awk</h3>

<p>The awk language is relatively slow, so I added a test:</p>

<pre><code>        if (length(test) != len) {
           return 0
        }
</code></pre>

<p>before the inner <code>for</code> loop to immediately go out of the loop and avoid the digit-by-digit comparison if the length of tested number is not the same as the length of the input number.</p>

<pre><code>function check_multiples(n) {
    split(n, ordered, "")
    asort(ordered)
    len = length(ordered)
    for (j = 2; j &lt;= 6; j++) {
        split(n * j, test, "")
        asort(test)
        if (length(test) != len) {
           return 0
        }
        for (k = 1; k &lt;= len; k++) {
            if (ordered[k] != test[k]) {
                return 0
            }
        }
    }
    return 1
} 

BEGIN  {
    i = 1
    while (1) {
        if (check_multiples(i)) {
            print i
            break
        }
    i++
    }
}
</code></pre>

<p>With the performance improvement described above, the runtime is quite good:</p>

<pre><code>$ time awk -f permuted-multiples.awk
142857

real    0m1,498s
user    0m1,343s
sys     0m0,015s
</code></pre>

<p>However, we can improve it by making the test earlier in the <code>check_multiples</code> function:</p>

<pre><code>function check_multiples(n) {
    if (length(n) != length(6 * n)) {
        return 0
    }
    split(n, ordered, "")
    asort(ordered)
    len = length(ordered)
    for (j = 2; j &lt;= 6; j++) {
        split(n * j, test, "")
        asort(test)
        for (k = 1; k &lt;= len; k++) {
            if (ordered[k] != test[k]) {
                return 0
            }
        }
    }
    return 1
}
</code></pre>

<p>With this change, the output is now this:</p>

<pre><code>$ time awk -f permuted-multiples.awk
142857

real    0m0,653s
user    0m0,624s
sys     0m0,031s
</code></pre>

<p>That&#8217;s 2.3 times faster. Not bad.</p>

<h3>Permuted Multiples in C</h3>

<p>The C implementation is quite verbose (and sort of a pain in the neck to get it right) compared to other languages, but I decided not to criticize this aspect any further when I saw the performance (barely more than 1/10 sec. runtime):</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int comp (const void * elem1, const void * elem2) {
    int f = *((int*)elem1);
    int s = *((int*)elem2);
    if (f &gt; s) return  1;
    if (f &lt; s) return -1;
    return 0;
}

int normalize (int num) {
    int n = num;
    int len = n &lt;= 9 ? 1 : floor(log10(n)) + 1;
    int d[len];  // array of digits of input number
    char st[len];
    int i = 0;
    while (n &gt; 0) {
        d[i] = n % 10;
        n /= 10;
        i++;
    }
    qsort (d, sizeof(d)/sizeof(*d), sizeof(*d), comp);
    int norm = 0;
    int j = 1;
    for (int i = len - 1; i &gt;= 0; i--) {
        norm += d[i] * j;
        j *= 10;
    }
    return norm;
}

int permuted_multiples (int n) {
    int norm_in = normalize(n);
    for (int i = 6; i &gt; 2; i--) 
        if (normalize(n * i) != norm_in) return 0;
    return 1;
}

int main () {
    int i = 1;
    while (1) {
        if (permuted_multiples(i)) {
            printf("%d\n", i);
            break;
        }
        i++;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ time ./a.out
142857

real    0m0,112s
user    0m0,078s
sys     0m0,000s
</code></pre>

<h3>Permuted Multiples in D</h3>

<p>D is similar to C, but with less pointer hassle and more built-in functions, making the syntax simpler:</p>

<pre><code>import std.stdio;
import std.conv, std.array;
import std.algorithm;

int normalize(int num) {
    string n = to!string(num, 10);
    ulong len = n.length;
    string[] d = n.split("");
    d.sort();
    return to!int(d.joiner);
}

bool permuted_multiples (int n) {
    int norm_in = normalize(n);
    for (int i = 6; i &gt; 2; i--) 
        if (normalize(n * i) != norm_in) return false;
    return true;
}

void main() {
    int i = 1;
    while (true) {
        if (permuted_multiples(i)) {
            printf("%d\n", i);
            break;
        }
        i++;
    }
    writeln(" ");
}
</code></pre>

<p>This program also displays 142857 and runs in .44 second (don&#8217;t compare with C, though, the timings are not equivalent for various reasons).</p>

<h2>Task 2: Reversible Numbers</h2>

<p><em>Write a script to find out all Reversible Numbers below 100.</em></p>

<blockquote>
  <p><em>A number is said to be a reversible if sum of the number and its reverse had only odd digits.</em></p>
</blockquote>

<p><em>For example,</em></p>

<pre><code>36 is reversible number as 36 + 63 = 99 i.e. all digits are odd.
17 is not reversible as 17 + 71 = 88, none of the digits are odd.
</code></pre>

<p><em>Output:</em></p>

<pre><code>10, 12, 14, 16, 18, 21, 23, 25, 27,
30, 32, 34, 36, 41, 43, 45, 50, 52,
54, 61, 63, 70, 72, 81, 90
</code></pre>

<h3>Reversible Numbers in Raku</h3>

<p>I first thought about using <em>junctions</em> to check whether all of the digits of the resulting number are odd (or, alternatively, whether any of the digits is even), but it rapidly occurred to me that a regex character class with all even digits is sort of equivalent to a junction with even digits, and that a regex solution would be much simpler (and, by the way, that the same solution could also be used in Perl (and possibly some other languages).</p>

<p>This leads to the following very simple code:</p>

<pre><code>print "$_ " unless $_ + .flip ~~ /&lt;[02468]&gt;/ for 1..100;
</code></pre>

<p>Used as a Raku one-liner, we obtain the following output:</p>

<pre><code>$ raku -e 'print "$_ " unless $_ + .flip ~~ /&lt;[02468]&gt;/ for 1..100;'
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Perl</h3>

<p>The Perl solution also uses a regex and an even-digit character class to do the job:</p>

<pre><code>for (1..100) {print "$_ " unless ($_ + reverse $_) =~ /[02468]/}
</code></pre>

<p>Used as a Perl one-liner, we obtain the following output:</p>

<pre><code>$ perl -e 'for (1..100) {print "$_ " unless ($_ + reverse $_) =~ /[02468]/}'
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Julia</h3>

<p>Julia uses the Perl Compatible Regular Expressions (PCRE) library to handle regexes. The <code>occursin</code> function returns a Boolean value telling us whether the regex pattern was found. This is almost as easy as in Raku and Perl</p>

<pre><code>for i in 1:100
    sum = i + parse(Int32, reverse(string(i)))
    if ! occursin(r"[02468]", string(sum))
        print("$i ")
    end
end
println(" ")
</code></pre>

<p>Output:</p>

<pre><code>$ julia .\reversible.jl
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in C</h3>

<p>The C language doesn&#8217;t have a standard string reverse function (although some implementations have it). So, we have to write one. Otherwise, we convert the integer sum to a string (using the <code>sprintf</code> function) and loop through the digits to check whether any of them is even, and return a false value (0) if such is the case.</p>

<pre><code>int reverse(int n) {
    char st[10];
    char r[10];
    int len = sprintf(st, "%d", n);   // convert input int to string
    for (int i = 0; i &lt; len; i++) {
        r[len - i - 1] = st[i];
    }
    r[len] = '\0';
    return atoi(r);
}

int is_reversible(int n) {
    char sum[10];
    int length =  sprintf(sum, "%d", n + reverse(n));
    for (int k = 0; k &lt; length; k++) {
        if (sum[k] % 2 == 0) {
            return 0;
        }
    }
    return 1;
}

int main () {
    for (int i = 1; i &lt; 100; i++) {
        if (is_reversible(i)) {
            printf("%d ", i);
        }
    }
    printf("%s\n", "");
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h4>C compared to Perl or Raku</h4>

<p>If you compare this 35-line C solution with the Raku or Perl one-liners shown above, you&#8217;ll probably understand why Raku and Perl are my favorite programming languages. Having said that, I should add that C, which was created in the early 1970s and is still very much in use half a century later, is sort of the mother of all languages (even the Perl interpreter is written mostly in C). And, as seen above in the context of the first task of this challenge, C is very fast.</p>

<p>For those of you old enough to remember the Usenet newsgroups, let me share this pearl of wisdom dating from the late 1990s.</p>

<p><strong>A Tribute to the Beatles &#8220;Let It Be&#8221; (and to Dennis M. Ritchie).</strong></p>

<p><em>To the tune of &#8220;Let It Be&#8221;.</em></p>

<p><em>To listen to it, go <a href="https://www.youtube.com/watch?v=wJ81MZUlrDo">there</a>.</em></p>

<blockquote>
  <p>When I find my code in tons of trouble,
Friends and colleagues come to me,
Speaking words of wisdom:
Write in C.</p>

<p>As the deadline fast approaches,
And bugs are all that I can see,
Somewhere, someone whispers:
Write in C.</p>

<p>Write in C, write in C,
Write in C, oh, write in C.
LOGO&#8217;s dead and buried,
Write in C.</p>
</blockquote>

<h3>Reversible Numbers in D</h3>

<p>The D programming language boasts to combine the performance and safety of compiled languages (such as C or C++) with the expressive power of modern dynamic and functional programming languages. The syntax is relatively close to C, but the program is notably shorter than its C counterpart. Here, we have methods to reverse a string (<code>retro</code>) and to easily convert integers to strings or strings to integers. As with our C implementation, we loop through the digits to check whether any of them is even, and return <code>false</code>  if such is the case.</p>

<pre><code>import std.stdio;
import std.conv, std.range;

bool is_reversible(int n) {
    string s = to!string(n, 10);
    string rev = s.retro.text;
    string sum = to!string(n + to!int(rev), 10);
    for (int k = 0; k &lt; sum.length; k++) {
        if (sum[k] % 2 == 0) {
            return false;
        }
    }
    return true;
}

void main() {
    for (int i = 1; i &lt; 100; i++) {
        if (is_reversible(i)) {
            printf("%d ", i);
        }
    }
    writeln(" ");
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in bc</h3>

<p>bc stands for &#8220;basic calculator&#8221; and was initially written almost half a century ago. As a (programmable) calculator, bc can run mathematical or arithmetic scripts, but it has no string manipulation features. So we use only arithmetical tools here. </p>

<pre><code>define reverse (n) {
    sum = 0
    j = 10 ^ (length(n) - 1)
    while (n &gt; 0) {
        sum += (n % 10) * j
        n = n/10
        j /= 10
    }
    return (sum )
}

define is_reversible(m) {
    sum = m + reverse(m)
    while (sum &gt; 0) {
        k = sum % 10
        if (k % 2 == 0) { 
            return 0 
        }
        sum /= 10
    }
    return 1
}

for (i = 1; i &lt;= 100; i++) {
    # print i, " "
    if (is_reversible(i)) {
        print i, " "
    }
}
quit
</code></pre>

<p>Output:</p>

<pre><code>$ bc -q reversible.bc
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72\
81 90
</code></pre>

<h3>Reversible Numbers in awk</h3>

<p>Compared to bc, awk has some limited string manipulation features (such as <code>substr</code>) that we put to good use here. awk also has some regex capabilities, but they’re associated with standard input (e.g. files) reading and did not seem to be usable in our context. So, our program is essentially based on arithmetic loops.</p>

<pre><code>function is_reversible(n) {
    len = length(n)
    m = ""
    for (j = len; j != 0; j--) {
        m = m substr(n, j, 1)
    }
    sum = m + n
    len = length(sum)
    for (k = 1; k &lt;= len; k++) {
        if ((substr(sum, k, 1) % 2) == 0) {
            return 0
        }
    }
    return 1
}

BEGIN {
    for (i = 1; i &lt;= 200; i++) {
        if (is_reversible(i)) {
            printf("%d ", i)
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f ./reversible.awk
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Python</h3>

<p>In Python, we use the features provided by the <code>re</code> regex library, leading to a fairly concise program.</p>

<pre><code>from re import search
pattern = r"[02468]"
for i in range(1, 100):
    tested = str(i + int(str(i)[::-1]))
    if not search(pattern, tested):
        print(i, end=' ')
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./reversible.py
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Ruby</h3>

<p>I really like Ruby&#8217;s ability to chain method invocations as in <code>sum = n + n.to_s.reverse.to_i</code>, which makes it possible to convert an integer to a string, to revert the string, to convert the resulting string back to an integer and finally finally to add it to another number, all in one short code line. We&#8217;ve done similar chained data conversions in Perl, Raku and Julia, but there is a number of mainstream programming languages which can&#8217;t do that (mostly because their built-in methods or functions often have side effects and are intrinsically not pure.</p>

<pre><code>def is_reversible(n)
    sum = n + n.to_s.reverse.to_i
    while (sum &gt; 0) 
        k = sum % 10
        if k % 2 == 0 
          return false 
        end
        sum /= 10
    end
    return true
end

for i in 1..100
    if is_reversible(i)
        printf("%d ", i)
    end
end
puts("")
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Scala</h3>

<p>Scala also provides the pleasant possibility to chain method invocations (as in <code>var sum = n + n.toString.reverse.toInt</code>). So, our Scala program looks quite similar to our Ruby implementation.</p>

<pre><code>object reversible extends App {
  def is_reversible(n: Int): Boolean = {
    var sum = n + n.toString.reverse.toInt
    while (sum &gt; 0) {
      val k = sum % 10
      if (k % 2 == 0) {
        return false
      }
      sum /= 10
    }
    return true
  }

  for (i &lt;- 1 to 100) {
    if (is_reversible(i)) {
      printf("%d ", i)
    }
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Ring</h3>

<pre><code>for i = 1 to 100
    if is_reversible(i)
        see "" + i + " "
    ok
next

func reverse(num)
    n = "" + num
    rev = ""
    for i = len(n) to 1 step -1
        rev +=  n[i]
    next
    return number(rev)

func is_reversible (m)
    sum = m + reverse(m)
    st = "" + sum
    for i = 1 to (len(st))
        if st[i] % 2 = 0
            return false
        ok
    next
    return true
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./reversible.ring
10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in JavaScript</h3>

<pre><code>function is_reversible (n) {
    var digits = n.toString().split("")
    let reverse_digits = digits.reverse()
    let reverse_n = parseInt(reverse_digits.join(""));
    var sum = n + reverse_n
    while (sum &gt; 0) {
        let k = sum % 10
        if (k % 2 == 0) { 
          return false 
        }
        sum = Math.floor(sum / 10)
    }
    return true    
}

for (var i = 1; i &lt;= 100; i++) {
    if (is_reversible(i)) {
        process.stdout.write(i + " ")
    } 
}
process.stdout.write(" \n")
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Nim</h3>

<p>I tried to use the <code>split</code> function with an empty string as a delimiter, but Nim&#8217;s <code>split</code> function apparently does not accept an empty string. Looking for a solution on the Internet, I found on <a href="https://stackoverflow.com/questions/50853426/how-do-i-convert-a-string-into-a-sequence-of-characters-in-nim">this Stack Overflow page</a> that a Nim string is a sequence of chars, so that a simple cast (e.g. <code>@(intToStr(n)</code>) will split the string into individual chars.</p>

<pre><code>import strutils
import algorithm 

proc is_reversible(n: int): bool =
  # A Nim string is a sequence of chars, so that a cast will 
  # split the string into individual chars
  let rev = parseInt(join(@(intToStr(n)).reversed(), ""))
  var sum = n + rev
  while sum &gt; 0:
    let k = sum mod 10
    if (k mod 2 == 0):
      return false
    sum = (sum / 10).int
  return true    


for i in 1..100:
  if is_reversible(i):
    stdout.write i, " "
echo ""
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Dart</h3>

<pre><code>import "dart:io";

void main() {
    for (int i = 0; i &lt;= 100; i++ ) {
        if (is_reversible(i)) {
            stdout.write("$i ");
        }
    }
}

bool is_reversible(n) {
    var rev = int.parse(n.toString().split("").reversed.join(""));
    var digits = (n + rev).toString().split("");
    int len = digits.length;
    for (int i = 0; i &lt; len; i++) {
        if (int.parse(digits[i]) % 2 == 0) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Kotlin</h3>

<pre><code>fun is_reversible(n: Int): Boolean {
    val sum = n + n.toString().reversed().toInt()
    val sumstr = sum.toString()
    for (i in 1..sumstr.length) {
        if (sumstr[i-1].toInt() % 2 == 0) {
            return false
        }
    }
    return true
}

fun main() {
    for (i in 1..100) {
        if (is_reversible(i)) {
            print("$i ")
        }
    }
    println(" ")
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Java</h3>

<p>My Java implementation of the reversible numbers task is faithful to Java&#8217;s reputation of being very verbose.</p>

<pre><code>public class ReversibleNumbers {

    public static int reverse(int n) {
        String n_str = String.valueOf(n);
        String rev = "";
        char ch;
        for (int i = 0; i &lt; n_str.length(); i++) {
            ch = n_str.charAt(i);   //extracts each character
            rev = ch + rev;         //adds each character in front of the existing string
        }
        return Integer.parseInt(rev);
    }

    public static boolean isReversible(int n) {
        int sum = n + reverse(n);
        char[] digits = String.valueOf(sum).toCharArray();
        for (int i = 0; i &lt; digits.length; i++) {
            if ((digits[i] - '0') % 2 == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        for (int i = 1; i &lt;= 100; i++) {
            if (isReversible(i)) {
                System.out.printf("%d ", i);
            }
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Lua</h3>

<pre><code>local function is_reversible(n)
    rev = tonumber(string.reverse(tostring(n)))
    sum = rev + n
    while sum &gt; 0 do
        if sum % 2 == 0 then
            return false
        end
        sum = math.floor(sum / 10)
    end
    return true
end

for i = 1, 100 do
    if is_reversible(i) then
        io.write(i, " ")
    end
end
print("")
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h3>Reversible Numbers in Go</h3>

<p>For some reason, programming languages maintained by groups of dedicated open-source users, such as Raku, Perl, Julia, Nim, JavaScript, Scala, Kotlin, and Lua, have an off-the-shelf <code>reverse</code> function or method, whereas programming languages maintained by very big corporations, such as Java or Go, don&#8217;t have it, in spite of their huge financial resources. It appears that the open-source model is more efficient. IT managers should think about it: the best programming languages might not be what they think.</p>

<pre><code>package main

import (
    "fmt"
    "strconv"
)

func reverse(n int) int {
    n_str := strconv.Itoa(n)
    rev := ""
    for _, v := range n_str {
        rev = string(v) + rev
    }
    rev_num, _ := strconv.Atoi(rev)
    return rev_num
}

func is_reversible(n int) bool {
    sum := n + reverse(n)
    sum_str := strconv.Itoa(sum)
    for i := 0; i &lt; len(sum_str); i++ {
        if sum_str[i] % 2 == 0 {
            return false
        }
    }
    return true
}

func main() {
    for i := 1; i &lt;= 100; i++ {
        if is_reversible(i) {
            fmt.Printf("%d ", i)
        }
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>10 12 14 16 18 21 23 25 27 30 32 34 36 41 43 45 50 52 54 61 63 70 72 81 90
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 14, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6899272257092785905</id>
    <published>2022-08-06T23:15:00.001+02:00</published>
    <updated>2022-08-06T23:15:34.297+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdiv) 14 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.51&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.51 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.053005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.053005&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.052010 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.96' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.96&lt;/strong&gt; on 2022-07-31&lt;/li&gt;  &lt;li&gt;Votes: 170&lt;/li&gt;  &lt;li&gt;Previous version: 0.95 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJNAPIORK/Catalyst-View-TT-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catalyst::View::TT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Template View Class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 2 years, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.19' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.19&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 3.18 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.09&lt;/strong&gt; on 2022-08-01&lt;/li&gt;  &lt;li&gt;Votes: 97&lt;/li&gt;  &lt;li&gt;Previous version: 4.07 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.11&lt;/strong&gt; on 2022-07-31&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 4.10 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.09&lt;/strong&gt; on 2022-08-01&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 10 years, 3 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RKITOVER/Net-SSH2-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::SSH2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Support for the SSH 2 protocol via libssh2. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.72 was 1 year, 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/Pithub-0.01038' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01038&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01037 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001002&lt;/strong&gt; on 2022-08-03&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.000028 was 2 years, 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9635' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9635&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9630 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016007&lt;/strong&gt; on 2022-08-04&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016006 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARKOV/XML-Compile-SOAP-3.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XML::Compile::SOAP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SOAP version 1.1 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.28&lt;/strong&gt; on 2022-08-01&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 3.27 was 1 year, 3 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6899272257092785905/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdiv-14-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6899272257092785905"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6899272257092785905"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdiv-14-great-cpan-modules-released.html" title="(cdiv) 14 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6205877060506931455</id>
    <published>2022-08-06T23:12:00.002+02:00</published>
    <updated>2022-08-06T23:12:52.065+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxviii) metacpan weekly report - Algorithm::Line::Bresenham</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 32&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Algorithm::Line::Bresenham" target="_blank"&gt;Algorithm::Line::Bresenham (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/08/06 21:12:25 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::ConfigParser" target="_blank"&gt;Apache::ConfigParser&lt;/a&gt; - Load Apache configuration files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PFT" target="_blank"&gt;App::PFT&lt;/a&gt; - Hacker friendly static blog generator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::SyncCPANfile" target="_blank"&gt;Dist::Zilla::Plugin::SyncCPANfile&lt;/a&gt; - Sync a cpanfile with the prereqs listed in dist.ini&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::ValueWriter::XLSX" target="_blank"&gt;Excel::ValueWriter::XLSX&lt;/a&gt; - generating data-only Excel workbooks in XLSX format, fast&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Fzf" target="_blank"&gt;Search::Fzf&lt;/a&gt; - Ported Fzf using perl. &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Tools::HTTP::UA::Mojo" target="_blank"&gt;Test2::Tools::HTTP::UA::Mojo&lt;/a&gt; - Mojo user agent wrapper for Test2::Tools::HTTP&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Line::Bresenham" target="_blank"&gt;Algorithm::Line::Bresenham&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=170)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Hooks::AtRuntime" target="_blank"&gt;B::Hooks::AtRuntime&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=178)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ptkdb" target="_blank"&gt;Devel::ptkdb&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::StrictMode" target="_blank"&gt;Devel::StrictMode&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Form::Diva" target="_blank"&gt;Form::Diva&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::AnyNum" target="_blank"&gt;Math::AnyNum&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=472)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Spreadsheets" target="_blank"&gt;Net::Google::Spreadsheets&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SFTP::Foreign" target="_blank"&gt;Net::SFTP::Foreign&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PadWalker" target="_blank"&gt;PadWalker&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Reuse" target="_blank"&gt;PDF::Reuse&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::Me" target="_blank"&gt;Promise::Me&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable::Improved" target="_blank"&gt;Storable::Improved&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Quote" target="_blank"&gt;Sub::Quote&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Binmode" target="_blank"&gt;Sys::Binmode&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown::Hoedown" target="_blank"&gt;Text::Markdown::Hoedown&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::HiRes" target="_blank"&gt;Time::HiRes&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Variable::Magic" target="_blank"&gt;Variable::Magic&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6205877060506931455/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6205877060506931455"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6205877060506931455"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxviii-metacpan-weekly-report.html" title="(dxviii) metacpan weekly report - Algorithm::Line::Bresenham"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6678998493873591637</id>
    <published>2022-08-06T23:11:00.001+02:00</published>
    <updated>2022-08-06T23:11:48.538+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-08-06 21:10:40 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73225870" target="_blank"&gt;Perl: speed of s/// with variable in replacement&lt;/a&gt; - [&lt;b&gt;7&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73239362" target="_blank"&gt;Perl regex capture groups and nth occurence&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73249717" target="_blank"&gt;How can I pass prove (Test::More) an argument, e.g. an API URL?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73252211" target="_blank"&gt;Perl regex combining capture groups &amp;amp; nth string&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73262562" target="_blank"&gt;Linux grep command in Perl script now working&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6678998493873591637/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6678998493873591637"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6678998493873591637"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlvi-stackoverflow-perl-report.html" title="(dxlvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Match Anything, Quickly</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/08/match-anything-quickly.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10871</id>
    <published>2022-08-06T05:39:25Z</published>
    <updated>2022-08-06T05:44:30Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Sometimes I want to filter a set of strings, but the details of the filter are not known beforehand. In particular, I may want a null filter, which simply accepts anything.</p>

<p>This looks like a job for a regular expression, but I can think of at least two implementations. One is to pass around regular expression objects. The second is to wrap a match (<code>m//</code>) in a subroutine reference, and pass that around. Given the use of regular expressions, there are a number of possibilities for a regular expression that matches any string.</p>

<p>I wondered whether one of the alternatives I was choosing among was faster than another, so I decided to <a href="https://perldoc.perl.org/Benchmark.html"><code>Benchmark</code></a> them. Both implementations applied the regular expression to a global variable. In practice this would probably be a localized <code>$_</code>, but my read of the <a href="https://perldoc.perl.org/Benchmark.html"><code>Benchmark</code></a> module says that it also localizes <code>$_</code>, but leaves it <code>undef</code>.</p>

<p><strong>Note</strong> that the empty pattern is not benchmarked, because it is equivalent to the last successfully-matched pattern, if any. The <code>sub { 1 }</code> was included because if we're dealing in code references, the null filter simply needs to return a true value.</p>

<p>Here are the results, obtained with Perl 5.36.0, unthreaded. The script that generated them is on <a href="https://trwyant.github.io/blog/2022-08-05/match-anything-quickly.PL">GitHub</a></p>

<table>
<thead>
<tr><th>Implementation</th><th>Rate</th></tr>
</thead>
<tbody>
<tr><td>sub { 1 }</td><td style="text-align: right;">294117647.06/sec</td></tr>
<tr><td>sub { m/ .? /smx }</td><td style="text-align: right;">21645021.65/sec</td></tr>
<tr><td>sub { m/ .{0} /smx }</td><td style="text-align: right;">21598272.14/sec</td></tr>
<tr><td>sub { m/ (*ACCEPT) /smx }</td><td style="text-align: right;">20964360.59/sec</td></tr>
<tr><td>sub { m/ (?) /smx }</td><td style="text-align: right;">20876826.72/sec</td></tr>
<tr><td>sub { m/ \A /smx }</td><td style="text-align: right;">20746887.97/sec</td></tr>
<tr><td>sub { m/ (?:) /smx }</td><td style="text-align: right;">20618556.70/sec</td></tr>
<tr><td>sub { m/ ^ /smx }</td><td style="text-align: right;">20618556.70/sec</td></tr>
<tr><td>qr/ (?) /smx</td><td style="text-align: right;">2344665.89/sec</td></tr>
<tr><td>qr/ (?:) /smx</td><td style="text-align: right;">2344116.27/sec</td></tr>
<tr><td>qr/ ^ /smx</td><td style="text-align: right;">2336448.60/sec</td></tr>
<tr><td>qr/ \A /smx</td><td style="text-align: right;">2315350.78/sec</td></tr>
<tr><td>qr/ .? /smx</td><td style="text-align: right;">2208968.41/sec</td></tr>
<tr><td>qr/ .{0} /smx</td><td style="text-align: right;">2180074.12/sec</td></tr>
<tr><td>qr/ (*ACCEPT) /smx</td><td style="text-align: right;">1717327.84/sec</td></tr>
</tbody>
</table>

<p>Somewhat to my surprise, the subroutine-reference implementation was an
order of magnitude faster than the regular-expression-reference implementation.
I expected that, <code>Regexp</code>s being first-class objects, it would be
pretty much equivalent to <code>m/ ... /</code> wrapped in a subroutine --
maybe even a little faster.</p>

<p>A little messing around with <code>perl -MO=Concise</code> got me the following:</p>

<pre>
$ perl -MO=Concise -e '$_ =~ m/foo/;'
5  &lt;@&gt; leave[1 ref] vKP/REFC -&gt;(end)
1     &lt;0&gt; enter v -&gt;2
2     &lt;;&gt; nextstate(main 1 -e:1) v:{ -&gt;3
4     &lt;/&gt; match(/"foo"/) vKS -&gt;5
-        &lt;1&gt; ex-rv2sv sK/1 -&gt;4
3           &lt;$&gt; gvsv(*_) s -&gt;4
-e syntax OK
$ perl -MO=Concise -e '$_ =~ qr/foo/;'
7  &lt;@&gt; leave[1 ref] vKP/REFC -&gt;(end)
1     &lt;0&gt; enter v -&gt;2
2     &lt;;&gt; nextstate(main 1 -e:1) v:{ -&gt;3
6     &lt;/&gt; match() vKS -&gt;7
-        &lt;1&gt; ex-rv2sv sK/1 -&gt;4
3           &lt;$&gt; gvsv(*_) s -&gt;4
5        &lt;|&gt; regcomp(other-&gt;6) sK -&gt;6
4           &lt;/&gt; qr(/"foo"/) s -&gt;5
-e syntax OK
</pre>

<p>The salient difference, to my eye, was the presence of the <code>regcomp</code> operator in the second case. <a href="https://metacpan.org/pod/Perldoc::Search"><code>perldoc-search</code></a> on this led me eventually to <a href="https://perldoc.perl.org/perlreapi.html"><code>perlreapi</code></a> which says, in part,</p>

<p><br />
<dl><br />
    <dt>"precomp" "prelen"</dt><br />
    <dd><br />
	<p>Used for optimisations. "precomp" holds a copy of the pattern that was compiled and "prelen" its length. When a new pattern is to be compiled (such as inside a loop) the internal "regcomp" operator checks if the last compiled "REGEXP"'s "precomp" and "prelen" are equivalent to the new one, and if so uses the old pattern instead of compiling a new one.</p></p>

<p>	<p>The relevant snippet from "Perl_pp_regcomp":</p><br />
	<pre><br />
            if (!re || !re-&gt;precomp || re-&gt;prelen != (I32)len ||<br />
                memNE(re-&gt;precomp, t, len))<br />
            /* Compile a new pattern */<br />
	</pre><br />
    </dd><br />
</dl></p>

<p>So I <strong>assume</strong> that the speed difference <strong>might</strong> be reduced if the filter was called in a tight enough loop. But if so, the <a href="https://perldoc.perl.org/Benchmark.html"><code>Benchmark</code></a> loop is not tight enough, and it's pretty tight. On the other hand, maybe the <code>Benchmark</code> loop <strong>is</strong> tight enough, and the extra time is spent determining that a recompilation is not needed. But it will take deeper knowledge of Perl internals than I possess to sort this out.</p>
]]>
        
    </content>
</entry>
  <entry>
    <title>Wie erstellt man eine User Story Map?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Die Methode des User Story Mappings soll den am Prozess der  Softwareerstellung beteiligten Personen helfen, für den Anwender hilfreiche Software zu erstellen und dabei den Überblick über das große Ganze zu behalten. Wie wird nun ein solches User Story Mapping durchgeführt?</div>
    </content>
    <id>https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map</id>
    <published>2022-08-05T10:00:00Z</published>
    <updated>2022-08-05T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Terrain ColoringBook</title>
    <link rel="alternate" href="https://dev.to/pluscoloring/terrain-coloringbook-30d" type="text/html"/>
    <content type="html">&lt;p&gt;Scripts and output for &lt;a href="https://pluscoloring.com/"&gt;coloring page&lt;/a&gt; book pages based on digital elevation data&lt;/p&gt;

&lt;p&gt;Introduction&lt;br&gt;
Adult coloring books are all the rage. Most are hand-drawn, and subjects are wide-ranging. I happen to love maps and landscape data, so I created an automated method to convert digital elevation models (or any greyscale image, for that matter) into a color-able coloring book image.&lt;/p&gt;

&lt;p&gt;View the web site here.&lt;/p&gt;

&lt;p&gt;before after&lt;/p&gt;

&lt;p&gt;Usage&lt;br&gt;
Before using the included Perl script, you'll need to make sure that the NetPBM and TurboJPEG packages are installed and in the user's path. You can do this on an RPM system with:&lt;/p&gt;

&lt;p&gt;sudo yum install libjpeg-turbo-utils netpbm-progs&lt;br&gt;
The script operates on whole directories. Every image in the indir (below) will be converted and an output image file and thumbnail will be created in the outdir (which will be created if it does not already exist). Run the script like so:&lt;/p&gt;

&lt;p&gt;makeOutlineImage.pl indir outdir&lt;/p&gt;

</content>
    <author>
      <name>emre tekir</name>
    </author>
    <id>https://dev.to/pluscoloring/terrain-coloringbook-30d</id>
    <published>2022-08-04T07:58:19Z</published>
    <updated>2022-08-04T07:58:19Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Testing Code That is Difficult to Test (With Perl)</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/testing-code-that-is-difficult-to-test-with-perl-81n" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Code that performs side effects is difficult to test because we need figure out how to sandbox the effects so we can observe the state of the sandbox before and after executing the effectful code. The difficulty is increased when the side effectful code also depends on specific OS configurations. Let us explore my solution to such a predicament.</p>

<p>I have been working on the next major release of my <a href="https://btrfs.wiki.kernel.org/index.php/Main_Page">btrfs</a> snapshot manager <a href="https://github.com/NicholasBHubbard/yabsm">yabsm</a> and I want to write unit tests for functions that take and delete btrfs snapshots. This code performs the side effect of taking and deleting snapshots and depends on the OS having a btrfs subvolume available that the user running the program has read+write permissions on.</p>

<p>Yabsm is written in Perl so if you don't know Perl it may be difficult to follow the code examples.</p>

<p><a id="org8ffeacf"/></p>

<h1>
  
  
  Disclaimer
</h1>

<p>This is just a description of a solution to a problem I came across. I do not claim to be any kind of authority on code testing.</p>

<p><a id="orga1cad11"/></p>

<h1>
  
  
  A quick note on btrfs
</h1>

<p>Btrfs is a Linux filesystem that allows you to take snapshots of your filesystem. A btrfs filesystem is organized into various "subvolumes" that can be mounted at various locations in your file tree. A common configuration is to have three subvolumes mounted at <code>/</code>, <code>/home</code>, and <code>/.snapshots</code> so you can seperately snapshot your <code>/</code>, and <code>/home</code> directories, and store the snapshots in <code>/.snapshots</code>.</p>

<p><a id="orga6ee1a8"/></p>

<h1>
  
  
  The code to be tested
</h1>

<p>Let us assume we have already defined the following 4 predicates.</p>

<p><code>is_btrfs_subvolume</code> is satisfied if passed a string representing the path of a btrfs subvolume on the system.</p>

<p><code>is_btrfs_dir</code> is satisfied if passed a string representing a directory on the system that resides on a btrfs subvolume.</p>

<p><code>is_btrfs_snapshot</code> is satisfied if passed a string representing a path to a btrfs snapshot on the system. This predicate is a bit of a fib because every snapshot is also a subvolume and thus would also be satisfied by <code>is_btrfs_subvolume</code>. For simplicity purposes we will pretend that we can differentiate between subvolumes and snapshots.</p>

<p><code>can_read_write_dir</code> is satisfied if passed a directory that the current user has read+write permissions for.   </p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>sub take_snapshot {

    # Take a read-only btrfs snapshot of $subvolume named $name and place it in
    # $destination.

    my $name        = shift;
    my $subvolume   = shift;
    my $destination = shift;

    # preconditions
    return 0 unless is_btrfs_subvolume($subvolume);
    return 0 unless can_read_write_dir($subvolume);
    return 0 unless is_btrfs_dir($destination);
    return 0 unless can_read_write_dir($destination);

    # WARNING: Calling system like this is dangerous - see the appendix for a detailed explanation
    my $cmd    = "btrfs subvolume snapshot -r '$subvolume' '$destination/$name'";
    my $status = system $cmd;

    unless (0 == $status) {
        die "Aborting because '$cmd' exited with non-zero status";
    }

    return 1;
}

sub delete_snapshot {

    # Delete the btrfs snapshot $snapshot.

    my $snapshot = shift;

    # preconditions
    return 0 unless is_btrfs_snapshot($snapshot);
    return 0 unless can_read_write_dir($snapshot);

    # WARNING: Calling system like this is dangerous - See the appendix for a detailed explanation
    my $cmd    = "btrfs subvolume delete '$snapshot'";
    my $status = system $cmd;

    unless (0 == $status) {
        die "Aborting because '$cmd' exited with non-zero status";
    }

    return 1;
}
</code></pre>

</div>

<p><a id="org2b68600"/></p>

<h1>
  
  
  Testing the code
</h1>

<p>As you can see the code above uses the 4 predicates to assert that preconditions are met before we perform the actual side effect of taking or deleting a snapshot. It is also important to notice that if the side effect fails (determined via <code>btrfs</code>'s exit status) then we kill the program. There is an underlying assumption going on here; if certain preconditions are met then we can be sure that our <code>btrfs</code> system command will run successfully.</p>

<p>Hmm, maybe in our test environment we can set up different scenarios around these preconditions and see if our assumptions are correct.</p>

<ol>
<li>
<p>Finding a btrfs subvolume</p>

<p>We cannot take and delete snapshots unless we have a btrfs subvolume available. The simplest way to find a btrfs subvolume is to ask the tester to supply us one via a command line parameter. We can use Perl's built-in <a href="https://perldoc.perl.org/Getopt::Long">Getopt::Long</a> library to make this easy.</p>
<pre class="highlight plaintext"><code>use Getopt::Long;
my $BTRFS_SUBVOLUME;
GetOptions( 's=s' =&gt; \$BTRFS_SUBVOLUME );
</code></pre>
<p>We now have a variable <code>$BTRFS_SUBVOLUME</code>, that if defined means the tester supplied us with a btrfs subvolume.</p>

<p>Perl's built-in <a href="https://perldoc.perl.org/Test::More">Test::More</a> library allows us to skip tests if certain conditions are met so we can use the definedness of <code>$BTRFS_SUBVOLUME</code> for such conditions.    </p>
</li>
<li>
<p>Setting up the sandbox</p>

<p>If <code>$BTRFS_SUBVOLUME</code> is defined then we can attempt to set up our sandbox.</p>

<p>We will use the <code>tempdir</code> function from the built-in <code>File::Temp</code> library to create a sandbox directory that will be removed when our test script terminates. This sandbox will reside on the <code>$BTRFS_SUBVOLUME</code> which means we can place snapshots inside it.</p>

<p>We will require that our test script needs to be run with root privilages so we can be sure we have the necessary permissions for taking and deleting snapshots.</p>
<pre class="highlight plaintext"><code>use File::Temp 'tempdir';

my $BTRFS_SANDBOX;
if ($BTRFS_SUBVOLUME) {
    die "Must be root user" if $&lt;;
    die "'$BTRFS_SUBVOLUME' is not a btrfs subvolume" unless is_btrfs_subvolume($BTRFS_SUBVOLUME);
    $BTRFS_SANDBOX = tmpdir('sandboxXXXXXX', DIR =&gt; $BTRFS_SUBVOLUME, CLEANUP =&gt; 1);
    die "'$BTRFS_SANDBOX' is not a btrfs directory" unless is_btrfs_dir($BTRFS_SANDBOX);
}
</code></pre>
</li>
<li>
<p>Testing</p>

<p>We are ready to write our tests! Lets use the <a href="https://metacpan.org/pod/Test::Exception">Test::Exception</a> library from <a href="https://www.cpan.org/">CPAN</a> to test that our subroutines don't kill the program when they're not supposed to.</p>

<p>Please refer to the documentation on <a href="https://metacpan.org/pod/Test::Exception#lives_and">Test::Exception::livesand</a>, <a href="https://perldoc.perl.org/Test::More#is">Test::More::is</a> and <a href="https://perldoc.perl.org/Test::More#SKIP:-BLOCK">Test::More SKIP blocks</a> if you are confused about the test framework specific code.</p>

<p>Here's the tests - be sure to read the comments!</p>
<pre class="highlight plaintext"><code>use Test::More 'no_plan';
use Test::Exception;

SKIP: {
    skip "Skipping btrfs specific tests because we don't have a btrfs sandbox available", 9
        unless $BTRFS_SUBVOLUME;

    ### take_snapshot

    # All the preconditions for taking a snapshot should be met
    lives_and { is take_snapshot('foo', $BTRFS_SUBVOLUME, $BTRFS_SANDBOX), 1 } 'take_snapshot terminated are returned true';

    # Make sure the snapshot was actually created
    is(is_btrfs_snapshot("$BTRFS_SANDBOX/foo"), 1, 'The snapshot was created');

    ### delete_snapshot

    # All the preconditions for deleting a snapshot should be met
    lives_and { is delete_snapshot("$BTRFS_SANDBOX/foo"), 1 } 'delete_snapshot terminated and returned true';

    # Make sure the snapshot was actually deleted
    is(is_btrfs_snapshot("$BTRFS_SANDBOX/foo"), 0, 'The snapshot was deleted');

    ### Preconditions not met

    # There is no subvolume named "$BTRFS_SANDBOX/quux"
    lives_and { is take_snapshot('foo', "$BTRFS_SANDBOX/quux", $BTRFS_SANDBOX), 0 } 'take_snapshot returns false if non-existent subvolume';
    is(is_btrfs_snapshot("$BTRFS_SANDBOX/foo"), 0, 'no snapshot was created');

    # There is no btrfs directory named "$BTRFS_SANDBOX/quux"
    lives_and { is take_snapshot('foo', $BTRFS_SUBVOLUME, "$BTRFS_SANDBOX/quux"), 0 } 'take_snapshot returns false if non-existent btrfs target dir;
    is(is_btrfs_snapshot("$BTRFS_SANDBOX/quux/foo"), 0, 'no snapshot was created');

    # There is no snapshot named "BTRFS_SANDBOX/quux"
    lives_and { is delete_snapshot("$BTRFS_SANDBOX/quux"), 0 } 'delete_snapshot returns false if non-existent snapshot;
}
</code></pre>
<p>The way I test the code is by testing that if <code>take_snapshot</code> and <code>delete_snapshot</code> are called with arguments that satisfy their preconditions, the functions execute succesfully. I then then observe the state of the sandbox to see if a snapshot was in fact taken or deleted.</p>

<p>I also test that if I call the functions with arguments that do not satisfy the preconditions then the side-effect of taking/deleting a snapshot is never performed. </p>
</li>
</ol>

<p><a id="orge975103"/></p>

<h1>
  
  
  Summary
</h1>

<p>The first step to testing side-effectful code is to write the code in a way that allows it to be tested. I used a set of preconditions on function arguments that if satisfied should result in succesful execution of the side effect. I was able to set up a testing sandbox where I can observe the valididity of these assumptions.</p>

<h1>
  
  
  Appendix
</h1>

<p>Thank you to thrig on IRC for pointing out that the way I call <code>system</code> in <code>take_snapshot</code> and <code>delete_snapshot</code> is dangerous. They even wrote a personalized article on why and how to fix it! <a href="https://thrig.github.io/2022/08/04/shell-elimiation-3.html">https://thrig.github.io/2022/08/04/shell-elimiation-3.html</a></p>

</div>
    </content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/testing-code-that-is-difficult-to-test-with-perl-81n</id>
    <published>2022-08-03T23:03:00Z</published>
    <updated>2022-08-03T23:03:00Z</updated>
    <category term="perl"/>
    <category term="testing"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): July 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-08-03:/post/maintaining_perl_dave_mitchell_july_2022</id>
  <published>2022-08-03T21:15:22</published>
  <updated>2022-08-03T21:15:22</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during July covered by my TPF perl core maintenance grant.  3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz  3:28 Format in fill-mode has inconsistent behaviour  4:58 Goto xsub forces scalar context  0:57 Returning undef returns a weird hash reference  0:37 Segmentation fault with use re 'eval'  0:20 fix build warning  39:28 make stack reference counted  6:11 process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes: </p>

<p>This is my monthly report on work done during July covered by my TPF perl
core maintenance grant.
<code>
      3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz (Issue #19939)
      3:28 Format in fill-mode has inconsistent behaviour (Issue #19985)
      4:58 Goto xsub forces scalar context (#19188)
      0:57 Returning undef returns a weird hash reference (Issue #19996)
      0:37 Segmentation fault with use re 'eval' (Issue #19390)
      0:20 fix build warning
     39:28 make stack reference counted
      6:11 process p5p mailbox
      1:16 segfault on goto &amp;xs_sub when calling sub is replaced (Issue #19936)
    ------
     61:12 TOTAL (HH::MM)
</code>
I worked on quite a few tickets last month, but the most important thing I
did was to continue work on making the stack reference counted (work I
started near the end of June).</p>

<p>This is still very much a work in progress and I have nothing visible
(i.e. pushed) to show for it yet, but what I have done so far is:</p>

<p>1) Put wrappers around 254 pp functions.</p>

<p>This changes the definitions of pp function from e.g.:
<code>
    PP(pp_subst)
    {
        ...
    }
</code>
to
<code>
    PP_wrapped(pp_subst, ((PL_op-&amp;gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0)
    {
        ...
    }
</code>
which on normal builds has no effect, but on builds with <code>PERL_RC_STACK</code>
defined, it expands to something like:
```
    OP*
    Perl_pp_subst(aTHX) {
        return
            Perl_pp_wrap(my_perl, S_norcs_pp_subst,
                ((PL_op-&gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0);
    }</p>

<pre><code>STATIC OP*
S_norcs_pp_subst(pTHX)
{
    ...
}
</code></pre>

<p><code>``
</code>pp_wrap()<code>is responsible for pushing a (non-reference-counted) copy
of the current stack frame onto the end of the stack, then calling the
original pp function</code>S_norcs_pp_subst()`, which doesn't know about
reference-counted arguments, then shifting down and bumping the reference
count of everything that it returns on the stack.</p>

<p>The two numeric arguments for <code>pp_wrap</code> are how many arguments that op
expects on the stack, or for list ops, how many (mark-delineated) lists it
expects. Often these are just constants, but for some, like <code>pp_subst</code>, it
varies depending on flags.</p>

<p>2) Of the remaining 56 pp functions, some didn't need wrapping (like
<code>pp_pushmark</code>), while others required special handling - like most of the
<code>pp_enterfoo</code> and <code>pp_leavefoo</code> functions. For example most leavefoo ops in
void context just abandon any arguments left on the stack:
<code>
    PL_stack_sp = PL_stack_base + cx-&amp;gt;blk_oldsp;
</code>
For a reference-counted stack, this means that all those SVs leak. So I've
replaced all such occurrences with an inline function call:
<code>
    rpp_pop_to(PL_stack_base + cx-&amp;gt;blk_oldsp);
</code>
which on normal builds just resets <code>PL_stack_sp</code>, while on <code>PERL_RC_STACK</code>
builds, it will decrement the reference count of all those abandoned stack
items first.</p>

<p>I have almost finished doing (2) - just a handful of ops still need going
over on a line-by-line basis (in particular <code>pp_goto()</code>, which I've been
leaving to absolutely last).</p>

<p>None of the changes I've done so far actually do reference-counting yet: <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc currently have any <code>SvREFCNT_dec()</code>s etc
commented out. The idea is that I can initially add all these
modifications to the core while perl still works, Then once all that work
is done I should be able to make changes in a small number of places - <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc - and the whole of the perl core should
become reference-count-aware at once. This means that initially the core
will be merely mostly broken rather than completely broken, and it should
be easier to fix up those remaining bits which need it.</p>

<p>Then later on, things can be made more efficient again, e.g. by removing
the wrapper functions from common ops and make them directly
reference-count aware instead.</p>

<p>PS - for the avoidance of doubt, even with all these changes, unless the
core is built with <code>PERL_RC_STACK</code> defined, none of these changes take
affect yet.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Meet The Champion: June 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/meet-the-champion-2022-06/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Get to know about PokGoPun. Welcome to the monthly series Meet The Champion.
Last month we spoke to Robert Ransbottom, the winner of May 2022.
Today we are talking to PokGoPun, the winner of June 2022 of The Weekly Challenge. I hope you are going to enjoy the interview.
 Mohammad: Tell us about your technical background?
PokGoPun: My passion in computer programming started since childhood when my parents brought home 8-bit home computer that equipped with Microsoft Extended BASIC, I recalled hooking the computer to TV, writing and running BASIC programs and then saving them to cassette tape for later modification, what a fun!</div>
    </content>
    <id>https://theweeklychallenge.org/blog/meet-the-champion-2022-06/</id>
    <published>2022-08-02T00:00:00Z</published>
    <updated>2022-08-02T00:00:00Z</updated>
  </entry>
  <entry>
  <title>Grants: July 2022 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_july_2022_votes"/>
  <id>tag:news.perlfoundation.org,2022-08-01:/post/grants_july_2022_votes</id>
  <published>2022-08-01T21:06:12</published>
  <updated>2022-08-01T21:06:12</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the July 2022 round. One grant request was submitted: Grant Proposal: Google TensorFlow API Bindings for Perl VOTING RESULTS: Approved. 3 YES votes 0 NO votes, 3 ABSTAIN We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the July 2022 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_tensorflow_jnap_july_2022">Grant Proposal: Google TensorFlow API Bindings for Perl (John Napiorkowski)</a> (USD 8,800)</h4>

<p>VOTING RESULTS: Approved. 3 YES votes (12 points), 0 NO votes, 3 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#575 - Backward compatibility</title>
    <link rel="alternate" href="https://perlweekly.com/archive/575.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>One of the ongoing discussions in the Perl community is the question of backward compatibility. One group of people say it is (one of) the most important traits of Perl that you can run very old code on a very new version of Perl. The other side mostly say that there are very few cases when this is actually needed and the change in the version of Perl is just one aspect of upgrades people need to handle.</p>
<p>Then comes the case, like the introduction of th $00 variable in Perl 5.32 that breaks the code of people who used that variable for their own purposes. This is not the first case where a change in perl (or for that matter in a CPAN module) breaks some working code. Neither will be the last.</p>
<p>So the question isn't IF there can be changes breaking backward compatibility, but how we deal with them? Do the authors give proper warning? Are there tools to find pieces of code that will be impacted? (e.g. a Perl Critic rule). Are there instructions how to fix the code that will be broken?</p>
<p>On the other side of the coin, how can a user - a user of Perl or a CPAN module - ensure that changes in any of the dependencies won't impact their product or service? How can they notice any impact before it reaches the production system? Possibly even before it reaches the development machines forcing the whole team to stop working.</p>
<p>Hint: write and run automated tests!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/575.html</id>
    <published>2022-08-01T10:00:00Z</published>
    <updated>2022-08-01T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>SPVM continues to undergo heavy changes.</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/08/spvm-continues-to-undergo-heavy-changes.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10867</id>
    <published>2022-08-01T04:40:06Z</published>
    <updated>2022-08-01T04:45:26Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>Sorry, SPVM continues to undergo heavy changes.</p>

<p>After building real-world modules and applications, I realized that a lot of changes needed to be made.</p>

<p>You can see what I'm currently working on below.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/Modules.pm#CPAN-Modules">SPVM modules - CPAN modules</a></p>

<blockquote>
JSON - JSON

<p>Math - Math functions</p>

<p>Regex - Regular Expression</p>

<p>Unicode - Unicode Utilities</p>

<p>Base64 - Base 64</p>

<p>Time::Local - Time Reverse Manipulation</p>

<p>SPVM::Errno - Error Number</p>

<p>SPVM::Resource::Re2::V2022_06_01 - Resource of Google RE2 release 2022-06-01.</p>

<p>SPVM::Resource::Zlib::V1_2_11 - zlib v1.2.11 Resource</p>

<p>SPVM::Cwd - get pathname of current working directory</p>

<p>SPVM::IO - File IO, Socket, Select/Polling.</p>

<p>SPVM::Digest::MD5 - SPVM interface to the MD5 Algorithm</p>

<p>SPVM::Digest::SHA - SPVM extension for SHA-1/224/256/384/512<br />
</blockquote></p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Tar-Size">Alien-Tar-Size</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libFLAC">Alien-libFLAC</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>find or build and install libFLAC with development dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-SNMP-TrapReceiver">AnyEvent-SNMP-TrapReceiver</a></td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>0.15</td>
<td>0.16</td>
<td>SNMP trap receiver by help of AnyEvent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Changelord">App-Changelord</a></td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>v0.0.1</td>
<td>0.0.2</td>
<td>cli-based changelog manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Git-Perl">App-Git-Perl</a></td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>v0.1.0</td>
<td>v0.1.15</td>
<td>adds custom git command "git perl" to make it easier to monitor latest changes in perl modules, and make you collaborate faster.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-JYJ">App-JYJ</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Convert JSON to YAML to JSON to…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KamstrupKemSplit">App-KamstrupKemSplit</a></td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Helper functions for the Kamstrup KEM file splitter application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-MHFS">App-MHFS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.4.0</td>
<td>v0.4.1</td>
<td>A Media HTTP File Server. Stream your own music and video library via your browser and standard media players.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-diff2vba">App-diff2vba</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.99</td>
<td>generate VBA patch script from diff output</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Util-Shuffle">Array-Util-Shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Shuffle an array</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Author-Daemon-DockerMetaBundle">Author-Daemon-DockerMetaBundle</a></td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
<td>1</td>
<td>A meta bundle that is used in the creation of a docker image.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-PERLANCAR-Tree-Examples">Bencher-Scenario-PERLANCAR-Tree-Examples</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.031</td>
<td>0.031</td>
<td>Benchmark PERLANCAR::Tree::Examples</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-shuffle">Bencher-Scenario-shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark various algorithms &amp; implementation of shuffle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Array-Sample-WeightedRandom">Bencher-Scenarios-Array-Sample-WeightedRandom</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Array::Sample::WeightedRandom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-ControllerPerContext">CatalystX-ControllerPerContext</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-RequestModel">CatalystX-RequestModel</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Digest-BLAKE3">Digest-BLAKE3</a></td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Perl extension for the BLAKE3 hash function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Authors">Dist-Zilla-Plugin-Authors</a></td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>Build AUTHORS file from Git history</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-PruneAliases">Dist-Zilla-Plugin-PruneAliases</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Prune macOS aliases from your dist</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Earth">Earth</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>FP Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hashest">Hashest</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>v0.3.1</td>
<td>v0.5.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-GIF-Encoder-PP">Image-GIF-Encoder-PP</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Pure perl GIF encoding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-WireGuard">Linux-WireGuard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_90</td>
<td>0.03</td>
<td>WireGuard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-Wireguard">Linux-Wireguard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Wireguard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MHFS-XS">MHFS-XS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.2</td>
<td>XS extension module for Media HTTP File Server, for server side media encoding.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mac-Alias">Mac-Alias</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Read or create macOS alias files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mars">Mars</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>OO Framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Abacus">Math-Abacus</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.04</td>
<td>A toy model of Chinese abacus</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Notation-PostfixInfix">Math-Notation-PostfixInfix</a></td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>v2022.035.1</td>
<td>v2022.035.1</td>
<td>Perl extension for Math Postfix and Infix Notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-LibNFS">Net-LibNFS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.02</td>
<td>User-land NFS in Perl via libnfs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-IO-Touchstone">PDL-IO-Touchstone</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Dancer2">Perl-Critic-Dancer2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.4000</td>
<td>0.4100</td>
<td>A collection of handy perlcritic modules for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PlayStation-MemoryCard">PlayStation-MemoryCard</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.0</td>
<td>Utilities for working with PlayStation memory card and save files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-CopySubjectButton">RT-Extension-CopySubjectButton</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>RT-Extension-CopySubjectButton Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-From-String">Regexp-From-String</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Convert '/…/' or 'qr(…)' into Regexp object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rofi-Script">Rofi-Script</a></td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>0.001</td>
<td>1.221970</td>
<td>perl interface to the rofi menu</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Cwd">SPVM-Cwd</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>get pathname of current working directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-MD5">SPVM-Digest-MD5</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.06</td>
<td>SPVM interface to the MD5 Algorithm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-SHA">SPVM-Digest-SHA</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>SPVM extension for SHA-1/224/256/384/512</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Errno">SPVM-Errno</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Error Number</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-PSchemas-Re">Sah-PSchemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression (parameterized) schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Fzf">Search-Fzf</a></td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Ported Fzf using perl. </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Software-Copyright">Software-Copyright</a></td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Copyright class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/StandupGenerator">StandupGenerator</a></td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>0.1</td>
<td>0.5</td>
<td>Package to create and manage daily standup files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Storable-Improved">Storable-Improved</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Storable improved with core flaws mitigated</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Login-Button">Tags-HTML-Login-Button</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for login button.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-Graille">Term-Graille</a></td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>0.03</td>
<td>0.071</td>
<td>Terminal Graphics using Braille</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-DBIC-Pg">Test-DBIC-Pg</a></td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>0.99_01</td>
<td>0.99_01</td>
<td>Connect to and deploy a DBIx::Class::Schema on Postgres</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-JSON-Type">Test-JSON-Type</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Test JSON data with types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-Bash">Test-More-Bash</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>Write Perl tests in Bash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-YAMLScript">Test-More-YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.5</td>
<td>Write Perl tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-YAFT">Test-YAFT</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.1</td>
<td>Yet another testing framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Try-ALRM">Try-ALRM</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.1</td>
<td>0.6</td>
<td>Provides alarm semantics similar to Try::Catch.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Twitter-ID">Twitter-ID</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Parse the date from a Twitter Snowflake ID</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-Library-Compiler">Type-Library-Compiler</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>compile a bunch of type constraints into a library with no non-core dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client">UID2-Client</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Perl Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client-XS">UID2-Client-XS</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Client for Perl (binding to the UID2 C++ library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-PackageURL">URI-PackageURL</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.02</td>
<td>Perl extension for Package URL (aka "purl")</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URN-OASIS-SAML2">URN-OASIS-SAML2</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Constants for urn:oasis SAML2 implementations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-Atom">WebFetch-Input-Atom</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from Atom feeds</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-RSS">WebFetch-Input-RSS</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from RSS feed</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TT">WebFetch-Output-TT</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch via the Perl Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TWiki">WebFetch-Output-TWiki</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch into a TWiki web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLScript">YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.16</td>
<td>YAML as a Programming Language</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLTest">YAMLTest</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.4</td>
<td>Write tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtin-compat">builtin-compat</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001002</td>
<td>Provide builtin functions for older perl versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins">builtins</a></td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>0.000002</td>
<td>0.000005</td>
<td>Install all the new builtins from the builtin namespace</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins-compat">builtins-compat</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.004</td>
<td>install all the new builtins from the builtin namespace (Perl 5.36+), and try our best on older versions of Perl</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>6</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>5</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Alien-Tar-Size GAHAYES v0.1.0 v0.2.0 tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package Alien-libFLAC GAHAYES v0.1.0 v0.2.0 find or build and install libFLAC with development dependencies AnyEvent-SNMP-TrapReceiver NABOJ 0.15 0.16 SNMP trap receiver by help of AnyEvent App-Changelord YANICK v0.0.1 0.0.2 cli-based … <a href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1994</id>
    <published>2022-08-01T00:37:54Z</published>
    <updated>2022-08-01T00:37:54Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #170</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-170/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 170 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would be from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-170/</id>
    <published>2022-08-01T00:00:00Z</published>
    <updated>2022-08-01T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 175: Last Sunday and Perfect Totient Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-175-last-sunday-and-perfect-totient-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10861</id>
    <published>2022-07-27T14:36:06Z</published>
    <updated>2022-07-31T20:45:56Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 175 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-175/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on July 31, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Last Sunday</h2>

<p><em>Write a script to list Last Sunday of every month in the given year.</em></p>

<p><em>For example, for year 2022, we should get the following:</em></p>

<pre><code>2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h3>Last Sunday in Raku</h3>

<p>In Raku, the <a href="https://docs.raku.org/type/Date#(Dateish">Date class</a><em>method</em>day-of-month) provides all the methods needed to properly manage dates. </p>

<p>The <code>MAIN</code> subroutine takes one parameter, the year that we want to process, and will default to 2022 if no parameter is passed. </p>

<p>First, we compute the last date in the month, find on which day of the week it falls (day of week is an integer between 1 and 7, where 1 stands for Monday and 7 for Sunday).</p>

<p>To get the date in month of the last Sunday in the month, we simply subtract the day of the week from the day in the month, except that this would not work properly when the last day of the month is a Sunday (we would obtain the previous Sunday), so we subtract the week day modulo 7.</p>

<pre><code>sub MAIN (Int $yr = 2022) {
    for ('01'..'09', 10 .. 12).flat -&gt; $month {
        my $month-end = Date.new("$yr-$month-01").last-date-in-month;
        my $week_day = $month-end.day-of-week;
        my $day-in-month = $month-end.day-of-month;
        # Note: Sunday is weekday 7
        my $sunday = $day-in-month - ($week_day % 7);
        say Date.new("$yr-$month-$sunday");
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./last-sunday.raku
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25

~
$ raku ./last-sunday.raku 2023
2023-01-29
2023-02-26
2023-03-26
2023-04-30
2023-05-28
2023-06-25
2023-07-30
2023-08-27
2023-09-24
2023-10-29
2023-11-26
2023-12-31
</code></pre>

<h3>Last Sunday in Perl</h3>

<p>This Perl program essentially follows the same idea as the Raku program above, except that we need to compute manually the last day in the month, which leads us to implement an <code>is_leap</code> subroutine to be sure of the last day of February.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;
use Time::Local;

my $yr = shift // 2022;
my @months = (0, 31, is_leap($yr) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

for my $month (1..12) {
    my $month_last_day = timegm( 0, 0, 0, $months[$month], $month - 1, $yr - 1900 );
    my $day_in_week = (gmtime $month_last_day)[6];
    my $sunday = $months[$month] - ($day_in_week % 7);
    printf "%04d/%02d/%02d\n", $yr, $month, $sunday;
}

sub is_leap {
    my $yr = shift;
    return 0 if $yr % 4;    # no if not divisible by 4
    return 1 if $yr % 100;  # yes if divisible by 4 but not by 100
    return 0 if $yr % 400;  # no if divisible by 100 and not by 400
    return 1;               # yes if divisibe by 400
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./last-sunday.pl
2022/01/30
2022/02/27
2022/03/27
2022/04/24
2022/05/29
2022/06/26
2022/07/31
2022/08/28
2022/09/25
2022/10/30
2022/11/27
2022/12/25

~
$ perl ./last-sunday.pl 2023
2023/01/29
2023/02/26
2023/03/26
2023/04/30
2023/05/28
2023/06/25
2023/07/30
2023/08/27
2023/09/24
2023/10/29
2023/11/26
2023/12/31
</code></pre>

<h3>Last Sunday in Julia</h3>

<p>The Julia <a href="https://docs.julialang.org/en/v1/stdlib/Dates/">Dates</a> module provides everything we need, including a <code>lastdayofmonth</code> method.</p>

<pre><code>using Dates

function sundays(year, month)
    month_end = Dates.lastdayofmonth(Dates.Date(year, month, 1))
    weekday = Dates.dayofweek(month_end)
    println(month_end - Dates.Day(weekday % 7))
end

year = parse( Int, ARGS[1])
for month in 1:12
    sundays(year, month)
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./last-sunday.jl 2022
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h3>Last Sunday in Python</h3>

<p>Python&#8217;s <code>datetime</code> module doesn&#8217;t have a <code>lastdayofmonth</code> method, but we can use the <code>timedelta(days = 1)</code> method to subtract one day from the first day of the next month. We only need a bit of simple arithmetic to find the next month.</p>

<pre><code>from datetime import date,timedelta
import sys

def lastsundays (y):
  for m in range(1,13):
    if m == 12:
      year = y + 1
      month = 1
    else:
      year = y
      month = m + 1

    mthEnd = date(year, month, 1) - timedelta(days = 1)
    weekDay = mthEnd.weekday()
    lastSun = mthEnd - timedelta(days = (weekDay + 1) % 7)
    print(lastSun)

if len(sys.argv) == 2:
  year = int(sys.argv[1])
else:
  year = 2022

lastsundays(year)
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./last-sunday.py
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h3>Last Sunday in Ruby</h3>

<p>The Ruby <code>date</code> class provides a <code>next_month</code> and a <code>prev_day</code> methods that we can chain to get the last day of the month (<code>lmd</code>) in just one code line. Thus, the Ruby solution is particularly concise.</p>

<pre><code>require 'date'

year = ARGV.shift.to_i.nil? || 2022

for month in 1..12 
    lmd = Date.new(year, month, 1).next_month.prev_day
    weekday = lmd.wday
    puts lmd - (weekday % 7)
end
</code></pre>

<p>Output:</p>

<pre><code>2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h2>Task 2: Perfect Totient Numbers</h2>

<p><em>Write a script to generate first 20 Perfect Totient Numbers. Please checkout [wikipedia page](https://en.wikipedia.org/wiki/Perfect_totient_number] for more informations.</em></p>

<p><em>Output:</em></p>

<pre><code>3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
</code></pre>

<p>Wikipedia explains us that, in number theory, Euler&#8217;s totient function counts the positive integers up to a given integer <em>n</em> that are relatively prime to <em>n</em>. In other words, it is the number of integers <em>k</em>  in the range <em>1 ≤ k ≤ n</em> for which the greatest common divisor <em>gcd(n, k)</em> is equal to 1.  For example, there are 4 integers less than 10 that are prime relatively prime to 10: 1, 3, 7, 9. So, the totient of 10 is 4.</p>

<p>A <em>perfect totient number</em> is an integer that is equal to the sum of its iterated totients. That is, we apply the totient function to a number <em>n</em>, apply it again to the resulting totient, and so on, until the number 1 is reached, and add together the resulting sequence of numbers; if the sum equals <em>n</em>, then <em>n</em> is a perfect totient number.</p>

<p>For example, there are six positive integers less than 9 and relatively prime to it (1, 2, 4, 5, 7, 8), so the totient of 9 is 6; there are two numbers less than 6 and relatively prime to it (1, 5), so the totient of 6 is 2; and there is one number less than 2 and relatively prime to it (1), so the totient of 2 is 1; and 9 = 6 + 2 + 1, so 9 is a perfect totient number.</p>

<p>Once we&#8217;ve understood what a perfect totient number, it is quite easy to program a <code>is_perfect_totient</code> function that determines whether an input integer is a perfect totient. We need a <code>gcd</code> function to find out whether an integer is relatively prime to another. Some programming languages provide a built-in <code>gcd</code> function; for other languages, we&#8217;ll need to implement our own <code>gcd</code> function (see for example the Perl implementation below).</p>

<h3>Perfect Totient Numbers in Raku</h3>

<p>Raku has a built-in infix <a href="https://docs.raku.org/routine/gcd">gcd</a> operator. So it is quite easy: in the <code>is-perfect-totient</code> subroutine, we simply compute the totient of the input number <em>n</em> (i.e. count the number positive integers up to <em>n</em> that are relatively prime to <em>n</em>), then iteratively compute the totient of the totient, and so on, until we reach 1. Finally, we compare the sum of all totients to the original input number.</p>

<h4>Raw Unoptimized Version</h4>

<p>This is our first Raku version.</p>

<pre><code># Unoptimized version, don't use it
my $count = 0;
for 2..Inf -&gt; $n {
    print "$n " and $count++ if is-perfect-totient $n;
    last if $count &gt;= 20;
}
say "";
sub is-perfect-totient ($num) {
    my $n = $num;
    my $sum = 0;
    while $n &gt;= 1 {
        $n = (grep { $n gcd $_ == 1 }, 1..^$n).elems;
        $sum += $n;
    }
    return $num == $sum;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./perfect-totient.raku
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>The program becomes quite slow for the last perfect totient values (about 25 seconds to run). I tried some micro-optimizations, but without any significant improvement.</p>

<h4>Caching the Totient Sums (Naive Version)</h4>

<p>If you think about it, the above program computes the sum of the totients many times for the same number. We could store these values to avoid recomputing them. This strategy is called <em>caching</em> (or sometimes <em>memoizing</em>). We use the <code>@tot</code> array as a cache (or memo) to store the totient sums. When we want to compute the totient of a number, we first check if it is in the cache and use this value if such is the case, and we do the computation the hard way (with <code>gcd</code>) only if it is not in the cache.</p>

<p>This could lead to this program:</p>

<pre><code># Naive caching strategy
my $count = 0;
my @tot = 0, 0;
for 2..Inf -&gt; $n {
    print "$n " and $count++ if is-perfect-totient $n;
    last if $count &gt;= 20;
}
say "";
say "Time spent: ", now - INIT now;

sub is-perfect-totient ($num) {
    my $n = $num;
    my $sum = 0;
    while $n &gt;= 1 {
        if (defined @tot[$n]) {
            $sum += @tot[$n];
            last;
        } else {
            $n = (grep { $n gcd $_ == 1 }, 1..^$n).elems;
            $sum += $n;
        }
    }
    @tot[$num] = $sum;
    return $num == $sum;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ ./raku perfect-totient_cached_1.raku
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
Time spent: 15.32900533
</code></pre>

<p>So we are now at 15 seconds. This is a significant improvement (although less than what I hoped).</p>

<h4>Caching the Totient Sums (Improved Version)</h4>

<p>We are testing every integer in ascending order. When we are testing one such new integer we know for sure that we haven&#8217;t computed its totient sum so far and need to compute it, and we also know for sure that we have already done the calculation for its totient number (provided we supply a first value). In other words, we no longer need the <code>while</code> loop, we can just compute the totient for the new input integer, and add to that the totient sum of the totient, which we are guaranteed to have in the cache. This leads to a significant code simplification of the <code>is-perfect-totient</code> subroutine:</p>

<pre><code># Improved caching strategy
my $count = 0;
my @tot = 0, 0;
for 2..Inf -&gt; $n {
    print "$n " and $count++ if is-perfect-totient $n;
    last if $count &gt;= 20;
}
say "";
say "Time spent: ", now - INIT now;

sub is-perfect-totient ($num) {
    my $sum = (grep { $num gcd $_ == 1 }, 1..^$num).elems;
    $sum += @tot[$sum];
    @tot[$num] = $sum;
    return $num == $sum;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./perfect-totient_cached_2.raku
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
Time spent: 12.34103864
</code></pre>

<p>The code simplification has also led to an additional performance improvement of about 20%.</p>

<h3>Perfect Totient Numbers in Perl</h3>

<p>Our Perl implementation is really a port to Perl of the first Raku program above, with the only difference that we need to implement our own <code>gcd</code> subroutine, since two numbers are relatively prime (or coprime) if their greatest common divisor equals 1. For this, our <code>gcd</code> subroutine will use the so-called <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor#Euclidean_algorithm">Euclidean algorithm</a>, which is an improved variant of <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor#Euclid's_algorithm">Euclid&#8217;s original method</a>.</p>

<h4>Raw Unoptimized Version</h4>

<p>This is our first Perl version.</p>

<pre><code># Unoptimized version, don't use it
use strict;
use warnings;
use feature qw/say/;

sub gcd {
    my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
    while ($j) {
        ($i, $j) = ($j, $i % $j);
    }
    return $i;
}
sub is_perfect_totient {
    my $num = shift;
    my $n = $num;
    my $sum = 0;
    while ($n &gt;= 1) {
        $n = scalar grep { gcd( $n, $_) == 1 } 1..$n-1;
        $sum += $n;
    }
    return $num == $sum;
}
my $count = 0;
my $n = 1;
while ($count &lt; 20) {
    print "$n " and $count++ if is_perfect_totient $n;
    $n++;
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./perfect-totient.pl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This program is even slower (39 seconds) than the first Raku version (25 seconds), presumably because of the pure Perl implementation of the <code>gcd</code> function. So, we will also use the caching strategy previously tested in Raku</p>

<h4>Caching the Totient Sums</h4>

<p>Here, we will go directly to the improved caching strategy used in the third Raku program because it makes the code simpler (and slightly faster).</p>

<pre><code># Optimized cached version
use strict;
use warnings;
use feature qw/say/;

my @tot = (0, 0);

sub gcd {
    my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
    while ($j) {
        ($i, $j) = ($j, $i % $j);
    }
    return $i;
}

sub is_perfect_totient {
    my $num = shift;
    my $sum = scalar grep { gcd( $num, $_) == 1 } 1..$num-1;
    $sum += $tot[$sum];
    $tot[$num] = $sum;
    return $num == $sum;
}

my $count = 0;
my $n = 1;
while ($count &lt; 20) {
    print "$n " and $count++ if is_perfect_totient $n;
    $n++;
}
say "";
</code></pre>

<p>Output:</p>

<pre><code>$ time perl perfect-totient_cached.pl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    0m20,371s
user    0m20,281s
sys     0m0,046s
</code></pre>

<p>So, our caching program runs almost twice faster than our original Perl program.</p>

<h3>Perfect Totient Numbers in Julia</h3>

<p>This is port to Julia of the Raku program above. Julia has a built-in <a href="https://docs.julialang.org/en/v1/base/math/#Base.gcd">gcd</a> function that we put for good use.</p>

<pre><code>function is_perfect_totient(num)
    n = num
    sum = 0
    while n &gt;= 1
        n = length( filter((x) -&gt; gcd(x, n) == 1, 1:n-1))
        sum += n
    end
    return num == sum
end

count = 0
n = 1
while count &lt; 20 
    if is_perfect_totient(n)
        print("$n ")
        global count += 1
    end
    global n += 1;
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./perfect-totient.jl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This Julia implementation runs much faster (less than 4 seconds) than the Raku and Perl versions. There is probably no urgent need to try to use the caching strategy used for Raku and Perl, but let&#8217;s try. The cached version below runs about twice faster (less than 2 seconds):</p>

<pre><code>cache = zeros(Int64, 1, 10000)

function is_perfect_totient(num)
    tot = length( filter((x) -&gt; gcd(x, n) == 1, 1:n-1))
    sum = tot + cache[tot] 
    cache[num] = sum
    return num == sum
end

count = 0
n = 2
while count &lt; 20 
    if is_perfect_totient(n)
        print("$n ")
        global count += 1
    end
    global n += 1;
end
</code></pre>

<p>From now on, for other guest-languages, we will go directly for the improved cache strategy (faster and simpler code).</p>

<h3>Perfect Totient Numbers in C</h3>

<p>C doesn&#8217;t have a built-in <code>gcd</code> function, so we implement our own. </p>

<pre><code>#include &lt;stdio.h&gt;
#define MAX_VAL 50000

int cache[MAX_VAL];

int gcd(int i, int j) {
    while (j != 0) {
        int temp = i % j;
        i = j;
        j = temp;
    }
    return i;
}

int is_perfect_totient (int num) {
    int tot = 0;
    for (int i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot++;
        }
    }
    int sum = tot + cache[tot];
    cache[num] = sum;
    return num == sum;
}

int main() {
    int j = 1;
    int count = 0;
    while (count &lt; 20) {
        if (is_perfect_totient(j)) {
            printf("%d ", j);
            count++;
        }
        j++;
    }
    printf("%s\n", " "); 
}
</code></pre>

<p>Output:</p>

<pre><code>$ time ./a.exe
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    0m1,441s
user    0m1,374s
sys     0m0,015s
</code></pre>

<h3>Perfect Totient Numbers in bc</h3>

<p>In bc, which is really an arbitrary precision <em>basic calculator</em> with some programming features, we also need to implement our own <code>gcd</code> function.</p>

<pre><code>define gcd (i, j) {
    while(j != 0) {
        k = j
        j = i % j
        i = k
    }
    return i
}

define is_perfect_totient (num) {
    tot = 0
    for (i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot += 1
        }
    }
    sum = tot + cache[tot] 
    cache[num] = sum
    return num == sum
}

j = 1
count = 0
# we only go to 15 (not 20) because bc is very slow
while (count &lt;= 15) {
    if (is_perfect_totient(j)) {
        print j, " "
        count += 1
    }
    j += 1
}
print "\n"
quit
</code></pre>

<p>Since bc is really slow, we display only the first 16 perfect totient numbers:</p>

<pre><code>$ time bc -q perfect-totient.bc
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199

real    0m35,553s
user    0m35,437s
sys     0m0,030s
</code></pre>

<h3>Perfect Totient Numbers in awk</h3>

<pre><code>In awk also we need to implement our own `gcd` function.

function gcd (i, j) {
    while(j != 0) {
        k = j
        j = i % j
        i = k
    }
    return i
}
function is_perfect_totient (num) {
    tot = 0
    for (i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot += 1
        }
    }
    sum = tot + cache[tot] 
    cache[num] = sum
    return num == sum
}
BEGIN {
    j = 1
    count = 0
    while (count &lt; 20) {
        if (is_perfect_totient(j)) {
            printf "%d ", j
            count += 1
        }
        j += 1
    }
    print " "
}
</code></pre>

<p>Output:</p>

<pre><code>$ time awk -f perfect-totient.awk
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 557

real    0m48,899s
user    0m48,656s
sys     0m0,046s
</code></pre>

<h3>Perfect Totient Numbers in D</h3>

<p>D has a built-in <code>gcd</code> function in the <code>std.numeric</code> module.</p>

<pre><code>import std.stdio;
import std.numeric;

int[10000] cache;

bool is_perfect_totient(int num) {
    int tot = 0;
    for (int i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot++;
        }
    }
    int sum = tot + cache[tot];
    cache[num] = sum;
    return num == sum;
}

void main() {
    int j = 1;
    int count = 0;
    while (count &lt; 20) {
        if (is_perfect_totient(j)) {
            printf("%d ", j);
            count++;
        }
        j++;
    }
    writeln(" "); 
}
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This ran in 1.34 seconds (but not the same hardware, so don&#8217;t compare with other timings).</p>

<h3>Perfect Totient Numbers in Ring</h3>

<pre><code>t_start = clock()
j = 1
count = 0
cache = list(10000)
while count &lt; 14
    if is_perfect_totient(j)
        see "" + j + " "
        count++
    ok
    j++
end
see nl
duration = (clock() - t_start)/clockspersecond()
see "" + duration + nl

func gcd (i, j) 
    while j != 0 
        k = i % j
        i = j
        j = k
    end
    return i

func is_perfect_totient (num)
    tot = 0
    for i = 1 to (num-1)
        if gcd(num, i) = 1
            tot++
        ok
    next
    sum = tot + cache[tot+1] 
    cache[num+1] = sum
    return num = sum
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./perfect-totient.ring
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
207.40
</code></pre>

<p>This program ran in 207.40 seconds, so it isn&#8217;t fast. However, it is possible to compile Ring source code into binary executable files (apparently with an intermediate C file). This should presumably be much faster, but I wasn&#8217;t able to do this so far because of various environment problems.</p>

<h3>Perfect Totient Numbers in Python</h3>

<p>Python has a <code>gcd</code> function in the <code>math</code> module.</p>

<pre><code>import math

cache = [0] * 10000

def is_perfect_totient (n):
    tot = 0
    for i in range(1, n):
        if (math.gcd(n, i) == 1):
            tot += 1
</code></pre>

<p>​        sum = tot + cache[tot]
​        cache[n] = sum
​        return n == sum <br />
​ <br />
    i = 1
​    count = 0
​    while count &lt; 20:
​        if is<em>perfect</em>totient(i):
​            print(i, end = &#8221; &#8220;)
​            count += 1
​        i += 1
​    print(&#8221; &#8220;)</p>

<p>Output:</p>

<pre><code>$ time python3 ./perfect-totient.py
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    0m4,832s
user    0m4,718s
sys     0m0,076s
</code></pre>

<h3>Perfect Totient Numbers in Kotlin</h3>

<p>In Kotlin, we had to implement our own <code>gcd</code> function.</p>

<pre><code>val cache = Array(10000, {i-&gt; 0})

fun gcd (m: Int, n: Int): Int {
    var i = m
    var j = n
    while(j != 0) {
        val k = j
        j = i % j
        i = k
    }
    return i
}

fun is_perfect_totient(n: Int): Boolean {
    var tot = 0
    for (i in 1..n-1) {
        if (gcd(n, i) == 1) {
            tot++
        }
    }
    val sum = tot + cache[tot] 
    cache[n] = sum
    return n == sum
}

fun main() {
    var i = 0
    var count = 0
    while (count &lt;= 20) {
        if (is_perfect_totient(i)) {
            print("$i ")
            count++
        }
        i++
    }
    println(" ")
}
</code></pre>

<p>Output:</p>

<pre><code>0 3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This program ran in 2.5 seconds.</p>

<h3>Perfect Totient Numbers in Rust</h3>

<p>The  Rust<code>num::integer</code> library provides a <code>gcd</code> function. In my humble opinion, Rust is nevertheless a pain in the neck to use because of its ultra-strict type system. As an example, I could not use a simple integer (<code>i32</code>) as an array subscript, because Rust wants a <code>usize</code> type. That&#8217;s why I had to use expressions like <code>CACHE[n as usize]</code>. Similarly, Rust forced me to have my global cache array in uppercase. And, since it is a global variable, I had to wrap accesses to the cache in a <code>unsafe{]</code> block. I personally don&#8217;t think a programming language should get in the way of developers to such an extent. I really wasted quite a bit of time working around this straitjacket.</p>

<pre><code>use num::integer::gcd;

static mut CACHE:[i32;10000] = [0; 10000];

fn is_perfect_totient(n: i32) -&gt; bool {
    let mut  tot = 0;
    for i in 1..n {
        if gcd(n, i) == 1 {
            tot += 1
        }
    }
    unsafe {
        let sum = tot + CACHE[tot as usize];
        CACHE[n as usize] = sum;
        return n == sum;
    }
}    

fn main() {
    let mut i = 1;
    let mut count = 0;
    while count &lt; 20 {
        if is_perfect_totient(i) {
            print!("{} ", i);
            count += 1;
        }
        i += 1;
    }
    println!("{}", " ")
}
</code></pre>

<p>Ouput:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Java</h3>

<p>Java has a <code>gcd</code> function bizarrely sitting in the <code>java.math.BigInteger</code> class. For a program performing heavy number crunching, I did not think it was reasonable to accept the performance penalty associated with big integers. So, I wrote my own <code>gcd</code> function.</p>

<pre><code>public class PerfectTotient {

    static int[] cache = new int[10000];

    public static int gcd(int i, int j) {
        while (j != 0) {
            int temp = i % j;
            i = j;
            j = temp;
        }
        return i;
    }
    public static boolean isPerfectTotient(int n) {
        int tot = 0;
        for (int i = 1; i &lt; n; i++) {
            if (gcd(n, i) == 1) {
                tot++;
            }
        }
        int sum = tot + cache[tot];
        cache[n] = sum;
        return n == sum;
    }

    public static void main(String[] args) {
        int i = 0;
        int count = 0;
        while (count &lt; 20) {
            if (isPerfectTotient(i)) {
                System.out.printf("%d ", i);
                count++;
            }
            i++;
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Ouput:</p>

<pre><code>0 3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>The compiled program ran in 1,23 second (not on the same hardware as most timings in this post).</p>

<h3>Perfect Totient Numbers in Nim</h3>

<p>Nim has a <code>gcd</code> function in its <code>math</code> library.</p>

<pre><code>import math

var cache: array[0..10000, int]

proc is_perfect_totient (n: int): bool =
  var tot = 0
  for i in 1..n-1:
    if (gcd(n, i) == 1):
      tot += 1
  let sum = tot + cache[tot]
  cache[n] = sum
  return sum == n

var i = 1
var count = 0
while count &lt; 20:
  if is_perfect_totient(i):
    stdout.write i, " "
    count += 1
  i += 1
echo ""
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This program ran in 13 seconds.</p>

<h3>Perfect Totient Numbers in Go</h3>

<p>No <code>gcd</code> in plementation in go, so we rolled out our own.</p>

<pre><code>import "fmt"

var cache [10000]int

func gcd(i int, j int) int {
    for j != 0 {
        temp := i % j
        i = j
        j = temp
    }
    return i
}

func is_perfect_totient(n int) bool {
    tot := 0
    for i := 1; i &lt; n; i++ {
        if gcd(n, i) == 1 {
            tot++
        }
    }
    sum := tot + cache[tot]
    cache[n] = sum
    return n == sum
}

func main() {
    i := 0
    count := 0
    for count &lt;= 20 {
        if is_perfect_totient(i) {
            fmt.Printf("%d ", i)
            count++
        }
        i++
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in JavaScript</h3>

<pre><code>var cache = new Array(10000)
cache[0] = 0

function gcd (i, j) {
    while(j != 0) {
        k = j
        j = i % j
        i = k
    }
    return i
}

function is_perfect_totient (n) {
    let tot = 0
    for (var i = 1; i &lt; n; i++) {
          if (gcd(n, i) == 1) {
            tot++
        }
    }
    sum = tot + cache[tot]
    cache[n] = sum
    return n == sum
}

let count = 0
let i = 1
while (count &lt; 20) {
    if (is_perfect_totient(i)) {
        process.stdout.write(i + " ")

        count++
    }
    i++
}
process.stdout.write("\n")
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Dart</h3>

<p>Dart has a <code>gcd</code> method, which we will use.</p>

<pre><code>import "dart:io";

var cache = List&lt;int&gt;.filled(10000, 0, growable: true);

void main() {
    cache[0] = 0;
    var count = 0;
    var i = 1;
    while (count &lt; 20) {
        if (is_perfect_totient(i)) {
            stdout.write("$i ");
            count++;
        }
        i++;
    }
    print(" ");
}

bool is_perfect_totient(n) {
    var tot = 0;
    for (int i = 1; i &lt; n; i++ ) {
       if (i.gcd(n) == 1) {
            tot++;
        }
    }
    int sum = tot + cache[tot];
    cache[n] = sum;
    return n == sum;
}
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Ruby</h3>

<p>Ruby has a <code>gcd</code> mehod, so we&#8217;ll use it.</p>

<pre><code>$cache = Array.new(10000, 0) # global variables require $

def is_perfect_totient(n)
    tot = 0
    for i in 1..(n - 1)
        if n.gcd(i) == 1
            tot += 1
        end
    end
    sum = tot + $cache[tot]
    $cache[n] = sum;
    return sum == n
end

i = 1
count = 0
while count &lt; 20
    if is_perfect_totient(i)
        printf("%d ", i)
        count += 1
    end
    i += 1
end
print("\n")
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Scala</h3>

<p>Scala has a <code>gcd</code> function, but only for big integers (probably because Scala relies on Java, which has the same property). For a program performing heavy number crunching, I did not think it was reasonable to accept the performance penalty associated with big integers. So, I wrote my own <code>gcd</code> function for plain integers.</p>

<pre><code>object PerfectTotient extends App {

  var cache = new Array[Int](10000)

  def gcd(a: Int, b: Int): Int = {
    var (i, j) = (a, b)
    while (j &gt; 0) {
      var t = i
      i = j
      j = t % j
    }
    return i
  }

  def is_perfect_totient(n: Int): Boolean = {
    var tot = 0
    for (i &lt;- 1 to (n - 1)) {
      if (gcd(n, i) == 1) {
        tot += 1
      }
    }
    val sum = tot + cache(tot)
    cache(n) = sum
    return n == sum
  }

  var i = 1
  var count = 0
  while (count &lt; 20) {
    if (is_perfect_totient(i)) {
      count += 1
      printf("%d ", i)
    }
    i += 1
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Tcl</h3>

<p>Tcl doesn&#8217;t have a built-in <code>gcd</code> function, so I wrote one.</p>

<pre><code>array set cache {}

set cache(0) 0

proc gcd {i j} {
   while {$j != 0} {
      set t [expr {$i % $j}]
      set i $j
      set j $t
   }
   return $i
}

proc is_perfect_totient {n} {
    global cache
    set tot 0
    for {set i 1} {$i &lt; $n} {incr i} {
        if [ expr [gcd $i $n] == 1 ] {
            incr tot
        }
    }
    set sum [expr $tot + $cache($tot)]
    set cache($n) $sum
    return [ expr $n == $sum ? 1 : 0]
}

set i 1
set count 0
while { $count &lt; 20 } {
    if [ is_perfect_totient $i ] {
        puts -nonewline  "${i} "
        incr count
    }
    incr i
}
puts ""
</code></pre>

<p>As a fully interpreted language, Tcl is quite slow, as it can be seen in the following output:</p>

<pre><code>$ time tclsh ./perfect-totient.tcl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    1m18,058s
user    1m17,593s
sys     0m0,046s
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 7, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Totient numbers on a Sunday</title>
    <link rel="alternate" href="https://dev.to/simongreennet/totient-numbers-on-a-sunday-5fnc" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h1>
  
  
  Weekly Challenge
</h1>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-175/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-175/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Last Sunday
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to list Last Sunday of every month in the given year.</p>

<h3>
  
  
  My solution
</h3>

<p>Date math is hard, although not as hard as date and time calculations. As a quick <a href="https://en.wikipedia.org/wiki/Gregorian_calendar">refresher</a>, the days, months and year as we know it was introduced in October 1582 by Pope Gregory XIII as a modification of, and replacement for, the Julian calendar. Both solutions I've provided have assumed the Georgian Calendar since the beginning of time, and thus will give wrong results for old dates.</p>

<p>In my solution, I use the <a href="https://docs.python.org/3/library/datetime.html#datetime.date">date module</a> from datetime. For the specified year, I calculate the last day of each month (first day of the  month + 1 month - 1 day). I also obtain the day of the week (where Monday is 1 and Sunday is 7). Finally, I substrate the day of the week from the last day to produce the last Sunday. I use <code>% 7</code> so we don't subtract seven days if the last day is a Sunday.</p>

<p>For my Perl solution, I use the <a href="https://metacpan.org/pod/Date::Calc">Date::Calc module</a>. As this has a <code>Days_in_Month</code> function. We can calculate the last day of the month a little easier. Unlike the Python solution, the functions don't result in an object. This has pros and cons.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

</div>



<h2>
  
  
  Task 2: Perfect Totient Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 <a href="https://en.wikipedia.org/wiki/Perfect_totient_number">Perfect Totient Numbers</a>.</p>

<h3>
  
  
  My solution
</h3>

<p>I may have over engineered this solution. My first attempt took nearly four minutes to run. My final solution took 4½ seconds in Python and 13 seconds in Perl.</p>

<p>This means that I need to go into some detail about my solution. Lets start at the beginning. I define three global variables: <code>primes</code> (list), <code>factors</code> (dict of sets) and <code>totient</code> (dict of integers). These are mainly used for caching results of numbers we already have calculated.</p>

<p>I then have three functions to populate each variable. All of them take a number as an input. The <code>is_prime</code> number will add to the <code>primes</code> list if the number is a prime. This is done by checking if the number is divisible by any already found primes with no remainder. The <code>get_factors</code> function returns a set of prime numbers that make up the number. For example for the number 18, it would return a set of <code>{2, 3}</code> (being 2 × 3 × 3).</p>

<p>The <code>get_totients</code> function will return the number of integers between 1 and the number that have a relative prime of 1 (in other words, the greatest common divisor of that number is 1). As the <code>get_factors</code> function returns sets, we can use the intersection method to see if there is a common prime.</p>

<p>Next, we have the <code>is_ptn</code> function. This calculates the number of relative primes (using the <code>get_totients</code> function) of the number, and does this recursively in a while loop until we reach 1. Finally we compare the total with the original number and return True if they match, or False otherwise.</p>

<p>Finally, we have the <code>main</code> function which is the usual wrapper for this type of challenge. We have a <code>solutions</code> list, and an incrementing while loop that continues until we have 15 numbers.</p>

<p>The Perl code is roughly equivalent. It will use the <a href="https://perldoc.perl.org/functions/state">state</a> function rather than global variables where appropriate, and the none function when comparing two arrays. I suspect this is the main difference in performance between the two sets of code.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571

<span class="nv">$ </span>./ch-2.pl 
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/totient-numbers-on-a-sunday-5fnc</id>
    <published>2022-07-31T12:38:02Z</published>
    <updated>2022-07-31T12:38:02Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Dancer2: Exercise 2 - Multi-Counter, Random redirection</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-31T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-exercise-2"/>  <id>https://perlmaven.com/dancer2-exercise-2</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-381028195871773634</id>
    <published>2022-07-30T21:42:00.000+02:00</published>
    <updated>2022-07-30T21:42:58.744+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdiii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052010&lt;/strong&gt; on 2022-07-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.052008 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Devel-CheckOS-1.94' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::CheckOS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - require that we are running on a particular OS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.94&lt;/strong&gt; on 2022-07-24&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.93 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/HTTP-Tiny-0.082' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A small, simple, correct HTTP/1.1 client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.082&lt;/strong&gt; on 2022-07-25&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 0.080 was 8 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.08&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.05 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.717' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.717&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 7.715 was 9 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.025&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.023 was 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.025&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.023 was 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.025&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.023 was 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9630' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9630&lt;/strong&gt; on 2022-07-29&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9627 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016006&lt;/strong&gt; on 2022-07-25&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016005 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.13&lt;/strong&gt; on 2022-07-29&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.12 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/381028195871773634/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdiii-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/381028195871773634"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/381028195871773634"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdiii-11-great-cpan-modules-released.html" title="(cdiii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4993452395011469961</id>
    <published>2022-07-30T21:40:00.002+02:00</published>
    <updated>2022-07-30T21:40:15.357+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxvii) metacpan weekly report - Storable::Improved</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Storable::Improved"&gt;Storable::Improved&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/07/30 19:39:07 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Statm::Tiny" target="_blank"&gt;Linux::Statm::Tiny&lt;/a&gt; - simple access to Linux /proc/../statm&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Authen::TOTP" target="_blank"&gt;Authen::TOTP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BioPerl" target="_blank"&gt;BioPerl&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Book::Chinese::MasterPerlToday" target="_blank"&gt;Book::Chinese::MasterPerlToday&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::FastMmap" target="_blank"&gt;Cache::FastMmap&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart" target="_blank"&gt;Chart&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Enum" target="_blank"&gt;Data::Enum&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=257)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::InflateColumn::FS" target="_blank"&gt;DBIx::Class::InflateColumn::FS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::UUIDColumns" target="_blank"&gt;DBIx::Class::UUIDColumns&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::CheckOS" target="_blank"&gt;Devel::CheckOS&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LaTeX::Driver" target="_blank"&gt;LaTeX::Driver&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libnet" target="_blank"&gt;libnet&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::mysql" target="_blank"&gt;Minion::Backend::mysql&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mite" target="_blank"&gt;Mite&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::mysql" target="_blank"&gt;Mojo::mysql&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::RabbitMQ::Client" target="_blank"&gt;Mojo::RabbitMQ::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Reuse" target="_blank"&gt;PDF::Reuse&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Reuse::Tutorial" target="_blank"&gt;PDF::Reuse::Tutorial&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlsecret" target="_blank"&gt;perlsecret&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RocksDB" target="_blank"&gt;RocksDB&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Safe::Isa" target="_blank"&gt;Safe::Isa&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Translator" target="_blank"&gt;SQL::Translator&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable::Improved" target="_blank"&gt;Storable::Improved&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+2=137)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Log::Dispatch" target="_blank"&gt;Test::Log::Dispatch&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CleanFragment" target="_blank"&gt;Text::CleanFragment&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::Router" target="_blank"&gt;URI::Router&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4993452395011469961/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4993452395011469961"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4993452395011469961"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvii-metacpan-weekly-report.html" title="(dxvii) metacpan weekly report - Storable::Improved"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Sunday Was Perfectly Totient</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/30#pwc175" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to list the last sunday of every month in the given year.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Time::Piece; 

sub last_sunday_month{
    my($month, $year) = @_;
    $month = "0$month" if $month &lt; 10;
    my $sunday;
    my $t = Time::Piece-&gt;strptime("$month", "%m");   
    for my $day (20 .. $t-&gt;month_last_day()){
        $t = Time::Piece-&gt;strptime("$day $month $year", "%d %m %Y");
        $sunday = "$year-$month-$day" if $t-&gt;wday == 1;
    }  
    return $sunday;  
}

sub last_sunday{
    my($year) = @_;
    my @sundays; 
    for my $month (1 .. 12){
        push @sundays, last_sunday_month($month, $year);  
    }
    return @sundays;   
}

MAIN:{
    print join("\n", last_sunday(2022)) . "\n"; 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;When dealing with dates in Perl you have a ton of options, including implementing 
everything on your own. I usually use the &lt;code&gt;Time::Piece&lt;/code&gt; module. Here you can see why I 
find it so convenient. With &lt;code&gt;strptime&lt;/code&gt; you can create a new object from any conceivable
date string, for setting the upper bounds on iterating over the days of a month we can use
&lt;code&gt;month_last_day&lt;/code&gt;, and there are many other convenient functions like this.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 20 Perfect Totient Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant EPSILON =&gt; 1e-7;   

sub distinct_prime_factors{
    my $x = shift(@_); 
    my %factors;    
    for(my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        $factors{$y} = undef;
        redo;
    }
    return keys %factors;  
}

sub n_perfect_totients{
    my($n) = @_; 
    my $x = 1;
    my @perfect_totients;
    {
        $x++;
        my $totient = $x;
        my @totients;
        map {$totient *= (1 - (1 / $_))} distinct_prime_factors($x);   
        push @totients, $totient; 
        while(abs($totient - 1) &gt; EPSILON){
            map {$totient *= (1 - (1 / $_))} distinct_prime_factors($totient);   
            push @totients, $totient; 
        }  
        push @perfect_totients, $x if unpack("%32I*", pack("I*", @totients)) == $x;
        redo if @perfect_totients &lt; $n;
    }
    return @perfect_totients;
}

MAIN:{
    print join(", ", n_perfect_totients(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code may look deceptively simple. In writing it I ended up hitting a few blockers
that weren't obvious at first. The simplest one was my own misreading of how to compute
totients using prime factors. We must use &lt;em&gt;unique prime factors&lt;/em&gt;. To handle this I 
modified my prime factorization code to use a hash and by returning the keys we can get 
only the unique values. Next, while Perl is usually pretty good about floating point 
issues, in this case it was necessary to implement a standard &lt;em&gt;epsilon comparison&lt;/em&gt; to 
check that the computed totient was equal to 1. &lt;/p&gt;

&lt;p&gt;Actually, maybe I should say that such an &lt;em&gt;epsilon comparison&lt;/em&gt; is &lt;em&gt;always&lt;/em&gt; advised but 
in many cases Perl can let you get away without one. Convenient for simple calculations
but not a best practice!&lt;/p&gt;

&lt;p&gt;For doing serious numerical computing in Perl the best choice is of course to &lt;code&gt;use PDL&lt;/code&gt;!   &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Time::Piece"&gt;Time::Piece&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.planetmath.org/PerfectTotientNumber"&gt;Perfect Totient Number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-175/"&gt;Challenge 175&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc175</id>
    <published>2022-07-30T12:08:00-04:00</published>
    <updated>2022-07-30T12:08:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#574 - Perl Community</title>
    <link rel="alternate" href="https://perlweekly.com/archive/574.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The community spirit among Perl fans is always the highlight of any event. I am sure you have experience it too. Little while ago, there was discussion to give new life to <strong>Perl Advent Calendar</strong>. Many volunteers came forward to help the project, like, <strong>Adam Russell</strong>. As we are getting close to the next edition, <strong>Olaf Alders</strong> and <strong>Julien Fiegehenn</strong> came together and kickstarted the project with a big push. I noticed in the recent weeks, lots of activities on <a href="https://github.com/perladvent/Perl-Advent">GitHub repository</a>, thanks to all the volunteers. <strong>Olaf Alders</strong> made an official call for papers in the <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">blog post</a>. I request all <strong>Perl</strong> fans to submit proposal. If you need any help submitting an article, then please do <a href="https://github.com/perladvent/Perl-Advent/blob/main/FAQ-submit.mkdn">checkout the page</a> for guidance. I would encourage first timer to come forward and share their experience with <strong>CPAN</strong> distributions. I am sure, everyone has few favourite distributions or their own creations that they want to talk about and share with the community. There are plenty of help available, if you need, so just give us a shout.</p>
<p>Talking about revival, recently I spoke about <strong>CPAN Weekly</strong>, creation of <strong>Neil Bowers</strong>. I shared my intention of getting it back up. In no time, I got plenty of offer. One of them was <strong>Cheok-Yin Fung</strong>. She even shared the initial draft that I am currently reviewing. Thank you, <strong>Cheok-Yin</strong> for the help. The plan is to launch it on the birthday of <strong>Perl</strong> i.e. 18th Dec. I will share more about it soon. Wish me luck.</p>
<p>Maintaining <strong>CPAN</strong> distribution is a big responsibility. I have seen regular release of <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, thanks to <strong>Julien Fiegehenn</strong> for all the care and love. You can find the details in the <a href="https://twitter.com/simbabque/status/1549670503719153664">Twitter thread</a>. I know it takes a lot of efforts to keep the distribution live and active as I too have the responsibilities of handful of distributions. Having said, credit must be given to all the contributors who provide patches.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/574.html</id>
    <published>2022-07-25T10:00:00Z</published>
    <updated>2022-07-25T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Permutations Ranked in Disarray on Mars</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/24#pwc174" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>Write a script to generate the first 19 Disarium Numbers.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use POSIX;

sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        return @disariums if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
}

MAIN:{
    print join(", ", disarium_n(19)) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798
</code></pre>

<h3>Notes</h3>

<p>I gave myself a <em>writing prompt</em> for this exercise: only use map. This turned out to
present a small issue and that is, how do we terminate out of a <code>map</code> early? This comes up
because we do not need to examine all numbers in the large range of <code>0 .. INT_MAX / 100</code>.
Once we find the 19 numbers we require we should just stop looking. <code>last</code> will not work
from within a <code>map</code> it turns out. In this case a <code>return</code> works well. But suppose we did
not want to <code>return</code> out of the subroutine entirely? Well, I have tested it out and it 
turns out that <code>goto</code> will work fine from within a <code>map</code> block as well!</p>

<p>That code would look something like this, where the <code>CONTINUE</code> block would have some more
code for doing whatever else was left to do. </p>

<pre><code class="perl">
sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        goto CONTINUE if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
    CONTINUE:{
        ##
        # more to do before we return
        ##
    }
    return @disariums;
}
</code></pre>

<h2>Part 2</h2>

<p><em>You are given a list of integers with no duplicates, e.g. [0, 1, 2]. Write two functions, 
permutation2rank() which will take the list and determine its rank (starting at 0) in the 
set of possible permutations arranged in lexicographic order, and rank2permutation() which 
will take the list and a rank number and produce just that permutation.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
package PermutationRanking{
    use Mars::Class;
    use List::Permutor;

    attr q/list/;
    attr q/permutations/;
    attr q/permutations_sorted/;
    attr q/permutations_ranked/;

    sub BUILD{
        my $self = shift;
        my @permutations;
        my %permutations_ranked;
        my $permutor = new List::Permutor(@{$self-&gt;list()});
        while(my @set = $permutor-&gt;next()) {
            push @permutations, join(":", @set);
        }
        my @permutations_sorted = sort @permutations;
        my $rank = 0;
        for my $p (@permutations_sorted){
            $permutations_ranked{$p} = $rank;
            $rank++;
        }
        @permutations_sorted = map {[split(/:/, $_)]} @permutations_sorted;
        $self-&gt;permutations_sorted(\@permutations_sorted);
        $self-&gt;permutations_ranked(\%permutations_ranked);
    }

    sub permutation2rank{
        my($self, $list) = @_;
        return $self-&gt;permutations_ranked()-&gt;{join(":", @{$list})};
    }

    sub rank2permutation{
        my($self, $n) = @_;
        return "[" . join(", ", @{$self-&gt;permutations_sorted()-&gt;[$n]}) . "]";
    }
}

package main{
    my $ranker = new PermutationRanking(list =&gt; [0, 1, 2]);
    print "[1, 0, 2] has rank " . $ranker-&gt;permutation2rank([1, 0, 2]) . "\n";
    print "[" . join(", ", @{$ranker-&gt;list()}) . "]"  . " has permutation at rank 1 --&gt; " . $ranker-&gt;rank2permutation(1) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
[1, 0, 2] has rank 2
[0, 1, 2] has permutation at rank 1 --&gt; [0, 2, 1]
</code></pre>

<h3>Notes</h3>

<p>I've been enjoying trying out Al Newkirk's Mars OOP framework. When it comes to Object 
Oriented code in Perl I've usually just gone with the default syntax or <code>Class::Struct</code>.
I am far from a curmudgeon when it comes to OOP though, as I have a lot of experience
using Java and C++. What I like about Mars is that it reminds me of the best parts of
<code>Class::Struct</code> as well as the best parts of how Java does OOP. The code above, by its
nature does not require all the features of Mars as here we don't need much in the way 
of Roles or Interfaces.</p>

<p>Perhaps guided by my desire to try out Mars more I have taken a definitively OOP approach
to this problem. From the problem statement the intent may have been to have two 
independent functions. This code has two methods which depend on the constructor (defined
within <code>sub BUILD</code>) to have populated the internal class variables needed.</p>

<p>There is a small trick here that the sorting is to be by <em>lexicograohic order</em>, which 
conveniently is the default for Perl's default <code>sort</code>. That doesn't really buy us any
algorithmic improvement in performance, in fact it hurts it! Other approaches exist for 
this problem which avoid producing all permutations of the list.</p>

<h2>References</h2>

<p><a href="https://oeis.org/A032799">Disarium Numbers</a></p>

<p><a href="https://metacpan.org/pod/Mars">Mars</a></p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-174/">Challenge 174</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc174</id>
    <published>2022-07-24T19:34:00-04:00</published>
    <updated>2022-07-24T19:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Chris Nandor</title>
  <summary type="html"><![CDATA[<p>
<a href="https://pudge.net/">Chris Nandor (Pudge)</a> is the recipient of the <a href="https://www.perl.org/advocacy/white_camel/">White Came Award</> in <a href="https://www.perl.org/advocacy/white_camel/2000.html">2000</a>.
<p>
As I have not heard much from him in recent years I thought it would be interesting to ask where is he now and what does he do.
<p>
]]></summary>
  <updated>2022-07-21T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/chris-nandor"/>  <id>https://perlmaven.com/chris-nandor</id>
  <content type="html"><![CDATA[<p>
<a href="https://pudge.net/">Chris Nandor (Pudge)</a> is the recipient of the <a href="https://www.perl.org/advocacy/white_camel/">White Came Award</> in <a href="https://www.perl.org/advocacy/white_camel/2000.html">2000</a>.
<p>
As I have not heard much from him in recent years I thought it would be interesting to ask where is he now and what does he do.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Spaß mit ICal-Dateien und Zeitzonen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-07-20-spaa-mit-ical-dateien-und-zeitzonen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wir nutzen das Ticketsystem Znuny) Community Edition Fork") zur Kommunikation mit externen Personen wie zum Beispiel Interessenten und Kunden. Leider werden in Znuny ICal-Dateianhänge nicht als Termin erkannt und dementsprechend auch nicht angezeigt.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-07-20-spaa-mit-ical-dateien-und-zeitzonen</id>
    <published>2022-07-20T10:00:00Z</published>
    <updated>2022-07-20T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Todd Rinaldo Nominated for Board Position</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/todd-rinaldo-nominated-for-board-position"/>
  <id>tag:news.perlfoundation.org,2022-07-19:/post/todd-rinaldo-nominated-for-board-position</id>
  <published>2022-07-19T14:39:50</published>
  <updated>2022-07-19T14:39:50</updated>
  <summary>
  <![CDATA[
     We would like to present Todd Rinaldo as a candidate to join the foundation Board. He has worked with the foundation for many years as a conference organizer and in other capacities. The board will vote on Todd's appointment at the board meeting scheduled for 19th August 2022. Below is Todd's application, answering the questions of why he wants to be a member of the board and what he would 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We would like to present Todd Rinaldo as a candidate to join the foundation Board. He has worked with the foundation for many years as a conference organizer and in other capacities.</p>

<p>The board will vote on Todd's appointment at the board meeting scheduled for 19th August 2022.</p>

<p>Below is Todd's application, answering the questions of why he wants to be a member of the board and what he would like the foundation to work on.</p>

<hr />

<p>I am Todd Rinaldo. I've been programming for 40 years and coding Perl since my first Perl programming class in 1995. I've been a resident of Houston, TX most of my life. I've been an active Perl Monger with Houston.pm since 2006. I'm married with 1 boy. I've been an employee of cPanel for 13 years. Prior to cPanel, I worked for JP Morgan and Century Maintenance Supply before that. This has given me some very helpful perspectives on how things work in a small/medium/large company.</p>

<p>As a boy and now an adult, I have been an active member of The Boy Scouts of America. This is the other organization I've donated a significant amount of time to. The organization taught me to embrace servant leadership. I think that experience more than any has instilled in me a want to give back to the organizations that have helped me. Perl has been a big part of my life, so I certainly want to help where I can.</p>

<p>I do not represent any community. I have been a part of Perl 5 Porters and am now a voting member. My interests also include the improvement of CPAN as well as ongoing maintenance and testing of the existing modules on that platform. I of course have been an active organizer with most YAPC::NAs since 2013.</p>

<p>I'm interested in becoming a board member to offer assistance in the Foundation's mission to help the community. I have no specific agenda. As I understand things, the purpose of the board is to provide support to active projects so they can focus on coding, etc., and not the logistical, financial, and legal details. I'm not sure how much scope the board has outside of this but I am interested to know more.</p>

<p>I hope to help find ways the board can support The Perl and Raku Conference going forward. Potentially this might also include the EU which has stopped holding conferences though it is unclear if this is because of COVID or lack of interest.</p>

<p>I would also like to assure TPF continues to maintain a tight bond with the steering councils of the organizations it supports. I don't have clarity on the level of communication so it's hard to say if there is enough communication already.</p>

<hr />

<p>Please share your thoughts and comments on Todd's candidacy before the board meeting on 19th August 2022.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#573 - Pocket money or serious support?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/573.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Last week Mohammad raised the idea of a GitHub-pages-based central blogging platform for Perl to which Dave Cross added his <a href="https://www.reddit.com/r/perl/comments/vwb2j1/perl_weekly_issue_572_perl_blogger/">comment</a> pointing out a misunderstanding. At first I liked the idea of Mohammad as way of making it easier for people who don't know how to setup a blog, but on a second thought. Setting up a site for blogging on GitHub pages is less than 5 minutes. On GitLab and Codeberg it might take a bit more, but still way less than the whole writing part. If you need help ask Flavio, David, Mohammad, or myself.</p>
<p>A few years ago the Perl community got really enthusiastic by the idea of supporting each other via one of the monthly-support platforms. The problem, as I understood, was, that most people received only some small pocket money that did not make any real impact. So most people thought: Instead of taking home 20-40 USD a month I will use this money to support others. We ended up with a circular support in which no one received any substantial support. If you go over the amounts the <a href="https://perlmaven.com/supporting-perl-creators">Perl related people</a> receive you'll see that most of them only receive a few 10s of USD. For most people living in the economically advanced world that's just pocket money. Manwar is the person closest to some substantial amount, but he still needs more.</p>
<p>This is our challenge now. Can we, as a community, increase his support to reach 500 UK pound? We are already half-way there. If you already support him, please consider increasing the amount so we reach USD 10/supporter! (we are at about USD 5.5). If you are not supporting him yet, do it now:  <a href="https://www.patreon.com/manwar/">Manwar</a></p>
<p>Enjoy your week</p></div>
    </content>
    <id>https://perlweekly.com/archive/573.html</id>
    <published>2022-07-18T10:00:00Z</published>
    <updated>2022-07-18T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Suffering Succotash!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/17#pwc173" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find out if the given number is 
an Esthetic Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_esthetic{
    my($n) = @_;
    my @digits = split(//, $n);
    my $d0 = pop @digits;
    while(@digits){
        my $d1 = pop @digits;
        return false if abs($d1 - $d0) != 1;
        $d0 = $d1;
    }
    return true;
}

MAIN:{
    my $n;
    $n = 5456;
    print "$n is ";
    print "esthetic\n" if is_esthetic($n);
    print "not esthetic\n" if !is_esthetic($n);
    $n = 120; 
    print "$n is ";
    print "esthetic\n" if is_esthetic($n);
    print "not esthetic\n" if !is_esthetic($n);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
5456 is esthetic
120 is not esthetic
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I started to write this solution and then kept coming back to it, considering if there is
a more elegant approach. If there is I could not come up with it on my own over this past 
week! This doesn't seem all that bad, just a bit "mechanical" perhaps?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Break the number into an array of digits
&lt;/li&gt;
&lt;li&gt;Do a pairwise comparison of successive digits by popping them off the array one at a 
time and retaining the most recently popped digit for the next iteration's comparison.
&lt;/li&gt;
&lt;li&gt;If at any point the "different by 1" requirement is not met, return false.
&lt;/li&gt;
&lt;li&gt;If we complete all comparisons without a failure, return true.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 10 members of Sylvester's sequence.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use bigint; 

sub sylvester_n{
    my($n) = @_;
    my @terms = (2, 3);
    my %product_table;
    $product_table{"2,3"} = 6;
    while(@terms &lt; $n){
        my $term_key = join(",", @terms);
        my $term = $product_table{$term_key} + 1;
        push @terms, $term;
        $product_table{"$term_key,$term"} = $term * $product_table{$term_key}; 
    }
    return @terms;
}


MAIN:{
    print join(", ", sylvester_n(10)). "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2, 3, 7, 43, 1807, 3263443, 10650056950807, 113423713055421844361000443, 12864938683278671740537145998360961546653259485195807, 165506647324519964198468195444439180017513152706377497841851388766535868639572406808911988131737645185443
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Much like the first part I considered what might be an optimal way to compute this. Here
the standard &lt;em&gt;recursion and memoization&lt;/em&gt; would be most appropriate, I believe. Just to mix
things up a little I implemented my own memoization like lookup table and computed the 
terms iteratively. Otherwise though, the effect is largely the same in that for each new
term we need not reproduce any previous multiplications.&lt;/p&gt;

&lt;p&gt;These terms get large almost immediately! &lt;code&gt;use bigint&lt;/code&gt; is clearly necessary here. An 
additional optimization would be the use of &lt;code&gt;Tie::Hash&lt;/code&gt; and &lt;code&gt;Tie::Array&lt;/code&gt; to save memory as
we compute larger and larger terms. Since TWC 173.2 only specified 10 terms I left that
unimplemented.&lt;/p&gt;

&lt;p&gt;Finally, I should note that the title of this blog draws from Sylvester the Cat, not 
Sylvester the Mathematician! Sylvester the Cat's famous phrase is "Suffering Succotash!". 
See the link in the references for an example. Not everyone may not be familiar, so see 
the video link below! The comments on that video have some interesting facts about the
phrase and the character.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-173/"&gt;Challenge 173&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkhPuH8G5Hg"&gt;Thufferin' thuccotash!&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc173</id>
    <published>2022-07-17T21:30:00-04:00</published>
    <updated>2022-07-17T21:30:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Dancer2: More route parameters</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-17T09:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-more-route-parameters"/>  <id>https://perlmaven.com/dancer2-more-route-parameters</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Grant Proposal: Google TensorFlow API Bindings for Perl (John Napiorkowski)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_tensorflow_jnap_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/grant_proposal_tensorflow_jnap_july_2022</id>
  <published>2022-07-11T20:21:53</published>
  <updated>2022-07-11T20:21:53</updated>
  <summary>
  <![CDATA[
     Name John Napiorkowski Amount Requested: The minimum budget for this project is $8,800 USD Synopsis This grant proposal is for the development of a Perl API to Google TensorFlow, a software library for machine learning and artificial intelligence TensorFlow is generally considered to be the most mature and well-supported ML/AI library, and will benefit the Perl community tremendously. Benefits to the Perl Community Most new software development projects tend to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h2>Name</h2>

<p>John Napiorkowski</p>

<h2>Amount Requested:</h2>

<p>The minimum budget for this project is $8,800 USD</p>

<h2>Synopsis</h2>

<p>This grant proposal is for the development of a Perl API to Google TensorFlow, a software library for machine learning (ML) and artificial intelligence (AI).</p>

<p>TensorFlow is generally considered to be the most mature and well-supported ML/AI library, and will benefit the Perl community tremendously.</p>

<h2>Benefits to the Perl Community</h2>

<p>Most new software development projects tend to incorporate or utilize machine learning in some way.</p>

<p>Most machine learning libraries, including TensorFlow, provide a well-documented Python API with example Python applications.</p>

<p>Thus, due to these (and other) reasons, most new software projects are implemented using Python or some other non-Perl language.</p>

<p>The availability of a fully-featured and up-to-date Perl API for TensorFlow would have far-reaching and long-lasting effects on the Perl community.</p>

<p>To begin with, software developers will be able to much more easily convince corporate management to adopt Perl for new software projects requiring ML/AI.</p>

<p>Secondly, students and teachers alike will be empowered to teach Perl in ML/AI courses at countless high schools, colleges, and universities.</p>

<p>Third, open source Perl developers will have essential new tools for working on brilliant breakthroughs in ML/AI software, to the benefit of all humanity.</p>

<p>Fourth, the overall creation of new Perl ML/AI projects and educational courses will naturally result in the critically-needed creation of new Perl jobs.</p>

<p>Last but not least, new corporate projects using Perl ML/AI will also translate into new corporate funding and sponsorship for Perl non-profits such as TPF.</p>

<h2>Deliverables</h2>

<p>An implementation of Perl API bindings to all applicable symbols in the TensorFlow C API, using FFI::Platypus from CPAN.</p>

<p>A comprehensive Perl test suite with automatically-provable coverage for 100% of the Perl API, using Test2 from CPAN.</p>

<p>A carefully-written and explanatory collection of documentation with coverage for 100% of the Perl API, using normal POD fully compatible with CPAN.</p>

<p>A small collection of user-friendly example Perl applications, using popular TensorFlow components to effectively showcase the Perl API.</p>

<p>A public GitLab repository with all source code and components of the Perl API, including unstable or experimental components.</p>

<p>A public CPAN distribution with all stable source code and components of the Perl API.</p>

<p>A public DockerHub repository with all stable source code and components of the Perl API, along with all dependencies, ready to run out-of-the-box.</p>

<p>The TensorFlow C API does NOT yet support gradients, functions, and control flow operations.  These features will be addressed in future grant proposals.</p>

<p>This grant proposal specifically does NOT include any re-implementation of TensorFlow's Python layer, such as NumPy NDarrays or Keras, which is far beyond the scope of a single grant and will be addressed in future proposals.</p>

<h2>Project Details</h2>

<p>All the technical details of how a TensorFlow API should behave and how to implement it in Perl can be found at the following websites:</p>

<ul>
<li>https://www.tensorflow.org/api_docs</li>
<li>https://github.com/tensorflow/tensorflow</li>
<li>https://github.com/tensorflow/docs/blob/master/site/en/r1/guide/extend/bindings.md</li>
<li>https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h</li>
<li>https://metacpan.org/pod/FFI::Platypus</li>
<li>https://metacpan.org/pod/Test2</li>
</ul>

<h2>Project Schedule</h2>

<p>Total development time is estimated at 60 to 90 days, with the normal disclaimer about the difficulty of predicting software project durations.</p>

<p>During the first work cycle of approximately 30 days, implement the initial Perl API.</p>

<p>During the second work cycle, implement the Perl test suite.</p>

<p>During the third work cycle, write the Perl documentation and implement the Perl example applications.</p>

<p>If a fourth work cycle is required, continue until the public releases on CPAN and DockerHub are complete.</p>

<h2>Completeness Criteria</h2>

<p>This grant is deemed complete when all the above-listed deliverables are reviewed and accepted by the official TPF-assigned grant manager.</p>

<h2>Bio</h2>

<p>I'm a prolific CPAN author, with <a href="https://metacpan.org/author/JJNAPIORK">86 distributions so far</a>.</p>

<p>I've been one of the core maintainers of <a href="https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90126/view/lib/Catalyst.pm">Catalyst</a>, the premier Perl MVC web application framework, for over a decade.</p>

<p>I'm an active and dedicated member of the Perl community, including long-term participation at TPF-sponsored events such as <a href="https://www.youtube.com/c/YAPCNA/search?query=napiorkowski">The Perl Conference</a>.</p>

<p>I live outside of Austin, Texas with my family, pets, and farm animals.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook): June 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_june_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/maintaining_perl_tonyc_june_2022</id>
  <published>2022-07-11T18:35:16</published>
  <updated>2022-07-11T18:35:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/06/01 Wednesday 0.28 comment on Win32 p5p thread 0.60 #18882 review, comment briefly 1.17 review github notifications 1.40 #19668 fail to build perl  get it built, reproduce, work on test 0.17 #19668 finish test, fix, start test run, push for CI 3.62 2022/06/02 Thursday 0.07 #19668 open PR 1.42 review coverity report 351943, diagnose, research, fix,  testing, push change for CI, open PR #19807 0.77 cid 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:
```
[Hours]         [Activity]
2022/06/01      Wednesday
0.28           comment on Win32 p5p thread
0.60           #18882 review, comment briefly
1.17           review github notifications
1.40           #19668 fail to build perl (using tools from strawberry),
                get it built, reproduce, work on test</p>

<h1>0.17           #19668 finish test, fix, start test run, push for CI</h1>

<p>3.62</p>

<p>2022/06/02      Thursday
0.07           #19668 open PR
1.42           review coverity report 351943, diagnose, research, fix,
                testing, push change for CI, open PR #19807
0.77           cid 351946 - diagnose and reject as false positive, review
                some other coverity issues
1.68           more coverity cid 351960 - try to make it crash, review</p>

<h1>                other coverity issues</h1>

<p>3.94</p>

<p>2022/06/03      Friday
1.38           more coverity, upload a simple modelling file (how to
                prevent byte swapping tainting?)
0.20           #19807 review CI results and apply to blead
0.30           #19806 apply to blead, perldelta updates</p>

<h1>0.43           #19791 review, look over Configure, hints/freebsd</h1>

<p>2.31</p>

<p>2022/06/06      Monday
0.17           #19825 review and approve
0.37           #19795 review and comment
0.33           #19797 review and comment
0.40           #19826 try to reproduce, comment
1.68           #19704 work on a fix, testing
1.15           #19704 try to break it, commit, push for CI
0.67           #19826 follow-up</p>

<h1>1.12           #6841/#12227 testing, comments</h1>

<p>5.89</p>

<p>2022/06/07      Tuesday
1.07           #19797 try to test build with clang-cl (and fail)
1.27           review new coverity alerts
0.70           yield true feature discussion: comment, try a simple
                patch, look over referenced true module.</p>

<h1>1.63           #6841 testing, work on a fix, more testing</h1>

<p>4.67</p>

<p>2022/06/08      Wednesday
0.28           #19797 followup
1.05           #19704 re-word commit message
0.62           #6841 more testing, push for CI
0.10           #6841 check CI results, make PR #19833
0.17           #18882 recheck and apply to blead
0.83           #18534 review and briefly comment
0.52           #19829 testing, review Makefile and make PR #19834
0.98           #19791 review Configure and hints, start on a fix (tests</p>

<h1>                are slow on qemu)</h1>

<p>4.55</p>

<p>2022/06/09      Thursday
0.10           #19797 followup - restart failing CI test (looks like a
                timing issue)
0.17           #19833 apply to blead, perldelta
0.48           #19795 review and approve
0.53           #19791 rebase, start a(nother) test Configure
0.20           #19834 review discussion and apply to blead, perldelta
0.67           #19826 try on 21H2, still can’t reproduce
0.17           #19791 slight re-work, start another test run
0.72           look over history of requirement for true from required
                files (goes back to 5.000)
0.37           #19797 check CI results and apply to blead
0.48           #19822 review and approve
0.13           #19820 review (no decision)</p>

<h1>0.47           #19791 make a commit, test on amd64 VM, make PR 19843</h1>

<p>4.49</p>

<p>2022/06/13      Monday
0.83           review github notifications
0.38           #19847 review and approve
1.65           look at floor/ceil overloading, debug an assert, create</p>

<h1>                #19857</h1>

<p>2.86</p>

<p>2022/06/14      Tuesday
0.40           #19854 review and comment
0.40           #19791 comment
0.28           #19837 review and approve
0.20           #19836 review and approve</p>

<h1>1.57           #19846 review, testing</h1>

<p>2.85</p>

<p>2022/06/15      Wednesday
0.18           #14448 research and comment
1.02           #19846 look into PERL_MEM_LOG build issues
1.40           #19846 more look into PERL_MEM_LOG build issues, push for
                CI
0.53           #19861 review and approve
0.22           #19858 review and approve
0.17           #19769 review and approve
0.15           #19755 review, research and comment with suggestion</p>

<h1>0.48           #19851 research and comment</h1>

<p>4.15</p>

<p>2022/06/16      Thursday
0.08           #19864 apply to blead
0.05           #19755  review new changes and apply to blead
0.87           #19846 look at CopSTASHPV problem, testing and comment
1.02           #19848 review, briefly comment
1.12           research implementation of yield true, comment to list</p>

<h1>0.70           #18606 rebase, look over code, testing</h1>

<p>3.84</p>

<p>2022/06/20      Monday
0.38           #19870 try to see why it fails, find out, comment
0.82           #19871 try to see why it fails and comment
0.45           cygwin CI setup re-work - use cygwin setup action
3.32           more cygwin CI setup re-work - more use cygwin setup
                action, try to use standard checkout action but thwarted</p>

<h1>                by safe directories</h1>

<p>4.97</p>

<p>2022/06/21      Tuesday
0.60           #19832 rebase
0.80           cygwin CI setup re-work - retest and make PR #19876
0.27           #19871 review comments and comment
0.22           #19846 review latest and apply to blead</p>

<h1>0.87           #19814 review code and comments, comment</h1>

<p>2.76</p>

<p>2022/06/22      Wednesday
0.77           #12082 research, write up a simple doc change and make PR
                #19881
0.27           #19870 review updated version and comment
0.22           #19857 follow-up
0.23           #19876 apply to blead (also some unrelated #p5p
                discussion)
0.80           #19851 reproduce, work on fixes
0.32           #19851 more, comment</p>

<h1>1.32           #18606 more testing</h1>

<p>3.93</p>

<p>2022/06/23      Thursday
0.10           review github notifications
1.77           #19857 debugging</p>

<h1>2.15           #19857 debugging</h1>

<p>4.02</p>

<p>2022/06/27      Monday
0.25           review github notifications
1.28           #19894 review, research and comment, reproduce on DFBSD
                5.8, start a bisect
1.33           #19894 review bisect results, try to make a short
                reproducer, debugging, comment
0.62           #19867 research and comment
0.77           #19857 find immediate cause of parent link not being set,</p>

<h1>                more to do.</h1>

<p>4.25</p>

<p>2022/06/28      Tuesday
0.42           review github notifications
0.67           #19894 test and make a smoke-me branch
0.20           #19896 review
0.13           #19895 testing and comment</p>

<h1>1.13           #19857 debugging</h1>

<p>2.55</p>

<p>2022/06/29      Wednesday
0.48           #19874 testing, comment
0.97           Karl’s UTF8-API - research and comment</p>

<h1>1.77           #19857 more debugging, think I found the cause</h1>

<p>3.22</p>

<p>2022/06/30      Thursday
2.48           #19894 debugging, create
                https://bugs.dragonflybsd.org/issues/3319 work on a SKIP
                patch, testing, push for smoke-me, comment
0.48           #19903 review, research and comment</p>

<h1>0.60           #19901 review, research and comment</h1>

<p>3.56
```
Which I calculate is 72.43 hours.</p>

<p>Approximately 45 tickets were reviewed or worked on, and 10 patches
were applied.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#572 - Perl Blogger?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/572.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Are you a <strong>Perl</strong> blogger?</p>
<p>The state of Perl blogging is not hidden from anyone. <strong>Dave Cross</strong> wrote an extensive <a href="https://perlhacks.com/2020/09/blogging-for-perl">blog post</a> explaining not just the issues but also suggestions to get around it.</p>
<p>I proposed an idea on my <a href="https://twitter.com/cpan_author">personal twitter</a> handle and asked for public opinion. As of today, it got <strong>22 likes</strong>. I know, it isn't big number.</p>
<p>By the way, what was the proposal?</p>
<p>The proposal was to setup dedicated domain (https) powered by <strong>GitHub Pages</strong>. The static site would be generated by <strong>Hugo</strong>. It would be open to public to submit blog post as <strong>Markdown</strong> formatted page as pull request. After a quick review, the post would be live.</p>
<p>Sounds simple, isn't it?</p>
<p>The proposal should be familiar to those who have ever wrote an article for <a href="https://www.perl.com">Perl.com</a>. It has the same the process as I mentioned above, I was reminded the same in response to my <strong>Twitter post</strong> by a friend of mine. It makes me sad to see that the last post on the site was published on <strong>25th May 2021</strong>. I came to know about the site for the first time when I found out about the monthly post <strong>"What's new on CPAN"</strong> by <strong>David Farrell</strong>. In the early days of my <strong>CPAN</strong> association, every time I upload a new distribution, I would wait for the article to see if my distribution made it or not. Some of my distributions did appear in the article, just for record. I even did interview series, <strong>The Perl Ambassador</strong> for the site in the year 2020. I had the honour to interview, <a href="https://www.perl.com/article/the-perl-ambassador-gabor-szabo">Gabor Szabo</a>, <a href="https://www.perl.com/article/the-perl-ambassador-curtis-poe">Curtis 'Ovid' Poe</a> and <a href="https://www.perl.com/article/the-perl-ambassador-damian-conway">Damian Conway</a>. What a shame, I couldn't continue even though I had the list of high profile <strong>Perl Ambassadors</strong> to interview.</p>
<p>I have mostly blogged on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a>. I don't consider myself an active blogger, although I used to blog frequently before. I don't feel comfortable now a days blogging on <strong>bpo</strong>, so I decided to blog on <a href="https://theweeklychallenge.org/blogs">Perl Weekly Challenge</a> and cross linked on <strong>bpo</strong>. It is (cross linking) something not approved by many as I understand. I am likely to setup my personal blog site instead, just for <strong>Perl</strong>. I will share the details when it is live. You are all welcome to contribute.</p>
<p>I am up for new ideas and suggestions too. Please do share if you have one.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/572.html</id>
    <published>2022-07-11T10:00:00Z</published>
    <updated>2022-07-11T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Partition the Summary</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/10#pwc172" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive integers, $n and $k. Write a script to find out the Prime 
Partition of the given number. No duplicates are allowed.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use Math::Combinatorics;

sub sieve_atkin{
    my($upper_bound) = @_;
    my @primes = (2, 3, 5);
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub prime_partition{
    my($n, $k) = @_;
    my @partitions;
    my @primes = sieve_atkin($n);
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; $k, data =&gt; [@primes]);
    while(my @combination = $combinations-&gt;next_combination()){
        push @partitions, [@combination] if unpack("%32I*", pack("I*", @combination)) == $n;
    }
    return @partitions;
}

MAIN:{
    my($n, $k);
    $n = 18, $k = 2;
    map{ 
        print "$n = " . join(", ", @{$_}) . "\n"
    } prime_partition($n, $k);
    print"\n\n";
    $n = 19, $k = 3;
    map{ 
        print "$n = " . join(", ", @{$_}) . "\n"
    } prime_partition($n, $k);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
18 = 7, 11
18 = 5, 13


19 = 3, 11, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Only when writing this short blog did I realize there is a far more efficient way of 
doing this!&lt;/p&gt;

&lt;p&gt;Here we see a brute force exhaustion of all possible combinations. This works alright for 
when &lt;code&gt;$n&lt;/code&gt; and &lt;code&gt;$k&lt;/code&gt; are relatively small. For larger values a procedure like this would be
better,&lt;/p&gt;

&lt;pre&gt;
1. Obtain all primes $p &lt; $n
2. Start with $n and compute $m = $n - $p for all $p
3. If $m is prime and $k = 2 DONE
4. Else set $n = $m and repeat, computing a new $m with all $p &lt; $m stopping with the same criteria if $m is prime and $k is satisfied
&lt;/pre&gt;

&lt;p&gt;This procedure would be a natural fit for recursion, if you were in the mood for that sort 
of thing.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of integers. Write a script to compute the five-number summary of 
the given set of integers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub five_number_summary{
    my @numbers = @_;
    my($minimum, $maximum, $first_quartile, $median, $third_quartile);
    my @sorted = sort {$a &lt;=&gt; $b} @numbers;
    $minimum = $sorted[0];
    $maximum = $sorted[@sorted - 1];
    if(@sorted % 2 == 0){
        my $median_0 = $sorted[int(@sorted / 2) - 1];
        my $median_1 = $sorted[int(@sorted / 2)];
        $median = ($median_0 + $median_1) / 2;
        my @lower_half = @sorted[0 .. int(@sorted / 2)];
        my $median_lower_0 = $lower_half[int(@lower_half / 2) - 1];
        my $median_lower_1 = $lower_half[int(@lower_half / 2)];
        $first_quartile = ($median_lower_0 + $median_lower_1) / 2;       
        my @upper_half = @sorted[int(@sorted / 2) .. @sorted];
        my $median_upper_0 = $upper_half[int(@upper_half / 2) - 1];
        my $median_upper_1 = $upper_half[int(@upper_half / 2)];
        $third_quartile = ($median_upper_0 + $median_upper_1) / 2;
    }
    else{
        $median = $sorted[int(@sorted / 2)];
        $first_quartile = [@sorted[0 .. int(@sorted / 2)]]-&gt;[int(@sorted / 2) / 2];
        $third_quartile = [@sorted[int(@sorted / 2) .. @sorted]]-&gt;[(@sorted - int(@sorted / 2)) / 2];
    }
    return {
        minimum =&gt; $minimum, 
        maximum =&gt; $maximum, 
        first_quartile =&gt; $first_quartile, 
        median =&gt; $median, 
        third_quartile =&gt; $third_quartile
    };
}

MAIN:{
    my @numbers;
    my $five_number_summary;
    @numbers = (6, 3, 7, 8, 1, 3, 9);
    print join(", ", @numbers) . "\n";
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
    print "\n\n";
    @numbers = (2, 6, 3, 8, 1, 5, 9, 4);
    print join(", ", @numbers) . "\n";    
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
    print "\n\n";
    @numbers = (1, 2, 2, 3, 4, 6, 6, 7, 7, 7, 8, 11, 12, 15, 15, 15, 17, 17, 18, 20);
    print join(", ", @numbers) . "\n";      
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
6, 3, 7, 8, 1, 3, 9
third_quartile: 8
maximum: 9
minimum: 1
first_quartile: 3
median: 6


2, 6, 3, 8, 1, 5, 9, 4
median: 4.5
first_quartile: 2.5
minimum: 1
maximum: 9
third_quartile: 7


1, 2, 2, 3, 4, 6, 6, 7, 7, 7, 8, 11, 12, 15, 15, 15, 17, 17, 18, 20
maximum: 20
third_quartile: 15
first_quartile: 5
median: 7.5
minimum: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Note that the case of an even or odd number of elements of the list (and sublists) 
requires slightly special handling.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-172/"&gt;Challenge 172&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc172</id>
    <published>2022-07-10T20:39:00-04:00</published>
    <updated>2022-07-10T20:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
