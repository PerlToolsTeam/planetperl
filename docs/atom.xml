<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-04-20T04:51:17Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl performance on Apple M1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dimitrios_kechagias/2021/04/perl-performance-on-apple-m1.html"/>
    <id>tag:blogs.perl.org,2021:/users/dimitrios_kechagias//3414.10188</id>
    <published>2021-04-20T03:48:27Z</published>
    <updated>2021-04-20T04:39:19Z</updated>
    <author>
        <name>Dimitrios Kechagias</name>
        <uri>http://astro.ecuadors.net</uri>
    </author>
    <category term="applem1" label="Apple M1" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="macos" label="MacOS" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dimitrios_kechagias/">
        <![CDATA[<p><span style="font-size: 1em;"><a href="https://metacpan.org/pod/HTML::FormatText">https://metacpan.org/pod/HTML::FormatText</a>I recently got an <b>Apple M1 Mac Mini</b>, half out of curiosity, half because it was exactly what I would need: I have a low end Mac just to try out things like new Xcode betas etc, like a "canary" machine. My old 2012 Mac Mini stopped getting official Apple updates, so it could no longer do what I needed and the 8GB RAM, 256GB SSD M1 mini at $699 is easily the cheapest Mac you can buy.</span><br />
Overall, unlike the typical Mac Minis of old which seemed to be on the slow side, it did feel quite fast from the start, so I thought I'd run some benchmarks on it for fun to see how Apple's ARM M1 fares against some x86 competition. And, as in my day job I use mostly Perl, I thought some perl-related benchmarks would be of interest to me.</p>

<p>For those not aware, the <b>M1</b> is an ARM-based CPU (well, includes GPU, so SoC really), with 8 cores total (4x performance @ 3.2GHz/12MB L3, 4x efficiency @ 2GHz/4MB L3) built at 5nm and consuming up to 15W. Basically the "laptop" class CPU of what Apple has been building for iPhones/iPads. Apart from native ARM code, it can run x86 code through <a href="https://en.wikipedia.org/wiki/Rosetta_(software)#Rosetta_2">Rosetta 2</a>, but I still can't use it for work - our dev environment currently relies on VirtualBox which needs actual x86/VT-x silicon. I ran benchmarks against my work laptop, a Mid 2015 15" MacBook Pro with a <b>2.5GHz i7</b> Crystalwell. Even though it was Apple's top of the line at the time, it's a bit old now, I keep it for the non-butterfly keyboard and the full complement of ports, and until recently the newer Macs weren't much faster anyway. Although an older i7 will make it easier for the M1 to compete, I still find the comparison quite interesting, especially since the Mac Mini has always been the "slow/cheap" Mac - and it's now even cheaper. Plus I'll throw some tests with different hardware just for comparison.</p>

<p><big><strong>The Benchmarks</strong></big></p>

I will definitely not claim the benchmarks I ran are truly representative of real world performance, especially when I am of the opinion you should benchmark your own code - what you personally would run. But, I also added some typical things most perl users might do and some things that came up when looking for Perl "benchmarks", so that anybody can try them and get an idea of the relative performance of their own machine.<br /><div><br /><ul>
	<li><b>Building perl 5.32.1</b></li>
</ul>

It's nice that Apple finally updated the MacOS system Perl. <strong>BigSur</strong> now comes with <strong>v5.28.2</strong> (threaded) by default, after being stuck at v5.18 for many years. However, I rarely rely on system Perl, so the first thing to do which is sort of a benchmark in itself, would be to get perlbrew and run:
<pre>perlbrew install perl-5.32.1</pre>

<ul><li><b>Moose 2.2015</b></li>
</ul><div>The Moose test suite is, like the object system itself, a relatively slow affair. I'll time the default cpan installation which builds and runs the test-suite single-threaded:<br /><br /></div><div><pre style="font-size: 13px;">cpan Moose</pre>
Then, I can try the test suite after preloading Moose with yath at 1, 4, 6 threads. In the last case, the M1 will have to use its efficiency cores, while the i7 will use HT:
<pre style="font-size: 13px;">yath -PMoose
yath -PMoose -j4
yath -PMoose -j6</pre>

<ul>
	<li><b>prime.pl</b></li>
</ul>

I modified a bit the <a href="https://github.com/famzah/langs-performance/blob/master/primes.pl">primes.pl script from here</a> to:

<pre><code>
use strict;
use warnings;

use Time::HiRes 'time';
my $time = time();

my $n = $ARGV[0] || 100000000;
my @s = ();
for (my $i = 3; $i &lt; $n + 1; $i += 2) {
    push(@s, $i);
}
my $mroot = $n**0.5;
my $half  = scalar @s;
my $i     = 0;
my $m     = 3;
while ($m &lt;= $mroot) {
    if ($s[$i]) {
        for (my $j = int(($m * $m - 3) / 2); $j &lt; $half; $j += $m) {
            $s[$j] = 0;
        }
    }
    $i++;
    $m = 2 * $i + 3;
}

my @res = (2, grep($_, @s));
warn "Found ".scalar(@res)." primes in ".(time()-$time)." sec.\n";

</code></pre>

I ran it as it is, and also on 4 threads with the argument <b>20000000</b> (to avoid hitting the 8GB M1 RAM limits).

<br /><br /><ul>
	<li><b>phoronix-test-suite-10.2.2</b></li>
</ul>

The only test suite that advertises perl tests, although it turns out in just has 2 small subtests for perl (interpreter, pod2html), with the command:
<pre>phoronix-test-suite run pts/perl-benchmark</pre>

<ul>
	<li><b>BioPerl</b></li>
</ul>
I downloaded some bacteria from <a href="https://www.ncbi.nlm.nih.gov/genbank/release/221/">genbank</a> and benchmarked loading the sequences to count codons or monomers.
<pre><code>
use strict; 
use Bio::SeqIO; 
use Bio::Tools::SeqStats; 
use Benchmark qw(:all);

my $in = Bio::SeqIO-&gt;new(-file =&gt; "gbbct10.seq", -format =&gt; "genbank");

timethis(1, sub {
    my $seq = $in-&gt;next_seq;
    my $seq_stats = Bio::Tools::SeqStats-&gt;new($seq); 
    my $codon_ref = $seq_stats-&gt;count_codons(); 
});

timethis(1, sub {
    my $builder = $in-&gt;sequence_builder();
    $builder-&gt;want_none();
    $builder-&gt;add_wanted_slot('display_id','seq');
    for (1..10000) {
        my $seq = $in-&gt;next_seq;
        my $seq_stats = Bio::Tools::SeqStats-&gt;new($seq); 
        my $weight = $seq_stats-&gt;get_mol_wt(); 
        my $monomer_ref = $seq_stats-&gt;count_monomers();
    }
});
</code></pre>

<ul>
	<li><b>Precession</b></li>
</ul>
Let's precess 1 million random celestial coordinates between random epochs using my <a href="https://metacpan.org/pod/Astro::Coord::Precession">Astro::Coord::Precession</a>.
<pre><code>
use Astro::Coord::Precession 'precess';

my $precessed = precess([rand(24), rand(180)-90], rand(200)+1900, rand(200)+1900)
    for (1..1000000);
</code></pre>

<ul>
	<li><b>Text processing</b></li>
</ul>

I threw in a script (called DSOgenerate) that reads various astronomical catalogues and compiles the database for my <a href="https://astro.ecuadors.net/polar-scope-align/">Polar Scope Align</a> iOS app, and another that parses webpages to get articles (its slowest component is HTML::FormatText) that was used for a <a href="https://textmap.org/">university project</a> I worked on.</div><div><br /><p><big><strong>The Good (aka: The Results)</strong></big></p><p><big><google-sheets-html-origin style="color: rgb(0, 0, 0); font-size: medium;"></google-sheets-html-origin></big></p><table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout: fixed; font-size: 10pt; font-family: Arial; width: 0px; border-collapse: collapse; border: none;"><colgroup><col width="130"><col width="61"><col width="66"><col width="66"><col width="66"></colgroup><tbody><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Benchmark&quot;}" style="border: 1px solid rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Benchmark</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Units&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Units</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;i7&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">i7</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1 Diff&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1 Diff</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Build perl 5.32.1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Build perl 5.32.1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;min&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">min</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:21.516666666666666}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=22+(17-46)/60" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">21.52</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:13.783333333333333}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=14+(32-45)/60" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">13.78</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.5610640870616688}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">56.1%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;cpanm Moose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">cpanm Moose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:116.61}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">116.61</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:44.33}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">44.33</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.6304985337243403}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">163.0%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;yath -PMoose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">yath -PMoose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:47.63}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">47.63</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:18.43}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">18.43</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.5843733043950086}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">158.4%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;yath -PMoose -j4&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">yath -PMoose -j4</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:18.05}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">18.05</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:5.88}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">5.88</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:2.0697278911564627}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">207.0%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;yath -PMoose -j6&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">yath -PMoose -j6</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:16.94}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">16.94</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:5.77}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">5.77</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.935875216637782}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">193.6%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime,pl&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime,pl</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:23.22}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">23.22</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:15.56}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">15.56</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.492287917737789}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">49.2%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime.pl 4x&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime.pl 4x</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:4.8950000000000005}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=(4.86+4.87+4.89+4.96)/4" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">4.90</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:3.06}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">3.06</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.5996732026143793}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">60.0%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Phoronix pod2html&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Phoronix pod2html</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;msec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">msec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:213.00457}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">213.00</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:91.16566}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">91.17</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.3364561831724795}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">133.6%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Phoronix Interpreter&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Phoronix Interpreter</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;msec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">msec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:4.5683}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">4.57</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.2453500000000002}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" data-sheets-formula="=R[6]C[-12]*1000" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">1.25</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:2.668286024009314}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">266.8%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;BioPerl codons&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">BioPerl codons</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:149.89}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">149.89</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:127.58}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">127.58</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.17487066938391604}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">17.5%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;BioPerl monomers&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">BioPerl monomers</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:16.64}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">16.64</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:7.82}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">7.82</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.1278772378516626}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">112.8%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Precession&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">Precession</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:6.85}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">6.85</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:3.27}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">3.27</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.09480122324159}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">109.5%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;DSOgenerate&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">DSOgenerate</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:13.12}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">13.12</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:5.71}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">5.71</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.297723292469352}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">129.8%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;HTML::FormatText&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom;">HTML::FormatText</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:8.52}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">8.52</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:4.7}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">4.70</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.8127659574468085}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">81.3%</td></tr><tr style="height: 21px;"><td rowspan="1" colspan="4" data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Average:&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">Average:</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.2418771957787538}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=AVERAGE(R[-14]C[0]:R[-1]C[0])" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-image: initial; overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: right;">124.2%</td></tr></tbody></table><p><br /><br />Or, if we want a nice comparison graph where the i7 is "1x" speed and plot the M1 in relation to it:</p></div><div><img alt="chart (2).png" src="http://blogs.perl.org/users/dimitrios_kechagias/chart%20%282%29.png" width="596" height="418" class="mt-image-none" /></div><div><br /></div><div>I found the results quite remarkable. I mean, the main reason I went through all these is that I could see the M1 going through the installation of cpan modules at a ridiculous pace compared to my i7 when I was setting it up, it was very obviously faster.</div><div>t turns out it is over 2x faster as a crude "average" of the above tests. You can see from the two multithreaded tests that it actually gains even more an advantage when using all its (performance) cores compared to the i7.</div><div>There is at least one test (the codons) where the M1 does not really "shine", so, as I said, benchmarking your own specific workload is important - the M1 does seem very fast at many common Perl tasks, but not *all*.</div><div>Could my old i7 be just too slow? Just to make sure, I had my colleagues with the 16" Mac with the fastest CPU available, the 8-core <b>2.4GHz i9</b>, run a couple of the single core benchmarks to make a comparison, one that did really well on the M1, one that did below average:</div><div><br /></div><div><google-sheets-html-origin style="color: rgb(0, 0, 0); font-size: medium;"><table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout: fixed; font-size: 10pt; font-family: Arial; width: 0px; border-collapse: collapse; border-width: initial; border-style: none;"><colgroup><col width="130"><col width="61"><col width="66"><col width="66"><col width="66"></colgroup><tbody><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Benchmark&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Benchmark</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Units&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Units</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;i9&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">i9</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1 Diff&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1 Diff</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;cpanm Moose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">cpanm Moose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:86.14}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">86.14</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:44.33}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">44.33</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.9431536205729755}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">94.3%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime,pl&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime,pl</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:19.35}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">19.35</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:15.56}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">15.56</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.24357326478149102}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">24.4%</td></tr></tbody></table></google-sheets-html-origin></div><div><br /></div>So while the i9 is generally 20-30% faster than the i7, it's still nowhere near the M1 being more than twice as fast. Note that the i9 has 8 full speed cores, so things might get tighter for workloads using more than 4 cores at a time.</div><div><br /></div><div><p><big><strong>The Bad</strong></big></p></div><div>Simply put, not everything works yet. Sometimes it's something simple, <a href="https://github.com/burak/CPAN-Sys-Info-Driver-OSX/pull/3">like a patch I submitted to Sys::Info::Driver::OSX</a> due to the different reporting of the asymmetric processor cores. But I have been unable to install some other CPAN modules or see test failures that are not easy to explain.</div><div><br /></div><div>At least Perl developers will have a native-running environment, even though there are some glitches that should get sorted out in time. I am saying this because while some things run fast even under Rosetta, I have encountered cases where non-native software runs slowly. For example, an Android project I tried, takes almost twice the time to compile on the M1. Android studio is not yet native and it shows, I would not recommend the platform to android devs. It is the opposite for iOS devs of course, the M1 is the ideal platform for obvious reasons.</div><div><br /></div><div>Additionally, the comparison shows the M1 can be much faster than the i7/i9, however that comparison is important only if you are limited to the Apple world. If you don't need a Mac specifically and will just run Linux (to not mention Windows), then you are not limited to what Apple has to offer. I am referring to <b>AMD</b> of course, for most workloads, a Zen 2 based CPU is quite a bit faster than intel per thread, and on top will offer more cores at a similar price. I don't have a Zen 2 CPU to try out right now, however I do have a ThinkPad X395 which has a Zen-1 based 2.1GHz <b>Ryzen 5 3500U</b>. While it's not an old CPU, the newer Zen-2 based 4000-series and 5000-series CPUs seem to be almost twice as fast per core in various benchmarks, which would probably make those faster than an M1, given that the "slow" 3500U is already a bit faster (around 15% on average it seems) than the i7:</div><div><br /></div><div><google-sheets-html-origin style="color: rgb(0, 0, 0); font-size: medium;"><table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout: fixed; font-size: 10pt; font-family: Arial; width: 0px; border-collapse: collapse; border-width: initial; border-style: none;"><colgroup><col width="130"><col width="61"><col width="66"><col width="66"><col width="66"></colgroup><tbody><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Benchmark&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Benchmark</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;Units&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">Units</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;3500U&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">3500U</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;M1 Diff&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; font-weight: bold; text-align: center;">M1 Diff</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;cpanm Moose&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">cpanm Moose</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:101.22}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">101.22</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:44.33}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">44.33</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:1.2833295736521544}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">128.3%</td></tr><tr style="height: 21px;"><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;prime.pl&quot;}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;">prime.pl</td><td data-sheets-value="{&quot;1&quot;:2,&quot;2&quot;:&quot;sec&quot;}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: center;">sec</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:20.01}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">20.01</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:15.56}" data-sheets-numberformat="{&quot;1&quot;:2,&quot;2&quot;:&quot;#,##0.00&quot;,&quot;3&quot;:1}" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">15.56</td><td data-sheets-value="{&quot;1&quot;:3,&quot;3&quot;:0.2859897172236504}" data-sheets-numberformat="{&quot;1&quot;:3,&quot;2&quot;:&quot;0.0%&quot;,&quot;3&quot;:1}" data-sheets-formula="=(1/R[0]C[-1]-1/R[0]C[-2])*R[0]C[-2]" style="border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); overflow: hidden; padding: 2px 3px; vertical-align: bottom; text-align: right;">28.6%</td></tr></tbody></table></google-sheets-html-origin></div><div><br /></div><div>That M1 advantage over 3500U is probably not enough to hold off Zen 2 cpus, which also come with many more full-power cores than an M1.</div><div>Then again, the M1 is Apple's first "laptop/desktop" silicon and they were possibly targeting efficiency more than raw performance - as the latter was an easy win vs Intel, so I would keep an eye on what their next CPU will bring.</div><div><br /></div><div><b>The Ugly?</b></div><div><br /></div><div>The #1 criticism of the M1 Macs is not related to their CPU, but the fact that the SSD is soldered on. This means that when the SSD dies (will take several years, but depending on the usage SSDs will eventually fail), you can't just replace it (unless there's complete disassembly, desoldering etc). This "obsolescence by design" might not be that bad given the price of a Mac Mini compared to what Apple users are used to paying, but it is made worse by the fact that an M1 Mac has a signed system volume on the SSD, which is required for the Mac to boot even when booting from an external device. So when the SSD goes, you might not be able to boot your Mac at all - permanently. As I said, not a criticism of the M1 CPU directly, but of the devices that feature it.</div><div><br /></div><div>Lastly, while my benchmarks were reproducible in general, there was one benchmark - the prime.pl script - that gave me some trouble, exposing a strange and disconcerting issue. So, I run the benchmark for n=20000000 multiple times and I get consistent results. Also, if I run it by launching 4 instances in parallel background processes with a batch file, I also get consistent results. it goes a bit like this:</div>
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 2.7765851020813 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.78401112556458 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.77585196495056 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.00496196746826 sec.
Found 1270607 prime numbers in 3.01989006996155 sec.
Found 1270607 prime numbers in 3.02487397193909 sec.
Found 1270607 prime numbers in 3.02904796600342 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.01903891563416 sec.
Found 1270607 prime numbers in 3.02826595306396 sec.
Found 1270607 prime numbers in 3.02855086326599 sec.
Found 1270607 prime numbers in 3.03278708457947 sec.
</code></pre>
If I try again in a couple of hours or so, I will still see the same thing. But, if I try after a sufficiently long time (I am not clear on "sufficiently" seems like several hours, but definitely by the next day) - without using the Mac Mini in the interim, just left powered on - I start seeing this:
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 4.18084216117859 sec.
test % perl prime.pl
Found 1270607 prime numbers in 3.94040703773499 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.06315612792969 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.53617215156555 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.34210705757141 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.04679107666016 sec.
Found 1270607 prime numbers in 3.07015514373779 sec.
Found 1270607 prime numbers in 3.07026290893555 sec.
Found 1270607 prime numbers in 3.07335591316223 sec.
test % sudo nice -20 perl prime.pl
Found 1270607 prime numbers in 5.50178408622742 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.03745698928833 sec.
test % sh batch.prime.sh
test % Found 1270607 prime numbers in 3.04621696472168 sec.
Found 1270607 prime numbers in 3.0637059211731 sec.
Found 1270607 prime numbers in 3.07231998443604 sec.
Found 1270607 prime numbers in 3.07551097869873 sec.
</code></pre>
Running a single process is suddenly unpredictably slow. The i7 takes 4.3s at this benchmark on a single thread, so the M1 can be much slower. However, once I batch run 4 parallel processes I get the same great performance I was seeing before. It is reproducible, it's not a matter of if, but a matter of when I will eventually will get into this problematic state which, it seems, I can only solve via a reboot. After a reboot everything is fine once more.
I tried to see what's going on in several ways. Checking to see whether something like the efficiency cluster taking over, or the scheduler switching cores etc, I tried monitoring with <pre>powermetrics -s cpu_power</pre>
The result is not interesting enough to post, because both when the system is in the "good" and the "bad" state, only the performance cores are used (but not just one of them as I expected - a random mix, different each time, but similarly random for both "states"). It's the same story using the CPU history window:<div><img alt="cores2 copy.png" src="http://blogs.perl.org/users/dimitrios_kechagias/cores2%20copy.png" width="472" height="232" class="mt-image-none" /><br /><div><br /></div></div><div>The graph above shows a couple of single-process runs of prime.pl while in a "good" state, it causes all 4 performance cores (numbers 8 on CPU monitor) to be used at random proportions and it's the same for "bad" status runs - just the bars are twice as wide, the calculation takes longer.</div><div><br /></div><div>To add another clue that makes things weirder rather than explain the issue, I checked to see if it's my compiled perl at fault, so ran with the built-in perl which I assume Apple made sure to compile correctly. System 5.28 is a bit slower in "good" status runs:</div>
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 2.77031397819519 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 2.95687794685364 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.77954316139221 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 2.95602297782898 sec.
test % perl prime.pl
Found 1270607 prime numbers in 2.77461099624634 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 2.94599509239197 sec.
</code></pre>

But on "bad" status it is faster than my compiled perl (quite consistently, I've done this a few times) - although still much slower than after a reboot:
<pre><code>
test % perl prime.pl
Found 1270607 prime numbers in 5.44245409965515 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 4.92102980613708 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.34624910354614 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 3.51168012619019 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.66441202163696 sec.
test % /usr/bin/perl prime.pl
Found 1270607 prime numbers in 3.62216806411743 sec.
test % perl prime.pl
Found 1270607 prime numbers in 5.46292304992676 sec.
</code></pre>

I did eventually find a good clue: I can trigger this weird behaviour if I force the Mini to sleep and then wake up - it wakes up in the bad state. However, as there are no battery settings (not a laptop), I can't find any "go to sleep" timer in the settings - and, as I said, just leaving it for an hour or two (the screen does go to sleep, there's a setting for that) does not get it in the weird state. In any case it's probably got something to do with the CPU sleep states that Apple has missed. Since I couldn't reproduce it with the other workloads I would assume it's not gonna be easy to track down. Reminds me a bit of the problems I had waking an older Macbook (the white ones) from sleep while connected with multiple monitors -&nbsp;they never actually fixed that, so it had put me off Macbooks for a few years. I seem to hit Apple sleep state bugs.<div><br /></div><div><b>Overall</b></div><div><br /></div><div>I'd say, despite some caveats, the M1 is showing some impressive potential, especially for people who use MacOS and would not get much choice other than Intel's not-that-impressive-lately offerings. If I was looking for my main work machine, I'd probably wait a bit longer for some teething troubles to be solved (unless I wanted to help solve potential perl-specific issues) - and perhaps wait for the rumoured release later this year of a faster chip ("M1X" or whatever).</div><div><br /></div>]]>
        
    </content>
</entry>
  <entry>
  <title>March report of the Raku Development Grant of Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/jonathan-2021-03</id>
  <published>2021-04-19T15:21:34</published>
  <updated>2021-04-19T15:21:34</updated>
  <summary>
  <![CDATA[
     Jonathan writes: March didn't see me doing that many grant hours; I was keeping my keyboard time down for the first half of the month, and then had a lot to catch up on in the second half On the upside, the time that was spent was productive: I got some way into implementing more of Raku's multiple dispatch semantics in terms of the new dispatcher. I've written a blog 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan writes:
<hr></p>

<p>March didn't see me doing that many grant hours; I was keeping my keyboard time down for
the first half of the month, and then had a lot to catch up on in the second half (and
still needed to avoid putting in more than a usual working day). On the upside, the time
that was spent was productive: I got some way into implementing more of Raku's multiple
dispatch semantics in terms of the new dispatcher. I've written a <a href="https://6guts.wordpress.com/2021/04/15/raku-multiple-dispatch-with-the-new-moarvm-dispatcher/">blog post</a>
about that work (although some of the work it covers was done during April).</p>

<p><code>
Total time worked:: 7 hours 29 minutes
</code></p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Affairs Team Transparency Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/cat-transparency-repor-19-april-2021</id>
  <published>2021-04-19T13:39:03</published>
  <updated>2021-04-19T13:39:03</updated>
  <summary>
  <![CDATA[
     Following issues raised within the community, the CAT opened an investigation into community conduct. A second investigation was opened based on information discovered during the first investigation. What follows constitutes our second transparency report as well as an additional conclusion statement by the CAT. If you have not read it already, we highly recommend you read our latest Community Affairs Team Update. Investigation #1 Based on a recent public post 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Following issues raised within the community, the CAT opened an investigation into community conduct. A second investigation was opened based on information discovered during the first investigation.</p>

<p>What follows constitutes our second transparency report as well as an additional conclusion statement by the CAT. If you have not read it already, we highly recommend you read our latest <a href="https://news.perlfoundation.org/post/cat-update-19-april-2021">Community Affairs Team Update</a>.</p>

<h1>Investigation #1</h1>

<p>Based on a recent public post viewed by the CAT, the CAT investigated two individuals for potentially unacceptable behavior over IRC and Twitter. The investigation found that the first individual continued communication on multiple platforms despite being asked repeatedly to stop. Past behavior by the first individual was discovered during the course of the investigation. The CAT opened a separate investigation into this past behavior, and that investigation’s results are explained as part of “Investigation #2”.</p>

<p>Regarding the second individual investigated as part of “Investigation #1”, the CAT has decided to issue them a warning. The CAT will follow up with them to discuss this.</p>

<h1>Investigation #2</h1>

<p>Based on the previous investigation, the CAT investigated past behavior by the first individual. The CAT found that as an attendee of a 2019 Perl event, they had made repeated discriminatory statements and arguments in a conversation with the target, which was also overheard by other attendees. The individual continued arguing for this position despite being asked repeatedly to stop, the next day there were asked to leave the event.</p>

<p>They were instructed not to repeat the discriminatory statements and arguments. They were told an apology should not be made to the target of the harassment. Later, the individual repeated the discriminatory statements publicly on Twitter in discussions with other members of the community which were also viewed by the target. The target told the individual not to contact them ever again. Despite being asked explicitly not to contact them, the individual later contacted the target by email, which was an additional instance of unacceptable behavior.</p>

<h1>Consequences</h1>

<p>The CAT has informed the individual investigated as part investigation #1 and #2 that they are banned from attending any Perl Foundation conferences or events in perpetuity.</p>

<p>The CAT has instructed the individual to leave and cease participation on any public IRC channels on irc.perl.org, leave and cease participation on the Perl and Raku public channels on Freenode, unsubscribe and cease participation on any Perl and Raku community mailing lists including but not limited to the perl5-porters mailing list. The CAT has informed them to not contact the targets of their behavior from “Investigation #1” or “Investigation #2”. The CAT has informed them to not repeat the offending statements or arguments from “Investigation #2”. If the CAT decides the letter or the spirit of this decision has been violated, it may: explicitly extend the scope of the ban, take further technical measures to ensure compliance, or take other actions as it deems necessary.</p>

<h1>Other findings</h1>

<p>In addition to the findings of both investigations, the CAT wants to make it clear that separate and inclusive of the two reported investigations, it found many instances of communication which alone may not have constituted unacceptable behavior, but when taken together did constitute unacceptable behavior. The CAT asks all members of the Perl community to be respectful of others and that discriminatory or harassing conduct will not be tolerated.</p>

<h1>Conclusion</h1>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this public statement you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject. If you want to report: discriminatory, harassing, or otherwise unacceptable behavior, including evasion of CAT decisions, please contact <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a>. For examples of what may constitute unacceptable behavior, please see the Standards of Conduct for this year’s <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Conference in the Cloud</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Community Affairs Team Update April 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-update-19-april-2021"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/cat-update-19-april-2021</id>
  <published>2021-04-19T13:33:50</published>
  <updated>2021-04-19T13:33:50</updated>
  <summary>
  <![CDATA[
     The CAT’s purpose is to foster a positive and safe environment for anyone who shares an interest in Perl and Raku. It has been one year since the Community Affairs Team was first announced in March of 2020. In June, the Perl Raku Conference in the Cloud took place. This was the first conference where Community Affairs Moderators were present to respond to and handle Standards of Conduct violations. Prior 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The CAT’s purpose is to foster a positive and safe environment for anyone who shares an interest in Perl and Raku. </p>

<p>It has been one year since the Community Affairs Team <a href="https://news.perlfoundation.org/post/introducing-tpf-community-affairs-team">was first announced</a> in March of 2020.  In June, the Perl &amp; Raku Conference in the Cloud took place. This was <a href="https://perlconference.us/tpc-2020-cloud/">the first conference</a> where Community Affairs Moderators were present to respond to and handle Standards of Conduct violations. Prior to the conference, Community Affairs Moderators and <a href="https://perlconference.us/tpc-2020-cloud/handling-standards-of-conduct-incidents/">the CAT committee for the event</a> received training on handling and responding to SoC complaints within the community. A month later in July, the Chair of the CAT <a href="https://news.perlfoundation.org/post/board-2020-07">was appointed by the TPF board</a>. In October, the <a href="https://news.perlfoundation.org/post/cic-2020-soc-transparency-report">first Standards of Conduct transparency report</a> was released.</p>

<p>Following that, the CAT has been working on a charter document which outlines in more concrete terms its role and responsibilities as it relates to the community, as well as an updated Standards of Conduct which would apply not just to conferences, but to other TPF online spaces. Recent events in the community have expedited the CAT’s work and the board’s approval of these documents, which are planned to be publicly released within the next week.</p>

<p>The CAT is also preparing for the upcoming <a href="https://perlconference.us/tprc-2021-cloud/">Perl &amp; Raku Conference in the Cloud</a>, and training similar that received in 2020 is planned for the moderators and CAT committee for this event. The CAT thanks the many people who provided their input to the formation of the CAT, and Samantha McVey, Stuart Mackintosh, and Ricardo Signes for continuing their work on the CAT committee as well as their work on the CAT committee during last year’s conference. </p>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this update you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Join Our Merry Band of Perl Programmers</title>
    <link rel="alternate" href="https://job.perl.careers/2mf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is a financial company whose extraordinary growth over the last twenty years has seen them build a worldwide presence. They’ve recently opened a new location in Belarus and are looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/2mf</id>
    <published>2021-04-19T10:00:51Z</published>
    <updated>2021-04-19T10:00:51Z</updated>
  </entry>
  <entry>
    <title>Vienna Does it Best. Perl Developer role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/vgl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Everyone loves a great deal, which is why our client’s team is thriving. As one of the largest and most trusted product and price comparison platforms in German-speaking countries, our client has made it their mission to save people from overpaying. Consider all candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/vgl</id>
    <published>2021-04-19T10:00:50Z</published>
    <updated>2021-04-19T10:00:50Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/y1d" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/y1d</id>
    <published>2021-04-19T10:00:49Z</published>
    <updated>2021-04-19T10:00:49Z</updated>
  </entry>
  <entry>
    <title>A Role that Makes Dollars (and Cents). Perl Developer Role in London</title>
    <link rel="alternate" href="https://job.perl.careers/mu5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you are a senior Perl/JS programmer with a passion for finance and business, this could be the role you’ve been waiting for. Our client is looking for an individual who understands Go programming languages, is experienced with Python and Django, and knows the ins and outs of databases like MySQL, and NoSQL databases like Google BigTable.</div>
    </content>
    <id>https://job.perl.careers/mu5</id>
    <published>2021-04-19T10:00:48Z</published>
    <updated>2021-04-19T10:00:48Z</updated>
  </entry>
  <entry>
    <title>US Based, Modern Perl Developer Role - 100% remote!</title>
    <link rel="alternate" href="https://job.perl.careers/zsi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is looking for a Perl programmer who wants to tame the job jungle for employers and employees through their candidate sourcing and data management products. The role is 100% remote within the United States.</div>
    </content>
    <id>https://job.perl.careers/zsi</id>
    <published>2021-04-19T10:00:47Z</published>
    <updated>2021-04-19T10:00:47Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-04-19T10:00:46Z</published>
    <updated>2021-04-19T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 6, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-04-19T10:00:45Z</published>
    <updated>2021-04-19T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 28, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-04-19T10:00:44Z</published>
    <updated>2021-04-19T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-04-19T10:00:43Z</published>
    <updated>2021-04-19T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Live Pair programming </title>
    <link rel="alternate" href="https://szabgab.com/live-pair-programming.html" type="text/html"/>
    <id>https://szabgab.com/live-pair-programming.html</id>
    <published>2021-04-19T10:00:42Z</published>
    <updated>2021-04-19T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Implementing a feature in the Typescript cucumber-playwright package with Tally Barak</title>
    <link rel="alternate" href="https://code-maven.com/implementing-a-feature-in-typescript-cucumber-playwright" type="text/html"/>
    <id>https://code-maven.com/implementing-a-feature-in-typescript-cucumber-playwright</id>
    <published>2021-04-19T10:00:41Z</published>
    <updated>2021-04-19T10:00:41Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/04/cccxxxvii-12-great-cpan-modules.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxiii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/04/cdlxxxvi-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-04-19T10:00:40Z</published>
    <updated>2021-04-19T10:00:40Z</updated>
  </entry>
  <entry>
    <title>2021.15 First Conf</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/04/13/2021-15-first-conf/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/04/13/2021-15-first-conf/</id>
    <published>2021-04-19T10:00:39Z</published>
    <updated>2021-04-19T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Live Video - Bell Numbers by Mohammad Anwar</title>
    <link rel="alternate" href="https://youtu.be/dcF3Ojc_unQ" type="text/html"/>
    <id>https://youtu.be/dcF3Ojc_unQ</id>
    <published>2021-04-19T10:00:38Z</published>
    <updated>2021-04-19T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Live Video - Locate Memory by Mohammad Anwar</title>
    <link rel="alternate" href="https://youtu.be/TZUOgXYlrgo" type="text/html"/>
    <id>https://youtu.be/TZUOgXYlrgo</id>
    <published>2021-04-19T10:00:37Z</published>
    <updated>2021-04-19T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Detect recursion using state variables</title>
    <link rel="alternate" href="https://perlmaven.com/detect-recursion-using-state" type="text/html"/>
    <id>https://perlmaven.com/detect-recursion-using-state</id>
    <published>2021-04-19T10:00:36Z</published>
    <updated>2021-04-19T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Digital Ocean API using Perl</title>
    <link rel="alternate" href="https://perlmaven.com/digital-ocean-api" type="text/html"/>
    <id>https://perlmaven.com/digital-ocean-api</id>
    <published>2021-04-19T10:00:35Z</published>
    <updated>2021-04-19T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - part 3</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-3" type="text/html"/>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-3</id>
    <published>2021-04-19T10:00:34Z</published>
    <updated>2021-04-19T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Counter using Dancer2 and Redis in a Docker container</title>
    <link rel="alternate" href="https://perlmaven.com/counter-dancer2-redis-docker" type="text/html"/>
    <id>https://perlmaven.com/counter-dancer2-redis-docker</id>
    <published>2021-04-19T10:00:33Z</published>
    <updated>2021-04-19T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious - part 2</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious-2" type="text/html"/>
    <id>https://perlmaven.com/course-management-app-in-mojolicious-2</id>
    <published>2021-04-19T10:00:32Z</published>
    <updated>2021-04-19T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 108</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-108-3di2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">What a coincidence, I also got some help from the same animated GIF. Nice to know that both of us follow the same path.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-108-3di2</id>
    <published>2021-04-19T10:00:31Z</published>
    <updated>2021-04-19T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108: Memory Bell</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_108__Memory_Bell.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the hack shared by Roger. It a nice reminder to all of us, RTFM.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/04/Perl_Weekly_Challenge_108__Memory_Bell.html</id>
    <published>2021-04-19T10:00:30Z</published>
    <updated>2021-04-19T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108 - Memory Layout and Bell Numbers</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/04/12/PerlWeeklyChallenge108.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the use of Raku's 'multi' feature. It makes code so clean and easy to read. Thanks for sharing.</div>
    </content>
    <id>https://fluca1978.github.io/2021/04/12/PerlWeeklyChallenge108.html</id>
    <published>2021-04-19T10:00:29Z</published>
    <updated>2021-04-19T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/04/12/PWC108/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I enjoyed the refactoring process in the solution to the Bell Numbers task.</div>
    </content>
    <id>https://wlmb.github.io/2021/04/12/PWC108/</id>
    <published>2021-04-19T10:00:28Z</published>
    <updated>2021-04-19T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108: Locate Memory and Bell Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-108-locate-memory-and-bell-numbers.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent is on a mission to show his skill. Plenty of choices of languages can be found in this blog post.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-108-locate-memory-and-bell-numbers.html</id>
    <published>2021-04-19T10:00:27Z</published>
    <updated>2021-04-19T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Week 108</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2021/04/perl_weekly_challenge_week_108.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A very clean demonstration of Bell Numbers in Raku. Take this opportunity to learn Raku.</div>
    </content>
    <id>https://www.braincells.com/perl/2021/04/perl_weekly_challenge_week_108.html</id>
    <published>2021-04-19T10:00:26Z</published>
    <updated>2021-04-19T10:00:26Z</updated>
  </entry>
  <entry>
    <title>PWC108 - Bell Numbers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/15/pwc108-bell-numbers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio shares the power of state variables. Please check it out yourself.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/15/pwc108-bell-numbers/</id>
    <published>2021-04-19T10:00:25Z</published>
    <updated>2021-04-19T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC108 - Locate Memory</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/14/pwc108-locate-memory/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio makes good use of the core Perl library. Nice interpretaion.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/14/pwc108-locate-memory/</id>
    <published>2021-04-19T10:00:24Z</published>
    <updated>2021-04-19T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Hell's Bells, Margaret: Perl Weekly Challenge #108</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/04/15/hells-bells-margaret-perl-weekly-challenge-108.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A thorough discussion on the Bell Numbers task is the highlight of this blog post. You don't want to miss it.</div>
    </content>
    <id>https://jacoby.github.io/2021/04/15/hells-bells-margaret-perl-weekly-challenge-108.html</id>
    <published>2021-04-19T10:00:23Z</published>
    <updated>2021-04-19T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Partitions in Memories, A Triangular Palace</title>
    <link rel="alternate" href="https://colincrain.com/2021/04/16/partitions-in-memories-a-triangular-palace/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">For me Colin's blog is very useful to improve my vocabulary. I love how he presents his thought process. I wish I could do that one day.</div>
    </content>
    <id>https://colincrain.com/2021/04/16/partitions-in-memories-a-triangular-palace/</id>
    <published>2021-04-19T10:00:22Z</published>
    <updated>2021-04-19T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Locate the Bell with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/locate-bell.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne is unbeatable when it comes to the creativity of his blog titles. You will also find the content to be high quality.</div>
    </content>
    <id>https://raku-musings.com/locate-bell.html</id>
    <published>2021-04-19T10:00:21Z</published>
    <updated>2021-04-19T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Memory Addresses and Bell Numbers: The Weekly Challenge 108</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/18" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam took the opportunity to share solutions in Perl and Prolog. You don't want to miss the opportunity to dig deep.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/04/18</id>
    <published>2021-04-19T10:00:20Z</published>
    <updated>2021-04-19T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108: Bell Numbers</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-108-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail once again gives us a glimpse of various languages while dealing with the Bell Numbers task. Thank you Abigail.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-108-2.html</id>
    <published>2021-04-19T10:00:19Z</published>
    <updated>2021-04-19T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108: Locate Memory</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-108-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cool hack to get a memory location in Perl. Thanks Abigail for sharing with us.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-108-1.html</id>
    <published>2021-04-19T10:00:18Z</published>
    <updated>2021-04-19T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-108/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You are going to enjoy the discussion in Aaron's blog post. I simply love it.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-108/</id>
    <published>2021-04-19T10:00:17Z</published>
    <updated>2021-04-19T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 106</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-106" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-106</id>
    <published>2021-04-19T10:00:16Z</published>
    <updated>2021-04-19T10:00:16Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 108</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-107" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions the Team PWC dealing with the "Locate Memory" and "Bell Numbers" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-107</id>
    <published>2021-04-19T10:00:15Z</published>
    <updated>2021-04-19T10:00:15Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 109</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "Chowla Numbers" and "Four Squares Puzzle". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-109</id>
    <published>2021-04-19T10:00:14Z</published>
    <updated>2021-04-19T10:00:14Z</updated>
  </entry>
  <entry>
    <title>RakuAST Grant Report 2021-03</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant-rakuast-2021-03" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant-rakuast-2021-03</id>
    <published>2021-04-19T10:00:13Z</published>
    <updated>2021-04-19T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Key Perl Core developer quits</title>
    <link rel="alternate" href="https://www.theregister.com/2021/04/13/perl_dev_quits" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The Register published a news article about the recent news.</div>
    </content>
    <id>https://www.theregister.com/2021/04/13/perl_dev_quits</id>
    <published>2021-04-19T10:00:12Z</published>
    <updated>2021-04-19T10:00:12Z</updated>
  </entry>
  <entry>
    <title>A year of strife in Perl</title>
    <link rel="alternate" href="https://dev.to/leontimmermans/a-year-of-strife-16o9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Leon shares his truth in this blog post. Worth reading.</div>
    </content>
    <id>https://dev.to/leontimmermans/a-year-of-strife-16o9</id>
    <published>2021-04-19T10:00:11Z</published>
    <updated>2021-04-19T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Proposal for Perl Foundation Memberships</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2021/04/proposal-for-perl-foundation-memberships.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dean shared a proposal for TPF.</div>
    </content>
    <id>http://blogs.perl.org/users/dean/2021/04/proposal-for-perl-foundation-memberships.html</id>
    <published>2021-04-19T10:00:10Z</published>
    <updated>2021-04-19T10:00:10Z</updated>
  </entry>
  <entry>
    <title>On community hostility and the need for change on p5p</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259909.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil shared the behind-the-scenes story with the rest of the world. I am happy Neil is part of the team that is leading us forward.</div>
    </content>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259909.html</id>
    <published>2021-04-19T10:00:09Z</published>
    <updated>2021-04-19T10:00:09Z</updated>
  </entry>
  <entry>
    <title>#AdoptAPerlModule</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/adoptaperlmodule-2oh2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thibault shared the process of adopting a CPAN module.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/adoptaperlmodule-2oh2</id>
    <published>2021-04-19T10:00:08Z</published>
    <updated>2021-04-19T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Another trick for PERL5LIB</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/04/17/local-lib/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio shared a really useful trick dealing with PERL5LIB.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/04/17/local-lib/</id>
    <published>2021-04-19T10:00:07Z</published>
    <updated>2021-04-19T10:00:07Z</updated>
  </entry>
  <entry>
    <title>6 months of blogging the onion</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/6-months-of-blogging-the-onion-46i3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thibault presents his blog contributions from the past six months.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/6-months-of-blogging-the-onion-46i3</id>
    <published>2021-04-19T10:00:06Z</published>
    <updated>2021-04-19T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Avoid CPAN conflicts in your personal Perl modules</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/04/13/avoid-cpan-conflicts-in-your-personal-perl-modules/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark suggests how to deal with CPAN conflicts.</div>
    </content>
    <id>https://phoenixtrap.com/2021/04/13/avoid-cpan-conflicts-in-your-personal-perl-modules/</id>
    <published>2021-04-19T10:00:05Z</published>
    <updated>2021-04-19T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Google Season of Docs 2021 project proposals</title>
    <link rel="alternate" href="https://github.com/Perl/perl5/wiki/Google-Season-of-Docs-2021-project-proposals" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The Perl Foundation has proposed a project to help improve Perl documentation.</div>
    </content>
    <id>https://github.com/Perl/perl5/wiki/Google-Season-of-Docs-2021-project-proposals</id>
    <published>2021-04-19T10:00:04Z</published>
    <updated>2021-04-19T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Perl Steering Council</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259929.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Neil shared the latest update with regard to the recent activities.</div>
    </content>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259929.html</id>
    <published>2021-04-19T10:00:03Z</published>
    <updated>2021-04-19T10:00:03Z</updated>
  </entry>
  <entry>
    <title>PDL 2.037</title>
    <link rel="alternate" href="https://sourceforge.net/p/pdl/mailman/message/37263352/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please check out the detailed changes that the latest release will bring.</div>
    </content>
    <id>https://sourceforge.net/p/pdl/mailman/message/37263352/</id>
    <published>2021-04-19T10:00:02Z</published>
    <updated>2021-04-19T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Dancer2 0.301002 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/04/dancer2-0301002-released.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Jason shared the changes that the latest release of Dancer2 brought.</div>
    </content>
    <id>http://blogs.perl.org/users/jason_a_crome/2021/04/dancer2-0301002-released.html</id>
    <published>2021-04-19T10:00:01Z</published>
    <updated>2021-04-19T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#508 - Perl Steering Committee (PSC)</title>
    <link rel="alternate" href="http://perlweekly.com/archive/508.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>The start of last week was terrible for all Perl fans. We found out that Sawyer had decided to step down from the Perl Steering Council and all other affiliates. At this time, when Perl is making a nice comeback, this came as quite a shocker. We need him now, more than ever, to be actively involved and take us to a new heights. Having said that, I do respect his decision and wish him all the best. I hope to meet him once again personally at some Perl conference.</p>
<p>We shouldn't lose hope, though. Neil Bowers came up with <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259909.html">detailed plan</a> that gave me confidence that we will bounce back.</p>
<p>I have seen Sawyer regularly at London Perl Workshops but never got to speak to him. Then came a big moment of my life, I was giving my talk <a href="https://act.yapc.eu/lpw2017/talk/7209">Create tube map in 20 minutes using Map::Tube</a> at the London Perl Workshops in 2017. Sawyer was the man behind the camera recording the talk. At the end of the talk, Sawyer came up to me and suggested how I could automate some of the tasks I mentioned in the talk. It was a big fan moment for me. Everything is still so fresh in my mind.</p>
<p>Apologies for the delay as this is first edition for me during the month of Ramadan. I wish all the readers a very happy Ramadan. May ALLAH s.w.t. protect us all from the evils. Amen.</p></div>
    </content>
    <id>http://perlweekly.com/archive/508.html</id>
    <published>2021-04-19T10:00:00Z</published>
    <updated>2021-04-19T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): March 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_march_report"/>
  <id>tag:news.perlfoundation.org,2021-04-19:/post/maintaining_perl_5_march_report</id>
  <published>2021-04-19T09:50:16</published>
  <updated>2021-04-19T09:50:16</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible. Approximately 29 tickets were reviewed, and 3 patches were applied  1.63 #18519 manually rebase and some clean up, make PR #18647  0.17 #18523 recheck and apply to blead  2.33 #18557 review, find several similar tickets, work on  adding a warning, create #18643  
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his Maintaining Perl 5 grant. We thank the TPF sponsors to make this possible.
```
Approximately 29 tickets were reviewed, and 3 patches were
applied</p>

<p>[Hours]         [Activity]
  1.63          #18519 manually rebase and some clean up, make PR #18647
  0.17          #18523 recheck and apply to blead
  2.33          #18557 review, find several similar tickets, work on
                adding a warning, create #18643
  2.52          #18587 review discussion and changes, and review perlguts,
                comment
                #18587 review and comment
  0.22          #18589 review and apply to blead
  0.08          #18629 review and approve
  0.70          #18632 review makemeta, work on a fix
                #18632 more work on a fix, testing, make PR #18670
  1.12          #18634 review changes, review list discussion
  0.38          #18639 review and research, comment
  1.74          #18642 research and comment
                #18642 documentation fix, and look over magic handling for
                setsockopt and make PR 18660
                #18642 fix non-portable new test
  3.06          #18643 add each @{ anonarray } too, fixes, debugging
                #18643 add more tests, testing, force push
                #18643 update each() documentation too
  1.97          more autovivification, debugging, work out what’s wrong,
                tests and make PR #18650
                #18650 review, research and comment
  6.64          #18651 review ticket, work on a reproducer, debugging,
                research and comment
                #18651 debugging, try a fix and bounce off my_snprintf(),
                try a simpler solution, testing, add new test, debug test
                to ensure code works as expected, polish (need a bit more
                test debugging)
                #18651 more testing, code checks (some code handling q
                size flag or not)
                #18651 post PR with comment, comment on original ticket
  0.35          #18652 review and briefly comment
  0.35          #18656 comment
  0.68          #18658 recheck and apply to blead, perldelta update
  0.33          #18662 review and comment (request changes)
  0.45          #18663 request more information
                #18663 ask for more information again
  0.53          #18664 research and comment
  4.96          #18667 testing, reproduce, try bisect
                #18667 try bisect again on different hardware
                #18667 review commit found by bisect - it’s not the cause
                (fa353c3d2), debug some, the error feels like a stack-not-
                refcounted
                #18667 more debugging, trying to find code that might
                trigger stack-not-refcounted
  0.72          cage cleaning - review tickets, closing some, seeing which
                need work
  0.23          comment on Fix string leaks thread
  0.82          feature.[ch] on perl5-porters
  1.87          list catch up, also some cygwin testing for khw
  0.72          look at autovivication feature
  0.92          more list catch up
  0.58          review github notifications
  1.67          review list discussion
  1.02          review The current state of perl email and the following</p>

<h1>                discussion</h1>

<p>38.76 hours total
39.```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 3</title>
  <summary type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-19T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-3"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-3</id>
  <content type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Digital Ocean API using Perl</title>
  <summary type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></summary>
  <updated>2021-04-19T07:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/digital-ocean-api"/>  <id>https://perlmaven.com/digital-ocean-api</id>
  <content type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Part 3 video of pair programming a Perl web app</title>
    <link rel="alternate" href="https://dev.to/mjgardner/part-3-video-of-pair-programming-a-perl-web-app-24hg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This morning (or yesterday evening, depending on your time zone), Gabór Szabó and I embarked on another episode of Mojolicious-powered development on his course management application. <a href="https://perlmaven.com/course-management-app-in-mojolicious-3">Video evidence and links are here.</a></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/part-3-video-of-pair-programming-a-perl-web-app-24hg</id>
    <published>2021-04-19T04:27:30Z</published>
    <updated>2021-04-19T04:27:30Z</updated>
    <category term="perl"/>
    <category term="mojolicious"/>
    <category term="pairprogramming"/>
    <category term="webdev"/>
  </entry>
  <entry>
    <title>Dancer2 0.301002 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/04/dancer2-0301002-released.html"/>
    <id>tag:blogs.perl.org,2021:/users/jason_a_crome//712.10189</id>
    <published>2021-04-19T00:52:29Z</published>
    <updated>2021-04-19T00:53:10Z</updated>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>On behalf of the Dancer Core Team, I'd like to announce the availability
of Dancer2 0.301002. This release includes a number of enhancements and
documentation changes along with several bugfixes. The most notable
enhancement is a brand new command line interface, and I highly
encourage you to check it out.</p>

<p>This is feature-for-feature compatible with the previous CLI, but has a
few minor cosmetic differences from the prior version. Under the hood,
however, it is entirely different. We previously used <code>App::Cmd</code> as the
basis for our CLI, but recent changes to it bumped the minimum Perl
version to 5.20.  As we strive to maintain compatibility back to at
least Perl 5.10, this caused some problems for users stuck on older Perl
versions. We monkey-patched a fix in a previous version, but our
new-and-improved CLI based on <code>CLI::Osprey</code> is the path forward. Even
better, <code>CLI::Osprey</code> has no dependencies outside of those we already had
in the Dancer2 toolchain, so your favorite lightweight web framework
just got even lighter.</p>

<p>You can read the complete <a href="https://metacpan.org/changes/distribution/Dancer2">changelog</a> 
here. If you need help, please reach out on IRC (irc.perl.org#dancer) or our 
<a href="https://lists.perldancer.org">mailing list</a>.</p>

<p>Thank you to our users for being one of the best parts of the Perl
community. We appreciate your continued feedback and support. Please
reach out with any suggestions or needs you have.</p>

<p>Happy Dancing! <br />
CromeDome</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Memory Addresses and Bell Numbers: The Weekly Challenge 108</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/18#pwc108" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to declare a variable or constant and print it’s location in the memory.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Devel::Peek;
use Capture::Tiny q/capture_stderr/;
use constant A =&gt; "test";
my $a = 1;    
my $address;  
my $stderr = capture_stderr {
    Dump(A)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of constant A: $address\n"; 
$stderr = capture_stderr {
    Dump($a)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of \$a: $address\n";
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Address of constant A: 0xfd31ae90
Address of $a: 0xfdb2f770
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a somewhat unusual challenge for Perl. Sometimes these challenges allow for a certain amount of interpretation. For example, under the hood, the representation of Perl data in memory involves more complicated data structures. I think it is in the spirit of this challenge to demonstrate access to this, without necessarily implementing complete and fully generalized solution.&lt;/p&gt;
&lt;p&gt;Here I use &lt;code&gt;Devel::Peek&lt;/code&gt; in order to get a report on the underlying memory usage of the given variables. The &lt;code&gt;Dump&lt;/code&gt; function only prints a memory report to STDERR, so in order to obtain the information we seek &lt;code&gt;Capture::Tiny&lt;/code&gt; is used to encapsulate the STDERR output and save it to a variable. A regex is then used to pull out the memory address which is then printed.&lt;/p&gt;
&lt;p&gt;The memory address printed here is the &lt;em&gt;reference address&lt;/em&gt;. For additional details on Perl’s core see the perlguts documentation.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 10 Bell Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub bell_triangle{
    my($n) = @_; 
    my @bell_numbers = ([]);
    $bell_numbers[0]-&gt;[0] = 1;
    for (my $i=1; $i&lt;=$n; $i++) {
      $bell_numbers[$i]-&gt;[0] = $bell_numbers[$i-1]-&gt;[$i-1];
      for (my $j=1; $j&lt;=$i; $j++){  
          $bell_numbers[$i]-&gt;[$j] = $bell_numbers[$i-1]-&gt;[$j-1] + $bell_numbers[$i]-&gt;[$j-1];
       }
   }
   return $bell_numbers[$n]-&gt;[0];
}

MINA:{
    for my $b (0 .. 9){  
        print "B_$b: " . bell_triangle($b) . "\n";  
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
B_0: 1
B_1: 1
B_2: 2
B_3: 5
B_4: 15
B_5: 52
B_6: 203
B_7: 877
B_8: 4140
B_9: 21147
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is an interesting problem. At first glance one might be tempted to proceed and compute the partitions and then take the total number of them all. Instead, it turns out that there is a simpler closed form solution whereby we can compute the &lt;em&gt;Bell Triangle&lt;/em&gt; and then take the values on the leftmost diagonal to be the &lt;em&gt;Bell Numbers&lt;/em&gt; as required.&lt;/p&gt;
&lt;p&gt;For fun the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/18"&gt;Prolog solution&lt;/a&gt; does indeed compute the partitions instead of simply using the Bell Triangle!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/"&gt;Challenge 108&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlguts"&gt;perlguts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_number"&gt;Bell Numbers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_triangle"&gt;Bell Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc108</id>
    <published>2021-04-18T15:55:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 108: Locate Memory and Bell Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/04/perl-weekly-challenge-108-locate-memory-and-bell-numbers.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10179</id>
    <published>2021-04-13T22:41:58Z</published>
    <updated>2021-04-18T19:05:22Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 108 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (April 18, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Locate Memory</h2>

<p><em>Write a script to declare a variable or constant and print it’s location in the memory.</em></p>

<h3>Locate Memory in Raku</h3>

<p>In languages such as Perl and C, it is a fairly common task to take a reference or a pointer to a variable, and a reference or a pointer are essentially the memory addresses of such a variable (for some definition of memory address). In Raku, using the memory address of a variable is almost never necessary (except possibly for low-level debugging purpose). Actually, I originally wasn&#8217;t even completely sure I was going to find a way of doing that in Raku. However, the <a href="https://docs.raku.org/language/mop">Metaobject Protocol (MOP)</a> offers some <a href="https://docs.raku.org/language/mop#Metamethods">metamethods</a>, which are introspective macros that provide information about objects (including variables). One such metamethod is <a href="https://docs.raku.org/routine/WHERE">WHERE</a>, which returns an <code>Int</code> representing the memory address of the object. Once we know that, the task is very easy:</p>

<pre><code>my $i = 42;
say $i.WHERE;
</code></pre>

<p>This small script displays the following output:</p>

<pre><code>$ raku memory.raku
41688736
</code></pre>

<h3>Locate Memory in Perl</h3>

<p>As mentioned before, taking a reference to a variable is very common in Perl. And a reference is in effect a memory address. So the task is very easy in Perl:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $i = 42;
say \$i;
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl memory.pl
SCALAR(0x600079020)
</code></pre>

<p>If we want to get rid of irrelevant information and print out only the memory address, we can just extract the address, for example with a regular expression:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $i = 42;
my $ref = \$i;
my $addr = $1 if $ref =~ /\((0x\w+)/;
say $addr;
</code></pre>

<p>which prints only the memory address:</p>

<pre><code>$ perl memory.pl
0x600079020
</code></pre>

<h3>Locate Memory in Other Languages</h3>

<h4>Memory Address in the C Programming Language</h4>

<p>In C, <code>&amp;</code> is the &#8220;address-of&#8221; operator:</p>

<pre><code>#include &lt;stdio.h&gt;

int main () {
    int val = 42;
    printf("Memory location of val is: %p", &amp;val);
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
Memory location of val is: 0xffffcc1c
</code></pre>

<h4>Memory Address in C++</h4>

<p>Rather than copying almost verbatim the C program above, we&#8217;ll use the fact that C and C++ array names are actually pointers to memory locations:</p>

<pre><code>#include &lt;iostream&gt;
using namespace std;

int main() {
  int array[4] = {42, 43, 44, 45};
  cout &lt;&lt; "Memory address of the array is: " &lt;&lt; array;
  return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>Memory address of the array is: 0x7ffc3775ad50
</code></pre>

<h4>Memory Address in the D Programming Language</h4>

<p>D pointers are similar to C&#8217;s. So we can do basically the same as in C:</p>

<pre><code>import std.stdio;

void main () { 
   int val = 42; 
   writeln("Address of val is: ", &amp;val);
}
</code></pre>

<p>Output:</p>

<pre><code>Address of val is: 7FFD967574F8
</code></pre>

<h4>Memory Address in Python</h4>

<p>Python doesn&#8217;t really have pointers, but we can still retrieve the integer representation of the address of a Python object with the <code>id</code> built-in:</p>

<pre><code>i = 42
print("Address of variable i is: ", id(i))
</code></pre>

<p>Output:</p>

<pre><code>Address of variable i is:  9786208
</code></pre>

<h4>Memory Address in Go</h4>

<p>In Go, <code>&amp;</code> is the &#8220;address-of&#8221; operator:</p>

<pre><code>package main

import "fmt"

func main() {
    i := 42
    fmt.Println("Address of vaiable i is: ", &amp;i)
}
</code></pre>

<p>Output:</p>

<pre><code>Address of vaiable i is:  0xc000018050
</code></pre>

<h4>Memory Address in Julia</h4>

<p>In Julia, we’ll use an array. The <code>pointer</code> built-in function returns a pointer to the array:</p>

<pre><code>arr = [1, 2, 3, 7]
p_arr = pointer(arr)
println("Memory address of arr is: ", p_arr)
</code></pre>

<p>Output:</p>

<pre><code>Memory address of arr is: Ptr{Int64} @0x00007f70a29334d0
</code></pre>

<h4>Memory Address in Rust</h4>

<p>In Rust, <code>&amp;</code> is the &#8220;address-of&#8221; operator as in C:</p>

<pre><code>fn main() {
    let val: i32 = 42;
    println!("Memory locacion of variable val is: {:p}", &amp;val);
}
</code></pre>

<p>Output:</p>

<pre><code>Memory location of variable val is: 0x7fff4b32e2fc
</code></pre>

<h4>Memory Address in Pascal</h4>

<p>Last time I used Pascal was in the first year of my CS curriculum, back in 1990. As you might imagine, I don’t remember much of the syntax. It did not even remember that Pascal had pointers, except that, thinking about it, I remembered that we had to implement linked lists or trees, something that probably required some form of pointer. The big difference between now and then, of course, is that it wasn&#8217;t possible at the time to look up on the Internet. So you needed to buy books, as well as the software (a Turbo-Pascal compiler from Borland at the time). Pascal might not be the most modern language, but it has a clean and clear syntax, so that it turned out to be quite simple to write this little program. The only thing that seems to be missing from Niklaus Wirth&#8217;s brainchild programming language is a good harmless <code>goto</code> statement. <code>;-)</code>. But it&#8217;s OK, I did not need it.</p>

<pre><code>program memAddress;
var
   value: integer;
   intPtr: ^integer;
   result: ^word;

begin
   value := 42;
   intPtr := @value;
   result := addr(intPtr);
   writeln('Memory address of value is: ', result^);
end.
</code></pre>

<p>Output:</p>

<pre><code>Memory address of value is: 23008
</code></pre>

<p>Pascal lets you easily use pointers to access the data itself. But, if, for some reason, you want to work with the memory address itself, you need to store it in a word type variable (the <code>result</code> variable in the program above).</p>

<h2>Task 2: Bell Numbers</h2>

<p><em>Write a script to display top 10 Bell Numbers. Please refer to <a href="https://en.wikipedia.org/wiki/Bell_number">Wikipedia page</a> for more informations.</em></p>

<p><em>Example:</em></p>

<p><em>B<sub>0</sub>: 1 as you can only have one partition of zero element set</em>
<em>B<sub>1</sub>: 1 as you can only have one partition of one element set {a}.</em>
<em>B<sub>2</sub>: 2</em></p>

<p>{a}{b}
   {a,b}</p>

<p><em>B<sub>3</sub>: 5</em></p>

<p>{a}{b}{c}
   {a,b}{c}
   {a}{b,c}
   {a,c}{b}
   {a,b,c}</p>

<p><em>B<sub>4</sub>: 15</em></p>

<p>{a}{b}{c}{d}
   {a,b,c,d}
   {a,b}{c,d}
   {a,c}{b,d}
   {a,d}{b,c}
   {a,b}{c}{d}
   {a,c}{b}{d}
   {a,d}{b}{c}
   {b,c}{a}{d}
   {b,d}{a}{c}
   {c,d}{a}{b}
   {a}{b,c,d}
   {b}{a,c,d}
   {c}{a,b,d}
   {d}{a,b,c}</p>

<p>The Bell numbers count the possible partitions of a set. There are various ways to compute the Bell numbers, but one of the most common ones is to construct the Bell triangle, which may be displayed as follows:</p>

<pre><code>                    1
                 1     2
              2     3     5
           5     7    10    15
       15    20    27    37    52
    52    67    87   114   151   203
203   255   322   409   523   674   877
</code></pre>

<p>The Bell triangle may be constructed by placing the number 1 in its first position. After that placement, the leftmost value in each row of the triangle is filled by copying the rightmost value in the previous row. The remaining positions in each row are filled by a rule very similar to that for Pascal&#8217;s triangle: they are the sum of the two values to the left and upper left of the position.</p>

<p>Thus, after the initial placement of the number 1 in the top row, it is the last position in its row and is copied to the leftmost position in the next row. The third value in the triangle, 2, is the sum of the two previous values above-left and left of it. As the last value in its row, the 2 is copied into the third row, and the process continues in the same way.</p>

<p>The first (and last) item on each row provides the individual Bell numbers:</p>

<pre><code>1 1 2 5 15 52 203 877 ...
</code></pre>

<p>There may be faster ways to compute Bell numbers, but since we are requested to compute only the first 10 Bell numbers, this will be amply sufficient.</p>

<h3>Bell Numbers in Raku</h3>

<p>We just build the Bell triangle (the <code>tr</code> array of arrays) and extract the Bell numbers from it:</p>

<pre><code>constant \MAX = 9;
my @tr;
@tr[0][0] = 1;
for 1..MAX -&gt; $row {
    @tr[$row][0] = @tr[$row - 1][*-1];
    for 1..$row -&gt; $i {
        @tr[$row][$i] = @tr[$row][$i-1] + @tr[$row - 1][$i-1];
    }
}
say join " ", map { @tr[$_][0] }, 0..@tr.end;
</code></pre>

<p>This script displays the first 10 Bell numbers:</p>

<pre><code>$ raku bell.raku
1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h3>Bell Numbers in Perl</h3>

<p>As in Raku, we build the Bell triangle and extract the Bell numbers:</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MAX =&gt; 9;

my @tr;
$tr[0][0] = 1;
for my $row (1..MAX) {
    $tr[$row][0] = $tr[$row - 1][-1];
    for my $i (1..$row) {
        $tr[$row][$i] = $tr[$row][$i-1] + $tr[$row - 1][$i-1];
    }
}
say join " ", map { $tr[$_][0] } 0..$#tr;
</code></pre>

<p>And we obtain the same output as in Raku:</p>

<pre><code>$ perl bell.pl
1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h3>Bell Numbers in Other Languages</h3>

<h4>Bell numbers in Scala</h4>

<p>This is essentially the same algorithm using the Bell triangle in Scala. The slight difference is that the Bell triangle is mapped on a square matrix, with only the items of the triangular area actually defined.</p>

<pre><code>object bellNum extends App {
  val max = 10
  var tr = Array.ofDim[Int](max, max)
  tr(0)(0) = 1
  for (row &lt;- 1 until max) {
    tr(row)(0) = tr(row - 1)(row - 1)
    for (i &lt;- 1 until row + 1) {
      tr(row)(i) = tr(row)(i - 1) + tr(row - 1)(i - 1)
    }
  }
  val result = for (i &lt;- 0 until max) yield tr(i)(0)
  println (s"Bell numbers: ${result.mkString(" ")}")
}
</code></pre>

<p>Output:</p>

<pre><code>Bell numbers = 1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h4>Bell numbers in Python</h4>

<p>Same algorithm again. As in Scala, the Bell triangle is mapped on a square matrix, with only the items of the triangular area actually relevant (other positions are set to 0).</p>

<pre><code>max = 10
tr = [[0] * max for i in range(max)]
tr[0][0] = 1
for row in range(1, max):
    tr[row][0] = tr[row - 1][row - 1]
    for i in range(1, row+1):
        tr[row][i] = tr[row][i-1] + tr[row - 1][i-1];

print( [row[0] for row in tr] )
</code></pre>

<p>Output:</p>

<pre><code>[1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147]
</code></pre>

<h4>Bell numbers in Julia</h4>

<p>We also allocate a square matrix and populate it with 0’s. Only the items of the triangular area are relevant. A slight difference is that we populate a <code>result</code> array when we compute the first item of each row.</p>

<pre><code>max = 10
tr = zeros(Int32, max, max)
tr[1, 1] = 1
results = ones(Int32, max)
for row = 2:max
    res = tr[row - 1, row - 1]
    tr[row, 1] = res
    results[row] = res
    for i = 2:row
        tr[row, i] = tr[row, i-1] + tr[row - 1, i-1]
    end
end
for n in results print("$n ") end
</code></pre>

<p>Output:</p>

<pre><code>$ julia bell.jl
1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h4>Bell Numbers in C</h4>

<p>We also allocate a square matrix. Only the items of the triangular area are populated and relevant. We also populate a <code>result</code> array when we compute the first item of each row.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define MAX 10

int main() {
    int tr[MAX][MAX];
    tr[0][0] = 1;
    int results[MAX] = {1};
    for (int row = 1; row &lt; MAX; row++) {
        int res = tr[row - 1][row - 1];
        tr[row][0] = res;
        results[row] = res;
        for (int i = 1; i &lt;= row; i++) {
            tr[row][i] = tr[row][i-1] + tr[row - 1][i-1];
        }
    }
    printf("The ten first Bell numbers are: %i ", (results[0]));
    for (int i = 1; i &lt; MAX; i++) {
        printf("%d ", results[i]);
    }
    printf("\n");
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
The ten first Bell numbers are: 1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h4>Bell Numbers in Awk</h4>

<p>Just as in Julia and in C, we also allocate a square matrix. Only the items of the triangular area are populated and relevant. We also populate a <code>result</code> array when we compute the first item of each row.</p>

<pre><code>BEGIN {
    max = 10
    tr[0, 0] = 1
    results[0] = 1
    for (row = 1; row &lt; max; row++) {
        res = tr[row -1, row -1]
        tr[row, 0] = res
        results[row] = res
        for (i = 1; i &lt;= row; i++) {
            tr[row, i] = tr[row, i-1] + tr[row - 1, i-1]
        }
    }
    printf("First Bell numbers are: %d ", results[0])
    for (i = 1; i &lt; max; i++) printf ("%d ", results[i])
    printf("\n");
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f bell.awk
First Bell numbers are: 1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h4>Bell Numbers in Ruby</h4>

<p>I had some trouble getting the syntax right for declaring bi-dimensional arrays (and the error messages are less than awesome). But it eventually worked. Note that Ruby has this nice feature that you can use the <code>#{ ... }</code> to interpolate some code (e.g. the result of an expression) within a string. </p>

<pre><code>max = 9
tr = Array.new(max+1){Array.new(max+1)}
tr[0][0] = 1
results = [1]
for row in 1..max
    tr[row][0] = tr[row - 1][row -1]
    results &lt;&lt; tr[row][0]
    for i in 1..row
        tr[row][i] = tr[row][i-1] + tr[row - 1][i-1]
    end
end
puts "The #{max+1} first Bell numbers are: #{results.join(" ")}"
</code></pre>

<p>Output:</p>

<pre><code>The 10 first Bell numbers are: 1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<p>Note: I tried to initialize <code>max</code> to 15 in order to generate the first 16 Bell numbers and check the program&#8217;s correctness, and the output shows that Bell numbers are growing very rapidly (faster than a geometric progression): </p>

<pre><code>The 16 first Bell numbers are: 1 1 2 5 15 52 203 877 4140 21147 115975 678570 4213597 27644437 190899322 1382958545
</code></pre>

<h4>Bell Numbers in Pascal</h4>

<p>As mentioned above, I took up Pascal for the first time since 1990 for task # 1. So I thought I could implement tack # 2 also in Pascal and it turned out to be quite easy:</p>

<pre><code>program bell;
const
    max = 9;

var
    tr: array [0..max, 0..max] of integer;
    row, i : integer;

begin
    tr[0, 0] := 1;
    for row := 1 to max do
        begin
            tr[row, 0] := tr[row - 1, row -1];
            for i := 1 to row do  
                tr[row, i] := tr[row, i-1] + tr[row - 1, i-1]; 
        end;
    write('The first Bell numbers are: ');
    for row :=0 to max do
        write(tr[row, 0], ' ');
    writeln;    
end.
</code></pre>

<p>Output:</p>

<pre><code>The first Bell numbers are: 1 1 2 5 15 52 203 877 4140 21147
</code></pre>

<h4>Bell  Numbers in D</h4>

<p>This program is quite similar to the C program, with only a few syntax variations:</p>

<pre><code>import std.stdio;

void main() {
    enum MAX = 10;
    int tr[MAX][MAX];
    tr[0][0] = 1;
    int results[MAX] = 1;
    for (int row = 1; row &lt; MAX; row++) {
        tr[row][0] = tr[row - 1][row - 1];
        results[row] = tr[row][0];
        for (int i = 1; i &lt;= row; i++) {
            tr[row][i] = tr[row][i-1] + tr[row - 1][i-1];
        }
    }    
    writeln("The first 10 Bell numbers are: ", results);
}
</code></pre>

<p>Output:</p>

<pre><code>The first 10 Bell numbers are: [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147]
</code></pre>

<h4>Bell Numbers in Go</h4>

<p>Except for small syntactic differences, the program is again quite similar to the C or D implementations.</p>

<pre><code>package main

import "fmt"

func main() {
    const MAX int = 10
    var tr [MAX][MAX]int
    tr[0][0] = 1
    var results [MAX]int
    for row := 1; row &lt; MAX; row++ {
        tr[row][0] = tr[row-1][row-1]
        results[row] = tr[row][0]
        for i := 1; i &lt;= row; i++ {
            tr[row][i] = tr[row][i-1] + tr[row-1][i-1]
        }
    }
    fmt.Println("The first Bell numbers are: ", results)
}
</code></pre>

<p>Output:</p>

<pre><code>The first Bell numbers are:  [0 1 2 5 15 52 203 877 4140 21147]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 25, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 108</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-108-3di2" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/"&gt;Tasks&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-108/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-locate-memory"&gt;
  &lt;/a&gt;
  TASK #1 › Locate Memory
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Write a script to declare a variable or constant and print it’s[sic] location in the memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;One good thing about Perl (and most modern languages) is that you don't really need to worry about memory management. Perl will automatically reclaim memory when a variable is no longer used.&lt;/p&gt;

&lt;p&gt;For this task, I take the reference to the variable (for example &lt;code&gt;SCALAR(0x559184ba5890)&lt;/code&gt; and use regular expression to display the location (the bit between the parenthesis).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minified"&gt;
  &lt;/a&gt;
  Minified
&lt;/h2&gt;

&lt;p&gt;In 22 characters, this can be minified to the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» perl -E 'say\$a=~/(0x[0-9a-f]+)/'
0x555668d2a3f8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl 
0x555668d2a3f8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-bell-numbers"&gt;
  &lt;/a&gt;
  TASK #2 › Bell Numbers
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Write a script to display top 10 &lt;a href="https://en.wikipedia.org/wiki/Bell_number"&gt;Bell Numbers&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;In tackling this task, the &lt;a href="https://en.wikipedia.org/wiki/Bell_number#/media/File:BellNumberAnimated.gif"&gt;animated gif&lt;/a&gt; is very helpful. I use the &lt;code&gt;@bell&lt;/code&gt; array to reproduce this. I start by seeding the table with a single value, and then use the copy and add functions to generate the subsequent values. Finally I use a foreach loop to display the last number in each row to display the list of bell numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl
1
2
5
15
52
203
877
4140
21147
115975
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-108-3di2</id>
    <published>2021-04-18T14:47:53Z</published>
    <updated>2021-04-18T14:47:53Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="weeklychallenge"/>
  </entry>
  <entry>
  <title>Counter using Dancer2 and Redis in a Docker container</title>
  <summary type="html"><![CDATA[<p>
In this part of the <a href="https://code-maven.com/counter">counter examples</a> series we have <a href="/dancer">Perl Dancer</a> based application using <a href="https://redis.io/">Redis</a>
as the in-memory cache/database to store the counter.
<p>
The code runs in a Docker container and we have another container running the Redis server.
<p>
]]></summary>
  <updated>2021-04-18T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/counter-dancer2-redis-docker"/>  <id>https://perlmaven.com/counter-dancer2-redis-docker</id>
  <content type="html"><![CDATA[<p>
In this part of the <a href="https://code-maven.com/counter">counter examples</a> series we have <a href="/dancer">Perl Dancer</a> based application using <a href="https://redis.io/">Redis</a>
as the in-memory cache/database to store the counter.
<p>
The code runs in a Docker container and we have another container running the Redis server.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-18254205148067597</id>
    <published>2021-04-17T21:22:00.000+02:00</published>
    <updated>2021-04-17T21:22:07.987+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxvii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTROUT/App-opan-0.003005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::opan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A CPAN overlay for darkpan and pinning purposes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.003005&lt;/strong&gt; on 2021-04-13&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.003003 was 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.92' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.92&lt;/strong&gt; on 2021-04-15&lt;/li&gt;  &lt;li&gt;Votes: 166&lt;/li&gt;  &lt;li&gt;Previous version: 0.91 was 2 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.26&lt;/strong&gt; on 2021-04-12&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.25 was 5 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.62&lt;/strong&gt; on 2021-04-13&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 7.60 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.24&lt;/strong&gt; on 2021-04-12&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.23 was 3 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.17&lt;/strong&gt; on 2021-04-13&lt;/li&gt;  &lt;li&gt;Votes: 451&lt;/li&gt;  &lt;li&gt;Previous version: 9.16 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SSIMMS/PDF-API2-2.040' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Facilitates the creation and modification of PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.040&lt;/strong&gt; on 2021-04-13&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.039 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.037' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.037&lt;/strong&gt; on 2021-04-16&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.034 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0942' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0942&lt;/strong&gt; on 2021-04-15&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0937 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Statocles-0.098' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Statocles&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A static site generator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.098&lt;/strong&gt; on 2021-04-11&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.097 was 1 year, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/version-0.9929' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;version&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Structured version objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9929&lt;/strong&gt; on 2021-04-16&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.9928 was 6 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHLOMIF/XML-LibXML-2.0207' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XML::LibXML&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Interface to Gnome libxml2 xml parsing and DOM library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.0207&lt;/strong&gt; on 2021-04-17&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 2.0206 was 7 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/18254205148067597/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxvii-12-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/18254205148067597"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/18254205148067597"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxvii-12-great-cpan-modules.html" title="(cccxxxvii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5078818998954069487</id>
    <published>2021-04-17T21:18:00.001+02:00</published>
    <updated>2021-04-17T21:18:20.439+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxiii) metacpan weekly report - XS::Parse::Keyword</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 63&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword" target="_blank"&gt;XS::Parse::Keyword (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/17 19:17:49 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Virtualenv" target="_blank"&gt;App::Virtualenv&lt;/a&gt; - Perl virtual environment&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::ExtractSymbols" target="_blank"&gt;FFI::ExtractSymbols&lt;/a&gt; - Extract symbol names from a shared object or DLL&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Copy::Recursive::Reduced" target="_blank"&gt;File::Copy::Recursive::Reduced&lt;/a&gt; - Recursive copying of files and directories within Perl 5 toolchain&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::StarDict::Writer" target="_blank"&gt;Lingua::StarDict::Writer&lt;/a&gt; - A module that allows to create a StarDict dictionary&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2::XS" target="_blank"&gt;PDF::API2::XS&lt;/a&gt; - Optional PDF::API2 add-on using XS to speed up expensive operations&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prometheus::Tiny" target="_blank"&gt;Prometheus::Tiny&lt;/a&gt; - A tiny Prometheus client&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/See" target="_blank"&gt;See&lt;/a&gt; - Debug See&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TaskPipe" target="_blank"&gt;TaskPipe&lt;/a&gt; - A task management framework for building web scrapers and crawlers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Amuse::Compile" target="_blank"&gt;Text::Amuse::Compile&lt;/a&gt; - Compiler for Text::Amuse&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::LOLCAT" target="_blank"&gt;Acme::LOLCAT&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=150)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::ECDSA" target="_blank"&gt;Crypt::OpenSSL::ECDSA&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Control" target="_blank"&gt;Daemon::Control&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Deep::Encode" target="_blank"&gt;Deep::Encode&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Size" target="_blank"&gt;Devel::Size&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GlusterFS::GFAPI::FFI" target="_blank"&gt;GlusterFS::GFAPI::FFI&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::ProtocolBuffers::Dynamic" target="_blank"&gt;Google::ProtocolBuffers::Dynamic&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::TreeBuilder::XPath" target="_blank"&gt;HTML::TreeBuilder::XPath&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::SysV" target="_blank"&gt;IPC::SysV&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/jQuery::File::Upload" target="_blank"&gt;jQuery::File::Upload&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Tiny" target="_blank"&gt;JSON::Schema::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Validator" target="_blank"&gt;JSON::Validator&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::StopWords::0.10" target="_blank"&gt;Lingua::StopWords::0.10&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::UtilsBy" target="_blank"&gt;List::UtilsBy&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Toaster" target="_blank"&gt;Mail::Toaster&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Perl" target="_blank"&gt;Modern::Perl&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Server::Threaded" target="_blank"&gt;Mojo::Server::Threaded&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=451)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::PPI" target="_blank"&gt;Mojolicious::Plugin::PPI&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=318)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose::2.2100" target="_blank"&gt;Moose::2.2100&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Options" target="_blank"&gt;MooX::Options&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenAPI::Client" target="_blank"&gt;OpenAPI::Client&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenMP::Environment" target="_blank"&gt;OpenMP::Environment&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2" target="_blank"&gt;PDF::API2&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl::ldap" target="_blank"&gt;perl::ldap&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlsecret" target="_blank"&gt;perlsecret&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlude" target="_blank"&gt;perlude&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Readonly::Tiny" target="_blank"&gt;Readonly::Tiny&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=152)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::LeakTrace" target="_blank"&gt;Test::LeakTrace&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Memory::Cycle" target="_blank"&gt;Test::Memory::Cycle&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Output" target="_blank"&gt;Test::Output&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads" target="_blank"&gt;threads&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads::shared" target="_blank"&gt;threads::shared&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Query" target="_blank"&gt;Web::Query&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword" target="_blank"&gt;XS::Parse::Keyword&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5078818998954069487/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxiii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5078818998954069487"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5078818998954069487"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxiii-metacpan-weekly-report.html" title="(cdlxiii) metacpan weekly report - XS::Parse::Keyword"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4175364858140576955</id>
    <published>2021-04-17T21:06:00.005+02:00</published>
    <updated>2021-04-17T21:06:26.767+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-04-17 19:05:08 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67125513" target="_blank"&gt;Is it possible to have an 'or' or 'and' operator inside an 'eq' or 'ne' comparison in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67059885" target="_blank"&gt;reinitializing environment in shared library&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67079404" target="_blank"&gt;Modification of a read-only value attempted at ... line .... in a foreach loop&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67051271" target="_blank"&gt;FastCGI, Perl and Exit&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67069428" target="_blank"&gt;Automation on current tab with WWW::Mechanize::Chrome&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67073201" target="_blank"&gt;Execute python script and read its JSON output&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67094526" target="_blank"&gt;Perl replace multiple strings in a file&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67120916" target="_blank"&gt;Variable substitution in Perl with Perl special characters&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67116549" target="_blank"&gt;Can't find a valid termcap file&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67073926" target="_blank"&gt;How to mock a full module?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4175364858140576955/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4175364858140576955"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4175364858140576955"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxxxvi-stackoverflow-perl-report.html" title="(cdlxxxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Data visualization: Using amCharts in React.js with Mojo</title>
    <link rel="alternate" href="https://dev.to/raigaurav/data-visualization-using-amcharts-in-react-js-with-mojo-29mh" type="text/html"/>
    <content type="html">&lt;p&gt;In my previous &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;article&lt;/a&gt;, I talked about using &lt;a href="https://www.amcharts.com/"&gt;amCharts&lt;/a&gt; library with Perl &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt;. Today we will looking at creating the similar chart with &lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt; instead of plain JavaScript. I will keep it short since we already talked about it previously and will be reusing most of the code.&lt;/p&gt;

&lt;p&gt;There are 2 ways we can use the react.js -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Without JSX (using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag)&lt;/li&gt;
&lt;li&gt;With JSX&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;JSX stand for JavaScript XML. It allow you to easily write HTML in react.&lt;br&gt;
For now we will take the baby step and start without JSX.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-data-config"&gt;
  &lt;/a&gt;
  Creating the data config
&lt;/h1&gt;

&lt;p&gt;We will use the exact same example as in &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; article and try to create a multi line chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Number of automobiles sold per day by manufacturer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"domainAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"rangeAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Numbers of automobiles sold"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-18"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-the-mojo-app"&gt;
  &lt;/a&gt;
  Creating the mojo app
&lt;/h1&gt;

&lt;p&gt;The version I am using for this article is 9.14.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; mojo generate app MojoReactApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will generate a example application with proper directory structure for a MVC application and mentioned previously.&lt;/p&gt;

&lt;p&gt;Now go inside the dir and try to run this app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;morbo ./script/mojo_app
Web application available at http://127.0.0.1:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the browser and hit &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and you can see the welcome page.&lt;/p&gt;

&lt;p&gt;The rest of step is exact similar to mention in 'Creating the mojo app' section in &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; article. So I will not board you by repeating it again. We will directly see the react part.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#adding-reactjs-to-app"&gt;
  &lt;/a&gt;
  Adding React.js to app
&lt;/h1&gt;

&lt;p&gt;We will update the &lt;code&gt;default.html.ep&lt;/code&gt; to include the react.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        %= content 'head'
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            %= content
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react@17/umd/react.production.min.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

        %= content 'end'
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using the &lt;code&gt;production&lt;/code&gt; minified version. You can also use the &lt;code&gt;development&lt;/code&gt; version also for debugging purpose.&lt;br&gt;
I have added react.js on layout template as we will be using it all our web pages.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;multi_line_chart.html.ep&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;% layout 'default';
% title 'Charts';

% content_for 'head' =&amp;gt; begin
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/charts.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
% end

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

% content_for 'end' =&amp;gt; begin
    %= javascript "https://cdn.amcharts.com/lib/4/core.js"
    %= javascript "https://cdn.amcharts.com/lib/4/charts.js"
    %= javascript "https://cdn.amcharts.com/lib/4/themes/animated.js"

    %= javascript "js/multi_line_chart.js"

    %= javascript begin 
        var domContainer = document.getElementById("root");
        createMultiLineChart(domContainer, &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%==&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="na"&gt;chart_data&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;);
    % end
% end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are geeting the &lt;code&gt;$chart_data&lt;/code&gt; form &lt;code&gt;create_multi_line_chart&lt;/code&gt; in &lt;code&gt;lib\MojoReactApp\Controller\Charts.pm&lt;/code&gt; when the template get rendered.&lt;br&gt;
Lets update the &lt;code&gt;public/js/multi_line_chart.js&lt;/code&gt; to make it a React Component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// React without JSX&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MultiLineChart&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;createSeries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Create series&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LineSeries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dateX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//series.dataFields.categoryX = "Date";&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{name}: [bold]{valueY}[/]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//series.fillOpacity = 0.8;&lt;/span&gt;

        &lt;span class="c1"&gt;// For curvey lines&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tensionX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tensionY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Multiple bullet options - circle, triangle, rectangle etc.&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bullet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bullets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CircleBullet&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InterfaceColorSet&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;createChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Increase contrast by taking evey fouth color&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//chart.hiddenState.properties.opacity = 0;             // this creates initial fade-in&lt;/span&gt;

        &lt;span class="c1"&gt;// Add title to chart&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Create axes - for normal Axis&lt;/span&gt;
        &lt;span class="c1"&gt;// var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());&lt;/span&gt;
        &lt;span class="c1"&gt;// categoryAxis.dataFields.category = "Date";&lt;/span&gt;
        &lt;span class="c1"&gt;// categoryAxis.renderer.grid.template.location = 0;&lt;/span&gt;

        &lt;span class="c1"&gt;// Create axes - for Date Axis&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xAxes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateAxis&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="c1"&gt;//dateAxis.dataFields.category = "Date";&lt;/span&gt;
        &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minGridDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;domainAxis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;valueAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yAxes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ValueAxis&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="c1"&gt;//valueAxis.renderer.line.strokeOpacity = 1;&lt;/span&gt;
        &lt;span class="c1"&gt;//valueAxis.renderer.line.strokeWidth = 2;&lt;/span&gt;
        &lt;span class="nx"&gt;valueAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rangeAxis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//var single_data_item = this.state.chartData["data"][0];&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ford&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ford&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Renault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Renault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Add legend&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;legend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Legend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Add cursor&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;XYCursor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Add scrollbar&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollbarX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scrollbar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Add export menu&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exporting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExportMenu&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;am4themes_animated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;XYChart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createChart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createMultiLineChart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;domContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MultiLineChart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chartdiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chartData&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;domContainer&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are calling the &lt;code&gt;createMultiLineChart&lt;/code&gt; function from our template with parameters. The main point to know here is the state and lifecycle functions - &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;.&lt;br&gt;
Since there are already plenty of documentation available, I encourage you to look into it. One of the place to learn the concept is react official docs- &lt;a href="https://reactjs.org/docs/state-and-lifecycle.html"&gt;State and Lifecycle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look closely the rest of function definition is not much changes from the &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; used javascript. We just wrapped it in react.&lt;/p&gt;

&lt;p&gt;The final directory structure is -&lt;/p&gt;

&lt;p&gt;📦mojo_react_app&lt;br&gt;
 ┣ 📂etc&lt;br&gt;
 ┃ ┗ 📜input_data.json&lt;br&gt;
 ┣ 📂lib&lt;br&gt;
 ┃ ┣ 📂MojoReactApp&lt;br&gt;
 ┃ ┃ ┣ 📂Controller&lt;br&gt;
 ┃ ┃ ┃ ┗ 📜Charts.pm&lt;br&gt;
 ┃ ┃ ┗ 📂Model&lt;br&gt;
 ┃ ┃ ┃ ┗ 📜Data.pm&lt;br&gt;
 ┃ ┗ 📜MojoReactApp.pm&lt;br&gt;
 ┣ 📂public&lt;br&gt;
 ┃ ┣ 📂css&lt;br&gt;
 ┃ ┃ ┗ 📜charts.css&lt;br&gt;
 ┃ ┗ 📂js&lt;br&gt;
 ┃ ┃ ┗ 📜multi_line_chart.js&lt;br&gt;
 ┣ 📂script&lt;br&gt;
 ┃ ┗ 📜mojo_react_app&lt;br&gt;
 ┣ 📂t&lt;br&gt;
 ┃ ┗ 📜basic.t&lt;br&gt;
 ┣ 📂templates&lt;br&gt;
 ┃ ┣ 📂charts&lt;br&gt;
 ┃ ┃ ┗ 📜multi_line_chart.html.ep&lt;br&gt;
 ┃ ┗ 📂layouts&lt;br&gt;
 ┃ ┃ ┗ 📜default.html.ep&lt;br&gt;
 ┣ 📜mojo_react_app.yml&lt;br&gt;
 ┗ 📜README.md&lt;/p&gt;

&lt;p&gt;Save it and try to hit '&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;' again. From the user perspective side nothing has changed, you will see the same output as before.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiUFPu_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c37jpdr8v8b6wnh0zzmh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiUFPu_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c37jpdr8v8b6wnh0zzmh.PNG" alt="fi7og88vjcasg4ishx45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned before we will starting with baby step.&lt;br&gt;
The usage of the above mentioned way is very limited. You can use the react.js without jsx when your scope is small - where you have to make a website of few pages because here we are not using the full power of react.&lt;br&gt;
To use the react.js with full potential and unleash its power you have to use jsx. We will be looking in to it our next article.&lt;/p&gt;

&lt;p&gt;The above example is available at &lt;a href="https://github.com/rai-gaurav/mojo_react_app/tree/main/without_jsx"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Mojolicious logo taken from &lt;a href="https://github.com/mojolicious/mojo/blob/master/lib/Mojolicious/resources/public/mojo/logo.png"&gt;here&lt;/a&gt;&lt;br&gt;
React logo taken from &lt;a href="https://reactjs.org/"&gt;here&lt;/a&gt;&lt;br&gt;
amCharts logo taken form &lt;a href="https://www.amcharts.com/about/press-kit/amcharts_light_transparent/"&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gaurav Rai</name>
    </author>
    <id>https://dev.to/raigaurav/data-visualization-using-amcharts-in-react-js-with-mojo-29mh</id>
    <published>2021-04-17T17:37:18Z</published>
    <updated>2021-04-17T17:37:18Z</updated>
    <category term="perl"/>
    <category term="react"/>
    <category term="javascript"/>
    <category term="mojolicious"/>
  </entry>
  <entry>
    <title>6 months of blogging the onion</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/6-months-of-blogging-the-onion-46i3" type="text/html"/>
    <content type="html">&lt;p&gt;It has been around 6 months since I started to blog &lt;strong&gt;a lot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I followed the calls from &lt;a href="http://blogs.perl.org/users/gabor_szabo/2020/11/perl-on-devto.html"&gt;Gabor Szabo&lt;/a&gt;, &lt;a href="http://blogs.perl.org/users/joel_berger/2020/09/crosspost-nginxcertbot-recipe.html"&gt;Joel Berger&lt;/a&gt; and &lt;a href="https://perlhacks.com/2020/09/blogging-for-perl/"&gt;Dave Cross&lt;/a&gt; then on top I added &lt;a href="https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee"&gt;mine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My intention was clearly to setup a "Perl blogging scene" on devto and I feel like it works, see &lt;a href="https://dev.to/t/perl"&gt;#Perl&lt;/a&gt; and numbers from &lt;a href="https://perlweekly.com/stats.html"&gt;perlweekly&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBuORMoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qxe3goonfapyvd1folp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBuORMoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qxe3goonfapyvd1folp.png" alt="Blogs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The number of blog posts does not decreased on BPO (it was not the goal, I want &lt;em&gt;more&lt;/em&gt; posts, not less!) but the number of posts on &lt;a href="https://dev.to/"&gt;DevTo&lt;/a&gt; increased lot yeah ! 💃&lt;br&gt;
It reached a minimum steady number that make it a viable place to monitor for posts :) (and to make people join and contribute)&lt;/p&gt;

&lt;p&gt;It's a teamwork and I do not deserve much credits, but I did a pretty decent effort (more than 50 blog posts in 6 months):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--og4G7QRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4bwduxct8dxq1u2simz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--og4G7QRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4bwduxct8dxq1u2simz.png" alt="A lot of posts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Will I blog as much for the coming 6 months? Probably not, but I have to say that blogging is very rewarding since I have the feeling to show Perl in a nice way and I have a lot of interactions with great people (comments ❤️). &lt;/p&gt;

&lt;p&gt;It also helps me practice the "art of writing", help me to dig deeper in some areas and suddenly there are so much great blog posts from Perl figures all around!&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/mjgardner"&gt;@mjgardner&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/leontimmermans"&gt;@leontimmermans&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/kraih"&gt;@kraih&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/davorg"&gt;@davorg&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/ovid"&gt;@ovid&lt;/a&gt;
 &lt;a class="mentioned-user" href="https://dev.to/haarg"&gt;@haarg&lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/tobyink"&gt;@tobyink&lt;/a&gt;
&lt;br&gt;
(I wanted to put more names but there is a limit on how many people I can mention)&lt;/p&gt;

&lt;p&gt;These people are often more successful than me (I have to admit that they produce better blog posts 😃), &lt;strong&gt;Ovid&lt;/strong&gt; had an immediate huge success with Perl-but-generalist posts, that's crazy!  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hits"&gt;
  &lt;/a&gt;
  Hits
&lt;/h1&gt;

&lt;p&gt;Back to me, my biggest hit is not Perl related but about &lt;a href="https://dev.to/thibaultduponchelle/the-github-action-mining-attack-through-pull-request-2lmc"&gt;how a user triggered a crypto miner in my github action through a malicious pull request&lt;/a&gt;, if you're interested in github actions and security, check it out.&lt;/p&gt;

&lt;p&gt;My other hits (could we really talk about &lt;em&gt;hits&lt;/em&gt;? 😀) are around the topic of Perl and blogging: &lt;a href="https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee"&gt;A call to Perl bloggers to come on DevTo&lt;/a&gt; or &lt;a href="https://dev.to/thibaultduponchelle/to-help-perl-just-blog-9h4"&gt;To help Perl, just blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or around Perl reputation like &lt;a href="https://dev.to/thibaultduponchelle/a-perl-love-letter-20jj"&gt;A Perl love letter&lt;/a&gt; or &lt;a href="https://dev.to/thibaultduponchelle/the-hate-of-perl-in-memes-469e"&gt;The hate of Perl in memes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also made books reviews that I wrote also as a kind of "personal notes". The list of reviews is &lt;a href="https://dev.to/thibaultduponchelle/about-perl-books-review-1cj6"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/t/mojolicious"&gt;Mojolicious related&lt;/a&gt; posts are always well received! Like for instance this &lt;a href="https://dev.to/thibaultduponchelle/simple-live-chart-using-mojolicious-1iej"&gt;Simple live chart using mojolicious&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In between I wrote a lot of posts about toolchain/(Meta)CPAN:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/a-tour-of-perl-github-actions-44lp"&gt;A tour of perl github actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/browse-cpan-modules-per-namespaces-6p"&gt;Browse CPAN modules per namespace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/new-upload-to-cpan-github-action-4h8j"&gt;My GitHub action to upload to CPAN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/cpan-utils-4g4p"&gt;CPAN utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/adoptaperlmodule-2oh2"&gt;#AdoptAPerlModule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/svg-cpan-logo-gel"&gt;SVG CPAN logo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/install-cpan-modules-from-different-sources-with-cpanminus-5afi"&gt;Install CPAN modules from different sources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And do you read my &lt;a href="https://dev.to/thibaultduponchelle/my-tprcic-2020-review-1187"&gt;first post&lt;/a&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#failures"&gt;
  &lt;/a&gt;
  Failures
&lt;/h2&gt;

&lt;p&gt;To be honest there are also some failures that I consider even more interesting to link 😃&lt;/p&gt;

&lt;p&gt;My parallel between &lt;a href="https://dev.to/thibaultduponchelle/perl-programmers-are-mandalorians-l0b"&gt;Perl devs and Mandalorians&lt;/a&gt; was cool but a bit weird for readers 😃 (but I get some very kind likes)&lt;/p&gt;

&lt;p&gt;I am proud of my serie about JAPHs (what a "risky" topic) but the 2 first episodes &lt;a href="https://dev.to/thibaultduponchelle/japhs-autopsies-1-4939"&gt;JAPHs autopsies 1&lt;/a&gt; and &lt;a href="https://dev.to/thibaultduponchelle/japhs-autopsies-2-41jl"&gt;JAPHs autopsies 2&lt;/a&gt; were almost totally ignored.&lt;/p&gt;

&lt;p&gt;My posts in French never worked but I continued to post them anyway 😀 like &lt;a href="https://dev.to/thibaultduponchelle/book-review-perl-pour-l-impatient-4dfi"&gt;Book review "Perl pour l'impatient"&lt;/a&gt; or this terrible absolutely-no-like &lt;a href="https://dev.to/thibaultduponchelle/critique-de-livre-gimp-2-10-special-debutants-4gio"&gt;Critique de livre : Gimp 2.10 - Special debutants&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aside from Perl, I published some posts about docker (&lt;a href="https://dev.to/thibaultduponchelle/do-you-really-need-to-merge-docker-layers-1j1"&gt;1&lt;/a&gt;, &lt;a href="https://dev.to/thibaultduponchelle/remotely-connect-to-a-running-docker-12id"&gt;2&lt;/a&gt;) or security (&lt;a href="https://dev.to/thibaultduponchelle/billion-laughs-attack-examples-59i"&gt;Billions laughs attack&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(I'm kidding with "failures" but it is not, I'm not writing for likes)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As I said &lt;a href="https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee"&gt;in my call&lt;/a&gt;, I'm more a blog reader than a writer, so I'm very eager to read &lt;em&gt;your&lt;/em&gt; posts!&lt;/p&gt;

&lt;p&gt;So please dear reader, unleash the writer living in you! 😃&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/6-months-of-blogging-the-onion-46i3</id>
    <published>2021-04-16T12:46:34Z</published>
    <updated>2021-04-16T12:46:34Z</updated>
    <category term="perl"/>
    <category term="blogging"/>
    <category term="devto"/>
    <category term="discuss"/>
  </entry>
  <entry>
  <title>Detect recursion using state variables</title>
  <summary type="html"><![CDATA[<p>
As you might know <a href="/what-is-new-in-perl-5.10--say-defined-or-state">Perl version 5.10</a> has introduce a keyword called <span class="inline_code">state</span> that allows the creation of so-called <a href="/static-and-state-variables-in-perl">state</a>
variables. These are very similar to the static variables of C. You declare them insied a function. They are scoped to the function so you cannot reach them from the outside, but they never get destroyed and they are initialized only once.
<p>
<a href="http://horsfall.org/">Dave Horsfall</a> suggested to use this feature to detect unwanted recursion. Or calling the same function twice.
<p>
]]></summary>
  <updated>2021-04-16T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/detect-recursion-using-state"/>  <id>https://perlmaven.com/detect-recursion-using-state</id>
  <content type="html"><![CDATA[<p>
As you might know <a href="/what-is-new-in-perl-5.10--say-defined-or-state">Perl version 5.10</a> has introduce a keyword called <span class="inline_code">state</span> that allows the creation of so-called <a href="/static-and-state-variables-in-perl">state</a>
variables. These are very similar to the static variables of C. You declare them insied a function. They are scoped to the function so you cannot reach them from the outside, but they never get destroyed and they are initialized only once.
<p>
<a href="http://horsfall.org/">Dave Horsfall</a> suggested to use this feature to detect unwanted recursion. Or calling the same function twice.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Proposal for Perl Foundation Memberships</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2021/04/proposal-for-perl-foundation-memberships.html"/>
    <id>tag:blogs.perl.org,2021:/users/dean//558.10186</id>
    <published>2021-04-16T00:21:40Z</published>
    <updated>2021-04-16T00:52:22Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>The current Yet Another Society (The Perl Foundation) bylaws exclude the possibility of membership (see Article II <a href="https://www.perlfoundation.org/bylaws.html">https://www.perlfoundation.org/bylaws.html</a>). As reference, the Python Foundation has 5 membership classes with various rights and privileges associated (<a href="https://www.python.org/psf/bylaws/">https://www.python.org/psf/bylaws/</a>).</p>

<p>I believe this to be a wasted opportunity to increase engagement with stake holders in the Perl community, be they individuals, business or other organizations. And also to secure funding for vital Perl related activities arranged by the Perl Foundation.</p>

<p>Rather than a complicated class system,a good starting point would be a single membership option with an annual renewal and no specific benefits than a warm feeling. (Although, throwing in some exclusive swag and a membership card might not be a bad little bonus) </p>

<p>This could then evolve based on feedback via a membership committee.</p>

<p>I have sent a brief proposal to the YAS (TPF) board to this effect. I invite your support in comments below and/or by contacting board members voicing your support (see <a href="https://www.perlfoundation.org/committees.html">https://www.perlfoundation.org/committees.html</a>)</p>]]>
        
    </content>
</entry>
  <entry>
  <title>RakuAST Grant Report 2021-03</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-rakuast-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-04-15:/post/grant-rakuast-2021-03</id>
  <published>2021-04-15T16:52:55</published>
  <updated>2021-04-15T16:52:55</updated>
  <summary>
  <![CDATA[
     Jonathan Worthington has submitted his report for the RakuAST grant, which you can read below. In addition, you should check out his post about his work on the dispatcher. During March I implemented RakuAST nodes and updated the RakuAST-based compiler frontend to cover the following features: The `for` statement modifier, both in sink and non-sink form Specifying the return type or value in signatures using The `rx//` construct, so far 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthington has submitted his report for the RakuAST grant, which you can read below.</p>

<h2>In addition, you should check out his <a href="https://6guts.wordpress.com/2021/04/15/raku-multiple-dispatch-with-the-new-moarvm-dispatcher/">post about his work on the dispatcher</a>.</h2>

<p>During March I implemented RakuAST nodes and updated the RakuAST-based compiler frontend
to cover the following features:</p>

<ul>
<li>The <code>for</code> statement modifier, both in sink and non-sink form</li>
<li>Specifying the return type or value in signatures using --&gt;</li>
<li>The <code>rx//</code> construct, so far only without adverbs</li>
<li>The <code>m//</code> construct (immediate match against the topic)</li>
<li>Regexes in sink context matching against the topic</li>
</ul>

<p>I also made some further corrections to sink handling.</p>

<p>This work increased the number of fully passing spectests files using the RakuAST-based
compiler by 21, meaning it now entirely passes 246 spectest files.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>A year of strife in Perl</title>
    <link rel="alternate" href="https://dev.to/leontimmermans/a-year-of-strife-16o9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>Disclaimer: this is based on my own personal experience and perception. It's not The Truth, but it is my truth.</em></p>

<p>Last year, in early May, I got an email that got me worried. Really really worried. Not because of disagreement (though I did disagree with it), but because I knew this would be the most controversial thing I've seen in my more than decade on perl5-porters (the mailing list where core contributors discuss the development of perl). If I was wrong it was only because controversial turned out not to be quite strong enough a word for what would happen.</p>

<p>In it, a radical change was proposed. Radical in technology, but I'm not going to focus on that today. Radical in <a href="http://blogs.perl.org/users/leon_timmermans/2020/08/perl7-is-a-fork-of-values.html">values</a>, which really means it's radical for the community as well. It immediately divided both core contributors and much of the community into many factions with two main contingents.</p>

<p>What may seem like a simple technical disagreement was everything but. It was a fight for the soul of the language and the community that we love. While there were a lot of (mostly silent) people in the middle, in the discourse there were two sides and both (or at least enough people on both sides) were entirely convinced that the language and community that we all love only has a future if their side wins, and that the other will drive it to ruin.</p>

<p>If that doesn't sound like the prologue of a Greek tragedy, then I don't know what does.</p>

<p>It led to vigorous discussion; initially behind the scenes, and after the Conference-in-the-Cloud also on <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2020/06/msg257565.html">perl5-porters</a> and elsewhere. And quite frankly, this only stopped when people mostly stopped talking to each other after 2 weeks because there was little point to it.</p>

<p><em>The alarm bells really should have gone off here.</em></p>

<p>Soon enough the conflict moved to github. The unfortunate thing is that there were two groups of people: one with the will to make this happen but not quite the knowledge, and they started writing code. And one group that didn't want this to happen that did have the knowledge, who started reviewing said code. As you can probably guess, this soon became a mutually aggravating situation. After a few weeks of stepping on each other's toes, it became an open conflict.</p>

<p>The stakes were astronomical. I've heard several people say (in private) that they felt they would be needing to look for a different career and community over this. Combine this with a pandemic that has all of us stressed out, this led to a situation which I can only summarize as <em>both sides kept pushing until the other side would give up</em>. Given the sheer stubbornness of the average perl contributor this could only end when a sufficient number of people have burned out that neither side is capable of doing pretty much anything. It was a dynamic that was quite frankly burning me out too, to the point where several of my loved ones told me I should give up on this for sake of my own mental health (and I've heard similar stories from others).</p>

<p><strong>It's easy to assume that the things that happened were a few abusive assholes, but in my experience it was mostly a vicious cycle of previously reasonable and kind people lashing out at the people that were burning them out</strong>.</p>

<p>And that's where the alarm bells became cold-war style air sirens, the kind you can hear from miles away (sorry gen-z, you probably have no idea what I'm talking about).</p>

<p>This was the moment when we (or actually a bunch of community elders) started up a process to set up a new governance, because any decision making process that can generate this amount of strife is in need of repairs. Many people saw it as a diversion, but I don't agree. I think it was the only way to restart this conversation, and to get to a point (currently still in the future) where we can heal again.</p>

<p>But when hell broke loose, another thing was finally spoken out, though it was easily missed in between all the unpleasantness, is a simple truth that there is a third option that had been unthinkable a year ago: forking. This changes everything about the equation, literally everything.</p>

<p>Ultimately I believe that is what ended the discussion. It ended with the simple knowledge that the opposition was able and willing to fork if that's what it takes to prevent their worst-case scenario. In a way it was a Solomon's judgement for the steering committee. It ended the discussion not just because almost no one wants to fork the community, but because perl7 as announced last summer wouldn't be viable given a competitor that actually supports all of CPAN today and will continue to do so for the foreseeable future (just look at how long it took the python3 transition to take over, and that's without people wanting to keep supporting python2).</p>

<p>It is a pyrrhic victory. Pyrrhic not just because "we" haven't really won anything. Everyone lost because friendships were damaged (and perhaps lost) over this. We lost because a bunch of the people who matter for moving perl forward are currently effectively burned out (a few loudly so, but many in painful silence). We lost because people stopped contributing over this (most prominently but not limited to former project lead Sawyer).</p>

<h3>
  <a href="#so-what-can-we-learn-from-this-and-how-can-we-move-forward">
  </a>
  So what can we learn from this, and how can we move forward?
</h3>

<ul>
<li><p>We needed different governance, for a multitude of reasons. The old pumpking model had a tendency to burn people out, that was not sustainable (to be honest, Sawyer seemed burned out to me even before any of this happened, I can only imagine where he is now). Having more people in our executive, and having them there for bound terms (it's easier to stop when it takes effort to continue) will hopefully prevent that in the future. But also because it will lead to more diverse points of view. I suspect we'll be tweaking our governance for a while we gain more experience with it, but at least we have a foundation to do that with now.</p></li>
<li><p>Going through this during a pandemic really didn't help. I honestly believe this situation would not have gotten so badly out of hand if we could meet up face to face and talk to each other with a beverage in our hands; if we weren't all so tense because we haven't seen many of our loved ones in ages. We should remember that. Some discussions should be done in real life; sometimes the right response to a conflict is "Ooh, I get the impression this may be a Chartreuse-level discussion. Are you up for that?"</p></li>
<li><p>We should have more attention for our contributors' mental health; we need to remember the human on the other side of the conversation. It's perhaps cliche to say we should act with more empathy for each other, but frankly we collectively also acted with too little empathy for ourselves.</p></li>
<li><p>It seems that the proponents initially mistook a lot of the grievances as mere bike-shedding, when they actually were meaningful concerns that wouldn't go away by themselves. They didn't seem to realize that they were <a href="https://www.dictionary.com/browse/cross--the--rubicon">crossing the Rubicon</a> by actually moving forward with their plans without a consensus. We should not set ourselves up for failure like that, there is no way that could have ended well.</p></li>
<li><p>One thing we started doing much too late was mediation (Neil in particular has done great work there lately). We need people who can see all perspectives and bring them all back together. This is where we truly miss Larry more than anything, because bringing different needs together was his true talent. I don't think (or hope) we will be needing this often, but it's probably good to be prepared for such an eventuality.</p></li>
<li><p>We talk a lot about speaking with kindness, but we don't talk nearly enough about listening with kindness. Unlike speaking, listening kindly can't really be enforced, but the speaking without listening can easily become dysfunctional. Achieving this requires a cultural change. I don't know how to get us there, but I do know that it will require leadership.</p></li>
<li><p>The other thing that requires leadership is bringing us back together again. Perl is unique in the <a href="https://twitter.com/leon_timmermans/status/1376299679818874880">breadth</a> of its user base and that is both Perl's greatest strength as its greatest weakness. These conflicting interests were at the root of this conflict, and finding a path that serves all those interests (including the less loud ones) will be the main challenge for the steering committee.</p></li>
</ul>

</div>
    </content>
    <author>
      <name>Leon Timmermans</name>
    </author>
    <id>https://dev.to/leontimmermans/a-year-of-strife-16o9</id>
    <published>2021-04-14T19:59:48Z</published>
    <updated>2021-04-14T19:59:48Z</updated>
    <category term="perl"/>
    <category term="community"/>
  </entry>
  <entry>
    <title>Reimagining perl5-porters email list for 2021 and beyond</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2021/04/reimagining-perl5-porters-email-list-for-2021-and-beyond.html"/>
    <id>tag:blogs.perl.org,2021:/users/dean//558.10180</id>
    <published>2021-04-14T05:10:55Z</published>
    <updated>2021-04-14T07:12:47Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>Let's examine if in 2021 an email redistribution list, i.e. perl5-porters@ (p5p) is still the best model for collaborating on the perl language. This is a discussion so comment below!</p>

<p><strong>Advantages of an email list:</strong></p>

<ul>
	<li>Familiar interface, people can use their client of choice</li>
	<li>Low resources to run and maintain</li>
	<li>Easy to derive automation from as email is all well known protocols</li>
	<li>Everything is email</li>
</ul>

<p><strong>Disadvantages of an email list:</strong></p>

<ul>
	<li>Email addresses disclosed to all participants (can be changed)</li>
	<li>UI experience for participants inconsistent, may require client side configuration to "get right"</li>
	<li>Email "reply" text can lower the signal to noise ratio</li>
	<li>No topic categorization of posts, its all dumped in to your inbox</li>
	<li>Tricky to respond to missed emails</li>
	<li>Moderation is crude, every email is reviewed and approved, or everything is approved</li>
	<li>Once an email is relayed it can't be moderated further</li>
	<li>Encourages side channel correspondence</li>
	<li>Everything is email</li>
</ul>

<p>Given the long list of disadvantages we can guess why email lists (and newsgroups) have largely fallen by the wayside.</p>

<p>Self-hosted web forums largely replaced them, which themselves are now largely replaced by "social media" - be that Facebook pages/groups, reddit topics, stackoverflow etc.  Although we can learn much from how web forums are still used by android developers etc</p>

<p>My own personal experience is that my current employer has all but eliminated email, seriously. I receive 2-3 emails each day which are always automated notifications and often from external sources (health insurance notifications, stockholder notices etc)<br />
For so many of us, our professional lives are built on top of email - so imagining work without email is like imagining a new colour.</p>

<p>Because imagining new things is hard, let's start a discussion around requirements first and see where that leads us. </p>

<p>In terms of prior art- there is no shortage of "collaboration software" in 2021. From issue trackers that have bolted on kanban boards, to chat software on steroids - there are different approaches we can learn from. Perhaps we should use one of those instead? There are good arguments to be made around this.</p>

<p>For convenience, I will split my proposed requirements in to functional and non-functional, as well as aspirations which can help guide design choices.</p>

<p><strong>Functional requirements:</strong></p>

<ul>
	<li>People and automation can post content</li>
	<li>People and automation can post content that has various relationships with other content</li>
<ul><li>Reply being the most obvious relationship</li></ul>
        <li>Content can have relationships with external things (CVE notices, GH bugs, RT issues, etc)</li>
<li>Content can be tagged with arbitrary tags, allowing it to be classified</li>
<li>Content has various metadata</li>
<li>A system for voting</li>
<li>UI makes responding quick and easy</li>
<li>Personal contact details controlled by each participant</li>
<li>Moderation features</li>
<ul><li>Moderators able remove posts from view, still visible to moderators</li>
  <li>Features to correspond with moderation actions privately</li>
  <li>Content is never deleted, only hidden</li>
</ul>
<li>API for integration with other systems, github, irc bots, etc</li>
<li>Generalized notification system with user controls</li>
<ul><li>Send's emails</li>
 <li>Calls other API's as mentioned</li></ul>
<li>Uses CPAN users</li>
<ul><li>2fa</li></ul>
<li>Rate limiting & throttling</li>
<li>Anti-spam</li>
<li>Web based and cli tools, perhaps email driven interaction</li>
<li>Well Indexed and searchable</li>
</ul>
<strong>Non-Functional requirement:</strong>
<ul>
	<li>FOSS code</li>
	<li>Self hosted? </li>
	<li>Written in Perl</li>
	<li>Encrypted backups</li>
	<li>Modular, so to make contributing and administering simple</li>
</ul>

<p><strong>Aspirations:</strong></p>

<ul>
	<li>Help prioritize urgent matters like CVE's</li>
	<li>Reduce busy work for people</li>
<ul>
	<li>Automate and integrate with RT, GH etc.</li>
	<li>Reduce unnecessary reading</li>
	<li>High signal to noise ratio</li>
</ul>
	<li>Respect peoples privacy</li>
	<li>Promote respectful collaboration</li>
	<li>Promote data driven decision making</li>
	<li>Modern looking interface</li>
</ul>

<p>In my minds-eye I have something of a hybrid of Hacker News/Reddit and Asana/Monday dot com. It's hard to resist the temptation to make our own. I suspect that in just on hack-o-thon a minimum product that is already more effective than an email list could be built using on Mojolicious and GraphQL. </p>

<p><strong>How would we get this thing?</strong></p>

<p>I mentioned a hack-o-thon, this type of thing worked nicely enough for MetaCPAN.</p>

<p>TPF might reasonably call for some well known Perl consultancies for priced proposals then do fundraising activities to cover the costs. Such proposals could be milestone based or components assigned to different firms working in parallel.</p>

<p><strong>Now what?</strong></p>

<p>What are your thoughts? What could we add or clarify? Hopefully you have a radically different concept you can describe?</p>

<p><br />
<strong>Footnotes</strong></p>

<p>According to Neil Bowers, the purpose of p5p is "the development and maintenance of Perl"  (<a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259782.html">https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259782.html</a>) which is also covered in the "perlpolicy" document (<a href="https://perldoc.perl.org/perlpolicy">https://perldoc.perl.org/perlpolicy</a>)</p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-04-13T17:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Static Analysis and Self Describing Numbers (now with Threads!): The Weekly Challenge 107</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/11#pwc107" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to generate self-descriptive numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Thread; 
use boolean;
use constant SDN_COUNT =&gt; 3;
use constant THREAD_COUNT =&gt; 4;
use constant RANGE_SIZE =&gt; 10_000;

sub self_describing{
    my($i) = @_;
    my @digits = split(//, $i);
    for my $x (0 .. @digits - 1){
        my $count = 0;
        for my $j (0 .. @digits - 1){
            $count++ if($digits[$j] == $x);
            return false if($count &gt; $digits[$x]);
        }
        return false if($count != $digits[$x]);
    }
    return true;
}

sub self_describing_number{
    my($start, $end) = @_;  
    my @r = (); 
    for(my $i = $start; $i &lt; $end; $i++){
        push @r, [length($i), $i] if(self_describing($i));  
    }   
    return \@r;  
}

MAIN:{
    my @threads; 
    my $count = 0; 
    my $lower = 1; 
    my $upper = RANGE_SIZE; 
    do{
        for(0..(THREAD_COUNT - 1)){  
            my $t = Thread-&gt;new(\&amp;self_describing_number, ($lower, $upper));
            push @threads, $t;  
            $lower = $upper + 1;  
            $upper = $lower +  RANGE_SIZE;  
        }  
        foreach my $t (@threads){  
            my $sdns = $t-&gt;join();                 
            foreach my $sdn (@{$sdns}){ 
                print "Base " . $sdn-&gt;[0] . ":" .  $sdn-&gt;[1] . "\n" if $count &lt; SDN_COUNT; 
                $count++;  
            }  
        }   
        @threads = ();   
    } while($count &lt; SDN_COUNT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Base 4:1210
Base 4:2020 
Base 5:21200
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 1 this week is repeated from Challenge 043. In order to provide something fresh for the same problem I modified the previous code to be multi-threaded.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to list methods of a package/class.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub analyze{
    my($file) = @_;
    my @subs;
    my @uses; 
    my @subroutines;
    my $subs = `perlanalyst $file --analysis Sub`;
    $subs =~ s/$file://;
    @subs = split(/\n/, $subs);   
    my $uses = `perlanalyst $file --analysis Use`;
    $uses =~ s/$file://;
    @uses = split(/\n/, $uses);   
    for my $s (@subs){
        $s =~ s/\s+//;
        my @fields = split(/:/, $s); 
        push @subroutines, $fields[1] if(length($s) &gt; 0); 
    }
    push @subroutines, "BEGIN" if(@uses); 
    return @subroutines; 
}

MAIN:{
    my $FILE = $ARGV[0];
    my @subroutines = analyze($FILE);
    print join("\n", sort {$a cmp $b} @subroutines) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl perl/Calc.pm 
BEGIN
DESTROY
add
div
mul
new
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Getting a list of methods can &lt;em&gt;mostly&lt;/em&gt; be done via just some plain analysis of the code. Rather than re-invent the wheel I am using a module, Perl::Analysis::Static, to do that for me. This is a pretty neat tool but has been left in an alpha state. The most stable way to use it is via the command line instead of its incomplete API. In this code I call the &lt;code&gt;perlanalyst&lt;/code&gt; command and then parse the output.&lt;/p&gt;
&lt;p&gt;If given a &lt;code&gt;BEGIN&lt;/code&gt; block or if &lt;code&gt;use&lt;/code&gt;-ing a module Perl will execute a &lt;code&gt;BEGIN&lt;/code&gt; at compile time. &lt;em&gt;I would argue that this is out of scope for this challenge.&lt;/em&gt; However, as given in the problem statement we are expected to catch this it seems. I do this by inspecting the &lt;code&gt;perlanalyst&lt;/code&gt; output for &lt;code&gt;use&lt;/code&gt; lines. I could have done a few other things as well but decided not to do more with this since it seems like a funny requirement anyway!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-107/"&gt;Challenge 107&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;Challenge 043&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/release/GGOLDBACH/Perl-Analysis-Static-0.003-TRIAL/lib/Perl/Analysis/Static.pm"&gt;Perl::Analysis::Static&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc107</id>
    <published>2021-04-11T17:51:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-9050496775605220184</id>
    <published>2021-04-10T21:04:00.001+02:00</published>
    <updated>2021-04-10T21:04:50.134+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxvi) 6 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ZMUGHAL/Devel-IPerl-0.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::IPerl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl language kernel for Jupyter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.010&lt;/strong&gt; on 2021-04-05&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.009 was 3 years, 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.07&lt;/strong&gt; on 2021-04-06&lt;/li&gt;  &lt;li&gt;Votes: 167&lt;/li&gt;  &lt;li&gt;Previous version: 6.06 was 2 years, 10 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2021-04-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 1 month, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.16&lt;/strong&gt; on 2021-04-09&lt;/li&gt;  &lt;li&gt;Votes: 450&lt;/li&gt;  &lt;li&gt;Previous version: 9.14 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0937' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0937&lt;/strong&gt; on 2021-04-06&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0936 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARKOV/XML-Compile-SOAP-3.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XML::Compile::SOAP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SOAP version 1.1 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.27&lt;/strong&gt; on 2021-04-07&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 3.26 was 1 year, 4 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/9050496775605220184/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxvi-6-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9050496775605220184"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9050496775605220184"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cccxxxvi-6-cpan-great-modules-released.html" title="(cccxxxvi) 6 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2596567439737174563</id>
    <published>2021-04-10T21:02:00.000+02:00</published>
    <updated>2021-04-10T21:02:00.273+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/04/10 19:01:29 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::ProgressBar" target="_blank"&gt;CGI::ProgressBar&lt;/a&gt; - CGI.pm sub-class with a progress bar object&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crayon" target="_blank"&gt;Crayon&lt;/a&gt; - dedupe, minify and extend CSS&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::BlackBox" target="_blank"&gt;DBIx::BlackBox&lt;/a&gt; - Access database with stored procedures only&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::LsColor" target="_blank"&gt;File::LsColor&lt;/a&gt; - Colorize input filenames like ls(1)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph::D3" target="_blank"&gt;Graph::D3&lt;/a&gt; - Create ref/json to show node-edge graph with D3.js &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::CairoSVG" target="_blank"&gt;Image::CairoSVG&lt;/a&gt; - render SVG into a Cairo surface&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::BaseArith" target="_blank"&gt;Math::BaseArith&lt;/a&gt; - mixed-base number arithmetic (like APL encode/decode)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::DBIC" target="_blank"&gt;Mojolicious::Plugin::DBIC&lt;/a&gt; - Mojolicious â¥ DBIx::Class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenMP::Environment" target="_blank"&gt;OpenMP::Environment&lt;/a&gt; - Perl extension managing OpenMP variables in %ENV within a script.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Hooks::EndOfScope" target="_blank"&gt;B::Hooks::EndOfScope&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BerkeleyDB" target="_blank"&gt;BerkeleyDB&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Clone" target="_blank"&gt;Clone&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Plugin::Sysdeps" target="_blank"&gt;CPAN::Plugin::Sysdeps&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=123)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=250)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::IPerl" target="_blank"&gt;Devel::IPerl&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graphics::ColorNames::WWW" target="_blank"&gt;Graphics::ColorNames::WWW&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::DOM58" target="_blank"&gt;Mojo::DOM58&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=66)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=450)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=282)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=316)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::CIDR::Lite" target="_blank"&gt;Net::CIDR::Lite&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Graylog::Client" target="_blank"&gt;Net::Graylog::Client&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OrePAN" target="_blank"&gt;OrePAN&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Graphics::Gnuplot" target="_blank"&gt;PDL::Graphics::Gnuplot&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::Regexp" target="_blank"&gt;PPIx::Regexp&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPR" target="_blank"&gt;PPR&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Exporter::ForMethods::0.100053" target="_blank"&gt;Sub::Exporter::ForMethods::0.100053&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Meta" target="_blank"&gt;Sub::Meta&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Dancer2" target="_blank"&gt;Task::Dancer2&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown::Hoedown" target="_blank"&gt;Text::Markdown::Hoedown&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Moment" target="_blank"&gt;Time::Moment&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UUID::Tiny" target="_blank"&gt;UUID::Tiny&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2596567439737174563/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2596567439737174563"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2596567439737174563"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/04/cdlxii-metacpan-weekly-report.html" title="(cdlxii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Recursion and Repeated Decimals: The Weekly Challenge 106</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to display the maximum difference between two successive elements once the array is sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub max_difference_sorted{
    my(@sorted) = @_;
    return 0 if(@sorted == 1);
    my $x = $sorted[1] - $sorted[0];  
    my $y = max_difference_sorted(@sorted[1 .. @sorted - 1]);   
    return ($x &gt; $y)? $x: $y; 
}

sub max_difference{
    my (@numbers) = @_;
    return max_difference_sorted(
        sort { $a &lt;=&gt; $b } @numbers
    ); 
}

MAIN:{
    my (@N);
    @N = (2, 9, 3, 5);
    print max_difference(@N) . "\n"; 
    @N = (1, 3, 8, 2, 0); 
    print max_difference(@N) . "\n"; 
    @N = (5);
    print max_difference(@N) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
5
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I believe this code is straightforward enough! &lt;code&gt;max_difference&lt;/code&gt; performs the sort and &lt;code&gt;max_difference_sorted&lt;/code&gt; recursively finds the largest difference as required.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given numerator and denominator i.e. $N and $D. Write a script to convert the fraction into decimal string. If the fractional part is recurring then put it in parenthesis.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub nd2decimal{
    my($n, $d) = @_;
    my $max_repetend = $d - 1; 
    my $repeats = false; 
    my @factors = prime_factor($d);
    for my $factor (@factors){
        $repeats = true if($factor != 2 &amp;&amp; $factor != 5); 
    } 
    unless($repeats){ 
        return sprintf("%0.${max_repetend}g", $n / $d); 
    }
    else{
        my $x = divide($n, $d, [], []); 
        return $x; 
    }  
}

MAIN:{
    my($N, $D);
    ($N, $D) = (1, 3);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 2);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (5, 66);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 6);
    print nd2decimal($N, $D) . "\n";  
    ($N, $D) = (1, 8);
    print nd2decimal($N, $D) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
0.(3)
0.5
0.0(75)
0.1(6)
0.125
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Part 2 is a bit trickier than the first part. The approach here is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine if it is a repeated decimal by checking if &lt;code&gt;$d&lt;/code&gt; has prime factors other than 2 or 5&lt;/li&gt;
&lt;li&gt;if it is not a repeated decimal then this is quick work, divide and display the solution&lt;/li&gt;
&lt;li&gt;in the case of repeated decimals we essentially implement grade school long division in the &lt;code&gt;divide&lt;/code&gt; function and keep track of remainders. When a remainder is repeated we know that we have found the cycle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some interesting theoretical properties to repeat decimals but none are particularly helpful in actually computing them. One observation is that the length of the cycle must be smaller than the value of the denominator, whence the use of &lt;code&gt;$d&lt;/code&gt; in the main loop in the &lt;code&gt;divide&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I’m re-using the same &lt;code&gt;prime_factors&lt;/code&gt; function that I used in &lt;a href="https://adamcrussell.livejournal.com/14043.html"&gt;Challenge 041&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106/"&gt;Challenge 106&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/RepeatingDecimal.html"&gt;Repeating Decimal&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc106</id>
    <published>2021-04-04T17:04:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Two Dist::Zilla questions (META.yml; user config)</title>
    <link href="http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html"/>
    <id>http://domm.plix.at/perl/2021_04_two_dist_zilla_questions.html</id>
    <updated>2021-04-03T20:22:49+00:00</updated>
    <category term="perl"/>
    <summary>During the great RT will be shutdown craze earlier this year, I updated my Dist::Zilla setup to use a custom author bundle (Dist::Zilla::PluginBundle::Author::DOMM) so I can unify my Dist::Zilla ...</summary>
    <content type="html">&lt;p&gt;During the great &lt;strong&gt;RT will be shutdown&lt;/strong&gt; craze earlier this year, I updated my &lt;a href="http://dzil.org/"&gt;Dist::Zilla&lt;/a&gt; setup to use a custom author bundle (&lt;a href="https://metacpan.org/pod/Dist::Zilla::PluginBundle::Author::DOMM"&gt;Dist::Zilla::PluginBundle::Author::DOMM&lt;/a&gt;) so I can unify my Dist::Zilla config in one place (instead of copying &lt;code&gt;dist.ini&lt;/code&gt; from project to project, adding &amp;amp; modifying it from time to time, but never backporting improvements to older projects).&lt;/p&gt;

&lt;p&gt;Two of my decisions might have been not too smart (as indicated by &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/7"&gt;various&lt;/a&gt; &lt;a href="https://github.com/domm/Web-Request-Role-JWT/pull/1"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/10"&gt;requests&lt;/a&gt;), so I'm now looking for feedback...&lt;/p&gt;

&lt;h4&gt;&lt;span class="caps"&gt;META.&lt;/span&gt;yml vs &lt;span class="caps"&gt;META.&lt;/span&gt;json?&lt;/h4&gt;

&lt;p&gt;I stopped generating &lt;code&gt;META.yml&lt;/code&gt; files and now only generate &lt;code&gt;META.json&lt;/code&gt;. As far as I can tell, the contents of those two files is identical, so I think it should be enought to include the data once per dist (and I prefer &lt;span class="caps"&gt;JSON &lt;/span&gt;to &lt;span class="caps"&gt;YAML...&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Of course, &lt;span class="caps"&gt;CPANTS &lt;/span&gt;now &lt;a href="https://cpants.cpanauthors.org/release/DOMM/CtrlO-Crypt-XkcdPassword-1.009"&gt;complains&lt;/a&gt; about the missing &lt;code&gt;META.yml&lt;/code&gt;. (Which is of course ironic, because it was me who first implemented this &lt;span class="caps"&gt;CPANTS &lt;/span&gt;metric...)&lt;/p&gt;

&lt;p&gt;Maybe some other (old?) tools still need &lt;code&gt;META.yml&lt;/code&gt;? So should I again produce both &lt;code&gt;META.yml&lt;/code&gt; and &lt;code&gt;META.json&lt;/code&gt;?&lt;/p&gt;

&lt;h4&gt;Dist::Zilla user config?&lt;/h4&gt;

&lt;p&gt;During my deep dive into Dist::Zilla plungins and author bundles, I learned that Dist::Zilla looks for per-user configuration in &lt;code&gt;~/.dzil/config.ini&lt;/code&gt;. So I moved some general information (my name &amp;amp; email, default license) from all my &lt;code&gt;dist.ini&lt;/code&gt; files into this central config file.&lt;/p&gt;

&lt;p&gt;But it seems that this makes contributing to my dists even harder, as the &lt;code&gt;dist.ini&lt;/code&gt; file included in the dist now is invalid. Contributors will get a (helpful) error message when running &lt;code&gt;dzil build&lt;/code&gt;, but this is yet another hurdle for potential contributors. I've already got two pull requests to "fix" this.&lt;/p&gt;

&lt;p&gt;On the one hand I would prefer to keep the global config file, so I can easily change data. On the other hand I could just as well run a small command to change whatever value I might want to change on multiple files (using this hot new tool called "Perl", which makes mangling text in multiple files very easy) and thus make contributions easier.&lt;/p&gt;

&lt;p&gt;How are other &lt;span class="caps"&gt;CPAN &lt;/span&gt;authors handling this?&lt;/p&gt;

&lt;h4&gt;Or is it all Dist::Zilla's fault?&lt;/h4&gt;

&lt;p&gt;Some people (like brian d foy in this &lt;a href="https://www.reddit.com/r/perl/comments/mgw033/distar_a_cpan_distribution_author_tool/"&gt;thread&lt;/a&gt; about &lt;a href="https://github.com/p5sagit/Distar"&gt;Distar&lt;/a&gt;, a simpler authoring tool (but it works with ExtUtils::MakeMaker, which is a module I don't want to touch..)) argue that Dist::Zilla is too complex and make contributing very hard (because potential contributors now need to install a lot of Dist::Zilla plugins).&lt;/p&gt;

&lt;p&gt;But I actually like Dist::Zilla a lot (esp after finally coming up with a PluginBundle that fits my workflow). So I will keep using Dist::Zilla, but would really appreciate any feedback on my two questions (&lt;code&gt;META.yml&lt;/code&gt; and user config).&lt;/p&gt;

&lt;p&gt;You can either enter a comment below (if my homegrown comments system works..), or via &lt;a href="https://www.reddit.com/r/perl/comments/mjeej7/two_distzilla_questions_metayml_user_config/"&gt;reddit&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Update: user config vs github&lt;/h4&gt;

&lt;p&gt;After applying &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/pull/12"&gt;another patch&lt;/a&gt; supplied by &lt;a href="https://github.com/paultcochrane"&gt;Paul Cochrane&lt;/a&gt; that adds some github testing hooks, it seems to be clear that depending on the user config is a bad idea. Surprisingly, github will &lt;span class="caps"&gt;NOT &lt;/span&gt;set up a &lt;code&gt;~/.dzil/config.ini&lt;/code&gt; so it can "contribute" to my dist (by running it's test suite), see eg &lt;a href="https://github.com/domm/CtrlO-Crypt-XkcdPassword/runs/2260939037?check_suite_focus=true"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I guess I will stop using the global config file...&lt;/p&gt;</content>
    <category term="CPAN"/>
    <category term="Dist::Zilla"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CONTRA/Acme-Automatix-0.01"&gt;Acme-Automatix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;The great new Acme::Automatix!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Frameworks-0.001"&gt;Acme-CPANModules-Frameworks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;List of frameworks on CPAN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legodcsupervillains-0.02"&gt;Acme-MetaSyntactic-legodcsupervillains&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO DC Super Villains theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BINGOS/Acme-MetaSyntactic-legotheincredibles-0.02"&gt;Acme-MetaSyntactic-legotheincredibles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;LEGO The Incredibles theme&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MBARBON/Alien-uPB-Core-0.16"&gt;Alien-uPB-Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.16&lt;/td&gt;
&lt;td&gt;build and find uPB (a.k.a. Unleaded)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-PerlNitpick-0.01"&gt;App-PerlNitpick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;change-suggester about insignificant details.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-ThisDist-OnMetaCPAN-0.001"&gt;App-ThisDist-OnMetaCPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;this-dist-on-metacpan and some other CLIs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-dateseq-id-0.001"&gt;App-dateseq-id&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Generate a sequence of dates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WOLDRICH/App-knradio-0.044"&gt;App-knradio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.044&lt;/td&gt;
&lt;td&gt;interface for knradio, 92,2 FM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-depsort-0.001"&gt;App-lcpan-CmdBundle-depsort&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;More lcpan subcommands related to sorting by dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Asm-C-20210328"&gt;Asm-C&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210328&lt;/td&gt;
&lt;td&gt;Extract macro values and structure details from C programs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Boundary-0.01"&gt;Boundary&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;declare interface package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Complete-Finance-SE-IDX-0.001"&gt;Complete-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.001"&gt;Crypt-Passphrase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A module for managing passwords in a cryptographically agile manner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Argon2-0.001"&gt;Crypt-Passphrase-Argon2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;An Argon2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Bcrypt-0.001"&gt;Crypt-Passphrase-Bcrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A bcrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-PBKDF2-0.001"&gt;Crypt-Passphrase-PBKDF2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A PBKDF2 encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-Scrypt-0.001"&gt;Crypt-Passphrase-Scrypt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;A scrypt encoder for Crypt::Passphrase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Crypt-xxHash-0.01"&gt;Crypt-xxHash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;xxHash implementation for Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Decl-Tok-0.01"&gt;Decl-Tok&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Given a line iterator, returns a token stream that tokenizes the lines as first-pass Decl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GUCCHISK/Devel-PatchPerl-Plugin-Darwin-v0.1.0"&gt;Devel-PatchPerl-Plugin-Darwin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;patchperl plugin for darwin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/Devel-Util-0.80"&gt;Devel-Util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.80&lt;/td&gt;
&lt;td&gt;a collection of general-utility development subroutines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LNATION/Game-HeroesVsAliens-0.01"&gt;Game-HeroesVsAliens&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A tower defense game.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AJNN/Geo-LibProj-FFI-0.01"&gt;Geo-LibProj-FFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Foreign function interface to PROJ coordinate transformation software&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/Go-Tokenize-0.01"&gt;Go-Tokenize&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Tokenize Go&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JBERGER/GuacLite-0.01"&gt;GuacLite&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Toolkit for implementing a frontend server/client the Apache Guacamole system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RAJ/INI-Reader-Regexp-0.01"&gt;INI-Reader-Regexp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;INI Parser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-AIO-Promiser-0.01_01"&gt;IO-AIO-Promiser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01_01&lt;/td&gt;
&lt;td&gt;Promise interface around IO::AIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/IO-FDSaver-0.01"&gt;IO-FDSaver&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Save file descriptors from Perl&amp;acirc;&amp;#8364;&amp;#8482;s garbage collection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JCRISTY/Image-Magick-6.9.12"&gt;Image-Magick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v6.9.12&lt;/td&gt;
&lt;td&gt;ImageMagick PERL Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MICHAEL/Iterator-Records-Lines-0.01"&gt;Iterator-Records-Lines&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Provides simple record iterators for reading text line by line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DONGXU/JSON-JQ-0.01"&gt;JSON-JQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;jq (&lt;a href="https://stedolan.github.io/jq/" rel="nofollow"&gt;https://stedolan.github.io/jq/&lt;/a&gt;) library binding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ETHER/JSON-Schema-Tiny-0.001"&gt;JSON-Schema-Tiny&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Validate data against a schema, minimally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOBYINK/LINQ-0.000_001"&gt;LINQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.000_001&lt;/td&gt;
&lt;td&gt;an interpretation of Microsoft&amp;#039;s Language Integrated Query&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/Linux-Sys-CPU-Affinity-0.01"&gt;Linux-Sys-CPU-Affinity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl XS extension for setupping CPU affinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/List-GroupingPriorityQueue-0.01"&gt;List-GroupingPriorityQueue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;priority queue with grouping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CDN/List-Helpers-XS-0.01"&gt;List-Helpers-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl extension to provide some usefull functions with arrays&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TONKIN/Log-Any-Adapter-JSON-1.00"&gt;Log-Any-Adapter-JSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;One-line JSON logging of arbitrary structured data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Lyrics-Fetcher-LyricsOVH-0.01"&gt;Lyrics-Fetcher-LyricsOVH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Get song lyrics from api.lyrics.ovh.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TDRUGEON/MIME-DB-v1.46.0"&gt;MIME-DB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.46.0&lt;/td&gt;
&lt;td&gt;Media Type Database, a port of the mime-db JavaScript package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ZHMYLOVE/Math-LinearApprox-0.01"&gt;Math-LinearApprox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;fast linear approximation of 2D sequential points&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PerlTrove-0.001"&gt;Module-Features-PerlTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Perl trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-Features-PythonTrove-0.001"&gt;Module-Features-PythonTrove&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Put Python trove classifiers in your module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Module-FeaturesUtil-Check-0.001"&gt;Module-FeaturesUtil-Check&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Check feature set specification and feature declaration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-0.008"&gt;Mojolicious-Plugin-Export&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;td&gt;Export a Mojolicious website to static files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PREACTION/Mojolicious-Plugin-Export-Git-0.001"&gt;Mojolicious-Plugin-Export-Git&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Export a Mojolicious site to a Git repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OETIKER/Mojolicious-Plugin-GSSAPI-0.1.0"&gt;Mojolicious-Plugin-GSSAPI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Provide Kerberos authentication for incomming https requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ABELTJE/MooX-Params-CompiledValidators-0.01"&gt;MooX-Params-CompiledValidators&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A Moo::Role for using Params::ValidationCompiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JMATES/Music-RhythmSet-0.01"&gt;Music-RhythmSet&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;sets of rhythms and various generation functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRBRENAN/Nasm-X86-20210330"&gt;Nasm-X86&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210330&lt;/td&gt;
&lt;td&gt;Generate Nasm X86 code from Perl.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Maker-1.00"&gt;OPM-Maker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Module/App to build and test OPM packages for Znuny, OTOBO, ((OTRS)) Community edition.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLSRVDE/OPM-Validate-1.00"&gt;OPM-Validate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Validate .opm files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-EPPTCP-0.001"&gt;POE-Filter-EPPTCP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;EPP Frame parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/POE-Filter-SimpleXML-1.000"&gt;POE-Filter-SimpleXML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;Simple XML parsing for POE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DIONYS/Path-Tiny-Archive-Tar-0.001"&gt;Path-Tiny-Archive-Tar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Tar/untar add-on for file path utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/Paws-Credential-AssumeRoleWebIdentity-0.0.2"&gt;Paws-Credential-AssumeRoleWebIdentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.2&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Perinci-Sub-XCompletionBundle-Finance-SE-IDX-0.001"&gt;Perinci-Sub-XCompletionBundle-Finance-SE-IDX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Completion routines related to the Indonesian Stock Exchange&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Pinto-Remote-SelfContained-0.900"&gt;Pinto-Remote-SelfContained&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;interact with a remote Pinto repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RRA/Pod-Thread-2.00"&gt;Pod-Thread&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;Convert POD data to the HTML macro language thread&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-HelpDesk-0.01"&gt;RT-Extension-HelpDesk&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-HelpDesk Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BPS/RT-Extension-TerminalTheme-0.01"&gt;RT-Extension-TerminalTheme&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-TerminalTheme Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Idrac4-v0.1.0"&gt;Rex-Interface-Shell-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Interface-Shell-Ilo-v0.1.0"&gt;Rex-Interface-Shell-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Idrac4-v0.1.0"&gt;Rex-Shell-Interface-Idrac4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iDRAC 4.00.00.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ALIP/Rex-Shell-Interface-Ilo-v0.1.0"&gt;Rex-Shell-Interface-Ilo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Rex module to support iLO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/OVID/Search-Typesense-0.01"&gt;Search-Typesense&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl interface to Typesense search engine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MAT/SmallRegistry-EPP-0.001-TRIAL"&gt;SmallRegistry-EPP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;SmallRegistry EPP Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TOMK/Spreadsheet-Compare-0.10"&gt;Spreadsheet-Compare&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Module for comparing spreadsheet-like datasets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/KFLY/Sub-WrapInType-Attribute-0.01"&gt;Sub-WrapInType-Attribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;attribute for Sub::WrapInType&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Defer-0.04"&gt;Syntax-Keyword-Defer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;add defer block syntax to perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FELIPE/Sys-Binmode-0.01"&gt;Sys-Binmode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Fix Perl&amp;acirc;&amp;#8364;&amp;#8482;s system call character encoding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BIGPRESH/Task-Lyrics-Fetcher-0.01"&gt;Task-Lyrics-Fetcher&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;install all known-to-work Lyrics::Fetcher fetchers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Test2-Tools-Process-0.05"&gt;Test2-Tools-Process&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Unit tests for code that calls exit, exec, system or qx()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PETDANCE/Text-Sparkline-v0.1.0"&gt;Text-Sparkline&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Creates text-based sparklines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/Text-Table-Tiny-_ModuleFeatures-0.001"&gt;Text-Table-Tiny-_ModuleFeatures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Features declaration for Text::Table::Tiny&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ARC/Text-TokenStream-0.01"&gt;Text-TokenStream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;lexer to break text up into user-defined tokens&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BKB/WWW-LinkRot-0.01"&gt;WWW-LinkRot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;check web page link rot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PERLANCAR/WordList-ID-AnimalName-PERLANCAR-0.004"&gt;WordList-ID-AnimalName-PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;List of animals in Indonesian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PRAJITH/p5-Paws-Credential-Webidentity-0.0.1"&gt;p5-Paws-Credential-Webidentity&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;The AssumeRoleWebIdentity provider is used to obtain temporary credentials with an OIDC web identity token file. &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;79&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;43&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALIP"&gt;ALIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FELIPE"&gt;FELIPE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CDN"&gt;CDN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAT"&gt;MAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLSRVDE"&gt;PERLSRVDE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MICHAEL"&gt;MICHAEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARC"&gt;ARC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BKB"&gt;BKB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TDRUGEON"&gt;TDRUGEON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGPRESH"&gt;BIGPRESH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PREACTION"&gt;PREACTION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRAJITH"&gt;PRAJITH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DONGXU"&gt;DONGXU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONKIN"&gt;TONKIN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZHMYLOVE"&gt;ZHMYLOVE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJNN"&gt;AJNN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUGOD"&gt;GUGOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBERGER"&gt;JBERGER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OETIKER"&gt;OETIKER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GUCCHISK"&gt;GUCCHISK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PETDANCE"&gt;PETDANCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JCRISTY"&gt;JCRISTY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DIONYS"&gt;DIONYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOMK"&gt;TOMK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RAJ"&gt;RAJ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MBARBON"&gt;MBARBON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRA"&gt;RRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Automatix CONTRA 0.01 The great new Acme::Automatix! Acme-CPANModules-Frameworks PERLANCAR 0.001 List of frameworks on CPAN Acme-MetaSyntactic-legodcsupervillains BINGOS 0.02 LEGO DC Super Villains theme Acme-MetaSyntactic-legotheincredibles BINGOS 0.02 LEGO The Incredibles theme Alien-uPB-Core MBARBON 0.16 build and find uPB (a.k.a. Unleaded) App-PerlNitpick GUGOD 0.01 change-suggester about insignificant details. App-ThisDist-OnMetaCPAN PERLANCAR 0.001 this-dist-on-metacpan and … <a href="https://perlancar.wordpress.com/2021/04/01/list-of-new-cpan-distributions-mar-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1939</id>
    <published>2021-04-01T11:26:07Z</published>
    <updated>2021-04-01T11:26:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Interview: Trying to Catch Paul "LeoNerd" Evans</title>
    <link rel="alternate" href="https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.leonerd.org.uk/"&gt;Paul &amp;ldquo;LeoNerd&amp;rdquo; Evans&lt;/a&gt;&lt;/strong&gt; is a
&lt;a href="https://metacpan.org/author/PEVANS"&gt;CPAN author&lt;/a&gt;,
&lt;a href="https://leonerds-code.blogspot.com/"&gt;blogger&lt;/a&gt;,
and &lt;a href="https://github.com/leonerd"&gt;core Perl contributor&lt;/a&gt;. He introduced the
&lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;experimental &lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;
in Perl 5.32 and the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax in an upcoming version.&lt;/p&gt;

&lt;h2 id="tell-me-a-little-about-yourself-and-your-background-whatever-you-feel-comfortable-sharing"&gt;Tell me a little about yourself and your background; whatever you feel comfortable sharing.&lt;/h2&gt;

&lt;p&gt;Lets see—I&amp;rsquo;m going to do this in reverse chronological order.&lt;/p&gt;

&lt;p&gt;Currently I&amp;rsquo;m a self-employed contractor, splitting my time between Perl and other computery things, and electronics. Most of the jobs I&amp;rsquo;ve had before I did that were based on Perl, with the minor exception of a little Internet startup company called &amp;ldquo;Google&amp;rdquo;—
maybe you&amp;rsquo;ve heard of them? Sadly they don&amp;rsquo;t do much Perl there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-did-you-first-get-into-programming-perl-and-then-later-hacking-on-perl-s-core"&gt;How did you first get into programming Perl, and then later hacking on Perl&amp;rsquo;s core?&lt;/h2&gt;

&lt;p&gt;I dabbled in a little amount of it at university, during my final year. When I ought to have been studying type systems and other academic stuff I found it much more interesting to be hacking on bits of C and Perl instead, much to the dismay of my supervisors. My first post-study job happened to be in Perl and I&amp;rsquo;ve just stuck with it ever since.&lt;/p&gt;

&lt;p&gt;The core hacking all came as a slow progression from writing Perl code, to writing modules, to the inevitable having to write bits of &lt;a href="https://perldoc.perl.org/perlxs"&gt;XS code&lt;/a&gt; for some of those modules. The deeper you dive into that area the more you find you have to understand how the internals of the interpreter work. The largest amount of time I spent on that was probably while making the &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; module—that has to have quite a tight in-depth integration with the interpreter core, in order to successfully suspend and resume running functions, which is the basis of how the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax all works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="you-first-uploaded-the-syntax-keyword-try-module-to-cpan-in-2016-and-at-the-time-there-were-and-are-still-a-number-of-other-modules-with-similar-functionality-you-compared-their-differences-in-the-syntax-keyword-try-documentation-but-were-there-any-particular-issues-that-inspired-you-to-contribute-another-module"&gt;You first uploaded the Syntax::Keyword::Try module to CPAN in 2016, and at the time there were (and are still) a number of other modules with similar functionality. You compared their differences in the Syntax::Keyword::Try documentation, but were there any particular issues that inspired you to contribute another module?&lt;/h2&gt;

&lt;p&gt;Two reasons. The first reason I wrote it just for myself, was a learning exercise to see if I could understand and use this new-fangled &amp;ldquo;&lt;a href="https://perldoc.perl.org/perlapi#wrap_keyword_plugin"&gt;custom keyword&lt;/a&gt;&amp;rdquo; mechanism that was recently added to Perl. Once I had a proof-of-concept working, it didn&amp;rsquo;t take me long to work out how to write it &amp;ldquo;correctly&amp;rdquo;—in the sense that the body of the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks were true blocks, and not closures-in-disguise like all of the pure Perl and even all of the custom syntax modules at the time were all doing. This meant it had a much ligher calling overhead, doesn&amp;rsquo;t interact with &lt;code&gt;@_&lt;/code&gt;, plays nicer with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt;, and all sorts of other advantages. From there it didn&amp;rsquo;t take me too long before I had something that I felt had real technical advantages than anything else that came before, so I tried to encourage its use. &lt;a href="irc://irc.freenode.org/perl"&gt;Freenode&amp;rsquo;s #perl channel&lt;/a&gt; in particular were very instrumental in helping that effort, adopting it in their recommendations to new users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="recently-you-ve-spearheaded-adding-native-try-catch-syntax-to-native-perl-and-released-the-feature-compat-try-module-to-offer-the-same-syntax-for-earlier-versions-currently-the-former-is-enabled-by-a-feature-guard-do-you-anticipate-a-time-when-this-will-no-longer-be-the-case-would-that-cause-issues-with-code-that-uses-other-try-catch-syntax-modules"&gt;Recently you&amp;rsquo;ve spearheaded adding native try/catch syntax to native Perl, and released the Feature::Compat::Try module to offer the same syntax for earlier versions. Currently the former is enabled by a feature guard; do you anticipate a time when this will no longer be the case? Would that cause issues with code that uses other try/catch syntax modules?&lt;/h2&gt;

&lt;p&gt;I think it will be quite a while yet before we can see a Perl that would enable it &lt;em&gt;by default&lt;/em&gt;, but I hope very soon it will make its way into the numbered version bundles. That is, I hope that simply&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.36&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be enough to enable the &lt;code&gt;try&lt;/code&gt; syntax, and if and when such a time comes that we decide to bump the major version to 7, that will continue to hold—merely saying&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v7;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be sufficient to get that—along with all the other fancy fun things I hope to see by that time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-do-you-envision-syntax-keyword-try-s-role-going-forward-will-it-be-a-testbed-for-future-native-perl-exception-features"&gt;How do you envision Syntax::Keyword::Try&amp;rsquo;s role going forward? Will it be a testbed for future native Perl exception features?&lt;/h2&gt;

&lt;p&gt;It already is just that. There are more features in Syntax::Keyword::Try than the &amp;ldquo;minimal viable product&amp;rdquo; part that I ported to core in &lt;a href="https://github.com/Perl/perl5/releases/tag/v5.33.7"&gt;5.33&lt;/a&gt;. Two main things come to mind—the typed exception dispatch, and the &lt;code&gt;finally&lt;/code&gt; blocks. I&amp;rsquo;ve lately been looking at some &lt;code&gt;defer&lt;/code&gt; syntax for a more general-purpose version of &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question of how to handle typed dispatch is a more general one, which needs addressing in a wider language context—perhaps including considerations of signatures, &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt; syntax, variable or object slot type assertions, and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="what-s-next-for-you-aside-from-exceptions-in-perl-i-ve-been-reading-about-the-work-you-ve-been-doing-with-curtis-ovid-poe-on-and-your-object-pad-module-would-you-like-to-speak-on-that"&gt;What&amp;rsquo;s next for you aside from exceptions in Perl? I&amp;rsquo;ve been reading about the work you&amp;rsquo;ve been doing with Curtis &amp;ldquo;Ovid&amp;rdquo; Poe on and your Object::Pad module—would you like to speak on that?&lt;/h2&gt;

&lt;p&gt;Yes, object systems seem to be of interest currently—so part of my thoughts are about &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt;. But I&amp;rsquo;m also working on a number of other things. &lt;code&gt;defer&lt;/code&gt; I already mentioned above. Additionally I have some thoughts in the direction of &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;, and a few other bits and pieces. These would mostly be done as CPAN modules at first to experiment with the ideas. I mentioned a lot of them in my recent &lt;a href="https://fosdem.org/2021/schedule/event/perl_in_2025/"&gt;&amp;ldquo;Perl in 2025&amp;rdquo; talk at FOSDEM&lt;/a&gt;.&lt;/p&gt;
</content>
    <id>https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/</id>
    <published>2021-03-30T01:24:37Z</published>
    <updated>2021-03-30T01:24:37Z</updated>
  </entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/28#pwc105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The examples used here are from the weekly challenge problem statement and demonstrate the working solution.</em></p>
<h2 id="part-1">Part 1</h2>
<p><em>You are given positive numbers $N and $k. Write a script to find out the $Nth root of $k</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
sub nth_root{
    my($n, $k) = @_;
    my $x_i = int(rand(10) + 1); 
    my $r;
    for my $i (0 .. 100){
        $x_i = (1 / $n) * (($n - 1) * $x_i + ($k / $x_i ** ($n - 1)));  
    } 
    return $x_i;  
}

MAIN:{
    my($N, $k);
    $N = 5;
    $k = 248832;
    print nth_root($N, $k) . "\n";
    $N = 5;
    $k = 34;
    print sprintf("%0.2f", nth_root($N, $k)) . "\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
12
2.02
</code></pre>
<h3 id="notes">Notes</h3>
<p>One of my neatest things one can learn in calculus class, I would argue, is Newton’s method for computing square roots. One can read more on this elsewhere but this works by using a recurrence relationship, defined using directives, to compute the zero of a function. If the function is <code>x^n - a</code>, the zero we are computing is the nth root of a.</p>
<p>To start the process any <code>x_0</code> may be chosen. Here we pick an integer from 1 to 10 at random.</p>
<p>You can compute this for as many iterations as you’d like, of course, but here even 100 iterations is much more than enough to properly converge.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given a $name. Write a script to display the lyrics to the Shirley Ellis song The Name Game.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;

sub name_game{
    my($name) = @_;
    my($b, $f, $m); 
    my $first_letter = lc(substr($name, 0, 1));
    my $irregular_v = $first_letter =~ tr/aeiou//d;
    my $irregular_bfm = $first_letter =~ tr/bfm//d;
    unless($irregular_v || $irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
    }   
    elsif($irregular_v){
        $b = "b" . lc($name);
        $f = "f" . lc($name); 
        $m = "m" . lc($name); 
    }
    elsif($irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
        $b = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "b"; 
        $f = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "f"; 
        $m = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "m"; 
    }  
    format NAME_GAME = 
        @*, @*, bo-@* 
        $name, $name, $b 
        Banana-fana fo-@* 
        $f 
        Fee-fi-mo-@*
        $m
        @*!
        $name
.
    
    select(STDOUT);
    $~ = "NAME_GAME";
    write();  
}


MAIN:{
    my($name);
    $name = "Katie";  
    name_game($name); 
    print "\n"; 
    $name = "Adam";  
    name_game($name); 
    print "\n"; 
    $name = "Mary";  
    name_game($name); 
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
        Katie, Katie, bo-batie
        Banana-fana fo-fatie
        Fee-fi-mo-matie
        Katie!

        Adam, Adam, bo-badam
        Banana-fana fo-fadam
        Fee-fi-mo-madam
        Adam!

        Mary, Mary, bo-bary
        Banana-fana fo-fary
        Fee-fi-mo-ary
        Mary!
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My first comment is that I am a terrible singer and have never been able to reliably remember songs with rules like this at all, at any time of my life! Practically speaking that means I may have had to do more research on this part than one might expect. I did find an excellent reference (listed below) which detailed the rules for each case very clearly.</p>
<p>Perhaps the trickiest case in the one in which the name starts with a b, f, or m. For these you need to adjust the one specific <em>rewrite rule</em> which uses that letter. In the example above we see that Mary requires special handling and becomes <em>Fee-fi-mo-ary</em>.</p>
<p>To print the verses out I use a <a href="https://perldoc.perl.org/perlform">Perl Format</a>. Formats are not the most commonly used feature of Perl these days but still have some nice uses such as here where we want to define a simple template for plain text output. Formats can even be used to write to files, but here we just print to the console.</p>
<p>One Format trick which I have not used before is the use of a variable width field. Much of the documentation for Formats has to do with fixed width fields which can be centered, padded left, padded right, involve multiple lines, and so forth. A common case which is not typically well explained is one we need here. Names are of different lengths and may be followed by a comma or an exclamation point. Padding right adds unwanted space before the “,” or “!”. Padding left adds unwanted space before the name. Centering does both! The trick is to use <code>@*</code> for the field specifier in the Format definition. This will allow the value to be substituted in without any padding.</p>
<h2 id="references">References</h2>
<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Challenge 105</a></p>
<p><a href="https://www.planetmath.org/NthRootByNewtonsMethod">nth root by Newton’s method</a></p>
<p><a href="https://thenamegame-generator.com/the-name-game-rules.html">Name Game Rules</a></p>
<p><a href="https://perldoc.perl.org/perlform">Perl Formats</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc105</id>
    <published>2021-03-28T11:28:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
