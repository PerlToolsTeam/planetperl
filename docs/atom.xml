<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-12-02T12:56:56Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>A call to Perl bloggers to come on dev.to</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#some-history" class="anchor"&gt;
  &lt;/a&gt;
  Some history
&lt;/h2&gt;

&lt;p&gt;Perl has its own platform for blogging with Perl specifics posts only. It is maybe a particularity of Perl community, even if I'm not sure about that. &lt;/p&gt;

&lt;p&gt;From what I know, between 2001 and 2010, Perl developers were initially blogging on &lt;a href="https://use-perl.github.io/"&gt;use.perl.org&lt;/a&gt; that was decommissioned in 2010.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oR-A7TON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bi4x42r6jth3jynfsy38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oR-A7TON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bi4x42r6jth3jynfsy38.png" alt="use.perl.org"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then they moved (partially) to &lt;a href="http://blogs.perl.org/"&gt;blogs.perl.org&lt;/a&gt; or as some people call it "BPO".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcA58FfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1w6qc7veih2083muj74m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcA58FfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1w6qc7veih2083muj74m.png" alt="blogs.perl.org"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like the principle to have a dedicated place where you come to check Perl related posts... but unfortunately there seems to be long standing problems with &lt;a href="http://blogs.perl.org/"&gt;blogs.perl.org&lt;/a&gt; 😕&lt;/p&gt;

&lt;p&gt;People report technical problems :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problems with authentication and/or reset password&lt;/li&gt;
&lt;li&gt;Problems with posting comments &lt;/li&gt;
&lt;li&gt;Design outdated&lt;/li&gt;
&lt;li&gt;User experience when writing posts&lt;/li&gt;
&lt;li&gt;No easy upgrade path since it is based on an old derived/forked version of &lt;a href="https://www.movabletype.org/"&gt;MovableType&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bpo-revamping-trials" class="anchor"&gt;
  &lt;/a&gt;
  BPO revamping trials
&lt;/h2&gt;

&lt;p&gt;There were already TPF 2 grants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2015 - &lt;a href="https://news.perlfoundation.org/post/grant_proposal_revitalize_blog_1"&gt;Revitalize blogs.perl.org&lt;/a&gt; - Andre Walker&lt;/li&gt;
&lt;li&gt;2017 - &lt;a href="https://news.perlfoundation.org/post/grant_proposal_revitalize_blog"&gt;Revitalize blogs.perl.org&lt;/a&gt; - Jeffrey Goff (RIP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A "grant" is a mission paid by &lt;a href="https://www.perlfoundation.org/"&gt;The Perl Foundation&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Both grants were trying to migrate to &lt;a href="https://github.com/Perl-Evozon/PearlBee"&gt;PerlBee&lt;/a&gt; that is a blog engine written in Perl.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-went-wrong-what-is-the-difficulty-" class="anchor"&gt;
  &lt;/a&gt;
  What went wrong ? What is the difficulty ?
&lt;/h4&gt;

&lt;p&gt;I don't know exactly, but I believe without any doubt that there were several problems that make it not straightforward at all and make these grants fail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-now-" class="anchor"&gt;
  &lt;/a&gt;
  What about now ?
&lt;/h2&gt;

&lt;p&gt;Despite these numerous problems, &lt;strong&gt;BPO&lt;/strong&gt; is up and running, with reduced posting traffic (maybe 5 posts a week).&lt;/p&gt;

&lt;p&gt;Admins behind BPO seem &lt;a href="https://perlhacks.com/2020/09/blogging-for-perl/"&gt;pushing&lt;/a&gt; to make people migrate elsewhere but without making it read-only or cutting the power (so far). They obviously don't want to invest any support in BPO since it is in a kind of "decommissioning" state.&lt;/p&gt;

&lt;p&gt;Are bloggers happy or they tolerates the drawbacks ? I don't know.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I WAS&lt;/strong&gt; a fervent supporter of keeping this "concept" running... &lt;/p&gt;

&lt;p&gt;...until recently 😣&lt;/p&gt;

&lt;p&gt;I was even about to drop a &lt;a href="https://github.com/metacpan/prepan"&gt;new idea&lt;/a&gt; on the table of possible replacements, but I finally refrained and time gave me the answer 😄&lt;/p&gt;

&lt;p&gt;I will elaborate below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mylife" class="anchor"&gt;
  &lt;/a&gt;
  #MyLife
&lt;/h2&gt;

&lt;p&gt;Concerning blogs, I'm more a reader than a writer, and if I call Perl bloggers to come on DevTo, it is because I'm eager to read &lt;em&gt;your&lt;/em&gt; posts. &lt;/p&gt;

&lt;p&gt;Anyway, recently I tried to write a bit more.&lt;/p&gt;

&lt;p&gt;I found this schema on &lt;a href="https://rakhim.org"&gt;rakhim.org&lt;/a&gt; and I found it very true :) &lt;/p&gt;

&lt;p&gt;(I circled where I'm standing)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m6Mz9Uco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhzk2xbcsejivs4t2wbg.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6Mz9Uco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhzk2xbcsejivs4t2wbg.JPG" alt="Blogs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, I wrote a static website generator (in Perl) that is so quick and dirty and not generic that I will never made it public :D &lt;/p&gt;

&lt;p&gt;The main part looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;build_site&lt;/span&gt;&lt;span class="p"&gt;(\%$) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$indent&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%$p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ref&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nb"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;build_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;\.&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ext&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;md&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Processing &lt;/span&gt;&lt;span class="si"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;$k&lt;/span&gt;&lt;span class="s2"&gt;... (&lt;/span&gt;&lt;span class="si"&gt;$n&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
                &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;perl Markdown.pl &lt;/span&gt;&lt;span class="si"&gt;$dir&lt;/span&gt;&lt;span class="sb"&gt;/&lt;/span&gt;&lt;span class="si"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;`;&lt;/span&gt;
                &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$FH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;$title&lt;/span&gt;&lt;span class="s2"&gt;.html&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;create_head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;create_header&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;$menu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;create_submenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;$ga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;create_footer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$FH&lt;/span&gt; &lt;span class="nv"&gt;create_foot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$FH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nv"&gt;build_site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%menu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And I also used &lt;a href="https://gohugo.io/"&gt;hugo&lt;/a&gt; and I still use it for instance when contributing to &lt;a href="https://www.perl.com/"&gt;perl.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently also set up a blog using &lt;a href="https://jekyllrb.com/"&gt;jekyll&lt;/a&gt; and &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And of course I used a customized-custom theme from &lt;a href="https://github.com/akiritsu/pRoJEct-VeXEd"&gt;Project VeXed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I "customized" it, it was mainly to make it more &lt;a href="https://thibaultduponchelle.github.io/wawawa/pmtrx/"&gt;"Perlish"&lt;/a&gt; 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLuS4n7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9tjua0xvfifv91wfjw04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLuS4n7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9tjua0xvfifv91wfjw04.png" alt="My blog"&gt;&lt;/a&gt;&lt;br&gt;
(do not look for this blog, I killed it some days ago)&lt;/p&gt;

&lt;p&gt;Finally I spent the whole paragraph about the setup of blogs  so I should get extra points 😄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzXNy9D0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0uw7rx2236jyorrzkxi0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzXNy9D0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0uw7rx2236jyorrzkxi0.JPG" alt="Elaborate on blog setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The #MyLife section stops here. The conclusion is that I experimented some solutions before to call people to join me here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-recommend-devto" class="anchor"&gt;
  &lt;/a&gt;
  Why I recommend DevTo
&lt;/h2&gt;

&lt;p&gt;The user experience when writing is very good (to be honest, Medium and Wordpress are even better, but it is good enough).&lt;/p&gt;

&lt;p&gt;Why not using medium then ? There is no &lt;a href="https://medium.com/tag/perl"&gt;#perl tag&lt;/a&gt; and I feel like Medium is less a &lt;em&gt;developer&lt;/em&gt; hub than DevTo.&lt;/p&gt;

&lt;p&gt;There are also already some traffic here (at least as much as BPO) and some brand names.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://dev.to/t/perl"&gt;#perl tag&lt;/a&gt; is already administrated (by &lt;a href="https://dev.to/szabgab"&gt;Gabor Szabo&lt;/a&gt; ! :))&lt;/p&gt;

&lt;p&gt;The format is &lt;strong&gt;Markdown&lt;/strong&gt; which is generally a good point (but not always, I can understand).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ghetto" class="anchor"&gt;
  &lt;/a&gt;
  The ghetto
&lt;/h2&gt;

&lt;p&gt;BPO is a "Perl ghetto" which is both good and bad. Good because this is a what some readers are actually looking for, and bad because of non exposure to programming world. &lt;/p&gt;

&lt;p&gt;When you think that the biggest flaw of Perl is its reputation... 😟&lt;/p&gt;

&lt;p&gt;DevTo greatly offers the best of both. Your blog posts are open to broad (technical) audience but the &lt;a href="https://dev.to/t/perl"&gt;#perl tag&lt;/a&gt; fully recreates the "ghetto" use case from an reader point of view (and it really works well).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'm not the first one to promote DevTo actually, I'm joining the call from &lt;a href="http://blogs.perl.org/users/gabor_szabo/2020/11/perl-on-devto.html"&gt;Gabor Szabo&lt;/a&gt;, &lt;a href="http://blogs.perl.org/users/joel_berger/2020/09/crosspost-nginxcertbot-recipe.html"&gt;Joel Berger&lt;/a&gt; and &lt;a href="https://perlhacks.com/2020/09/blogging-for-perl/"&gt;Dave Cross&lt;/a&gt; to ask you to build together the future of Perl blogging on DevTo !&lt;/p&gt;

&lt;p&gt;Whatever you decide, "Happy Perl !" and please keep posting so I can continue to read you 😄&lt;/p&gt;

&lt;p&gt;(I was not paid by &lt;a href="https://dev.to/"&gt;DevTo&lt;/a&gt; 😄)&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/a-call-to-perl-bloggers-to-come-on-dev-to-27ee</id>
    <published>2020-12-02T12:02:31Z</published>
    <updated>2020-12-02T12:02:31Z</updated>
    <category term="blog"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Development community that we can see to development of Perl Part1 -　C language specification creating group</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/yuki_kimoto/2020/12/development-community-that-we-can-see-to-development-of-perl-part1--c-language-specification-creatin.html"/>
    <id>tag:blogs.perl.org,2020:/users/yuki_kimoto//2020.9976</id>

    <published>2020-12-02T11:20:26Z</published>
    <updated>2020-12-02T11:23:57Z</updated>

    <summary>The Perl core team seems to be looking for resources to help in language development. Currently, it seems the material in python. perlgov: the perl governance document I feel that Perl and Python cultures are quite different. It's also based...</summary>
    <author>
        <name>Yuki Kimoto</name>
        <uri>http://d.hatena.ne.jp/perlcodesample</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>The Perl core team seems to be looking for resources to help in language development.</p>

<p>Currently, it seems the material in python.</p>

<p><a href="https://github.com/Perl/perl5/pull/18357">perlgov: the perl governance document</a></p>

<p>I feel that Perl and Python cultures are quite different.</p>

<p>It's also based on an improvised document in 2019 when the Python reader quit.</p>

<p>I can understand how envious we are when we see Python attracting users(although<br />
I'm watching a lot of cheating at the same time).</p>

<p>On the other hand Perl has long been a conservative culture.</p>

<p>So, we can refer to the methods used by developers of languages, operating systems and tools that also have a conservative mindset.</p>

<p>The first thing I would like us to refer to is the method used by the group that creates C language specifications.</p>

<h2>C language specification creating group</h2>

<p>C89, C99, C11</p>

<p>Development of C language has continued some slowly, but functions that users think are lacking have been added.</p>

<p>Specially C99 is added good features I wanted.</p>

<p>It would be worthwhile to ask the C specification group how it was achieved.</p>

<p>I think it's less repulsive and less likely to fail if we adopt a method from a culture similar to Perl rather than a culture opposite to Perl.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Monthly Report - November</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html"/>
    <id>tag:blogs.perl.org,2020:/users/mohammad_s_anwar//990.9971</id>

    <published>2020-12-01T12:44:07Z</published>
    <updated>2020-12-01T12:48:33Z</updated>

    <summary> Welcome last month of the year 2020 Generally, I always look forward to festive month, December. But I don't expect it to be any different from other months, unfortunately. With so much going on in my personal life, it...</summary>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    
    <category term="perlmonthlyreport" label="perl monthly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2020-11.jpg"/></p>

<p><strong>Welcome last month of the year 2020</strong></p>

<p>Generally, I always look forward to festive month, December. But I don't expect it to be any different from other months, unfortunately.</p>

<p>With so much going on in my personal life, it is hard to focus on anything. One thing that I really miss these days are personal time. I am constantly working on it with the help of experts in the field. I try to look at the positive side of the life but I can't ignore the fact I am not giving 100% to my pet project <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a>. Having said that I must thank the entire team for the support and encouragement in this difficult time. As of today, we entered into the 89th week. I can't wait to see when we get to the 100th week.</p>

<p>Ever since I shared about my treatment, I have had many encouraging and supporting messages from friends. I read them again and again. I feel blessed to have such caring friends around me. I have let myself down by not taking part in Hacktoberfest 2020 in the same spirit as before. Atleast I completed the challenge by submitting the required number of Pull Requests. </p>

<p>Let me share some happy news as well, I have now become co-editor of <a href="https://perlweekly.com/">Perl Weekly Newsletter</a> with the most editions, going past greats like Yanick Champoux and Neil Bowers.</p>

<p>On professional front, there are so much going on, I hope to share some good news very soon.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Adopt CPAN Module</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>6 Pull Requests</strong> submitted in the month of November.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2020-11.png"/></p>

<p><strong>2345 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2020-11.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>855 commits</strong> recorded in the month of November.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2020-11.png"/></p>

<p>Overall <strong>8237 commits</strong> recorded in the year 2020.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2020-11.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of November:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-085">Challenge #085</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-086">Challenge #086</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-087">Challenge #087</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088">Challenge #088</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089">Challenge #089</a></li>
</ul>

<p>And RECAPS are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-084">RECAP Challenge #084</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-085">RECAP Challenge #085</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-086">RECAP Challenge #086</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-087">RECAP Challenge #087</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-088">RECAP Challenge #088</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>There are plenty of vides available on my <a href="https://studio.youtube.com/channel/UCT91RkThBWByo1NL_M8R8Ig">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<p>No new video created last month, sorry :-(</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-10">Andrew Shitov</a> as the Champion of the Weekly Challenge.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/release/Net-Dict">Net::Dict</a> by Neil Bowers. I submitted <a href="https://github.com/neilb/Net-Dict/pull/6">one</a> Pull Request.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2020-11.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/11/monthly-report---october-2.html">Monthly Report - October</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited three editions of The Perl Weekly newsletter i.e. <a href="http://perlweekly.com/archive/484.html">Issue #484</a>, <a href="http://perlweekly.com/archive/486.html">Issue #486</a> and <a href="http://perlweekly.com/archive/488.html">Issue #488</a>.</p>

<hr id="i"/>
<h2>Adopt CPAN Module</h2>

<p>None in the last month.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl::Critic-Regeln umsetzen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-01-perl-critic-regeln-erstellen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Gregor hat vor längerer Zeit das Modul `Test::Perl::Critic::Progressive` und ich vor kurzem  das Modul `PPI` vorgestellt. In diesem Blogpost zeige ich, wie man mit `PPI` Perl::Critic-Regeln umsetzen kann, die dann in den Tests verwendet werden.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-01-perl-critic-regeln-erstellen</id>
    <published>2020-12-01T10:00:00Z</published>
    <updated>2020-12-01T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Find the first element in an array in Perl that satisfies a condition</title>
  <summary type="html"><![CDATA[<p>
When you need to find the first element in an array that satisfies some condition, the first solution that might come to mind is to loop
over all the elements using <b>for</b> and check them one by one. This would yield a working code, but there are nicer solution.
<p>
BTw if you are interested I've also written a solution to
<a href="https://code-maven.com/python-find-first-element-in-list-matching-condition">find the first matching element of a list in Python</a>.
It might be interesting to compare.
<p>
]]></summary>
  <updated>2020-11-30T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/first"/>  <id>https://perlmaven.com/first</id>
  <content type="html"><![CDATA[<p>
When you need to find the first element in an array that satisfies some condition, the first solution that might come to mind is to loop
over all the elements using <b>for</b> and check them one by one. This would yield a working code, but there are nicer solution.
<p>
BTw if you are interested I've also written a solution to
<a href="https://code-maven.com/python-find-first-element-in-list-matching-condition">find the first matching element of a list in Python</a>.
It might be interesting to compare.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Weekly Challenge 089</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-089-f3" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089/"&gt;Challenge 089&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-gcd-sum" class="anchor"&gt;
  &lt;/a&gt;
  TASK #1 › GCD Sum
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to sum GCD of all possible unique pairs between 1 and &lt;code&gt;$N&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;This is relatively straight forward. All possible unique pairs can be calculated with the first number from 1 to &lt;code&gt;$N&lt;/code&gt; - 2, and the second number one more than the first number to &lt;code&gt;$N&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's then a matter of calculating the GCD for this combination. For this I have a subroutine &lt;code&gt;_gcd&lt;/code&gt; that takes the minimum of the two numbers and work backwards to one. It will return the first value that can be divided by both numbers with no remainder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl 3
3

» ./ch-1.pl 4
7
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-magical-matrix" class="anchor"&gt;
  &lt;/a&gt;
  TASK #2 › Magical Matrix
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;Write a script to display matrix as below with numbers 1 - 9. Please make sure numbers are used once.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ a b c ]&lt;br&gt;
[ d e f ]&lt;br&gt;
[ g h i ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So that it satisfies the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a + b + c = 15&lt;br&gt;
d + e + f = 15&lt;br&gt;
g + h + i = 15&lt;br&gt;
a + d + g = 15&lt;br&gt;
b + e + h = 15&lt;br&gt;
c + f + i = 15&lt;br&gt;
a + e + i = 15&lt;br&gt;
c + e + g = 15&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;My first thought was to just brute force this. The possible permutation is 9! = 362880, and even a half decent computer could figure this out pretty quickly.&lt;/p&gt;

&lt;p&gt;But I took a slight different approach to make it even faster.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Work out all the possible ordered three digit combinations that sum to 15. It turns out there are only eight combinations: 1 5 9, 1 6 8, 2 4 9, 2 5 8, 2 6 7, 3 4 8, 3 5 7, 4 5 6&lt;/li&gt;
&lt;li&gt;Using these rows, work out all combinations of these rows such that all numbers are used. There are twelve rows returned.&lt;/li&gt;
&lt;li&gt;This now means the possible solutions are 6³ × 12 (2,592). We know that we won't need all of these. For example, the 1 will always be found in top left, top middle or centre position (all other places will be a mirror/flip of one of these).&lt;/li&gt;
&lt;li&gt;At this point, I just use a brute force approach until I find a solution.

&lt;ol&gt;
&lt;li&gt;Each row can be ordered one of six ways (abc, acb, bac, bca, cab, cba).&lt;/li&gt;
&lt;li&gt;For each of the twelve solutions, we can cycle through the six numbers combinations in each row.&lt;/li&gt;
&lt;li&gt;If a solution is found that meets the requirements, we print the solution and exit.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm looking forward to seeing how other Team PWC members tackle this task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl 
[ 6 1 8 ]
[ 7 5 3 ]
[ 2 9 4 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-089-f3</id>
    <published>2020-11-30T13:06:15Z</published>
    <updated>2020-11-30T13:06:15Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="weeklychallenge"/>
  </entry>
  <entry>
    <title>Multiline fixed string search and replace with cli tools</title>
    <link rel="alternate" href="https://dev.to/learnbyexample/multiline-fixed-string-search-and-replace-with-cli-tools-pko" type="text/html"/>
    <content type="html">&lt;p&gt;Credit: &lt;em&gt;Cover image generated using &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post shows how you can use &lt;code&gt;ripgrep&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt; and &lt;code&gt;sd&lt;/code&gt; to perform multiline fixed string search and replace operations from the command line. Solution with &lt;code&gt;GNU sed&lt;/code&gt; is also discussed, along with its limitations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixed-string-matching" class="anchor"&gt;
  &lt;/a&gt;
  Fixed string matching
&lt;/h2&gt;

&lt;p&gt;The below sample input file will be used in the examples in this post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and ' and so on.
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ripgrep" class="anchor"&gt;
  &lt;/a&gt;
  ripgrep
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt; supports &lt;code&gt;-U&lt;/code&gt; option to allow multiline matching. Use &lt;code&gt;-F&lt;/code&gt; option to turn off regexp matching, i.e. treat the search string literally. In &lt;code&gt;bash&lt;/code&gt; shell (and likely most other shells), you can press enter key to insert literal newline character for quoted values. When you do so, the next line starts with &lt;code&gt;&amp;gt;&lt;/code&gt; and a space character. This isn't shown in the examples below to make it easier to copy-paste the commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rg -UF 'like . () * [] $ {}
^ + ? \ and' ip.txt
4:like . () * [] $ {}
5:^ + ? \ and ' and so on.

# -l option shows only filename instead of all the matching lines
$ rg -lUF 'like . () * [] $ {}
^ + ? \ and' ip.txt
ip.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll have an issue if your search string itself contains single quote characters. Avoid using double quotes as a workaround, as that has its own set of special characters. You can work around by concatenating multiple strings next to each other, along with escaped single quote characters as needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# -N option disables line number prefix
$ rg -NUF 'like . () * [] $ {}
^ + ? \ and '\'' and' ip.txt
like . () * [] $ {}
^ + ? \ and ' and so on.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If your search string starts with &lt;code&gt;-&lt;/code&gt; character, you'll have to use &lt;code&gt;--&lt;/code&gt; before the search argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rg -NUF -- '-string multiline
search' ip.txt
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#perl" class="anchor"&gt;
  &lt;/a&gt;
  perl
&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;-0777&lt;/code&gt; option with &lt;code&gt;perl&lt;/code&gt; to slurp the entire input as a single string. Another advantage with &lt;code&gt;perl&lt;/code&gt; is that you can use files to pass the search and replace strings. Thus, you don't have to worry about any character that may clash with shell metacharacters. See my &lt;a href="https://learnbyexample.github.io/learn_perl_oneliners/"&gt;Perl one-liners cookbook&lt;/a&gt; if you are not familiar with using &lt;code&gt;perl&lt;/code&gt; from the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat search_1.txt
like . () * [] $ {}
^ + ? \ and ' and so on.

# display filename if the given search string matches
$ perl -0777 -nE '!$#ARGV ? $s=$_ :
                  /\Q$s/ &amp;amp;&amp;amp; say $ARGV' search_1.txt ip.txt
ip.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, you'll have to make sure the file doesn't end with a newline if you are providing partial lines for searching, or take care of it within the &lt;code&gt;perl&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat search_2.txt
-string multiline
search

# no output because there's a newline at the end of search_2.txt file
$ perl -0777 -nE '!$#ARGV ? $s=$_ :
                  /\Q$s/ &amp;amp;&amp;amp; say $ARGV' search_2.txt ip.txt

# this will remove newline at the end of file before assigning to $s
$ perl -0777 -nE '!$#ARGV ? $s=s/\n\z//r :
                  /\Q$s/ &amp;amp;&amp;amp; say $ARGV' search_2.txt ip.txt
ip.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By default, &lt;code&gt;ripgrep&lt;/code&gt; gives entire matching lines. To get rest of the line with &lt;code&gt;perl&lt;/code&gt;, you'll have to explicitly add a pattern around the search string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# $&amp;amp; variable has the entire matching portion
$ perl -0777 -nE '!$#ARGV ? $s=s/\n\z//r :
                  /\Q$s/ &amp;amp;&amp;amp; say $&amp;amp;' search_2.txt ip.txt
-string multiline
search

# use 'say $&amp;amp; while /.*\Q$s\E.*/g' if there are multiple matches
$ perl -0777 -nE '!$#ARGV ? $s=s/\n\z//r :
                  /.*\Q$s\E.*/ &amp;amp;&amp;amp; say $&amp;amp;' search_2.txt ip.txt
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fixed-string-substitution" class="anchor"&gt;
  &lt;/a&gt;
  Fixed string substitution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ripgrep" class="anchor"&gt;
  &lt;/a&gt;
  ripgrep
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ripgrep&lt;/code&gt; also supports replacing matched string with something else using the &lt;code&gt;-r&lt;/code&gt; option. By default, you'll see only matched lines in the output. Use &lt;code&gt;--passthru&lt;/code&gt; option to display all the input lines, even if they do not match the given search string. See &lt;a href="https://learnbyexample.github.io/substitution-with-ripgrep/"&gt;my blog post&lt;/a&gt; for more details about the &lt;code&gt;-r&lt;/code&gt; option and various ways you can use it for substitution requirements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rg --passthru -NUF 'like . () * [] $ {}
^ + ? \ and' -r '====
----
====' ip.txt
This is a multiline
sample input with lots
of special characters
====
----
==== ' and so on.
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Apart from having to workaround single quote, you'll have to use &lt;code&gt;$$&lt;/code&gt; instead of &lt;code&gt;$&lt;/code&gt; as it is used for backreferences in the replacement section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo 'sample input' | rg --passthru -F 'in' -r '$a'
sample put
$ echo 'sample input' | rg --passthru -F 'in' -r '$$a'
sample $aput
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#perl" class="anchor"&gt;
  &lt;/a&gt;
  perl
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;perl&lt;/code&gt;, you can use files for both search and replace strings. And, you can easily choose to replace first or all occurrences, unlike &lt;code&gt;ripgrep&lt;/code&gt; where it always replaces all the matches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat replace.txt
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
=====================

$ perl -0777 -ne '$#ARGV==1 ? $s=$_ : $#ARGV==0 ? $r=$_ :
                  print s/\Q$s/$r/gr' search_1.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
=====================
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As seen before, you'll have to remove newline from search string for partial line matching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# use $r=s/\n\z//r to avoid trailing newline from replace.txt
$ perl -0777 -ne '$#ARGV==1 ? $s=s/\n\z//r : $#ARGV==0 ? $r=$_ :
                  print s/\Q$s/$r/gr' search_2.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and ' and so on.
This post shows how
you can do fixed
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
=====================
 with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sd" class="anchor"&gt;
  &lt;/a&gt;
  sd
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/chmln/sd"&gt;sd&lt;/a&gt; supports fixed string and Rust regexp based substitution. Unlike &lt;code&gt;ripgrep&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt; option for fixed string will apply to both search and replacement sections. &lt;code&gt;sd&lt;/code&gt; does in-place editing for file inputs by default, you can use &lt;code&gt;-p&lt;/code&gt; to preview results on the terminal. Multiline matching is automatically performed by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo 'sample input' | sd -s 'in' '$a'
sample $aput

$ sd -ps 'like . () * [] $ {}
^ + ? \ and' '====
----
====' ip.txt
This is a multiline
sample input with lots
of special characters
====
----
==== ' and so on.
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#saving-file-contents-to-a-variable" class="anchor"&gt;
  &lt;/a&gt;
  Saving file contents to a variable
&lt;/h2&gt;

&lt;p&gt;Trailing newlines and ASCII NUL characters will be lost if you wish to save contents of a file as &lt;code&gt;bash&lt;/code&gt; variables using &lt;code&gt;var=$(&amp;lt; filename)&lt;/code&gt; command. See &lt;a href="https://stackoverflow.com/questions/7427262/how-to-read-a-file-into-a-variable-in-shell/22607352#22607352"&gt;stackoverflow: pitfalls of reading file into shell variable&lt;/a&gt; for details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ printf '\na\0b\n123\n\n\n\n\n\n\n\n' &amp;gt; t1
$ a=$(&amp;lt; t1)

# NUL character is lost after the assignment
# all the trailing newlines are lost as well
$ printf '%b' "$a" | cat -A
$
ab$
123
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ripgrep" class="anchor"&gt;
  &lt;/a&gt;
  ripgrep
&lt;/h3&gt;

&lt;p&gt;If your search string doesn't have multiple trailing newlines or ASCII NUL characters, then you can save file contents to variables and then pass them to &lt;code&gt;ripgrep&lt;/code&gt;. Single trailing newline will not normally cause an issue for searching operations as &lt;code&gt;ripgrep&lt;/code&gt; will append a newline while displaying results anyway. If you want to make sure input file also contains the trailing newline, then you can manually concatenate a newline character to the search string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s=$(&amp;lt; search_1.txt)
# use "$s"$'\n' if you want to match trailing newline as well
$ rg -NUF "$s" ip.txt
like . () * [] $ {}
^ + ? \ and ' and so on.

# use -- if the search string starts with - character
$ s=$(&amp;lt; search_2.txt)
$ rg -NUF -- "$s" ip.txt
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For substitution operations, you'll have to preprocess the replacement file to replace &lt;code&gt;$&lt;/code&gt; with &lt;code&gt;$$&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s=$(&amp;lt; search_1.txt)
$ r=$(sed 's/\$/$$/g' replace.txt)

# here, removal of trailing newline doesn't cause an issue,
# as it evens out between search and replace strings
$ rg --passthru -NUF "$s" -r "$r" ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
=====================
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, partial line has to be matched. So, &lt;code&gt;$()&lt;/code&gt; assignment works well for the search string. If the trailing newline of the replacement string isn't needed, then &lt;code&gt;$()&lt;/code&gt; assignment again is good enough. Otherwise, you can modify the replacement string as &lt;code&gt;-r "$r"$'\n'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ s=$(&amp;lt; search_2.txt)
$ r=$(sed 's/\$/$$/g' replace.txt)

$ rg --passthru -NUF -r "$r" -- "$s" ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and ' and so on.
This post shows how
you can do fixed
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
===================== with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sd" class="anchor"&gt;
  &lt;/a&gt;
  sd
&lt;/h3&gt;

&lt;p&gt;As mentioned before, &lt;code&gt;-s&lt;/code&gt; option for &lt;code&gt;sd&lt;/code&gt; applies to both search and replacement sections. So, the usage is lot simpler compared to &lt;code&gt;ripgrep&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# -- is needed here because replace.txt starts with - character
$ sd -ps -- "$(&amp;lt; search_1.txt)" "$(&amp;lt; replace.txt)" ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
=====================
This post shows how
you can do fixed
-string multiline
search with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#gnu-sed" class="anchor"&gt;
  &lt;/a&gt;
  GNU sed
&lt;/h3&gt;

&lt;p&gt;To follow a similar approach with &lt;code&gt;GNU sed&lt;/code&gt;, you'll have to preprocess the strings to escape metacharacters. Assuming input doesn't have ASCII NUL characters, you can use &lt;code&gt;-z&lt;/code&gt; option to slurp entire input as a single string.&lt;/p&gt;

&lt;p&gt;Here's an example for multiline search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# escape all BRE metacharacters
# replace literal newlines with \n
$ s=$(sed -z 's#[[^$*.\/]#\\&amp;amp;#g; s/\n/\\n/g' search_1.txt)

# since newlines are replaced with \n,
# trailing newlines will be preserved here
$ echo "$s"
like \. () \* \[] \$ {}\n\^ + ? \\ and ' and so on\.\n

# display filename if input matches the given multiline search string
# tr is used to change NUL character after filename to newline
$ sed -nz '/'"$s"'/F' ip.txt | tr '\0' '\n'
ip.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here's an example for multiline substitution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# last newline is removed here to allow partial line matching
$ s=$(sed -z 's#[[^$*.\/]#\\&amp;amp;#g; s/\n$//; s/\n/\\n/g' search_2.txt)

# escape all replacement section metacharacters
# and prefix \ character to literal newlines, except the last line
$ r=$(sed 's:[\\/&amp;amp;]:\\&amp;amp;:g; $!s/$/\\/' replace.txt)
$ echo "$r"
---------------------\
$\&amp;amp; = $1 + $2 \/ 3 \\ 4\
=====================

# if you need trailing newline from replace.txt,
# use sed -z 's/'"$s"'/'"$r"'\n/g'
$ sed -z 's/'"$s"'/'"$r"'/g' ip.txt
This is a multiline
sample input with lots
of special characters
like . () * [] $ {}
^ + ? \ and ' and so on.
This post shows how
you can do fixed
---------------------
$&amp;amp; = $1 + $2 / 3 \ 4
===================== with cli tools.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</content>
    <author>
      <name>Sundeep</name>
    </author>
    <id>https://dev.to/learnbyexample/multiline-fixed-string-search-and-replace-with-cli-tools-pko</id>
    <published>2020-11-30T12:58:57Z</published>
    <updated>2020-11-30T12:58:57Z</updated>
    <category term="tutorial"/>
    <category term="perl"/>
    <category term="ripgrep"/>
    <category term="sed"/>
  </entry>
  <entry>
    <title>Shopping, Skating, and Swimming – Is This Even Work? Perl developer in Dubai</title>
    <link rel="alternate" href="https://job.perl.careers/jn4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is a financial company whose growth over the last twenty years has been nothing short of impressive. They started with the idea that online trading should be available to all, and from there, they’ve built a company with multiple locations worldwide. If you want to be part of a business that is thriving, this may be the perfect opportunity for you.</div>
    </content>
    <id>https://job.perl.careers/jn4</id>
    <published>2020-11-30T10:00:44Z</published>
    <updated>2020-11-30T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Business Casual has a Whole New Meaning. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/3g9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online shopping, socializing, working—it’s a digital world now, which is perfect for our client. As an international IT company managing millions of domains for retail and corporate customers in nearly every country in the world, they’re busier than ever—and they need a few senior Perl developers to help them continue to thrive.</div>
    </content>
    <id>https://job.perl.careers/3g9</id>
    <published>2020-11-30T10:00:43Z</published>
    <updated>2020-11-30T10:00:43Z</updated>
  </entry>
  <entry>
    <title>If it was Good Enough for Mozart - Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/i2k" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the largest product and price comparison platforms in German-speaking countries, they know all about finding the best products at a price that would make Mozart shout, “Wunderbar!” They want to find a Perl programmer who thrives on delivering quality content, well-executed user information that’s easy to understand, and is as committed to transparency and excellence as they are.</div>
    </content>
    <id>https://job.perl.careers/i2k</id>
    <published>2020-11-30T10:00:42Z</published>
    <updated>2020-11-30T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Distraction-free Workplace - Escape Standups and Scrum - Perl Developer West London</title>
    <link rel="alternate" href="https://job.perl.careers/yt2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Client is a small development team where everyone is expected to pull their own weight. No daily standups, no planning poker, just you and your work, aided by some of the most experienced technical colleagues in London. You’ll be encouraged to make sensible use of Modern Perl tooling and grow your personal experience of best development practices under excellent technical leadership.</div>
    </content>
    <id>https://job.perl.careers/yt2</id>
    <published>2020-11-30T10:00:41Z</published>
    <updated>2020-11-30T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Paging Dr. Perl! Perl Role in Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/s2w" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This organization is one of the world’s leading developers of medical diagnostic technologies and clinical software. They believe in security, wellness, and the importance of driving innovation to deliver patient benefit. You won’t be in a white coat, but it’s better than that—your work will be used by the NHS, research labs, and healthcare providers worldwide.</div>
    </content>
    <id>https://job.perl.careers/s2w</id>
    <published>2020-11-30T10:00:40Z</published>
    <updated>2020-11-30T10:00:40Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-11-30T10:00:39Z</published>
    <updated>2020-11-30T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-11-30T10:00:38Z</published>
    <updated>2020-11-30T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-11-30T10:00:37Z</published>
    <updated>2020-11-30T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Starship Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/</id>
    <published>2020-11-30T10:00:36Z</published>
    <updated>2020-11-30T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Quantum::Superpositions, 2021 election</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 3, 2020, 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/</id>
    <published>2020-11-30T10:00:35Z</published>
    <updated>2020-11-30T10:00:35Z</updated>
  </entry>
  <entry>
    <title>COVID 19 charts by DungeonTiger</title>
    <link rel="alternate" href="https://code-maven.com/covid-19-charts-by-dungeontiger" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Screencast showing a GitHub pages project where the content is re-generated twice a day with a scheduled GitHub Actions job.</div>
    </content>
    <id>https://code-maven.com/covid-19-charts-by-dungeontiger</id>
    <published>2020-11-30T10:00:34Z</published>
    <updated>2020-11-30T10:00:34Z</updated>
  </entry>
  <entry>
    <title>CPAN Digger - CPAN Dashboard - CPAN Rocks</title>
    <link rel="alternate" href="https://perlmaven.com/cpan-digger-dashboard-rocks" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Screencast showing you around three projects: CPAN Digger by Gabor Szabo, CPAN Dashboard by Dave Cross, both written in Perl and hosted on GitHub pages. Also, CPAN Rocks by James Raspass, written in Raku and hosted on GitLab.</div>
    </content>
    <id>https://perlmaven.com/cpan-digger-dashboard-rocks</id>
    <published>2020-11-30T10:00:33Z</published>
    <updated>2020-11-30T10:00:33Z</updated>
  </entry>
  <entry>
    <title>GitLab CI for Perl projects</title>
    <link rel="alternate" href="https://perlmaven.com/gitlab-ci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A list of Perl projects hosted on GitLab that already have GitLab CI enabled. Some projects to learn from.</div>
    </content>
    <id>https://perlmaven.com/gitlab-ci</id>
    <published>2020-11-30T10:00:32Z</published>
    <updated>2020-11-30T10:00:32Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-11-30T10:00:31Z</published>
    <updated>2020-11-30T10:00:31Z</updated>
  </entry>
  <entry>
    <title>2020.47 Present Release</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2020/11/23/2020-47-present-release/" type="text/html"/>
    <id>https://rakudoweekly.blog/2020/11/23/2020-47-present-release/</id>
    <published>2020-11-30T10:00:30Z</published>
    <updated>2020-11-30T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Use Perl::Tidy module in your application</title>
    <link rel="alternate" href="https://perlmaven.com/use-perl-tidy-in-your-application" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simple example showing how to use Perl::Tidy as a module, rather than as a command line tool, embedded in your application.</div>
    </content>
    <id>https://perlmaven.com/use-perl-tidy-in-your-application</id>
    <published>2020-11-30T10:00:29Z</published>
    <updated>2020-11-30T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge - 088</title>
    <link rel="alternate" href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/walt-mankowski/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Walt used state variables very elegantly to solve the Spiral Matrix task.</div>
    </content>
    <id>https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/walt-mankowski/README.md</id>
    <published>2020-11-30T10:00:28Z</published>
    <updated>2020-11-30T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 088</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-088-5c5f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon presenting a step-by-step solution to the Spiral Matrix is interesting.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-088-5c5f</id>
    <published>2020-11-30T10:00:27Z</published>
    <updated>2020-11-30T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="https://samirparikh.com/blog/perl-weekly-challenge-088.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The best part of this blog post is the discussion of the Spiral Matrix solution. Must Read.</div>
    </content>
    <id>https://samirparikh.com/blog/perl-weekly-challenge-088.html</id>
    <published>2020-11-30T10:00:26Z</published>
    <updated>2020-11-30T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Spiral Product</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_88__Spiral_Product.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's blog post is not limited to a Perl solution. You will find comparable solutions in other languages too.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_88__Spiral_Product.html</id>
    <published>2020-11-30T10:00:25Z</published>
    <updated>2020-11-30T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="https://v.kolouch.org/nextcloud/index.php/apps/cms_pico/pico/lubos/20201128_perl_weekly_088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lubos writing Perl and Python side by side is really interesting. He makes it easy to read.</div>
    </content>
    <id>https://v.kolouch.org/nextcloud/index.php/apps/cms_pico/pico/lubos/20201128_perl_weekly_088</id>
    <published>2020-11-30T10:00:24Z</published>
    <updated>2020-11-30T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Array of Products and Spiral Matrices</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent writing Raku first then porting the code to Perl is really cool. His contributions in Perl and Raku are equally great.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html</id>
    <published>2020-11-30T10:00:23Z</published>
    <updated>2020-11-30T10:00:23Z</updated>
  </entry>
  <entry>
    <title>PWC088 - Spiral Matrix</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/27/pwc088-spiral-matrix/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's style of question and answer in his blog post makes me think again and again.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/27/pwc088-spiral-matrix/</id>
    <published>2020-11-30T10:00:22Z</published>
    <updated>2020-11-30T10:00:22Z</updated>
  </entry>
  <entry>
    <title>PWC088 - Array of Product</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/26/pwc088-array-of-product/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio continued his weekly challenge journey, having so much fun.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/26/pwc088-array-of-product/</id>
    <published>2020-11-30T10:00:21Z</published>
    <updated>2020-11-30T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challege: 088</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2020/11/perl_weekly_challenge_week_88.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I loved the blogging style used by Jaldhar; keeping track of the code while discussing the solution.</div>
    </content>
    <id>https://www.braincells.com/perl/2020/11/perl_weekly_challenge_week_88.html</id>
    <published>2020-11-30T10:00:20Z</published>
    <updated>2020-11-30T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 088 -- Array of Prodict vs Spiral Matrix</title>
    <link rel="alternate" href="https://gugod.org/2020/11/pwc-088-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Kang-min's use of map to keep track of direction is really nice. His blog post shows the real power of Raku.</div>
    </content>
    <id>https://gugod.org/2020/11/pwc-088-en/</id>
    <published>2020-11-30T10:00:19Z</published>
    <updated>2020-11-30T10:00:19Z</updated>
  </entry>
  <entry>
    <title>The Product of the Absence – Spiralize the Day Away</title>
    <link rel="alternate" href="https://colincrain.com/2020/11/29/the-product-of-the-absence-spiralize-the-day-away/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin, our in-house Perl Reviewer, came up with an interesting blog post showing the power of Perl and Raku.</div>
    </content>
    <id>https://colincrain.com/2020/11/29/the-product-of-the-absence-spiralize-the-day-away/</id>
    <published>2020-11-30T10:00:18Z</published>
    <updated>2020-11-30T10:00:18Z</updated>
  </entry>
  <entry>
    <title>CY's Take on PWC#088</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cheok-Yin's blog is always fun to read. Plenty to absorb on the meat of the solution.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html</id>
    <published>2020-11-30T10:00:17Z</published>
    <updated>2020-11-30T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Arrayed Spiral with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/arrayed-spiral.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne's use of a mapping analogy for the Spiral Matrix is the coolest approach. We are blessed to have both Perl and Raku versions this week.</div>
    </content>
    <id>https://raku-musings.com/arrayed-spiral.html</id>
    <published>2020-11-30T10:00:16Z</published>
    <updated>2020-11-30T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/29" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam keeps the discussion short and sweet.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/29</id>
    <published>2020-11-30T10:00:15Z</published>
    <updated>2020-11-30T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/29/perl-weekly-challenge-88-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail has been a great supporter and this blog contribution is the talk of the town.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/29/perl-weekly-challenge-88-part-2/</id>
    <published>2020-11-30T10:00:14Z</published>
    <updated>2020-11-30T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/27/perl-weekly-challenge-88-part-1/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This blog post goes into the finer details of the task in terms of Perl, C and Node.js.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/27/perl-weekly-challenge-88-part-1/</id>
    <published>2020-11-30T10:00:13Z</published>
    <updated>2020-11-30T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Meet The Champion - Andrew Shitov</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-10/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Finally we managed to get this interview done. Well worth the wait, imho.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/meet-the-champion-2020-10/</id>
    <published>2020-11-30T10:00:12Z</published>
    <updated>2020-11-30T10:00:12Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 088</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC, dealing with the "Array of Products" and "Spiral Matrix" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-088</id>
    <published>2020-11-30T10:00:11Z</published>
    <updated>2020-11-30T10:00:11Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 089</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "GCD Sum" and "Magical Matrix". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the <a href="https://perlweeklychallenge.org/faq">FAQ</a>.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-089</id>
    <published>2020-11-30T10:00:10Z</published>
    <updated>2020-11-30T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for October 2020</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/dave-report-2020-october" type="text/html"/>
    <id>https://news.perlfoundation.org/post/dave-report-2020-october</id>
    <published>2020-11-30T10:00:09Z</published>
    <updated>2020-11-30T10:00:09Z</updated>
  </entry>
  <entry>
    <title>CPAN Digger explained</title>
    <link rel="alternate" href="https://perlmaven.com/cpan-digger-explained" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Gabor shared the internals of CPAN Digger.</div>
    </content>
    <id>https://perlmaven.com/cpan-digger-explained</id>
    <published>2020-11-30T10:00:08Z</published>
    <updated>2020-11-30T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Variables, loops, and redirections</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/23/variables-loops-redirections/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting discussion about the very basics of variables, loops and redirections.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/23/variables-loops-redirections/</id>
    <published>2020-11-30T10:00:07Z</published>
    <updated>2020-11-30T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Peek in containers</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/29/peek-in-containers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Take a peek into containers with this short blog post.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/29/peek-in-containers/</id>
    <published>2020-11-30T10:00:06Z</published>
    <updated>2020-11-30T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Put a file in a Kubernetes Pod</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/24/kube-put/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio has another gem of a blog post showing how to put a file in a Kubernetes pod.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/24/kube-put/</id>
    <published>2020-11-30T10:00:05Z</published>
    <updated>2020-11-30T10:00:05Z</updated>
  </entry>
  <entry>
    <title>A few tips for Perl on Docker and Kubernetes</title>
    <link rel="alternate" href="https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A very handy introduction for anyone trying to get their hand dirty.</div>
    </content>
    <id>https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg</id>
    <published>2020-11-30T10:00:04Z</published>
    <updated>2020-11-30T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 5; DevTo: 5; Perl.com: 0; PerlAcademy: 2; PerlHacks: 0; PerlMaven: 4; Reddit: 17; TPF: 1;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-11-30T10:00:03Z</published>
    <updated>2020-11-30T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://metacpan.org/recent" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 171 uploads to CPAN of 137 distinct distributions by 80 different authors. Number of distributions with link to VCS: 94. Number of distros with CI: 44. Number of distros with bugtracker: 66.</div>
    </content>
    <id>https://metacpan.org/recent</id>
    <published>2020-11-30T10:00:02Z</published>
    <updated>2020-11-30T10:00:02Z</updated>
  </entry>
  <entry>
    <title>The Pearls of Perl - The top 10 Perl tools for every developer</title>
    <link rel="alternate" href="https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">From A (Ack) to Z (Dist-Zilla), check out the &lt;a href="https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition"&gt;10 Perl tools&lt;/a&gt; that should be in every developer’s toolbox. Or Download our &lt;a href="https://platform.activestate.com/Pizza-Team/Pearls-of-Perl?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition"&gt;“Pearls of Perl”&lt;/a&gt; build to get a version of Perl 5.28 with all the tools listed in this post so you can test them out for yourself!</content>
    <id>https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition</id>
    <published>2020-11-30T10:00:01Z</published>
    <updated>2020-11-30T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#488 - Advent Calendar 2020</title>
    <link rel="alternate" href="http://perlweekly.com/archive/488.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>It is time to get ready for 2020's Advent Calendars. Last year's Advent was the best so far as there was a flood of Advent Calendars. Most notable were the <a href="http://www.perladvent.org/2019/">Perl</a> and <a href="https://perl6advent.wordpress.com/2019/12/">Raku</a> Advent Calendars. The best of all was the one by <a href="https://andrewshitov.com/category/advent-calendar-2019/">Andrew Shitov</a>, where we were introduced to a new language every day.</p>
<p>So what do I expect in the COVID-19 year, 2020?</p>
<p>Well, first of all, I would like to have the Advent Calendar for Dancer2 back. I missed it dearly last year. Dancer2 is very close to my heart. I had the honour to be part of this Advent Calendar once in the past. Whoever is responsible this year, please don't let us down this time.</p>
<p>Have you contributed to Perl/Raku Advent Calendar?</p>
<p>If not, then why not give it a try? For me it is like getting your name in the history books forever. Last year, I contributed to the Raku Advent Calendar for the first time. Before that, I had the pleasure to be part of the Perl Advent Calendar. The best part of any Advent Calendar is the element of surprise. Every day brings a new fun subject to explore.</p>
<p>My pet project <a href="https://perlweeklychallenge.org/">The Weekly Challenge</a> also created its first <a href="https://perlweeklychallenge.org/blog/advent-calendar-2019/">Advent Calendar</a> last year. I haven't had the time to plan this year's Advent Calendar. But, having said that, I will do my best to not disappoint fans of The Weekly Challenge.</p>
<p>Is that all for us in the month of December?</p>
<p>Well, no. There is another fun challenge for those who enjoy contributing to open source codebases and it is called <a href="https://24pullrequests.com/">24 Pull Requests</a>. I haven't had as good a time contributing in the year 2019 compared to my past records, for many reasons. Having said that, I will be taking part again this year and hope to complete the challenge without fail.</p>
<p>We would love to know your plans with regard to Advent Calendars or 24 Pull Requests. Please do share your story with us. Last, but not least, please do take care of yourself and your family. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/488.html</id>
    <published>2020-11-30T10:00:00Z</published>
    <updated>2020-11-30T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title> Weekly Challenge #088 Task #2 :: {Off The Challenge}</title>
    <link rel="alternate" href="https://dev.to/jeongoon/weekly-challenge-088-task-2-off-the-challenge-37d6" type="text/html"/>
    <content type="html">&lt;p&gt;I checked other's code after finishing my solutions, and I found that -- again -- many creative solution are waiting for me.&lt;/p&gt;

&lt;p&gt;some solution shows that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;read top of the matrix&lt;/li&gt;
&lt;li&gt;cut top of the matrix&lt;/li&gt;
&lt;li&gt;turning matrix count clock wise&lt;/li&gt;
&lt;li&gt;until matrix exists go for another round.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is simple and elegant solution I believe. and this is best solution in Raku. because Raku generally doesn't like many flow control and variables.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/juliodcs/raku/ch-2.raku"&gt;Code&lt;/a&gt; from juliodcs @ PWC&lt;/p&gt;

&lt;p&gt;So I follow the step and make another solution for Haskell Task #2&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.List&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;groupBy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;unfoldr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Maybe&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;catMaybes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;{- tested with:
echo "[a b c d][e f g h][i j k l]" | runhaskell ch-2.hs
echo "[1 2 3][4 5 6][7 8 9]" | runhaskell ch-2.hs
echo "[a b][c d][e f]" | runhaskell ch-2.hs
-}&lt;/span&gt;

&lt;span class="n"&gt;getMatrixFromStdin&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;getMatrixFromStdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;             &lt;span class="c1"&gt;-- 5. (after 3) there is some empty row&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;(`&lt;/span&gt;&lt;span class="n"&gt;notElem&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="s"&gt;"[]"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;     &lt;span class="c1"&gt;-- 4. '[', ']' is not used&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;                             &lt;span class="c1"&gt;-- 3. devide it into rows&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;unlines&lt;/span&gt;                           &lt;span class="c1"&gt;-- 2. make it "]\n"&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;groupBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="sc"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;-- 1. devide row by "]"&lt;/span&gt;
  &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;fmap&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;getContents&lt;/span&gt;

&lt;span class="n"&gt;cutTopAndRotateCCW&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;cutTopAndRotateCCW&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;drop&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;

&lt;span class="n"&gt;getSpiralAarray&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;getSpiralAarray&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;foldr1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;unfoldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                 &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                   &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
                   &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;m'&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cutTopAndRotateCCW&lt;/span&gt; &lt;span class="n"&gt;m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
                               &lt;span class="kt"&gt;Nothing&lt;/span&gt;   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topOf&lt;/span&gt; &lt;span class="n"&gt;m'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                               &lt;span class="kt"&gt;Just&lt;/span&gt;  &lt;span class="n"&gt;m''&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topOf&lt;/span&gt; &lt;span class="n"&gt;m'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;m''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;mat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;topOf&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;getSpiralAarray&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;fmap&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;getMatrixFromStdin&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is elegant solution. but I'm just curious how fast in real world? this solution definitely interpreted faster than &lt;a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/jeongoon/haskell/ch-2.hs"&gt;my previous solution&lt;/a&gt; because it is just simpler in length of code.&lt;/p&gt;

&lt;p&gt;So I run 100 times for same matrix with each solution.&lt;/p&gt;

&lt;p&gt;Firstly, I complied the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ghc &lt;span class="nt"&gt;-O2&lt;/span&gt; ch-2.hs
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ghc &lt;span class="nt"&gt;-O2&lt;/span&gt; ch-2a.hs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Secondly, I prepare the matrix by using Raku (100x100 matrix)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test.txt&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;ra&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;say&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, compare them&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;original solution&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;time &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;seq &lt;/span&gt;1 100&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;haskell/test.txt | ./haskell/ch-2 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; end

________________________________________________________
Executed &lt;span class="k"&gt;in    &lt;/span&gt;2.97 secs   fish           external 
   usr &lt;span class="nb"&gt;time    &lt;/span&gt;2.71 secs   50.90 millis    2.66 secs 
   sys &lt;span class="nb"&gt;time    &lt;/span&gt;0.36 secs   76.69 millis    0.29 secs 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;new simple solution&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;time &lt;/span&gt;&lt;span class="k"&gt;for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;seq &lt;/span&gt;1 100&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cat &lt;/span&gt;haskell/test.txt | ./haskell/ch-2a &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class="p"&gt;;&lt;/span&gt; end

________________________________________________________
Executed &lt;span class="k"&gt;in    &lt;/span&gt;6.41 secs   fish           external 
   usr &lt;span class="nb"&gt;time    &lt;/span&gt;6.06 secs   42.69 millis    6.02 secs 
   sys &lt;span class="nb"&gt;time    &lt;/span&gt;0.45 secs   75.69 millis    0.37 secs 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if the matrix is simpler, less difference expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raku-has-different-story" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Raku Has Different Story&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-088/feng-chang/raku/ch-2.raku"&gt;This Link&lt;/a&gt; a solution from feng-chang @ PWC&lt;br&gt;
and the speed is fascinating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;time cat&lt;/span&gt; ~/my.github/pwc-by-me/088/haskell/test.txt | raku spiral-test.feng-chang.raku &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null

________________________________________________________
Executed &lt;span class="k"&gt;in  &lt;/span&gt;620.94 millis    fish           external 
   usr &lt;span class="nb"&gt;time  &lt;/span&gt;845.44 millis    0.00 micros  845.44 millis 
   sys &lt;span class="nb"&gt;time   &lt;/span&gt;47.49 millis  1321.00 micros   46.17 millis 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;my solution is much slower than that. 😂&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;time cat&lt;/span&gt; ~/my.github/pwc-by-me/088/haskell/test.txt | raku ~/my.github/pwc-by-me/088/raku/ch-2.raku ^/dev/null &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class="nb"&gt;time cat &lt;/span&gt;100x100.txt | raku ~/my.github/pwc-by-me/088/raku/ch-2.raku &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null                                                       2116ms  Mon 30 Nov 2020 21:07:20
Input: &lt;span class="o"&gt;(&lt;/span&gt;Ctrl-D or Ctrl-Z to finish to input.&lt;span class="o"&gt;)&lt;/span&gt;

________________________________________________________
Executed &lt;span class="k"&gt;in    &lt;/span&gt;2.04 secs   fish           external 
   usr &lt;span class="nb"&gt;time    &lt;/span&gt;2.58 secs  1042.00 micros    2.58 secs 
   sys &lt;span class="nb"&gt;time    &lt;/span&gt;0.08 secs  129.00 micros    0.08 secs 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But frankly speaking, I'm not very satisfied with the result. Raku is still mystery for me. but it is worth to learn.&lt;br&gt;
If looking at the history of the common-lisp, we can see well-designed language will survive eventually!!!&lt;/p&gt;

&lt;p&gt;Thank you!! That's all for today.&lt;/p&gt;

</content>
    <author>
      <name>Myoungjin Jeon</name>
    </author>
    <id>https://dev.to/jeongoon/weekly-challenge-088-task-2-off-the-challenge-37d6</id>
    <published>2020-11-30T04:58:18Z</published>
    <updated>2020-11-30T04:58:18Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="haskell"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>My Advent of Code 2019</title>
    <link href="http://domm.plix.at/perl/2020_11_a_very_late_advent_of_code_2019_review.html"/>
    <id>http://domm.plix.at/perl/2020_11_a_very_late_advent_of_code_2019_review.html</id>
    <updated>2020-11-29T19:15:16+00:00</updated>
    <category term="perl"/>
    <summary type="html">I wrote this during and shortly after Advent of Code 2019, but never published it here. Which I'm doing now, just in time before the new 2020 edition :-) I again plan to take part this year (and ...</summary>
    <content type="html">&lt;p&gt;I wrote this during and shortly after &lt;a href="https://adventofcode.com/2019"&gt;Advent of Code 2019&lt;/a&gt;, but never published it here. Which I'm doing now, just in time before the new 2020 edition :-) I again plan to take part this year (and we've set up a private leaderboard, if you want to join, contact me), but hopefull I'll manage to get a bit less involved..&lt;/p&gt;

&lt;p&gt;My code can be found &lt;a href="https://github.com/domm/adventofcode2019"&gt;on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solutions in Perl.&lt;/p&gt;

&lt;p&gt;Most of the time I use &lt;a href="http://timetracker.plix.at/"&gt;App::TimeTracker&lt;/a&gt; to see how long it takes me. I generally try the first part after getting up (~8:00 CET), and the second part after my morning yoga or (depending on work stress / problem complexity) later during the day.&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;A very easy start..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 3:00 / 12:14&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 7494 / 6679&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;We meet Intcode, and I try out some new Perl features. Read more about it &lt;a href="https://domm.plix.at/perl/2019_12_advent_of_code_intcode.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 23:00 / 06:55 / plus more to clean up Intcode.pm&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 5952 / 5091&lt;/p&gt;

&lt;h2&gt;Day 3&lt;/h2&gt;

&lt;p&gt;Not very hard, but I used an array to map all the wires instead of an hash to only index the coordinates, which makes the program not very fast. Oh, and I had a "Lattenzaun" error in the second part (which I realized after getting the wrong answer, and I just corrected the error in my head but not in the code; sorry, &lt;a href="https://github.com/grauwolf"&gt;Farhad&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 36:42 / 14:32&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4363 / 3493&lt;/p&gt;

&lt;h2&gt;Day 4&lt;/h2&gt;

&lt;p&gt;Another simple brute force attack...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; ? / 20:33&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 6324 / 5266&lt;/p&gt;

&lt;h2&gt;Day 5&lt;/h2&gt;

&lt;p&gt;Yay, I can reuse Intcode.pm. Oh no, the new &lt;code&gt;modes&lt;/code&gt; do not work at all with my previous implementation... hence the long time it took me to solve part 1. And my solution to parse the modes is very ugly (Read about it &lt;a href="https://domm.plix.at/perl/2019_12_advent_of_code_intcode_day_5.html"&gt;here&lt;/a&gt; where I also describe how I rewrote / cleaned up Intcode)&lt;/p&gt;

&lt;p&gt;But adding the new opcodes from part 2 was easy and they fit quite well into Intcode.pm!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 1:26:08 / 21:06&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4192 / 3524&lt;/p&gt;

&lt;h2&gt;Day 6&lt;/h2&gt;

&lt;p&gt;Again a not-so-hard problems: graphs. Which I solved by reversing the graph into an array...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/adventofcode/comments/e6tyva/2019_day_6_solutions/f9vjikv/?context=3"&gt;Here&lt;/a&gt; is a slightly golfed solution for part 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 13:35 / 11:45&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3557 / 2981&lt;/p&gt;

&lt;h2&gt;Day 7&lt;/h2&gt;

&lt;p&gt;Intcode again. The first example was not too hard; as I have implemented Intcode in a class, I can just have several instances of the class in one script, where each instance has its own memory.&lt;/p&gt;

&lt;p&gt;But part 2 took me ages (about 2 hours, but I was also watching "TV"), mostly because I did not understood how the inputs / signal / phase settings have to be provided to the amplifiers. Only after reading some of the posts on reddit I understood what I was supposed to do.&lt;/p&gt;

&lt;p&gt;And I also had to change the whole input/output handling if Intcode...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; ? / ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4194 / 6490&lt;/p&gt;

&lt;h2&gt;Day 8&lt;/h2&gt;

&lt;p&gt;Some simple Hash / Array munging again. It took me quite a while to realize that I had to actually "render" the image for part 2, so I can read the message...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 20:52 / 20:09&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 6175 / 5624&lt;/p&gt;

&lt;h2&gt;Day 9&lt;/h2&gt;

&lt;p&gt;Intcode day!&lt;/p&gt;

&lt;p&gt;The large numbers / large memory hints did not bother my Intcode, and the one new opcode / mode was easy to implement. But I wasn't reading the instructions very carefully and did not implement &lt;code&gt;relative mode&lt;/code&gt; for writes, which cost me at least 15min of debugging... But task 2 was very easy!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 26:22 / 1:12&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2651 / 2597&lt;/p&gt;

&lt;h2&gt;Day 10&lt;/h2&gt;

&lt;p&gt;That was a tough one. It took me rather long to understand that the asteroids on the map are tiny points and do not take up the whole block (but it says so very clear in the instructions..). But after grabbing some graph paper and drawing the map I realized that this is not an array problem, but has to be solved with vectors. So, &lt;strong&gt;math&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://metacpan.org/pod/Math::Vec"&gt;Math::Vec&lt;/a&gt; (because it came up first on CPAN) to calculate the unit vector (or "Einheitsvektor", which sound much cooler in German..), and using this unit vector it was trivial to filter out vectors pointing in the same direction.&lt;/p&gt;

&lt;p&gt;After that, I needed a break, and finished the second task in the evening, using a very stupid approach to calculate the angle via tangens, and the sorting the asteroids by angle to nuke them. Even though I was quite proud that I still remembered enough math from school to cobble together my code (using some online math tutorials for the math details), I have the feeling that there are way more elegant solutions than mine...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 1:07:32 / 30:34&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt;  2441 / 4853&lt;/p&gt;

&lt;h2&gt;Day 11&lt;/h2&gt;

&lt;p&gt;Intcode again, but this time there were no changes to the "compiler" necessary, just a simple program using Intcode. For the second part I remembered to "render" the result, reusing the code from day 8 to dump the array in a format where I can read the generated code.&lt;/p&gt;

&lt;p&gt;Oh, and I was very lazy and just used a rather big two-dimensional array for the hull, of which only a small part was actually used. But I did not want to handle negative array indices...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 22:22 / 5:20&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2370 / 2617&lt;/p&gt;

&lt;h2&gt;Day 12&lt;/h2&gt;

&lt;p&gt;The first part was rather easy and straightforward (though my code is overly verbose and can probably be compacted to a few lines of dense Perl). For the second part, I was quite sure that I need to use the least common multiple (LCM), but when I calculated it based on the whole position/vector sets, I got wrong results.&lt;/p&gt;

&lt;p&gt;After reading reddit, I figured out (from various code fragments) that I can calculate each axis on its own, look for the repetition there, and then use the LCM of the first rep on each axis. Which was easy to implement, but I still have no clue &lt;strong&gt;why&lt;/strong&gt; this works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 36:50 / 26:31 + a bit more after reading reddit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3035 / 2071&lt;/p&gt;

&lt;h2&gt;Day 13&lt;/h2&gt;

&lt;p&gt;Part one was a rather easy Intcode exercise, part two not so much.&lt;/p&gt;

&lt;p&gt;As I did not want to play the game, I thought I could cheat by looking at the Intcode source of the game to figure out how the scores are calculated. I wasted an hour adding debugging and introspection to Intcode, but made no progress, so I stopped (and baked a cake).&lt;/p&gt;

&lt;p&gt;Later I added a manual interface so I could actually play the game, the interface was very clunky and I always died before even coming close to cleaning the board. Reddit suggested writing some AI to steer the paddle, which I did (with a lot of hilarious mistakes on my part) and took me another hour.&lt;/p&gt;

&lt;p&gt;But in the end I got a working solution! I added an option to render the game play (at different speeds), and later learned to use &lt;code&gt;byzanz-record&lt;/code&gt; to record my term to a &lt;a href="https://github.com/domm/adventofcode2019/blob/master/13_2.gif"&gt;gif&lt;/a&gt;. To make this nicer, I used some simple unicode chars to render the game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 07:34 / 02:01:16 plus some time for cleanup and recording a gif&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2692 / 3338&lt;/p&gt;

&lt;h2&gt;Day 14&lt;/h2&gt;

&lt;p&gt;Things start to get annoyingly complex, not sure I want too keep up with it for a lot longer...&lt;/p&gt;

&lt;p&gt;In theory, the task looked simple (walk a chain of dependencies, and calculate some sums), but the fact that each reaction produced weird amount of chemicals, and that you have to use the leftovers made this my most-hated task (up to now..). I worked an hour during the late afternoon, and two more after coming back from a friends exhibition.&lt;/p&gt;

&lt;p&gt;The second part was then quite easy, though I got some errors because I forgot to reset the leftovers between each run. And I was too lazy to implement a binary search, and just did a quick guesstimate from the commandline, and then run a stupid incrementing brute force attack (all of which took another 20min, but at 1:00 in the morning...)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 02:53:16 / 00:19:12&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 4954 / 4337&lt;/p&gt;

&lt;h2&gt;Day 15&lt;/h2&gt;

&lt;p&gt;I hardly notice that I'm using Intcode anymore :-)&lt;/p&gt;

&lt;p&gt;Getting to move the droid through the maze was not that hard, but I could not figure out how to implement a proper maze solver, so I went for a "random mouse" approach, which I later finetuned to not enter known dead-ends again.&lt;/p&gt;

&lt;p&gt;I actually found the oxygen system quite fast using a pure random
approach, but spend about 30 minutes implementing the dead-end
detection (because some random runs took ages, and I didn't figure out
how to calculate the minimum distance)&lt;/p&gt;

&lt;p&gt;Getting the minimum distance turned out to be quite easy: I just
counted the steps and stored them at each coordinate; if I later
backtracked through an already visited point, I started counting again
from the distance stored there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/domm/adventofcode2019/master/15_1.gif"&gt;Here is a gif for part 1&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For the second part I took a maybe weird approach: From a previous
run, I had a complete map lying around (when the random mouse was very
thorough), so I applied 4 regex to simulate the spread of the
oxygen:&lt;/p&gt;

&lt;p&gt;```
$maze=~s/.O/oO/g;               # spread left
$maze=~s/O(.{$width})./O$1o/sg; # spread down&lt;/p&gt;

&lt;h1&gt;etc&lt;/h1&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I missed a few corner cases in my first try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s/.O/OO/g&lt;/code&gt; would allow the next regex to pick up an oxygen that was just generated, so I changed the 4 regex to &lt;code&gt;s/.O/Oo/g&lt;/code&gt; and then converted &lt;code&gt;o&lt;/code&gt; to &lt;code&gt;O&lt;/code&gt; after all where done.&lt;/li&gt;
&lt;li&gt;a bit trickier to catch was that if there were two up/downward spreads in the same row, only one would match, so I packed each regex into a while-loop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/domm/adventofcode2019/master/15_2.gif"&gt;And here is a gif for part 2&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 02:05:27 / 00:45:56&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3015 / 2794&lt;/p&gt;

&lt;h2&gt;Day 16&lt;/h2&gt;

&lt;p&gt;A not too hard first part (though my solution is rather convoluted), and a second part I could have never solved without reddit and looking at various solutions.&lt;/p&gt;

&lt;p&gt;I found [this comment]:https://www.reddit.com/r/adventofcode/comments/ebf5cy/2019_day_16_part_2_understanding_how_to_come_up/fb4a34p especially helpful. As pointed out on reddit, the sequence we are looking for is always in the second half of the signal. But the pattern for the second half will only consist of 0 and 1. So we can calculate the next row by working through the current row from behind:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ?  ?  ?  ?
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Work from right to left (i.e. reverse the list). For the last digit, just copy the last digit to the next row (because the last &lt;code&gt;pattern&lt;/code&gt; will always be  &lt;code&gt;… 0 0 0 1&lt;/code&gt;, so we need to add a lot of zeros to &lt;code&gt;1 * last digit&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ?  ?  ?  8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From then on, take the current digit and add the all the following digits, because the pattern will always be &lt;code&gt;… 0 1 1+&lt;/code&gt;. But as we store the sum of this calculation into the next row, we don't have to always calc this long sum. We can just re-use the result of the last calculation, i.e. the field in the next phase we have just calculated:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9 &amp;gt;9&amp;lt; 8
next_phase: ... ?  ?  ? &amp;gt;8&amp;lt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;8 + 9 = 17&lt;/code&gt;, take the last digit (i.e. &lt;code&gt;modulo 10&lt;/code&gt;) and store it in the next phase&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ?  ? &amp;gt;7&amp;lt; 8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the next phase the pre-calced sum trick should be obvious:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
this_phase: ... 6  9  9  8
next_phase: ... ? &amp;gt;?&amp;lt; 7 8
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We could do &lt;code&gt;9 + 9 + 8 = 16&lt;/code&gt;. But we have just calculated &lt;code&gt;9 + 8 = 17 =&amp;gt; mod 10 =&amp;gt; 7&lt;/code&gt; and stored this in the next row. And thanks to math, &lt;code&gt;9 + 7 = 16 =&amp;gt; mod 10 =&amp;gt; 6&lt;/code&gt; yields the same result as &lt;code&gt;9 + 9 + 8 = 16 =&amp;gt; mod 10 =&amp;gt; 6&lt;/code&gt;. yay!&lt;/p&gt;

&lt;p&gt;so, this will be much quicker: 9 + 7 = 16 =&gt; 6; 6 + 6 = 12 =&gt; 2, ...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 36:38 / at least 2 hours&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2612 / 2374 - wow, good rank at 12:52:09 :-)&lt;/p&gt;

&lt;h2&gt;Day 17&lt;/h2&gt;

&lt;p&gt;That was a nice one, by favorite puzzle so far!&lt;/p&gt;

&lt;p&gt;The first part was rather easy, just convert the Incode output to ASCII and then walk the map to find intersections.&lt;/p&gt;

&lt;p&gt;For the second part, it took me some time to rework my run-loop to handle all the input/output (I should really add a proper &lt;code&gt;prompt&lt;/code&gt; method to Intcode). I really liked the "live video feed" feature and spend some time implementing a clear-screen feature so I can properly view the feed.&lt;/p&gt;

&lt;p&gt;For solving the actual puzzle, I was too lazy to implement anything. Instead I just counted the steps / directions by hand, wrote them down, and very easily spotted the correct pattern. This took my less then 10 minutes, considerably faster then any smart solution I could code (the human brain &lt;strong&gt;is&lt;/strong&gt; a quite powerful computer / pattern detector, especially when we're only caring about one case...)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time:&lt;/strong&gt; 28:24 / 56:41 (45min to get IO etc working, then 10 minutes to solve the maze by hand)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2072 / 1062 (damn it, just missed 3 digits, but best rank ever)&lt;/p&gt;

&lt;h2&gt;Day 18&lt;/h2&gt;

&lt;p&gt;No, thanks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: - / -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; - / -&lt;/p&gt;

&lt;h2&gt;Day 19&lt;/h2&gt;

&lt;p&gt;Part 1 was another easy Intcode test. Part 2 was not that hard (in the end), but I managed to fuck up quite spectacularly.&lt;/p&gt;

&lt;p&gt;First I was doing a lookahead 100 rows down, but always used the same y coordinate. But of course you have to go to the end of the current row, subtract 100 and look down from there. As I wasn't finding anything, I did quite some calculations on the slope of the beam, and jumped 10.000 rows ahead. But I could never find something because I was looking in the wrong place.&lt;/p&gt;

&lt;p&gt;After I realized that I implemented a proper lookahead, but I called my &lt;code&gt;scan&lt;/code&gt; function with bad params (I forgot to pass in the row, so I was always checking the 0th row... I guess one can find an argument for strong typing or at least param validation / signatures here...)&lt;/p&gt;

&lt;p&gt;After I fixed that, I found the result reasonably fast using brute force (and some skipping).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 08:59 / 02:47:06&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 1731 / 1862&lt;/p&gt;

&lt;h2&gt;Day 20&lt;/h2&gt;

&lt;p&gt;ugh, another maze. I still don't feel like a rat, so another skip for me...&lt;/p&gt;

&lt;p&gt;But maybe I should learn how to write a maze solver some time before next advent :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: - / -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; - / -&lt;/p&gt;

&lt;h2&gt;Day 21++&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;if ($holidays-&amp;gt;started) { $me-&amp;gt;stop('advent') }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I might do some/all tasks later...&lt;/p&gt;

&lt;h2&gt;Day 22 (part 2 done on the 28th)&lt;/h2&gt;

&lt;p&gt;Some simple array munging, which does not scale for part 2 :-(&lt;/p&gt;

&lt;p&gt;I "solved" part 2 on the 28th; even after reading a lot of the reddit posts, I had no idea how to implement the math. So I took the Python code found &lt;a href="https://www.reddit.com/r/adventofcode/comments/ee0rqi/2019_day_22_solutions/fbpz92k"&gt;here&lt;/a&gt; and reimplemented it in Perl, which is rather convoluted thanks to Math::BigInt (well, at least it works...). But after getting the correct result, I figured out how to replace most of the method calls like &lt;code&gt;bmul&lt;/code&gt; and &lt;code&gt;bsub&lt;/code&gt; with overloaded operators, making the final code much cleaner (and more similar to the Python solution).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 32:06 / 01:24:17&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2984 / 2617&lt;/p&gt;

&lt;h2&gt;Day 23 (done on 27th evening)&lt;/h2&gt;

&lt;p&gt;Some nice Intcode hacking, I added some more helpers to my Intcode (and needed to finally add buffered output..)&lt;/p&gt;

&lt;p&gt;Part 1 was rather easy and straight-forward: set up 50 Intcode machines, loop through each one, set some input, get the output and set the next inputs.&lt;/p&gt;

&lt;p&gt;Part 2 was basically the same, but I had a problem in my Intcode, where output values would be lost unless you very carefully collect return values. As this was too fragile, I finally added some buffered output helper methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 33:04 / 01:09:23&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3463 / 3328&lt;/p&gt;

&lt;h2&gt;Day 24 (done on 27th morning)&lt;/h2&gt;

&lt;p&gt;The first part was a rather easy Game Of Life, which I implemented using nested arrays.&lt;/p&gt;

&lt;p&gt;For the second part I converted my data structure to an hash using a string for level/row/col (&lt;code&gt;-3;1;3&lt;/code&gt;) for the index. I solved the recursion by pushing new layer-tiles onto a queue (well, an array...), but somehow added a new layer each minute, resulting in a lot of empty layers. But as the runtime is 14s, I'm not very motivated to fix that bug. Oh, and I lost aprox 10 minutes because I still used the test data when submitting my result (and then tried to figure out what the bug could be..)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 33:44 / 1:56:39&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 3975 / 2896&lt;/p&gt;

&lt;h2&gt;Day 25&lt;/h2&gt;

&lt;p&gt;Hm, it was very easy to get some Intcode processor to manually explore the ship and figure out which items to collect where. Then it took me ages to correctly use Math::Combinatorics to get all the combinations of items to try. And in the end my Intcode just crashed after providing the hopefully correct solution (which I fixed now, see next para)&lt;/p&gt;

&lt;p&gt;I verified my solution using &lt;a href="https://github.com/choroba/"&gt;somebody elses&lt;/a&gt; solution. ~~So it seems there is a bug in my Intcode???~~ No, the problem was that for debugging I buffered the output, but did not print the output after the last iteration. D'oh!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: 2:17:57 / -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rank:&lt;/strong&gt; 2142 / -&lt;/p&gt;
</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/29#pwc088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2 id="part-1">Part 1</h2>
<p><em>You are given an array of positive integers <span class="citation" data-cites="N">@N</span>. Write a script to return an array <span class="citation" data-cites="M">@M</span> where $M[i] is the product of all elements of <span class="citation" data-cites="N">@N</span> except the index $N[i].</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given an array of positive integers @N.
# Write a script to return an array @M where $M[i] 
# is the product of all elements of @N except the index $N[i].
##
sub list_product{
    my @numbers = @_;
    my $product = 1;
    map {$product *= $_ } @numbers;
    return $product;
}

MAIN:{
    my(@N, @M);
    @N = (5, 2, 1, 4, 3);
    for my $i (0 .. (@N - 1)){
        my @numbers = @N[0 .. $i - 1, $i+1 .. (@N - 1)];
        push @M, list_product(@numbers);
    }
    print "(" . join(", ", @M) . ")\n";
    @M = ();
    @N = (2, 1, 4, 3);
    for my $i (0 .. (@N - 1)){
        my @numbers = @N[0 .. $i - 1, $i+1 .. (@N - 1)];
        push @M, list_product(@numbers);
    }
    print "(" . join(", ", @M) . ")\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
(24, 60, 120, 30, 40)
(12, 24, 6, 8)
</code></pre>
<h3 id="notes">Notes</h3>
<p>Taking the product of a list of numbers is a well known perl idiom using <a href="https://perldoc.perl.org/functions/map">map</a>. To keep the code somewhat cleaner I placed the list_product computation in it’s own subroutine. The trickiest part, then, is to make sure the list has the right element removed. This is done using array slices. as we loop over the array of numbers we construct a list of indices which do not include the current element.</p>
<p>Another possible approach would be to use a <code>map</code> inside the loop to identify the elements we want to retain. I decided against that approach since it would be a second complete full iteration over the list. To be fair, I don’t necessarily try to always make these challenge solutions all that efficient, but this just happened to strike me as particularly egregious at the time!</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given m x n matrix of positive integers. Write a script to print spiral matrix as a list.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
##
# You are given m x n matrix of positive integers.
# Write a script to print spiral matrix as a list.
##
sub print_remove_top{
    my(@matrix) = @_;
    print join(", ", @{$matrix[0]}) . ", ";
    splice(@matrix, 0, 1);
    return @matrix;
}

sub print_remove_right{
    my(@matrix) = @_;
    my @right;
    for my $row (@matrix){
        push @right, $row-&gt;[-1];
        my @a = @{$row}[0 .. (@{$row} - 2)];
        $row = \@a;
    }
    print join(", ", @right) . ", ";
    return @matrix;
}

sub print_remove_bottom{
    my(@matrix) = @_;
    print join(", ", reverse(@{$matrix[-1]})) . ", ";
    splice(@matrix, -1);
    return @matrix;
}

sub print_remove_left{
    my(@matrix) = @_;
    my @left;
    for my $row (@matrix){
        push @left, $row-&gt;[0];
        my @a = @{$row}[1 .. (@{$row} - 1)];
        $row = \@a;
    }
    print join(", ", reverse(@left)) . ", ";
    return @matrix;
}

sub spiral_print{
    my(@matrix) = @_;
    print "[";
    {
        @matrix = print_remove_top(@matrix) if @matrix;
        @matrix = print_remove_right(@matrix) if @matrix;
        @matrix = print_remove_bottom(@matrix) if @matrix;
        @matrix = print_remove_left(@matrix) if @matrix;
        redo if @matrix;
    }
    print "\b\b]\n";
}

MAIN:{
    spiral_print(
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    );
    spiral_print(
        [ 1,  2,  3,  4],
        [ 5,  6,  7,  8],
        [ 9, 10, 11, 12],
        [13, 14, 15, 16]
    );
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
[1, 2, 3, 6, 9, 8, 7, 4, 5] 
[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] 
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>The spiral print works in a repeated pattern from the outside in: top row, right column, bottom row, left column. My solution put each print/remove step of this pattern in their own subroutines. A few things worth pointing out</p>
<ul>
<li>The matrix is a 2d array: a perl array with inner array references.</li>
<li>In some cases I use <a href="https://perldoc.perl.org/functions/splice">splice</a> to remove from the matrix. <code>splice</code> doesn’t work on array references (since perl v5.24) so when needing to remove from the matrice’s inner array references I just use the slicing syntax.</li>
<li><a href="https://perldoc.perl.org/functions/redo">redo</a> looked better to me than the equivalent <code>while</code> loop although obviously either one would work fine.</li>
<li>for the spiral effect we need to print bottom up and right to left. In those cases I first use <a href="https://perldoc.perl.org/functions/reverse">reverse</a> on the elements being printed.</li>
</ul></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc088</id>
    <published>2020-11-29T13:56:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CY's Take on PWC#088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9969</id>

    <published>2020-11-29T12:06:36Z</published>
    <updated>2020-11-29T12:18:22Z</updated>

    <summary> If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email).This blogpost is not in shortage of unanswered questions... Task 1 Array of...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[
<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i><br /></p><p><br /></p><p>This blogpost is not in shortage of unanswered questions...<br /></p>



<h4>Task 1 Array of Product</h4>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">myproduct</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@arr</font>&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#&nbsp;short&nbsp;for&nbsp;"previous&nbsp;product"</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@arr</font>,&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#0000ff">$#arr</font>-<font color="#00007f">1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$entry</font>&nbsp;=&nbsp;<font color="#0000ff">$pre_prod</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$entry</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">$i</font>+<font color="#00007f">1.</font>.<font color="#0000ff">$#arr</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$i</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$entry</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
</tt></div>

<div>The above, I designed, is a prototype for multiplication (and division, if possible) when it is expensive to do mulitplication,
such as matrices. Since I don't know much about
<a href="https://en.wikipedia.org/wiki/Matrix_multiplication_algorithm">those algorithmic knowledge</a>, just leave the codes here for personal future digestion.</div>

<div>---</div>

<div>What I have submitted is an one-liner:</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$_</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br />
</tt></div>

<div><br /><br />I get another item for "investigation" here. Why doesn't the following line work?</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$i</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$i</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br /></tt>


<h4><br /></h4><h4>Task 2 Spiral Matrix</h4>

<h5>the Testing</h5>

<div>This is time for <tt>Test::Deep</tt> and <tt>Test::More</tt> again:</div>

<pre>cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,],
    [  7, 8, 9,  ]]),
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5  ]
, "Example 1");
cmp_deeply(
    flat([[  1,  2,  3,  4 ],
    [  5,  6,  7,  8 ],
    [  9, 10, 11, 12 ],
    [ 13, 14, 15, 16 ]]), 
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
, "Example 2");
cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,]]),
    [ 1, 2, 3, 6, 5, 4 ]
, "small test case");

cmp_deeply(
    flat([
    [ 2, 3, 5, 7],
    [11,13,17,19],
    [23,29,31,37],
    [41,43,47,53],
    [59,61,67,71]])
, [2, 3, 5, 7, 19, 37, 53, 71, 67, 61, 59,
    41, 23, 11, 13, 17, 31, 47, 43, 29]
, "prime numbers 5 x 4");
</pre>

<pre>$ perl ch-2.pl
1..4
ok 1 - Example 1
ok 2 - Example 2
ok 3 - small test case
ok 4 - prime numbers 5 x 4
</pre>

Or customize a test:

<pre>$ perl ch-2.pl 3 5 A B C D E F G H I J K L M N 
[A, B, C, D, E]
[F, G, H, I, J]
[K, L, M, N, O]
A, B, C, D, E, J, O, N, M, L, K, F, G, H, I
</pre>

<h5>the codes</h5>

<div>Honestly I did not plan much on the task. (I) I created a "helper matrix" (<tt>@helper_mat</tt>)
 to record which terms on the original matrix is traversed: traversed, 
1; not yet traversed, 0. (II) I went through the outermost terms -- the 
four sides -- of the matrix by counting off one by one. (III) I made use
 of a boolean variable <tt>$success_click</tt> to tackle the change of direction.</div>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">flat</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@mat</font>&nbsp;=&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff"><b>$_</b></font>[0]};&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$M</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$N</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$mat</font>[0]};<br />
<br />
<font color="#7f7f7f"><i>#&nbsp;(I)&nbsp;initialize&nbsp;of&nbsp;the&nbsp;helper&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@helper_mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@helper_mat</font>,&nbsp;[(<font color="#ffa500">"</font><font color="#ff0000">0</font><font color="#ffa500">"</font>)&nbsp;x&nbsp;<font color="#0000ff">$N</font>]&nbsp;<b>for</b>&nbsp;(0..<font color="#0000ff">$M</font>-<font color="#00007f">1</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;(&nbsp;&nbsp;0,&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;(&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>,&nbsp;&nbsp;0&nbsp;);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$r</font>,&nbsp;<font color="#0000ff">$c</font>)&nbsp;=&nbsp;(&nbsp;0&nbsp;,&nbsp;0&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(I)</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<font color="#7f7f7f"><i>#&nbsp;(II): &nbsp;preparation&nbsp;of&nbsp;clockwise&nbsp;traverse&nbsp;of&nbsp;the&nbsp;outermost&nbsp;part&nbsp;of&nbsp;the&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br />
<font color="#7f7f7f"><i>(II): traverse the outermost matrix terms</i></font><font color="#7f7f7f"><i><br />
</i></font>
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$q</font>&nbsp;(0.<font color="#00007f">.3</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">@</font>{<font color="#0000ff">$numbering</font>[<font color="#0000ff">$q</font>]})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(II)</i></font><br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;<font color="#00007f">3</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$count</font>&nbsp;&lt;&nbsp;<font color="#0000ff">$M</font>*<font color="#0000ff">$N</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$success_click</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;==&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$count</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)&nbsp;</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;(<font color="#0000ff">$time_now</font>+<font color="#00007f">1</font>)&nbsp;%&nbsp;4;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
<br />
</tt></div>

<h5>Extras</h5>

<div><i>Here I am going to describe two extra functionalities I added:</i></div>

<div>(A) I find that addition or modification of a few lines can create anticlockwise traverse:</div>

<div><tt>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@row_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@col_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$M</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$M</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br />
</tt></div>

<div><br /></div><div><br /></div><div><br /></div><div>(B) An inverse subroutine <tt>&amp;matrixize</tt> for the original task: given parameters <tt>m</tt>, <tt>n</tt>, put a list of <tt>m x n</tt> integers as a <tt>m x n</tt> spiral matrix.</div>

<div>
<br /><br />
Code inserted:
<div><pre><tt><b>my</b>&nbsp;<font color="#0000ff">@test</font>&nbsp;=&nbsp;matrixize([<font color="#00007f">1..60</font>],&nbsp;<font color="#00007f">6</font>,&nbsp;<font color="#00007f">10</font>);<br />
print_matrix([<font color="#0000ff">@test</font>]);<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;end</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
</tt></pre></div>

Output:
<pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[28, 29, 30, 31, 32, 33, 34, 35, 36, 11]
[27, 48, 49, 50, 51, 52, 53, 54, 37, 12]
[26, 47, 60, 59, 58, 57, 56, 55, 38, 13]
[25, 46, 45, 44, 43, 42, 41, 40, 39, 14]
[24, 23, 22, 21, 20, 19, 18, 17, 16, 15]
test end

</pre>
</div>

<div>The codes for this subroutine (<tt>&amp;matrixize</tt>) largely reuse that in <tt>&amp;flat</tt>.</div><div><br /></div>

<h5>Dissatifaction</h5>

<div><ol><li>As said, can one make a more maintainable and concise version of <tt>&amp;matrixize</tt> and <tt>&amp;flat</tt>? (A bit more thought: the current <tt>&amp;matrixize</tt> has only clockwise version.)</li><li>I could set every initial term as <tt>0</tt>, <tt>'z'</tt>, <tt>'.'</tt> or <tt>undef</tt>, etc. , hence skipped <tt>@helper_mat</tt> with little amount of typing. Is there a case which a <tt>@helper_mat</tt> is really need?</li><li><tt>$success</tt> changes once or none for each occupant of the 
matrix (a note for more preciseness: except those of the "perimeter" of 
the matrix). Are there any cases which a <tt>$success</tt> is need to change twice? (Or change with respect to a task with more subtlies?)</li></ol></div>

<div>For the latter two questions, I am thinking whether irregular 2D boards can make full use of <tt>@helper_mat</tt> and <tt>$success</tt>. But <u>not</u> every irregular 2D polyomino can have a spiral path traversing each grid... </div>

<div>...</div>
<div>...</div>
<div>...</div>

<hr>

<p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p>

<p>Stay alert and healthy! □</p>


<div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt></i>
</div>


<hr>
<pre>Irregular boards:

sample input 1:
######### 
# * * x #
# * * * # 
# * * * # 
# * * x # 
#########

sample output 1:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 5 4 # 
# 7 6 x # 
#########

sample input 2:
######### 
# * * x #
# * * * # 
# * * * # 
# x * * # 
#########

sample output 2:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 7 4 # 
# x 6 5 # 
#########

sample input 3:
######### 
# * * * #
# * * * # 
# x * * # 
# x * * # 
#########

sample output 3:
######### 
# 0 1 2 #
# 9 8 3 # 
# x 7 4 # 
# x 6 5 # 
#########
</pre>




</div>]]>
        
    </content>
</entry>
  <entry>
    <title>A few tips for Perl on Docker and Kubernetes</title>
    <link rel="alternate" href="https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/davorg"&gt;@davorg&lt;/a&gt;
 started a thread on the FB &lt;a href="https://web.facebook.com/groups/perlcommunity/permalink/877301896410771/"&gt;Perl Community&lt;/a&gt; and &lt;a href="https://web.facebook.com/groups/perlprogrammers/permalink/3786053688094058/"&gt;Perl Programmers&lt;/a&gt; about &lt;a href="https://hub.docker.com/_/perl"&gt;docker-perl&lt;/a&gt;, and as its maintainer, I'm overdue sharing some tips about it so might as well write them here now:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-custom-nametag-for-perl-images-you-use" class="anchor"&gt;
  &lt;/a&gt;
  Use a custom name/tag for Perl images you use
&lt;/h3&gt;

&lt;p&gt;As documented in the Docker Hub, one can use the &lt;code&gt;perl&lt;/code&gt; image with something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull perl
docker run &lt;span class="nt"&gt;-it&lt;/span&gt; perl perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'say "hi there from Docker!"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While doing this is enough for simple or exploratory cases, it is inadequate for development or deployment scenarios, as &lt;code&gt;perl&lt;/code&gt; alone will pull the latest Perl image &lt;em&gt;build&lt;/em&gt; of the latest supported Perl version (which is &lt;code&gt;5.32.0&lt;/code&gt; &lt;em&gt;now&lt;/em&gt; but could be different later on.)  Fortunately, docker-perl provides &lt;em&gt;tags&lt;/em&gt; to indicate specific versions (as well as options like &lt;code&gt;:threaded&lt;/code&gt;) or size variants (like &lt;code&gt;:slim&lt;/code&gt;) so one can also do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull perl:5.32-buster
docker run &lt;span class="nt"&gt;-it&lt;/span&gt; perl:5.32-buster perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'say qq{hi again!}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is another concern though: while Docker images have tags, these tags are &lt;em&gt;floating&lt;/em&gt; in the sense that they don't always point to the same underlying image layer at creation time, as tags can be updated to point to another layer.  This is best seen in the &lt;code&gt;:latest&lt;/code&gt; tag which Docker uses by default when calling images with their bare names, but this behavior is also present in any other tags like &lt;code&gt;:5&lt;/code&gt; which is pointing currently to &lt;code&gt;:5.32.0&lt;/code&gt;, but might later be updated to point to &lt;code&gt;:5.32.1&lt;/code&gt; or even &lt;code&gt;:5.34.0&lt;/code&gt;, when the &lt;a href="https://github.com/docker-library/official-images/blob/master/library/perl"&gt;perl manifest on docker-library/official-images&lt;/a&gt; is updated.&lt;/p&gt;

&lt;p&gt;These tags also get updated indirectly by way of updates on their &lt;em&gt;base&lt;/em&gt; images; as docker-perl uses the &lt;a href="https://hub.docker.com/_/buildpack-deps"&gt;&lt;code&gt;buildpack-deps&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://hub.docker.com/_/debian/"&gt;&lt;code&gt;debian:slim&lt;/code&gt;&lt;/a&gt; base images, when these get updated for security patches, these patches will eventually make their way into the &lt;code&gt;perl&lt;/code&gt; images as well through the &lt;a href="https://doi-janky.infosiftr.net/job/multiarch/"&gt;official-images build tooling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For cases that require finer control of images, it might be helpful then to use a custom image name, tag, or both, when using docker-perl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker pull perl:5.32-slim-threaded-buster
docker tag perl:5.32-slim-threaded-buster myorg/perl:5.32
docker run &lt;span class="nt"&gt;-it&lt;/span&gt; myorg/perl:5.32 perl &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'printf "hello from myorg/perl v%vd!\n", $^V'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This allows for some independence for updates and development between the &lt;code&gt;perl&lt;/code&gt; published on Docker Hub and &lt;code&gt;myorg&lt;/code&gt;'s custom &lt;code&gt;perl&lt;/code&gt; image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# docker build -t myorg/myapp:dev .&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; myorg/perl:5.32&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cpanm &lt;span class="nt"&gt;--installdeps&lt;/span&gt; .
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["perl", "myapp.pl"]&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#consider-keeping-a-localprivate-registry-to-host-perl-images" class="anchor"&gt;
  &lt;/a&gt;
  Consider keeping a local/private registry to host Perl images
&lt;/h3&gt;

&lt;p&gt;Using the perl images (especially like in the previous section) means that these will be copied into the local Docker host image storage, usually in &lt;code&gt;/var/lib/docker/images&lt;/code&gt; but could vary depending on what &lt;a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/"&gt;storage driver&lt;/a&gt; your host is using.  While this is usually enough in simple cases, consider that the base &lt;code&gt;perl&lt;/code&gt; image is usually big (around 700-800MB unpacked,) so pulling this image afresh over multiple container hosts on a network will probably be wasteful.&lt;/p&gt;

&lt;p&gt;Hence it is usually recommended to have some kind of local or private &lt;em&gt;registry&lt;/em&gt; in the host or on a network if frequently working with containers (and more so if internet connectivity is slower/expensive.)  There are several approaches to do this, and I've written about these before in my old blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zakame.net/blog/2017/12/composing-a-docker-hub-mirror-and-private-registry.html"&gt;Composing a Docker Hub mirror and private registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zakame.net/blog/2017/07/mirroring-the-docker-hub.html"&gt;Mirroring the Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nowadays though, there are more options for using local/private registries: for example, if you have a Kubernetes cluster running in your network (or even as a small setup like &lt;a href="https://microk8s.io"&gt;microk8s&lt;/a&gt;, or an internal Docker container cluster using &lt;a href="https://kind.sigs.k8s.io"&gt;KinD&lt;/a&gt; or &lt;a href="https://k3d.io"&gt;k3d&lt;/a&gt;,) there's usually an addon &lt;br&gt;
that enables a local registry on the cluster.  Here's &lt;a href="https://microk8s.io/docs/registry-built-in"&gt;an example&lt;/a&gt; for microk8s, which I extended for my own local network to be served under a &lt;a href="https://kubernetes.github.io/ingress-nginx/examples/tls-termination/"&gt;TLS ingress&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;microk8s &lt;span class="nb"&gt;enable &lt;/span&gt;registry
microk8s kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_SVC&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: default
spec:
  # microk8s deploys registry in its own namespace, so reach out
  externalName: registry.container-registry.svc.cluster.local
  ports:
  - name: registry
    port: 5000
    protocol: TCP
    targetPort: 5000
  type: ExternalName
&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_SVC
&lt;/span&gt;microk8s kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_INGRESS&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: registry
  namespace: default
spec:
  rules:
  # I don't own home.example btw, just for illustration;
  # I use globally-accessible subdomains pointing to private IP
  - host: registry.home.example
    http:
      paths:
      - backend:
          serviceName: registry
          servicePort: 5000
  tls:
  - hosts:
    - registry.home.example
    secretName: wildcard-home-example
&lt;/span&gt;&lt;span class="no"&gt;REGISTRY_INGRESS
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I have a &lt;a href="https://letsencrypt.org"&gt;LetsEncrypt&lt;/a&gt; wildcard SSL cert installed and maintained on my microk8s via &lt;a href="https://cert-manager.io"&gt;cert-manager&lt;/a&gt;, so this lets me push to this registry anywhere on my local network as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push myorg/perl:5.32 registry.home.example/myorg/perl:5.32
docker push myorg/myapp:dev registry.home.example/myorg/myapp:dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and on somewhere else which might be running &lt;a href="https://podman.io"&gt;Podman&lt;/a&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;podman run &lt;span class="nt"&gt;-it&lt;/span&gt; registry.home.example/myorg/perl:5.32 perl &lt;span class="nt"&gt;-V&lt;/span&gt;
podman run &lt;span class="nt"&gt;-d&lt;/span&gt; registry.home.example/myorg/myapp:dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It also works on authoring &lt;code&gt;Dockerfile&lt;/code&gt;s, especially useful when implementing GitOps workflows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# docker build -t myorg/mojo:8.65&lt;/span&gt;
&lt;span class="c"&gt;# docker push myorg/mojo:8.65 registry.home.example/myorg/mojo:8.65&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; registry.home.example/myorg/perl:5.32&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cpanm Mojolicious@8.65
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/local/bin/mojo", "daemon"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For more sophisticated/production deployments, consider using &lt;a href="https://goharbor.io/"&gt;Harbor&lt;/a&gt; or vendors such as &lt;a href="https://aws.amazon.com/ecr/"&gt;Amazon ECR&lt;/a&gt;, &lt;a href="https://cloud.google.com/container-registry/"&gt;Google Container Registry&lt;/a&gt; or &lt;a href="https://quay.io/"&gt;Red Hat Quay&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-container-entrypoint-for-proper-signals-handling-in-perl" class="anchor"&gt;
  &lt;/a&gt;
  Use container entrypoint for proper signals handling in Perl
&lt;/h3&gt;

&lt;p&gt;This is already documented in the &lt;a href="https://github.com/docker-library/docs/tree/master/perl#signal-handling-behavior-notice"&gt;official-images docs&lt;/a&gt; for perl, but bears repeating here: containers don't provide a &lt;em&gt;parent init process&lt;/em&gt; by default, which means that when starting a new container, any &lt;a href="https://docs.docker.com/engine/reference/builder/#entrypoint"&gt;ENTRYPOINT&lt;/a&gt; or &lt;a href="https://docs.docker.com/engine/reference/builder/#cmd"&gt;CMD&lt;/a&gt; set in the image the container will boot from will usually become the parent process within this container.  This is important to note here for Perl (and also for other languages) as these tend to fall back to their parent init process for handling signals, so without this, it can appear to become unresponsive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run perl:5.32 perl -E 'sleep 300'
^C
[refuses to die, even if sent SIGINT like above]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is particularly important for Kubernetes, as its &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/"&gt;container pod lifecycle&lt;/a&gt; can use signals to probe for liveness or readiness of containers, and a running pod/container can seem to "hang" around indefinitely if these signals aren't handled correctly.&lt;/p&gt;

&lt;p&gt;For perl, one needs to install a &lt;a href="https://perldoc.pl/perlipc#Signals"&gt;&lt;code&gt;%SIG&lt;/code&gt; handler&lt;/a&gt; if they want/need to run perl directly as PID 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run perl:5.32 perl -E '$SIG{TERM} = sub { $sig++; say "recv TERM" }; sleep 300; say "waking up" if $sig'
^C
waking up
recv TERM
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For most normal deployments however, it is easier to use a tool like &lt;a href="https://github.com/krallin/tini"&gt;tini&lt;/a&gt;, &lt;a href="https://github.com/openSUSE/catatonit"&gt;catatonit&lt;/a&gt;, or &lt;a href="https://github.com/Yelp/dumb-init"&gt;dumb-init&lt;/a&gt; for the container's &lt;code&gt;ENTRYPOINT&lt;/code&gt;, alongside your perl script/executable in &lt;code&gt;CMD&lt;/code&gt;, for example this small &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt; demo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# docker build -t mojo-with-tini:dev .&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; perl:5.32-buster&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--no-install-recommends&lt;/span&gt; tini &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    cpanm Mojolicious
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["/usr/bin/tini", "--"]&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/usr/local/bin/mojo", "daemon"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For Kubernetes, one can also set the &lt;a href="https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes"&gt;&lt;code&gt;command&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;&lt;/a&gt; for a pod:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;MOJO_POD&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: v1
kind: Pod
metadata:
  name: mojo-with-tini-demo
  labels:
    purpose: demonstrate-perl-signal-handling
spec:
  containers:
  - name: mojo-with-tini-demo-container
    image: mojo-with-tini:dev
    # redundant as we already set these in the Dockerfile above,
    # but showing here for illustration
    command: ["/usr/bin/tini", "--"]
    args: ["/usr/local/bin/mojo", "daemon"]
&lt;/span&gt;&lt;span class="no"&gt;MOJO_POD
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outro" class="anchor"&gt;
  &lt;/a&gt;
  Outro
&lt;/h3&gt;

&lt;p&gt;There's a few more tips on the queue that I'd write more here but this post is getting rather long now, so maybe later.&lt;/p&gt;

&lt;p&gt;I'd love to hear more about how people use docker-perl, and especially more about how make developing Perl projects on container environments easier!&lt;/p&gt;

</content>
    <author>
      <name>Zak B. Elep</name>
    </author>
    <id>https://dev.to/zakame/a-few-tips-for-perl-on-docker-and-kubernetes-29bg</id>
    <published>2020-11-29T11:49:11Z</published>
    <updated>2020-11-29T11:49:11Z</updated>
    <category term="perl"/>
    <category term="docker"/>
    <category term="kubernetes"/>
    <category term="devops"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/samir_parikh/2020/11/perl-weekly-challenge-088.html"/>
    <id>tag:blogs.perl.org,2020:/users/samir_parikh//3527.9968</id>

    <published>2020-11-29T13:04:02Z</published>
    <updated>2020-11-29T03:13:25Z</updated>

    <summary>Despite the holiday week here in the U.S., I was able to tackle this week's Perl Weekly Challenge. I have to say that this week's challenge was the most satisfying for me as it allowed me to not only come...</summary>
    <author>
        <name>Samir Parikh</name>
        <uri>https://samirparikh.com</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/samir_parikh/">
        <![CDATA[<p>Despite the holiday week here in the U.S., I was able to tackle this week's <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Perl Weekly Challenge</a>.  I have to say that this week's challenge was the most satisfying for me as it allowed me to not only come up with a novel solution (for me!), but it also provided an opportunity for me to leverage two areas of Perl programming that have been a real challenge for me:  recursion and references.  The deadline to submit solutions for this challenge is <a href="https://www.timeanddate.com/countdown/generic?iso=20201129T2359&amp;p0=136&amp;msg=Perl+Weekly+Challenge+088+Deadline&amp;font=serif">fast approaching</a> so if you haven't solved it yourself yet, you may want to come back to this post later.</p>

<h2>Task 1</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/#TASK1">Task #1</a>, "Array of Product", asks the following:</p>

<blockquote>
  <p>You are given an array of positive integers <code>@N</code>.</p>

<p>Write a script to return an array <code>@M</code> where <code>$M[i]</code> is the product of all elements of <code>@N</code> except the index <code>$N[i]</code>.</p>

<p>Example 1:</p>
</blockquote>

<pre><code>    Input:
        @N = (5, 2, 1, 4, 3)
    Output:
        @M = (24, 60, 120, 30, 40)

        $M[0] = 2 x 1 x 4 x 3 = 24
        $M[1] = 5 x 1 x 4 x 3 = 60
        $M[2] = 5 x 2 x 4 x 3 = 120
        $M[3] = 5 x 2 x 1 x 3 = 30
        $M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<blockquote>
  <p>Example 2:</p>
</blockquote>

<pre><code>    Input:
        @N = (2, 1, 4, 3)
    Output:
        @M = (12, 24, 6, 8)

        $M[0] = 1 x 4 x 3 = 12
        $M[1] = 2 x 4 x 3 = 24
        $M[2] = 2 x 1 x 3 = 6
        $M[3] = 2 x 1 x 4 = 8
</code></pre>

<p>Like many of my prior solutions, I settled for using a brute force technique to solve this task.  I used an outer <code>for</code> loop iterating a variable <code>$i</code> which moves through each element in the input array <code>@N</code>.  An inner <code>for</code> loop using the variable <code>$j</code> does the same thing.  Both loops start at index <code>0</code> and go through the last index of the array.  An <code>if</code> statement checks to see whether or not <code>$i</code> and <code>$j</code> are equal.  If they are <em>not</em>, we update the running <code>$product</code> variable which is keeping track of our current product for <code>$M[0]</code>, <code>$M[1]</code>, etc. to satisfy the "product of all elements of <code>@N</code> except the index <code>$N[i]</code>" portion of the requirement.  If <code>i$</code> and <code>$j</code> are equal, we just move on to the next value of <code>$j</code>.  Once we are done executing the inner loop for a given value of <code>$i</code>, we update our output array <code>@M</code> by <code>push</code>ing the current value of <code>$product</code> into the end of the array <code>@M</code>.</p>

<p>This was actually the easy part.</p>

<p>The difficult part was formatting the output to match what was given in the challenge.  Not only do you have to print the summary of the products of the elements, e.g.:</p>

<pre><code>@M = (24, 60, 120, 30, 40)
</code></pre>

<p>but you also have to print the individual products for each element of <code>@M</code>:</p>

<pre><code>$M[0] = 2 x 1 x 4 x 3 = 24
$M[1] = 5 x 1 x 4 x 3 = 60
$M[2] = 5 x 2 x 4 x 3 = 120
$M[3] = 5 x 2 x 1 x 3 = 30
$M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<p>The tricky part is you have to print the summary <strong>before</strong> the individual line items have been determined (i.e. you don't know what the final elements of the array <code>@M</code> are until you calculate them all).</p>

<p>To solve this portion of the problem, I relied on two string variables:  <code>$m_string</code> and <code>$output_string</code>.  The former string contains each individual product equation for each element of the array <code>@M</code>:</p>

<pre><code>$M[2] = 5 x 2 x 4 x 3 = 120
</code></pre>

<p>I update <code>$m_string</code> by "building it up" during each iteration of the inner <code>for my $j</code> loop by adding each element of the input array <code>@N</code> and the multiplication sign ("<code>x</code>").  The multiplication symbol is printed <em>before</em> each number and thus is not required for the first element, hence the <code>if ($first)</code> statement.  At the conclusion of the inner <code>for</code> loop, I update <code>$m_string</code> with the final product:</p>

<pre><code>$m_string .= " = " . $product;
</code></pre>

<p>and then append the whole string to <code>$output_string</code> which contains the overall detailed line items:</p>

<pre><code>$output_string .= "\t". $m_string . "\n";
</code></pre>

<p>Once we are done executing through both of our loops, I can then print the summary of the <code>@M</code> array followed by the detailed line items which are stored in <code>$output_string</code>.  I thought this was a pretty clever solution (for me) to storing the intermediate results before we had to print them.  Originally, I was going to write the intermediate results to a temporary file but then thought better of it.  Putting it all together, we come up with our solution:</p>

<pre><code>use warnings;
use strict;
use diagnostics;
use v5.10;

# run program as:
# $ ./ch-1.pl "100, 4, 50, 3, 2"
my @N = split /, /, $ARGV[0];
my @M;
my $output_string = "";

for (my $i = 0; $i &lt; scalar(@N); $i++) {
    my $product = 1;
    my $m_string = "\$M[" . $i . "] = ";
    my $first = 1;
    for (my $j = 0; $j &lt; scalar(@N); $j++) {
        my $print_x;
        if ($i != $j) {
            $product = $product * $N[$j];
            if ($first) {
                $print_x = "";
                $first = 0;
            } else {
                $print_x = " x ";
            }
            $m_string .= $print_x . $N[$j]; 
        }
    }
    push (@M, $product);
    $m_string .= " = " . $product;
    $output_string .= "\t". $m_string . "\n";
}

say "Input:\n\t\@N = (", join(", ", @N), ")";
say "Output:";
say "\t\@M = (", join(", ", @M), ")\n";
say "$output_string";
</code></pre>

<h2>Task 2</h2>

<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/#TASK2">Task #2</a>, "Spiral Matrix", was the one I was both most looking forward to and dreading at the same time!  The task states: </p>

<blockquote>
  <p>You are given <code>m x n</code> matrix of positive integers.</p>

<p>Write a script to print a spiral matrix as a list.</p>

<p>Example 1:</p>
</blockquote>

<pre><code>    Input:
        [ 1, 2, 3 ]
        [ 4, 5, 6 ]
        [ 7, 8, 9 ]
    Output:
        [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]
</code></pre>

<blockquote>
  <p>Example 2:</p>
</blockquote>

<pre><code>    Input:
        [  1,  2,  3,  4 ]
        [  5,  6,  7,  8 ]
        [  9, 10, 11, 12 ]
        [ 13, 14, 15, 16 ]
    Output:
        [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
</code></pre>

<p>I was excited because I've solved similar spiral challenges like this before using Python, specifically <a href="https://projecteuler.net/problem=28">Problem 28</a> of the <a href="https://projecteuler.net/about">Project Euler</a> series of coding problems.  In my version, I used a series of <code>for</code> loops to work my way around a two-dimensional array.  But for this task of Challenge 088, I wanted to try my hand at using a recursive solution which has been a <a href="https://samirparikh.com/blog/permutations-and-recursion.html">pain point</a> for me.  I also got the sense that this problem would also require me to work with Perl references and multi-dimensional arrays, other areas where I've <a href="https://www.perlmonks.org/?node_id=11123691">been</a> <a href="https://www.perlmonks.org/?node_id=11124042">struggling</a>.  But despite these reservations, I plowed ahead and here is what I did.</p>

<p>The main portion of the solution resides in the subroutine <code>return_spiral</code>.  I pass it a two-dimensional array, <code>@array</code>, which is formulated using the subroutine <code>define_matrix</code> which I've <a href="https://samirparikh.com/blog/perl-weekly-challenge-084.html">used</a> <a href="https://samirparikh.com/blog/perl-weekly-challenge-087.html">before</a>.  The purpose of <code>return_spiral</code> is to return an array, <code>@spiral</code>, comprised solely of those elements around the perimeter of <code>@array</code>, starting at the top-left corner and then moving in a clockwise fashion, plus the resulting two-dimensional matrix that remains.  For example, if we were to pass it the array <code>@array</code> in Example 2 from above:</p>

<pre><code>[  1,  2,  3,  4 ]
[  5,  6,  7,  8 ]
[  9, 10, 11, 12 ]
[ 13, 14, 15, 16 ]
</code></pre>

<p>the subroutine should return a simple array <code>@spiral</code>:</p>

<pre><code>(1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5)
</code></pre>

<p>and the remaining two-dimensional array:</p>

<pre><code>[  6,  7 ]
[ 10, 11 ]
</code></pre>

<p>which gets passed back to the subroutine in a recursive fashion.  To make it recursive, I'd need a statement like:</p>

<pre><code>return ( @spiral, &amp;return_spiral(@array) );
</code></pre>

<p>To get the elements around the perimeter of the array, there are four steps (since there are four "sides" to the matrix):</p>

<ol>
<li>Get the elements in the first row using the statement <code>push ( @spiral, @{$array[0]} )</code>.</li>
<li>Get the elements in the right column, going down, using the <code>for my $y</code> loop</li>
<li>Get the elements of the last row (in reverse order) using the statement <code>push ( @spiral, reverse ( @{$array[$#array]} ) )</code>.</li>
<li>Get the elements of the left column, going up, using the <code>for my $i</code> loop.</li>
</ol>

<p>All recursive functions need what is called a "base case", or terminating condition.  Otherwise, you'd end up in an endless loop.  For my subroutine, I actually came up with four base cases which would cause the subroutine to ultimately finish by just returning the spiral portion of the array.  Those four cases are:</p>

<ol>
<li>The array has just one row.</li>
<li>The array has just one column.</li>
<li>The array has just two rows.</li>
<li>The array has just two columns. </li>
</ol>

<p>I check the first two conditions near the beginning of the subroutine.  Assuming that the array passed to <code>return_spiral</code> has at least two rows and two columns, I check the third and fourth terminating conditions after we've done one "lap" around the array to define <code>@spiral</code>.  The checks for the third and fourth base cases is done by the <code>if</code> statement:</p>

<pre><code>if (scalar( @array ) == 2 || scalar ( @{$array[0]} ) == 2)
</code></pre>

<p>If that <code>if</code> statement is true, that means that the array that was originally passed to <code>return_spiral</code> only had two rows or two columns, in which case one "lap" around the array is all we need.</p>

<p>If we haven't hit a base case, the subroutine "trims" off the peripheral elements we've populated in the array <code>@sprial</code> using a series of <code>shift</code> and <code>pop</code> statements and concludes with returning both the <code>@sprial</code> array (which contains all of the elements around the perimeter of the original array) and by recursively calling the subroutine itself with the remaining interior elements of <code>@array</code>.  The resulting script becomes:</p>

<pre><code>use v5.10;
use warnings;
use strict;

# assumptions:
# matrix does not have to be square
# spiral is clockwise

sub define_matrix {
    open (INPUT, '&lt;', $_[0]) or die "$!: could not open file $_[0]";
    say "Input:";
    my (@line, @matrix);
    while (&lt;INPUT&gt;) {
        chomp;
        say $_;
        s/\s+//g; # remove any whitespace
        s/\[//;
        s/\]//;
        @line = split /,/, $_;
        push (@matrix, [@line]);
    }
    close (INPUT) or die "$!: could not close file $_[0]";
    return ( @matrix );
}

sub return_spiral {
    my @array = @_;
    my @spiral;
# handle special cases
# just one row
    if (scalar(@array) == 1) {
        return ( @{$array[0]} );
# just one column
    } elsif ( scalar ( @{$array[0]} ) == 1 ) {
        for (my $i = 0; $i &lt; scalar(@array); $i++) {
            push ( @spiral, @{$array[$i]}[0] );
        }
        return ( @spiral );
# we have at least a 2 x 2 array
    } else {
# get first row
        push ( @spiral, @{$array[0]} );
# get right column
        my $right_ci = scalar ( @{$array[0]} ) - 1;
        for (my $y = 1; $y &lt; scalar ( @array ); $y++) {
            push ( @spiral, @{$array[$y]}[$right_ci] );
        }
# remove last element from last row
        pop ( @{$array[$#array]} );
# get last row in reversed order
        push ( @spiral, reverse ( @{$array[$#array]} ) );
# get left column
        for (my $i = ($#array - 1); $i &gt; 0; $i--) {
            push ( @spiral, @{$array[$i]}[0] );
        }
# check if resulting array is empty (i.e. we were originally sent
# just a two-row or two-column array to begin with
        if (scalar( @array ) == 2 || scalar ( @{$array[0]} ) == 2) {
            return ( @spiral );
        } else {
# trim array
# trim top row:
            shift @array;
# trim bottom row:
            pop @array;
# remove first and last element from remaining rows
            for (my $i = 0; $i &lt; scalar(@array); $i++) {
                shift ( @{$array[$i]} );
                pop   ( @{$array[$i]} );
            }
            return ( @spiral, &amp;return_spiral(@array) );
        }
    }
}

my @matrix = &amp;define_matrix($ARGV[0]);
my @spiral2 = &amp;return_spiral(@matrix);
say "Output:";
say "[ ", join(", ", @spiral2), " ]";
</code></pre>

<p>I suppose that I could have combined the "trim" operations with the statements where I traverse the perimeter in the first place to populate <code>@spiral</code> to tighten up the script, but in the end, that wasn't an optimization I had the energy to pursue.</p>

<p>As I said before, I really enjoyed working on this week's tasks and solving the programming and algorithmic challenges they presented.  I'm eager to see how others in the Perl Weekly Challenge community came up with their own solution as there is always so much to learn from them.  Until next time!</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3134593967427671253</id>
    <published>2020-11-28T16:55:00.000+01:00</published>
    <updated>2020-11-28T16:55:47.550+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxvii) 9 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.995' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.995&lt;/strong&gt; on 2020-11-28&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 0.994 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.005&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.004 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MHX/Convert-Binary-C-0.84' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Convert::Binary::C&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Binary Data Conversion using C Types &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.84&lt;/strong&gt; on 2020-11-23&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.83 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9711' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9711&lt;/strong&gt; on 2020-11-27&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.9708 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JBERGER/Mojo-JWT-0.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token the Mojo way &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.09&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.08 was 1 year, 11 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.004004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.004004&lt;/strong&gt; on 2020-11-25&lt;/li&gt;  &lt;li&gt;Votes: 277&lt;/li&gt;  &lt;li&gt;Previous version: 2.004003 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Package-Stash-0.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Package::Stash&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Routines for manipulating stashes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.39&lt;/strong&gt; on 2020-11-22&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.38 was 1 year, 10 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.20&lt;/strong&gt; on 2020-11-24&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.18 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.63' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.63&lt;/strong&gt; on 2020-11-28&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.61 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3134593967427671253/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3134593967427671253"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3134593967427671253"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvii-9-cpan-great-modules-released.html" title="(cccxvii) 9 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8775178624719885</id>
    <published>2020-11-28T16:52:00.002+01:00</published>
    <updated>2020-11-28T16:52:10.101+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxliv) metacpan weekly report - Plack</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 36&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Plack"&gt;Plack&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/11/28 15:51:00 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Working::Out::Dependencies::From::META::files::Will::Be::Wrong::At::Some::Point::Like::This::Module::For::Instance" target="_blank"&gt;Acme::Working::Out::Dependencies::From::META::files::Will::Be::Wrong::At::Some::Point::Like::This::Module::For::Instance&lt;/a&gt; - Because there is nothing like being right&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::XML::DocBook::Builder" target="_blank"&gt;App::XML::DocBook::Builder&lt;/a&gt; - Build DocBook/XML files.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; - A toolkit to help sign and verify XML Digital Signatures.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Amon2" target="_blank"&gt;Amon2&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CallBackery" target="_blank"&gt;CallBackery&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLDR::Number" target="_blank"&gt;CLDR::Number&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Tiny" target="_blank"&gt;Dancer2::Plugin::Auth::Tiny&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Database" target="_blank"&gt;Dancer2::Plugin::Database&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Locale::Wolowitz" target="_blank"&gt;Dancer2::Plugin::Locale::Wolowitz&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/EV" target="_blank"&gt;EV&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=105)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Maketext" target="_blank"&gt;Locale::Maketext&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Locale::Wolowitz" target="_blank"&gt;Locale::Wolowitz&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any::Adapter::TAP" target="_blank"&gt;Log::Any::Adapter::TAP&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+2=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Command::Author::generate::cpanfile" target="_blank"&gt;Mojolicious::Command::Author::generate::cpanfile&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::API::REST" target="_blank"&gt;Net::API::REST&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::NDBin" target="_blank"&gt;PDL::NDBin&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=364)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+3=218)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE" target="_blank"&gt;POE&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TheSchwartz" target="_blank"&gt;TheSchwartz&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widgets" target="_blank"&gt;Tickit::Widgets&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::Indexed" target="_blank"&gt;Tie::Hash::Indexed&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Hash::XS" target="_blank"&gt;XML::Hash::XS&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8775178624719885/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8775178624719885"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8775178624719885"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliv-metacpan-weekly-report-plack.html" title="(cdxliv) metacpan weekly report - Plack"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7978604697808215360</id>
    <published>2020-11-28T16:38:00.000+01:00</published>
    <updated>2020-11-28T16:38:51.558+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2020-11-28 15:35:26 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64993183" target="_blank"&gt;Perl: Best way to open a file exclusively?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64956649" target="_blank"&gt;Store and read string with newline from Config::Simple config file&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65012690" target="_blank"&gt;(Windows 10) Trying to Install Perl Modules both PPM and CPAN fail?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64957598" target="_blank"&gt;atom feed: script to combine multiple &amp;lt;author&amp;gt; items into one?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64974031" target="_blank"&gt;Why does File::Slurp get UTF8 characters wrong when I use open ':std', ':encoding(UTF-8)';?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64993281" target="_blank"&gt;create a hash of occurrences in an array with map&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64963938" target="_blank"&gt;What difference does curly brace make in accessing an object&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64971546" target="_blank"&gt;How do I change a Perl Readonly scalar in a module for a unit test?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65002289" target="_blank"&gt;Perl load module BEGIN&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64949457" target="_blank"&gt;Monitoring stdout of a forked process in perl by character&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7978604697808215360/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7978604697808215360"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7978604697808215360"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxix-stackoverflow-perl-report.html" title="(cdlxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Use Perl::Tidy module in your application</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Perl::Tidy">Perl::Tidy</a> is usually used as a stand-alone program to <a href="/run-perl-tidy-to-beautify-the-code">beautify your Perl code</a>.
Sometimes, for example when you'd like to <a href="/introducing-perltidy-tk-project">build a GUI for it</a>, you need to be able to use it as part of your application.
<p>
This is a simple example showing how to do it.
<p>
]]></summary>
  <updated>2020-11-27T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/use-perl-tidy-in-your-application"/>  <id>https://perlmaven.com/use-perl-tidy-in-your-application</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Perl::Tidy">Perl::Tidy</a> is usually used as a stand-alone program to <a href="/run-perl-tidy-to-beautify-the-code">beautify your Perl code</a>.
Sometimes, for example when you'd like to <a href="/introducing-perltidy-tk-project">build a GUI for it</a>, you need to be able to use it as part of your application.
<p>
This is a simple example showing how to do it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>CPAN Digger - CPAN Dashboard - CPAN Rocks</title>
  <summary type="html"><![CDATA[<p>
CPAN Digger monitors the most recently uploaded distributions, CPAN Dashboard provides an overview to the authors, CPAN Rocks provides stats from Meta::CPAN.
<p>
]]></summary>
  <updated>2020-11-26T13:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-digger-dashboard-rocks"/>  <id>https://perlmaven.com/cpan-digger-dashboard-rocks</id>
  <content type="html"><![CDATA[<p>
CPAN Digger monitors the most recently uploaded distributions, CPAN Dashboard provides an overview to the authors, CPAN Rocks provides stats from Meta::CPAN.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Wie setzen wir die Gitlab-CI ein?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-26-wie-setzen-wir-gitlab-ci-ein" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In meinem Artikel über die Optimierung von Docker-Images habe ich erwähnt, dass wir die »Gitlab-CI« einsetzen. In diesem Artikel beschreibe ich nun näher, was das eigentlich ist und welche Erfahrungen wir gemacht haben.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-26-wie-setzen-wir-gitlab-ci-ein</id>
    <published>2020-11-26T10:00:00Z</published>
    <updated>2020-11-26T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 88: Array of Products and Spiral Matrices</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-88-array-of-products-and-spiral-matrices.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9966</id>

    <published>2020-11-25T23:07:28Z</published>
    <updated>2020-11-25T23:13:07Z</updated>

    <summary>These are some answers to the Week 88 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a couple of days (November 29, 2020). This blog post offers some solutions...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 88 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (November 29, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Array of Products</h2>

<p><em>You are given an array of positive integers @N.</em></p>

<p><em>Write a script to return an array @M where $M[i] is the product of all elements of @N except the index $N[i].</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    @N = (5, 2, 1, 4, 3)
Output:
    @M = (24, 60, 120, 30, 40)

    $M[0] = 2 x 1 x 4 x 3 = 24
    $M[1] = 5 x 1 x 4 x 3 = 60
    $M[2] = 5 x 2 x 4 x 3 = 120
    $M[3] = 5 x 2 x 1 x 3 = 30
    $M[4] = 5 x 2 x 1 x 4 = 40
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    @N = (2, 1, 4, 3)
Output:
    @M = (12, 24, 6, 8)

    $M[0] = 1 x 4 x 3 = 12
    $M[1] = 2 x 4 x 3 = 24
    $M[2] = 2 x 1 x 3 = 6
    $M[3] = 2 x 1 x 4 = 8
</code></pre>

<h3>Array of Products in Raku</h3>

<p>I immediately thought about two methods to solve this problem. Although I thought the second method was probably better, let me show first the first one.</p>

<p>The first way to do it is to traverse the input array and, for each item, multiply all items before with all items after and store the product in the equivalent position of the result array. Here we use the reduction metaoperator with multiplication, <code>[*]</code>, to compute the chained multiplication. And we use array slices to pick the relevant items to be multiplied. For some reason, array slice did not work properly for the first element of the array, so I computed it separately before entering the <code>for</code> loop.</p>

<pre><code>use v6;

my @tests = [5, 2, 1, 4, 3], [2, 1, 4, 3];
for @tests -&gt; @array {
    my @result; 
    @result[0] = [*] @array[1..@array.end];
    for 1..@array.end -&gt; $i {
        @result[$i] = ([*] @array[0..$i-1]) * [*] (@array[$i+1..@array.end]);
    }
    say "Input array: ", @array;
    say "Result: ", @result;
}
</code></pre>

<p>This script produces the following output:</p>

<pre><code>$ raku array-of_products.raku
Input array: [5 2 1 4 3]
Result: [24 60 120 30 40]
Input array: [2 1 4 3]
Result: [12 24 6 8]
</code></pre>

<p>There may be a better way to handle the special case of the first item of the list, but, rather than trying to improve it, I preferred to implement the second method. Here, the idea is to compute only once the product of all elements of the input array. Then, for each position in the array, we divide the overall product by the item in the current position. The code becomes slightly simpler, and the performance is also likely to be better, since we&#8217;re performing much less arithmetical operations overall (especially if the input array is somewhat large).</p>

<pre><code>my @tests = [5, 2, 1, 4, 3], [2, 1, 4, 3];
for @tests -&gt; @array {
    my $product = [*] @array;
    my @result = map { $product / $_ }, @array;
    say "Input array: ", @array;
    say "Result: ", @result;
}
</code></pre>

<p>This script produces the same result as before:</p>

<pre><code>Input array: [5 2 1 4 3]
Result: [24 60 120 30 40]
Input array: [2 1 4 3]
Result: [12 24 6 8]
</code></pre>

<h3>Array of Products in Perl</h3>

<p>This is a port to Perl of the method used in the second Rakudo script above: we compute the product of all elements of the input array. Then, for each position in the array, we divide the overall product by the item in the current position.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = ([5, 2, 1, 4, 3], [2, 1, 4, 3]);
for my $array_ref (@tests) {
    my $product = 1;
    $product *= $_ for @$array_ref;
    my @result = map $product / $_, @$array_ref;
    say "Input: @$array_ref";
    say "Result: @result";
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl array-of-products.pl
Input: 5 2 1 4 3
Result: 24 60 120 30 40
Input: 2 1 4 3
Result: 12 24 6 8
</code></pre>

<h2>Task 2: Spiral Matrix</h2>

<p><em>You are given <code>m x n</code> matrix of positive integers.</em></p>

<p><em>Write a script to print spiral matrix as list.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    [ 1, 2, 3 ]
    [ 4, 5, 6 ]
    [ 7, 8, 9 ]
Ouput:
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5 ]
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    [  1,  2,  3,  4 ]
    [  5,  6,  7,  8 ]
    [  9, 10, 11, 12 ]
    [ 13, 14, 15, 16 ]
Output:
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
</code></pre>

<h3>Spiral Matrix in Raku</h3>

<p>For this task, we&#8217;ll use a <code>@tests</code> array of five rectangular matrices. The <code>print-matrix</code> subroutine is a helper function to pretty print the input matrix. Note that, when applied to a list, the <a href="https://docs.raku.org/routine/fmt">fmt</a> method applies the formatting string to each element of the list (contrary to <code>sprintf</code>), so that there is no need to add a <code>map</code> to process each item of a matrix line. For example:</p>

<pre><code>say &lt;1 2 3 4&gt;.fmt("%04i");
</code></pre>

<p>will print:</p>

<pre><code>0001 0002 0003 0004
</code></pre>

<p>The main <code>loop</code> reads the values of the matrix (in accordance to the rules explained just after) and stores them into the <code>@result</code> array. It processes first the first matrix line (left to right); it then processes the last column, i.e. the last item of each line, from top to bottom, and deletes it at the same time; it then processes (right to left) the last line of the matrix and also deletes this line; and it processes the first column (bottom to top) of the matrix. It then assign to <code>@matrix</code> a version of the original matrix with all values on the four edges removed. And the loop is restarted with the new smaller matrix if it is not empty.</p>

<p>Note that the <code>:delete</code> adverb removes entirely the last item of an array, but it leaves a &#8220;hole&#8221; when applied to any other element of the array. </p>

<pre><code>use v6;

my @tests =
    [ [ |(0..3) ], [ |(4..7)  ],  [ |(8..11)  ], [ |(12..15) ] ],
    [ [ |(0..4) ], [ |(5..9)  ],  [ |(10..14) ], [ |(15..19) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ], [ |(18..23) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ] ],
    [ [ |(0..2) ], [ |(4..6)  ],  [ |(8..10)  ], [ |(12..14) ] ];

sub print-matrix (@matrix) {
        say "[ {$_.fmt("% 3i")} ]" for @matrix;
        say "";
}

for @tests -&gt; @matrix {
    my @result;
    print-matrix @matrix;
    loop {
        push @result, |@matrix[0];
        push @result, @matrix[$_][*-1]:delete for 1..@matrix.end;
        push @result, |(reverse @matrix[@matrix.end]:delete);
        last if @matrix.elems == 1;
        push @result, @matrix[$_][0]:delete for reverse 1..@matrix.end;
        @matrix = map { [$_[|(1..$_.end)]] }, @matrix[|(1..@matrix.end)];
        # print-matrix @matrix;
        last unless @matrix;
    }
    say @result, "\n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

[0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9]

[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]

[0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]
[  18  19  20  21  22  23 ]

[0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]

[0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10]

[   0   1   2 ]
[   4   5   6 ]
[   8   9  10 ]
[  12  13  14 ]

[0 1 2 6 10 14 13 12 8 4 5 9]
</code></pre>

<p>We can make it slightly simpler by stripping out the used matrix edges as we go, using the <code>pop</code> and <code>shift</code> methods each time we use some values, so that we don&#8217;t have to reassign the <code>@matrix</code> at each iteration. This also simplifies the handling of array subscripts. In the code below, the only changes are in the <code>loop</code> block:</p>

<pre><code>use v6;

my @tests =
    [ [ |(0..3) ], [ |(4..7)  ],  [ |(8..11)  ], [ |(12..15) ] ],
    [ [ |(0..4) ], [ |(5..9)  ],  [ |(10..14) ], [ |(15..19) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ], [ |(18..23) ] ],
    [ [ |(0..5) ], [ |(6..11) ], [ |(12..17)  ] ],
    [ [ |(0..2) ], [ |(4..6)  ],  [ |(8..10)  ], [ |(12..14) ] ];

sub print-matrix (@matrix) {
        say "[ {$_.fmt("% 3i")} ]" for @matrix;
        say "";
}
for @tests -&gt; @matrix {
    my @result;
    print-matrix @matrix;
    loop {
        push @result, |@matrix.shift;
        push @result, @matrix[$_].pop for 0..@matrix.end;
        last unless @matrix.elems;
        push @result, |(reverse @matrix.pop);
        push @result, @matrix[$_].shift for reverse 0..@matrix.end;
        last unless @matrix;
    }
    say @result, "\n";
}
</code></pre>

<p>This produces the same output as before:</p>

<pre><code>[   0   1   2   3 ]
[   4   5   6   7 ]
[   8   9  10  11 ]
[  12  13  14  15 ]

[0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9]

[   0   1   2   3   4 ]
[   5   6   7   8   9 ]
[  10  11  12  13  14 ]
[  15  16  17  18  19 ]

[0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]
[  18  19  20  21  22  23 ]

[0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13]

[   0   1   2   3   4   5 ]
[   6   7   8   9  10  11 ]
[  12  13  14  15  16  17 ]

[0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10]

[   0   1   2 ]
[   4   5   6 ]
[   8   9  10 ]
[  12  13  14 ]

[0 1 2 6 10 14 13 12 8 4 5 9]
</code></pre>

<h3>Spiral Matrix in Perl</h3>

<p>For this task, we&#8217;ll use a <code>@tests</code> array of five rectangular matrices. The <code>print_matrix</code> subroutine is a helper function to pretty print the input matrix.</p>

<p>The main <code>while</code> loop reads the values of the matrix (in accordance to the rules explained just after) and stores them into the <code>@result</code> array. It processes first the first matrix line (left to right) and removes it from the matrix; it then processes the last column, i.e. the last item of each line, from top to bottom, and deletes it at the same time; it then processes (right to left) the last line of the matrix and also deletes this line; and finally it processes the first column (bottom to top) of the matrix and removes it. 
After one iteration, the original matrix is stripped of all its edge items. And the loop is restarted with the new smaller matrix if it is not empty.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;


my @tests = ( [ [ 0..3 ], [ (4..7) ],  [ (8..11) ],  [ (12..15) ] ],
              [ [ 0..4 ], [ (5..9) ],  [ (10..14) ], [ (15..19) ] ],
              [ [ 0..5 ], [ (6..11) ], [ (12..17) ], [ (18..23) ] ],
              [ [ 0..5 ], [ (6..11) ], [ (12..17) ] ],
              [ [ 0..2 ], [ (4..6) ],  [ (8..10) ],  [ (12..14) ] ]
            );

# @tests = ( [ [ 0..3 ], [ (4..7) ],  [ (8..11) ],  [ (12..15) ] ] );

sub print_matrix {
    my @matrix = @{$_[0]};
    say "";
    say "[ ", (map { sprintf "% 3i", $_ } @$_), " ]" for @matrix;
    say "";
}

for my $m_ref (@tests) {
    print_matrix($m_ref);
    my @result;
    my @matrix = @$m_ref;
    while (1) {
        push @result, @{shift @matrix};
        last if scalar @matrix == 0;
        push @result, pop @{$matrix[$_]} for 0..$#matrix;
        push @result, reverse @{pop @matrix};
        push @result, shift @{$matrix[$_]} for reverse 0..$#matrix;
        last if @matrix == 0;
    }
    say join " ", @result;    
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>[   0  1  2  3 ]
[   4  5  6  7 ]
[   8  9 10 11 ]
[  12 13 14 15 ]

0 1 2 3 7 11 15 14 13 12 8 4 5 6 10 9

[   0  1  2  3  4 ]
[   5  6  7  8  9 ]
[  10 11 12 13 14 ]
[  15 16 17 18 19 ]

0 1 2 3 4 9 14 19 18 17 16 15 10 5 6 7 8 13 12 11

[   0  1  2  3  4  5 ]
[   6  7  8  9 10 11 ]
[  12 13 14 15 16 17 ]
[  18 19 20 21 22 23 ]

0 1 2 3 4 5 11 17 23 22 21 20 19 18 12 6 7 8 9 10 16 15 14 13

[   0  1  2  3  4  5 ]
[   6  7  8  9 10 11 ]
[  12 13 14 15 16 17 ]

0 1 2 3 4 5 11 17 16 15 14 13 12 6 7 8 9 10

[   0  1  2 ]
[   4  5  6 ]
[   8  9 10 ]
[  12 13 14 ]

0 1 2 6 10 14 13 12 8 4 5 9
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, December 6, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>GitLab CI for Perl projects</title>
  <summary type="html"><![CDATA[<p>
According to <a href="https://cpan.rocks/">CPAN Rocks</a> there are 29 CPAN modules that use GitLab as their bug-tracking system. That probably means those
are the projects that use GitLab as a VCS.
<p>
]]></summary>
  <updated>2020-11-24T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/gitlab-ci"/>  <id>https://perlmaven.com/gitlab-ci</id>
  <content type="html"><![CDATA[<p>
According to <a href="https://cpan.rocks/">CPAN Rocks</a> there are 29 CPAN modules that use GitLab as their bug-tracking system. That probably means those
are the projects that use GitLab as a VCS.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/dave-report-2020-october"/>
  <id>tag:news.perlfoundation.org,2020-11-24:/post/dave-report-2020-october</id>
  <published>2020-11-24T02:53:09</published>
  <updated>2020-11-24T02:53:09</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Dave Mitchell on his grant under Perl 5 Core Maintenance Fund. We thank the TPF sponsors to make this grant possible. This mainly consisted in tracking down a off-by-one error in Cwd.xs, which I thought was being flagged up by valgrind. As it turned out, the valgrind report was a false positive caused by a bug in valgrind when perl is built with -D_FORTIFY_SOURCE, 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Dave Mitchell on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
We thank the TPF sponsors to make this grant possible.</p>

<pre>
This mainly consisted in tracking down a (harmless as it turned out)
off-by-one error in Cwd.xs, which I thought was being flagged up by
valgrind. As it turned out, the valgrind report was a false positive caused
by a bug in valgrind when perl is built with -D_FORTIFY_SOURCE, and I
found the Cwd bug by manual code inspection of the area complained about
by valgrind!

SUMMARY:
      4:35 add some magic free vtable methods for faster freeing
     15:59 investigate ASan failure in t/op/coreamp.t
      2:30 process p5p mailbox
    ------
     23:04 TOTAL (HH::MM)
</pre>

    ]]>
  </content>
</entry>
  <entry>
  <title>CPAN Digger explained</title>
  <summary type="html"><![CDATA[<p>
The web site of <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> shows the most recently uploaded CPAN distributions. Currently about 110 of them
and some meta information about them. Let me go through quickly what you see there, why is that interesting and what to do about it.
<p>
]]></summary>
  <updated>2020-11-23T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-digger-explained"/>  <id>https://perlmaven.com/cpan-digger-explained</id>
  <content type="html"><![CDATA[<p>
The web site of <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> shows the most recently uploaded CPAN distributions. Currently about 110 of them
and some meta information about them. Let me go through quickly what you see there, why is that interesting and what to do about it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Testtreiber für Test::Class::Moose</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-23-testtreiber-fuer-test-class-moose" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Test::Class::Moose hilft beim Organisieren von Tests dadurch, dass objektorientiertes Schreiben von Tests ermöglicht wird.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-23-testtreiber-fuer-test-class-moose</id>
    <published>2020-11-23T10:00:00Z</published>
    <updated>2020-11-23T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/22#pwc087" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an unsorted array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to find the longest consecutive sequence. Print 0 if no sequence found.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an unsorted array of integers @N.
# Write a script to find the longest consecutive sequence. 
# Print 0 if no sequence found.
##
sub min_max{
    my @a = @_;
    my($min, $max) = ($a[0], $a[0]);
    for my $x (@a){
        $min = $x if($x &lt; $min);
        $max = $x if($x &gt; $max);
    }
    return ($min, $max);
}

sub longest_sequence{
    my @sequences = @_;
    my @max = (0);
    for my $sequence (@sequences){
        @max = @{$sequence} if((@{$sequence} &gt; @max) &amp;&amp; (@{$sequence} &gt; 1));
    }
    return @max;
}

sub continuous_sub_sequences{
    my @a = @_;
    my($min, $max) = min_max(@a);
    my @sub_sequences;
    my $sub_sequence = [];
    while($min &lt;= $max){
        my $test = grep {$_ == $min} @a;
        if($test){
            push @{$sub_sequence}, $min;
        }
        else{
            push @sub_sequences, $sub_sequence if(@{$sub_sequence} &gt; 0);
            $sub_sequence = [];
        }
        $min++;
    }
    return @sub_sequences;
}

MAIN:{
    my @N = (100, 4, 50, 3, 2);
    my @sequences = continuous_sub_sequences(@N);
    my @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
    @N = (20, 30, 10, 40, 50);
    @sequences = continuous_sub_sequences(@N);
    @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
    @N = (20, 19, 9, 11, 10);
    @sequences = continuous_sub_sequences(@N);
    @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2,3,4
0
9,10,11
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I decided to force myself to work with an artificial constraint as a way fo forcing a little bit more creativity in my solution. When I first looked at this problem I immediately thought “ok, first thing should be to sort the list”. Based on that first impression my self-imposed constraint was to “solve this without using a sort”!&lt;/p&gt;
&lt;p&gt;What I did can be summarized as follows: 1. Find the minimum and maximum numbers in the given list. 2. Starting with the minimum number generate test sequences by incrementing upwards towards the maximum list value. 3. As each new element of the test sequence is added test to see if it is in the original list. 4. If it is in the list, good, keep going. 5. If it is not in the list then save the test sequence generated up to that point and continue with a new test sequence. 6. Return all successful test sequences and determine the longest one.&lt;/p&gt;
&lt;p&gt;The most blatant inefficiency to this approach is when lists are sparse. For example, suppose we are given &lt;code&gt;(2, 100000000, 3, 4, 5)&lt;/code&gt; then we would be iterating from &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;100000000&lt;/code&gt;. An approach using a sorted list would basically need only loop over the elements of the list, checking to see if the next element was 1 larger than the previous.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given matrix m x n with 0 and 1. Write a script to find the largest rectangle containing only 1. Print 0 if none found.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given matrix m x n with 0 and 1.
# Write a script to find the largest rectangle 
# containing only 1. Print 0 if none found.
##
use boolean;

sub print_solution{
    my($m, $n) = @_;
    if(!$m || !$n){
        print "0\n";
    }
    else{
        for (1 .. $n){
            print "[". join(" ", (1)x $m) . "]\n";
        }       
    }
}

sub evaluate{
    my($m, $n, $matrix) = @_;
    my $row_string = join(",", (1) x $m);
    my $columns = 0;
    for my $row (@{$matrix}){
        my $test = join(",", @{$row});
        if(index($test, $row_string) &gt; -1){
            $columns++;
            return true if($columns == $n);
        }
        else{
            $columns = 0;
        }
    }
    return false;
}

sub largest_rectangle{
    my @matrix = @_;
    my $rows = @{$matrix[0]};
    my $columns = @matrix;
    my $max_area = 0;
    my @rectangle;
    for my $m (2 .. $columns){
        for my $n (1 .. $rows){
            if(evaluate($m, $n, \@matrix)){
                if(($m * $n) &gt; $max_area){
                    $max_area = ($m * $n);
                    @rectangle = ($m, $n);
                }
            }
        }
    }
    return @rectangle;
}

MAIN:{
    my @MATRIX = (
        [0, 0, 0, 1, 0, 0],
        [1, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0]
    );
    print_solution(largest_rectangle(@MATRIX));
    @MATRIX = (
        [1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1]
    );
    print_solution(largest_rectangle(@MATRIX));
    @MATRIX = (
        [0, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [0, 0, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1]
    );
    print_solution(largest_rectangle(@MATRIX));  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
[1 1 1 1 1]
[1 1 1 1 1]
0
[1 1 1 1]
[1 1 1 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Unlike Part 1 I did not necessarily have a self-imposed constraint other than to try and be as creative as possible. I’ll only know when I look at other submitted solutions if I was really all that relatively clever or not!&lt;/p&gt;
&lt;p&gt;Here I do the following: 1. Check the size of the given matrix 2. Test the matrix for all possible sub-matrix sizes. 3. For all found sub-matrices determine the largest one.&lt;/p&gt;
&lt;p&gt;For checking the presence of sub-matrices I &lt;a href="https://perldoc.perl.org/functions/join"&gt;join&lt;/a&gt; the rows into strings and then use &lt;a href="https://perldoc.perl.org/functions/index"&gt;index&lt;/a&gt; to see if they appear in a given row or not. To determine if a sub-matrix is the largest I compare the areas of the “rectangles”.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc087</id>
    <published>2020-11-22T17:36:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6534935039608101899</id>
    <published>2020-11-21T15:29:00.000+01:00</published>
    <updated>2020-11-21T15:29:12.133+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxvi) 11 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MHX/Convert-Binary-C-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Convert::Binary::C&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Binary Data Conversion using C Types &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.79 was 6 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.56&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 7.54 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.62&lt;/strong&gt; on 2020-11-16&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.61 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20201120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20201120&lt;/strong&gt; on 2020-11-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20201020 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.004003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.004003&lt;/strong&gt; on 2020-11-21&lt;/li&gt;  &lt;li&gt;Votes: 277&lt;/li&gt;  &lt;li&gt;Previous version: 2.004000 was 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.29&lt;/strong&gt; on 2020-11-18&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.28 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.025&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 2.024 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KHW/Pod-Simple-3.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - framework for parsing Pod &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.42&lt;/strong&gt; on 2020-11-14&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.41 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0927' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0927&lt;/strong&gt; on 2020-11-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0926 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-YouTube-Download-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::YouTube::Download&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - WWW::YouTube::Download - Very simple YouTube video download interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.64 was 1 month, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.067' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.067&lt;/strong&gt; on 2020-11-16&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 1.066 was 3 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6534935039608101899/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6534935039608101899"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6534935039608101899"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html" title="(cccxvi) 11 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4707156040209215882</id>
    <published>2020-11-21T15:23:00.004+01:00</published>
    <updated>2020-11-21T15:23:49.775+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxliii) metacpan weekly report - Tickit::Widgets</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 60&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Tickit::Widgets"&gt;Tickit::Widgets&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/11/21 14:22:09 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ShouldUpdate" target="_blank"&gt;File::ShouldUpdate&lt;/a&gt; - should files be rebuilt?&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SAML" target="_blank"&gt;Mojo::SAML&lt;/a&gt; - A SAML2 toolkit using the Mojo toolkit&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SockAddr" target="_blank"&gt;Net::SockAddr&lt;/a&gt; - Socket address OO-wrapper with Perl and C++ interface.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco::Lite::App" target="_blank"&gt;Zydeco::Lite::App&lt;/a&gt; - use Zydeco::Lite to quickly develop command-line apps&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::Genetic::Pro" target="_blank"&gt;AI::Genetic::Pro&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::HTTPThis" target="_blank"&gt;App::HTTPThis&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argon" target="_blank"&gt;Argon&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Diff" target="_blank"&gt;Array::Diff&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Child" target="_blank"&gt;Child&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLDR::Number" target="_blank"&gt;CLDR::Number&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Changes" target="_blank"&gt;CPAN::Changes&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Digger" target="_blank"&gt;CPAN::Digger&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Control" target="_blank"&gt;Daemon::Control&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Moonpig" target="_blank"&gt;DateTime::Moonpig&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTimeX::Immutable" target="_blank"&gt;DateTimeX::Immutable&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::RunSQL" target="_blank"&gt;DBIx::RunSQL&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=175)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Fsdb" target="_blank"&gt;Fsdb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Kingpin" target="_blank"&gt;Getopt::Kingpin&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Lucid" target="_blank"&gt;Getopt::Lucid&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::ImageView" target="_blank"&gt;Gtk3::ImageView&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::WebKit2" target="_blank"&gt;Gtk3::WebKit2&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Guard" target="_blank"&gt;Guard&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Daemon" target="_blank"&gt;HTTP::Daemon&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny::Multipart" target="_blank"&gt;HTTP::Tiny::Multipart&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Var" target="_blank"&gt;Lexical::Var&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Toaster" target="_blank"&gt;Mail::Toaster&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Log::Any" target="_blank"&gt;Mojolicious::Plugin::Log::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::SecurityHeader" target="_blank"&gt;Mojolicious::Plugin::SecurityHeader&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::NATS::Client" target="_blank"&gt;Net::NATS::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::CCS" target="_blank"&gt;PDL::CCS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=120)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PkgConfig" target="_blank"&gt;PkgConfig&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+2=73)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ShellQuote" target="_blank"&gt;String::ShellQuote&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Animation" target="_blank"&gt;Term::Animation&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Levenshtein::Damerau" target="_blank"&gt;Text::Levenshtein::Damerau&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit" target="_blank"&gt;Tickit&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widget::Statusbar" target="_blank"&gt;Tickit::Widget::Statusbar&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widgets" target="_blank"&gt;Tickit::Widgets&lt;/a&gt; (+3=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Serialiser" target="_blank"&gt;Types::Serialiser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/use" target="_blank"&gt;use&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=84)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4707156040209215882/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4707156040209215882"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4707156040209215882"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html" title="(cdxliii) metacpan weekly report - Tickit::Widgets"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>TPF Meeting Minutes for October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tpf-minutes-202010"/>
  <id>tag:news.perlfoundation.org,2020-11-19:/post/tpf-minutes-202010</id>
  <published>2020-11-19T12:14:39</published>
  <updated>2020-11-19T12:14:39</updated>
  <summary>
  <![CDATA[
     TPF Board members and the community leaders meet every month and here are the minutes from the October 2020 meeting. Part 1 Community Attendees  Board: Stuart Mackintosh, Peter Krawczyk, Dan Wright, Dave Rolsky, Ricardo Signes, Makoto Nozaki  Leaders: Jason Crome, Samantha McVey, Alex Beamish, Sawyer X, Todd Rinaldo, Matthias Bloch  Admin: Nic Evans  Confirmed absence: Mark Keating, Curtis Poe Grants  One grant approved needs funding 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>TPF Board members and the community leaders meet every month and here are the minutes from the October 2020 meeting.</p>

<h2>Part 1 - Community</h2>

<ul>
<li><p>Attendees</p>

<ul>
<li>Board: Stuart Mackintosh, Peter Krawczyk, Dan Wright, Dave Rolsky, Ricardo Signes, Makoto Nozaki (late) </li>
<li>Leaders: Jason Crome, Samantha McVey, Alex Beamish, Sawyer X, Todd Rinaldo, Matthias Bloch</li>
<li>Admin: Nic Evans</li>
<li>Confirmed absence: Mark Keating, Curtis Poe</li>
</ul></li>
<li><p>Grants</p>

<ul>
<li>One grant approved - needs funding as there's no budget</li>
<li>Another grant was approved earlier but no work started 
<ul>
<li>Should have been canceled / resubmitted already according to the charter</li>
</ul></li>
<li>Working with Nic on website updates - close to completion</li>
<li>Main issue - no working budget
<ul>
<li>Possibly review previous budgets and consider how this can be increased per year</li>
<li>Funds are sectioned to languages (GC, Perl and Raku)</li>
<li>Pete looking to rearrange fund 'pots' to enable easier tracking next year</li>
</ul></li>
<li>Discussion around grants funding for funds - Can/should there be different pots? Can sponsors request specific support for each language - this needs further discussion - Jason Crome to follow up</li>
<li>Grant suggestions from the committee are available on the web</li>
</ul></li>
<li><p>Marketing</p>

<ul>
<li>Brief survey carried out regarding brand of The Perl Foundation</li>
<li>Highlighted need for wider survey, putting together budget proposal</li>
<li>Filled in creative brief for TPF</li>
<li>Promotion of TPF via Google Ads - discussion going on</li>
<li>z/OS article was mentioned as a good addition to marketing</li>
<li>Website improvements, bugs/issues list created</li>
</ul></li>
<li><p>The Perl/Raku Conference (USA)</p>

<ul>
<li>The contract of 2020/2021 is active</li>
</ul></li>
<li><p>EU Conference</p>

<ul>
<li>Discussion points: Organizers and sponsorship</li>
<li>Organizers
<ul>
<li>Andrew mentioned possibility of Perl/Raku conference</li>
<li>Should we talking about making EU conference a TPF event?</li>
<li>There is currently no immediate visible interest in having funding of an EU conference in Europe taken over by TPF</li>
<li>Historically YEF was formed because TPF didn't have the people to do this. Also EPO was formed</li>
<li>We need to talk to the key people to organize an event in Europe</li>
<li>The nature of conferences may be different going forward, we don't know when they will return to how they used to be. We need to look at our future - do we want more virtual conferences? Are there other opportunities for physical?</li>
</ul></li>
<li><p>Sponsorship</p>

<ul>
<li>Costs might be lower for virtual - how easy to get sponsors for virtual versus physical conferences?</li>
<li><p>We need to be clear with sponsors if we have both a US and an EU conference</p></li>
<li><p>Opinions:</p>

<ul>
<li>We have obligations to control how money is spent. There must be set guidelines. Whenever we create a special bucket for sponsorship we have an obligation to spend money on that bucket. We cannot then spend it on something else. What if we collect funds for a conference and it doesn't happen? We would have to give the money back. Currently we ask sponsors to give money to TPF (general funds) for this reason.</li>
<li>I want to make sure when I talk to sponsors to steer away from where money is going to 'this is TPF and we have various things we want to spend money on'. We need to avoid earmarked funds . Do not encourage sponsorship for specific items such as a conference.</li>
<li>I see this as more of an opportunity to get more money especially when the conference is held in a city where a major sponsor is located - need to find a way around legal issues - otherwise a missed opportunity</li>
</ul></li>
<li>Could have a soft earmarking with disclaimer such as 'should event not happen, it will be moved to general funds.'</li>
</ul></li>
<li>To continue discussion at next meeting</li>
</ul></li>
<li><p>Raku</p>

<ul>
<li>The Raku steering council formed recently, elected by core developers.</li>
<li>Question: How does CAT relate to Raku community?</li>
<li>Stuart: joint decision taken to keep Raku with TPF for now - longer term vision keen to progress recognised resources. These must adhere to set of recognised quality standards. CAT was established to do this, so should also provide support to Raku communities. Although sounds like marketing, it is a governance function. So we should support Raku Steering Council in any conduct issues. We need a recognised Raku presence within the organisation. </li>
<li>Action: invite member of Raku community to attend the Community leaders meeting - let them know TPF will support Raku community</li>
</ul></li>
<li><p>Perl</p>

<ul>
<li>Governance work to try and over time figure out a proper governance structure that is understood, accepted and supported by the community. </li>
<li>Stuart: this is about creating a process that will help the technical ecosystem for a long time. If it takes a long time, it needs to be done right/as best it can be - follow up again next month</li>
</ul></li>
<li><p>Infrastructure</p>

<ul>
<li>Trying to get a coherent list of what needs to be done</li>
<li>Discussion on getting perl web infrastructure managed under same system</li>
<li>All the essential password are documented</li>
<li>We need to look at Github tracker and see that issues are closed</li>
<li>Feedback at moment is positive - need to promote the committee exists when it is in a good position.</li>
</ul></li>
</ul>

<h2>Part 2 - Board</h2>

<h3>Attendees</h3>

<ul>
<li>Stuart Mackintosh, Dave Rolsky, Dan Wright, Ricardo Signes, Pete Krawczyk, Makoto Nozaki, Nic Evans (admin)</li>
</ul>

<h3>Meeting topics</h3>

<p>Note: the second part of the meeting (the board only) was short as the first part overran.</p>

<ul>
<li>TPRC 2020 Transparency Report was drafted. It will be reviewed and posted.</li>
<li>Advisory Board - action items below.
<ul>
<li>Define the charter and procedure to "retire" people from the board</li>
<li>Think whether we could invite somebody to the Advisory Board even if they are not a board member</li>
<li>Announce the Advisory Board with inaugural members</li>
</ul></li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 086</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/15#pwc086" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt; and an integer $A. Write a script to find find if there exists a pair of elements in the array whose difference is $A. Print 1 if exists otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an array of integers @N and an integer $A.
# Write a script to find find if there exists a pair of elements 
# in the array whose difference is $A.
# Print 1 if exists otherwise 0.
##
use boolean;
use Math::Combinatorics;

sub build_constraints{
    my @constraints;
    my $a_not_equal_b = sub { $_[0] != $_[1] };
    my $difference_equal_n = sub { $_[0] - $_[1] == $_[2] };
    return (
       $a_not_equal_b,
       $difference_equal_n
    );
}

MAIN:{
    my $combinations = Math::Combinatorics-&gt;new(
                           count =&gt; 2,
                           data =&gt; [@ARGV[1 .. @ARGV - 1]],
                       );
    my $found = false;  
    my ($check_equal, $check_difference) = build_constraints();           
    while(my @combination = $combinations-&gt;next_combination()){  
        if($check_equal-&gt;(@combination) &amp;&amp; $check_difference-&gt;(@combination, $ARGV[0])){
            $found = true;
            print "1\n"; last;
        }
    }
    print "0\n" if(!$found);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 15 10 30 20 50 40
0
$ perl perl/ch-1.pl 7 10 8 12 15 5
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a fairly silly use of the &lt;em&gt;constraint programming&lt;/em&gt; approach I used &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/08"&gt;last week&lt;/a&gt;. Like last time I generate all combinations and test them using a filtering approach. The filter is an array of constraint functions. Here we just have two simple constraints though!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given Sudoku puzzle (9x9). Write a script to complete the puzzle&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I didn’t have a chance to implement a solution in Perl. I would have used a similar constraint approach if I did. This is a natural use for Prolog and if you’re interested in reading in my Prolog implementation you can go &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2020/11/15"&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc086</id>
    <published>2020-11-15T23:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Grant Proposals: November 2020 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_nov_2020"/>
  <id>tag:news.perlfoundation.org,2020-11-13:/post/grant_proposals_nov_2020</id>
  <published>2020-11-13T22:52:29</published>
  <updated>2020-11-13T22:52:29</updated>
  <summary>
  <![CDATA[
     We received no grant proposals for Perl or Raku in time for the November voting round. The next round of voting will be held starting in early January. But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read How to Write a Proposal, GC Charter, Rules of Operation and Running Grants List will also help you understand how the grant process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We received no grant proposals for Perl or Raku in time for the November voting round. The next round of voting will be held starting in early January.</p>

<p>But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

    ]]>
  </content>
</entry>
</feed>
