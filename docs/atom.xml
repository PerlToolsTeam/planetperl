<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-09-03T12:52:33Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Death: A Terminal Experience</title>
    <link rel="alternate" href="http://blogs.perl.org/users/saif/2022/09/death-a-terminal-experience.html"/>
    <id>tag:blogs.perl.org,2022:/users/saif//3152.10880</id>
    <published>2022-09-03T15:00:00Z</published>
    <updated>2022-09-03T14:47:21Z</updated>
    <author>
        <name>Saif</name>
        <uri>https://github.com/saiftynet</uri>
    </author>
    <category term="die" label="die" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/saif/">
        <![CDATA[<p>A  program being executed, self terminating on encountering an non-viable condition is a typical scenario in Perl programs.  The death sentence can deliver information about the departed application to the user as justification and demand appropriate resolution for the subsequent reincarnation.</p>

<p>Now I know my code fails more often than it succeeds, and it is for this reason I am planning an alternative wake for the programmed parting of my future terminal applications. As a once-in-a-run-time event, death might be more elaborately delivered, something to be celebrated. The last words of a dying application softens the developers ensuing grief, while encouraging resuscitation with an appropriately delivered injection of code.</p>

<p>Imagine my code being transformed from:-</p>

<pre><code>do_something_risky() or die "you evil monster $!";
</code></pre>

<p>into </p>

<pre><code>get_away_with_it() or deathSentence($!)
</code></pre>

<p>producing something like this on the terminal:-</p>

<p><img alt="death.png" src="http://blogs.perl.org/users/saif/death.png" width="534" height="460" class="mt-image-none" style="" /></p>

<p>I know such distraction wastes time, there are probably many more error trapping and diagnostic tools available.  These may be absorbed over time...I am not really an expert.  But I am collecting a series of reasonably uncontroversial, hopefully humorous "epitaphs"...</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>On interpolating stuff into pattern matches</title>
    <link rel="alternate" href="http://blogs.perl.org/users/aristotle/2022/09/reinterpolate.html"/>
    <id>tag:blogs.perl.org,2022:/users/aristotle//15.10882</id>
    <published>2022-09-03T02:14:55Z</published>
    <updated>2022-09-03T03:13:52Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Essay" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Reaction" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/aristotle/">
        <![CDATA[<p><cite><a href="/users/tom_wyant/2022/09/match-anything-quickly----revision-1.html">Tom Wyant</a></cite>:</p>

<blockquote>
  <p>Interestingly (to me, at least) they reported that the removal of the <code>/o</code> modifier made their case 2-3 times slower. This surprised me somewhat, as I had understood that modern Perls (for some value of "modern") had done things to minimize the performance difference between the presence and absence of <code>/o</code>.</p>
</blockquote>

<p>They indeed have.</p>

<p>Ironically, it’s <code>qr</code> objects which <em>don’t</em> get that benefit. On the machine I’m typing on, the following benchmark…</p>
]]>
        <![CDATA[<pre><code>use <a href="https://metacpan.org/pod/Dumbbench#HOW-IT-WORKS-AND-WHY-IT-DOESN'T">Benchmark::Dumb</a> 'cmpthese'; # check this out if you haven't
$_ = 'xyzzy';
our $n = 1_000_000;
cmpthese 0, {
'/$str/',  => 'my $x=   "(?:)"; for(1..$::n){++$a if /$x/  }',
'/$str/o', => 'my $x=   "(?:)"; for(1..$::n){++$a if /$x/o }',
'/$qr/',   => 'my $x= qr/(?:)/; for(1..$::n){++$a if /$x/  }',
'/$qr/o',  => 'my $x= qr/(?:)/; for(1..$::n){++$a if /$x/o }',
};</code></pre>

<p>… gives me results like this:</p>

<pre>         Rate/s Precision/s /$qr/ /$str/ /$str/o /$qr/o
/$qr/     3.706     0.00022    -- -33.2%  -44.7% -44.7%
/$str/  5.54452     0.00095 49.6%     --  -17.3% -17.3%
/$str/o 6.70235     0.00099 80.9%  20.9%      --   0.0%
/$qr/o  6.70492     0.00074 80.9%  20.9%    0.0%     --</pre>

<p>The difference between <code>/$qr/o</code> and <code>/$str/o</code> is mere noise, whereas <code>/$qr/</code> and <code>/$str/</code> are separated by a wide gap, with the string version leading by over 30%.</p>

<p>Or to slice it another way, adding <code>/o</code> to <code>/$str/</code> speeds it up by 20% (nothing to scoff at, but not a giant difference) whereas <code>/$qr/</code> gets an 80% boost – i.e. a 4× bigger one.</p>

<p>Now, 20% for adding <code>/o</code> to <code>/$str/</code> is the best case, helped by the fact that the pattern is trivial. For confirmation I tried with much more complex patterns, and the result was as expected that all of the differences diminished – except for <code>/$qr/o</code> vs <code>/$str/o</code>, which however still barely registers and only just suffices to stabilise <code>/$qr/o</code> as the slower one.</p>

<p><em>Realistically</em>, then, you are looking at something in the 10–15% range from adding <code>/o</code> to <code>/$str/</code> – which is still a nice bonus, but nowhere near as significant as the 50–60% speedup available to <code>/$qr/</code>. The factor of 4 difference in how worthwhile <code>/o</code> is holds up even when the relative differences diminish.</p>

<p>The concrete figures, of course, apply on my machine and the particular perl with its specific compile options. What generalises is…</p>

<ol>
<li>the fact that a <code>qr</code> object is much slower to interpolate into a pattern match than a string,</li>
<li>that this difference is erased by <code>/o</code>,</li>
<li>meaning that <code>/o</code> speeds up even patterns that interpolate plain strings by a small but not necessarily insignificant bit,</li>
<li>but that it therefore makes a very real difference for patterns that interpolate <code>qr</code> objects.</li>
</ol>

<p>Of course <code>/o</code> affects the semantics of your code so you can’t just throw it on everything. What if you can’t use it? The evident answer is:</p>

<p>If your interface accepts a <code>qr</code> object to use repeatedly then you should flatten it to a string at the earliest opportunity and use that string instead of the original <code>qr</code> object.</p>
]]>
    </content>
</entry>
  <entry>
    <title>Segregate Perl Projects with App::plx</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/segregate-perl-projects-with-appplx-7oj" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/App::plx"&gt;App::plx&lt;/a&gt; (Plx) is a tool for configuring per-project Perl development environments.&lt;/p&gt;

&lt;p&gt;Plx is not difficult to use and has very clear documentation. In this post I will give a brief overview of some of the problems that it solves and how to get started using it.&lt;/p&gt;

&lt;p&gt;This is not a complete overview on everything that Plx can do.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgbd602ea"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Why Plx?
&lt;/h1&gt;

&lt;p&gt;Imagine you have a project that depends on a Perl version greater than that of your systems built-in Perl. You will need to install the correct version of Perl and figure out how to get your project to use this Perl instead of the system's Perl.&lt;/p&gt;

&lt;p&gt;Next imagine a scenario where you are working on two different Perl projects that depend on a different version of the same CPAN module. You will need to figure out how to install both versions into different locations, and then you will need to figure out how to locate the correct version from the two different projects.&lt;/p&gt;

&lt;p&gt;These are two important problems that Plx solves.&lt;/p&gt;

&lt;p&gt;&lt;a id="org87e7c16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Installation
&lt;/h1&gt;

&lt;p&gt;Before you can use Plx you must install Plx.&lt;/p&gt;

&lt;p&gt;If you already have a CPAN installer, such as &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanminus&lt;/a&gt;, then you should probably just use that to install Plx.&lt;/p&gt;

&lt;p&gt;Plx can also be bootstrapped into a self contained script like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir "$HOME/bin"
$ wget https://raw.githubusercontent.com/shadowcat-mst/plx/master/bin/plx-packed -O "$HOME/bin/plx"
$ chmod +x "$HOME/bin/plx"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can install Plx into any directory, I just chose "$HOME/bin" for simplicity. Just make sure you pick a directory in your &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgd968283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Initialization
&lt;/h1&gt;

&lt;p&gt;If you want to use Plx for your Perl project, you must first initialize the project to use Plx. To do this we must &lt;code&gt;cd&lt;/code&gt; into the root directory of the project and then execute Plx with the &lt;code&gt;--init&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--init&lt;/code&gt; flag behaves differently depending on its argument.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;--init&lt;/code&gt; is called with a file path, it assumes it is the path is to a Perl interpreter and sets up Plx to use it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --init /path/to/some/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When called with &lt;code&gt;perl&lt;/code&gt; as the argument it sets up Plx to use the first Perl in your &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --init perl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The final and most exciting way to call &lt;code&gt;--init&lt;/code&gt; is with a Perl version number. When called with a version number, Plx will look for a Perl of the given version first in your &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH&lt;/a&gt; and otherwise via &lt;a href="https://perlbrew.pl/"&gt;Perlbrew&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --init 5.36.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After initializing Plx you can execute your project code with a command like &lt;code&gt;$ plx /path/to/project/script.pl&lt;/code&gt;, and Plx will execute the script with the Perl interpreter you specified with the &lt;code&gt;plx --init&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This is how Plx solves the problem of needing to use a different Perl than your systems built-in Perl.&lt;/p&gt;

&lt;p&gt;&lt;a id="org124c9de"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Installing CPAN Modules
&lt;/h1&gt;

&lt;p&gt;My favorite feature of Plx is that it allows you to install modules off of CPAN into a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; using &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanminus&lt;/a&gt;. This allows you to segregate your CPAN modules dependencies on a per-project basis.&lt;/p&gt;

&lt;p&gt;To do this we must &lt;code&gt;cd&lt;/code&gt; into the root directory of our project and run the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --cpanm -Llocal Some::Module
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will install &lt;code&gt;Some::Module&lt;/code&gt; into a project-local library located in a directory named &lt;code&gt;local/lib&lt;/code&gt; at the root of the project.&lt;/p&gt;

&lt;p&gt;This solves the problem of two projects requiring different versions of the same CPAN module. If both projects use Plx they can simply install their desired version into a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="org9b2111c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Userstrap
&lt;/h1&gt;

&lt;p&gt;What if you want to use your own Perl interpreter and a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; when you are working outside of a dedicated Plx project?&lt;/p&gt;

&lt;p&gt;Plx has a &lt;code&gt;--userstrap&lt;/code&gt; flag that will set this up for you automatically.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --userstrap /path/to/some/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Calling &lt;code&gt;--userstrap&lt;/code&gt; essentially sets up your &lt;code&gt;$HOME&lt;/code&gt; to be a Plx project and sets up a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; in &lt;code&gt;$HOME/perl5&lt;/code&gt;, installs &lt;a href="https://metacpan.org/pod/App::plx"&gt;App::plx&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;App::cpanminus&lt;/a&gt; into the local::lib, and adds a line to your &lt;code&gt;$HOME/.bashrc&lt;/code&gt; that sets up Plx for your Bash shell.&lt;/p&gt;

&lt;p&gt;Now when you run Plx from outside a dedicated Plx project it will use &lt;code&gt;$HOME&lt;/code&gt; as a sort of default Plx project. You can use &lt;code&gt;--userstrap&lt;/code&gt; to prevent needing to use your system Perl, so you and can instead always use Plx.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;--userstrap&lt;/code&gt; requires that you use a Bash shell.&lt;/p&gt;

&lt;p&gt;&lt;a id="org285989d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Plx is For Everybody
&lt;/h1&gt;

&lt;p&gt;Plx is designed to not only provide a nice experience for Perl developers, but also to be usable by a sysadmin that isn't a Perl expert. Therefore Plx is configured through simple text files that can be manipulated by hand, and allows multiple commands to be run in a single Plx invocation via the &lt;code&gt;--multi&lt;/code&gt; flag, which makes scripting Plx cleaner.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgdee387b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Synopsis
&lt;/h1&gt;

&lt;p&gt;Plx is a tool for creating per-project virtual Perl environments. Plx lets us avoid a lot of headaches that come with developing multiple Perl projects on the same system.&lt;/p&gt;

&lt;p&gt;A lot of what Plx does can be done by combining features of other CPAN modules, but Plx brings together these functionalities in a way that is easy to use and understand.&lt;/p&gt;

&lt;p&gt;This blog post is only a brief introduction to Plx. Please go on to read the manual for more a more detailed overview of its features.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgef3ab18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Bonus Tip for Emacs Users
&lt;/h1&gt;

&lt;p&gt;If you lint your Perl code with the Perl interpreter using Flycheck, you will need to determine if the buffer is part of a Plx project so it runs the Perl interpreter through Plx.&lt;/p&gt;

&lt;p&gt;Use the following code to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'flycheck&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'projectile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'flycheck-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'my/cperl-select-correct-flycheck-checker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flycheck-define-checker&lt;/span&gt; &lt;span class="nv"&gt;my/perl-plx&lt;/span&gt;
  &lt;span class="ss"&gt;:command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"plx"&lt;/span&gt; &lt;span class="s"&gt;"-w"&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;option-list&lt;/span&gt; &lt;span class="s"&gt;"-I"&lt;/span&gt; &lt;span class="nv"&gt;flycheck-perl-include-path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;option-list&lt;/span&gt; &lt;span class="s"&gt;"-M"&lt;/span&gt; &lt;span class="nv"&gt;flycheck-perl-module-list&lt;/span&gt; &lt;span class="nv"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="ss"&gt;:standard-input&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
  &lt;span class="ss"&gt;:error-patterns&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="nv"&gt;line-start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;minimal-match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="s"&gt;" at - line "&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zero-or-more&lt;/span&gt; &lt;span class="nv"&gt;not-newline&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="nv"&gt;line-end&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="ss"&gt;:modes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;perl-mode&lt;/span&gt; &lt;span class="nv"&gt;cperl-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/cperl-select-correct-flycheck-checker&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"If the current buffer is part of a plx project then use the `my/perl-plx'
checker, otherwise use the `perl' checker."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;proj-root&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;projectile-project-root&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;proj-root&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-directory-p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;proj-root&lt;/span&gt; &lt;span class="s"&gt;".plx"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flycheck-select-checker&lt;/span&gt; &lt;span class="ss"&gt;'my/perl-plx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flycheck-select-checker&lt;/span&gt; &lt;span class="ss"&gt;'perl&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/segregate-perl-projects-with-appplx-7oj</id>
    <published>2022-09-03T00:09:10Z</published>
    <updated>2022-09-03T00:09:10Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Match Anything, Quickly</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/08/match-anything-quickly.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10871</id>
    <published>2022-08-06T05:39:25Z</published>
    <updated>2022-09-02T23:28:29Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><strong>Revision:</strong> that Cincinnati Perl Mongers found an error in the benchmark script used for this post. <a href="http://blogs.perl.org/users/tom_wyant/2022/09/match-anything-quickly----revision-1.html">Match Anything Quickly - Revision 1</a> discusses their findings and links to a revised benchmark script. -- TRW 2022-09-02</p>

<p>Sometimes I want to filter a set of strings, but the details of the filter are not known beforehand. In particular, I may want a null filter, which simply accepts anything.</p>

<p>This looks like a job for a regular expression, but I can think of at least two implementations. One is to pass around regular expression objects. The second is to wrap a match (<code>m//</code>) in a subroutine reference, and pass that around. Given the use of regular expressions, there are a number of possibilities for a regular expression that matches any string.</p>

<p>I wondered whether one of the alternatives I was choosing among was faster than another, so I decided to <a href="https://perldoc.perl.org/Benchmark.html"><code>Benchmark</code></a> them. Both implementations applied the regular expression to a global variable. In practice this would probably be a localized <code>$_</code>, but my read of the <a href="https://perldoc.perl.org/Benchmark.html"><code>Benchmark</code></a> module says that it also localizes <code>$_</code>, but leaves it <code>undef</code>.</p>

<p><strong>Note</strong> that the empty pattern is not benchmarked, because it is equivalent to the last successfully-matched pattern, if any. The <code>sub { 1 }</code> was included because if we're dealing in code references, the null filter simply needs to return a true value.</p>

<p>Here are the results, obtained with Perl 5.36.0, unthreaded. The script that generated them is on <a href="https://trwyant.github.io/blog/2022-08-05/match-anything-quickly.PL">GitHub</a></p>

<table>
<thead>
<tr><th>Implementation</th><th>Rate</th></tr>
</thead>
<tbody>
<tr><td>sub { 1 }</td><td style="text-align: right;">294117647.06/sec</td></tr>
<tr><td>sub { m/ .? /smx }</td><td style="text-align: right;">21645021.65/sec</td></tr>
<tr><td>sub { m/ .{0} /smx }</td><td style="text-align: right;">21598272.14/sec</td></tr>
<tr><td>sub { m/ (*ACCEPT) /smx }</td><td style="text-align: right;">20964360.59/sec</td></tr>
<tr><td>sub { m/ (?) /smx }</td><td style="text-align: right;">20876826.72/sec</td></tr>
<tr><td>sub { m/ \A /smx }</td><td style="text-align: right;">20746887.97/sec</td></tr>
<tr><td>sub { m/ (?:) /smx }</td><td style="text-align: right;">20618556.70/sec</td></tr>
<tr><td>sub { m/ ^ /smx }</td><td style="text-align: right;">20618556.70/sec</td></tr>
<tr><td>qr/ (?) /smx</td><td style="text-align: right;">2344665.89/sec</td></tr>
<tr><td>qr/ (?:) /smx</td><td style="text-align: right;">2344116.27/sec</td></tr>
<tr><td>qr/ ^ /smx</td><td style="text-align: right;">2336448.60/sec</td></tr>
<tr><td>qr/ \A /smx</td><td style="text-align: right;">2315350.78/sec</td></tr>
<tr><td>qr/ .? /smx</td><td style="text-align: right;">2208968.41/sec</td></tr>
<tr><td>qr/ .{0} /smx</td><td style="text-align: right;">2180074.12/sec</td></tr>
<tr><td>qr/ (*ACCEPT) /smx</td><td style="text-align: right;">1717327.84/sec</td></tr>
</tbody>
</table>

<p>Somewhat to my surprise, the subroutine-reference implementation was an
order of magnitude faster than the regular-expression-reference implementation.
I expected that, <code>Regexp</code>s being first-class objects, it would be
pretty much equivalent to <code>m/ ... /</code> wrapped in a subroutine --
maybe even a little faster.</p>

<p>A little messing around with <code>perl -MO=Concise</code> got me the following:</p>

<pre>
$ perl -MO=Concise -e '$_ =~ m/foo/;'
5  &lt;@&gt; leave[1 ref] vKP/REFC -&gt;(end)
1     &lt;0&gt; enter v -&gt;2
2     &lt;;&gt; nextstate(main 1 -e:1) v:{ -&gt;3
4     &lt;/&gt; match(/"foo"/) vKS -&gt;5
-        &lt;1&gt; ex-rv2sv sK/1 -&gt;4
3           &lt;$&gt; gvsv(*_) s -&gt;4
-e syntax OK
$ perl -MO=Concise -e '$_ =~ qr/foo/;'
7  &lt;@&gt; leave[1 ref] vKP/REFC -&gt;(end)
1     &lt;0&gt; enter v -&gt;2
2     &lt;;&gt; nextstate(main 1 -e:1) v:{ -&gt;3
6     &lt;/&gt; match() vKS -&gt;7
-        &lt;1&gt; ex-rv2sv sK/1 -&gt;4
3           &lt;$&gt; gvsv(*_) s -&gt;4
5        &lt;|&gt; regcomp(other-&gt;6) sK -&gt;6
4           &lt;/&gt; qr(/"foo"/) s -&gt;5
-e syntax OK
</pre>

<p>The salient difference, to my eye, was the presence of the <code>regcomp</code> operator in the second case. <a href="https://metacpan.org/pod/Perldoc::Search"><code>perldoc-search</code></a> on this led me eventually to <a href="https://perldoc.perl.org/perlreapi.html"><code>perlreapi</code></a> which says, in part,</p>

<p><br />
<dl><br />
    <dt>"precomp" "prelen"</dt><br />
    <dd><br />
	<p>Used for optimisations. "precomp" holds a copy of the pattern that was compiled and "prelen" its length. When a new pattern is to be compiled (such as inside a loop) the internal "regcomp" operator checks if the last compiled "REGEXP"'s "precomp" and "prelen" are equivalent to the new one, and if so uses the old pattern instead of compiling a new one.</p></p>

<p>	<p>The relevant snippet from "Perl_pp_regcomp":</p><br />
	<pre><br />
            if (!re || !re-&gt;precomp || re-&gt;prelen != (I32)len ||<br />
                memNE(re-&gt;precomp, t, len))<br />
            /* Compile a new pattern */<br />
	</pre><br />
    </dd><br />
</dl></p>

<p>So I <strong>assume</strong> that the speed difference <strong>might</strong> be reduced if the filter was called in a tight enough loop. But if so, the <a href="https://perldoc.perl.org/Benchmark.html"><code>Benchmark</code></a> loop is not tight enough, and it's pretty tight. On the other hand, maybe the <code>Benchmark</code> loop <strong>is</strong> tight enough, and the extra time is spent determining that a recompilation is not needed. But it will take deeper knowledge of Perl internals than I possess to sort this out.</p>
]]>
        
    </content>
</entry>
  <entry>
    <title>Match Anything, Quickly -- Revision 1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/09/match-anything-quickly----revision-1.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10881</id>
    <published>2022-09-02T23:17:31Z</published>
    <updated>2022-09-02T23:23:02Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><cite>O wad some Power the giftie gie us<br />
    To see oursels as ithers see us!<br />
    It wad frae mony a blunder free us,<br />
    An' foolish notion: ...</cite></p>

<p>My previous blog post, <a href="https://blogs.perl.org/users/tom_wyant/2022/08/match-anything-quickly.html">Match Anything, Quickly</a>, brought a number of responses which are worth reading in their own right. The one that triggered this post, though, was from <a href="https://nrdvana.net/">Nerdvana</a> and Devin of Cincinnati Perl Mongers, who pointed out an error in my benchmark script. I had left off the intended <code>/smx</code> from the <code>qr/ ... /</code> version of the test, which meant that the regular expression did not in fact match.</p>

<p><strong>Three cheers for code reviews!</strong></p>

<p>The Cincinnati Perl Mongers came up with a further case which combines my two:</p>

<pre>
eval "do { my \$regex = qr/ $re /smx; " .
        "sub { \$MATCH =~ /\$regex/o }};"
</pre>

<p>They benchmarked this as being slightly slower than the case where the regular expression is simply interpolated into the subroutine verbatim.</p>

<p>Interestingly (to me, at least) they reported that the removal of the <code>/o</code> modifier made their case 2-3 times slower. This surprised me somewhat, as I had understood that modern Perls (for some value of "modern") had done things to minimize the performance difference between the presence and absence of <code>/o</code>.</p>

<p>For the record, the corrected script is also on <a href="https://trwyant.github.io/blog/2022-09-02/match-anything-quickly-rev01.PL">GitHub</a>. The corrections include an option that tests to make sure all benchmarked things actually match. The result of running this with the <code>--test</code> and <code>--html</code> options (on a different machine than the original post) is:</p>

<pre>
ok 1 - sub { 1 }
ok 2 - sub { $MATCH =~ m/ (*ACCEPT) /smx }
ok 3 - qr/ (*ACCEPT) /smx
ok 4 - sub { $MATCH =~ m/ (?) /smx }
ok 5 - qr/ (?) /smx
ok 6 - sub { $MATCH =~ m/ (?:) /smx }
ok 7 - qr/ (?:) /smx
ok 8 - sub { $MATCH =~ m/ .? /smx }
ok 9 - qr/ .? /smx
ok 10 - sub { $MATCH =~ m/ .{0} /smx }
ok 11 - qr/ .{0} /smx
ok 12 - sub { $MATCH =~ m/ \A /smx }
ok 13 - qr/ \A /smx
ok 14 - sub { $MATCH =~ m/ ^ /smx }
ok 15 - qr/ ^ /smx
1..15
</pre>

<table>
<thead>
<tr><th>Implementation</th><th>Rate</th></tr>
</thead>
<tbody>
<tr><td>sub { 1 }</td><td style="text-align: right;">434782608.70/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ \A /smx }</td><td style="text-align: right;">13333333.33/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ ^ /smx }</td><td style="text-align: right;">13315579.23/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ (?:) /smx }</td><td style="text-align: right;">12315270.94/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ (?) /smx }</td><td style="text-align: right;">11173184.36/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ .{0} /smx }</td><td style="text-align: right;">10593220.34/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ .? /smx }</td><td style="text-align: right;">10449320.79/sec</td></tr>
<tr><td>sub { $MATCH =~ m/ (*ACCEPT) /smx }</td><td style="text-align: right;">4380201.49/sec</td></tr>
<tr><td>qr/ ^ /smx</td><td style="text-align: right;">2612330.20/sec</td></tr>
<tr><td>qr/ \A /smx</td><td style="text-align: right;">2603488.67/sec</td></tr>
<tr><td>qr/ (?:) /smx</td><td style="text-align: right;">2586652.87/sec</td></tr>
<tr><td>qr/ (?) /smx</td><td style="text-align: right;">2575991.76/sec</td></tr>
<tr><td>qr/ .{0} /smx</td><td style="text-align: right;">2518891.69/sec</td></tr>
<tr><td>qr/ .? /smx</td><td style="text-align: right;">2510670.35/sec</td></tr>
<tr><td>qr/ (*ACCEPT) /smx</td><td style="text-align: right;">1849796.52/sec</td></tr>
</tbody>
</table>
]]>
        
    </content>
</entry>
  <entry>
  <title>Dancer2: Sessions</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-09-02T14:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-sessions"/>  <id>https://perlmaven.com/dancer2-sessions</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Distribution auf Dist::Zilla umstellen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-09-02-distribution-auf-distzilla-umstellen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In diesem Artikel zeige ich dir, wie du eine bestehende Distribution mit möglichst wenig Aufwand auf Dist::Zilla umstellen kannst.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-09-02-distribution-auf-distzilla-umstellen</id>
    <published>2022-09-02T10:00:00Z</published>
    <updated>2022-09-02T10:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-09-02T00:00:00Z</published>
    <updated>2022-09-02T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Calculating tetranucleotide (k-mer) frequencies</title>
    <link rel="alternate" href="https://dev.to/jmeneghin/calculating-tetranucleotide-k-mer-frequencies-969" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Last week I posted about a Perl script I wrote that calculates %GC content for genome sequences. This week, I’m generalizing this idea to k-mers. In bioinformatics, <a href="https://en.wikipedia.org/wiki/K-mer">k-mers</a> are substrings of length k in biological sequences. </p>

<p>In 2016 I wrote a Perl script for the Reysenbach lab that calculates k-mer frequencies, for all k-mers in a given sequence. It was made public soon after, and you can find get_kmer_frequencies.pl on <a href="https://github.com/jmeneghin/perl-for-reysenbach-lab">my Github page</a>.</p>

<p>Typically, in the lab, we were interested in tetranucleotide frequencies. Tetranucleotides are k-mers of length four. Tetranucleotide frequencies have been used in the analysis of microbial genomes for many years [1], and they are often used in the process of binning contigs in metagenomics [2].</p>

<p>Originally, I wrote a script called get_tetranucleotide_frequencies.pl that was used in this PhD dissertation:</p>

<p><a href="https://researchonline.jcu.edu.au/52906/">Buerger, P. 2017. Viruses: contributors to and mitigators of black band disease in corals. James Cook University, Queensland, Australia.</a></p>

<p>The newer get_kmer_frequencies.pl script was used to calculate tetranucleotide frequencies in this Master’s thesis:</p>

<p><a href="https://pdxscholar.library.pdx.edu/open_access_etds/4939/">St. John, E. 2019. Symbiosis in Archaea: Functional and Phylogenetic Diversity of Marine and Terrestrial Nanoarchaeota and their Hosts.</a></p>

<p>The new script allows you to calculate k-mers of any length. This script takes three parameters; a fasta file, k and a file name prefix:</p>

<p><code>get_kmer_frequencies.pl infile.fasta k fileprefix</code></p>

<p>It returns a tab delimited file called fileprefix_kmer.txt, where fileprefix is the prefix you specified in the parameters. The columns are fasta records, and rows are k-mer counts. Notice all k-mer counts are given here — so if your data contains any other symbols besides A, C, G, and T, those will be included in the k-mer combinations. Extra rows are an indication of dirty data, and I would remove these rows for analysis purposes.</p>

<p>The newer get_kmer_frequencies.pl script also takes into consideration that reverse complimented k-mers should be summed together. </p>

<p>"DNA occurs as a double strand where each A is paired with a T and vice versa, and each C is paired with a G and vice versa. The reverse complement of a DNA sequence is formed by reversing the letters, interchanging A and T and interchanging C and G. Thus the reverse complement of ACCTGAG is CTCAGGT.” <a href="https://www.bx.psu.edu/old/courses/bx-fall08/definitions.html">From A Computer Scientist’s Dictionary for Genomics</a></p>

<p>The fasta sequences we look at on the computer only contain the nucleotides of a single strand of DNA, while actual DNA is double stranded. So, if our fasta sequence DNA has the k-mer AAAA 20 times, for example, then the other strand in actual reality should have TTTT 20 times. But, that second strand also contains AAAA, say 12 times for example, and then the first strand should also contain TTTT 12 times. So, in double stranded reality, AAAA/TTTT shows up 32 times on the double stranded string (for this example), sometimes with AAAA on the first strand, sometimes on the second strand. To take this into consideration, we sum the reverse complements.</p>

<p>For tetranucleotides, this means instead of 256 possible combinations (4 to the 4th power — given there are 4 nucleotides and a k-mer sequence length of 4), there are actually only 136. Why not 128? Because 16 tetranucleotide sequences are reverse complements of themselves (e.g., AATT and CATG). So, we have (256-16)/2 = 120 tetranucleotides with reverse complements, and then we add back in the tetranucleotides without reverse complements to get 120+16 = 136 total tetranucleotides. </p>

<p>These calculations are similar for any length k-mer. We only find k-mers with self-reverse-complements with even length k-mers. So, for length 3, we have 4 to the 3rd power divided by 2, or 64/2 = 32 possible 3-mers. For length 1, we have 4 to the 1st power divided by 2, or 2 1-mers, A/T and C/G. Bringing this full circle, if we express our 1-mers as a percentage, we only need to look at A/T or C/G. If we choose C/G, that’s what’s known as %GC content.</p>

<p>In 2020 I rewrote several of my Perl scripts in Python, including get_kmer_frequencies.py, which can be run as follows. </p>

<p><code>get_kmer_frequencies.py -i infile.fasta -k k -p fileprefix</code></p>

<p>This script is available for download on <a href="https://github.com/jmeneghin/python-bioinformatics">my GitHub page</a>.  To test for speed, I ran these two scripts five times each with two different sequence examples; a full genome file containing one long fasta record, and a Metagenome Assembled Genome (MAG) file containing 1708 shorter fasta records. Python was 2.9 times faster than Perl for the full genome, and 2.1 times faster than Perl for the MAG. I’ve recently become aware of the optimizing compiler <a href="http://rperl.org">RPerl</a>, which allows Perl to be compiled into “ultra-fast and fully-compatible” C++, so I’m excited to try this out and see how the results compare to both Perl and Python. </p>

<p>[1] Noble PA, Citek RW, Ogunseitan OA. Tetranucleotide frequencies in microbial genomes. Electrophoresis. 1998 Apr;19(4):528-35. doi: 10.1002/elps.1150190412. PMID: 9588798.</p>

<p>[2] Kang DD, Li F, Kirton E, Thomas A, Egan R, An H, Wang Z. MetaBAT 2: an adaptive binning algorithm for robust and efficient genome reconstruction from metagenome assemblies. PeerJ. 2019 Jul 26;7:e7359. doi: 10.7717/peerj.7359. PMID: 31388474; PMCID: PMC6662567.</p>

</div>
    </content>
    <author>
      <name>Jennifer Meneghin</name>
    </author>
    <id>https://dev.to/jmeneghin/calculating-tetranucleotide-k-mer-frequencies-969</id>
    <published>2022-09-01T19:01:02Z</published>
    <updated>2022-09-01T19:01:02Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="bioinformatics"/>
    <category term="rperl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 180:  First Unique Character and Trim List</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/08/perl-weekly-challenge-180-first-unique-character-and-trim-list.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10879</id>
    <published>2022-08-29T22:35:30Z</published>
    <updated>2022-09-01T03:27:13Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 180 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-180/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Sept. 4, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1:  First Unique Character</h2>

<p><em>You are given a string, <code>$s</code>.</em></p>

<p><em>Write a script to find out the first unique character in the given string and print its index (0-based).</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $s = "Perl Weekly Challenge"
Output: 0 as 'P' is the first unique character
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $s = "Long Live Perl"
Output: 1 as 'o' is the first unique character
</code></pre>

<h3>First Unique Character in Raku</h3>

<p>This is a straight-forward, no-frills solution. I thought that I could write a better (or, at least, simpler) solution using features such as <a href="https://modules.raku.org/dist/ArrayHash">ArrayHash</a> or <a href="https://raku.land/zef:lizmat/Hash::Ordered">Hash::Ordered</a>, but this did not seem to simplify the syntax. Similarly, I initially wanted to use the built-in <a href="https://docs.raku.org/routine/first">first</a> routine, but it only made things more complicated. So, I ended up with a plain-vanilla solution using a hash (the <code>%h</code> letter histogram) and an array (the <code>@let</code> array) in parallel, and a hand-made loop to look for the first unique letter. </p>

<pre><code>for "Perl Weekly Challenge", "Long Live Perl" -&gt; $test {
    my @let = $test.comb;
    my %h;      # histogram of letters
    %h{$_}++ for @let;
    say "$test: $_" and last if %h{@let[$_]} == 1 for 0..@let.end;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./first_unique.raku
Perl Weekly Challenge: 0
Long Live Perl: 1
</code></pre>

<h3>First Unique Character in Perl</h3>

<p>The good thing of having used a plain-vanilla solution in Raku is that it can be ported directly to Perl (and other languages) with only small changes. We&#8217;re using a hash (the <code>%h</code> letter histogram) and an array (the <code>@let</code> array) in parallel, and a hand-made loop to look for the first unique letter.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ("Perl Weekly Challenge", "Long Live Perl") {
    my @let = split //, $test;
    my %h;
    $h{$_}++ for @let;
    for my $i (0..$#let) {
        say "$test: $i" and last if $h{$let[$i]} == 1;
    }
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./first_unique.pl
Perl Weekly Challenge: 0
Long Live Perl: 1
</code></pre>

<h3>First Unique Character in Julia</h3>

<p>Note, if you did not guess it, that the <code>only</code> function converts a one-letter string into a char. Also remember that Julia arrays start at index 1. The task asks us to provide the <em>0-based index</em> of the first unique character. This is unnatural in Julia, so we have to subtract 1 from the Julia index to get a o-based index. </p>

<pre><code>for test in [ "Perl Weekly Challenge", "Long Live Perl" ]
    histo = Dict()
    letters = split(test, "")
    for ch in test
        histo[ch] = if (haskey(histo, ch)) histo[ch]+1 else 1 end
    end
    for i in 1:length(letters)
        if (histo[only(letters[i])] == 1)
            println(test, ": ", i-1)
            break
        end
    end
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./first_unique.jl
Perl Weekly Challenge: 0
Long Live Perl: 1
</code></pre>

<h2>Task 2: Trim List</h2>

<p><em>You are given list of numbers, <code>@n</code> and an integer <code>$i</code>.</em></p>

<p><em>Write a script to trim the given list where element is less than or equal to the given integer.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @n = (1,4,2,3,5) and $i = 3
Output: (4,5)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @n = (9,0,6,2,3,8,5) and $i = 4
Output: (9,6,8,5)
</code></pre>

<p>This is quite easy using the built-in <code>grep</code> function in Raku and Perl (or <code>filter</code> in Python or Scala).</p>

<h3>Trim List in Raku</h3>

<p>Rather than filtering out items which are less than or equal to the input integer, we keep numbers that are larger than the input integer.</p>

<pre><code>for [3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]] -&gt; $test {
    my $i = $test[0];
    my @nums = |$test[1];
    say "i = $i; nums = @nums[] =&gt; ", grep { $_ &gt; $i }, @nums;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./trim_list.raku
i = 3; nums = 1 4 2 3 5 =&gt; (4 5)
i = 4; nums = 9 0 6 2 3 8 5 =&gt; (9 6 8 5)
</code></pre>

<h3>Trim List in Perl</h3>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ( [3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]] ) {
    my $i = $test-&gt;[0];
    my @nums = @{$test-&gt;[1]};
    say "i = $i, nums = @nums =&gt; ", join " ", grep $_ &gt; $i, @nums;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./trim_list.pl
i = 3, nums = 1 4 2 3 5 =&gt; 4 5
i = 4, nums = 9 0 6 2 3 8 5 =&gt; 9 6 8 5
</code></pre>

<h3>Trim List in Other languages</h3>

<p>The following is a series of implementations of the Trim List task in 14 guest manguages as follows:</p>

<ul>
<li>in Awk</li>
<li>in C</li>
<li>in D</li>
<li>in Java</li>
<li>in JavaScript</li>
<li>in Julia</li>
<li>in Go</li>
<li>in Kotlin</li>
<li>in Lua</li>
<li>in Pascal</li>
<li>in Python</li>
<li>in Ring</li>
<li>in Ruby</li>
<li>in Scala</li>
</ul>

<h4>Trim List in Awk</h4>

<p>Contrary to Raku and Perl, awk doesn&#8217;t have a <code>grep</code> or <code>filter</code> feature. So we implement a loop over the values and print out those that satisfy the condition. We&#8217;ll do that in several other languages. Also note that, since awk is essentially driven by external data, the data is passed by the shell to the awk script. On each line, the first item in the input integer to be compared the other values.</p>

<pre><code># run for example as:
# echo '3 1 4 2 3 5 
#      4 9 0 6 2 3 85 ' | awk -f trim_list.awk

{ 
    i = $1
    printf "Input = %-18s- i = %d   =&gt; result = ", $0, $1
    for (j = 2; j &lt;= NF; j++) {
        if ( $j &gt; i) {
            printf "%d ", $j
        }
    }
    print ""
}
</code></pre>

<p>Output:</p>

<pre><code>$ echo '3 1 4 2 3 5
4 9 0 6 2 3 8 5 ' | awk -f trim_list.awk
Input = 3 1 4 2 3 5       - i = 3   =&gt; result = 4 5
Input = 4 9 0 6 2 3 8 5   - i = 4   =&gt; result = 9 6 8 5
</code></pre>

<h4>Trim List in C</h4>

<p>C doesn&#8217;t have a built-in <code>grep</code> or <code>filter</code> feature. So we implement a loop over the values and print out those that satisfy the condition. On each test line, the first item in the input integer to be compared the other values.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main() {
    const char tests[2][10] = {
            { 3, 1, 4, 2, 3, 5 },
            { 4, 9, 0, 6, 2, 3, 8, 5 }
        };
    for (int j = 0; j &lt;=1; j++) {
        char test[10];
        memcpy(test, tests[j],  sizeof(tests[j]));
        int i = test[0];
        printf("i = %d; nums = ", i);
        /* printing input test array */
        for (char k = 1; k &lt; sizeof(test); k++) {
            printf("%d ", test[k]);
        }
        printf("  =&gt;  ");
        /* printing the result */
        for (char k = 1; k &lt; sizeof(test); k++) {
            if (test[k] &gt; i) {
                printf("%d ", test[k]);
            }
        }
        printf("%s\n", "");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
i = 3; nums = 1 4 2 3 5 0 0 0 0   =&gt;  4 5
i = 4; nums = 9 0 6 2 3 8 5 0 0   =&gt;  9 6 8 5
</code></pre>

<h4>Trim List in D</h4>

<pre><code>import std.stdio;

void main() {
    int[][][] tests = [[[3], [1,4,2,3,5]], [[4], [9,0,6,2,3,8,5]]];
    foreach(test; tests) {
        int i = test[0][0];
        int[] nums = test[1];
        write(i, " ", nums, "  =&gt;  ");
        for (int j = 0; j &lt; nums.length; j++) {
            if (nums[j] &gt; i) {
                printf("%d ", nums[j]);
            }
        }
    writeln("");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>3 [1, 4, 2, 3, 5]  =&gt;  4 5 
4 [9, 0, 6, 2, 3, 8, 5]  =&gt;  9 6 8 5
</code></pre>

<h4>Trim List in Java</h4>

<pre><code>import java.util.Arrays;

public class TrimList {
    private static final int[][][] tests =
        {{{3}, {1,4,2,3,5}}, {{4}, {9,0,6,2,3,8,5}}};
    public static void main(String[] args) {
        for (int j = 0; j &lt; tests.length; j++) {
            int i = tests[j][0][0];
            int[] nums = tests[j][1];
            System.out.printf("i = %d; nums = %s =&gt; ", 
                i, Arrays.toString(nums));
            for (int k = 0; k &lt; nums.length; k++) {
                if (nums[k] &gt; i) {
                    System.out.printf("%d ", nums[k]);
                }
            }
        System.out.printf("%s", "\n");
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>i = 3; nums = [1, 4, 2, 3, 5] =&gt; 4 5 
i = 4; nums = [9, 0, 6, 2, 3, 8, 5] =&gt; 9 6 8 5
</code></pre>

<h4>Trim List in JavaScript</h4>

<pre><code>tests = [[[3], [1,4,2,3,5]], [[4], [9,0,6,2,3,8,5]]];
for(let j = 0; j &lt; tests.length; j++) {
    let i = tests[j][0][0]
    let nums = tests[j][1]
    process.stdout.write("i= " + i + " nums= " + nums + "  =&gt;  ")
    for (let k = 0; k &lt; nums.length; k++) {
        if ( nums[k] &gt; i) {
            process.stdout.write(nums[k] + " ")
        }
    }
    process.stdout.write("\n")
}
</code></pre>

<p>Output:</p>

<pre><code>i= 3 nums= 1,4,2,3,5  =&gt;  4 5 
i= 4 nums= 9,0,6,2,3,8,5  =&gt;  9 6 8 5
</code></pre>

<h4>Trim List in Julia</h4>

<p>In my humble opinion, Julia is the best language used in this blog post after Raku and Perl. Just consider how concise and clear this implementation is, compared to most other languages. And it has very nice functional programming capabilities (e.g. the <code>filter</code> built-in function below with its lambda). In addition, Julia runs fast. Its only drawback in my view is that the error messages emitted by the compiler or the runtime are really not clear (like most languages that compile to Java code).</p>

<pre><code>for test in [[3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]]]
    i = test[1]
    nums = test[2]
    println( "i = $i, num = $nums =&gt; ", filter((x) -&gt; x &gt; i, nums))
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./trim_list.jl
i = 3, num = [1, 4, 2, 3, 5]: [4, 5]
i = 4, num = [9, 0, 6, 2, 3, 8, 5]: [9, 6, 8, 5]
</code></pre>

<h4>Trim List in Go</h4>

<pre><code>package main

import "fmt"

func main() {
    tests := [2][2][8]int{{{3}, {1, 4, 2, 3, 5}}, 
                          {{4}, {9, 0, 6, 2, 3, 8, 5}}
                         }
    for j := 0; j &lt; len(tests); j++ {
        i := tests[j][0][0]
        fmt.Printf("i = %d; nums = ", i)
        nums := tests[j][1]
        fmt.Print(nums, "; =&gt; ")
        for k := 0; k &lt; len(nums); k++ {
            if nums[k] &gt; i {
                fmt.Printf("%d ", nums[k])
            }
        }
        fmt.Println("")
    }
}
</code></pre>

<p>Output:</p>

<pre><code>i = 3; nums = [1 4 2 3 5 0 0 0]; =&gt; 4 5 
i = 4; nums = [9 0 6 2 3 8 5 0]; =&gt; 9 6 8 5
</code></pre>

<h4>Trim List in Kotlin</h4>

<p>Declaring a multidimensional array in Kotlin is a pain in the neck (as well as in Scala, and it is even worse in Nim). Besides that, the implementation is quite straight forward.</p>

<pre><code>import java.util.Arrays

fun main() {
    val tests  = arrayOf(arrayOf(intArrayOf(3,), 
                                 intArrayOf(1,4,2,3,5)),
                         arrayOf(intArrayOf(4,), 
                                 intArrayOf(9,0,6,2,3,8,5))
                        )

    for (test in tests) {
        print(Arrays.deepToString(test) + "  =&gt;  ")
        var i = test[0][0]
        var nums = test[1];
        for (j in nums) {
            if (j &gt; i) {
                print(j.toString() + " ")
            }
        }
        println("")

    }
}
</code></pre>

<p>Output:</p>

<pre><code>[[3], [1, 4, 2, 3, 5]]  =&gt;  4 5 
[[4], [9, 0, 6, 2, 3, 8, 5]]  =&gt;  9 6 8 5
</code></pre>

<h4>Trim List in Lua</h4>

<pre><code>tests = {{{3}, {1,4,2,3,5}}, {{4}, {9,0,6,2,3,8,5}}}
for _, test in ipairs(tests) do
    local i = test[1][1]
    local nums = test[2]
    io.write("i= ", i, "; nums= ", table.concat(nums, " "), " =&gt; ")
    for _, j in ipairs(nums) do
        if j &gt; i then
            io.write(j, " ")
        end
    end
    print("")
end
</code></pre>

<p>Output:</p>

<pre><code>i= 3; nums= 1 4 2 3 5 =&gt; 4 5 
i= 4; nums= 9 0 6 2 3 8 5 =&gt; 9 6 8 5
</code></pre>

<h4>Trim List in Pascal</h4>

<p>In Pascal, since I declared the third dimension of the <code>tests</code> array to be <code>0..6</code>, I had to fill the empty slots with zeroes. If there is a better way, I do not know it (I learned and used Pascal about 33 years ago and almost did not use it since, please forgive my ignorance). It not, then it is a major weakness of the language. Otherwise, the syntax is a bit verbose, but very clear.</p>

<pre><code>program TrimList;

const tests : array[0..1,0..1,0..6] of integer =
    (((3,0,0,0,0,0,0), (1,4,2,3,5,0,0)), ((4,0,0,0,0,0,0), (9,0,6,2,3,8,5)));

var
    i, j, k: integer;
    nums: array of integer;

begin
    for j := 0 to length(tests) - 1 do
    begin
        i := tests[j][0][0];
        write('i = ', i, '; nums = ');
        nums := tests[j][1];
        for k := 0 to length(nums) - 1 do
        begin
            write(nums[k], ' ');
        end;
        write(' =&gt; ');
        for k := 0 to length(nums) - 1 do
        begin
            if nums[k] &gt; i then
                write(nums[k], ' ');
        end;
        writeln('')
    end;
end.
</code></pre>

<p>Output:</p>

<pre><code>i = 3; nums = 1 4 2 3 5 0 0  =&gt; 4 5 
i = 4; nums = 9 0 6 2 3 8 5  =&gt; 9 6 8 5
</code></pre>

<h4>Trim List in Python</h4>

<p>About 19 years ago, I took up Perl and stopped writing in Python (my favorite language for a few years at that point), because I felt Perl was superior. I still think so, but I must admit Python is fairly expressive and concise.</p>

<pre><code>for test in [3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]]:
  i = test[0]
  nums = test[1]
  print(i, nums, " =&gt; ", list(filter(lambda n: n&gt;i, nums)))
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./trim_list.py
3 [1, 4, 2, 3, 5]  =&gt;  [4, 5]
4 [9, 0, 6, 2, 3, 8, 5]  =&gt;  [9, 6, 8, 5]
</code></pre>

<h4>Trim List in Ring</h4>

<pre><code>for test in [[3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]]]
    i = test[1]
    nums = test[2]
    see "i = " + i + " ; nums = " 
    for j in nums
        see "" + j + " "
    next
    see " =&gt; "
    for j in nums
        if j &gt; i
            see "" + j + " "
        ok
    next
    see " " +nl
next
</code></pre>

<p>Output:</p>

<pre><code>$ ring  ./trim_list.ring
i = 3 ; nums = 1 4 2 3 5  =&gt; 4 5
i = 4 ; nums = 9 0 6 2 3 8 5  =&gt; 9 6 8 5
</code></pre>

<h4>Trim List in Ruby</h4>

<pre><code>for test in [ [3, [1,4,2,3,5]], [4, [9,0,6,2,3,8,5]] ]
    i = test[0]
    nums = test[1]
    print "i = #{i}, nums = #{nums} =&gt; ", nums.select {|n| n &gt; i}
    puts " "
end
</code></pre>

<p>Output:</p>

<pre><code>i = 3, nums = [1, 4, 2, 3, 5] =&gt; [4, 5] 
i = 4, nums = [9, 0, 6, 2, 3, 8, 5] =&gt; [9, 6, 8, 5]
</code></pre>

<h4>Trim List in Scala</h4>

<p>As I said above, declaring multidimensional arrays is a pain in the neck in Scala. And its typing system can be a straitjacket. It&#8217;s a pity because Scala has very nice features in terms of combining object-oriented and functional programming paradigms.</p>

<pre><code>object trimList extends App {
  val tests: List[List[List[Int]]] = List(
    List(List(3), List(1, 4, 2, 3, 5)),
    List(List(4), List(9, 0, 6, 2, 3, 8, 5))
  )
  for (test &lt;- tests) {
    val i = test(0)(0)
    val nums = test(1)
    print(s"i: $i, nums: " + nums.mkString(" "))
    println(" =&gt; " + nums.filter(_ &gt; i).mkString(" "))
  }
}
</code></pre>

<p>Output:</p>

<pre><code>i: 3, nums: 1 4 2 3 5 =&gt; 4 5
i: 4, nums: 9 0 6 2 3 8 5 =&gt; 9 6 8 5
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on September 11, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Aug 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/09/01/list-of-new-cpan-distributions-aug-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Octopart">API-Octopart</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td>Simple inteface for querying part status across vendors at octopart.com.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WordListBundle-Proverbs">Acme-CPANModules-WordListBundle-Proverbs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>All proverbs WordList modules (in all languages)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-Graphs-Reachable-Tiny">Algorithm-Graphs-Reachable-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Compute rechable nodes in a graph.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Fetch-HostAllowList">Alien-Build-Plugin-Fetch-HostAllowList</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Require that Alien::Build based aliens only fetch from an allow list of hosts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Fetch-HostBlockList">Alien-Build-Plugin-Fetch-HostBlockList</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Reject any Alien::Build fetch requests going to hosts in the block list</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Libdogecoin">Alien-Libdogecoin</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>v0.1.1</td>
<td>v0.1.1.1</td>
<td>Discover or download and install libdogecoin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FontUtils">App-FontUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Command-line utilities related fonts and font files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Games-Keno">App-Games-Keno</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1.222380</td>
<td>1.222380</td>
<td>Plays Keno</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-InvestSim">App-InvestSim</a></td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>v0.8.0</td>
<td>v1.0.1</td>
<td>Simulateur d'investissement locatif</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Keno">App-Keno</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1.222380</td>
<td>1.222380</td>
<td>Plays Keno</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Perl-Module-Examples">App-Perl-Module-Examples</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tool for creating examples from Perl module POD documentation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Schema-Deploy">App-Schema-Deploy</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for Schema deploy.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Data-Walk-More">Bencher-Scenarios-Data-Walk-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Data::Walk::More</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bundle-DadaMail-IncludedInDistribution">Bundle-DadaMail-IncludedInDistribution</a></td>
<td><a href="https://metacpan.org/author/JJSIMONI">JJSIMONI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>CPAN Bundle of modules used in Dada Mail that are included within the distribution.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cache-CodeBlock">Cache-CodeBlock</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.02</td>
<td>caching via a code block</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Check-Fork">Check-Fork</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Check fork functionality.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Check-Socket">Check-Socket</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Check socket functionality.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chemistry-File-CML">Chemistry-File-CML</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.10</td>
<td>0.11</td>
<td>CML reader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ControlBreak">ControlBreak</a></td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>1.00</td>
<td>v0.22.243</td>
<td>Compare values during iteration to detect changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CryptoTron-AddrTools">CryptoTron-AddrTools</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Test-Release-Automation">Cucumber-Test-Release-Automation</a></td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>0.0.0</td>
<td>v0.0.39</td>
<td>Dummy project for testing release automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-FilterBundle-Phone">Data-Sah-FilterBundle-Phone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah filters related to phone numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-Holidays-BQ">Date-Holidays-BQ</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Bonaire's official holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-Holidays-US">Date-Holidays-US</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Date::Holidays Adapter for US Federal holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-MAT-Tool-Future">Devel-MAT-Tool-Future</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>analyse Future logic</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/English-Name">English-Name</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>${^ENGLISH_NAME} for magic variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Feature-Compat-Class">Feature-Compat-Class</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>make class syntax available</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-Libdogecoin">Finance-Libdogecoin</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20220814.2215</td>
<td>1.20220815.1712</td>
<td>Use the libdogecoin shared library from Perl!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-XS">Future-XS</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>experimental XS implementation of Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Glitch">Glitch</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.06</td>
<td>The great new Glitch!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTTP-Curl">HTTP-Curl</a></td>
<td><a href="https://metacpan.org/author/KNI">KNI</a></td>
<td>1.03</td>
<td>1.04</td>
<td>HTTP interface for Net::Curl (clone HTTP::Any::Curl)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HV-Monitor">HV-Monitor</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>A generalized module for gathering stats for a hypervisor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hydrogen">Hydrogen</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.015</td>
<td>utilities for the simplest elements of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iss-Ah-Predictor">Iss-Ah-Predictor</a></td>
<td><a href="https://metacpan.org/author/CHRISTOPH">CHRISTOPH</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>ISS AH Predictor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Permutation">Math-Permutation</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.01</td>
<td>pure Perl implementation of functions related to the permutations </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Access">Mojolicious-Plugin-Access</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Mojolicious::Plugin::Access Control remote ip access your App</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mooish-AttributeBuilder">Mooish-AttributeBuilder</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>build Mooish attribute definitions with less boilerplate</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-HTTP2">Net-HTTP2</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.01_01</td>
<td>HTTP/2 in Perl, simplified.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MBE">Net-MBE</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.2.0</td>
<td>0.2.2</td>
<td>Perl library to access Mailboxes Etc (MBE) online webservices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Wait">Net-Wait</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Wait on startup until the specified ports are listening</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Optimization-NSGAII">Optimization-NSGAII</a></td>
<td><a href="https://metacpan.org/author/DRUBINO">DRUBINO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>non dominant sorting genetic algorithm for multi-objective optimization</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Modules-RequireExplicitPackage-ObjectPad">Perl-Critic-Policy-Modules-RequireExplicitPackage-ObjectPad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Always make the package/Object::Pad class explicit.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero">Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Don't use numeric variable names with leading zeroes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PickLE">PickLE</a></td>
<td><a href="https://metacpan.org/author/NATHANPC">NATHANPC</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>An electronic component pick list application and file parser library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-GitHubPages-Faux">Plack-App-GitHubPages-Faux</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.02</td>
<td>0.02</td>
<td>PSGI app to test your GitHub Pages site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Re">Sah-Schemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ScalarTypes-NumericTypes">ScalarTypes-NumericTypes</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.11</td>
<td>Perl extension for identifyling special types of numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Schema-Abstract">Schema-Abstract</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Abstract class for Schema modules.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Locale-JP-City">TableDataBundle-Locale-JP-City</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Collection of TableData:: modules that contain list of cities in Japan</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-ANSIColor-Concise">Term-ANSIColor-Concise</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>2.00_03</td>
<td>2.01</td>
<td>Produce ANSI terminal sequence by concise notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terminal-Control">Terminal-Control</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.06</td>
<td>Perl extension for terminal control</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Pod-CoverageChange">Test-Pod-CoverageChange</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>0.002</td>
<td>0.003</td>
<td>Test Perl files for POD coverage and syntax changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Sah-Filter">Test-Sah-Filter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Test Data::Sah::Filter::* modules in distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Voo">Voo</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>42.42</td>
<td>42.43</td>
<td>Run functions at compile time, not runtime!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-eBay">WebService-eBay</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Interface with the eBay API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-LibXML-xmlsec">XML-LibXML-xmlsec</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>0.01</td>
<td>0.03</td>
<td>XML signing/encription using xmlsec library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-LibXMLSec">XML-LibXMLSec</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>0.010</td>
<td>0.010</td>
<td>bindings to some of xmlsec1</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-XPath-Helper-String">XML-XPath-Helper-String</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>1.01</td>
<td>Helper functions for xpath expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/app-paperback">app-paperback</a></td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>0</td>
<td>1.11</td>
<td>imposition of PDF pages for signature printing and bounding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perl-Test-Pod-CoverageChange">perl-Test-Pod-CoverageChange</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Test Perl files for POD coverage and syntax changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perl-app-paperback">perl-app-paperback</a></td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>0.33</td>
<td>0.33</td>
<td>imposition of PDF pages for signature printing and bounding</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>61</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>38</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JJSIMONI">JJSIMONI</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NATHANPC">NATHANPC</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/KNI">KNI</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CHRISTOPH">CHRISTOPH</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRUBINO">DRUBINO</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Octopart EWHEELER 1.001 1.001 Simple inteface for querying part status across vendors at octopart.com. Acme-CPANModules-WordListBundle-Proverbs PERLANCAR 0.001 0.001 All proverbs WordList modules (in all languages) Algorithm-Graphs-Reachable-Tiny AAHAZRED 0.01 0.03 Compute rechable nodes in a graph. Alien-Build-Plugin-Fetch-HostAllowList PLICEASE 0.01 0.01 Require that Alien::Build based aliens only fetch from an allow list … <a href="https://perlancar.wordpress.com/2022/09/01/list-of-new-cpan-distributions-aug-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Aug 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1996</id>
    <published>2022-09-01T03:01:03Z</published>
    <updated>2022-09-01T03:01:03Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Solving Bin Packing Problem using Perl and NEOS Server</title>
    <link rel="alternate" href="https://dev.to/marcosrobertosilva/solving-bin-packing-problem-using-perl-and-neos-server-k75" type="text/html"/>
    <content type="html">&lt;p&gt;The bin packing problem is an optimization problem, in which items of different sizes must be packed into a finite number of bins or containers, each of a fixed given capacity, in a way that minimizes the number of bins used. The problem has many applications, such as filling up containers, loading trucks with weight capacity constraints, creating file backups in media and technology mapping in FPGA semiconductor chip design. Source: &lt;a href="https://en.wikipedia.org/wiki/Bin_packing_problem"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we demonstrate the use of Perl programming language to model and solve a small instance of the bin packing problem using &lt;a href="https://www.ibm.com/analytics/cplex-optimizer"&gt;CPLEX&lt;/a&gt; as a solver engine, via NEOS Server service.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;NEOS Server&lt;/strong&gt; is a free internet-based service for solving numerical optimisation problems. Hosted by the Wisconsin Institute for Discovery at the University of Wisconsin in Madison, the NEOS Server provides access to more than 60 state-of-the-art solvers in more than a dozen optimisation categories. Solvers hosted by the University of Wisconsin in Madison run on distributed high-performance machines enabled by the HTCondor software; remote solvers run on machines at Arizona State University, the University of Klagenfurt in Austria, and the University of Minho in Portugal. Source: &lt;a href="https://neos-server.org/neos/"&gt;NEOS Server website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XfSZqIPHcq8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  
  
  NEOS Server and Perl
&lt;/h2&gt;

&lt;p&gt;To the best of my knowledge, there is no module or interface available for NEOS Server in Perl, but since it's possible to interface NEOS Server using XML-RPC, below the function developed to submit optimisation problems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;solve_model_using_neos&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$xml_job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$neos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;XML::&lt;/span&gt;&lt;span class="nv"&gt;RPC&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;https://neos-server.org:3333&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$alive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$neos&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error: Neos Server not available!&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$alive&lt;/span&gt; &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NeosServer is alive&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="c1"&gt;# submit job for solution&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$job_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$job_pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$neos&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;submitJob&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$xml_job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;# Get the job status&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$job_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$neos&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;getJobStatus&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$job_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$job_pwd&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Status: &lt;/span&gt;&lt;span class="si"&gt;$job_status&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="c1"&gt;# Possible status: "Done", "Running", "Waiting", "Unknown Job", or "Bad Password"&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@valid_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unknown Job&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bad Password&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;/^$job_status$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@valid_status&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$job_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$neos&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;call&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;getJobStatus&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$job_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$job_pwd&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Job: &lt;/span&gt;&lt;span class="si"&gt;$job_number&lt;/span&gt;&lt;span class="s2"&gt; =&amp;gt; status: &lt;/span&gt;&lt;span class="si"&gt;$job_status&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$job_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$job_pwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$job_status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function receives as an argument a xml string with some parameters that can be passed together with the model, and returns the job id, password and the status of the submission. The job id and password are necessary for all subsequent operations, such as, downloading the results for example.&lt;/p&gt;

&lt;p&gt;More details about the syntax can be seen in the &lt;a href="https://neos-server.org/neos/solvers/milp:CPLEX/LP.html"&gt;NEOS Server web interface&lt;/a&gt;, where it's possible also to do a "dry run" and generate only the xml file for analysis.&lt;/p&gt;

&lt;p&gt;The model itself was developed in CPLEX LP file format, that is a simple text file where you can write mathematical equations directly, such as the objective function and constraints that are part of the model. The rules to create a CPLEX LP file format can be seen for example in &lt;a href="http://lpsolve.sourceforge.net/5.0/CPLEX-format.htm"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  Example model
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Given a set of items I = {1,...,m} with weight w[i] &amp;gt; 0, &lt;/span&gt;
&lt;span class="c1"&gt;# the Bin Packing Problem (BPP) is to pack the items into &lt;/span&gt;
&lt;span class="c1"&gt;# bins of capacity c in such a way that the number of bins &lt;/span&gt;
&lt;span class="c1"&gt;# used is minimal.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Extracted from GLPK distribution (https://www.gnu.org/software/glpk/)&lt;/span&gt;
&lt;span class="c1"&gt;# Inspired in GNU MathProg version developed by Andrew Makhorin &amp;lt;mao@gnu.org&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;generate_bin_packing_problem&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# capacity of each bin&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;# number of items to pack (6 items)&lt;/span&gt;

    &lt;span class="c1"&gt;# weight of each item.&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# - "greedy" estimation of the upper bound in terms of &lt;/span&gt;
    &lt;span class="c1"&gt;# the number of bins needed&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$accum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# upper bound of the number of bins needed.&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$accum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$w&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$accum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$w&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$accum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$w&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Create objective function&lt;/span&gt;
    &lt;span class="c1"&gt;# Minimize the number of used bins&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Minimize&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; obj:&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; + used(&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subject To&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="c1"&gt;# Each item must be inserted in one bin&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; one(&lt;/span&gt;&lt;span class="si"&gt;$item&lt;/span&gt;&lt;span class="s2"&gt;):&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; + x(&lt;/span&gt;&lt;span class="si"&gt;$item&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; = 1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Constraint:&lt;/span&gt;
    &lt;span class="c1"&gt;# Respect the capacity of each bin, i.e., the sum of&lt;/span&gt;
    &lt;span class="c1"&gt;# the weight put in each bin must be lower than or &lt;/span&gt;
    &lt;span class="c1"&gt;# equal to the bin capacity.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; lim(&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;):&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; + &lt;/span&gt;&lt;span class="si"&gt;$w&lt;/span&gt;&lt;span class="s2"&gt;{&lt;/span&gt;&lt;span class="si"&gt;$item&lt;/span&gt;&lt;span class="s2"&gt;} x(&lt;/span&gt;&lt;span class="si"&gt;$item&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;$c&lt;/span&gt;&lt;span class="s2"&gt; used(&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;) &amp;lt;= 0&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Constraint:&lt;/span&gt;
    &lt;span class="c1"&gt;# Define the bounds for each variable, in this case, &lt;/span&gt;
    &lt;span class="c1"&gt;# all variables are binary, with lower bound equals &lt;/span&gt;
    &lt;span class="c1"&gt;# to 0 and upper bound equals to 1.&lt;/span&gt;
    &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Bounds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; 0 &amp;lt;= used(&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;) &amp;lt;= 1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; 0 &amp;lt;= x(&lt;/span&gt;&lt;span class="si"&gt;$item&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;) &amp;lt;= 1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Constraint:&lt;/span&gt;
    &lt;span class="c1"&gt;# Explicitly say to the solvers that the variables &lt;/span&gt;
    &lt;span class="c1"&gt;# are integers, i.e., no factional value is allowed.&lt;/span&gt;
    &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Generals&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$bin&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; used(&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$model&lt;/span&gt; &lt;span class="o"&gt;.=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; x(&lt;/span&gt;&lt;span class="si"&gt;$item&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;$bin&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The entire code has around 200 lines and is available in &lt;a href="https://github.com/marcosrobertosilva/bpp-neos-perl"&gt;this&lt;/a&gt; github repository.&lt;/p&gt;

&lt;p&gt;To summarise, this code: (i) generates the optimization problem, (ii) create the xml string for submission in NEOS Server, (iii) download CPLEX log and the results, (iv) parse the result obtained in XML format, and print in console the value of the variables together with the status returned by CPLEX.&lt;/p&gt;

</content>
    <author>
      <name>Marcos Roberto Silva</name>
    </author>
    <id>https://dev.to/marcosrobertosilva/solving-bin-packing-problem-using-perl-and-neos-server-k75</id>
    <published>2022-09-01T01:17:26Z</published>
    <updated>2022-09-01T01:17:26Z</updated>
    <category term="perl"/>
    <category term="datascience"/>
    <category term="tutorial"/>
  </entry>
  <entry>
    <title>#579 - Looking for that motivation</title>
    <link rel="alternate" href="https://perlweekly.com/archive/579.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p><a href="https://perlweekly.com/archive/577.html">Last time</a> I mentioned the numbers I collect with the number of visitors to CPAN and I was wondering about the increased activity starting in August 2011. I got a few comments in email and some on <a href="https://www.reddit.com/r/perl/comments/wosxyi/perl_weekly_issue_577_optimism_and_numbers/">Reddit</a>.</p>
<p>Probably the best explanation is what I received from Neil Bowers:</p>
<p>Have a look at the <a href="https://neilb.org/2022/02/07/cpan-report-2022.html">CPAN report I did in February</a>. If you look at the new user signups, you'll see a jump in 2012, and also looking at that chart you'll see that 2012, 2013, and 2014 seem to buck a trend.</p>
<p>In 2012 Intermediate Perl was released, which told the reader to sign up for a PAUSE account and release a test module. If I remember right, brian d foy ran a tutorial at YAPC::NA the previous year, where he also got people to sign up (not sure if the tutorial was 2011 or 2012). We had the first CPAN Day in 2014, which also resulted in a big bump in CPAN releases. That may have helped 2014 stay up above the trend.</p>
<p>The question now, what could be a new motivation to increase activity and if there could be one that is sustainable?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/579.html</id>
    <published>2022-08-29T10:00:00Z</published>
    <updated>2022-08-29T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #173</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-173/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 173 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would come from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-173/</id>
    <published>2022-08-29T00:00:00Z</published>
    <updated>2022-08-29T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 179</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-179/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-179/</id>
    <published>2022-08-29T00:00:00Z</published>
    <updated>2022-08-29T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 180</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-180/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: First Unique Character 10. TASK #2: Trim List HEADLINES  Welcome to Week #180 of the weekly challenge.
Today, we are giving away Token #3 to Robert DiCicco for the book, Learning Perl Exercises by brian d foy. I will share the details with you in a separate email.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-180/</id>
    <published>2022-08-29T00:00:00Z</published>
    <updated>2022-08-29T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Ordinal Sparkline</title>
    <link rel="alternate" href="https://dev.to/simongreennet/the-ordinal-sparkline-dn5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly challenge 179
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-179/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-179/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: Ordinal Number Spelling
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a positive number, <code>$n</code>. Write a script to spell the ordinal number.</p>

<h3>
  
  
  My solution
</h3>

<p>This turned out to be a little more complex than I thought it was, especially around some edge cases. Sure there are Python and Perl modules that already do this, but that's not the spirit of completing these challenges.</p>

<p>I start by defining four lists (arrays in Perl). <code>numbers</code> has the words for the first 19 numbers, so one, two, three, etc. <code>tens</code> has the words for twenty, thirty, etc. The <code>ordinal</code> list has the ordinal words for the first 19 numbers, like first, second, third. Finally the <code>thousands</code> list has the words we use for thousand, million and billion. I'm not handling anything 10<sup>12</sup> or larger.</p>

<p>Next I split up the numbers into blocks of three from the right. So 12345 becomes <code>[345, 12]</code>.</p>

<p>Then it's time to print out the words for each block.</p>

<ol>
<li>If the number is 0 (for example the middle block in 1,000,234), do nothing</li>
<li>If the number is evenly divisible by 100, print the words for that number.</li>
<li>If the number is greater than 100, print the words for the hundreds number and the word ' and '. Change the number to be the remainder from 100.</li>
<li>If the number is greater than 19, print the tens words, and change the number to be the remainder from 10.</li>
<li>Print the number between one and nineteen. If this is the first block, use the <code>ordinal</code> list, otherwise use the <code>numbers</code> list.</li>
<li>Finally, if this is not the first block, add the appropriate thousands word.</li>
</ol>

<p>There is also an edge case where the solution is divisible by 100. In this case, we have never use the <code>ordinal</code> list. When this occurs, I add the string 'th' to the end of the string.</p>

<p>When writing this blog, I also realized that we also didn't print the ordinal word if the number is divisible by 10 (except hundred and ten). I've added some code to also handle this. Thankfully for all the <code>tens</code> words we can replace 'y' with 'ieth' to get the right word.</p>

<p>Then it's a matter of pieces the bits together to produce the final string.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 11
eleventh

$ ./ch-1.py 62
sixty second

$ ./ch-1.py 99
ninety ninth
</code></pre>

</div>



<h2>
  
  
  Task 2: Unicode Sparkline
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of positive numbers, <code>@n</code>.</p>

<p>Write a script to print sparkline in Unicode for the given list of numbers.</p>

<h3>
  
  
  My solution
</h3>

<p>First off, I'll give attribute of the solution to <a href="https://rosettacode.org/wiki/Sparkline_in_unicode#Python">Rosetta Code</a>, under a <a href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a> license.</p>

<p>Thankfully both Python 3 and Perl support unicode out of the box, so we don't need to do anything special to support it.</p>

<p>The code defines the following variables:</p>

<ul>
<li>
<code>bar</code> the string <code>▁▂▃▄▅▆▇█</code> (I use a list for the Perl solution), and <code>barcount</code> the length of the list.</li>
<li>
<code>mn</code> and <code>mx</code> the minimum and maximum values from the list.</li>
<li>
<code>extent</code> the difference between the two values.</li>
</ul>

<p>It then goes through each value of <code>@n</code> and uses the equation <code>(n - mn) / extent * barcount</code> to work out which bar to display.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 1 2 3 4 5 6 7 8
▁▂▃▄▅▆▇█

$ ./ch-2.py 1 8 2 7 3 6 10
▁▇▁▆▂▅█
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/the-ordinal-sparkline-dn5</id>
    <published>2022-08-28T08:43:21Z</published>
    <updated>2022-08-28T08:43:21Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4848155625343884937</id>
    <published>2022-08-27T23:26:00.000+02:00</published>
    <updated>2022-08-27T23:26:46.137+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdvii) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/ack-v3.6.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Ack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A grep-like program for searching source code &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.6.0&lt;/strong&gt; on 2022-08-21&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: v3.5.0 was 1 year, 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.077' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.077&lt;/strong&gt; on 2022-08-21&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 0.076 was 7 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.004000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004000&lt;/strong&gt; on 2022-08-26&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.002002 was 2 years, 4 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz-2.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Interface to AT&amp;T's GraphViz. Deprecated. See GraphViz2 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.25&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.25 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MICKEY/MetaCPAN-Client-2.030000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MetaCPAN::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A comprehensive, DWIM-featured client to the MetaCPAN API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.030000&lt;/strong&gt; on 2022-08-22&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 2.029000 was 1 year, 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9645' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9645&lt;/strong&gt; on 2022-08-25&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9643 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Struct-Dumb-0.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Struct::Dumb&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - make simple lightweight record-like structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.13&lt;/strong&gt; on 2022-08-27&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.12 was 2 years, 4 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Tickit-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Tickit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Terminal Interface Construction KIT &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-08-26&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.72 was 1 year, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.15&lt;/strong&gt; on 2022-08-21&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.14 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4848155625343884937/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvii-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4848155625343884937"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4848155625343884937"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvii-9-great-cpan-modules-released.html" title="(cdvii) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8381686511544238523</id>
    <published>2022-08-27T23:23:00.007+02:00</published>
    <updated>2022-08-27T23:25:09.142+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxx) metacpan weekly report - Try::Tiny</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 90&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Try::Tiny"&gt;Try::Tiny&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/08/27 21:22:13 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Don::t" target="_blank"&gt;Acme::Don::t&lt;/a&gt; - The opposite of do&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alias" target="_blank"&gt;Alias&lt;/a&gt; - aspirations for Alias&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::pnc" target="_blank"&gt;App::pnc&lt;/a&gt; - Simple netcat clone implemented in Perl.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::YoutubeDlIf" target="_blank"&gt;App::YoutubeDlIf&lt;/a&gt; - Download videos using youtube-dl with extra selection/filtering&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover::Report::Codecov" target="_blank"&gt;Devel::Cover::Report::Codecov&lt;/a&gt; - Backend for Codecov reporting of coverage statistics&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Class" target="_blank"&gt;Feature::Compat::Class&lt;/a&gt; - make class syntax available&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::reCAPTCHA::v3" target="_blank"&gt;Google::reCAPTCHA::v3&lt;/a&gt; - A simple Perl API for Google reCAPTCHA v3&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Patch" target="_blank"&gt;JSON::Patch&lt;/a&gt; - JSON Patch (rfc6902) for perl structures&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Round::Fair" target="_blank"&gt;Math::Round::Fair&lt;/a&gt; - distribute rounding errors fairly&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Optimization::NSGAII" target="_blank"&gt;Optimization::NSGAII&lt;/a&gt; - non dominant sorting genetic algorithm for multi-objective optimization&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SVG::Parser" target="_blank"&gt;SVG::Parser&lt;/a&gt; - XML Parser for SVG documents&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Screen" target="_blank"&gt;Term::Screen&lt;/a&gt; - A Simple all perl Term::Cap based screen positioning module&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::FTP" target="_blank"&gt;AnyEvent::FTP&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::WebSocket::Server" target="_blank"&gt;AnyEvent::WebSocket::Server&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::Solr" target="_blank"&gt;Apache::Solr&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=268)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::week" target="_blank"&gt;App::week&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::Memcached" target="_blank"&gt;Cache::Memcached&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::Memcached::Fast" target="_blank"&gt;Cache::Memcached::Fast&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp" target="_blank"&gt;Carp&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Simple" target="_blank"&gt;CGI::Simple&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::INI::Tiny" target="_blank"&gt;Config::INI::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Util" target="_blank"&gt;Data::Util&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID" target="_blank"&gt;Data::UUID&lt;/a&gt; (+2=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID::MT" target="_blank"&gt;Data::UUID::MT&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::BlackHole" target="_blank"&gt;DBD::BlackHole&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::mysql" target="_blank"&gt;DBD::mysql&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=178)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exception::Base" target="_blank"&gt;Exception::Base&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Rsync" target="_blank"&gt;File::Rsync&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/forks::BerkeleyDB" target="_blank"&gt;forks::BerkeleyDB&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gazelle" target="_blank"&gt;Gazelle&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Pipely" target="_blank"&gt;IO::Pipely&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompt" target="_blank"&gt;IO::Prompt&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=111)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::SpamAssassin::4.0.0::rc1" target="_blank"&gt;Mail::SpamAssassin::4.0.0::rc1&lt;/a&gt; (+1=0)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Complex" target="_blank"&gt;Math::Complex&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIME::Base64" target="_blank"&gt;MIME::Base64&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::MySQL5" target="_blank"&gt;Mojo::MySQL5&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=474)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Authorization" target="_blank"&gt;Mojolicious::Plugin::Authorization&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Loco" target="_blank"&gt;Mojolicious::Plugin::Loco&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+2=292)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::TO_JSON" target="_blank"&gt;MooX::TO_JSON&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::AtonalUtil" target="_blank"&gt;Music::AtonalUtil&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/new" target="_blank"&gt;new&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenAPI::Client" target="_blank"&gt;OpenAPI::Client&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Loops" target="_blank"&gt;Parallel::Loops&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Class" target="_blank"&gt;Path::Class&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PathTools" target="_blank"&gt;PathTools&lt;/a&gt; (+1=76)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Build" target="_blank"&gt;Perl::Build&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=122)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::MinimumVersion" target="_blank"&gt;Perl::MinimumVersion&lt;/a&gt; (+2=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlIO::gzip" target="_blank"&gt;PerlIO::gzip&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Coverage" target="_blank"&gt;Pod::Coverage&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::XS" target="_blank"&gt;Promise::XS&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quantum::Superpositions" target="_blank"&gt;Quantum::Superpositions&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/strictures" target="_blank"&gt;strictures&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Exception" target="_blank"&gt;Test::Exception&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=179)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads" target="_blank"&gt;threads&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/threads::shared" target="_blank"&gt;threads::shared&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::HiRes" target="_blank"&gt;Time::HiRes&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+3=170)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Interface" target="_blank"&gt;Types::Interface&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unix::setuid" target="_blank"&gt;Unix::setuid&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::db" target="_blank"&gt;URI::db&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML" target="_blank"&gt;YAML&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8381686511544238523/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8381686511544238523"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8381686511544238523"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxx-metacpan-weekly-report.html" title="(dxx) metacpan weekly report - Try::Tiny"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-976395790569742804</id>
    <published>2022-08-27T23:20:00.001+02:00</published>
    <updated>2022-08-27T23:20:44.030+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-08-27 21:20:02 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73484935" target="_blank"&gt;What does `/regex/o` really mean (once there was once, but it seems gone now)?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73449292" target="_blank"&gt;Regex (or bash), get pipes between quotes (perl)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73448911" target="_blank"&gt;How to get date of two month old date from current date&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73455057" target="_blank"&gt;DbiX::Class / Creating tree of test data without persisting&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73511956" target="_blank"&gt;How can I format boolean operators with perltidy?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/976395790569742804/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/976395790569742804"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/976395790569742804"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/dxlviii-stackoverflow-perl-report.html" title="(dxlviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>How I use Emacs to write Perl</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/how-i-use-emacs-to-write-perl-40e6" type="text/html"/>
    <content type="html">&lt;p&gt;This post is about how I use Emacs to write Perl. I do not claim to have the best Perl setup of all time or anything like that. The features I need to write Perl effectively are syntax highlighting, auto-indentation, linting, and code navigation.&lt;/p&gt;

&lt;p&gt;I personally like to build my own IDE by bringing together unrelated packages, which is in contrast to full blown IDE packages, such as &lt;a href="https://metacpan.org/pod/Devel::PerlySense"&gt;Devel::PerlySense&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt;. These packages just aren't for me.&lt;/p&gt;

&lt;p&gt;&lt;a id="orga25e1f5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Basics
&lt;/h1&gt;

&lt;p&gt;By default Emacs uses perl-mode instead of the more advanced cperl-mode. Both packages are built-in, so to use cperl-mode instead of perl-mode all you have to do is add the following line to your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fset&lt;/span&gt; &lt;span class="ss"&gt;'perl-mode&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cperl-mode that was released with Emacs 28 improved the syntax highlighting for regular expressions and heredocs. It also fixed an annoying bug where array variable names in comments were highlighted with the array face instead of the comment face.&lt;/p&gt;

&lt;p&gt;If you are using an Emacs version less than 28 then I would recommend downloading the &lt;a href="https://github.com/emacs-mirror/emacs/blob/emacs-28/lisp/progmodes/cperl-mode.el"&gt;cperl-mode off the Emacs 28 branch&lt;/a&gt;. I personally place this file in &lt;code&gt;~/.emacs.d/cperl-mode/cperl-mode.el&lt;/code&gt;, then I load it with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;'load-path&lt;/span&gt; &lt;span class="s"&gt;"~/.emacs.d/cperl-mode"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default cperl-mode replaces trailing whitespace with underscores. I cannot imagine why you would want this. To turn it off add the following line to your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cperl-invalid-face&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;cperl-mode indents code by 2 spaces by default. You can modify this by setting the &lt;code&gt;cperl-indent-level&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;You probably want multi-line statements wrapped in parens to be indented like a block. For example by default cperl-mode indents this hash declaration in a strange way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
           &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fix this add the following to your config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cperl-indent-parens-as-block&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;cperl-close-paren-offset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;cperl-indent-level&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our hash declaration indents nicely!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="org3c40091"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Linting
&lt;/h1&gt;

&lt;p&gt;Linting our Perl code helps us easily find bugs caused by typos. My favorite Emacs linting package is &lt;a href="https://www.flycheck.org/en/latest/"&gt;Flycheck&lt;/a&gt;, which comes with built-in support for Perl.&lt;/p&gt;

&lt;p&gt;By default Flycheck checks your code with the Perl interpreter, but it also comes with integration with &lt;a href="https://metacpan.org/pod/Perl::Critic"&gt;Perl::Critic&lt;/a&gt;. Personally I have only used the former.&lt;/p&gt;

&lt;p&gt;I like to lint the file everytime I save, and I like to display any errors immediately. Here is how I accomplish this with Flycheck.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'flycheck&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;flycheck-check-syntax-automatically&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;mode-enabled&lt;/span&gt; &lt;span class="nv"&gt;save&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;flycheck-display-errors-delay&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable flycheck mode in cperl-mode, simply turn it on with a hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(add-hook 'cperl-mode-hook 'flycheck-mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Emacs will underline any syntax errors, and you can view the message in the echo area by placing your cursor on the erroneus code.&lt;/p&gt;

&lt;p&gt;I cannot tell you how many simple errors you will catch just by using Flycheck!&lt;/p&gt;

&lt;p&gt;&lt;a id="org063479d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Code Navigation
&lt;/h1&gt;

&lt;p&gt;For jumping between function definitions I use &lt;a href="https://github.com/jacktasia/dumb-jump"&gt;dumb-jump&lt;/a&gt;, which usually &lt;strong&gt;just works&lt;/strong&gt;. I configure dumb-jump to use &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;ag&lt;/a&gt; for its searching which makes it work very quickly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'dumb-jump&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;dumb-jump-force-searcher&lt;/span&gt; &lt;span class="ss"&gt;'ag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'xref-backend-functions&lt;/span&gt; &lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;dumb-jump-xref-activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can then use dumb-jump by calling the &lt;code&gt;xref-find-definitions&lt;/code&gt; function while my cursor is on the symbol I want to search for. This function is bound to &lt;code&gt;M-.&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgde68f03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Shell
&lt;/h1&gt;

&lt;p&gt;A lot of people use &lt;code&gt;M-x compile&lt;/code&gt; to run their code, and one of the various debugger packages to run the Perl debugger. Personally I just use plain old &lt;a href="https://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; with the built-in &lt;code&gt;M-x shell&lt;/code&gt;. This makes my work flow when it comes to running and debugging quite similar to that of a classic Perl vimmer who does all their work in a terminal.&lt;/p&gt;

&lt;p&gt;I use the wonderful &lt;a href="https://github.com/riscy/shx-for-emacs"&gt;shx&lt;/a&gt; package for making &lt;code&gt;M-x shell&lt;/code&gt; a more usable shell interface, and I use &lt;a href="https://github.com/kyagi/shell-pop-el"&gt;shell-pop&lt;/a&gt; for popping up shell buffers that are automatically cd'd to the current files directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(require 'shx)
(add-hook 'shell-mode-hook 'shx-mode)

(require 'shell-pop)
(setq shell-pop-autocd-to-working-dir t)
(global-set-key (kbd "M-SPC") 'shell-pop)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="org3936e96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;Every 3rd-party package I described in this post is useful not only for Perl, but for programming in any language. This gives a uniform experience across different programming languages. If I instead used one of the Perl IDE packages then I wouldn't get the same uniform experience when using other languages.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgd51f8f0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  See Also
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.emacswiki.org/emacs/CPerlMode"&gt;CPerl Documentation&lt;/a&gt;  - Offical documentation for cperl-mode&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metacpan.org/pod/Perl::LanguageServer"&gt;Perl::LanguageServer&lt;/a&gt; - Language server for Perl&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metacpan.org/pod/Devel::PerlySense"&gt;Devel::PerlySense&lt;/a&gt;    - Perl IDE features for Emacs&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://metacpan.org/pod/Emacs::PDE"&gt;Emacs::PDE&lt;/a&gt;           - Elisp extensions for Perl development&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/how-i-use-emacs-to-write-perl-40e6</id>
    <published>2022-08-24T23:42:00Z</published>
    <updated>2022-08-24T23:42:00Z</updated>
    <category term="perl"/>
    <category term="emacs"/>
  </entry>
  <entry>
  <title>Dancer2: Configuration</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-24T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-configuration"/>  <id>https://perlmaven.com/dancer2-configuration</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#578 - Corinna MVP</title>
    <link rel="alternate" href="https://perlweekly.com/archive/578.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Belated Happy Independence Day to all fellow Indians. We celebrated 75th Anniversary of Independence on <strong>15th August</strong>, a proud moment for all of us.</p>
<p>Ever since the release of <strong>Perl v5.36</strong>, everyone is looking forward to the next big thing in the pipeline, <strong>Corinna</strong>. I am sure, you don't need an introduction but if you do then you can take a look at this <a href="https://github.com/Ovid/Cor">official documentation</a>. <strong>Curtis Poe</strong> recently shared the latest update about the <strong>Corinna (MVP)</strong> as accepted by The Perl Steering Committee as detailed in the <a href="https://github.com/Ovid/Cor/blob/master/rfc/mvp.md">document</a>.</p>
<p>Do you follow the latest release to <strong>CPAN</strong> on <a href="https://metacpan.org/recent">MetaCPAN</a>?</p>
<p>I noticed one particular distribution, <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, currently maintained by a friend of mine and colleague at work, <strong>Julien Fiegehenn</strong>. He is on the mission to clear pending issues. He shared the news recently that pull request queue is empty in this <a href="https://twitter.com/simbabque/status/1559267485764816896">Twitter thread</a>. I noticed the distribution has <strong>92.50% coverage</strong>. If you have spare time and would like to contribute then please do help get <strong>100% coverage</strong>.</p>
<p>Perl jobs in London seems getting back on track. Couple of days ago, I received an email about <a href="https://perl.careers/jobs/perl_programmer_business_owner_uk_eu_remote">Perl role in London</a> by Perl Careers. The title of the post caught my eye, <strong>Perl Developer and Business Owner?</strong>.</p>
<p>Last but not the least, I would like to recommend <a href="https://leanpub.com/learning_perl_exercises">Learning Perl Exercises</a> by <strong>brian d foy</strong>. I am sure, you will find it handy.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/578.html</id>
    <published>2022-08-22T10:00:00Z</published>
    <updated>2022-08-22T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #172</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-172/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 172 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would be from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-172/</id>
    <published>2022-08-22T00:00:00Z</published>
    <updated>2022-08-22T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8355876702800371113</id>
    <published>2022-08-20T23:58:00.000+02:00</published>
    <updated>2022-08-20T23:58:39.472+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdvi) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.59&lt;/strong&gt; on 2022-08-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.56 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.055000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.055000&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.053007 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PABLROD/Chart-Plotly-0.042' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Chart::Plotly&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate html/javascript charts from perl data using javascript library plotly.js &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.042&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.041 was 1 year, 9 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.53&lt;/strong&gt; on 2022-08-14&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 2.52 was 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.802' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.802&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 68&lt;/li&gt;  &lt;li&gt;Previous version: 0.801 was 8 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.10&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 5.08 was 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220820' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220820&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220720 was 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.07&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.05 was 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.51 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.05' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.05&lt;/strong&gt; on 2022-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.04 was 2 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2022-08-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.65 was 4 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9643' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9643&lt;/strong&gt; on 2022-08-18&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9638 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ABW/Template-Toolkit-3.101' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Template::Toolkit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comprehensive template processing system &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.101&lt;/strong&gt; on 2022-08-16&lt;/li&gt;  &lt;li&gt;Votes: 137&lt;/li&gt;  &lt;li&gt;Previous version: 3.100 was 3 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016008&lt;/strong&gt; on 2022-08-14&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016007 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.14&lt;/strong&gt; on 2022-08-15&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.13 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8355876702800371113/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvi-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8355876702800371113"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8355876702800371113"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdvi-15-great-cpan-modules-released.html" title="(cdvi) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#577 - Optimism and numbers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/577.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>last week Mohammad expressed his optimism about Perl rising again. It's nice to have a gut feeling about that, but I would also like to see the numbers. So I looked at the stats I've been collecting for a while: The number of <a href="https://szabgab.com/cpan-number-of-visits.html">visits to CPAN</a>. More specifically these are the number of "entrances" to MetaCPAN (and in earlier times to SCO as well.) as measured by Google Analytics.</p>
<p>My assumption is that we can measure well the level of Perl usage by the number of visits to <a href="https://metacpan.org/">MetaCPAN</a>.</p>
<p>The number for July 2022 does not indicate any (positive) changes, but it is probably too early to see any effects anyway.</p>
<p>However, looking at the numbers I noticed that there was a nice increase in the activity in 2012. Actually starting in August 2011. This increased activity lasted about a year then the decline continued and by 2014 the activity was below that of the 2011 level.</p>
<p>I could find 2 Perl-related events preceding the increased activity. In May 2011 the release of perl 5.14 and in July the opening of MetaCPAN. Neither seem to explain the change. So I am turning to you:</p>
<p>What other things happened in or out of the Perl community that might explain that sudden increase of visitors to CPAN?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/577.html</id>
    <published>2022-08-15T10:00:00Z</published>
    <updated>2022-08-15T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Random redirect</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-15T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-random-redirect"/>  <id>https://perlmaven.com/dancer2-solution-2-random-redirect</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Cyclops Validation</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/14#pwc177" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to validate the given number 
against the included check digit.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

my @damm_matrix;
$damm_matrix[0] = [0, 7, 4, 1, 6, 3, 5, 8, 9, 2];
$damm_matrix[1] = [3, 0, 2, 7, 1, 6, 8, 9, 4, 5];
$damm_matrix[2] = [1, 9, 0, 5, 2, 7, 6, 4, 3, 8];
$damm_matrix[3] = [7, 2, 6, 0, 3, 4, 9, 5, 8, 1];
$damm_matrix[4] = [5, 1, 8, 9, 0, 2, 7, 3, 6, 4];
$damm_matrix[5] = [9, 5 ,7, 8, 4, 0, 2, 6, 1, 3];
$damm_matrix[6] = [8, 4, 1, 3, 5, 9, 0, 2, 7, 6];
$damm_matrix[7] = [6, 8, 3, 4, 9, 5, 1, 0, 2, 7];
$damm_matrix[8] = [4, 6, 5, 2, 7, 8, 3, 1, 0, 9];
$damm_matrix[9] = [2, 3, 9, 6, 8, 1, 4, 7, 5, 0];

sub damm_validation{
    my($x) = @_;
    my @digits = split(//, $x);
    my $interim_digit = 0;
    while(my $d = shift @digits){
        $interim_digit = $damm_matrix[$d][$interim_digit];
    }
    return boolean($interim_digit == 0);
}

MAIN:{
    print damm_validation(5724) . "\n";
    print damm_validation(5727) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Damm Validation really boils down to a series of table lookups. Once that is determined
we need to encode the table and then perform the lookups in a loop. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 Palindromic Prime Cyclops Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
no warnings q/recursion/;
use Math::Primality qw/is_prime/;

sub n_cyclops_prime_r{
    my($i, $n, $cyclops_primes) = @_;
    return @{$cyclops_primes} if @{$cyclops_primes} == $n;
    push @{$cyclops_primes}, $i if is_prime($i) &amp;&amp; 
                                   length($i) % 2 == 1 &amp;&amp;
                                   join("", reverse(split(//, $i))) == $i &amp;&amp;
                                   (grep {$_ == 0} split(//, $i))   == 1 &amp;&amp; 
                                   do{my @a = split(//, $i);
                                      $a[int(@a / 2)]
                                   } == 0;
    n_cyclops_prime_r(++$i, $n, $cyclops_primes);
}

sub n_cyclops_primes{
    my($n) = @_;
    return n_cyclops_prime_r(1, $n, []);
}

MAIN:{
    print join(", ", n_cyclops_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049, 1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821, 1360631, 1390931, 1490941, 1520251
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I recently saw the word &lt;em&gt;whipupitide&lt;/em&gt; used by Dave Jacoby and here is, I think, a good
example of it. We need to determine if a number is prime, palindromic, and cyclops. In 
Perl we can determine all of these conditions very easily. &lt;/p&gt;

&lt;p&gt;Just to add a bit of fun I decided to use a recursive loop. Out of necessity this will 
have a rather deep recursive depth, so we'll need to set &lt;code&gt;no warnings q/recursion/&lt;/code&gt; or 
else perl will complain when we go deeper than 100 steps. We aren't using too much memory
here, but if that were a concern we could do Perl style 
&lt;a href="https://perldoc.perl.org/functions/goto"&gt;tail recursion&lt;/a&gt; with a &lt;code&gt;goto __SUB__&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-177/"&gt;Challenge 177&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc177</id>
    <published>2022-08-14T17:59:00-04:00</published>
    <updated>2022-08-14T17:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4422026552243902575</id>
    <published>2022-08-13T21:58:00.001+02:00</published>
    <updated>2022-08-13T22:12:41.051+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdv) 18 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Alien-Build-2.53" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.53&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.51 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.053007" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.053007&lt;/strong&gt; on 2022-08-09&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.053005 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DWHEELER/App-Sqitch-v1.3.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Sqitch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Sensible database change management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.3.0&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: v1.2.1 was 8 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.32&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.30 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16.0&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 87&lt;/li&gt;  &lt;li&gt;Previous version: 3.15.1 was 5 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MSHELOR/Digest-SHA-6.03" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Digest::SHA&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for SHA-1/224/256/384/512 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.03&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 6.02 was 4 years, 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/FFI-Platypus-2.00" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.00&lt;/strong&gt; on 2022-08-12&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 1 month, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TODDR/IPC-Run-20220807.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IPC::Run&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - system() and background procs w/ piping, redirs, ptys (Unix, Win32) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20220807.0&lt;/strong&gt; on 2022-08-07&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 20200505.0 was 2 years, 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ARISTOTLE/Memoize-1.10" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.10&lt;/strong&gt; on 2022-08-11&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.09 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DBOOK/Minion-Backend-SQLite-v5.0.7" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Minion::Backend::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SQLite backend for Minion job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v5.0.7&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v5.0.6 was 9 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Object-Pad-0.68" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.66 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OALDERS/Pithub-0.01039" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01039&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01038 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCONWAY/PPR-0.001004" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001004&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.001002 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ARISTOTLE/Proc-Fork-0.807" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Proc::Fork&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple, intuitive interface to the fork() system call &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.807&lt;/strong&gt; on 2022-08-10&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.05 was 20 years, 4 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.63" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Scalar::List::Utils&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.63&lt;/strong&gt; on 2022-08-08&lt;/li&gt;  &lt;li&gt;Votes: 159&lt;/li&gt;  &lt;li&gt;Previous version: 1.62 was 4 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9638" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9638&lt;/strong&gt; on 2022-08-10&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9635 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BIGJ/Test-Warn-0.37" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Warn&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to test methods for warnings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.37&lt;/strong&gt; on 2022-08-13&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.36 was 4 years, 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ISHIGAKI/Text-CSV-2.02" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Text::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comma-separated values manipulator (using XS or PurePerl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.02&lt;/strong&gt; on 2022-08-07&lt;/li&gt;  &lt;li&gt;Votes: 70&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was 1 year, 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4422026552243902575/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdv-18-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4422026552243902575"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4422026552243902575"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/08/cdv-18-great-cpan-modules-released-last.html" title="(cdv) 18 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#576 - Perl is on the Rise?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/576.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Personally I have noticed the fresh energy among all <strong>Perl</strong> fans ever since the release of latest <strong>Perl v5.36</strong>. I am telling this based on the amount of positive noise I heard on various public platform. There are still few in the pipeline that would give further push e.g. <strong>Corinna</strong>. If you are interested to know more then please do checkout this <a href="https://github.com/Ovid/Cor/wiki">page</a> maintained by <strong>Curtis Poe</strong>.</p>
<p><a href="https://metacpan.org/recent">MetaCPAN</a> is another place where you can see all the latest cool <strong>Perl</strong> projects. I know plenty of volunteers helping to improve the code base. If you use a distribution and you like it then why not share your experience with the <strong>Perl Community</strong> and submit your proposal to <a href="http://cfp.perladvent.org">Perl Advent Calendar 2022</a>? Or if you have created one then why not share with rest of the world.</p>
<p>If you are new to <strong>Perl</strong> and needs help then please do give us a shout. There are plenty of help available on various public platforms.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/576.html</id>
    <published>2022-08-08T10:00:00Z</published>
    <updated>2022-08-08T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Route-based Multi-Counter</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-08T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-route-based-multicounter"/>  <id>https://perlmaven.com/dancer2-solution-2-route-based-multicounter</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Permuted Reversibly</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/07#pwc176" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the smallest integer x such that x, 2x, 3x, 4x, 5x and 6x are 
permuted multiples of each other.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_permuted{
    my($x, $y) = @_;
    my(@x, @y); 
    map {$x[$_]++} split(//, $x);
    map {$y[$_]++} split(//, $y);
    return false if $#x != $#y;
    my @matched = grep {(!$x[$_] &amp;&amp; !$y[$_]) || ($x[$_] &amp;&amp; $y[$_] &amp;&amp; $x[$_] == $y[$_])} 0 .. @y - 1;
    return true if @matched == @x;
    return false;
}

sub smallest_permuted{
    my $x = 0;
    {
        $x++;
        redo unless is_permuted($x, 2 * $x)     &amp;&amp; is_permuted(2 * $x, 3 * $x) &amp;&amp; 
                    is_permuted(3 * $x, 4 * $x) &amp;&amp; is_permuted(4 * $x, 5 * $x) &amp;&amp; 
                    is_permuted(5 * $x, 6 * $x);
    }
    return $x;
}

MAIN:{
    print smallest_permuted . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
142857
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is to check if any two numbers are permutations of each other by 
counting up the digits for each and comparing the counts. A fun use of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;
but I will admit it is a bit unnecessary. I implemented solutions to this problem in 
multiple languages and in doing so just sorted the lists of digits and compared them. Much
easier, but less fun!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find out all Reversible Numbers below 100.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub is_reversible{
    my($x) = @_;
    my @even_digits = grep { $_ % 2 == 0 } split(//, ($x + reverse($x)));
    return @even_digits == 0;
}

sub reversibles_under_n{
    my($n) = @_;
    my @reversibles;
    do{
        $n--;
        unshift @reversibles, $n if is_reversible($n);

    }while($n &gt; 0);
    return @reversibles;
}

MAIN:{
    print join(", ", reversibles_under_n(100)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My favorite use of Perl is to prototype algorithms. I'll get an idea for how to solve a
problem and then quickly prove out the idea in Perl. Once demonstrated to be effective
the same approach can be implemented in another language if required, usually for business
reasons but also sometimes simply for performance.&lt;/p&gt;

&lt;p&gt;The code here is concise, easy to read, and works well. It's also 3 times slower than
a Fortran equivalent.&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ time perl perl/ch-2.pl
10, 12, 14, 16, 18, 21, 23, 25, 27, 30, 32, 34, 36, 41, 43, 45, 50, 52, 54, 61, 63, 70, 72, 81, 90

real    0m0.069s
user    0m0.048s
sys     0m0.020s
-bash-5.0$ time fortran/ch-2     
          10
          12
          14
          16
          18
          21
          23
          25
          27
          30
          32
          34
          36
          41
          43
          45
          50
          52
          54
          61
          63
          70
          72
          81
          90

real    0m0.021s
user    0m0.001s
sys     0m0.016s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, the Fortran took at least 3x longer to write. These are the tradeoffs that get 
considered on a daily basis!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/"&gt;Challenge 176&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc176</id>
    <published>2022-08-07T12:16:00-04:00</published>
    <updated>2022-08-07T12:16:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Wie erstellt man eine User Story Map?</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Die Methode des User Story Mappings soll den am Prozess der  Softwareerstellung beteiligten Personen helfen, für den Anwender hilfreiche Software zu erstellen und dabei den Überblick über das große Ganze zu behalten. Wie wird nun ein solches User Story Mapping durchgeführt?</div>
    </content>
    <id>https://blog.perl-academy.de/2022-08-05-wie-erstellt-man-eine-user-story-map</id>
    <published>2022-08-05T10:00:00Z</published>
    <updated>2022-08-05T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): July 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-08-03:/post/maintaining_perl_dave_mitchell_july_2022</id>
  <published>2022-08-03T21:15:22</published>
  <updated>2022-08-03T21:15:22</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during July covered by my TPF perl core maintenance grant.  3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz  3:28 Format in fill-mode has inconsistent behaviour  4:58 Goto xsub forces scalar context  0:57 Returning undef returns a weird hash reference  0:37 Segmentation fault with use re 'eval'  0:20 fix build warning  39:28 make stack reference counted  6:11 process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes: </p>

<p>This is my monthly report on work done during July covered by my TPF perl
core maintenance grant.
<code>
      3:57 BBC: TODDR/YAML-Syck-1.34.tar.gz (Issue #19939)
      3:28 Format in fill-mode has inconsistent behaviour (Issue #19985)
      4:58 Goto xsub forces scalar context (#19188)
      0:57 Returning undef returns a weird hash reference (Issue #19996)
      0:37 Segmentation fault with use re 'eval' (Issue #19390)
      0:20 fix build warning
     39:28 make stack reference counted
      6:11 process p5p mailbox
      1:16 segfault on goto &amp;xs_sub when calling sub is replaced (Issue #19936)
    ------
     61:12 TOTAL (HH::MM)
</code>
I worked on quite a few tickets last month, but the most important thing I
did was to continue work on making the stack reference counted (work I
started near the end of June).</p>

<p>This is still very much a work in progress and I have nothing visible
(i.e. pushed) to show for it yet, but what I have done so far is:</p>

<p>1) Put wrappers around 254 pp functions.</p>

<p>This changes the definitions of pp function from e.g.:
<code>
    PP(pp_subst)
    {
        ...
    }
</code>
to
<code>
    PP_wrapped(pp_subst, ((PL_op-&amp;gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0)
    {
        ...
    }
</code>
which on normal builds has no effect, but on builds with <code>PERL_RC_STACK</code>
defined, it expands to something like:
```
    OP*
    Perl_pp_subst(aTHX) {
        return
            Perl_pp_wrap(my_perl, S_norcs_pp_subst,
                ((PL_op-&gt;op_flags &amp; OPf_STACKED) ? 2 : 1), 0);
    }</p>

<pre><code>STATIC OP*
S_norcs_pp_subst(pTHX)
{
    ...
}
</code></pre>

<p><code>``
</code>pp_wrap()<code>is responsible for pushing a (non-reference-counted) copy
of the current stack frame onto the end of the stack, then calling the
original pp function</code>S_norcs_pp_subst()`, which doesn't know about
reference-counted arguments, then shifting down and bumping the reference
count of everything that it returns on the stack.</p>

<p>The two numeric arguments for <code>pp_wrap</code> are how many arguments that op
expects on the stack, or for list ops, how many (mark-delineated) lists it
expects. Often these are just constants, but for some, like <code>pp_subst</code>, it
varies depending on flags.</p>

<p>2) Of the remaining 56 pp functions, some didn't need wrapping (like
<code>pp_pushmark</code>), while others required special handling - like most of the
<code>pp_enterfoo</code> and <code>pp_leavefoo</code> functions. For example most leavefoo ops in
void context just abandon any arguments left on the stack:
<code>
    PL_stack_sp = PL_stack_base + cx-&amp;gt;blk_oldsp;
</code>
For a reference-counted stack, this means that all those SVs leak. So I've
replaced all such occurrences with an inline function call:
<code>
    rpp_pop_to(PL_stack_base + cx-&amp;gt;blk_oldsp);
</code>
which on normal builds just resets <code>PL_stack_sp</code>, while on <code>PERL_RC_STACK</code>
builds, it will decrement the reference count of all those abandoned stack
items first.</p>

<p>I have almost finished doing (2) - just a handful of ops still need going
over on a line-by-line basis (in particular <code>pp_goto()</code>, which I've been
leaving to absolutely last).</p>

<p>None of the changes I've done so far actually do reference-counting yet: <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc currently have any <code>SvREFCNT_dec()</code>s etc
commented out. The idea is that I can initially add all these
modifications to the core while perl still works, Then once all that work
is done I should be able to make changes in a small number of places - <code>pp_wrap()</code>, <code>rpp_pop_to()</code> etc - and the whole of the perl core should
become reference-count-aware at once. This means that initially the core
will be merely mostly broken rather than completely broken, and it should
be easier to fix up those remaining bits which need it.</p>

<p>Then later on, things can be made more efficient again, e.g. by removing
the wrapper functions from common ops and make them directly
reference-count aware instead.</p>

<p>PS - for the avoidance of doubt, even with all these changes, unless the
core is built with <code>PERL_RC_STACK</code> defined, none of these changes take
affect yet.</p>

    ]]>
  </content>
</entry>
</feed>
