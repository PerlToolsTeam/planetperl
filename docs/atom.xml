<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-08-09T00:57:15Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>TWC 124: Literalism and existence proofs in the service of stress reduction</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jared_martin/2021/08/twc-124-literalism-and-existence-proofs-in-the-service-of-stress-reduction.html"/>
    <id>tag:blogs.perl.org,2021:/users/jared_martin//3494.10345</id>
    <published>2021-08-09T03:47:42Z</published>
    <updated>2021-08-09T05:23:01Z</updated>
    <author>
        <name>Jared Martin</name>
        
    </author>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jared_martin/">
        <![CDATA[<p>Again another week where I solve one answer and punt on another.</p>

<h2 id="task-1"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-124/#TASK1">TWC Task #1, Happy Women Day</a></h2>

<h3><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-124/jaredor/perl/ch-1.pl">jaredor submission for Task #1</a></h3>

<p>Well, "solve" may be a strong word for what I did with this problem, at least for my programming conscience. The problem statement was simple, but had no requirements for an acceptable solution other than what you could infer from the example solution in the problem statement. However I did give not one, but <i>two</i> solutions, so that's not <i>totally</i> lazy, even if each, on its own is lazy, right?</p>

<h4>--lazy solution</h4>

<p>What?! A cut-and-paste of the example itself as a solution? Yes. It literally satisfies the brief. When I was starting out as a programmer, I thought my programs had to <i>do</i> something, like, use a loop. These days, I'm thinking that the best program is the one you don't write, so this comes close to the sweet spot. I recommend this philosophy, partly in the name of efficiency, but there is also the benefit that, once my days are done, I will exit as the best programmer ;-)</p>

<h4>--superlazy solution</h4>

<p>Unicode has the Venus symbol: ♀</p>

<p>Done.</p>

<h4>Who am I kidding? I feel guilt.</h4>

<p>Okay, so maybe I will not go gentle into the programming night. I do <i>feel</i> there should be some residual thoughts cranking away when I shove a program into the world. The problem with under-specified problems is that then I have to come up requirements just to know where I'm heading and to know when I've gotten there. Ugh.</p>

<p>So, if I were to spend more time on this, what would I do? Well ... I just deleted a lot of words describing what I would do and I wasn't even halfway done. Suffice it to say that I can overthink a lot of things. Notionally, it would be just a circle atop a cross, but then I would have wanted some logic to account for scaling based on the radius. (I should never have read that article on designing true-type fonts--it ruined me ;-)</p>

<p>But given that I don't start writing until after my Sunday afternoon nap, I am forcing myself to live with being technically correct, which as we all know, is <a href="https://www.deadprogrammer.com/technically-correct">the best kind of correct</a>.</p>

<h4>Literalism stalks the world, slaying the unwary! Well, not <i>literally</i>...</h4>

<p>Whenever I am feeling Quixotic, I don my rusty armor of experience, grab my dusty banner of software engineering and sally forth with my trusty lance of logic to tilt at the windmills of bargain basement software code. I also have a grudge against TDD fanatics, who think tests substitute for thought ("who test tests substitue for testing").</p>

<p>Only, I'm no hero, just a coder. A lot of the time I have to deal with code that is too lazy, but some of the time, I should ponder more if lazy is good enough. :-)</p> ]]>
        
    </content>
</entry>
  <entry>
  <title>Binary search in Perl array</title>
  <summary type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></summary>
  <updated>2021-08-08T10:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/binary-search-in-perl-array"/>  <id>https://perlmaven.com/binary-search-in-perl-array</id>
  <content type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 124: Happy Women Day and Tug of War</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/08/perl-weekly-challenge-124-happy-women-day-and-tug-of-war.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10334</id>
    <published>2021-08-03T23:54:06Z</published>
    <updated>2021-08-08T02:40:58Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 124 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-124/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on August 8, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Happy Women Day</h2>

<p><em>Write a script to print the Venus Symbol, international gender symbol for women. Please feel free to use any character.</em></p>

<p><em>Example:</em></p>

<pre><code>    ^^^^^
   ^     ^
  ^       ^
 ^         ^
 ^         ^
 ^         ^
 ^         ^
 ^         ^
  ^       ^
   ^     ^
    ^^^^^
      ^
      ^
      ^
    ^^^^^
      ^
      ^
</code></pre>

<h3>Venus Symbol in Raku</h3>

<p>The task specification provides little information, so we could just use a variable containing the ASCII art for the Venus symbol and print it out:</p>

<pre><code>my $venus = q:to/END/;
    ^^^^^
   ^     ^
  ^       ^
 ^         ^
 ^         ^
 ^         ^
 ^         ^
 ^         ^
  ^       ^
   ^     ^
    ^^^^^
      ^
      ^
      ^
    ^^^^^
      ^
      ^
END
say $venus;
</code></pre>

<p>Predictably, this script displays the Venus symbol:</p>

<pre><code>$ raku ./venus.raku
    ^^^^^
   ^     ^
  ^       ^
 ^         ^
 ^         ^
 ^         ^
 ^         ^
 ^         ^
  ^       ^
   ^     ^
    ^^^^^
      ^
      ^
      ^
    ^^^^^
      ^
      ^
</code></pre>

<p>But, of course, that doesn&#8217;t really look like a programming challenge. So, we&#8217;ll try to do a little bit more coding, with loops, array slices and so on. There are basically five line types. We&#8217;ll store those lines in variables and print the variables as appropriate to obtain the right figure. This might look like this:</p>

<pre><code>use v6;

my $bar = "   ^^^^^";
my @pairs = "  ^     ^", " ^       ^", "^         ^";
my $single = "     ^";

say $bar;
say join "\n", @pairs[0, 1, 2, 2, 2, 2, 2, 1, 0];
say $bar;
say $single for 1..3;
say $bar;
say $single for 1..2;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./venus2.raku
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<p>It would probably be simpler to put all five line types in an array, as we did in the Python implementation below, but it works as it is, and, as they say, if it ain&#8217;t broke, don&#8217;t fix it.</p>

<h3>Venus Symbol in Perl</h3>

<p>This is essentially the same as the second Raku solution above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $bar = "   ^^^^^";
my @pairs = ("  ^     ^", " ^       ^", "^         ^");
my $single = "     ^";

say $bar;
say join "\n", @pairs[0, 1, 2, 2, 2, 2, 2, 1, 0];
say $bar;
say $single for 1..3;
say $bar;
say $single for 1..2;
</code></pre>

<p>Output:</p>

<pre><code>$ perl ./venus.pl
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<p>As for the Raku implementation, it would probably be simpler to put all five line types in an array, as we did in the Python implementation below.</p>

<h3>Venus Symbol in Sed</h3>

<p>Here we use a sed stream editor one-liner to reformat data passed to it by the shell:</p>

<pre><code>$ echo '
llll11111llll
lll1lllll1lll
ll1lllllll1ll
l1lllllllll1l
l1lllllllll1l
l1lllllllll1l
l1lllllllll1l
l1lllllllll1l
ll1lllllll1ll
lll1lllll1lll
llll11111llll
llllll1llllll
llllll1llllll
llllll1llllll
llll11111llll
llllll1llllll
llllll1llllll
' | sed 's/l/ /g; s/1/x/g'

    xxxxx
   x     x
  x       x
 x         x
 x         x
 x         x
 x         x
 x         x
  x       x
   x     x
    xxxxx
      x
      x
      x
    xxxxx
      x
      x
</code></pre>

<p>Oh, yes, I know I probably shouldn&#8217;t be doing that, but I couldn&#8217;t resist the temptation of introducing a little bit of obfuscation. I guess the trick should be pretty obvious.</p>

<h3>Venus Symbol in Awk</h3>

<p>This essentially a port to awk of the sed script just above, with the same obfuscation trick:</p>

<pre><code>$ echo '
llll11111llll
lll1lllll1lll
ll1lllllll1ll
l1lllllllll1l
l1lllllllll1l
l1lllllllll1l
l1lllllllll1l
l1lllllllll1l
ll1lllllll1ll
lll1lllll1lll
llll11111llll
llllll1llllll
llllll1llllll
llllll1llllll
llll11111llll
llllll1llllll
llllll1llllll
' | awk 'gsub("l", " ") gsub("1", "*")'

    *****
   *     *
  *       *
 *         *
 *         *
 *         *
 *         *
 *         *
  *       *
   *     *
    *****
      *
      *
      *
    *****
      *
      *
</code></pre>

<h3>Venus Symbol in Python</h3>

<p>Here we use a solution similar to the Raku and Perl solutions above, except that we store all the line types in a single array, making the code significantly shorter:</p>

<pre><code>lines = ("   ^^^^^", "  ^     ^", " ^       ^", "^         ^", "     ^")
for x in 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4:
    print(lines[x])
</code></pre>

<p>Output:</p>

<pre><code>   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in Scala</h3>

<pre><code>object root extends App {
  var venus = """
OOOO00000OOOO
OOO0OOOOO0OOO
OO0OOOOOOO0OO
O0OOOOOOOOO0O
O0OOOOOOOOO0O
O0OOOOOOOOO0O
O0OOOOOOOOO0O
O0OOOOOOOOO0O
OO0OOOOOOO0OO
OOO0OOOOO0OOO
OOOO00000OOOO
OOOOOO0OOOOOO
OOOOOO0OOOOOO
OOOOOO0OOOOOO
OOOO00000OOOO
OOOOOO0OOOOOO
OOOOOO0OOOOOO"""
  val pattern = "O".r
  venus = pattern replaceAllIn (venus, " ")
  val pattern2 = "0".r
  println(pattern2 replaceAllIn (venus, "+"))
}
</code></pre>

<p>Output:</p>

<pre><code>   +++++    
  +     +   
 +       +  
+         + 
+         + 
+         + 
+         + 
+         + 
 +       +  
  +     +   
   +++++    
     +      
     +      
     +      
   +++++    
     +      
     +
</code></pre>

<h3>Venus Symbol in Bash</h3>

<p>We use a heredoc and pipe the input through a sed command to get a more interesting output:</p>

<pre><code>#!/usr/bin/bash

  if true; then
    cat &lt;&lt;- END |  sed 's/v/♀/g'

       vvvvv
      v     v
     v       v
    v         v
    v         v
    v         v
    v         v
    v         v
     v       v
      v     v
       vvvvv
         v
         v
         v
       vvvvv
         v
         v

END
fi
</code></pre>

<p>Output:</p>

<pre><code>$ bash venus.bash

       ♀♀♀♀♀
      ♀     ♀
     ♀       ♀
    ♀         ♀
    ♀         ♀
    ♀         ♀
    ♀         ♀
    ♀         ♀
     ♀       ♀
      ♀     ♀
       ♀♀♀♀♀
         ♀
         ♀
         ♀
       ♀♀♀♀♀
         ♀
         ♀
</code></pre>

<h3>Venus Symbol in Plain Bourne shell</h3>

<p>Cheating a little bit, we can display the Venus symbol with a very simple shell one-liner:</p>

<pre><code>$ echo "♀"
♀
</code></pre>

<h3>Venus Symbol in TCL</h3>

<p>A very simple TCL script:</p>

<pre><code>/usr/bin/tclsh

puts "♀"
</code></pre>

<p>Output: </p>

<pre><code>$tclsh venus.tcl
♀
</code></pre>

<h3>Venus Symbol in Java</h3>

<p>Starting with Java 15, you can use so-called test blocks (i.e. multiline strings) by declaring the string with <code>"""</code> (three double-quote marks).</p>

<pre><code>public class Main {
    private static String venus = """ 
       ^^^^^
      ^     ^
     ^       ^
    ^         ^
    ^         ^
    ^         ^
    ^         ^
    ^         ^
     ^       ^
      ^     ^
       ^^^^^
         ^
         ^
         ^
       ^^^^^
         ^
         ^
    """;

    public static void main(String args[]) {
        System.out.printf(venus);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in Lua</h3>

<p>In Lua, you can use double square brackets <code>[[</code> and <code>]]</code> to define multiline strings.</p>

<pre><code>venus =   [[
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
]]
print(venus)
</code></pre>

<p>Output:</p>

<pre><code>$ lua venus.lua
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in C</h3>

<p>Essentially a port to C of the Python program above:</p>

<pre><code>#include &lt;stdio.h&gt;

const char * lines[] = { "   ^^^^^", "  ^     ^", 
                         " ^       ^", "^         ^", 
                         "     ^"};
const int indexes[] = { 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4 };

int main() {
    int size = sizeof (indexes) / sizeof (int);
    for (int i = 0; i &lt; size; i++) {
        printf("%s\n", lines[indexes[i]]);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./a.out
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in D</h3>

<p>The D programming language syntax is quite similar to C, so this is a port to D of the C program just above:</p>

<pre><code>import std.stdio;

string lines[] = [ "   ^^^^^", "  ^     ^", 
                         " ^       ^", "^         ^", 
                         "     ^"];
int indexes[] = [ 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4 ];

int main() {
    for (int i = 0; i &lt; 18; i++) {
        writeln(lines[indexes[i]]);
    }
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./venus.amx
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in Ruby</h3>

<p>Same algorithm as in Python (and some other languages):</p>

<pre><code>lines = ["   ooooo", "  o     o", " o       o", "o         o", "     o"]

for i in [0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4] do
    puts lines[i]
end
</code></pre>

<p>Output:</p>

<pre><code>$ ruby venus.rb
   ooooo
  o     o
 o       o
o         o
o         o
o         o
o         o
o         o
 o       o
  o     o
   ooooo
     o
     o
     o
   ooooo
     o
     o
</code></pre>

<h3>Venus Symbol in Dart</h3>

<pre><code>var lines = [ "   ^^^^^", "  ^     ^", 
                         " ^       ^", "^         ^", 
                         "     ^"];
var indexes = [ 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4 ];

void main() {
    for (int i = 0; i &lt; 18; i++ ) { 
        print(lines[indexes[i]]); 
    } 
}
</code></pre>

<p>Output:</p>

<pre><code>$ dart venus.dart
   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in Kotlin</h3>

<pre><code>fun main() {
    val lines = arrayOf("   ^^^^^", "  ^     ^", 
        " ^       ^", "^         ^",  "     ^");

    for (i in arrayOf(0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4)) {
        println(lines[i]);
    }
}
</code></pre>

<p>Output (Kotlin program compiled to a Java Jar):</p>

<pre><code>$ java -jar venus.jar

   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in Go</h3>

<pre><code>package main
import "fmt"

func main() {
    lines := [5]string{"   ^^^^^", "  ^     ^", 
        " ^       ^", "^         ^",  "     ^"} 
    indexes := [18]int{0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4}

    for i := 0; i &lt; 18; i++ {
        fmt.Printf("%s\n", lines[indexes[i]])
    }
}
</code></pre>

<p>Same output as usual:</p>

<pre><code>   ^^^^^
  ^     ^
 ^       ^
^         ^
^         ^
^         ^
^         ^
^         ^
^         ^
 ^       ^
  ^     ^
   ^^^^^
     ^
     ^
     ^
   ^^^^^
     ^
     ^
</code></pre>

<h3>Venus Symbol in Nim</h3>

<p>Nim uses Python-like code indentation.</p>

<pre><code>let lines = ["   #####", "  #     #", " #       #", "#         #", "     #"]

for i in [ 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4 ]: 
  echo lines[i]
</code></pre>

<p>Output:</p>

<pre><code>   #####
  #     #
 #       #
#         #
#         #
#         #
#         #
#         #
#         #
 #       #
  #     #
   #####
     #
     #
     #
   #####
     #
     #
</code></pre>

<h3>Venus Symbol in Julia</h3>

<p>Julia arrays are 1-based, i.e. they start at 1, not 0.</p>

<pre><code>lines = ["   ♀♀♀♀♀", "  ♀     ♀", " ♀       ♀", "♀         ♀", "     ♀"]
for i = [1, 2, 3, 4, 4, 4, 4, 4, 3, 2, 1, 5, 5, 5, 1, 5, 5]
    println( lines[i] )
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./venus.jl
   ♀♀♀♀♀
  ♀     ♀
 ♀       ♀
♀         ♀
♀         ♀
♀         ♀
♀         ♀
♀         ♀
 ♀       ♀
  ♀     ♀
   ♀♀♀♀♀
     ♀
     ♀
     ♀
   ♀♀♀♀♀
     ♀
     ♀
</code></pre>

<h3>Venus Symbol in Rust</h3>

<pre><code>fn main() {
    let line = ["   #####", "  #     #", " #       #", "#         #", "     #"];
    for i in [ 0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4 ] {
        println!("{}", line[i]);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>   #####
  #     #
 #       #
#         #
#         #
#         #
#         #
#         #
 #       #
  #     #
   #####
     #
     #
     #
   #####
     #
     #
</code></pre>

<h3>Venus Symbol in Pascal</h3>

<pre><code>program venus;
var
    lines: array[0..4] of string = ('   OOOOO', '  O     O', ' O       O', 'O         O', '     O');
    indexes: array[0..16] of integer = (0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4);
    i: integer;
begin
    for i:= 0 to 16 do
    writeln(lines[indexes[i]]);
end.
</code></pre>

<p>Output:</p>

<pre><code>   OOOOO
  O     O
 O       O
O         O
O         O
O         O
O         O
O         O
 O       O
  O     O
   OOOOO
     O
     O
     O
   OOOOO
     O
     O
</code></pre>

<h3>Venus Symbol in Zig</h3>

<pre><code>const std = @import("std");
const lines: [5][]const u8 = [_][]const u8{"   QQQQQ", "  Q     Q", " Q       Q", "Q         Q", "     Q"};
const indexes = [_]usize{ 0, 1, 2, 3, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4 };
pub fn main() !void {
    const stdout = std.io.getStdOut().writer();
    for (indexes) | idx | {
        try stdout.print("{s}\n", .{lines[idx]});
    }
}
</code></pre>

<p>Output:</p>

<pre><code>./venus
   QQQQQ
  Q     Q
 Q       Q
Q         Q
Q         Q
Q         Q
Q         Q
Q         Q
Q         Q
 Q       Q
  Q     Q
   QQQQQ
     Q
     Q
     Q
   QQQQQ
     Q
     Q
</code></pre>

<h3>Venus Symbol in Io</h3>

<p>Io is a class-less object-oriented language. The object system is based on prototypes. To build an object, you basically clone another object. Io also has strong support to cocurrent programming. To give a gist of its syntax, let me just give an &#8220;Hello world&#8221; example:</p>

<pre><code>"Hello world" print
</code></pre>

<p>What&#8217;s going on here is that the code sends the <code>print</code> message to the string <code>"Hello world"</code>. Receivers go on the left, and messages go on the right. You just send messages to objects. Another thing to know is that that to read an item of an array, the Io syntax is <code>array at(ind)</code>, where <code>ind</code> is the item subscript or index. With this in mind, it is quite easy to understand the <code>venus.io</code> script below:</p>

<pre><code>lines := list("   *****", "  *     *", " *       *", "*         *", "     *", "")
indexes := list(0, 1, 2, 3, 3, 3, 3, 3, 2, 1, 0, 4, 4, 4, 0, 4, 4, 5)
for (i, 0, 17, lines at(indexes at(i)) println)
</code></pre>

<p>Output:</p>

<pre><code>$ io venus.io
   *****
  *     *
 *       *
*         *
*         *
*         *
*         *
*         *
 *       *
  *     *
   *****
     *
     *
     *
   *****
     *
     *
</code></pre>

<h2>Task 2: Tug of War</h2>

<p><em>You are given a set of <code>$n</code> integers (n1, n2, n3, ….).</em></p>

<p><em>Write a script to divide the set in two subsets of <code>n/2</code> sizes each so that the difference of the sum of two subsets is the least. If <code>$n</code> is even then each subset must be of size <code>$n/2</code> each. In case <code>$n</code> is odd then one subset must be <code>($n-1)/2</code> and other must be <code>($n+1)/2</code>.</em></p>

<p><em>Example:</em></p>

<pre><code>Input:        Set = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
Output:  Subset 1 = (30, 40, 60, 70, 80)
         Subset 2 = (10, 20, 50, 90, 100)

Input:        Set = (10, -15, 20, 30, -25, 0, 5, 40, -5)
         Subset 1 = (30, 0, 5, -5)
         Subset 2 = (10, -15, 20, -25, 40)
</code></pre>

<h3>Tug of War in Raku</h3>

<p>We implement a <code>find_smallest_diff</code> subroutine that uses the <a href="https://docs.raku.org/routine/combinations">combinations</a> built-in method to generate all combinations of <code>int $n/2</code> elements; for each such combination, it uses the <code>(-)</code> set difference operator to find the complementary combination and proceeds to compute the difference between the item sums; finally, it returns the partition having the smallest difference and the value of this difference.</p>

<pre><code>use v6;

sub find_smallest_diff(@in) {
    my $inbag = @in.Bag;
    my $min_val = Inf;
    my $min_seq;
    my $count = @in.elems div 2;
    for @in.combinations: $count -&gt; @c1 {
        my @c2 = ($inbag (-) @c1.Bag).keys;
        if abs(@c2.sum - @c1.sum) &lt; $min_val {
            $min_val = abs(@c2.sum - @c1.sum);
            $min_seq = (@c1, " -- ", @c2);
        }
    }
    return "$min_seq =&gt; $min_val";
}

my @tests = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
            [10, -15, 20, 30, -25, 0, 5, 40, -5];
say find_smallest_diff($_) for @tests;
</code></pre>

<p>This programs displays the following output:</p>

<pre><code>$ raku ./tug.raku
10 20 50 90 100  --  40 30 80 70 60 =&gt; 10
10 -15 30 5  --  20 40 0 -25 -5 =&gt; 0
</code></pre>

<h3>Tug of War in Perl</h3>

<p>In Perl, we implement a <code>combine</code> recursive subroutine to find all combinations of a given size, and a <code>sum</code> subroutine to find the sum of all items of an array or list. Except for that, the algorithm to find the smallest difference (in the <code>find_smallest_diff</code> subroutine) is essentially the same as in Raku.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @comb;

sub combine {
    my $count = shift;
    my @out = @{$_[0]};
    my @in  = @{$_[1]};
    if ($count == 0) {
        push @comb, [@out];
        return;
    }
    for my $i (0..$#in) {
        combine ($count - 1, [@out, $in[$i]], [@in[0..$i -1], @in[$i+1..$#in]]);
    }
}

sub sum {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}

sub find_smallest_diff {
    my @in = @{$_[0]};
    my $min_val;
    my $min_seq;
    for my $c (@comb) {
        my @c1 = @$c;
        my %seen = map { $_ =&gt; 1 } @c1;
        my @c2 = grep  { not exists $seen{$_}} @in;
        my $diff = abs(sum(@c2) - sum(@c1));
        $min_val = $diff unless defined $min_val;
        if ($diff &lt; $min_val) {
            $min_val = $diff;
            $min_seq = ("@c1 -- @c2 ");
        }
    }
    return "$min_seq =&gt; $min_val";
}

for my $test ( [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
               [10, -15, 20, 30, -25, 0, 5, 40, -5] ) {
    my $count = int (@$test / 2);
    combine $count, [], $test;
    say find_smallest_diff $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl tug_of_war.pl
10 20 50 90 100 -- 30 40 60 70 80  =&gt; 10
10 -15 30 5 -- 20 -25 0 40 -5  =&gt; 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on August 15, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-629257794278133750</id>
    <published>2021-08-07T22:33:00.000+02:00</published>
    <updated>2021-08-07T22:33:43.191+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccliii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/DBD-SQLite-1.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Self Contained SQLite RDBMS in a DBI Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.70&lt;/strong&gt; on 2021-08-01&lt;/li&gt;  &lt;li&gt;Votes: 96&lt;/li&gt;  &lt;li&gt;Previous version: 1.68 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.024&lt;/strong&gt; on 2021-08-01&lt;/li&gt;  &lt;li&gt;Votes: 175&lt;/li&gt;  &lt;li&gt;Previous version: 6.023 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.34' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.34&lt;/strong&gt; on 2021-08-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.33 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/HTTP-Tiny-0.078' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A small, simple, correct HTTP/1.1 client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.078&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 100&lt;/li&gt;  &lt;li&gt;Previous version: 0.076 was 2 years, 11 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.79&lt;/strong&gt; on 2021-08-05&lt;/li&gt;  &lt;li&gt;Votes: 60&lt;/li&gt;  &lt;li&gt;Previous version: 0.78 was 6 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.710' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.710&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 1.709 was 5 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.007&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 3.006 was 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2021-08-06&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.055' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.055&lt;/strong&gt; on 2021-08-03&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.054 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Software-License-0.104001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Software::License&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - packages that provide templated software licenses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.104001&lt;/strong&gt; on 2021-08-02&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.103014 was 2 years, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-Mechanize-2.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.04&lt;/strong&gt; on 2021-08-06&lt;/li&gt;  &lt;li&gt;Votes: 86&lt;/li&gt;  &lt;li&gt;Previous version: 2.03 was 8 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.075&lt;/strong&gt; on 2021-08-07&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.074 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/629257794278133750/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliii-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/629257794278133750"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/629257794278133750"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliii-12-great-cpan-modules-released.html" title="(cccliii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3766663288023086498</id>
    <published>2021-08-07T22:28:00.002+02:00</published>
    <updated>2021-08-07T22:28:49.673+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxix) metacpan weekly report - Object::Pad</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 26&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/07 20:27:46 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer::Plugin::BeforeRoute" target="_blank"&gt;Dancer::Plugin::BeforeRoute&lt;/a&gt; - Run something before a route execute&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::DOM::Role::Restrict" target="_blank"&gt;Mojo::DOM::Role::Restrict&lt;/a&gt; - Restrict tags and attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Schema::Versioned" target="_blank"&gt;SQL::Schema::Versioned&lt;/a&gt; - Routine and convention to create/update your application's DB schema&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/boolean" target="_blank"&gt;boolean&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Extensible" target="_blank"&gt;Dancer2::Plugin::Auth::Extensible&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Session::Cookie" target="_blank"&gt;Dancer2::Session::Cookie&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::ULID" target="_blank"&gt;Data::ULID&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Database::Migrator" target="_blank"&gt;Database::Migrator&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=277)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::DeploymentHandler" target="_blank"&gt;DBIx::Class::DeploymentHandler&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Migration" target="_blank"&gt;DBIx::Class::Migration&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Schema::Versioned::Inline" target="_blank"&gt;DBIx::Class::Schema::Versioned::Inline&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future" target="_blank"&gt;Future&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::HTML5::Parser" target="_blank"&gt;HTML::HTML5::Parser&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Daemon" target="_blank"&gt;HTTP::Daemon&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::ExtractUse" target="_blank"&gt;Module::ExtractUse&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=458)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OAuth2" target="_blank"&gt;Mojolicious::Plugin::OAuth2&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=283)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+3=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Map" target="_blank"&gt;Parallel::Map&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=154)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Session::Storage::Secure" target="_blank"&gt;Session::Storage::Secure&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3766663288023086498/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxix-metacpan-weekly-report-objectpad.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3766663288023086498"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3766663288023086498"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxix-metacpan-weekly-report-objectpad.html" title="(cdlxxix) metacpan weekly report - Object::Pad"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4002299958775944725</id>
    <published>2021-08-07T22:25:00.001+02:00</published>
    <updated>2021-08-07T22:25:12.289+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(di) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-08-07 20:18:30 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68656428" target="_blank"&gt;Why do Inline::Python functions that print fail to be redirected?&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68621319" target="_blank"&gt;How to dereference this array? And how do I store this array into a hash?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68626228" target="_blank"&gt;My Perl variable to variable substitutions do not work&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68625733" target="_blank"&gt;How to sort strings using two substring equality conditions?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68630505" target="_blank"&gt;Perl: Can you use more than two arrays in the map function?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68663268" target="_blank"&gt;JSON from array prints invalid json&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68668243" target="_blank"&gt;compare columns from 2 files &amp;amp; print matching and non-matching rows in same order as in file1 &amp;amp; print YES/NO at end of matching and non-matching rows&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68612917" target="_blank"&gt;how do I determine whether a variable is stored as numeric or string in perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68635694" target="_blank"&gt;save directly to file and get filename using WWW::Mechanize&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68650706" target="_blank"&gt;Insert datetime into Oracle using perl DBI parameterized INSERT statement&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4002299958775944725/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/di-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4002299958775944725"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4002299958775944725"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/di-stackoverflow-perl-report.html" title="(di) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grants: July 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_july_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-08-07:/post/grants_july_2021_votes</id>
  <published>2021-08-07T12:42:34</published>
  <updated>2021-08-07T12:42:34</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the July 2021 round. One grant request was submitted: Grant Proposal: Maintaining Perl 5 Core VOTING RESULTS: Approved. 7 YES vote 0 NO votes We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit our donations page. We 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the July 2021 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl_5_dave_mitchell">Grant Proposal: Maintaining Perl 5 Core</a> (USD 21,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (35 points), 0 NO votes</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Board review: Community Affairs Team</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat_review"/>
  <id>tag:news.perlfoundation.org,2021-08-07:/post/cat_review</id>
  <published>2021-08-07T00:00:00</published>
  <updated>2021-08-07T00:00:00</updated>
  <summary>
  <![CDATA[
     The Perl foundation’s board members have had an opportunity to review the Community Affairs Team (CAT), actions and its processes. As a result, the board has chosen to put the CAT on hiatus while its charter is formalized, and is retracting the public announcements of previous investigations.
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Summary</h2>

<p>The Perl foundation’s board members have had an opportunity to review the Community Affairs Team (CAT), actions and its processes. As a result, the board has chosen to put the CAT on hiatus while its charter is formalized, and is retracting the public announcements of previous investigations.</p>

<p>While the CAT has had board-sponsored training and a draft charter, the final charter has not been formally approved therefore previous CAT actions cannot be measured against it.</p>

<h2>1. Retractions</h2>

<p>Effective immediately, the CAT statements of 19 April 2021 and 2 May 2021 are being retracted. A note will be placed on the pages that held those statements stating that the board has retracted them. The sanctions were agreed by the board and therefore still stand.</p>

<h2>2. CAT hiatus</h2>

<p>Effective immediately, the CAT is on hiatus until such time as the charter has been formally approved by the Board of Directors. </p>

<p>Reports will not be accepted until such time as the CAT is chartered. </p>

<p>The board will work with all diligent haste to complete this process in collaboration with the current members of the CAT. Feedback and engagement with communities will be sought throughout this process.</p>

<h2>3. Active reports</h2>

<p>There are currently two incidents that have been reported to the CAT. These will be held for review until the charter is approved and the reporters will be notified of this.</p>

<h2>4. Moderation intent</h2>

<p>We do not wish the CAT to become a "court of law"; that said, the CAT needs to allow a certain amount of "due process" in the interest of fairness. </p>

<p>Therefore the rules and processes need to be made explicit, and the possible sanctions laid out clearly. These were addressed in the draft charter, but have not been properly formalized.</p>

<h2>5. Behaviour in TPF spaces</h2>

<p>When visiting TPF spaces and TPF activities (such as Slack, TPF lists, meetings and conferences), standards and expectations of behaviour are set by the board, and anyone participating is expected to adhere to these standards. </p>

<p>To reduce the chance of finding yourself outside these expectations, here are some suggestions:
- always treat others with courtesy and professionalism
- do not share others' personal information in public unless authorized to do so
- remember that everyone is different and might not interpret your messages as you had expected
- if you find yourself in a difficult situation
    - work with the other person to clarify what happened
    - avoid escalation
    - take time away from the keyboard before reacting</p>

<p>Slack Administrators and board members have been entrusted by TPF to handle issues and moderate when needed. Although the first response will be a gentle reminder in most situations, the moderators have the right to remove messages or access at their discretion.</p>

<p>If anyone has an issue with moderation, or would like to check if a specific action is or is not acceptable, they can email hello@perlfoundation.org with their concerns; messages to this address are copied to the board. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Railroad diagrams for SQL 2003 and SQL 2016</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ron_savage/2021/08/railroad-diagrams-for-sql-2003-and-sql-2016.html"/>
    <id>tag:blogs.perl.org,2021:/users/ron_savage//297.10336</id>
    <published>2021-08-05T13:53:45Z</published>
    <updated>2021-08-05T14:06:11Z</updated>
    <author>
        <name>Ron Savage</name>
        <uri>http://savage.net.au/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ron_savage/">
        <![CDATA[<p>On github at <a href="https://github.com/ronsavage/SQL">https://github.com/ronsavage/SQL</a> you will find a repo of SQL stuff created by Jonathan Leffler.</p>

<p>I recently added some files for SQL 2003 and SQL 2016, created by Domingo Alvarez Duarte.</p>

<p>Specifically, look for:<br />
o sql-2003-2.ebnf<br />
o sql-2003-2.ebnf.readme<br />
o sql-2003-2-railroad-diagrams.xhtml<br />
o sql-2016.ebnf<br />
o sql-2016.ebnf.readme<br />
o sql-2016-railroad-diagrams.xhtml</p>

<p>I'd suggest downloading the *.xhtml files and viewing them locally, rather than hammering the on-line convertor mentioned in the readme files, which accepts *.ebnf files and displays these railroad diagrams.</p>

<p>And that begs the question: Is there any Perl code which converts a grammar into a railroad diagram?<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>[Short Prog] Week Number Getter</title>
    <link rel="alternate" href="https://dev.to/jeongoon/short-prog-week-number-getter-49m2" type="text/html"/>
    <content type="html">&lt;p&gt;The one way to store my weekly documents in a directory or a weekly task in a spreadsheet is to store them into a separate directory (or a sheet) by weekly basis. and I used the week number because it has shorter name than using period notation like (08.02-08.08).&lt;br&gt;
  I scanned some invoices and name it in sort of "20210805.Chicken.pdf" then I move them into appropriate "week -number-ed" directory.&lt;br&gt;
  then I realised that there might be some automatic way to put them into matched weekly directory.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-get-week-number-in-raku"&gt;
  &lt;/a&gt;
  How to get week number in Raku
&lt;/h2&gt;

&lt;p&gt;I'm a &lt;a href="//www.raku.org"&gt;raku&lt;/a&gt; user. and I could make it a simple terminal interface programme like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;
&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;( Int $year, Int $month, Int $day ) {&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;week&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;chmod &lt;/span&gt;u+x week-number.raku
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; week-number.raku 2021 8 4
31
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think it's pretty straight forward if get used to some syntax.&lt;/p&gt;

&lt;p&gt;If you want to use a single text like "20210804"&lt;br&gt;
I could add one more multi sub for the MAIN()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;cut&lt;/span&gt;&lt;span class="p"&gt;-off-last-two-digits( @i ) returns Int {&lt;/span&gt;
    &lt;span class="c1"&gt;# warning: side effect&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;( Int \yyyymmdd ) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;yyyymmdd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$day&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cut&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;off&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;digits&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;cut&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;off&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;two&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;digits&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$year&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;.&lt;/span&gt;&lt;span class="nb"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;False&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;check your input: {yyyymmdd}&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;samewith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;multi&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;( Int $year, Int $month, Int $day ) {&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;week&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#perl5-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Perl5&lt;/strong&gt; Version
&lt;/h2&gt;

&lt;p&gt;I searched the internet and I used DateTime module to implement.&lt;br&gt;
but I guess DateTime is quite heavy module. because perl is normally very very fast but this programme isn't.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;File::&lt;/span&gt;&lt;span class="nv"&gt;Basename&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;$PROG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@parsed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;enum&lt;/span&gt; &lt;span class="sx"&gt;qw(F_YEAR F_MONTH F_DAY)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;usage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;END_OF_USAGE&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;$PROG&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;YYYYMMDD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;OR&lt;/span&gt;
&lt;span class="nv"&gt;$PROG&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;YYYY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;END_OF_USAGE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# parse as YYYYMMDD&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;@parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^(\d+)(\d\d)(\d\d)$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;@parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@parsed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;F_YEAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;F_MONTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;F_DAY&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;year&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s"&gt;month&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="s"&gt;day&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$day&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;week_number&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#haskell-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Haskell Version&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I still hate some part of code and there is no proper way to handle errors but it is working fast. so I'm going to stick with this programme for a while.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; stack new week-number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#appmainhs"&gt;
  &lt;/a&gt;
  app/Main.hs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Environment&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Lib&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getArgs&lt;/span&gt; &lt;span class="c1"&gt;-- note: args :: [String]&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
              &lt;span class="n"&gt;yyyymmdd&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;weekNumberStringFromString&lt;/span&gt; &lt;span class="n"&gt;yyyymmdd&lt;/span&gt;
              &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;y'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;m'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;d'&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="kr"&gt;in&lt;/span&gt;
                  &lt;span class="n"&gt;weekNumberStringFromGregorian&lt;/span&gt; &lt;span class="n"&gt;y'&lt;/span&gt; &lt;span class="n"&gt;m'&lt;/span&gt; &lt;span class="n"&gt;d'&lt;/span&gt;
              &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;unlines&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;"usage:"&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"week-number: &amp;lt;yyyymmdd&amp;gt;"&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"  or"&lt;/span&gt;
                &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"week-number: &amp;lt;yyyy&amp;gt; &amp;lt;m&amp;gt; &amp;lt;d&amp;gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#srclibhs"&gt;
  &lt;/a&gt;
  src/Lib.hs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Lib&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;weekNumberStringFromString&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;weekNumberStringFromGregorian&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Time&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;DT&lt;/span&gt;

&lt;span class="n"&gt;weekNumberStringFromString&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;weekNumberStringFromString&lt;/span&gt; &lt;span class="n"&gt;yyyymmdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parseTimeOrError&lt;/span&gt;
           &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultTimeLocale&lt;/span&gt; &lt;span class="s"&gt;"%Y%m%d"&lt;/span&gt; &lt;span class="n"&gt;yyyymmdd&lt;/span&gt;  &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;UTCTime&lt;/span&gt;
  &lt;span class="kr"&gt;in&lt;/span&gt;
    &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatTime&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultTimeLocale&lt;/span&gt; &lt;span class="s"&gt;"%V"&lt;/span&gt; &lt;span class="n"&gt;ut&lt;/span&gt;

&lt;span class="n"&gt;weekNumberStringFromGregorian&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Integer&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;weekNumberStringFromGregorian&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatTime&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultTimeLocale&lt;/span&gt; &lt;span class="s"&gt;"%V"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromGregorian&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; stack build
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; stack &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; week-number-exe 2021 8 4
31
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so now I need to make some script go through the file&lt;br&gt;
and get the date information from the file name and move them into&lt;br&gt;
right place.&lt;/p&gt;

&lt;p&gt;Okay. That's all today.&lt;/p&gt;

</content>
    <author>
      <name>Myoungjin Jeon</name>
    </author>
    <id>https://dev.to/jeongoon/short-prog-week-number-getter-49m2</id>
    <published>2021-08-05T07:55:23Z</published>
    <updated>2021-08-05T07:55:23Z</updated>
    <category term="raku"/>
    <category term="shell"/>
    <category term="perl"/>
    <category term="haskell"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): June 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_june_2021_tony_cook"/>
  <id>tag:news.perlfoundation.org,2021-08-04:/post/maintaining_perl_5_june_2021_tony_cook</id>
  <published>2021-08-04T21:47:25</published>
  <updated>2021-08-04T21:47:25</updated>
  <summary>
  <![CDATA[
     Approximately 30 tickets were reviewed, and 3 patches were applied  3.09 research, comment on PSC #024, review Neil’s perl quirks  PSC #024 follow-up  2.49 #17521 research  #17521 research  #17521 research 11.28 #18534 review, re-work general xlocale.h handling  #18534 testing, try to work out an autodoc issue  #18534 fix some porting issues, push for CI  #18534 testing my PR on freebsd, debugging, working 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>```
Approximately 30 tickets were reviewed, and 3 patches were
applied</p>

<p>[Hours]         [Activity]
  3.09          research, comment on PSC #024, review Neil’s perl quirks
                PSC #024 follow-up
  2.49          #17521 research
                #17521 research
                #17521 research
11.28          #18534 review, re-work general xlocale.h handling
                #18534 testing, try to work out an autodoc issue
                #18534 fix some porting issues, push for CI
                #18534 testing my PR on freebsd, debugging, working on a
                fix
                #18534 more work on a fix, testing, fix some portability
                issues and push for CI
                #18534 review CI results, clean up commits, rebase, push
                for smoke
  0.32          #18550 review, research and comment
  0.38          #18557 rebase and re-test, push
  0.85          #18660 recheck and apply to blead, update perldelta for
                this and #18900
  0.37          #18662 review, test, approve
  2.93          #18710 review discussion and comment
                #18710 comment
                #18710 review and comment
                #18710 review latest changes and comment
                #18710 review, consider whether they should be core only
                or not
  0.17          #18788 check and comment
  2.13          #18834 review, make PR #18848
  0.92          #18837 testing, review configure probing
  2.24          #18842 comment
                #18842 work on a fix, testing, make PR #18912
  4.23          #18847 try to reproduce and comment
                #18847 debugging, comment
                #18847 work on a fix, testing, make PR #18853
  0.30          #18848 follow-up comment
  0.55          #18859 comment
  2.23          investigate mingw64 failures in blead, review commits to
                see where it started failing, revert and push for CI
                (which eventually passed, fixing regression), set up to
                test against gcc from newer strawberry, testing, look into
                test environment to try to find any differences, none
                appear likely to cause a problem, create #18866
  0.30          #18867 review, research and comment
  0.33          #18878 review and apply to blead
  7.57          #18888 review change, look over existing code to try to
                work out what’s going on
                #18888 debugging
                #18888 debugging
                #18888 experiment, try to break the block wrapping,
                comment
  1.93          #18900 testing, add v tests, more testing, apply to blead
                #18900 add votes-5.34 and add commits to it
  0.28          #18910 look over change and comment
  0.18          #18947 read and comment
  2.17          #18948 research, testing and comment
  0.27          comment on smoke-me thread
  1.30          github notifications
                github notifications
                github notifications
  0.97          list catch up
  0.50          list catch up, comment
  1.12          look into cygwin CI failures, seems to be temporary
  0.17          review github notifications (mostly CI noise)</p>

<h1>  0.82          review rfc docs, research and reply</h1>

<p>52.39 hours total
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>What’s Next for Object-Oriented Perl?</title>
    <link rel="alternate" href="https://dev.to/mjgardner/what-s-next-for-object-oriented-perl-f1a" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#introduction-the-current-state-of-play"&gt;
  &lt;/a&gt;
  Introduction: The current state of play
&lt;/h2&gt;

&lt;p&gt;Perl has “very minimal” support for object-oriented (OO) programming out of the box &lt;a href="https://perldoc.perl.org/perlootut#DESCRIPTION"&gt;by its own admission&lt;/a&gt;. It’s class-based but classes are &lt;a href="https://perldoc.perl.org/perlobj#A-Class-is-Simply-a-Package"&gt;just packages&lt;/a&gt; used differently. Objects are &lt;a href="https://perldoc.perl.org/perlobj#An-Object-is-Simply-a-Data-Structure"&gt;just data structures&lt;/a&gt; &lt;a href="https://perldoc.perl.org/functions/bless"&gt;&lt;code&gt;bless&lt;/code&gt;&lt;/a&gt;ed into a class, methods are &lt;a href="https://perldoc.perl.org/perlobj#A-Method-is-Simply-a-Subroutine"&gt;just subroutines&lt;/a&gt; whose first argument is an object or class name, and &lt;a href="https://perldoc.perl.org/perlobj#Attributes"&gt;attributes/properties are often just the key-value pair of a hash&lt;/a&gt; stored in the object. (This last is a feature shared with JavaScript, whose prototype-based objects are just collections of key-value pairs with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#objects_and_properties"&gt;keys addressed as properties&lt;/a&gt;.) You’ve got &lt;a href="https://perldoc.perl.org/perlootut#Polymorphism"&gt;polymorphism&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/perlobj#Inheritance"&gt;inheritance&lt;/a&gt;, and it’s up to you to enforce &lt;a href="https://perldoc.perl.org/perlootut#Encapsulation"&gt;encapsulation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This can take a lot of work to use effectively. To help address that, &lt;a href="https://perldoc.perl.org/perlootut#PERL-OO-SYSTEMS"&gt;several systems&lt;/a&gt; have been developed over the years to reduce boilerplate and provide modern (or “postmodern”) OO features that developers from other languages expect. My favorite for a while has been &lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt;: it’s got the features I need 90% of the time like &lt;a href="https://metacpan.org/pod/Moo#new"&gt;built-in constructors&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Moo#with"&gt;roles&lt;/a&gt; (an alternative to composition through inheritance), &lt;a href="https://metacpan.org/pod/Moo#has"&gt;attributes&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Moo#isa"&gt;type validation&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;method modifiers&lt;/a&gt; for enhanced polymorphism. And if I need to dig around in the guts of classes, attributes, and the like I can always upgrade to Moo’s big brother &lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; and its &lt;a href="https://metacpan.org/pod/Class::MOP"&gt;meta-object protocol&lt;/a&gt; with minimal effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#corinna-objectpad-and-porting-dbcritic"&gt;
  &lt;/a&gt;
  Corinna, Object::Pad, and porting dbcritic
&lt;/h2&gt;

&lt;p&gt;But there’s a new kid on the block. &lt;a href="https://ovid.github.io/"&gt;Curtis “Ovid” Poe&lt;/a&gt; has been spearheading &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt;, an effort “to bring effective OO to the Perl core and &lt;em&gt;leapfrog&lt;/em&gt; [emphasis his] the capabilities of many OO languages today.” No &lt;a href="https://www.cpan.org/"&gt;CPAN&lt;/a&gt; modules, no chain of dependencies; just solid OO features and syntax built-in. And while Corinna is a ways off from shipping, &lt;a href="https://leonerds-code.blogspot.com/"&gt;Paul “LeoNerd” Evans&lt;/a&gt; &lt;em&gt;(maybe I should get a cool nickname too?)&lt;/em&gt; has been implementing some of these ideas as &lt;a href="https://perldoc.perl.org/perlapi#PL_keyword_plugin"&gt;new Perl keyword syntax&lt;/a&gt; in his &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;Both &lt;a href="https://twitter.com/OvidPerl/status/1420323829356843011"&gt;Ovid&lt;/a&gt; and &lt;a href="https://twitter.com/cpan_pevans/status/1415596477968261121"&gt;LeoNerd have been asking developers to try out Object::Pad&lt;/a&gt;, not just as a new toy, but to get feedback on what works and what needs to be added. So I thought I’d try porting an older small Moo-based project named &lt;a href="http://mjgardner.github.io/dbcritic/"&gt;dbcritic&lt;/a&gt; to this new reality. In the process, I learned some of the advantages and disadvantages of working with Object::Pad. Hopefully, this can inform both it and Corinna’s evolution as well as other curious developers’ evaluations. You can follow my coding efforts in &lt;a href="https://github.com/mjgardner/dbcritic/tree/object_pad"&gt;this GitHub branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, the marquee result: the &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm"&gt;code for App::DBCritic&lt;/a&gt; (the class I started with) is cleaner and shorter, with 33 lines shaved off so far. Mainly this is due to Object::Pad’s &lt;a href="https://metacpan.org/pod/Object::Pad#has"&gt;more concise attribute syntax&lt;/a&gt; (called “slots” in its documentation) and lack of explicit support for Moo’s &lt;a href="https://metacpan.org/pod/Moo#coerce"&gt;attribute coercion&lt;/a&gt;. I only used the latter for one attribute in the Moo version and I’m not sure it worked particularly well, so it wasn’t hard to jettison. But if your code supports coercions extensively, you’ll have to look into Object::Pad’s &lt;a href="https://metacpan.org/pod/Object::Pad#BUILD"&gt;&lt;code&gt;BUILD&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Object::Pad#BUILD"&gt;&lt;code&gt;ADJUST&lt;/code&gt;&lt;/a&gt; phase blocks for now.&lt;/p&gt;

&lt;p&gt;Before, a Moo attribute with various options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;is&lt;/span&gt;        &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;coerce&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;lazy&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;default&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;_build_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;coerce&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;_coerce_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;predicate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After, an Object::Pad slot. No coercion and builder code is handled in a later &lt;code&gt;ADJUST&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;param&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Speaking of &lt;code&gt;ADJUST&lt;/code&gt; blocks, it took a little bit of insight from the &lt;a href="https://web.libera.chat/#perl"&gt;#perl IRC channel&lt;/a&gt; to realize that they were the appropriate place for setting slot defaults that are computed from other slots. Previously I was using a maze of dependencies mixing Moo &lt;a href="https://metacpan.org/pod/Moo#lazy"&gt;&lt;code&gt;lazy&lt;/code&gt;&lt;/a&gt; attributes and &lt;a href="https://metacpan.org/pod/Moo#builder"&gt;&lt;code&gt;builder&lt;/code&gt;&lt;/a&gt; methods. Clarifying the main set of optional constructor arguments into a &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm#L82"&gt;single &lt;code&gt;ADJUST&lt;/code&gt; block&lt;/a&gt; helped untangle things, so this might be an indication that lazy attributes are an antipattern when trying to write clean code. It’s also worth noting that Object::Pad &lt;code&gt;ADJUST&lt;/code&gt; blocks run on object construction, whereas Moo &lt;code&gt;lazy&lt;/code&gt; attributes are only built when needed. This tends to matter for database access.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ADJUST&lt;/code&gt; block for the &lt;code&gt;$schema&lt;/code&gt; slot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;ADJUST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@connect_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$dsn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$class_name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;require &lt;/span&gt;&lt;span class="si"&gt;$class_name&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$class_name&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@connect_info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;blessed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;DBIx::Class::Schema&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$SIG&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="bp"&gt;__WARN__&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!~&lt;/span&gt; &lt;span class="sr"&gt;/ has no primary key at /ms&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;*STDERR&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;App::DBCritic::&lt;/span&gt;&lt;span class="nv"&gt;Loader&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@connect_info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;croak&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No schema defined&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Object::Pad’s slots have one great advantage over Moo and Moose attributes: they directly support Perl array and hash data structures, while the latter only supports &lt;a href="https://perldoc.perl.org/perldata#Scalar-values"&gt;scalars&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/perlref"&gt;references&lt;/a&gt; contained in scalars. This means methods in your class can eliminate a &lt;a href="https://perldoc.perl.org/perlref#Using-References"&gt;dereferencing&lt;/a&gt; step, again leading to cleaner code. I used this specifically in the &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm#L124"&gt;&lt;code&gt;@violations&lt;/code&gt; array&lt;/a&gt; and &lt;a href="https://github.com/mjgardner/dbcritic/blob/object_pad/lib/App/DBCritic.pm#L114"&gt;&lt;code&gt;%elements&lt;/code&gt; hash&lt;/a&gt; slots and was very pleased with the results.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@violations&lt;/code&gt; and &lt;code&gt;%elements&lt;/code&gt; slots and their &lt;code&gt;ADJUST&lt;/code&gt; blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;%elements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;ADJUST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;%elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;ResultSource&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;ResultSet&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;resultset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;@violations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;ADJUST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;@violations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_policy_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$elements&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%elements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;violations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;wantarray&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;@violations&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@violations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;I did have some development lifecycle issues with Object::Pad, but they’re mainly a result of its future-facing syntax. I had to give up using &lt;code&gt;perltidy&lt;/code&gt; and &lt;code&gt;perlcritic&lt;/code&gt; in my build and test phases, respectively: &lt;code&gt;perltidy&lt;/code&gt; doesn’t understand slot attributes like &lt;code&gt;:reader&lt;/code&gt; and &lt;code&gt;:param&lt;/code&gt; and will emit an error file (but code still compiles), and several of the &lt;code&gt;perlcritic&lt;/code&gt; policies I use report problems because its &lt;a href="https://metacpan.org/pod/PPI"&gt;PPI&lt;/a&gt; parser doesn’t recognize the new syntax. I could add exceptions in the &lt;code&gt;perlcriticrc&lt;/code&gt; file and litter my code with more &lt;code&gt;## no critic&lt;/code&gt; annotations than it already had, but at this point, it was easier to just disable it entirely.&lt;/p&gt;

&lt;p&gt;Another thing I had to disable for now was my &lt;a href="https://metacpan.org/pod/Dist::Zilla::Plugin::Test::UnusedVars"&gt;Dist::Zilla::Plugin::Test::UnusedVars&lt;/a&gt;-generated &lt;a href="https://metacpan.org/pod/Test::Vars"&gt;Test::Vars&lt;/a&gt; test for detecting unused variables, as it reports multiple failures for the hidden &lt;code&gt;@(Object::Pad/slots)&lt;/code&gt; variable. It does have &lt;a href="https://metacpan.org/pod/Test::Vars#all_vars_ok(%args)"&gt;options for ignoring certain variables&lt;/a&gt;, though, so I can explore using those and possibly file a &lt;a href="https://github.com/houseabsolute/p5-Test-Vars/pulls"&gt;pull request&lt;/a&gt; to ignore that variable by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-the-future-looks-bright"&gt;
  &lt;/a&gt;
  Conclusion: The future looks bright
&lt;/h2&gt;

&lt;p&gt;Overall I’m satisfied with Object::Pad and by extension some of the syntax that Corinna will introduce. I’m going to try porting the rest of dbcritic and see if I can work around the issues I listed above without giving up the &lt;a href="https://qa.perl.org/phalanx/kwalitee.html"&gt;kwalitee&lt;/a&gt; improvement tools I’m used to. I’ll post my findings if I feel it merits another blog.&lt;/p&gt;

&lt;p&gt;What do you think? Is this the future of object-oriented Perl? Let me know in the comments below.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/what-s-next-for-object-oriented-perl-f1a</id>
    <published>2021-08-03T14:00:00Z</published>
    <updated>2021-08-03T14:00:00Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="corinna"/>
    <category term="moo"/>
  </entry>
  <entry>
    <title>Weekly Challenge 124</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-124-2gi7" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-124/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-124/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-1-happy-women-day"&gt;
  &lt;/a&gt;
  TASK #1 › Happy Women Day
&lt;/h3&gt;

&lt;p&gt;Write a script to print the &lt;a href="https://en.wikipedia.org/wiki/Planet_symbols#Venus"&gt;Venus Symbol&lt;/a&gt;, international gender symbol for women. Please feel free to use any character.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;

&lt;p&gt;I decided not to submit a solution. Short of doing a print with a huge &lt;a href="https://perlmaven.com/here-documents"&gt;heredoc&lt;/a&gt; there doesn't actually appear to be a task. Maybe &lt;code&gt;say '♀'&lt;/code&gt; cuts the mustard too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-2-tug-of-war"&gt;
  &lt;/a&gt;
  TASK #2 › Tug of War
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;You are given a set of &lt;code&gt;$n&lt;/code&gt; integers (n1, n2, n3, ….).&lt;/p&gt;

&lt;p&gt;Write a script to divide the set in two subsets of &lt;code&gt;n÷2&lt;/code&gt; sizes each so that the difference of the sum of two subsets is the least. If &lt;code&gt;$n&lt;/code&gt; is even then each subset must be of size &lt;code&gt;$n÷2&lt;/code&gt; each. In case &lt;code&gt;$n&lt;/code&gt; is odd then one subset must be &lt;code&gt;($n-1)÷2&lt;/code&gt; and other must be &lt;code&gt;($n+1)÷2&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;

&lt;p&gt;Looking at solutions to last week's Ugly Numbers task, it's clear that I don't always write the most efficient solution. I did however note that in my blog post last week too :-) This task may also fall into that category.&lt;/p&gt;

&lt;p&gt;This task is about doing things in half. The target (most optimal solution) means that each set has exactly half the sum of all the inputs.&lt;/p&gt;

&lt;p&gt;I have rolled my own &lt;code&gt;_get_next_combination&lt;/code&gt; sub routine that works through all possible combinations of the first set. I do this because as a rule of thumb I don't use no-core Perl modules for these challenges.&lt;/p&gt;

&lt;p&gt;For each combination, I get the sums of the values in the set and see how close it is to the target. If it is an exact match, we can exit the loop early. If the difference is less than any previous combination, I record this fact.&lt;/p&gt;

&lt;p&gt;Finally, I get the half of positions not in the first set and display the result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Compared to the examples, the first example has the sets switched. The second example is completely different, but both solutions produce sets of 30.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./ch-2.pl 10 20 30 40 50 60 70 80 90 100
Subset 1 = (10, 20, 50, 90, 100)
Subset 2 = (30, 40, 60, 70, 80)

$ ./ch-2.pl 10 -15 20 30 -25 0 5 40 -5
Subset 1 = (10, -15, 30, 5)
Subset 2 = (20, -25, 0, 40, -5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-124-2gi7</id>
    <published>2021-08-03T08:00:53Z</published>
    <updated>2021-08-03T08:00:53Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Why am I giving up on Perl?</title>
    <link rel="alternate" href="https://dev.to/smonff/why-am-i-giving-up-on-perl-4ni6" type="text/html"/>
    <content type="html">&lt;p&gt;I started using Perl in 2010. After years of a passionate use, I start to plan something else. Disclaimer: this is not because of &lt;em&gt;"the language"&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-is-a-real-career-issue"&gt;
  &lt;/a&gt;
  It is a real career issue
&lt;/h1&gt;

&lt;p&gt;In my country of living, getting a Perl job is a real problem. I worked the last four years in a small team where all the projects were done using Perl and Mojolicious. As far as I know, even if I got fired for economic reasons linked to pandemic situation, all the applications I deployed there are still working well despite they are not maintained anymore (ouch).&lt;/p&gt;

&lt;p&gt;Then, what I saw since March on the jobs market is: there is a niche of companies or organizations that still do an active use of Perl. What I notice is that they are all thinking of switching to other platform (maybe they are right, after all this is something that seem to go on since 15 years), and that there is no way new projects are developed with Perl. What I felt by talking with a CTO is that she hadn't any more trust with Perl: she was not able to recruit people. Therefore, they are hiding the Perl aspect in the jobs offers and then have even more difficulties finding people. Then, when they find some persons, they would even decide that, maybe, they should hire someone more versatile. And that person will be sad, maintaining some Perl, can you imagine this hell?&lt;/p&gt;

&lt;p&gt;I mean, this is a kind of very sad waste.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;help&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I missed two opportunities based on the fact that I was not a polyglot enough. I know Java, JavaScript, Perl, quite enough of various web technologies like HTML and CSS, but still, I don't know something like Go, Python, you know this stuff is real trendy! I don't value the idea of &lt;em&gt;polyglotism&lt;/em&gt; a lot, because I prefer to focus on something, and also, I am not really able to learn a lot of programming languages. I know this is not a very popular opinion, and now I feel like in trouble. So I'll try to improve myself.&lt;/p&gt;

&lt;p&gt;It would still be possible to switch to Raku. This is a fantastic language, and I would really like to involve myself into it, but seriously, I need to pay my bills. I mean, the probability to find a Raku job in my country is... Small?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lack-of-gender-equality-and-diversity-in-the-communities"&gt;
  &lt;/a&gt;
  Lack of gender equality and diversity in the communities
&lt;/h1&gt;

&lt;p&gt;The Perl communities are dominated by mostly men. There are rare persons who advocate for diversity and inclusivity, but honestly, if it exists at some conferences, it is not what is spread by the communities: just check the stats of Perl Weekly contributors or other popular Perl cultural items, this is the same-old men-leaded-content everywhere with very little exceptions.&lt;/p&gt;

&lt;p&gt;If I decide to go away from this community, I will at least contribute to reduce the gender gap. Plus, it will be one grumpy person less.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recent-communities-issues-are-awfully-worrying"&gt;
  &lt;/a&gt;
  Recent communities issues are awfully worrying
&lt;/h1&gt;

&lt;p&gt;Perl has a number of toxic community members, this is not new. They are armful to other, and I got very shocked of some events that happened recently. I'll focus here exclusively on the victims.&lt;/p&gt;

&lt;p&gt;Sawyer X, &lt;em&gt;pumpkin&lt;/em&gt; of Perl since 2016 resigned of their responsibilities after being &lt;a href="https://www.theregister.com/2021/04/13/perl_dev_quits/"&gt;victim of harassment&lt;/a&gt;. It is unacceptable that a person enduring such responsibilities are bullied by communities members.  &lt;/p&gt;

&lt;p&gt;Wendy totally vanished of the Perl communities after years of active quality work for the advocacy of Perl. I am totally sure I would have never been interested in Perl that much without Wendy. She encouraged me, her talks and the way she was engaged marked me forever. She gave me a &lt;em&gt;Learning Perl&lt;/em&gt; book copy, and sent me to Curtis Ovid Poe to ask for a signature. Meeting her was a major event in my Perl career, and I made a very good use of this gift. From what I understood, it was partly the Raku renaming that took her away, but I suppose it is more the talks and difficult interactions that happened at this time. I don't know where you are now, Wendy, and how you are doing, but I wanted to thank you.&lt;/p&gt;

&lt;p&gt;The Mojolicious community recently denounced a racist issue in a CPAN distribution to TPF, and after it didn't get answered accurately, pointed a conflict of interest inside TPF itself. Result: nothing. &lt;/p&gt;

&lt;p&gt;All those, and the lack of reactions from the communities members, continuing to do their release and challenges and blog posts as if everything was going fine, all of this made me sick. And you know what? I don't even want to participate in this a lot, even if I will always love the language in itself and have a good memory of my time around Perl, and it's communities. I guess I have been marked by a very small amount of personalities, that inspired me a lot of love and motivation, but what I am seeing right now, this is not where I want to be. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modern-perl-perl7-corina"&gt;
  &lt;/a&gt;
  Modern Perl, Perl7, Corina
&lt;/h1&gt;

&lt;p&gt;All this is very exciting, seriously, I mean it. When the Perl7 announcement came, I felt really, something will be going to happen. Then I saw all the discourse and the doubt it created, and I got afraid.&lt;/p&gt;

&lt;p&gt;In 2021, I feel like that there are a lot of codebases that still didn't incorporate the Modern Perl ideas. It's rare to see usages of subroutines signatures, even if the feature is (experimentally) around since 2015.&lt;/p&gt;

&lt;p&gt;Corina, and its possible implementation, &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt; looks to progress real well, and I am almost sure it will be usable soon.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;But still, I am not patient enough, and I need to get a job: unfortunately, it looks like managers and CTOs lost the confidence in Perl, and that Perl codebases should be only fixed: new code should be written in other languages. Again, this is only what I saw in France, maybe it is different in other countries, and this is not what I wish, since I have been a Perl enthusiast since 2010, and wrote new web applications 100% with Perl in the 4 last years. I wish I could find more context for this incomprehensible Perl love, but for the above reasons, I'll have to go search somewhere else. It must be &lt;a href="https://dev.to/smonff/i-started-studying-python3-2pga"&gt;a good decision&lt;/a&gt;, I guess...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;antigravity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: I received lots of support and advices after posting this. I am grateful to the people who helped me.&lt;/p&gt;

</content>
    <author>
      <name>🌌 Sébastien Feugère ☔</name>
    </author>
    <id>https://dev.to/smonff/why-am-i-giving-up-on-perl-4ni6</id>
    <published>2021-08-02T20:46:42Z</published>
    <updated>2021-08-02T20:46:42Z</updated>
    <category term="perl"/>
    <category term="community"/>
    <category term="toxicity"/>
    <category term="career"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 123: Ugly Numbers and Square Points</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/07/perl-weekly-challenge-123-ugly-numbers-and-square-points.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10329</id>
    <published>2021-08-01T03:31:57Z</published>
    <updated>2021-08-02T14:29:03Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 123 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-123/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due on August 1, 2021 at 24:00. This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Ugly Numbers</h2>

<p><em>You are given an integer <code>$n</code> >= 1.</em></p>

<p><em>Write a script to find the $nth element of Ugly Numbers.</em></p>

<pre><code>Ugly numbers are those number whose prime factors are 2, 3 or 5. For example, the first 10 Ugly Numbers are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12.
</code></pre>

<p><em>Example</em></p>

<pre><code>Input: $n = 7
Output: 8

Input: $n = 10
Output: 12
</code></pre>

<h3>Ugly Numbers in Raku</h3>

<p>The <code>is-ugly</code> subroutine finds whether its input value is ugly by dividing it by 2, 3 and 5 as long as it can do it evenly. At the end, the number is ugly if the end result is 1.</p>

<p>The program then simply builds an infinite lazy list of ugly numbers. The n<em>th</em> ` ugly number is just the n<em>th</em> number of that list.</p>

<pre><code>use v6;

sub is-ugly (UInt $in is copy where * &gt; 0) {
    for 2, 3, 5 -&gt; $div {
        $in div= $div while $in %% $div;
    }
    return $in == 1;
}
my $ugly-nrs = grep {is-ugly $_}, (1...Inf);
my $n = @*ARGS[0] // 7;
say $ugly-nrs[$n-1];
</code></pre>

<p>Some sample executions:</p>

<pre><code>$ raku ./ugly-nrs.raku
8
-
$ raku ./ugly-nrs.raku 10
12
-
$ raku ./ugly-nrs.raku 100
1536
</code></pre>

<h3>Ugly Numbers in Perl</h3>

<p>The <code>is-ugly</code> subroutine is essentially similar to its counterpart in Raku: it finds whether its input value is ugly by dividing it by 2, 3 and 5 as long as it can do it evenly. At the end, the number is ugly if the end result is 1.</p>

<p>The rest or the program is quite different because there is no lazy list in Perl. So we basically use an infinite loop and test the successive integers for ugliness. The program counts the ugly numbers, and it prints out the number and exits the loop when the target range is reached.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_ugly {
    my $in = shift;
    for my $div (2, 3, 5) {
        $in /= $div while $in % $div == 0;
    }
    return $in == 1;
}

my $n = shift // 7;
my $i = 0;
my $count = 0;
while (1) {
    $count ++;
    $i++ if is_ugly $count;
    say $count and last if $i == $n
}
</code></pre>

<p>Some sample executions:</p>

<pre><code>$ perl ./ugly-nrs.pl
8

$ perl ./ugly-nrs.pl 10
12

$ perl ./ugly-nrs.pl 100
1536
</code></pre>

<h2>Ugly Numbers in Scala</h2>

<p>In Scala, we also use a <code>while</code> loop.</p>

<pre><code>object root extends App {
  def isUgly(in: Int): Boolean = {
    var cpy = in
    val div = List(2, 3, 5);
    for (i &lt;- div) {
      while (cpy % i == 0) {
        cpy = cpy / i
      }
    }
    if (cpy == 1) { return true }
    return false
  }
  val n = 7
  var j = 0
  var k = 0
  while (k &lt;= n) {
    j = j + 1
    if (isUgly(j)) {
      k = k + 1
      // println(k)
      if (k == n) { println(k) }
    }
  }
}
</code></pre>

<p>With the hard-coded input value of 7, the program duly prints 8, the 7th ugly number.</p>

<h2>Ugly Numbers in Python</h2>

<pre><code>import sys
def isUgly(n):
    for div in [2, 3, 5]:
        while (n % div == 0):
            n = n / div;
    if n == 1: 
        return True
    return False;

count = 0
i = 0
target = int(sys.argv[1])
while count &lt;= target:
    i += 1;
    if isUgly(i):
        count += 1;
    if count == target:
        print(i)
        break
</code></pre>

<p>Sample output:</p>

<pre><code>$ python3 ugly-nums.py 7
8

$ python3 ugly-nums.py 10
12

$ python3 ugly-nums.py 100
1536
</code></pre>

<h2>Task 2: Square Points</h2>

<p><em>You are given coordinates of four points i.e. (x1, y1), (x2, y2), (x3, y3) and (x4, y4).</em></p>

<p><em>Write a script to find out if the given four points form a square.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: x1 = 10, y1 = 20
       x2 = 20, y2 = 20
       x3 = 20, y3 = 10
       x4 = 10, y4 = 10
Output: 1 as the given coordinates form a square.

Input: x1 = 12, y1 = 24
       x2 = 16, y2 = 10
       x3 = 20, y3 = 12
       x4 = 18, y4 = 16
Output: 0 as the given coordinates doesn't form a square.
</code></pre>

<p>How do we determine whether four points form a square? There is undoubtedly a number of ways to do that, but it seems to me that the easiest is to check whether the four edges of the quadrilateral are equal. The problem, though, is that we can compute 6 distances between four points, 4 or which are the edges, and two the diagonals. But we don&#8217;t know in advance which distance will be the edges and which will be the diagonals. So, essentially, for the six possible distances in a square, we expect four to be equal (the edges) and 2 others with a distance equal to the edge length multiplied by the square root of 2.</p>

<p>This is what we find with the distances computed in the first test case provided with the task:</p>

<pre><code>([x =&gt; 10 y =&gt; 20] [x =&gt; 20 y =&gt; 20]) 10
([x =&gt; 10 y =&gt; 20] [x =&gt; 20 y =&gt; 10]) 14.142135623730951
([x =&gt; 10 y =&gt; 20] [x =&gt; 10 y =&gt; 10]) 10
([x =&gt; 20 y =&gt; 20] [x =&gt; 20 y =&gt; 10]) 10
([x =&gt; 20 y =&gt; 20] [x =&gt; 10 y =&gt; 10]) 14.142135623730951
([x =&gt; 20 y =&gt; 10] [x =&gt; 10 y =&gt; 10]) 10
</code></pre>

<p>It seems likely that having two values for the six distances might be sufficient. But I would rather test that one of the distance values appears four times.</p>

<h3>Square Points in Raku</h3>

<p>People who know me know that I am not really a great fan of object-oriented programming, but, in this case, I found that implementing a very simple <code>Point</code> class made some sense. The <code>dist</code> subroutine takes two <code>Point</code> objects as input parameters. Otherwise, the <code>build4point</code> subroutine creates four points from a list of numeric parameters.</p>

<p>The program computes the six possible distances between the four points, and confirm that the four points form a square if there are four distances that are equal. Note that, for &#8220;oblique&#8221; squares, it might be necessary to round the distances before comparing them, but that might lead to false squares. So there is a trade-off, and I&#8217;m not sure how to handle it. The program below doesn&#8217;t try to handle such specific cases.</p>

<pre><code>use v6;

class Point {
    has $.x;    # abscissa
    has $.y;    # ordinate

    method gist { return "[x =&gt; $!x y =&gt; $!y]"}
}

sub dist (Point $a, Point $b) {
    return sqrt( ($b.x - $a.x)² + ($b.y - $a.y)² );
}

sub build4points (@in) {
    my @points;
    for @in -&gt; $x, $y {
        push @points, Point.new(x =&gt; $x, y =&gt; $y)
    }
    return @points;
}

my @tests = &lt;10 20 20 20 20 10 10 10&gt;, 
            &lt;12 24 16 10 20 12 18 18&gt;;
for @tests -&gt; @test {
    my @p = build4points @test;
    my %dist;
    for (@p).combinations: 2 -&gt; $c {
        %dist{dist($c[0], $c[1])}++;
    }
    # say %dist;
    print @test, " =&gt; ";
    if any(values %dist) == 4 {say 1;} else {say 0}
}
</code></pre>

<p>This program displays the follwing output:</p>

<pre><code>$ raku .:square-points.raku
10 20 20 20 20 10 10 10 =&gt; 1
12 24 16 10 20 12 18 18 =&gt; 0
</code></pre>

<h3>Square Points in Perl</h3>

<p>We are not using OO-programming in Perl, but the algorithm is essentially the same.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;

sub dist {
    my ($p1, $p2) = @_;
    sqrt(($p2-&gt;{x} - $p1-&gt;{x}) ** 2 + ($p2-&gt;{y} - $p1-&gt;{y}) ** 2);
}

sub build4points {
    my @i = @_;
    my @p;
    for (1..4) {
        push @p, { x =&gt; shift, y =&gt; shift };
    }
    return @p;
}
my @tests = ( [ qw/10 20 20 20 20 10 10 10/ ],
              [ qw/12 24 16 10 20 12 18 18/ ] );
for my $test (@tests) {
    my @points = build4points(@$test);
    my %dist;
    for my $p ( [0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3] ) {
        my $distance =  dist($points[$p-&gt;[0]], $points[$p-&gt;[1]]);
        $dist{$distance}++
    }
    # say Dumper \%dist;
    print "@$test =&gt; ";
    if ( grep { $_ == 4 } values %dist) {
        say 1;
    } else {
        say 0;
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./square-points.pl
10 20 20 20 20 10 10 10 =&gt; 1
12 24 16 10 20 12 18 18 =&gt; 0
</code></pre>

<p>## Wrapping up</p>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on August 8, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#523 - How to improve your Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/523.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>There were not many posts this week, but some of them were really interesting.</p>
<p>Personally I got a bit overwhelmed with work. It is very interesting that there are organizations where people don't know how to use git properly, where they hardly have any tests and no CI is running, but they already have Kubernetes set up because some consultant thought that would be cool to use it.</p>
<p>On one hand it makes me angry that people don't introduce testing, CI, and CD early in the development process. It would be a lot cheaper, smoother and faster for them, but on the other hand I also like trying to figure out how things happen to work. Sometimes, it seems, by total chance.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/523.html</id>
    <published>2021-08-02T10:00:00Z</published>
    <updated>2021-08-02T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>TWC: Punting to MJD and Showing Q&amp;D Geometry</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jared_martin/2021/08/twc-punting-to-mjd-and-showing-qd-geometry.html"/>
    <id>tag:blogs.perl.org,2021:/users/jared_martin//3494.10331</id>
    <published>2021-08-02T02:31:04Z</published>
    <updated>2021-08-02T04:19:55Z</updated>
    <author>
        <name>Jared Martin</name>
        
    </author>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jared_martin/">
        <![CDATA[<h1>JIT blogging</h1>

<p>I'm always doing other things and then Sunday comes and I start thinking, "How much time do I have before it's midnight in London?"</p>

<p>When "The Perl Challenge" first started, I was happy to just ponder the problems. Then came the pandemic and I thought that I would use some of my then copious free time to contribute. Then time got not-so-copious. And more people started contributing to TWC, some people much more talented than me, it turns out.</p>

<p>So I'll take a stab at things when I can and I'll still try to write a stand-alone script the way (I wish) I would at work, but my threatened laxness in writing things up will be more of a promise: Light banter to cast a veneer of confidence on the correctness of my results, anything else is extra.</p>

<h2 id="task-1"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/#TASK1">TWC Task #1, Ugly Numbers</a></h2>

<h3>Higher Order Perl, Chapter 6, "Infinite Streams," Section 6.4, "The Hamming Problem"</h3>

<p>The "Ugly Numbers" problem is "The Hamming Problem" in <a href="https://hop.perl.plover.com/">Higher Order Perl (HOP)</a> and I can't improve upon Dominus's solution.  and its exposition on <a href="http://hop.perl.plover.com/book/pdf/06InfiniteStreams.pdf"><i>The Hamming Problem</i></a> (start at page 269).</p>

<p>How's that for being lazy? ;-)</p>

<h2 id="task-2"><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/#TASK2">TWC Task #2, Square Points</a></h2>

<h3><a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-123/jaredor/perl/ch-2.pl">jaredor submission for Task #2</a></h3>

<p>I've been on a geometry kick recently, so am just going to free-form the approach to the answer. This is also the first time I've written up a review prior to writing the code. But I see the way forward:</p>

<h4>From the four given points:</h4>
<ul>
<li>Create six line segments, then</li>
<li>Sort the line segments by length, then</li>
<li>If the first and the fourth line segments are of equal length, and</li>
<li>If the fifth and sixth line segments are of equal length, then</li>
<li><b>You have a square!</b></li>
</ul>

<p>Oh, and one thing to do, whenever you compare floating point numbers, you need to decide what your <i>tolerance for equality</i> is. Me? I think it's 0.0001 today.</p>

<p>Okay, it's time to go write the sucker. It's just after 11pm in London, so better get cracking.</p>

<h2>Submitted ten minutes past midnight in London Town! I'm not as quick as I thought I'd be :-(</h2>

<p>Mohammad works hard and deserves his sleep, so I like to think that he is shutting down the old laptop at 12:00:01 am, or (00:00:01 for you 24-hour clockers). I'll just sit in the back of the auditorium like all the rest who shuffle in late....</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Ugly Numbers / Square Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/01#pwc123" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt;= 1. Write a script to find the $nth Ugly Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub is_ugly{
    my($x) = @_; 
    for my $factor (prime_factor($x)){
        return false if $factor != 2 &amp;&amp; $factor != 3 &amp;&amp; $factor !=5; 
    }
    return true; 
}

sub nth_ugly{
    my($n) = @_;  
    return 1 if $n == 1; 
    my $ugly_count = 1; 
    my $i = 1;  
    do{
        $i++;
        $ugly_count++ if is_ugly($i);   
    }while($ugly_count != $n);
    return $i;    
} 

MAIN:{
    my($N);
    $N = 7; 
    print nth_ugly($N) . "\n"; 
    $N = 10; 
    print nth_ugly($N) . "\n"; 
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I also worked this problem in Prolog and C++ and, unsurprisingly, the Perl code is the 
shortest. All three solutions followed the same approach but Perl's syntax is naturally 
less verbose without making comprehension of the code more difficult.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given co-ordinates for four points. Write a script to find out if the given 
four points form a square.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;  
use Math::GSL::Vector;

sub unique{
    my %seen;
    return grep {!$seen{$_}++} @_;
} 

sub is_square{
    my @points = @_;
    ##
    # Definitely a square if there are only 2 x and 2 y values. 
    ##
    my @x = unique(map {$_-&gt;[0]} @points);  
    my @y = unique(map {$_-&gt;[1]} @points);  
    return true if @x == 2 &amp;&amp; @y == 2;
    ##
    # sort the points and compute side lengths  
    ##  
    my @sorted_x = sort {$a-&gt;[0] &lt;=&gt; $b-&gt;[0]} @points;  
    my @sorted_y = sort {$a-&gt;[1] &lt;=&gt; $b-&gt;[1]} @points;  
    my($s, $t, $u, $v) = ($sorted_y[@sorted_y - 1], $sorted_x[@sorted_x - 1], $sorted_y[0], $sorted_x[0]);    
    return false if $s-&gt;[0] + $u-&gt;[0] != $t-&gt;[0] + $v-&gt;[0];  
    return false if $s-&gt;[1] + $u-&gt;[1] != $t-&gt;[1] + $v-&gt;[1];  
    return false if $s-&gt;[1] - $u-&gt;[1] != $t-&gt;[0] - $v-&gt;[0];  
    ##
    # compute angles 
    ##
    my $dv_st = new Math::GSL::Vector([$s-&gt;[0] - $t-&gt;[0], $s-&gt;[1] - $t-&gt;[1]]); 
    my $dv_tu = new Math::GSL::Vector([$t-&gt;[0] - $u-&gt;[0], $t-&gt;[1] - $u-&gt;[1]]); 
    my $dv_uv = new Math::GSL::Vector([$u-&gt;[0] - $v-&gt;[0], $u-&gt;[1] - $v-&gt;[1]]); 
    my $dv_vs = new Math::GSL::Vector([$v-&gt;[0] - $s-&gt;[0], $v-&gt;[1] - $s-&gt;[1]]); 
    return false if $dv_st * $dv_tu != 0;
    return false if $dv_tu * $dv_uv != 0;
    return false if $dv_uv * $dv_vs != 0;
    return true;  
}



MAIN:{
    my @points;
    @points = ([10, 20], [20, 20], [20, 10], [10, 10]);  
    print is_square(@points) . "\n";  
    @points = ([12, 24], [16, 10], [20, 12], [18, 16]);  
    print is_square(@points) . "\n";  
    @points = ([-3, 1], [4, 2], [9, -3], [2, -4]);  
    print is_square(@points) . "\n";  
    @points = ([0, 0], [2, 1], [3, -1], [1, -2]);  
    print is_square(@points) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The logic of determining if the points determine a square is clear to most people familiar
with geometry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are there only two each of X and Y co-ordinates? Then that is enough to establish that
we have a square.
&lt;/li&gt;
&lt;li&gt;Otherwise, make sure the side lengths are all equivalent and that the angles between the
sides are all 90 degrees.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code in &lt;code&gt;is_square()&lt;/code&gt; works through that logic with multiple exit points set up along 
the way. Perhaps this is a bit odd looking but I have been doing a lot of logic 
programming in Prolog recently and thought to give a somewhat more logical style to this
perl solution to this problem. Developing a more logical style for Perl is a bit of a work
in progress for me, I will admit!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;unique&lt;/code&gt; function (and it's clever use of &lt;code&gt;grep&lt;/code&gt;!) was taken from a 
&lt;a href="https://perlmaven.com/unique-values-in-an-array-in-perl"&gt;PerlMaven article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/"&gt;Challenge 123&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24078.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24559.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Rhombus.html"&gt;Rhombus&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc123</id>
    <published>2021-08-01T17:00:00-04:00</published>
    <updated>2021-08-01T17:00:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2873449783852866229</id>
    <published>2021-08-01T09:11:00.000+02:00</published>
    <updated>2021-08-01T09:11:36.496+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Archive-Tar-2.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Archive::Tar&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manipulates TAR archives &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.40&lt;/strong&gt; on 2021-07-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.38 was 1 year, 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.025&lt;/strong&gt; on 2021-07-30&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.024 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.55&lt;/strong&gt; on 2021-07-29&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 1.53 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.76' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.76&lt;/strong&gt; on 2021-07-27&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.75 was 6 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2021-07-29&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SSIMMS/PDF-API2-2.041' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Facilitates the creation and modification of PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.041&lt;/strong&gt; on 2021-07-28&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.040 was 3 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.054' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.054&lt;/strong&gt; on 2021-07-26&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.019 was 3 years, 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302186' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302186&lt;/strong&gt; on 2021-07-26&lt;/li&gt;  &lt;li&gt;Votes: 170&lt;/li&gt;  &lt;li&gt;Previous version: 1.302185 was 2 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000141' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000141&lt;/strong&gt; on 2021-07-26&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.000140 was 2 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012004&lt;/strong&gt; on 2021-07-31&lt;/li&gt;  &lt;li&gt;Votes: 127&lt;/li&gt;  &lt;li&gt;Previous version: 1.012003 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2873449783852866229/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclii-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2873449783852866229"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2873449783852866229"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclii-10-great-cpan-modules-released.html" title="(ccclii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7029599714201969129</id>
    <published>2021-08-01T08:49:00.001+02:00</published>
    <updated>2021-08-01T08:49:21.221+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxviii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/01 06:48:13 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Backup::Duplicity::YADW" target="_blank"&gt;Backup::Duplicity::YADW&lt;/a&gt; - Yet Another Duplicity Wrapper&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Backup::EZ" target="_blank"&gt;Backup::EZ&lt;/a&gt; - Simple backups based on rsync.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Application::Plugin::TT::Any" target="_blank"&gt;CGI::Application::Plugin::TT::Any&lt;/a&gt; - load CGI::Application::Plugin::TT with any TT-compatible class&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Template::Alloy" target="_blank"&gt;Dancer2::Template::Alloy&lt;/a&gt; - Template::Alloy engine for Dancer2&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Docker::CLI::Wrapper" target="_blank"&gt;Docker::CLI::Wrapper&lt;/a&gt; - a wrapper for the CLI of docker and compatible tools.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Collector" target="_blank"&gt;File::Collector&lt;/a&gt; - Base class for custom File::Collector classes for classifying files and calling File::Collector::Processor methods for processing files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lang::Go::Mod" target="_blank"&gt;Lang::Go::Mod&lt;/a&gt; - parse and model go.mod files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::AutoFilter" target="_blank"&gt;Template::AutoFilter&lt;/a&gt; - Template::Toolkit with automatic filtering&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Stash::AutoEscaping" target="_blank"&gt;Template::Stash::AutoEscaping&lt;/a&gt; - escape automatically in Template-Toolkit.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::PO" target="_blank"&gt;Text::PO&lt;/a&gt; - Read and write PO files&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::UpdateCPANfile" target="_blank"&gt;App::UpdateCPANfile&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Rmap" target="_blank"&gt;Data::Rmap&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Traverse" target="_blank"&gt;Data::Traverse&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Walk" target="_blank"&gt;Data::Walk&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Handler" target="_blank"&gt;DBIx::Handler&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME" target="_blank"&gt;Email::MIME&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Stuffer" target="_blank"&gt;Email::Stuffer&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter" target="_blank"&gt;Exporter&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::CBuilder" target="_blank"&gt;ExtUtils::CBuilder&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LinkEmbedder" target="_blank"&gt;LinkEmbedder&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mock::MonkeyPatch" target="_blank"&gt;Mock::MonkeyPatch&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=457)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Async::HTTP::Server" target="_blank"&gt;Net::Async::HTTP::Server&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Format" target="_blank"&gt;Number::Format&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::CSV" target="_blank"&gt;Parse::CSV&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=165)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=380)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlX::Maybe" target="_blank"&gt;PerlX::Maybe&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Markdown" target="_blank"&gt;Pod::Markdown&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::ES6" target="_blank"&gt;Promise::ES6&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promises" target="_blank"&gt;Promises&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Starman" target="_blank"&gt;Starman&lt;/a&gt; (+1=109)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Identify" target="_blank"&gt;Sub::Identify&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Construct" target="_blank"&gt;Syntax::Construct&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Alloy" target="_blank"&gt;Template::Alloy&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Tiny" target="_blank"&gt;Template::Tiny&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=133)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockObject" target="_blank"&gt;Test::MockObject&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Xslate" target="_blank"&gt;Text::Xslate&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/true" target="_blank"&gt;true&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7029599714201969129/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7029599714201969129"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7029599714201969129"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxviii-metacpan-weekly-report.html" title="(cdlxxviii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PERLANCAR-Dummy-POD">Acme-PERLANCAR-Dummy-POD</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Dummy distribution for various POD testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ClipboardUtils">App-ClipboardUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities related to clipboard</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DiffPDFText">App-DiffPDFText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Diff the text of two PDF documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Easer">App-Easer</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Simplify writing (hierarchical) CLI applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleFeaturesUtils">App-ModuleFeaturesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>CLI Utilities related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Phoebe">App-Phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>4.01</td>
<td>4.01</td>
<td>a Gemini-based wiki</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-arxiv2bib">App-arxiv2bib</a></td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>0.1</td>
<td>0.2</td>
<td>Extract bibliographic data from the arXiv API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-efm_perl">App-efm_perl</a></td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>0.01</td>
<td>1.0.0</td>
<td>It's new $module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-grep-url">App-grep-url</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Print lines having URL(s) (optionally of certain criteria) in them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-quickabspath">App-quickabspath</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Print the absolute path</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-intrange">App-seq-intrange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Like seq, but accepts intrange specification (e.g. 1,5-10,15)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-numseq">App-seq-numseq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like seq, but accepts numseq specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-List-Utils-MoveElement">Bencher-Scenarios-List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Scenarios to benchmark List::Utils::MoveElement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Book-Collate">Book-Collate</a></td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Tools to Collate and Report Text Documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-Session-Store-Redis-Fast">Catalyst-Plugin-Session-Store-Redis-Fast</a></td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1.000</td>
<td>1.001</td>
<td>lib/Catalyst/Plugin/Session/Store/Redis/Fast.pm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clipboard-Any">Clipboard-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Common interface to clipboard manager functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Messages">Cucumber-Messages</a></td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>17.0.0</td>
<td>17.0.0</td>
<td>A library for (de)serializing Cucumber protocol messages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-ManipX-Almanac">Date-ManipX-Almanac</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.000_901</td>
<td>0.001_01</td>
<td>Add almanac date/time functionality (sunrise, etc.) to Date::Manip</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-Format-JP">DateTime-Format-JP</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Japanese DateTime Parser and Formatter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Desktop-Open">Desktop-Open</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Open a file or URL in the user's preferred application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Prereqs-From-cpmfile">Dist-Zilla-Plugin-Prereqs-From-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Register prereqs from cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-EA">Evo-EA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Perl extension for evolutionary algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-GA">Evo-GA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.13</td>
<td>Perl extension for genetic algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Immune">Evo-Immune</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for GA for the biological immune system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Inference">Evo-Inference</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for an Inference engine for Evolutionary Algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-MoreUtils">File-Temp-MoreUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Provide more routines related to creating temporary files/dirs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Timer">Future-Timer</a></td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>timer implemented as Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-EX-Hashed">Getopt-EX-Hashed</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9905</td>
<td>Hash store object automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphite-Simple">Graphite-Simple</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IntRange-Iter">IntRange-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Generate a coderef iterator from an int range specification (e.g. '1,5-10,20')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSONSchema-Validator">JSONSchema-Validator</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Validator for JSON Schema Draft4 and OpenAPI Specification 3.0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-Go-Mod">Lang-Go-Mod</a></td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>parse and model go.mod files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Utils-MoveElement">List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Move elements of a list, optionally with XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Cryptarithm">Math-Cryptarithm</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.02</td>
<td>0.02</td>
<td>Solving simple cryptarithm.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-FeaturesUtil-Get">Module-FeaturesUtil-Get</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Get a feature</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-cpmfile">Module-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Parse cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Leds">Mojo-Leds</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>1.02</td>
<td>Leds aka Light Environment (emi) for Development System based on Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-MongoDBv2">Mojolicious-Plugin-MongoDBv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Mongodbv2">Mojolicious-Plugin-Mongodbv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.02</td>
<td>1.00</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Restify-OtherActions">Mojolicious-Plugin-Restify-OtherActions</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Mojolicious plug-in which extends Restify with more actions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Route">Mojolicious-Plugin-Route</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plugin to loader files of routes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-MouseTypeConstraints">MooX-MouseTypeConstraints</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Mouse type constraints for Moo</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Guidonian">Music-Guidonian</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a "Guidonian Hand" melodic phrase generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Magallanes">Net-Magallanes</a></td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>encapsulation of API calls to RIPE Atlas project.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NumSeq-Iter">NumSeq-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Generate a coderef iterator from a number sequence specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Final">Object-Pad-SlotAttr-Final</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare Object::Pad slots readonly after construction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Trigger">Object-Pad-SlotAttr-Trigger</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>invoke an instance method after a :writer accessor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Ozeki-Libs-Rest">Ozeki-Libs-Rest</a></td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>You can use this module to send SMS messages with the Ozeki SMS Gateway using Perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-Args-Common">Perinci-Sub-Args-Common</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A collection of common subroutine argument specifications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-PrereqScanner-Scanner-TestNeeds">Perl-PrereqScanner-Scanner-TestNeeds</a></td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>0.001</td>
<td>0.001</td>
<td>scan for modules loaded with Test::Needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/QRCode-Base45">QRCode-Base45</a></td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Base45 encoding used in QR codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-DefHash">Regexp-Pattern-DefHash</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to DefHash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-IntRange">Regexp-Pattern-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-URI">Regexp-Pattern-URI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to URI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SDL2-FFI">SDL2-FFI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.05</td>
<td>FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Manual">Sah-Manual</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Documentation for Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Bencher">Sah-Schemas-Bencher</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>1.054.0</td>
<td>1.054.1</td>
<td>Sah schemas for Bencher</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-CPANModules">Sah-Schemas-CPANModules</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Sah schemas for Acme::CPANModules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-IntRange">Sah-Schemas-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Sah schemas for various integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-ModuleFeatures">Sah-Schemas-ModuleFeatures</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-NumSeq">Sah-Schemas-NumSeq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas for number sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Deprecate">Sub-Deprecate</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Assists in providing deprecation notices to subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TCOD">TCOD</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.009</td>
<td>FFI bindings for libtcod</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Fixture-Teng">Test-Fixture-Teng</a></td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>load fixture data to storage for Teng</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mojo-Role-Routes">Test-Mojo-Role-Routes</a></td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Write Mojo tests using named routes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-PO">Text-PO</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Read and write PO files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-QuacksLike">Types-QuacksLike</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001001</td>
<td>Check for object providing all methods from a class or role</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-EN-StopWords">WordList-EN-StopWords</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>English stop words</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>34</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-PERLANCAR-Dummy-POD PERLANCAR 0.001 0.005 Dummy distribution for various POD testing App-ClipboardUtils PERLANCAR 0.001 0.001 CLI utilities related to clipboard App-DiffPDFText PERLANCAR 0.001 0.002 Diff the text of two PDF documents App-Easer POLETTIX 0.001 0.002 Simplify writing (hierarchical) CLI applications App-ModuleFeaturesUtils PERLANCAR 0.001 0.003 CLI Utilities related to Module::Features App-Phoebe SCHROEDER … <a href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1949</id>
    <published>2021-08-01T00:01:20Z</published>
    <updated>2021-08-01T00:01:20Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>How deep is a recursion in Perl?</title>
  <summary type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></summary>
  <updated>2021-07-31T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/how-deep-is-the-recursion"/>  <id>https://perlmaven.com/how-deep-is-the-recursion</id>
  <content type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>perlbrew improved</title>
    <link rel="alternate" href="https://dev.to/drhyde/perlbrew-improved-23k9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I like to keep all my builds of perl under the control of <code>perlbrew</code>, so I can easily switch between them. I occasionally need to build a version of perl that hasn't been released yet, and maybe hasn't even been merged into <code>blead</code> (which is what the perl5 project calls the <code>master</code> branch). That's fine, perlbrew can just build from a git checkout. However, you need to give it some extra arguments to avoid confusion (you generally don't want it to build something called 'perl-5.35.3' when that's just the latest version to have been released in the repo, but not what you're actually building) and to help you remember which build is which. So, as is traditional for a Unixy gentleman with a problem to solve, I wrote a small shell script.</p>

<p>Source <a href="https://github.com/DrHyde/configurations/blob/master/bash/dot-bash_functions.d/perlbrew-git-install">this</a> into your shell after loading perlbrew and if you then say <code>perlbrew git-install</code> from the root of a git repository it will build a perl called <code>git-$reponame-$branchname-$commit</code>.</p>

</div>
    </content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/perlbrew-improved-23k9</id>
    <published>2021-07-30T23:03:59Z</published>
    <updated>2021-07-30T23:03:59Z</updated>
    <category term="perl"/>
    <category term="git"/>
    <category term="perlbrew"/>
  </entry>
  <entry>
    <title>#522 - Promote Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/522.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I am sure many of you are aware of &lt;a href="https://www.outreachy.org"&gt;Outreachy&lt;/a&gt;. It all started with GNOME's Women's Summer Outreach Program (WSOP) in 2006. The idea was to encourage women's participation in Open Source projects. In 2009, the GNOME community revived the program to encourage more women to contribute to GNOME and renamed it to GNOME Outreach Program for Women. It became a very popular program in no time and successfully brought in more women into the fold. The program was further expanded with more organisations joining in e.g. Fedora, Mozilla, JBoss, OpenStack, Subversion etc. With the additions, in 2013, the program was renamed to the Free and Open Source Software Outreach Program. At one point, there were 16 organizations involved in this program. In 2015, the program was again renamed to Outreachy.&lt;/p&gt;
&lt;p&gt;Did I mention Perl in the above discussion?&lt;/p&gt;
&lt;p&gt;Well, in 2014, TPF sponsored an internship for Pattawan Kaewduangdee to work on MetaCPAN under the mentorship of Olaf Alders as a part of the Outreach Program for Women. There is another name that caught my eye, Upasana Shukla. I came across &lt;a href="https://upasana.me/2013/05/18/meta-cpan-debian-wikimedia-twisted-dancer-moose/"&gt;a blog post&lt;/a&gt; by Upasana where she mentioned how GNOME's Outreach Program for Women helped her get into the Perl fold. If you look at the &lt;a href="https://www.outreachy.org/alums/2021-05/"&gt;list of interns&lt;/a&gt; from the Indian subcontinent (India, Pakistan, Bangladesh, Nepal, Sri Lanka) it is amazing. In recent years, TPF has sponsored &lt;a href="https://world.openfoodfacts.org"&gt;Open Food Facts&lt;/a&gt; projects for Outreachy. In 2020, Areesha Tariq, from Pakistan successfully got the internship to work on the Open Food Facts project. Please check out this &lt;a href="https://medium.com/@areeshatariq02/get-a-remote-and-paid-internship-my-outreachy-experience-482a6cfc0564"&gt;blog post&lt;/a&gt; by Areesha sharing her experience. It didn't stop there, a few weeks ago, TPF announced another intern, Rosheen Naeem, again from Pakistan, to work on the Open Food Facts project. You should check out her recent &lt;a href="https://roshnaeem.medium.com/everybody-struggles-f6dbe33293b4"&gt;blog post&lt;/a&gt; about her journey. It is very inspiring.&lt;/p&gt;
&lt;p&gt;I would like to thank TPF for supporting the Perl projects and Outreachy.&lt;/p&gt;
&lt;p&gt;I can tell you from my own experience, we have great talent in the Indian Subcontinent. I wish more and more organisations would come forward and sponsor interns from these regions. When I started &lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge - Perl &amp; Raku&lt;/a&gt;, (a.k.a Perl Weekly Challenge), I was hoping to tap into the talent pool from this region, specially young college students. As the tagline says "You do not have to be an expert" to take part in the weekly challenge. Although we do have handful of students from Russia in the team. I am glad that, at least, we have built a platform where geeks from around the world come and share their experiences every week. Maybe one day we will have sponsors to help us reach out to young talent and bring new energy into the Perl community. Sometimes I wonder why we have never had a Perl Conference on the Indian subcontinent just like we have here in Europe and America. It shouldn't be too hard to hold one as these days everything is online. We could invite guest speakers from across the globe to address the talent in the region. Is there anyone out there willing to help us orgranise Perl Conference?&lt;/p&gt;
&lt;p&gt;A humble request to all fellow citizens of the United Kingdom, please don't listen to Boris Johnson (Prime Minister of the UK) and keep wearing masks in public and maintain social distancing.&lt;/p&gt;
&lt;p&gt;Enjoy rest of the newsletter until then.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/522.html</id>
    <published>2021-07-26T10:00:00Z</published>
    <updated>2021-07-26T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Average of Stream / Basketball Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/25#pwc122" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a stream of numbers, @N. Write a script to print the average of the stream 
at every point.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub moving_average{
    my $n = 0;
    my $sum = 0;
    {
        $n += 1;
        $sum += shift;
        print $sum / $n;
        print ", " if @_;
        redo if @_;
    }
    print "\n";
}


MAIN:{
    my @N;
    for(my $i = 10; $i &lt; 1_000_000; $i += 10){
        push @N, $i;
    }
    moving_average(@N);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, &lt;OUTPUT TRUNCATED&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Typically when one thinks of a &lt;em&gt;stream&lt;/em&gt; the idea is of a virtually endless source of data.
Or, at least, data which is handled as if this were the case. Here the "stream" is 
simulated by a long (one million items) array.&lt;/p&gt;

&lt;p&gt;The computation of the average as the simulated stream is evaluated is done using a &lt;code&gt;redo&lt;/code&gt;
loop. I would think it is fair to say that typically my code is somewhat verbose. I prefer
to be fairly explicit in that way to enhance readability. Here, however, I try to be more
terse. The "stream" is evaluated by shifting values off the array passed to the function.
The array argument is also used to determine if the block should be repeated, and also
to format the output. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a score $S. You can win basketball points e.g. 1 point, 2 points and 3 
points. Write a script to find out the different ways you can score $S.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub basketball_points{
    my($total) = @_;
    my %points;
    my @valid_points;
    $points{"1"} = "1";
    $points{"2"} = "2";
    $points{"3"} = "3";
    while((keys %points) &gt; 0){
        my %updated_points = ();
        for my $points (keys %points){
            my @points = split(/,/, $points);
            for my $point (1 .. 3){
                my $point_sum = unpack("%32I*", pack("I*",  (@points, $point)));
                push @valid_points, [@points, $point] if $point_sum == $total;
                $updated_points{join(",", (@points, $point))} = $point_sum if $point_sum &lt; $total;
            }
        }
        %points = %updated_points;
    }
    return @valid_points;
}

MAIN:{
    my $S;
    $S = 4;
    print "\$S = $S\n";
    my @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
    $S = 5;
    print "\n\$S = $S\n";
    @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
$S = 4
1 3
2 2
3 1
1 2 1
1 1 2
2 1 1
1 1 1 1

$S = 5
3 2
2 3
3 1 1
2 1 2
1 3 1
2 2 1
1 2 2
1 1 3
1 2 1 1
1 1 1 2
1 1 2 1
2 1 1 1
1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here borrows heavily from the solution to the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117"&gt;triangle problem&lt;/a&gt; from 
Challenge 117. This is a &lt;em&gt;dynamic programming&lt;/em&gt; style solution which builds and updates
lists of potential point sequences. Uniqueness is guaranteed by saving the lists as hash
keys, in a command separated values string format. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-122/"&gt;Challenge 122&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.topcoder.com/thrive/articles/Dynamic%20Programming:%20From%20Novice%20to%20Advanced"&gt;Dynamic Programming&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc122</id>
    <published>2021-07-25T18:53:00-04:00</published>
    <updated>2021-07-25T18:53:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Deep recursion on subroutine</title>
  <summary type="html"><![CDATA[<p>
When calling a function in <a href="/recursion">recursion</a> we have to be careful to check the stop condition before we call the recursion. If not, we can end up with an infinite recursion that will end only when we have exhausted the resources of our computer.
<p>
In order to protect the user from never ending recursions, perl has a hard limit on the number of recursion and if you reach that limit you'll get a warning: <span class="inline_code">Deep recursion on subroutine</span>. The rather arbitrary limit is 100.
<p>
Let's see an example.
<p>
]]></summary>
  <updated>2021-07-23T06:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/deep-recursion-on-subroutine"/>  <id>https://perlmaven.com/deep-recursion-on-subroutine</id>
  <content type="html"><![CDATA[<p>
When calling a function in <a href="/recursion">recursion</a> we have to be careful to check the stop condition before we call the recursion. If not, we can end up with an infinite recursion that will end only when we have exhausted the resources of our computer.
<p>
In order to protect the user from never ending recursions, perl has a hard limit on the number of recursion and if you reach that limit you'll get a warning: <span class="inline_code">Deep recursion on subroutine</span>. The rather arbitrary limit is 100.
<p>
Let's see an example.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#521 - Floods in Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/521.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>This week we saw the tremendous and devastating power of nature in Europe as well. The Guardian even mentioned the <a href="https://www.theguardian.com/world/2021/jul/16/western-germany-floods-angela-merkel-horror-catastrophe-deaths-missing-search-flooding-belgium">Moselle River at Perl in Germany</a>. The place where Liz and Wendy attempted to re-unite the Perl 5 and Perl 6 communities as well. That was not very successful.</p>
<p>I was wondering what can we do?</p>
<p>I know a few members of the Perl community who are also volunteer firefighters. Some of them might have taken part in the rescue efforts maybe even risking their own lives. That a very generous way of helping others and helping the world when disaster strikes.</p>
<p>I know a few other members of the Perl community who make an effort to reduce their own carbon footprint by traveling by bike and train only. That can help postpone the disasters and if enough people do them might even prevent the disasters.</p>
<p>What do you do? What examples could we follow to help when disaster strikes? What could ew do to try to avoid the disasters in the first place? Write about it in a blog post and send the link to me!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/521.html</id>
    <published>2021-07-19T10:00:00Z</published>
    <updated>2021-07-19T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Regexp::Grammars parse text with markup or markdown</title>
  <summary type="html"><![CDATA[<p>
Parsing text with markup (or markdown) is not easy. It took me several days to wrap my head around this, but eventually I think I've figured it out.
<p>
]]></summary>
  <updated>2021-07-19T06:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/regexp-grammars-parse-text-with-markup"/>  <id>https://perlmaven.com/regexp-grammars-parse-text-with-markup</id>
  <content type="html"><![CDATA[<p>
Parsing text with markup (or markdown) is not easy. It took me several days to wrap my head around this, but eventually I think I've figured it out.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>A Genetic Algorithm solution to the Travelling Salesman Problem</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/18#pwc121" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given integers 0 &amp;lt;= $m &amp;lt;= 255 and 1 &amp;lt;= $n &amp;lt;= 8. Write a script to invert $n bit 
from the end of the binary representation of $m and print the decimal representation of 
the new binary number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub flip_bit_n{
    my($x, $n) = @_;
    my $bits = substr(unpack("B32", pack("N", $x)), 24, 8);
    my @bits = split(//, $bits);
    $bits[@bits - $n] ^= 1;
    my $flipped_decimal = unpack("N", pack("B32", substr("0" x 32 . join("", @bits), -32)));
    return $flipped_decimal;
}

MAIN:{
    my($M, $N);
    $M = 12;
    $N = 3;
    print flip_bit_n($M, $N) . "\n";
    $M = 18;
    $N = 4;
    print flip_bit_n($M, $N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8 
26
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code re-uses much of the code from &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/11#pwc120"&gt;last week's challenge solution&lt;/a&gt;.
The only difference is that this week we flip the specified nth bit using the XOR 
operator. I think that this may be the first time I have ever used a &lt;code&gt;^=&lt;/code&gt; operation!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a NxN matrix containing the distances between N cities. Write a script to 
find a round trip of minimum length visiting all N cities exactly once and returning to 
the start.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use AI::Genetic;

use constant N =&gt; 7;

my @matrix= ([0, 5, 2, 7],
             [5, 0, 5, 3],
             [3, 1, 0, 6],
             [4, 5, 4, 0]);

sub fitness{
    my($genes) = @_;
    my $cost = 0;
    return -1 if $genes-&gt;[0] != $genes-&gt;[@{$genes} - 1];
    my @path = sort {$a &lt;=&gt; $b} @{$genes}[0 .. @{$genes} - 2];
    for my $i (0 .. (@path - 2)){
        return -1 if $path[$i] == $path[$i + 1];
    }
    for my $i (0 .. @{$genes} - 2){
        $cost += $matrix[$genes-&gt;[$i]][$genes-&gt;[$i + 1]];
    }
    return 1/$cost;
}

sub terminate{
    return true;
}

MAIN:{
    srand(121);
    my $aig = new AI::Genetic(
        -fitness    =&gt; \&amp;fitness,
        -type       =&gt; "rangevector",
        -population =&gt; 500,
        -crossover  =&gt; 0.9,
        -mutation   =&gt; 0.1,
    );
    my $genes = [];
    for (0 .. N + 1){
        push @{$genes}, [0, N];
    }
    @matrix = ();
    for (0 .. N){
        my $row = [];
        for my $i (0 .. N){
            push @{$row}, int(rand(N * 2 + 1));
        }
        push @matrix, $row;
    }
    $aig-&gt;init(
        $genes
    );
    $aig-&gt;evolve("tournamentUniform", 100000);
    my $path = $aig-&gt;getFittest()-&gt;genes();
    print join(",", @{$path}) . "\n";
    my $cost;
    for my $i (0 .. @{$path} - 2){
        $cost += $matrix[$path-&gt;[$i]][$path-&gt;[$i + 1]];
    }
    print "cost: $cost\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3,0,1,2,3
cost: 10
$ perl perl/ch-2.pl
3,1,7,5,4,6,0,2,3
cost: 24
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have used Genetic Algorithm (GA) approaches to a bunch of these challenge problems in the 
past. I will admit that in some cases the GA approach is more for fun than as a good
example of the sorts of problems GA is good for. This time, however, we have a somewhat
classic use case!&lt;/p&gt;

&lt;p&gt;The Travelling Salesman Problem is well known to be NP-Hard and Genetic Algorithms are a
well studied approach to tackling these beasts.&lt;/p&gt;

&lt;p&gt;I first tested this solution with the example in the original problem statement, hardcoded
here in &lt;code&gt;@matrix&lt;/code&gt; and obtained a result which matched the known correct one. Then, testing
with increasingly larger values of &lt;code&gt;N&lt;/code&gt; to generate random matrices I continued to get 
seemingly correct results. I did not verify these by hand. Instead I set a random seed
with &lt;code&gt;srand&lt;/code&gt; and verified that I got the same cost results over several runs. As needed
I would adjust the number of generations in the &lt;code&gt;evolve()&lt;/code&gt; method call upwards until again
getting results which converged on the same cost value.&lt;/p&gt;

&lt;p&gt;For a 20 x 20 matrix I seem to be getting correct results, but runtimes are quite lengthy 
and I ran out of time to test this further. However, I am very confident that a correct 
path is obtainable this way although perhaps some additional slight adjustment of 
parameters is necessary.&lt;/p&gt;

&lt;p&gt;(Hopefully nobody is too terribly confused by this, but please do notice that the size
of the matrix is actually N + 1. That is, in order to obtain a matrix like the one given
in the problem statement you specify an N of 3, although obviously this is a 4 x 4 matrix.
This is just in keeping with the city labels starting with 0.)&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-121/"&gt;Challenge 121&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc121</id>
    <published>2021-07-18T23:36:00-04:00</published>
    <updated>2021-07-18T23:36:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Ann Barcomb study: Survey launch</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/annbarcombstudylaunch"/>
  <id>tag:news.perlfoundation.org,2021-07-15:/post/annbarcombstudylaunch</id>
  <published>2021-07-15T03:49:18</published>
  <updated>2021-07-15T03:49:18</updated>
  <summary>
  <![CDATA[
     Published on behalf of TPF Board.  of the University of Calgary is conducting research to understand episodic, or occasional, participation in the Perl and Raku communities, in collaboration with The Perl Foundation. The results of the research will be provided as a TPF report and will assist the community in improving practices for managing episodic participation to provide insights into what free libre open source software projects could do 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Published on behalf of TPF Board.</p>

<p>(Dr. Ann Barcomb)[https://barcomb.org] of the University of Calgary is conducting research to understand episodic, or occasional, participation in the Perl and Raku communities, in collaboration with The Perl Foundation. The results of the research will be provided as a TPF report and will assist the community in improving practices for managing episodic participation to provide insights into what free / libre / open source software projects could do to become more sustainable.</p>

<p>If you would like to take part in this study, <a href="https://survey.yeticraft.net/index.php/361854?lang=en">click here to access the survey</a>. Based on pilot testing, this survey is expected to take about 15 minutes to complete (there are 41 questions in this survey). Participation in this study is anonymous. By completing the survey, you are agreeing to have your responses included in the study. </p>

<p>We thank Ann for selecting our communities as the subject of this research. We expect that this work will be beneficial to our communities as well as others. And we thank you in advance for contributing to this research. Your input is much appreciated.</p>

<p>The University of Calgary Conjoint Faculties Research Ethics Board has approved this study (REB20-2135).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>perlbrew</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-07-14-perlbrew" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das System-Perl zu verwenden hat viele Nachteile. Diese können behoben werden, wenn man ein eigenes Perl in seinem Benutzerverzeichnis installiert. Mit dem Werkzeug `perlbrew` kannst du mehrere Perl-Installationen nebeneinander auf einem System konfliktfrei betreiben.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-07-14-perlbrew</id>
    <published>2021-07-14T10:00:00Z</published>
    <updated>2021-07-14T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Grant Proposal: Maintaining Perl 5 Core (Dave Mitchell)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl_5_dave_mitchell"/>
  <id>tag:news.perlfoundation.org,2021-07-13:/post/grant_proposal_maintaining_perl_5_dave_mitchell</id>
  <published>2021-07-13T22:32:43</published>
  <updated>2021-07-13T22:32:43</updated>
  <summary>
  <![CDATA[
     Synopsis This application is to extend into the future the TPF grant funding I have been receiving over the last ten years or so to maintain the Perl core. I'm one of the main maintainers of the Perl core internals, and new funding will help me to continue working on the core. Project Details This project will cover improvements to the perl core such as: general maintenance, bug fixes, performance 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>This application is to extend into the future the TPF grant funding I have been receiving over the last ten years or so to maintain the Perl core. I'm one of the main maintainers of the Perl core internals, and new funding will help me to continue working on the core.</p>

<h2>Project Details</h2>

<p>This project will cover improvements to the perl core such as: general maintenance, bug fixes, performance issues, new features, investigating smoke failures, helping getting Perl into a releasable state etc. These are all activities I already do.</p>

<h2>Timeline</h2>

<p>There is no particular schedule. I am available to start immediately. As and when I can put hours in, I will charge for those hours. This is the same as the current arrangements.</p>

<h2>Author Information</h2>

<p>Dave Mitchell</p>

<p>I'm a freelance programmer and UNIX sysadmin living in the UK. I have been using Perl since 1993, and have been fixing core Perl 5 bugs since 2001.  I have had commit rights since 2003 and I was responsible for the 5.10.1 and 5.14.4 perl releases. I am known for fixing "hard" things in the Perl core.</p>

<h2>Endorsed By</h2>

<p>Ricardo Signes, Nicolas Rochelemagne</p>

<h2>Amount Requested</h2>

<p>$60 per hour, to a total of $21,000 [I've suggested an amount divisible by 60 to make things easier]. A smaller or larger total amount is acceptable, as I'm assuming that, as before, I will be able to apply for extensions to the grant.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#520 - CPAN Bus Factor</title>
    <link rel="alternate" href="https://perlweekly.com/archive/520.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>If, like me, you are a fan of MetaCPAN then you must have noticed the latest changes to the <a href="https://metacpan.org/">MetaCPAN</a> site. It is the introduction of new metric, "CPAN Bus Factor". Don't know what I am talking about? Well then you should read the <a href="https://www.olafalders.com/2021/06/30/cpan-bus-factor/">blog post</a>, which is a collaborative work by Neil Bowers and Olaf Alders.</p>
<p>It reminds me an incident from the past when I received an email from Neil Bowers about one of my CPAN distribution, <a href="https://metacpan.org/pod/IP::Info">IP::Info</a> as he was reviewing CPAN modules for locating an IP address. Later he published his <a href="http://neilb.org/reviews/ip-location.html">report</a> on 8th Aug 2012. You can take a look collection of <a href="http://neilb.org/reviews/">CPAN module reviews</a> by him. If my memory serves, Neil also ran <a href="http://cpan-weekly.org/">CPAN Weekly</a>, for a while. I did join the mailing list and the received CPAN Weekly newsletter talking about a CPAN module and its usage every week. Unfortunately it is no longer active.</p>
<p>A long time ago, I used to be an active CPAN contributor. Unfortunately, because of time constraints, I'm no longer as active as I used to be. I even wrote a two-part blog post on the subject - "How to become a CPAN contributor?" - for perl.com in 2018. You can check out the posts, <a href="https://www.perl.com/article/how-to-become-cpan-contributor/">Part 1</a> and <a href="https://www.perl.com/article/how-to-become-cpan-contributor-part-2/">Part 2</a>, if you are interested.</p>
<p>Why am I talking about CPAN contributions?</p>
<p>A friend of mine and fellow contributor to <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>, Cheok-Yin Fung, wrote a <a href="http://blogs.perl.org/users/c_y_fung/2021/07/how-i-uploaded-a-cpan-module.html">blog</a> about her experience of uploading her first distribution to CPAN. It reminds me of my early days of struggle with CPAN. These days there is a lot of help available on various public platforms. I wish her all the best and welcome to the club of CPAN contributors.</p>
<p>I came across a very interesting <a href="https://medium.com/codex/how-to-create-awesome-pull-requests-b634e7f00e47z">blog post</a> by JJ Merelo talking about Pull Request do's and don'ts. Very helpful advice for anyone looking to contribute to open source projects in general.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/520.html</id>
    <published>2021-07-12T10:00:00Z</published>
    <updated>2021-07-12T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Swapping Bits / Time Angle</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/11#pwc120" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N less than or equal to 255. Write a script to swap the
odd positioned bits with the even positioned bits and print the decimal equivalent of the 
new binary representation.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub swap_bits{
    my($n) = @_;
    my $bits = substr(unpack("B32", pack("N", shift)), 24, 8);
    my @bits = split(//, $bits);
    for(my $i = 0; $i &lt; @bits; $i += 2){
        @bits[$i, $i + 1] = @bits[$i + 1, $i]; 
    }  
    my $swapped_decimal = unpack("N", pack("B32", substr("0" x 32 . join("", @bits), -32)));
    return $swapped_decimal; 
}

MAIN:{
    my $N;
    $N = 101; 
    print swap_bits($N) . "\n";
    $N = 18; 
    print swap_bits($N) . "\n";
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
154
33
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code re-uses much of the code from &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/04#pwc119"&gt;last week's challenge solution&lt;/a&gt;.
The only difference here is the for loop which swaps the even/odd bits.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given time $T in the format hh:mm. Write a script to find the smaller angle 
formed by the hands of an analog clock at a given time.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub clock_angle{
    my($h, $m) = split(/:/, $_[0]);
    my $angle = abs(0.5 * (60 * $h - 11 * $m)); 
    $angle = 360 - $angle if $angle &gt; 180; 
    return $angle;
}

MAIN:{
    my $T;
    $T = "03:10";  
    print clock_angle($T) . "\n";  
    $T = "04:00";  
    print clock_angle($T) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
35
120
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Perhaps not a whole lot going on here: the time is broken into hour and minute parts and
then the angle is computed directly from those values.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-120/"&gt;Challenge 120&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc120</id>
    <published>2021-07-11T17:41:00-04:00</published>
    <updated>2021-07-11T17:41:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
