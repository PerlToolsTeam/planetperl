<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-06-17T00:59:30Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title> Perl Weekly Challenge 169: Brillant Nummbers and Achilles Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/06/perl-weekly-challenge-169-brillant-nummbers-and-achilles-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10823</id>
    <published>2022-06-16T20:02:03Z</published>
    <updated>2022-06-16T20:04:41Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 169 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-169/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days from now (on June 19, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Brilliant Numbers</h2>

<p><em>Write a script to generate first 20 Brilliant Numbers.</em></p>

<blockquote>
  <p><em>Brilliant numbers are numbers with two prime factors of the same length.</em></p>
</blockquote>

<p><em>The number should have exactly two prime factors, i.e. it’s the product of two primes of the same length.</em></p>

<p><em>For example:</em></p>

<pre><code>24287 = 149 x 163
24289 = 107 x 227

Therefore 24287 and 24289 are 2-brilliant numbers.
</code></pre>

<p><em>These two brilliant numbers happen to be consecutive as there are no even brilliant numbers greater than 14.</em></p>

<p><em>Output:</em></p>

<pre><code>4, 6, 9, 10, 14, 15, 21, 25, 35, 49, 121, 143, 169, 187, 209, 221, 247, 253, 289, 299
</code></pre>

<p>There are essentially two ways to solve this type of problems: loop through all integers and filter out those that don&#8217;t satisfy the condition, and try to construct brilliant numbers from a list of primes. I prefer this second solution, because it requires much less computing resources, but, since brilliant numbers are not created in ascending order and the process can generate duplicates, we have to generate a few more numbers than what we strictly need to make sure that we obtain really the first 20 brilliant numbers.</p>

<h3>Brilliant Numbers in Raku</h3>

<p>In Raku, we&#8217;ll use the cross-product <a href="https://docs.raku.org/routine/X">X</a> operator to generate all pairs of primes. More precisely, we will use is as a metaoperator together with the <code>*</code> multiplication operator, <code>X*</code>, to generate directly the prime products. Since the primes have to have the same length, we&#8217;ll do it in two steps, one for primes of length 1 and one for primes of length 2. Since we need only a short list of small primes, I&#8217;ll simply hard code the list of the first ten primes. Task 2 of this challenge will show code to generate a longer list of primes when needed.</p>

<pre><code>my @small-primes = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29;
my @result = (@small-primes[0..3] X* @small-primes[0..3]).sort.squish;
append @result, (@small-primes[4..9] X* @small-primes[4..9]).sort.squish;
say @result[0..19];
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./brilliant.raku
(4 6 9 10 14 15 21 25 35 49 121 143 169 187 209 221 247 253 289 299)
</code></pre>

<h3>Brilliant Numbers in Perl</h3>

<p>This is essentially a port to Perl of the Raku program above, except that we need to implement our own <code>combine</code> subroutine to replace the cross-product operator. We store the result in a hash to remove any duplicate.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @small_primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29);

sub combine {
    my @primes = @_;
    my %part_result;
    for my $i (0..$#primes) {
        for my $j ($i..$#primes) {
            $part_result{$primes[$i] * $primes[$j]} = 1;
        }
    }
    return sort {$a &lt;=&gt; $b} keys %part_result;
}
my @result = combine @small_primes[0..3];
push @result, combine @small_primes[4..9];
say "@result[0..19]";
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./brilliant.pl
4 6 9 10 14 15 21 25 35 49 121 143 169 187 209 221 247 253 289 299
</code></pre>

<h2>Task 2: Achilles Numbers</h2>

<p><em>Write a script to generate first 20 Achilles Numbers. Please checkout <a href="https://en.wikipedia.org/wiki/Achilles_number">wikipedia</a> for more information.</em></p>

<blockquote>
  <p><em>An Achilles number is a number that is powerful but imperfect (not a perfect power). Named after Achilles, a hero of the Trojan war, who was also powerful but imperfect.</em></p>

<p><em>A positive integer n is a powerful number if, for every prime factor p of n, p^2 is also a divisor.</em></p>

<p><em>A number is a perfect power if it has any integer roots (square root, cube root, etc.).</em></p>
</blockquote>

<p><em>For example 36 factors to (2, 2, 3, 3) - every prime factor (2, 3) also has its square as a divisor (4, 9). But 36 has an integer square root, 6, so the number is a perfect power.</em></p>

<p><em>But 72 factors to (2, 2, 2, 3, 3); it similarly has 4 and 9 as divisors, but it has no integer roots. This is an Achilles number.</em></p>

<p><em>Output:</em></p>

<pre><code>72, 108,  200,  288,  392,  432,  500,  648,  675,  800,  864, 968, 972, 1125, 1152, 1323, 1352, 1372, 1568, 1800
</code></pre>

<p>Our first step will be to factorize the input candidates. An Achilles number is a powerful number, which means that every prime appearing in its prime factorization must have a power of at least 2. For a powerful number to be imperfect, the greatest common divisor (GCD) of its powers must be 1.</p>

<h3>Achilles Numbers in Raku</h3>

<p>The <code>prime-factors</code>subroutine returns a <code>BagHash</code> containing a list of prime numbers together with their frequency in the prime factorization of the input integer.</p>

<p>Then, we apply the following rules:
* Any prime appearing in the factorization must have a power of at last 2;
* There must be at least two distinct prime factors;
* The greatest common divisor (GCD) of the powers must be 1.</p>

<p>Note that the Raku built-in <code>gcd</code> routine is an infix operator, which can therefore be used only with 2 operands. However, the <code>[]</code> metaoperator makes it possible to use it with a list of more than 2 operands.</p>

<pre><code>my @primes = (2..1000).grep({.is-prime});

sub prime-factors (UInt $num-in) {
    my $factors = BagHash.new;
    my $num = $num-in;
    for @primes -&gt; $div {
        while ($num %% $div) {
            $factors{$div}++;
            $num div= $div;
        }
        return $factors if $num == 1;
    }
    $factors{$num}++ unless $num == $num-in;
    return $factors;
}

my $count = 0;
for 1..Inf -&gt; $n { 
    my @powers = (prime-factors $n).values;
    if @powers.none &lt; 2 and @powers.elems &gt; 1 and ([gcd] @powers) == 1 {
        say $n.fmt("%4d"), " -&gt; ", @powers;
        $count++;
        last if $count &gt;= 20
    }
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./Achilles_nums.raku
  72 -&gt; [3 2]
 108 -&gt; [3 2]
 200 -&gt; [2 3]
 288 -&gt; [5 2]
 392 -&gt; [2 3]
 432 -&gt; [3 4]
 500 -&gt; [2 3]
 648 -&gt; [4 3]
 675 -&gt; [3 2]
 800 -&gt; [5 2]
 864 -&gt; [5 3]
 968 -&gt; [2 3]
 972 -&gt; [2 5]
1125 -&gt; [2 3]
1152 -&gt; [2 7]
1323 -&gt; [3 2]
1352 -&gt; [2 3]
1372 -&gt; [2 3]
1568 -&gt; [2 5]
1800 -&gt; [2 3 2]
</code></pre>

<h3>Achilles Numbers in Perl</h3>

<p>This is a port to Perl of the Raku program above, with the same rules as above. Since there is no built-in <code>gcd</code> function in Perl, we implement our own. When it receives more than two arguments, it calls itself recursively until it ends up with 2 arguments. </p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;
use constant MAX =&gt; 500;

my @primes = (2, 3, 5, 7);

# Greatest common divisor of two or more integers
sub gcd {
    if (@_ &gt; 2) {
        return gcd( gcd($_[0], $_[1]), @_[2..$#_]);
    } else {
        my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
        while ($j) {
            ($i, $j) = ($j, $i % $j);
        }
        return $i;
    }
}

# Creating a hash of prime factors (as keys) with their powers (as values) 
sub prime_factors {
    my $num = shift;
    my $origin_num = $num;
    my %factors;
    for my $div (@primes) {
        while ($num % $div == 0) {
            $factors{$div}++;
            $num /= $div;
        }
        return %factors if $num == 1;
    }
    $factors{$num}++ unless $num == $origin_num;
    return %factors;
}


# Populating an array of primes up to MAX
my $current = 9;
while (1) {
    my $prime = 1;
    for my $i (@primes) {
        my $i_sq = $i * $i;
        last if $i_sq &gt; $current;
        $prime = 0, last if $current % $i == 0;
    }
    push @primes, $current if $prime;;
    $current += 2;
    last if $current &gt; MAX;
}

my $count = 0;
for my $n (1..MAX*MAX) { 
    my %factors =  prime_factors $n;
    my @powers = map $factors{$_}, keys %factors;
    next if grep { $_ &lt; 2} @powers;
    next if scalar @powers &lt; 2;
    if (gcd(@powers) == 1) {
        printf "%4d -&gt; %s\n", $n,  join " ", @powers;
        $count++;
        last if $count &gt;= 20
    }
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./Achilles_nums.pl
  72 -&gt; 2 3
 108 -&gt; 2 3
 200 -&gt; 3 2
 288 -&gt; 5 2
 392 -&gt; 3 2
 432 -&gt; 3 4
 500 -&gt; 3 2
 648 -&gt; 4 3
 675 -&gt; 2 3
 800 -&gt; 2 5
 864 -&gt; 3 5
 968 -&gt; 3 2
 972 -&gt; 5 2
1125 -&gt; 2 3
1152 -&gt; 2 7
1323 -&gt; 2 3
1352 -&gt; 2 3
1372 -&gt; 2 3
1568 -&gt; 5 2
1800 -&gt; 2 2 3
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on June 26, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>MooseX::Extended Tutorial</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ovid/2022/06/moosexextended-tutorial.html"/>
    <id>tag:blogs.perl.org,2022:/users/ovid//11.10821</id>
    <published>2022-06-15T13:09:18Z</published>
    <updated>2022-06-15T13:18:52Z</updated>
    <author>
        <name>Ovid</name>
        <uri>http://www.allaroundtheworld.fr/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ovid/">
        <![CDATA[<p>There's been a lot of work on <a href="https://metacpan.org/pod/MooseX::Extended">MooseX::Extended</a> and now it comes with a fairly extensive <a href="https://metacpan.org/dist/MooseX-Extended/view/lib/MooseX/Extended/Manual/Tutorial.pod">tutorial</a>.</p>

<p>The basics are pretty easy to learn, but it gives you a good amount of power. It also allows you to easily <a href="https://metacpan.org/pod/MooseX::Extended::Custom">define custom versions</a> so you can just slap <code>use My::Custom::Moose;</code> (or role) at the top or your code and it works just fine.</p>

<p>You can now disable just about any features in it you don't want. You can also <a href="https://metacpan.org/pod/MooseX::Extended#includes">include <em>experimental</em> features</a>, such as multimethods (based on number of args) and async/await.</p>

<p>Check out <a href="https://github.com/Ovid/moosex-extreme">the github repo</a> if you'd like to contribute.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Could you support future development of Perl and Raku?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/new-prospectus-launched-june-22"/>
  <id>tag:news.perlfoundation.org,2022-06-15:/post/new-prospectus-launched-june-22</id>
  <published>2022-06-15T05:17:45</published>
  <updated>2022-06-15T05:17:45</updated>
  <summary>
  <![CDATA[
     Billions of people around the world rely on Perl and Raku in some way without even realising it. A new prospectus from The Perl Foundation highlights how you can contribute to its ongoing development, either financially, or through volunteering time. By doing so you can: Ensure Perl and Raku are sustainably maintained and developed Gain valuable education opportunities for your teams at conferences Engage in important networking opportunities and build 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Billions of people around the world rely on Perl and Raku in some way without even realising it. A [new prospectus](<em>ra-rel-mnt</em>/simplecas/fetch_content/64c0601be328555858adc21a58e221c977fe55ae/Perl Raku Prospectus_Final_Interactive_v2.pdf) from The Perl Foundation highlights how you can contribute to its ongoing development, either financially, or through volunteering time. </p>

<p>By doing so you can:
* Ensure Perl and Raku are sustainably maintained and developed
* Gain valuable education opportunities for your teams at conferences
* Engage in important networking opportunities and build your corporate visibility
* Recruit new and invaluable Perl or Raku developers to your team
* Associate your brand with support for Perl and Raku</p>

<h2>Please share the prospectus with colleagues and employers</h2>

<p>Take a look at [the prospectus](<em>ra-rel-mnt</em>/simplecas/fetch_content/64c0601be328555858adc21a58e221c977fe55ae/Perl Raku Prospectus_Final_Interactive_v2.pdf) today and share it with your colleagues and employers too.</p>

<p>[<img src="_ra-rel-mnt_/simplecas/fetch_content/8c78224a59b939d5c85cd0afe1523619aae5d229/prospectus cover page.jpg" style="max-width:100%;" />](<em>ra-rel-mnt</em>/simplecas/fetch_content/87ad918718351eef9604c5487e49a4c94760d91b/Perl Raku Prospectus_Final_Interactive.pdf) </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl IDE Hackathon 2022</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2022/06/perl-ide-hackathon-2022.html"/>
    <id>tag:blogs.perl.org,2022:/users/dean//558.10818</id>
    <published>2022-06-14T07:12:37Z</published>
    <updated>2022-06-14T07:39:34Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p><img alt="perl ide hackathon.png" src="http://blogs.perl.org/users/dean/perl%20ide%20hackathon.png" width="573" height="420" class="mt-image-none" style="" /></p>

<p>On Tuesday 21st June there will be a Perl IDE Hackathon in the <a href="https://github.com/perlconference/tprc-2022-hou/wiki/Hackathons">Hackathon room</a> at The Perl and Raku Conference. You can also participate in this event remotely.</p>

<p>Our goal is to enhance IDE and Editor support for Perl 5 which is typically via plugins, with an an emphasis on helping people make their first every contribution. It's not even required that you use the IDE/Editor that you are helping out with.</p>

<p>With support from their authors, I am hoping we can help make meaningful contributions to the following, :</p>

<p>-  Jetbrains IDEA <a href="https://github.com/Camelcade/Perl5-IDEA">plugin</a><br />
- Language Server's for VSCode etc. i.e. <a href="https://github.com/bscan/PerlNavigator">Perl Navigator</a>, <a href="https://github.com/richterger/Perl-LanguageServer">Perl::LanguageServer</a>, <a href="https://metacpan.org/dist/PLS">PLS</a><br />
- Vim plugin <a href="https://github.com/vim-perl/vim-perl">vim-perl</a><br />
- Emacs <br />
- Others!</p>

<p>Recall that IDE support is a <a href="https://news.perlfoundation.org/post/hackothon-events-planning-2022">priority for the community</a> and we need your help!</p>

<p>If you are attending the Perl and Raku conference then simply turn up at the venue on the 21st with your Laptop and find the room! There will be wifi and we will work together with everyone in the slack channel.</p>

<p>Attend remotely by joining the #hackathons2020 channel on TPF slack using <a href="https://join.slack.com/share/enQtMzY2Mzk4NTY0NzA0Mi0yYTdjYzUzNjQ5NmVlM2ZlZDM2NmJkYjI0YmY3YWJjYjUyZjMwYTVhZDc4NWMwNWRhZDBiOTgxYzZkNjhiNmQ1">this link which is only active for 14 days</a>. If you're not fond of the web interface you can use weeslack plugin for weechat or other similar plugins for your ui of choice. Try to join ahead of time and recall that people in Houston are on the "Central Standard Time" aka "US/Central" which is UTC-5 clock setting. Check out this <a href="http://www.timezoneconverter.com/cgi-bin/tzc.tzc">handy webpage</a> to aid conversion.</p>

<p>Feel free to use the above channel to ask questions etc.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Strawberry Perl</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2022/06/strawberry-perl.html"/>
    <id>tag:blogs.perl.org,2022:/users/mohammad_s_anwar//990.10815</id>
    <published>2022-06-14T00:08:23Z</published>
    <updated>2022-06-14T00:15:10Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlexe" label="perl exe" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/strawberry-perl.jpg"></p>

<p>Do you want to convert Perl source into <strong>.exe</strong>? </p>

<p>Please checkout my experience.</p>

<p><a href="https://theweeklychallenge.org/blog/strawberry-perl">https://theweeklychallenge.org/blog/strawberry-perl</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>It's all about the numbers</title>
    <link rel="alternate" href="https://dev.to/simongreennet/its-all-about-the-numbers-4fh5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 169
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-169/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-169/sgreen">My solution</a></p>

<p>After a long break, I'm back. Without further ado, let's go through the two challenges this week.</p>

<h2>
  
  
  Task 1: Brilliant Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 Brilliant Numbers.</p>

<p>Brilliant numbers are numbers with two prime factors of the same length.</p>

<p>The number should have exactly two prime factors, i.e. it’s the product of two primes of the same length.</p>

<h3>
  
  
  My solution
</h3>

<p>This is one of those tasks where given we are dealing with such small numbers, it is easier to just brute force things. In the main function, I have the value <code>l</code> for the length of the primes. I then call call the <code>get_bril_nums</code> function to get all brilliant numbers.</p>

<p>It does this in three steps:</p>

<ol>
<li>Get all primes of <code>l</code> length.</li>
<li>Multiple each of the primes</li>
<li>Sort the results numerically</li>
</ol>

<p>I keep doing this until there are at least 20 numbers calculated (as we know this is when <code>l == 2</code>). I then print the first 20 numbers.</p>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 
4, 6, 9, 10, 14, 15, 21, 25, 35, 49, 121, 143, 169, 187, 209, 221, 247, 253, 289, 299
</code></pre>

</div>



<h2>
  
  
  Task 2: Achilles Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 <a href="https://en.wikipedia.org/wiki/Achilles_number">Achilles Numbers</a>.</p>

<h3>
  
  
  My solution
</h3>

<p>This task is more challenging than the first one, and highlighted that at the time of writing, Mohammad's description isn't quite correct. I've <a href="https://twitter.com/simongreennet/status/1536323816187924480">tweeted</a> him, so hopefully it will be fixed.</p>

<p>For this task, I keep calling the <code>is_achilles_number</code> with an incrementing counter until we have found twenty numbers. This function does the following</p>

<ol>
<li>Get the unique prime factors into the <code>factors</code> dict (hash in Perl), where the key is the prime number and the value is the power.</li>
<li>Set the <code>powers</code> set (array in Perl) to the power values. At this point we no longer care about the prime factor.</li>
<li>If there is only one value (it's a power of a single number) or any of the powers is 1, return <code>False</code> (undef in Perl).</li>
<li>If the <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor">greatest common divisor</a> of the powers is not 1, return <code>False</code> (undef).</li>
<li>Return <code>True</code>.</li>
</ol>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 
72, 108, 200, 288, 392, 432, 500, 648, 675, 800, 864, 968, 972, 1125, 1152, 1323, 1352, 1372, 1568, 1800
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/its-all-about-the-numbers-4fh5</id>
    <published>2022-06-13T13:22:01Z</published>
    <updated>2022-06-13T13:22:01Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>#568 - Perl v5.36 - the beginning of new era</title>
    <link rel="alternate" href="https://perlweekly.com/archive/568.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>A big round of applause to the entire team behind the ground breaking release of <strong>Perl v5.36</strong>. I have been following the features of the latest release very closely. I am confident it would be a solid foundation for <strong>Corinna</strong> and <strong>v7</strong>.</p>
<p>Have you had chance to play with <strong>Perl v5.36</strong>?</p>
<p>If not then please do checkout my <a href="http://blogs.perl.org/users/mohammad_s_anwar/2022/06/do-you-want-to-get-started-with-perl-v536.html">blog post</a>, where I shared my first hand experience playing with <strong>Perl v5.36</strong>.</p>
<p>Have you ever thought of contributing to your favourite language, <strong>Perl</strong>?</p>
<p>A little over a decade, I submitted a small patch via email. Those days, the process was not as smooth as it is today. Unfortunately I never received any acknowledgment. Ever since <strong>Perl</strong>, found the new home in <a href="https://github.com/Perl/perl5">GitHub</a>, it is so easy to submit the patches. I submitted a <a href="https://github.com/Perl/perl5/pull/19853">small change</a> to the core Perl. To my surprise, in <strong>2 days</strong>, it got accepted and merged. It has given me confidence to submit more.</p>
<p>Why don't you also give it a try?</p>
<p>Last but not least, I would like to thank each and everyone for all the support <a href="https://www.patreon.com/manwar">via Patreon</a>, I received in the last few weeks. I am overwhelmed, to be honest.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/568.html</id>
    <published>2022-06-13T10:00:00Z</published>
    <updated>2022-06-13T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Take the Long Way Home</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/06/12#pwc168" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Calculate the first 13 Perrin Primes.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use Math::Primality qw/is_prime/;

sub n_perrin_prime_r{
    my($n, $perrins, $perrin_primes) = @_;
    return $perrin_primes if keys %{$perrin_primes} == $n;
    my $perrin = $perrins-&gt;[@{$perrins} - 3] + $perrins-&gt;[@{$perrins} - 2];
    push @{$perrins}, $perrin;
    $perrin_primes-&gt;{$perrin} = -1 if is_prime($perrin);
    n_perrin_prime_r($n, $perrins, $perrin_primes);
}

sub perrin_primes{
    return n_perrin_prime_r(13, [3, 0, 2], {});
}

MAIN:{
    print join(", ", sort {$a &lt;=&gt; $b} keys %{perrin_primes()}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2, 3, 5, 7, 17, 29, 277, 367, 853, 14197, 43721, 1442968193, 792606555396977
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The solution here incorporated a lot of elements from previous weekly challenges. That is 
to say it is quite familiar, we recursively generate the sequence which is stored as hash
keys and, once completed, sort and print the results. The hash keys are a convenient, 
although perhaps slightly bulky, way of handling the repeated &lt;code&gt;5&lt;/code&gt; term at the beginning. 
The terms strictly increase thereafter.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer greater than 1. Write a script to find the home prime of the 
given number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use bigint;
use Math::Primality qw/is_prime/;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub home_prime{
    my($n) = @_;
    return $n if is_prime($n);
    my $s = $n;
    {
        $s = join("", prime_factor($s));
        redo if !is_prime($s);
    }
    return $s;
}

MAIN:{
    print home_prime(10) . "\n";
    print home_prime(16) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
773
31636373
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;So you think eight is low&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Calculating HP(8) should be an easy go&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take the long way home&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take the long way home&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The second part of this week's challenge was a lot of fun as it presented some unexpected
behavior. Here we are asked to compute the &lt;em&gt;Home Prime&lt;/em&gt; of any given number. The process
for doing so is, given &lt;code&gt;N&lt;/code&gt; to take the prime factors for &lt;code&gt;N&lt;/code&gt; and concatenate them 
together. If the result is prime then we are done, that is the &lt;em&gt;Home Prime&lt;/em&gt; of &lt;code&gt;N&lt;/code&gt;, 
typically written &lt;code&gt;HP(N)&lt;/code&gt;. This is an easy process to repeat, and in many cases the 
computation is a very quick one. However, in some cases, the size of the interim numbers
on the path to HP(N) grow extremely large and the computation bogs down, whence &lt;em&gt;take the 
long way home&lt;/em&gt;! As an example, the computation of HP(8) is still running after 24 hours
on my M1 Mac Mini. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-168/"&gt;Challenge 168&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/HomePrime.html"&gt;Home Prime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=LPRrHyXchEY"&gt;Take the Long Way Home&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc168</id>
    <published>2022-06-12T23:34:00-04:00</published>
    <updated>2022-06-12T23:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Entering the Charts</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2022/06/entering-the-charts.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10807</id>
    <published>2022-06-09T00:34:12Z</published>
    <updated>2022-06-12T19:59:17Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="Perl 5" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="conference" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="talk" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>As part of HalleLeipzig.pm I had my duties to co-organize the recent <a href="https://act.yapc.eu/gpw2022/index.html">German Perl Workshop</a> but also the opportunity to give some talks. (Recordings are online [EDIT] now at the <a href="https://media.ccc.de/c/gpw2022">CCC video platform</a>).  My main talk was about plotting data with Perl (<a href="https://lichtkind.de/vortrag/plot5.pdf">english slides</a>).</p>]]>
        <![CDATA[<p>I covered the data preparation phase and which Perl modules can handle the necessary math (<a href="https://metacpan.org/dist/Statistics-Basic/view/lib/Statistics/Basic.pod">Stats::Basic</a>,  <a href="https://metacpan.org/pod/Statistics::PCA">Statistics::PCA</a>, <a href="https://metacpan.org/pod/Statistics::KernelEstimation">Statistics::KernelEstimation</a>, <a href="https://metacpan.org/pod/Math::Spline">Math::Spline</a> and so on ). I also taught some color and design theory and how to use the proper visualization properties depending on importance and data type (and modules like <a href="https://metacpan.org/pod/Color::Library">Color::Library</a>, <a href="https://metacpan.org/pod/Convert::Color">Convert::Color</a>, <a href="https://colorbrewer2.org">colorbrewer</a>). The third part was a review of all the big and small plot libs on CPAN. And there was a lot to roast because especially the pure Perl ones are often half baked with lots of shortcomings, but also most of the big libraries (wrappers) had serious issues (may post for another day). This process led me also to investigate the module <a href="https://metacpan.org/pod/Chart">Chart</a>, which was kinda feature complete, well documented, had some 90'ies charm, but also some minor technical issues like can't install from CPAN. So I took the adventure and overtook maintainership, wich went surprisingly smoothly.</p>

<p>The first Week or so I cleaned up the issue tracker from already solved issues, maybe applied some patches too and put the code on <a href="https://github.com/lichtkind/Chart">github</a>. In this repo  is much more material than the pure distro, basically all the stuff I got from previous maintainer, so nothing gets lost and also some own experiments to figure how to go forward. Finally and maybe hardes I converted it into a modern distro complying to all the recent METACPAN standards and make it easy releasable via <a href="https://metacpan.org/pod/Dist::Zilla">dzil</a>. After this i just made a test release with no new features (and some little doc updates) : version: v2.401.1. </p>

<p>But today I very proudly announce version v2.402, which brings some niceties and some felt improvements all centered around the main theme of color.</p>

<p>All users will see that the default colors are become more toned down, pleasant and better jiving with each other. I also added some named designer colors form the Pantone report (just look them up in Chart::Color::Constant). I also had to correct some color name  definitions which were off any standard (typo). Other main new feature is defining color by HSL color space as in { H => 10, S => 20, L => 30} or { hue => 10, saturation => 20,  lightness => 30} (only first letter of has keys are significant). This allows to create colors by defining them with optical properties. In same manner { r => 10, g => 20, b => 30} or { Red => 10, Green => 20, Blue => 30} is also possible. I basically wrote 3 libs for complete new color handling to get nice gradients complementary colors and more, which I need in future.</p>

<p>The next stop will be support for true type fonts (if your GD version is new enough) and templates (bundles of settings) for certain plot designs or color pallets. There  might be some more pressing issues with the module but at least i have now a corner of the code base which is completely cleaned up and set to a standard I like and I can expand from there.</p>

<p>To all the faithful users of the module: I will not touch the old API but also only provide bug fixes to it and minor enhancements. Most of the new development will be through a more powerful API through the currently unused main module itself. Hope that will be a workable compromise. <br />
</p>]]>
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-6164798390531357235</id>
    <published>2022-06-11T14:25:00.001-07:00</published>
    <updated>2022-06-11T14:25:42.781-07:00</updated>
    <title type="text">CPAN: ftp.cpan.org depreciation</title>
    <content type="html">&lt;p&gt;As a followup to the &lt;a href="https://log.perl.org/2021/02/cpan-mirror-list-changes.html"&gt;CPAN Mirror List changes from last year&lt;/a&gt;, we're announcing that FTP service on &lt;span style="font-family: courier;"&gt;ftp.cpan.org&lt;/span&gt; and &lt;span style="font-family: courier;"&gt;ftp.perl.org &lt;/span&gt;is being&amp;nbsp;deprecated. This means that any CPAN clients configured to use them will fail to fetch modules.&lt;/p&gt;&lt;p&gt;For the past several years, CPAN clients have defaulted to &lt;span style="font-family: courier;"&gt;www.cpan.org &lt;/span&gt;to fetch modules, so this should only affect users using very old CPAN clients (usually associated with old versions of Perl) who did not explicitly set a mirror.&lt;/p&gt;&lt;p&gt;We're not setting a firm timeline on this depreciation, but there are only a small number of compatible FTP mirrors remaining, and the number is shrinking over time.&amp;nbsp; At some point, there will no longer be any remaining FTP mirrors, and the service will be terminated.&amp;nbsp; Because these mirrors are run by independent volunteers, we don't have a good way of measuring actual traffic.&lt;/p&gt;&lt;p&gt;If you think you might be using a CPAN client configured to use &lt;span style="font-family: courier;"&gt;ftp.cpan.org&lt;/span&gt; or &lt;span style="font-family: courier;"&gt;ftp.perl.org&lt;/span&gt;, please check, and reconfigure to use the globally available &lt;span style="font-family: courier;"&gt;www.cpan.org&lt;/span&gt; instead.&lt;/p&gt;&lt;p&gt;If you're using CPAN.pm, you can configure &lt;span style="font-family: courier;"&gt;www.cpan.org&lt;/span&gt; as the mirror with these commands:&lt;/p&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;o conf urllist https://www.cpan.org/&lt;/span&gt;&amp;nbsp;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;o conf commit&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;(If your perl doesn't have &lt;span style="font-family: courier;"&gt;Net::SSLEay&lt;/span&gt; installed to support TLS, you can just use &lt;span style="font-family: courier;"&gt;http://www.cpan.org/)&lt;/span&gt;&amp;nbsp;&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/6164798390531357235/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2022/06/cpan-ftpcpanorg-depreciation.html#comment-form" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6164798390531357235"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6164798390531357235"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2022/06/cpan-ftpcpanorg-depreciation.html" title="CPAN: ftp.cpan.org depreciation"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4114139315970318686</id>
    <published>2022-06-11T21:58:00.000+02:00</published>
    <updated>2022-06-11T21:58:35.990+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxcvi) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PJCJ/Devel-Cover-1.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::Cover&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Code coverage metrics for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.38&lt;/strong&gt; on 2022-06-05&lt;/li&gt;  &lt;li&gt;Votes: 100&lt;/li&gt;  &lt;li&gt;Previous version: 1.36 was 2 years, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.42&lt;/strong&gt; on 2022-06-07&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 12.30 was 9 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJATRIA/Mojolicious-Plugin-Authentication-1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Authentication&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A plugin to make authentication a bit easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2022-06-10&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.37 was 1 year before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTEMLE/Net-AMQP-RabbitMQ-2.40010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::AMQP::RabbitMQ&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - interact with RabbitMQ over AMQP using librabbitmq &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.40010&lt;/strong&gt; on 2022-06-11&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 2.40009 was 7 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Specio-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Specio&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Type constraints and coercions for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2022-06-11&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 1 year, 4 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9605' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9605&lt;/strong&gt; on 2022-06-09&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9601 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v8.4.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v8.4.0&lt;/strong&gt; on 2022-06-09&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v8.3.0 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHAY/Text-Balanced-2.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Balanced&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extract delimited text sequences from strings. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.06&lt;/strong&gt; on 2022-06-05&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 2.05 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012005&lt;/strong&gt; on 2022-06-07&lt;/li&gt;  &lt;li&gt;Votes: 130&lt;/li&gt;  &lt;li&gt;Previous version: 1.012004 was 10 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4114139315970318686/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/cccxcvi-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4114139315970318686"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4114139315970318686"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/cccxcvi-9-great-cpan-modules-released.html" title="(cccxcvi) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3637270908404806269</id>
    <published>2022-06-11T21:54:00.002+02:00</published>
    <updated>2022-06-11T21:54:55.529+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dx) metacpan weekly report - Log::ger</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 60&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Log::ger" target="_blank"&gt;Log::ger (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/06/11 19:54:37 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FreeBSD::FsStat" target="_blank"&gt;FreeBSD::FsStat&lt;/a&gt; - Query a FreeBSD system for the list of mounted filesystems&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Basic" target="_blank"&gt;Log::Basic&lt;/a&gt; - Perl extension for simple logging.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::SPF" target="_blank"&gt;Mail::SPF&lt;/a&gt; - An object-oriented implementation of Sender Policy Framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::ClamAV::Client" target="_blank"&gt;Net::ClamAV::Client&lt;/a&gt; - A client class for the ClamAV clamd virus scanner daemon&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::DNS::SPF::Expander" target="_blank"&gt;Net::DNS::SPF::Expander&lt;/a&gt; - Expands DNS SPF records, so you don't have to.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SAML2" target="_blank"&gt;Net::SAML2&lt;/a&gt; - SAML bindings and protocol implementation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Session::State::URI" target="_blank"&gt;Plack::Session::State::URI&lt;/a&gt; - uri-based session state&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::KernelEstimation" target="_blank"&gt;Statistics::KernelEstimation&lt;/a&gt; - Kernel Density Estimates and Histograms&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::PCA" target="_blank"&gt;Statistics::PCA&lt;/a&gt; - A simple Perl implementation of Principal Component Analysis.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Filesystem" target="_blank"&gt;Sys::Filesystem&lt;/a&gt; - Retrieve list of filesystems and their properties&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Tmux::Layout" target="_blank"&gt;Term::Tmux::Layout&lt;/a&gt; - Create tmux layout strings programmatically&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BSD::Resource" target="_blank"&gt;BSD::Resource&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=115)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CSS::Minifier::XS" target="_blank"&gt;CSS::Minifier::XS&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Curses::UI" target="_blank"&gt;Curses::UI&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=128)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID" target="_blank"&gt;Data::UUID&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=176)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=176)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Valid" target="_blank"&gt;Email::Valid&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter" target="_blank"&gt;Exporter&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Filter::signatures" target="_blank"&gt;Filter::signatures&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::App" target="_blank"&gt;Getopt::App&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Raw" target="_blank"&gt;Git::Raw&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JavaScript::Minifier::XS" target="_blank"&gt;JavaScript::Minifier::XS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::MaybeXS" target="_blank"&gt;JSON::MaybeXS&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Compare" target="_blank"&gt;List::Compare&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::ger" target="_blank"&gt;Log::ger&lt;/a&gt; (+3=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Round" target="_blank"&gt;Math::Round&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Metabrik::Repository" target="_blank"&gt;Metabrik::Repository&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=471)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=288)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::CA" target="_blank"&gt;Mozilla::CA&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Netmask" target="_blank"&gt;Net::Netmask&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Bytes::Human" target="_blank"&gt;Number::Bytes::Human&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=396)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=118)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=124)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Session::Simple" target="_blank"&gt;Plack::Middleware::Session::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::SizeLimit" target="_blank"&gt;Plack::Middleware::SizeLimit&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex::Hook::File::Diff" target="_blank"&gt;Rex::Hook::File::Diff&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPi::Pin" target="_blank"&gt;RPi::Pin&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPi::WiringPi" target="_blank"&gt;RPi::WiringPi&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sisimai" target="_blank"&gt;Sisimai&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Statement" target="_blank"&gt;SQL::Statement&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=112)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Spec" target="_blank"&gt;Test::Spec&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=167)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebDriver::Tiny" target="_blank"&gt;WebDriver::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3637270908404806269/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/dx-metacpan-weekly-report-logger.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3637270908404806269"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3637270908404806269"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/dx-metacpan-weekly-report-logger.html" title="(dx) metacpan weekly report - Log::ger"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-465036238387134052</id>
    <published>2022-06-11T21:47:00.000+02:00</published>
    <updated>2022-06-11T21:47:53.445+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-06-11 19:28:03 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72503807" target="_blank"&gt;Perl calls using system abruptly start failing&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72564337" target="_blank"&gt;extract text between the two blocks using regex&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72525241" target="_blank"&gt;Can you tie() a filehandle without a bareword glob?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72583354" target="_blank"&gt;Is there a way to match all adjacent words in a sentence?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/72528213" target="_blank"&gt;How Mojolicious modifies Perl syntax&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/465036238387134052/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/dxxxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/465036238387134052"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/465036238387134052"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/dxxxviii-stackoverflow-perl-report.html" title="(dxxxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grant Update: Optree Optimisations for Performance Gains</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-update-optree-optimisations-start"/>
  <id>tag:news.perlfoundation.org,2022-06-09:/post/grant-update-optree-optimisations-start</id>
  <published>2022-06-09T07:03:55</published>
  <updated>2022-06-09T07:03:55</updated>
  <summary>
  <![CDATA[
     Work has started, though a roadblock has come up: https://www.nntp.perl.org/group/perl.perl5.porters/2022/06/msg263847.html Paul has a few ideas to work around it. As some preliminary work, he wants to clean up op.c a bit and split the peephole optimiser out into its own file, per this thread: https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262118.html There is now an MR for that here: https://github.com/Perl/perl5/pull/19835 Cheers, Matthew Horsfall 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Work has started, though a roadblock has come up:</p>

<p>https://www.nntp.perl.org/group/perl.perl5.porters/2022/06/msg263847.html</p>

<p>Paul has a few ideas to work around it.</p>

<p>As some preliminary work, he wants to clean up op.c a bit and split the peephole optimiser out into its own file, per this thread:</p>

<p>https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262118.html</p>

<p>There is now an MR for that here:</p>

<p>https://github.com/Perl/perl5/pull/19835</p>

<p>Cheers,</p>

<p>-- Matthew Horsfall (alh)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The way to read Perl core source codes</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/the-way-to-read-perl-core-source-codes-34i4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I explain the way to read Perl core source codes. <a href="https://github.com/Perl/perl5/tree/v5.36.0">Perl 5.36.0</a> is used in this description.</p>

<p>This is originally <a href="https://en.perlzemi.com/blog/20220609124939.html">The way to read Perl core source codes | Perl ABC</a></p>

<h4>
  
  
  Where is main function?
</h4>

<p><code>main</code> function is the entry point of <code>perl</code> command.</p>

<p>It is written in <code>perlmain.c</code>, but Perl has no C source code that name is <code>perlmain.c</code>.</p>

<p><code>perlmain.c</code> is generated by <a href="https://github.com/Perl/perl5/blob/v5.36.0/Makefile.SH#L802">Makefile.SH</a> using <a href="https://github.com/Perl/perl5/blob/v5.36.0/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm">ExtUtils::Miniperl</a>.</p>

<h4>
  
  
  Where is processing perl command line arguments?
</h4>

<p>Processing perl command line arguments are started from <a href="https://github.com/Perl/perl5/blob/v5.36.0/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm#L141">perl_parse</a> function.</p>

<p><code>perl_parse</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L1678">perl.c</a>.</p>

<p>Go forward to <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L1827">parse_body</a> function.</p>

<p><code>parse_body</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2056">perl.c</a></p>

<p>You can see the processing logic of command line arguments.</p>

<h4>
  
  
  Where is tokenizer?
</h4>

<p>Next is the tokenizer. The parts of Perl syntax are converted to tokens.</p>

<p>Tokenizing is started from <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2523">lex_start</a> function.</p>

<p><code>lex_start</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/toke.c#L809">toke.c</a>.</p>

<h4>
  
  
  Where is parser?
</h4>

<p>Next is the parser. The parser converts tokens to <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a>(abstruct syntax tree).</p>

<p>Parsing is started from <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2536">yyparse</a> function.</p>

<p><code>yyparse</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/perly.c#L266">perly.c</a>.</p>

<p><code>perly.c</code> is generated from <a href="https://github.com/Perl/perl5/blob/v5.36.0/perly.y">perly.y</a> using <a href="https://en.wikipedia.org/wiki/GNU_Bison">bison</a>.</p>

<h4>
  
  
  Where is Perl data structure?
</h4>

<p>The type of the scalar value <code>SV</code> and its functions are defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/sv.h">sv.h</a> and <a href="https://github.com/Perl/perl5/blob/v5.36.0/sv.c">sv.c</a>.</p>

<p>The type of the array <code>AV</code> and its functions are defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/av.h">av.h</a> and <a href="https://github.com/Perl/perl5/blob/v5.36.0/av.c">av.c</a>.</p>

<p>The type of the hash <code>HV</code> and its functions are defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/hv.h">hv.h</a> and <a href="https://github.com/Perl/perl5/blob/v5.36.0/hv.c">hv.c</a>.</p>

<h4>
  
  
  Where does Perl run?
</h4>

<p>After AST is optimized, Perl run from <a href="https://github.com/Perl/perl5/blob/v5.36.0/ext/ExtUtils-Miniperl/lib/ExtUtils/Miniperl.pm#L142">perl_run</a> function.</p>

<p><code>perl_run</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2621">perl.c</a>.</p>

<p>Go forward to <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2644">run_body</a> function.</p>

<p><code>run_body</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2678">perl.c</a>.</p>

<p>Go forward to <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.c#L2721">CALLRUNOPS</a>.</p>

<p><code>CALLRUNOPS</code> is defined as <code>PL_runops</code> in <a href="https://github.com/Perl/perl5/blob/v5.36.0/perl.h#L228">perl.h</a></p>

<p>Furthermore, macros are defined as follows.</p>

<pre>
perl.h:#define CALLRUNOPS  PL_runops
embedvar.h:#define PL_runops            (vTHX-&gt;Irunops)
intrpvar.h:PERLVARI(I, runops,  runops_proc_t, RUNOPS_DEFAULT)
perl.h:# define RUNOPS_DEFAULT Perl_runops_standard
</pre>

<p>Go forward to <code>Perl_runops_standard</code> function.</p>

<p><code>Perl_runops_standard</code> is defined in <a href="https://github.com/Perl/perl5/blob/v5.36.0/run.c#L37">run.c</a>.</p>

<p>The member <a href="https://github.com/Perl/perl5/blob/v5.36.0/run.c#L41">op_ppaddr</a> of <code>OP</code> structure is called.</p>

<p><code>op_ppaddr</code> is a function pointer to perlform an operation.</p>

<h4>
  
  
  Where are operators defined?
</h4>

<p>Operators are defined in the following sources.</p>

<ul>
<li><a href="https://github.com/Perl/perl5/blob/v5.36.0/pp.c">pp.c</a></li>
<li><a href="https://github.com/Perl/perl5/blob/v5.36.0/pp_ctl.c">pp_ctl.c</a></li>
<li><a href="https://github.com/Perl/perl5/blob/v5.36.0/pp_hot.c">pp_hot.c</a></li>
<li><a href="https://github.com/Perl/perl5/blob/v5.36.0/pp_pack.c">pp_pack.c</a></li>
<li><a href="https://github.com/Perl/perl5/blob/v5.36.0/pp_sort.c">pp_sort.c</a></li>
<li><a href="https://github.com/Perl/perl5/blob/v5.36.0/pp_sys.c">pp_sys.c</a></li>
</ul>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/the-way-to-read-perl-core-source-codes-34i4</id>
    <published>2022-06-09T05:25:53Z</published>
    <updated>2022-06-09T05:25:53Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Einführung in Dist::Zilla</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-06-08-einfa14hrung-in-distzilla" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Eine Perl-Distribution besteht neben dem eigentlichen Code auch aus Dateien und Code, um die Distribution über CPAN zur Verfügung zu stellen. Das manuelle Erstellen dieser Dateien hält vom Entwickeln ab und wird schnell lästig. `Dist::Zilla` automatisiert diese Vorgänge. In diesem Artikel gebe ich einen Überblick über den Zweck von `Dist::Zilla` und zeige einen Einstieg in dessen Verwendung.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-06-08-einfa14hrung-in-distzilla</id>
    <published>2022-06-08T10:00:00Z</published>
    <updated>2022-06-08T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Robo-Promoting Perl</title>
    <link rel="alternate" href="https://dev.to/davorg/robo-promoting-perl-3i5m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Last I was fascinated by Simon Willison's article <a href="https://simonwillison.net/2022/May/31/a-datasette-tutorial-written-by-gpt-3/">A Datasette tutorial written by GPT-3</a>. <a href="https://datasette.io/">Datasette</a> is a project I've been following for a while now. It's tool for exploring data stored in SQLite databases. <a href="https://beta.openai.com/docs/engines/gpt-3">GPT-3</a> was new to me, but it seems it's an AI for writing articles from simple text prompts. I had a quick look at the web page for it, but couldn't find any obvious way to actually try it out, so I filed it away to investigate further at some point in the future.</p>

<p>But today, I saw another article by Simon called <a href="http://simonwillison.net/2022/Jun/5/play-with-gpt3/">How to play with the GPT-3 language model</a> which gave basic instructions on getting going on the system. And within a couple of minutes I was ready to go.</p>

<p>I seeded the text input with the phrase "Write an article about why Perl is popular" and pressed the submit button. Here's the text I got back:</p>

<blockquote>
<p>Perl is a high-level, general-purpose, interpreted, dynamic programming language. Perl was originally developed by Larry Wall in 1987 as a general-purpose Unix scripting language to make report processing easier. Since then, it has undergone many changes and revisions and become widely popular among programmers. Perl is often used for system administration, web development, network programming, and GUI development.</p>

<p>Perl's popularity can be attributed to its many features, which make it both powerful and easy to use. Perl's syntax is very concise and easy to read, making it a great choice for beginners. Perl also has excellent support for text processing, which is one of its most commonly used applications. Additionally, Perl's extensive library of modules makes it easy to add new functionality to Perl programs.</p>

<p>Perl is also very portable, meaning it can run on a wide variety of platforms. Perl is available for many operating systems, including Windows, Linux, and Mac OS. This portability makes it a great choice for developing cross-platform applications.</p>

<p>Overall, Perl's popularity is due to its many features that make it a powerful and easy-to-use programming language. Perl's text processing capabilities, portability, and large module library make it a great choice</p>
</blockquote>

<p>And that looks pretty good to me. It simply and effectively ticks all the boxes on my "why I use Perl" list.</p>

<p>Of course, I'm not seriously suggesting that we use AI to write a marketing campaign for Perl. But I do think it's an easy way to get a start on promotional material that you can then clean up yourself.</p>

<p>What do you think? Can you think of a way to use this software?</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/robo-promoting-perl-3i5m</id>
    <published>2022-06-07T19:56:50Z</published>
    <updated>2022-06-07T19:56:50Z</updated>
    <category term="perl"/>
    <category term="ai"/>
    <category term="marketing"/>
  </entry>
  <entry>
    <title>#567 - What is in Perl v5.36</title>
    <link rel="alternate" href="https://perlweekly.com/archive/567.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Two weeks ago I asked you to show your support of the newsletter by supporting <a href="https://www.patreon.com/manwar/">Manwar via Patreon</a>. 2 people added their support. Let me thank the two of you and to all the others who were already supporting him or me!</p>
<p>However, I also have to say I am utterly disappointed. There are 4,700 subscribers and only 25 who would support Manwar?</p>
<p>There is a recurring discussion on why Perl is disappearing. This is part of it. Very few people contribute to the Perl ecosystem.</p>
<p>I get it, not everyone feels up to the task of maintaining a CPAN module or writing an article. Not everyone has the time for these. That's fine. In that case giving 5-10 USD a month to someone who does a huge amount of work would be a very easy way to show your support and help the Perl ecosystem.</p>
<p>Or have you already totally given up on Perl?</p>
<p>Enjoy your week</p></div>
    </content>
    <id>https://perlweekly.com/archive/567.html</id>
    <published>2022-06-06T10:00:00Z</published>
    <updated>2022-06-06T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A Dockerfile for Perl 5.36 / Alpine, with working SSL</title>
    <link href="http://domm.plix.at/perl/2022_06_dockerfile_for_perl_5_36.html"/>
    <id>http://domm.plix.at/perl/2022_06_dockerfile_for_perl_5_36.html</id>
    <updated>2022-06-05T18:34:33+00:00</updated>
    <category term="perl"/>
    <summary type="html">A new and shiny version of Perl, 5.36 has been released last week. It contains a lot of very nice improvements and new features. As I'm also currently starting a fresh project, I decided it's a good ...</summary>
    <content type="html">&lt;p&gt;A new and shiny version of Perl, &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2022/05/msg263783.html"&gt;5.36&lt;/a&gt; has been released last week. It contains a lot of &lt;a href="https://metacpan.org/pod/release/RJBS/perl-5.36.0/pod/perldelta.pod"&gt;very nice improvements and new features&lt;/a&gt;. As I'm also currently starting a fresh project, I decided it's a good time to build a new docker (in fact podman) base image to use for some new apps / scripts etc.&lt;/p&gt;

&lt;p&gt;Spoiler: Here's my (current) final &lt;a href="https://github.com/domm/perl-docker/blob/main/Dockerfile.perl5.36-app-base"&gt;Dockerfile&lt;/a&gt;! Or read on for the long story...&lt;/p&gt;

&lt;p&gt;There are of course &lt;a href="https://hub.docker.com/_/perl"&gt;official Perl Docker images&lt;/a&gt; available, in two variants: There is &lt;code&gt;perl:5.36.0&lt;/code&gt; and &lt;code&gt;perl:5.36.0-slim&lt;/code&gt;. The first one is nearly 900MB big, while &lt;code&gt;slim&lt;/code&gt; is slimmer with 144MB. I &lt;a href="https://domm.plix.at/talks/writing_a_good_dockerfile_for_perl_app.html"&gt;don't like big images&lt;/a&gt;, so I first tried &lt;code&gt;slim&lt;/code&gt;, but it is so slim because it's rather unusable.&lt;/p&gt;

&lt;h4&gt;The curse of Net::SSLeay&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/dist/Net-SSLeay"&gt;Net::SSLeay&lt;/a&gt; allows you to use openssl in your web clients, and as most &lt;span class="caps"&gt;API&lt;/span&gt;s run on &lt;code&gt;https&lt;/code&gt;, it is an absolute required module for all of my projects (a lot of which are web &lt;span class="caps"&gt;API &lt;/span&gt;clients). It is not that easy to install, because it needs some &lt;code&gt;openssl&lt;/code&gt; header files to compile. And those are missing in &lt;code&gt;perl:5.36.0-slim&lt;/code&gt; (to keep it slim..)&lt;/p&gt;

&lt;p&gt;But let's give it a try and build an image based on a very simple &lt;a href="https://github.com/domm/perl-docker/blob/main/Dockerfile.5.36-slim"&gt;Dockerfile&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/perl-docker$ docker build -t perl_5_36-slim -f Dockerfile.5.36-slim .
Step 1/1 : FROM perl:5.36-slim
 ---&amp;gt; 0d52cf67797d
Successfully built 0d52cf67797d
Successfully tagged perl_5_36-slim:latest&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at the size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker images --filter=reference='perl_5_36-slim' --format &amp;quot;{{.Repository}} {{.Size}} {{.ID}}&amp;quot;
perl_5_36-slim 144MB 0d52cf67797d&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;144MB, ok, nice. Now let's check &lt;code&gt;Net::SSLeay&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run perl_5_36-slim  perl -MNet::SSLeay -E 'say Net::SSLeay-&amp;gt;VERSION'
Can't locate Net/SSLeay.pm in @INC&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can we install it?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -ti perl_5_36-slim /bin/bash
root@8e4ec3733b01:/# cpanm Net::SSLeay
--&amp;gt; Working on Net::SSLeay
Fetching https://www.cpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.92.tar.gz ... OK
Configuring Net-SSLeay-1.92 ... N/A
! Configure failed for Net-SSLeay-1.92. See /root/.cpanm/work/1654449406.7/build.log for details.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No, why not?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@8e4ec3733b01:/# cat  /root/.cpanm/work/1654449406.7/build.log
******************************************************************************
* COULD NOT FIND LIBSSL HEADERS                                              *
*                                                                            *
* The libssl header files are required to build Net-SSLeay, but they are     *
* missing from /usr. They would typically reside in /usr/include/openssl.    *
*                                                                            *
* If you are using the version of OpenSSL/LibreSSL packaged by your Linux    *
* distribution, you may need to install the corresponding &amp;quot;development&amp;quot;      *
* package via your package manager (e.g. libssl-dev for OpenSSL on Debian    *
* and Ubuntu, or openssl-devel for OpenSSL on Red Hat Enterprise Linux and   *
* Fedora).                                                                   *
******************************************************************************&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But just installing &lt;code&gt;libssl-dev&lt;/code&gt; is not enough, because we need a whole build environment, and all of that stuff takes so much disk space (and installation time) that we might just as well got with the &lt;a href="https://github.com/domm/perl-docker/blob/main/Dockerfile.5.36-fat"&gt;non-slim version&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/perl-docker$ docker build -t perl_5_36-fat -f Dockerfile.5.36-fat .
Step 1/1 : FROM perl:5.36
 ---&amp;gt; 9a373d352e6f
Successfully built 9a373d352e6f
Successfully tagged perl_5_36-fat:latest&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look at the size:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker images --filter=reference='perl_5_36-fat' --format &amp;quot;{{.Repository}} {{.Size}} {{.ID}}&amp;quot;
perl_5_36-fat 891MB 9a373d352e6f&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;891MB - fat indeed. But let's check &lt;code&gt;Net::SSLeay&lt;/code&gt; anyway:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run perl_5_36-fat  perl -MNet::SSLeay -E 'say Net::SSLeay-&amp;gt;VERSION'
Can't locate Net/SSLeay.pm in @INC&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can we install it?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -ti perl_5_36-fat /bin/bash
root@8e4ec3733b01:/# cpanm -n Net::SSLeay
--&amp;gt; Working on Net::SSLeay
Fetching https://www.cpan.org/authors/id/C/CH/CHRISN/Net-SSLeay-1.92.tar.gz ... OK
Configuring Net-SSLeay-1.92 ... OK
Building Net-SSLeay-1.92 ... OK
Successfully installed Net-SSLeay-1.92
1 distribution installed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes! And it works (after also installing IO::Socket::SSL)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@92ef4d4f5cab:/# perl -MHTTP::Tiny -E 'say HTTP::Tiny-&amp;gt;new-&amp;gt;get(&amp;quot;https://domm.plix.at:&amp;quot;)-&amp;gt;{status}'
200&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I could build some custom images based on &lt;code&gt;perl:5.36&lt;/code&gt;. Or ..&lt;/p&gt;

&lt;h4&gt;Build your own&lt;/h4&gt;

&lt;p&gt;I want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a small-ish base image, &lt;/li&gt;
&lt;li&gt;which should include a bunch of &lt;span class="caps"&gt;CPAN &lt;/span&gt;modules I'll use in all projects (this list will grow..)&lt;/li&gt;
&lt;li&gt;I prefer &lt;a href="https://metacpan.org/pod/App::cpm"&gt;cpm&lt;/a&gt; to &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Perl should be installed to &lt;code&gt;/opt&lt;/code&gt; so I can later easily copy the whole installation (in multi stage builds derived from the base image) &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We used &lt;code&gt;alpine&lt;/code&gt; in a few projects, it seems to work, so I'm sticking with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I install a bunch of things we need, most notably &lt;code&gt;zlib&lt;/code&gt; and &lt;code&gt;openssl&lt;/code&gt; (and their &lt;code&gt;-dev&lt;/code&gt; packages)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN apk update &amp;amp;&amp;amp; apk upgrade &amp;amp;&amp;amp; apk add --no-cache \
    curl tar make gcc build-base wget gnupg vim tree bash \
    zlib zlib-dev openssl openssl-dev&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next few lines are lifted from &lt;a href="https://github.com/scottw/alpine-perl/blob/master/Dockerfile"&gt;https://github.com/scottw/alpine-perl/blob/master/Dockerfile&lt;/a&gt;, with a few adaptions (most relevant &lt;code&gt;-Dprefix='/opt/perl'&lt;/code&gt;). I removed the checksum test (and might add it again, now that I got the basic setup working); and I don't run the test suite (I don't have that many idle cycles to burn)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN mkdir -p /usr/src/perl

WORKDIR /usr/src/perl

RUN curl -SLO https://www.cpan.org/src/5.0/perl-5.36.0.tar.gz \
    &amp;amp;&amp;amp; tar --strip-components=1 -xaf perl-5.36.0.tar.gz -C /usr/src/perl \
    &amp;amp;&amp;amp; rm perl-5.36.0.tar.gz \
    &amp;amp;&amp;amp; ./Configure -des \
        -Duse64bitall \
        -Dcccdlflags='-fPIC' \
        -Dcccdlflags='-fPIC' \
        -Dccdlflags='-rdynamic' \
        -Dlocincpth=' ' \
        -Duselargefiles \
        -Dusethreads \
        -Duseshrplib \
        -Dd_semctl_semun \
        -Dusenm \
        -Dprefix='/opt/perl' \
    &amp;amp;&amp;amp; make -j$(nproc) \
    &amp;amp;&amp;amp; make install \
    &amp;amp;&amp;amp; rm -fr /usr/src/perl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I change the working directory to &lt;code&gt;/opt/perl&lt;/code&gt; and add it to the &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WORKDIR /opt/perl
ENV PATH=&amp;quot;/opt/perl/bin:${PATH}&amp;quot;
RUN cd /opt/perl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally I download a copy &lt;code&gt;cpm&lt;/code&gt; into &lt;code&gt;/tmp/cmp&lt;/code&gt; and use it to properly install &lt;code&gt;App::cpm&lt;/code&gt;, &lt;code&gt;IO::Socket::SSL&lt;/code&gt; (which will pull in &lt;code&gt;Net::SSLeay&lt;/code&gt;), and other stuff I'm bound to need&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN curl -o /tmp/cpm -sL --compressed https://git.io/cpm \
    &amp;amp;&amp;amp; chmod 755 /tmp/cpm \
    &amp;amp;&amp;amp; /tmp/cpm install -g App::cpm IO::Socket::SSL Cpanel::JSON::XS \
    &amp;amp;&amp;amp; rm -fr /root/.perl-cpm&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, let's run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t perl_5_36-custom -f Dockerfile.perl5.36-app-base .
Step 1/9 : FROM alpine
 ---&amp;gt; e66264b98777
Step 2/9 : RUN apk update &amp;amp;&amp;amp; apk upgrade &amp;amp;&amp;amp; apk add --no-cache curl tar make gcc build-base wget gnupg vim t...
 ---&amp;gt; ed8080081bc4
Step 3/9 : RUN mkdir -p /usr/src/perl
 ---&amp;gt; 7bab08167507
Step 4/9 : WORKDIR /usr/src/perl
 ---&amp;gt; f9ccbaa25578
Step 5/9 : RUN curl -SLO https://www.cpan.org/src/5.0/perl-5.36.0.tar.gz     &amp;amp;&amp;amp; tar --strip-components=1 -xa...
 ---&amp;gt; ccb8e8a97ad8
Step 6/9 : WORKDIR /opt/perl
 ---&amp;gt; 94356542d4ed
Step 7/9 : ENV PATH=&amp;quot;/opt/perl/bin:${PATH}&amp;quot;
 ---&amp;gt; f3c1c9451e40
Step 8/9 : RUN cd /opt/perl
 ---&amp;gt; bc651d01629c
Step 9/9 : RUN curl -o /tmp/cpm -sL --compressed https://git.io/cpm     &amp;amp;&amp;amp; chmod 755 /tmp/cpm     &amp;amp;&amp;amp; /tmp/cp...
 ---&amp;gt; f6d98e961143
Successfully built f6d98e961143
Successfully tagged perl_5_36-custom:latest&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How big is it?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/perl-docker$ docker images --filter=reference='perl_5_36-custom' --format &amp;quot;{{.Repository}} {{.Size}} {{.ID}}&amp;quot;
perl_5_36-custom 300MB f6d98e961143&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;300MB, not that bad (and could probably be improved later). Do we have &lt;code&gt;Net::SSLeay&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run perl_5_36-custom  perl -MNet::SSLeay -E 'say Net::SSLeay-&amp;gt;VERSION'
1.92&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice, Net::SSLeay is installed! But does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run perl_5_36-custom perl -MHTTP::Tiny -E 'say HTTP::Tiny-&amp;gt;new-&amp;gt;get(&amp;quot;https://domm.plix.at:&amp;quot;)-&amp;gt;{status}'
200&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes!!&lt;/p&gt;

&lt;p&gt;Now the next steps are to build a Dockerfile for an actual app that's based on this image.&lt;/p&gt;

&lt;p&gt;You can find the whole Dockerfile &lt;a href="https://github.com/domm/perl-docker"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you have any suggestions or questions, drop me a line!&lt;/p&gt;</content>
    <category term="docker"/>
  </entry>
  <entry>
    <title>Circular Primes and Getting Complex</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/06/05#pwc167" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find out first 10 circular primes having at least 3 digits (base 10).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use Math::Primality qw/is_prime/;

sub is_circular_prime{
    my($x, $circular) = @_;
    my @digits = split(//, $x);
    my @rotations;
    for my $i (0 .. @digits - 1){
        @digits = (@digits[1 .. @digits - 1], $digits[0]);
        my $candidate = join("", @digits) + 0;
        push @rotations, $candidate;
        return false if !is_prime($candidate);
    }
    map{$circular-&gt;{$_} = -1} @rotations;
    return true;
}

sub first_n_circular_primes{
    my($n) = @_;
    my $i = 100;
    my %circular;
    my @circular_primes;
    {
        if(!$circular{$i} &amp;&amp; is_circular_prime($i, \%circular)){
            push @circular_primes, $i; 
        }
        $i++;
        redo if @circular_primes &lt; $n;
    }
    return @circular_primes;
}

sub first_10_circular_primes{
    return first_n_circular_primes(10);
}

MAIN:{
    print join(", ", first_10_circular_primes()) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
113, 197, 199, 337, 1193, 3779, 11939, 19937, 193939, 199933
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is a bit of a trick here where we need to disallow repeated use of previous cycles.
For example, 199 and 919 and considered to be the same circular prime (we count the first 
occurrence only) since 919 is a rotation of 199. &lt;/p&gt;

&lt;p&gt;I don't ordinarily use a lot of references, especially hash references, in my Perl code 
but here it seems appropriate. It makes sense to break the rotating and primality checking
to it's own function but we also need to track all the unique rotations. Wishing to avoid
a global variable, which in this case wouldn't be all that bad anyway, having a single
hash owned by the caller and updated by the primality checking function makes the most
sense to me. The code is arguably cleaner then if we had multiple return values, to 
include the rotations. Another option, which would have avoided the use of a reference
and multiple return values would have been to have &lt;code&gt;is_circular_prime&lt;/code&gt; return either 
&lt;code&gt;undef&lt;/code&gt; or an array containing the rotations. This would have added a little extra 
bookkeeping code to &lt;code&gt;first_n_circular_primes&lt;/code&gt; in order to maintain the master list of all 
seen rotations so I considered it, simply as a matter of style, to be just a little less
elegant than the use of the reference.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Implement a subroutine gamma() using the Lanczos approximation method.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;
use Math::Complex;

use constant EPSILON =&gt; 1e-07;

sub lanczos{
    my($z) = @_;
    my @p = (676.5203681218851, -1259.1392167224028, 771.32342877765313, -176.61502916214059, 12.507343278686905, -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7);
    my $y;
    $z = new Math::Complex($z);
    if(Re($z) &lt; 0.5){
        $y = M_PI / (sin(M_PI * $z) * lanczos(1 - $z));
    }
    else{
        $z -= 1;
        my $x = 0.99999999999980993;
        for my $i (0 .. @p - 1){
            $x += ($p[$i] / ($z + $i + 1));
        }
        my $t = $z + @p - 0.5;
        $y = sqrt(2 * M_PI) * $t ** ($z + 0.5) * exp(-1 * $t) * $x;
    }
    return Re($y) if abs(Im($y)) &lt;= EPSILON;
    return $y;
}

sub gamma{
    return lanczos(@_);
}

MAIN:{
    printf("%.2f\n",gamma(3));
    printf("%.2f\n",gamma(5));
    printf("%.2f\n",gamma(7));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2.00
24.00
720.00
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The code here is based on a Python sample code that accompanies the Wikipedia article and
there really isn't much room for additional stylistic flourishes. Well, maybe that for 
loop could have been a map. For this sort of numeric algorithm there really isn't much 
variation in what is otherwise a fairly raw computation.&lt;/p&gt;

&lt;p&gt;The interesting thing here is that it is by all appearances a faithful representation of 
the Lanczos Approximation and yet the answers seem to siffer from a slight floating point
accuracy issue. That is the expected answers vary from what is computed here by a small
decimal part, apparently anyway. Perl is generally quite good at these sorts of things so
getting to the bottom of this may require a bit more investigation! I wonder if it has to
do with how &lt;code&gt;Math::Complex&lt;/code&gt; handles the real part of the number?&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-167/"&gt;Challenge 167&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Lanczos_approximation"&gt;Lanczos Approximation&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc167</id>
    <published>2022-06-05T10:46:00-04:00</published>
    <updated>2022-06-05T10:46:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Dancer2: Solution: 1 - Counter</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-06-05T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-1-counter"/>  <id>https://perlmaven.com/dancer2-solution-1-counter</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7720471127298565612</id>
    <published>2022-06-04T21:46:00.000+02:00</published>
    <updated>2022-06-04T21:46:33.125+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxcv) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052007&lt;/strong&gt; on 2022-06-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.052006 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Catalyst-Plugin-Session-0.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catalyst::Plugin::Session&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generic Session plugin - ties together server side storage and client side state required to maintain session data. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.43&lt;/strong&gt; on 2022-06-03&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.40 was 7 years, 4 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.88' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.88&lt;/strong&gt; on 2022-06-02&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 6.86 was 6 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Valid-1.203' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Valid&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Check validity of Internet email addresses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.203&lt;/strong&gt; on 2022-05-29&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 1.202 was 5 years, 8 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Log-Log4perl-1.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Log4perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Log4j implementation for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.55&lt;/strong&gt; on 2022-06-01&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 1.54 was 1 year, 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.19' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.19&lt;/strong&gt; on 2022-06-03&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.18 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.34' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.34&lt;/strong&gt; on 2022-05-30&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.33 was 5 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.8005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8005&lt;/strong&gt; on 2022-06-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8004 was 2 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.04&lt;/strong&gt; on 2022-06-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 8 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JLMARTIN/Paws-0.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Paws&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A Perl SDK for AWS (Amazon Web Services) APIs &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.45&lt;/strong&gt; on 2022-06-01&lt;/li&gt;  &lt;li&gt;Votes: 52&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 10 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9601' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9601&lt;/strong&gt; on 2022-06-01&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.96 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-Mechanize-2.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.08&lt;/strong&gt; on 2022-05-30&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 2.07 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7720471127298565612/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/cccxcv-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7720471127298565612"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7720471127298565612"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/cccxcv-12-great-cpan-modules-released.html" title="(cccxcv) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6804208559904938236</id>
    <published>2022-06-04T21:43:00.000+02:00</published>
    <updated>2022-06-04T21:43:00.940+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dix) metacpan weekly report - Getopt::App</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 50&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Getopt::App"&gt;Getopt::App&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/06/04 19:42:03 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Generate::ManifestSkip" target="_blank"&gt;Dist::Zilla::Plugin::Generate::ManifestSkip&lt;/a&gt; - Generate a MANIFEST.SKIP file for your distribution&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::chmod::Recursive" target="_blank"&gt;File::chmod::Recursive&lt;/a&gt; - Run chmod recursively against directories&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Perl" target="_blank"&gt;Linux::Perl&lt;/a&gt; - Linux system calls with pure Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Access" target="_blank"&gt;Plack::Middleware::Access&lt;/a&gt; - Restrict access depending on remote ip or other parameters&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=265)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Archive::Extract" target="_blank"&gt;Archive::Extract&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Archive::Tar::Wrapper" target="_blank"&gt;Archive::Tar::Wrapper&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/boolean" target="_blank"&gt;boolean&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Capture" target="_blank"&gt;CGI::Capture&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::INI" target="_blank"&gt;Config::INI&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN" target="_blank"&gt;CPAN&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/cpan::listchanges" target="_blank"&gt;cpan::listchanges&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::FormValidator" target="_blank"&gt;Dancer2::Plugin::FormValidator&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::PPPort" target="_blank"&gt;Dist::Zilla::Plugin::PPPort&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Sender" target="_blank"&gt;Email::Sender&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::pushd" target="_blank"&gt;File::pushd&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::App" target="_blank"&gt;Getopt::App&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GIS::Distance" target="_blank"&gt;GIS::Distance&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hashids" target="_blank"&gt;Hashids&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::FillInForm" target="_blank"&gt;HTML::FillInForm&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Menlo" target="_blank"&gt;Menlo&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Load" target="_blank"&gt;Module::Load&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=470)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsOffice::Word::HTML::Writer" target="_blank"&gt;MsOffice::Word::HTML::Writer&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Neo4j::Driver" target="_blank"&gt;Neo4j::Driver&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::OpenSSH" target="_blank"&gt;Net::OpenSSH&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager::Scaled" target="_blank"&gt;Parallel::ForkManager::Scaled&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=395)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=226)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Antibot" target="_blank"&gt;Plack::Middleware::Antibot&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/re::engine::RE2" target="_blank"&gt;re::engine::RE2&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/REST::Client" target="_blank"&gt;REST::Client&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=80)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Harness" target="_blank"&gt;Test2::Harness&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Balanced" target="_blank"&gt;Text::Balanced&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Fuzzy" target="_blank"&gt;Text::Fuzzy&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Scraper" target="_blank"&gt;Web::Scraper&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6804208559904938236/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/06/dix-metacpan-weekly-report-getoptapp.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6804208559904938236"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6804208559904938236"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/06/dix-metacpan-weekly-report-getoptapp.html" title="(dix) metacpan weekly report - Getopt::App"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>List of new CPAN distributions – May 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/06/04/list-of-new-cpan-distributions-may-2022/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-PERLANCAR-Test-Misc"&gt;Acme-PERLANCAR-Test-Misc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Test various things&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Addr-MyIP"&gt;Addr-MyIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STEVEB"&gt;STEVEB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Get your public facing IPv4 or IPv6 address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Algorithm-QuadTree-XS"&gt;Algorithm-QuadTree-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BRTASTIC"&gt;BRTASTIC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;XS backend for Algorithm::QuadTree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-DjVuLibre"&gt;Alien-DjVuLibre&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Find or download and install DjVuLibre&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-LZ4"&gt;Alien-LZ4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZMUGHAL"&gt;ZMUGHAL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or build LZ4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-OpenCV"&gt;Alien-OpenCV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZMUGHAL"&gt;ZMUGHAL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Find or build OpenCV computer vision library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-zlib"&gt;Alien-zlib&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZMUGHAL"&gt;ZMUGHAL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or build zlib&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-zstd"&gt;Alien-zstd&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZMUGHAL"&gt;ZMUGHAL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or build zstd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AnyEvent-Sway"&gt;AnyEvent-Sway&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JOHNMERTZ"&gt;JOHNMERTZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.18&lt;/td&gt;
&lt;td&gt;0.18&lt;/td&gt;
&lt;td&gt;communicate with the Sway window manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Cheats"&gt;App-Cheats&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Cheatsheet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Gimei"&gt;App-Gimei&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/YOUPONG"&gt;YOUPONG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;CLI for Data::Gimei&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-MARC-Count"&gt;App-MARC-Count&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Base class and script for creating of some MARC field value unique count.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-MARC-Filter"&gt;App-MARC-Filter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Base class and script for filter MARC records.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-MARC-List"&gt;App-MARC-List&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Base class and script for creating of some MARC field value unique list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Pod"&gt;App-Pod&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;The great new App::Pod!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-pod"&gt;App-pod&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;The great new App::pod!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-winmaildat2tar"&gt;App-winmaildat2tar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/UTASHIRO"&gt;UTASHIRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.99&lt;/td&gt;
&lt;td&gt;0.9902&lt;/td&gt;
&lt;td&gt;Convert winmail.dat (TNEF data) to tentative archive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Array-Sample-SimpleRandom"&gt;Array-Sample-SimpleRandom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Sample elements randomly (with or without replacement)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Array-Sample-WeightedRandom"&gt;Array-Sample-WeightedRandom&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Sample elements randomly, with weights (with or without replacement)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Authen-Pluggable"&gt;Authen-Pluggable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EBRUNI"&gt;EBRUNI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A Perl module to authenticate users via pluggable modules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Author-Daemon"&gt;Author-Daemon&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAEMON"&gt;DAEMON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;daemon&amp;#039;s helpful creations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-Digest-MD5"&gt;Bencher-Scenario-Digest-MD5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;Benchmark Digest::MD5 against md5sum utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-Digest-SHA1"&gt;Bencher-Scenario-Digest-SHA1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Benchmark Digest::SHA1 against Digest::SHA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-File-Which-Cached"&gt;Bencher-Scenario-File-Which-Cached&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Benchmark File::Which::Cached&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-IPC-System-Options"&gt;Bencher-Scenario-IPC-System-Options&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.040&lt;/td&gt;
&lt;td&gt;0.040&lt;/td&gt;
&lt;td&gt;Measure the overhead of IPC::System::Options&amp;#039;s system()over CORE::system()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-List-MoreUtils"&gt;Bencher-Scenario-List-MoreUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.041&lt;/td&gt;
&lt;td&gt;0.041&lt;/td&gt;
&lt;td&gt;Benchmark List::MoreUtils::PP vs List::MoreUtils::XS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenarios-Crypt-Diceware-Wordlist"&gt;Bencher-Scenarios-Crypt-Diceware-Wordlist&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Benchmark Crypt::Diceware::Wordlist modules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CGI-Application-Plugin-RunmodeParseKeyword"&gt;CGI-Application-Plugin-RunmodeParseKeyword&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RHESA"&gt;RHESA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10_01&lt;/td&gt;
&lt;td&gt;0.14&lt;/td&gt;
&lt;td&gt;Declare cgiapp runmodes with keywords&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CPAN-Test-Dummy-Perl5-MakeMakerBadName"&gt;CPAN-Test-Dummy-Perl5-MakeMakerBadName&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MIYAGAWA"&gt;MIYAGAWA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Bad NAME in Makefile.PL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Catalyst-Model-MetaCPAN-Client"&gt;Catalyst-Model-MetaCPAN-Client&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Catalyst Model for MetaCPAN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Catalyst-Plugin-CSRFToken"&gt;Catalyst-Plugin-CSRFToken&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;Generate tokens to help prevent CSRF attacks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Catalyst-Plugin-SocialMeta"&gt;Catalyst-Plugin-SocialMeta&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Generate social media meta tags for your catalyst application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Catalyst-View-BasePerRequest"&gt;Catalyst-View-BasePerRequest&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Catalyst base view for per request, strongly typed templates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Console-Blackjack"&gt;Console-Blackjack&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GDONALD"&gt;GDONALD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;A console-based implementation of Blackjack&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Cron-Sequencer"&gt;Cron-Sequencer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NWCLARK"&gt;NWCLARK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;show the sequence of commands that cron would run&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Crypt-Noise"&gt;Crypt-Noise&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABBYPAN"&gt;ABBYPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Noise protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBIx-Class-TemporalRelations"&gt;DBIx-Class-TemporalRelations&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GEEKRUTH"&gt;GEEKRUTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.9000&lt;/td&gt;
&lt;td&gt;0.9000&lt;/td&gt;
&lt;td&gt;Establish and introspect time-based relationships between tables.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-Auth-Extensible-Provider-DBIxClass"&gt;Dancer2-Plugin-Auth-Extensible-Provider-DBIxClass&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GEEKRUTH"&gt;GEEKRUTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0900&lt;/td&gt;
&lt;td&gt;0.0902&lt;/td&gt;
&lt;td&gt;authenticate via the Dancer2::Plugin::DBIx:Class plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Debug-CodeBlock"&gt;Debug-CodeBlock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Add DEBUG codeblocks to your code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Excel-Writer-XLSX-Simple-Tabs"&gt;Excel-Writer-XLSX-Simple-Tabs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Simple Interface to the Excel::Writer::XLSX Package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ExtUtils-MakeMaker-META_MERGE-GitHub"&gt;ExtUtils-MakeMaker-META_MERGE-GitHub&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Perl package to generate ExtUtils::MakeMaker META_MERGE for GitHub repositories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/File-KDBX"&gt;File-KDBX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CCM"&gt;CCM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.800&lt;/td&gt;
&lt;td&gt;0.903&lt;/td&gt;
&lt;td&gt;Encrypted database to store secret text and files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/File-KDBX-XS"&gt;File-KDBX-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CCM"&gt;CCM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;Speed up File::KDBX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/File-KeePass-Agent-KDBX"&gt;File-KeePass-Agent-KDBX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CCM"&gt;CCM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;0.902&lt;/td&gt;
&lt;td&gt;A KeePass 2 agent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/File-KeePass-KDBX"&gt;File-KeePass-KDBX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CCM"&gt;CCM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.900&lt;/td&gt;
&lt;td&gt;0.902&lt;/td&gt;
&lt;td&gt;Read and write KDBX files (using the File::KDBX backend)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config-Connector"&gt;Firewall-Config-Connector&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config-Content"&gt;Firewall-Config-Content&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config-Dao"&gt;Firewall-Config-Dao&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config-Element"&gt;Firewall-Config-Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config-Parser"&gt;Firewall-Config-Parser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Controller"&gt;Firewall-Controller&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-DBI"&gt;Firewall-DBI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;turns baubles into trinket&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-FireFlow-Config"&gt;Firewall-FireFlow-Config&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Policy-Designer"&gt;Firewall-Policy-Designer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Policy-Element"&gt;Firewall-Policy-Element&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Utils"&gt;Firewall-Utils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GitHub-EmptyRepository"&gt;GitHub-EmptyRepository&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.00001&lt;/td&gt;
&lt;td&gt;0.00002&lt;/td&gt;
&lt;td&gt;Scan for empty repositories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTTP-SecureHeaders"&gt;HTTP-SecureHeaders&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;manage security headers with many safe defaults&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Imager-File-AVIF"&gt;Imager-File-AVIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONYC"&gt;TONYC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;AVIF image file support for Imager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Irssi-Bot-BasicBot-Pluggable"&gt;Irssi-Bot-BasicBot-Pluggable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ANEI"&gt;ANEI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;Run Bot::BasicBot::Pluggable::Module_s in Irssi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JSON-UnblessObject"&gt;JSON-UnblessObject&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;unbless object using JSON spec like Cpanel::JSON::XS::Type&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/JavaScript-Embedded"&gt;JavaScript-Embedded&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CAVAC"&gt;CAVAC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v2.7.0&lt;/td&gt;
&lt;td&gt;v2.7.0&lt;/td&gt;
&lt;td&gt;Perl interface to Duktape embeddable javascript engine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Jenkins-i18n"&gt;Jenkins-i18n&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARFREITAS"&gt;ARFREITAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;functions for the jtt CLI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LaunchDarkly-Server"&gt;LaunchDarkly-Server&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MTIRPAK"&gt;MTIRPAK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Perl server side SDK for LaunchDarkly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Map-Tube-Hongkong"&gt;Map-Tube-Hongkong&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CYFUNG"&gt;CYFUNG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;v0.04.1&lt;/td&gt;
&lt;td&gt;Map::Tube::Hongkong &amp;#8211; interface to the Hongkong MTR map.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mardem-RefactoringPerlCriticPolicies"&gt;Mardem-RefactoringPerlCriticPolicies&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MARDEM"&gt;MARDEM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Some Perl::Critic::Policies to search for needed refactoring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Math-FakeDD"&gt;Math-FakeDD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SISYPHUS"&gt;SISYPHUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;DoubleDouble precision arithmetic for all architectures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Math-Round-SignificantFigures"&gt;Math-Round-SignificantFigures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl package for rounding numbers to a specified number of Significant Figures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Method-Signatures-Simple-ParseKeyword"&gt;Method-Signatures-Simple-ParseKeyword&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RHESA"&gt;RHESA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.11&lt;/td&gt;
&lt;td&gt;1.12&lt;/td&gt;
&lt;td&gt;Basic method declarations with signatures, without source filters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Module-ScanDeps-Static"&gt;Module-ScanDeps-Static&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGFOOT"&gt;BIGFOOT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;scan modules for dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Monitoring-Sneck-Boop_Snoot"&gt;Monitoring-Sneck-Boop_Snoot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;Boop the Monitoring::Sneck&amp;#039;s snoot via SNMP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Keyword"&gt;MooX-Keyword&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;The great new MooX::Keyword!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooseX-Extended"&gt;MooseX-Extended&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Extend Moose with safe defaults and useful features&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooseX-Role-WarnOnConflict"&gt;MooseX-Role-WarnOnConflict&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Warn if classes override role methods without excluding them&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-DynDNS-GoDaddy"&gt;Net-DynDNS-GoDaddy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STEVEB"&gt;STEVEB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Provides Dynamic DNS functionality for your GoDaddy domains&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-MitDK"&gt;Net-MitDK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KARASIK"&gt;KARASIK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;perl API for &lt;a href="http://mit.dk/" rel="nofollow"&gt;http://mit.dk/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Number-Equation"&gt;Number-Equation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Track how a number is calculated progamically.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Octets-To-Unicode"&gt;Octets-To-Unicode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DART"&gt;DART&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;&amp;ETH;&amp;frac14;&amp;ETH;&amp;frac34;&amp;ETH;&amp;acute;&amp;Ntilde;&amp;#402;&amp;ETH;&amp;raquo;&amp;Ntilde;&amp;#338; &amp;Ntilde;&amp;#402;&amp;Ntilde;&amp;#8218;&amp;ETH;&amp;cedil;&amp;ETH;&amp;raquo;&amp;ETH;&amp;cedil;&amp;Ntilde;&amp;#8218; &amp;ETH;&amp;acute;&amp;ETH;&amp;raquo;&amp;Ntilde; &amp;Ntilde;&amp;#8364;&amp;ETH;&amp;deg;&amp;Ntilde;&amp;ETH;&amp;iquest;&amp;ETH;&amp;frac34;&amp;ETH;&amp;middot;&amp;ETH;&amp;frac12;&amp;ETH;&amp;deg;&amp;ETH;&amp;sup2;&amp;ETH;&amp;deg;&amp;ETH;&amp;frac12;&amp;ETH;&amp;cedil;&amp;Ntilde; &amp;ETH;&amp;ordm;&amp;ETH;&amp;frac34;&amp;ETH;&amp;acute;&amp;ETH;&amp;cedil;&amp;Ntilde;&amp;#8364;&amp;ETH;&amp;frac34;&amp;ETH;&amp;sup2;&amp;ETH;&amp;ordm;&amp;ETH;&amp;cedil; &amp;Ntilde;&amp;#8218;&amp;ETH;&amp;micro;&amp;ETH;&amp;ordm;&amp;Ntilde;&amp;Ntilde;&amp;#8218;&amp;ETH;&amp;deg; (&amp;ETH;&amp;sup2; &amp;Ntilde;&amp;#8218;&amp;ETH;&amp;frac34;&amp;ETH;&amp;frac14; &amp;Ntilde;&amp;#8225;&amp;ETH;&amp;cedil;&amp;Ntilde;&amp;ETH;&amp;raquo;&amp;ETH;&amp;micro; &amp;ETH;&amp;sup2; &amp;Ntilde;&amp;#8222;&amp;ETH;&amp;deg;&amp;ETH;&amp;sup1;&amp;ETH;&amp;raquo;&amp;ETH;&amp;deg;&amp;Ntilde;&amp;#8230;) &amp;ETH;&amp;cedil; &amp;ETH;&amp;micro;&amp;ETH;&amp;sup3;&amp;ETH;&amp;frac34; &amp;ETH;&amp;acute;&amp;ETH;&amp;micro;&amp;ETH;&amp;ordm;&amp;ETH;&amp;frac34;&amp;ETH;&amp;acute;&amp;ETH;&amp;cedil;&amp;Ntilde;&amp;#8364;&amp;ETH;&amp;frac34;&amp;ETH;&amp;sup2;&amp;ETH;&amp;deg;&amp;ETH;&amp;frac12;&amp;ETH;&amp;cedil;&amp;Ntilde;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Perl-Critic-Mardem"&gt;Perl-Critic-Mardem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MARDEM"&gt;MARDEM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Some Perl::Critic::Policies to search for needed refactoring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Plack-App-Tags-HTML"&gt;Plack-App-Tags-HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Plack application for running Tags::HTML objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Plack-Middleware-SecureHeaders"&gt;Plack-Middleware-SecureHeaders&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;manage security headers middleware&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Plack-Middleware-ValidateJSON"&gt;Plack-Middleware-ValidateJSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MHANDISI"&gt;MHANDISI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Checks validity of JSON POST&amp;#039;d to a Plack app and generates an error response if the JSON is not valid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pod-LOL"&gt;Pod-LOL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Transform POD into a list of lists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pod-Query"&gt;Pod-Query&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;Query pod documents&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Regexp-Pattern-Filename-Image-WhatsApp"&gt;Regexp-Pattern-Filename-Image-WhatsApp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Image filename saved by WhatsApp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Regexp-Pattern-Filename-Media-WhatsApp"&gt;Regexp-Pattern-Filename-Media-WhatsApp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Media (video, image) filename saved by WhatsApp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Regexp-Pattern-Filename-Video-WhatsApp"&gt;Regexp-Pattern-Filename-Video-WhatsApp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Video filename saved by WhatsApp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-IO"&gt;SPVM-IO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;I/O modules for File, Socket, select/polling.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-IO-File"&gt;SPVM-IO-File&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;File Input/Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-MIME-Base64"&gt;SPVM-MIME-Base64&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Base64 encode/decode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Sagan-Monitoring"&gt;Sagan-Monitoring&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;LibreNMS JSON SNMP extend and Nagios style check for Sagan stats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Sys-OsPackage"&gt;Sys-OsPackage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/IKLUFT"&gt;IKLUFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;0.1.6&lt;/td&gt;
&lt;td&gt;install OS packages and determine if CPAN modules are packaged for the OS &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Term-hr"&gt;Term-hr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Color screen output using extended escape sequences&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TimTools"&gt;TimTools&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Some common functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tk-GtkSettings"&gt;Tk-GtkSettings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/HANJE"&gt;HANJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Give Tk applications the looks of Gtk applications&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/YAML-YAML2ADoc"&gt;YAML-YAML2ADoc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BZP"&gt;BZP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;Something like yaml2rst but for AsciiDoc and in Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;96&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;43&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TIMKA"&gt;TIMKA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CCM"&gt;CCM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZMUGHAL"&gt;ZMUGHAL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STEVEB"&gt;STEVEB&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RHESA"&gt;RHESA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/OVID"&gt;OVID&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MARDEM"&gt;MARDEM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GEEKRUTH"&gt;GEEKRUTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BIGFOOT"&gt;BIGFOOT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABBYPAN"&gt;ABBYPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ANEI"&gt;ANEI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BRTASTIC"&gt;BRTASTIC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/UTASHIRO"&gt;UTASHIRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ARFREITAS"&gt;ARFREITAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAEMON"&gt;DAEMON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CYFUNG"&gt;CYFUNG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CAVAC"&gt;CAVAC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BZP"&gt;BZP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DART"&gt;DART&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EBRUNI"&gt;EBRUNI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MTIRPAK"&gt;MTIRPAK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KARASIK"&gt;KARASIK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MHANDISI"&gt;MHANDISI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/HANJE"&gt;HANJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NWCLARK"&gt;NWCLARK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/YOUPONG"&gt;YOUPONG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MIYAGAWA"&gt;MIYAGAWA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CONTRA"&gt;CONTRA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONYC"&gt;TONYC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JOHNMERTZ"&gt;JOHNMERTZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SISYPHUS"&gt;SISYPHUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GDONALD"&gt;GDONALD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/IKLUFT"&gt;IKLUFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-PERLANCAR-Test-Misc PERLANCAR 0.001 0.002 Test various things Addr-MyIP STEVEB 0.05 0.05 Get your public facing IPv4 or IPv6 address Algorithm-QuadTree-XS BRTASTIC 0.01 0.02 XS backend for Algorithm::QuadTree Alien-DjVuLibre SKIM 0.01 0.04 Find or download and install DjVuLibre Alien-LZ4 ZMUGHAL 0.01 0.01 Find or build LZ4 Alien-OpenCV ZMUGHAL 0.001 0.001 Find … <a href="https://perlancar.wordpress.com/2022/06/04/list-of-new-cpan-distributions-may-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – May 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1990</id>
    <published>2022-06-04T02:52:52Z</published>
    <updated>2022-06-04T02:52:52Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>TPRC June Newsletter</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-newsletter-2022-06-02"/>
  <id>tag:news.perlfoundation.org,2022-06-02:/post/tprc-newsletter-2022-06-02</id>
  <published>2022-06-02T18:09:39</published>
  <updated>2022-06-02T18:09:39</updated>
  <summary>
  <![CDATA[
     * Plan your Stay
* Stay Connected
* Setup your Schedule
* Call for Volunteers
* Standards of Conduct
* Sponsor
* Lighting Talks

   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7469947eebbc216279ae56de86be9e3ba2de6b0d/logo-square-transparent (1).png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h3>Time to Pack</h3>

<ul>
<li>Plan your Stay</li>
<li>Stay Connected</li>
<li>Setup your Schedule</li>
<li>Call for Volunteers</li>
<li>Standards of Conduct</li>
<li>Sponsor</li>
<li>Lighting Talks</li>
<li>How to Reach Organizers</li>
</ul>

<h1>Welcome June! Hello Perl &amp; Raku Conference!</h1>

<p>Summer is here and brings with it a new in person <strong><a href="https://perlconference.us/">Perl &amp; Raku Conference</a></strong> in <strong>Houston</strong> from <strong>Tuesday June 21st</strong> to <strong>Friday June 25th</strong>.</p>

<p>Talks start on Wednesday 22 morning at 9:30 am. Come earlier to <strong>share a breakfast</strong> together and <strong>meet people</strong> from the community. </p>

<p>During the conference you can attend presentations covering Perl, Raku and supporting languages. You can also join us to one of the Hackathon sessions or subscribe to one of the classes organized the day before and the day after the talks.</p>

<p><strong>June 21:</strong>
* Creative, Compelling, and Confident: Becoming a Better Public Speaker
* ~~Intro to Perl for existing coders~~ This class is now canceled.</p>

<p><strong>June 25:</strong>
* Introduction to Go
* Oh Snap, I'm management. Now what?</p>

<p>Space is limited for these masterclasses. Be sure to register for them while registering for the conference: <a href="https://tprc2022.sched.com/tickets">https://tprc2022.sched.com/tickets</a></p>

<h2>Plan Your Stay</h2>

<p><strong>Where:</strong> <a href="https://goo.gl/maps/Ld3CHR9guUjYMEKr8">The Hilton Houston North</a>, 12400 Greenspoint Dr, Houston, TX 77060.
<strong>Register:</strong> for the conference by going to <a href="https://tprc2022.sched.com/tickets">https://tprc2022.sched.com/tickets</a>
<strong>Stay:</strong> Part of the conference is paid for by room reservations. We have negotiated discount rates through the hotel: <a href="https://tprc.us/hotel">https://tprc.us/hotel</a>.
<strong>Travel:</strong> Houston has two airports. We recommend traveling to George Bush Airport (IAH) if you have a choice. Hobby Airport (HOU) is on the other side of the city and requires additional travel after you land.
<strong>Free Airport Shuttle</strong>: Hilton Houston North provides shuttles to and from IAH. Call the main number to request the shuttle: 281-875-2222</p>

<h2>Stay Connected</h2>

<p>During the conference you can stay connected using the <a href="https://kyzn.org/posts/how-to-join-yapc-on-irc-perl-org/">#yapc channel</a> on irc.perl.org.
You can also join the perlfoundation on Slack in #perl. <a href="https://tprc.us/tprc-2022-hou/keep-in-touch/">Contact us</a> with your email address and we can send you an invite.</p>

<p>On social media you can track the event using the <strong>#TPRCHouston</strong> tag for <em>The Perl and Raku Conference in Houston</em>. You can also follow us via <a href="https://twitter.com/PerlConferences">@PerlConferences</a> on Twitter.
Another great source of information is provided via the <a href="https://tprc.us/wiki">Conference Wiki</a>. </p>

<p>Multiple In-Persons events are organized before/during and after the conference.
Browsing the wiki you will be able to find more details about such activities like:
* Arrival (and Alt) Dinner
* Hackathons
* BOFs aka Birds of a Feather
  * Bad Movie Night
  * Raku
  * Perl Mongeresses
  * Baseball: Astros vs Mets on Tuesday
  * Rock Climbing
  * Karaoke
* Board Games Night: bring your favorite game and play with attendees!
* Post Conference activities</p>

<p>More useful information will be added to the wiki during the conference.</p>

<p>Do not forget to visit <a href="https://perlconference.us/">The Perl and Raku Conference website</a>: https://perlconference.us/</p>

<h2>Setup your Sched(ule)</h2>

<p>All talks and classes are listed on <a href="https://tprc2022.sched.com">sched website</a>. It’s highly recommended that you create an account on sched to organize your conference.</p>

<p>Sched Website for 2022: <a href="https://tprc2022.sched.com">https://tprc2022.sched.com</a>
Using a sched account you can bookmark talks you want to attend.
Installing the Sched Mobile App you can be sure to not miss any talks.</p>

<p>Registering to talks via Sched also provides useful information to the organizers to select the best room for the expected audience.</p>

<h2>Standards of Conduct</h2>

<p>Our goal is to provide a place open to everyone driven by respect, collaboration and consideration.</p>

<p>To help us reach that goal we invite you to read the <a href="https://perlconference.us/soc">Standards of Conduct</a> to know the Expected Behavior from every participant but also know how to report incidents if these were to happen.</p>

<p>Let’s build together a friendly, safe and welcoming environment for all.</p>

<h2>Health and Safety</h2>

<p>The safety of our attendees is a top priority for us. We've been away for three years. As we return to in-person conferences, we want to ensure everyone is safe. Houston has moved to <a href="https://covid-harriscounty.hub.arcgis.com/">Level 3</a> “Stay Vigilant”.</p>

<p>Level 3 signifies a moderate, but controlled level of COVID-19. Per our <a href="https://perlconference.us/tprc-2022-hou/health-and-safety/">Health and Safety Policies</a>, attendees should be fully vaccinated.   Fully vaccinated individuals should mask as local rules indicate.</p>

<h2>Call for Volunteers!</h2>

<p>This is your Conference. The conference is run by volunteers. </p>

<p>During the conference we always need some extra hands to help. Several calls for volunteers will be made at the beginning of the conference. Please come and help us.</p>

<p>You can email <a href="mailto:admin@perlconference.us">admin@perlconference.us</a> to volunteer.</p>

<h2>Lighting Talks!</h2>

<p><code>text
I hear the gong a comin'
It's trolling round the room
And I ain't seen the sunshine since I don't know when
I'm stuck in The TPC, and time keeps draggin' on
But that gong keeps a trollin' on the next speaker
</code></p>

<p>Do you have something to say?
Do you know something the whole conference should know?
<a href="https://perlconference.us/lightning">Submit your Lighting Talk</a> now to have 5 minutes in the Big Room.</p>

<h2>How to reach our organizers</h2>

<ul>
<li>Visit our website:  https://tprc.us</li>
<li>Follow us on Twitter: @PerlConferences</li>
<li>Like us on Facebook: The Perl Foundation (@tpf.perl)</li>
<li>Subscribe to the mailing list: https://tprc.us/subscribe</li>
<li>Standard of conducts: https://perlconference.us/soc</li>
<li>Send any questions about The Perl Conference to <a href="mailto:admin@perlconference.us">admin@perlconference.us</a>. An organizer will get back to you.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grants: May 2022 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_may_2022_votes"/>
  <id>tag:news.perlfoundation.org,2022-06-01:/post/grants_may_2022_votes</id>
  <published>2022-06-01T17:55:14</published>
  <updated>2022-06-01T17:55:14</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the May 2022 round. One grant request was submitted: Grant Proposal: Maintaining Perl VOTING RESULTS: Approved. 7 YES votes 0 NO votes, 0 ABSTAIN We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit our donations page. We 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the May 2022 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl_tony_cook_may_2022">Grant Proposal: Maintaining Perl (Tony Cook)</a> (USD 20,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES votes (35 points), 0 NO votes, 0 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl 5.36 is released - warnings enabled, subroutine signatures, try-catch-finally statements, Unicode 14 support</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/perl-536-is-released-warnings-enabled-subroutine-signatures-try-catch-finally-statements-unicode-14-support-kaa" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl 5.36 was released on May 28, 2022. Enabling warnings, subroutine signatures, try-catch-finally statements, Unicode 14 support, and the functions to distinguish between booleans, strings, and numbers.</p>

<p><a href="https://en.perlzemi.com/blog/20220530161828.html">Perl 5.36 is released - warnings enabled, subroutine signatures, try-catch-finally statements, Unicode 14 support</a></p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/perl-536-is-released-warnings-enabled-subroutine-signatures-try-catch-finally-statements-unicode-14-support-kaa</id>
    <published>2022-05-31T08:19:00Z</published>
    <updated>2022-05-31T08:19:00Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Outreachy 2022 - Two Interns Selected</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy2022-interns-selected"/>
  <id>tag:news.perlfoundation.org,2022-05-30:/post/outreachy2022-interns-selected</id>
  <published>2022-05-30T22:08:04</published>
  <updated>2022-05-30T22:08:04</updated>
  <summary>
  <![CDATA[
     I am pleased to announce we accepted two interns, Raquel and Yukti, to this year’s Outreachy internship at Open Food Facts. They will work with the two mentors, Stéphane Gigandet and Alex Garel, to improve the code quality of the Perl code of the Open Food Facts backend and website. This year they plan to focus on improving the Open Food Facts API and its tests and documentation, and refactor 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce we accepted two interns, Raquel and Yukti, to this year’s <a href="https://www.outreachy.org/">Outreachy</a> internship at <a href="https://world.openfoodfacts.org/">Open Food Facts</a>. They will work with the two mentors, Stéphane Gigandet and Alex Garel, to improve the code quality of the Perl code of the Open Food Facts backend and website. This year they plan to focus on improving the Open Food Facts API (used by more than 100 apps to retrieve food product data) and its tests and documentation, and refactor their legacy URL routing code using a framework such as Mojolicious.</p>

<p>Raquel is a medical professional that is looking to learn more about the machines that she has worked with in the lab. Though it is medical, it is very heavily computer based at this point in time. She has experience in phlebotomy for all ages and chemical lab processing diagnostic testing.</p>

<p>Yukti is a university student from India. She has experience with writing code in Python, PHP, Java and has tinkered with some Machine Learning research in her freshman year. She is currently exploring cloud native and web technologies and is really enthusiastic about food. When not doing either of these things, she could be found indulging in the occasional Japanese animation film and manga or exploring the excessively mathematical side of physics.</p>

<p>Open Food Facts is a free, online and crowdsourced database of food products from around the world. Product data and photos are contributed through the Open Food Facts applications, third party applications, or sent by food manufacturers. Open Food Facts then analyze the ingredients, nutrition facts, labels, and packaging of products to compute nutritional or environmental scores such as the Nutri-Score and the Eco-Score. They believe having transparent and accessible information can lead to better food choices with great benefits for health, the planet, science and maybe much more. </p>

<p>Please join me in welcoming Raquel and Yukti to the Perl &amp; Raku community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#566 - v7 &amp; Corinna</title>
    <link rel="alternate" href="https://perlweekly.com/archive/566.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Finally we have yet another feature packed release <strong>Perl v5.36</strong>, thanks to the entire team involved.</p>
<p>Do you want to know all about the latest release? If yes then please refer to the <a href="https://metacpan.org/release/RJBS/perl-5.36.0/view/pod/perldelta.pod">official page</a> for more informations.</p>
<p>The very first question comes to our mind after the <strong>Perl v5.36</strong> release is <strong>What happened to v7?</strong></p>
<p>The Perl Steering Council (PSC) came up with the detailed response about everything including <strong>v7</strong> in the <a href="http://blogs.perl.org/users/psc/2022/05/what-happened-to-perl-7.html">official blog</a> page.</p>
<p>I have been closely following the development of Modern OO in core Perl i.e. <strong>Corinna</strong>. I am now looking forward to the next release i.e. <strong>Perl v5.38</strong>, which is likely to introduce <strong>Corinna</strong>. So the next question, how long is the wait? I am told, we can expect it in about a year time from now. To be honest, I am happy to wait.</p>
<p>Together with <strong>v7</strong> and <strong>Corinna</strong>, I am confident it would bring fresh air and positive energy among the community. I would urge everyone, please don't loose hope and stay strong together.</p>
<p>I am running daily <strong>Perl</strong> feature post sharing the bits that I didn't know before or never used before. It goes back to <strong>Perl v5.10</strong>. It has brought back <strong>Perl</strong> to the discussion table. I have learnt a lot of edge cases about each feature by many experts on various social platforms e.g. <strong>Facebook Groups</strong> like <a href="https://www.facebook.com/groups/perlcommunity">Perl Community</a> and <a href="https://www.facebook.com/groups/perlprogrammers">Perl Programmers</a>. If you are active on <strong>Twitter</strong> then you can follow the <strong>Perl</strong> feature post on my <a href="https://twitter.com/cpan_author">personal twitter handle</a>. If you are interested in the past feature post then you can take a look at my dedicated <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a>. If you have suggestions to improve then please feel free to submit pull request.</p>
<p>We are having week off from school duty as it is school holiday time. Double that up with Queen's Jubilee celebration, wow. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/566.html</id>
    <published>2022-05-30T10:00:00Z</published>
    <updated>2022-05-30T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Solution: 1 - Calculator fixing</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-05-30T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-1-calculator-fixing"/>  <id>https://perlmaven.com/dancer2-solution-1-calculator-fixing</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Auf dem Weg zu Perl 5.36 – gesammelte Werke</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-05-25-auf-dem-weg-zu-perl-536-a-gesammelte-werke" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Zum Abschluss der kleinen Blogpost-Serie ein Artikel der noch ein paar Änderungen aufsammelt, die nicht in die anderen Artikel gepasst haben.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-05-25-auf-dem-weg-zu-perl-536-a-gesammelte-werke</id>
    <published>2022-05-25T10:00:00Z</published>
    <updated>2022-05-25T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Dancer2: Solution: 1 - Calculator</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-05-23T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-1-calculator"/>  <id>https://perlmaven.com/dancer2-solution-1-calculator</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#565 - Supporting the Perl Weekly</title>
    <link rel="alternate" href="https://perlweekly.com/archive/565.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there!&lt;/p&gt;
&lt;p&gt;Two weeks ago I wrote about the issues we are facing with the Perl Weekly. I got a lot of responses and then yesterday I also noticed there were quite few comments on &lt;a href="https://www.reddit.com/r/perl/comments/unb6yd/do_you_want_the_perl_weekly_to_continue/"&gt;Reddit&lt;/a&gt; as well. Let me thank all the responses now.&lt;/p&gt;
&lt;p&gt;Many people suggested that we could switch to sending out every 2 weeks or once a month, but I don't think either of those would be a good idea. Some people suggested we (Mohammad and myself) should write more articles or interview people. Well, no. The Perl Weekly is specifically about collecting &lt;b&gt;your&lt;/b&gt; content and sharing it. So it is the wider Perl community that could solve the content-problem by writing more articles. Which brings me to one of our posts today. Dave Cross had another nice idea, &lt;a href="https://dev.to/davorg/cpan-module-tutorials-2be9"&gt;linking to tutorials of CPAN modules from MetaCPAN&lt;/a&gt;. You don't need to write some article on a topic that has never been mentioned. It would be enough to take one of the modules you use anyway. Put together an example on how to use it. Add some explanations and then post it on your blog. (Which could be very simple using GitHub pages.) Send us the link and also include it in the CSV file of Dave.&lt;/p&gt;
&lt;p&gt;Some people suggested to have a (better) web version and RSS feed. You are welcome to send a PR changing the web version to be better. The source of the Perl Weekly is &lt;a href="https://github.com/szabgab/perlweekly"&gt;here&lt;/a&gt;. We also have two different RSS feeds: &lt;a href="https://perlweekly.com/perlweekly.rss"&gt;latest edition&lt;/a&gt;, &lt;a href="https://perlweekly.com/index.rss"&gt;10 most recent editions&lt;/a&gt;. However these get updated only once a week. If you really like RSS, you might want to use the &lt;a href="https://perl.theplanetarium.org/"&gt;Perl Planetarium&lt;/a&gt; by who else, Dave Cross.&lt;/p&gt;
&lt;p&gt;There was some back-and-forth on Reddit whether the Perl-related Facebook groups are the best thing on earth or the worst thing on Earth. I think both sides are right. On one hand Facebook is a black hole that anything going there is invisible from the outside world - that's why I don't often link to it. On the other hand the &lt;a href="https://www.facebook.com/groups/perlcommunity"&gt;Perl Community&lt;/a&gt; and the &lt;a href="https://www.facebook.com/groups/perlprogrammers/"&gt;Perl programmers&lt;/a&gt; Facebook groups seem to be the most active locations for discussing anything about Perl. So let's thank those Perl Mongers who spend time in these groups helping the newcomers. If I may suggest something, if you are not doing it yet: You could also try to direct them to the Perl Weekly and you could also work with them to set up a public blog (or use &lt;a href="https://dev.to/t/perl"&gt;dev.to&lt;/a&gt;) and write a post about something Perl related.&lt;/p&gt;
&lt;p&gt;Finally, some people suggested to ask for a grant from The Perl Foundation. Here is the thing. Money in itself is not an issue, but feeling that the work we do is appreciated goes a long way. The many responses I got show that there are at least a few people who value our work. Thank you!. However, if the issue of money was already raised you could use some money to show your appreciation. &lt;a href="https://www.patreon.com/manwar"&gt;Mohammad S Anwar&lt;/a&gt; has Patreon account with currently 23 supporters. Can we double this number? I also have a Patreon account, but for me a much better boost would be if you checked out the web-site of my son and became a user and a paying subscriber. It is called &lt;a href="https://torto.ai/welcome?utm_source=perlweekly&amp;utm_medium=email&amp;utm_campaign=perlweekly565"&gt;torto.ai&lt;/a&gt;. That will make me a lot happier than any money you might send to my Patreon account.&lt;/p&gt;
&lt;p&gt;So that's about it for now.&lt;/p&gt;
&lt;p&gt;Enjoy your week!&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/565.html</id>
    <published>2022-05-23T10:00:00Z</published>
    <updated>2022-05-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>SVG Plots of Points and Lines</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/05/22#pwc165" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Plot lines and points in SVG format.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub svg_begin{
    return &lt;&amp;lt;BEGIN;
        &amp;lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&amp;gt;                                   &amp;lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&amp;gt;                                                                          &amp;lt;svg height="100%" width="100%" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&amp;gt;
BEGIN
}

sub svg_end{
    return "&lt;/svg&gt;";
}

sub svg_point{
    my($x, $y) = @_;
    return "&amp;lt;circle cx=\"$x\" cy=\"$y\" r=\"1\" /&amp;gt;";
}

sub svg_line{
    my($x0, $y0, $x1, $y1) = @_;
    return "&amp;lt;line x1=\"$x0\" x2=\"$x1\" y1=\"$y0\" y2=\"$y1\" style=\"stroke:#006600;\" /&amp;gt;";          
}

sub svg{
    my @lines = @_;
    my $svg = svg_begin;
    for my $line (@_){
        $svg .= svg_point(@{$line}) if @{$line} == 2;
        $svg .= svg_line(@{$line})  if @{$line} == 4;
    }
    return $svg . svg_end;
}


MAIN:{
    my @lines;
    while(&lt;DATA&gt;){
        chomp;
        push @lines, [split(/,/, $_)];
    }
    print svg(@lines);
}


__DATA__
53,10
53,10,23,30
23,30
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&amp;gt;                                   &amp;lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&amp;gt;                                                                          &amp;lt;svg height="100%" width="100%" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&amp;gt;
&amp;lt;circle cx="53" cy="10" r="1" /&amp;gt;&amp;lt;line x1="53" x2="23" y1="10" y2="30" /&amp;gt;&amp;lt;circle cx="23" cy="30" r="1" /&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Doing the SVG formatting from scratch is not so bad, especially when sticking only
to points and lines. The boiler plate XML is taken from a known good SVG example
and used as a template. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Compute a linear regression and output an SVG plot of the points and regression line.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub svg_begin{
    return &lt;&amp;lt;BEGIN;
        &amp;lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&amp;gt;                                   &amp;lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&amp;gt;                                                                          &amp;lt;svg height="100%" width="100%" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&amp;gt;
BEGIN
}

sub svg_end{
    return "&lt;/svg&gt;";
}

sub svg_point{
    my($x, $y) = @_;
    return "&amp;lt;circle cx=\"$x\" cy=\"$y\" r=\"1\" /&amp;gt;";
}

sub svg_line{
    my($x0, $y0, $x1, $y1) = @_;
    return "&amp;lt;line x1=\"$x0\" x2=\"$x1\" y1=\"$y0\" y2=\"$y1\" style=\"stroke:#006600;\" /&amp;gt;";          
}

sub svg{
    my @lines = @_;
    my $svg = svg_begin;
    for my $line (@_){
        $svg .= svg_point(@{$line}) if @{$line} == 2;
        $svg .= svg_line(@{$line})  if @{$line} == 4;
    }
    return $svg . svg_end;
}

sub linear_regression{
    my(@points) = @_;
    # 1. Calculate average of your X variable.
    my $sum = 0;
    my $x_avg;
    map{$sum += $_-&gt;[0]} @points;
    $x_avg = $sum / @points;
    # 2. Calculate the difference between each X and the average X.
    my @x_differences = map{$_-&gt;[0] - $x_avg} @points;
    # 3. Square the differences and add it all up. This is Sx.
    my $sx = 0;
    my @squares = map{$_ * $_} @x_differences;
    map{$sx += $_} @squares;
    # 4. Calculate average of your Y variable.
    $sum = 0;
    my $y_avg;
    map{$sum += $_-&gt;[1]} @points;
    $y_avg = $sum / @points;
    my @y_differences = map{$_-&gt;[1] - $y_avg} @points;
    # 5. Multiply the differences (of X and Y from their respective averages) and add them all together.  This is Sxy.
    my $sxy = 0;
    @squares = map {$y_differences[$_] * $x_differences[$_]} 0 .. @points - 1;
    map {$sxy += $_} @squares;
    # 6. Using Sx and Sxy, you calculate the intercept by subtracting Sx / Sxy * AVG(X) from AVG(Y).
    my $m = $sxy / $sx;
    my $y_intercept = $y_avg - ($sxy / $sx * $x_avg);
    my @sorted = sort {$a-&gt;[0] &lt;=&gt; $b-&gt;[0]} @points;
    my $max_x = $sorted[@points - 1]-&gt;[0];
    return [0, $y_intercept, $max_x + 10, $m * ($max_x + 10) + $y_intercept];
}

MAIN:{
    my @points;
    while(&lt;DATA&gt;){
        chomp;
        push @points, [split(/,/, $_)];
    }
    push @points, linear_regression(@points);
    print svg(@points);    
}


__DATA__
333,129
39,189
140,156
292,134
393,52
160,166
362,122
13,193
341,104
320,113
109,177
203,152
343,100
225,110
23,186
282,102
284,98
205,133
297,114
292,126
339,112
327,79
253,136
61,169
128,176
346,72
316,103
124,162
65,181
159,137
212,116
337,86
215,136
153,137
390,104
100,180
76,188
77,181
69,195
92,186
275,96
250,147
34,174
213,134
186,129
189,154
361,82
363,89
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
&amp;lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&amp;gt;
           &amp;lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&amp;gt;
           &amp;lt;svg height="100%" width="100%" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&amp;gt;
&amp;lt;circle cx="333" cy="129" r="1" /&amp;gt;&amp;lt;circle cx="39" cy="189" r="1" /&amp;gt;&amp;lt;circle cx="140" cy="156" r="1" /&amp;gt;&amp;lt;circle cx="292" cy="134" r="1" /&amp;gt;&amp;lt;circle cx="393" cy="52" r="1" /&amp;gt;&amp;lt;circle cx="160" cy="166" r="1" /&amp;gt;&amp;lt;circle cx="362" cy="122" r="1" /&amp;gt;&amp;lt;circle cx="13" cy="193" r="1" /&amp;gt;&amp;lt;circle cx="341" cy="104" r="1" /&amp;gt;&amp;lt;circle cx="320" cy="113" r="1" /&amp;gt;&amp;lt;circle cx="109" cy="177" r="1" /&amp;gt;&amp;lt;circle cx="203" cy="152" r="1" /&amp;gt;&amp;lt;circle cx="343" cy="100" r="1" /&amp;gt;&amp;lt;circle cx="225" cy="110" r="1" /&amp;gt;&amp;lt;circle cx="23" cy="186" r="1" /&amp;gt;&amp;lt;circle cx="282" cy="102" r="1" /&amp;gt;&amp;lt;circle cx="284" cy="98" r="1" /&amp;gt;&amp;lt;circle cx="205" cy="133" r="1" /&amp;gt;&amp;lt;circle cx="297" cy="114" r="1" /&amp;gt;&amp;lt;circle cx="292" cy="126" r="1" /&amp;gt;&amp;lt;circle cx="339" cy="112" r="1" /&amp;gt;&amp;lt;circle cx="327" cy="79" r="1" /&amp;gt;&amp;lt;circle cx="253" cy="136" r="1" /&amp;gt;&amp;lt;circle cx="61" cy="169" r="1" /&amp;gt;&amp;lt;circle cx="128" cy="176" r="1" /&amp;gt;&amp;lt;circle cx="346" cy="72" r="1" /&amp;gt;&amp;lt;circle cx="316" cy="103" r="1" /&amp;gt;&amp;lt;circle cx="124" cy="162" r="1" /&amp;gt;&amp;lt;circle cx="65" cy="181" r="1" /&amp;gt;&amp;lt;circle cx="159" cy="137" r="1" /&amp;gt;&amp;lt;circle cx="212" cy="116" r="1" /&amp;gt;&amp;lt;circle cx="337" cy="86" r="1" /&amp;gt;&amp;lt;circle cx="215" cy="136" r="1" /&amp;gt;&amp;lt;circle cx="153" cy="137" r="1" /&amp;gt;&amp;lt;circle cx="390" cy="104" r="1" /&amp;gt;&amp;lt;circle cx="100" cy="180" r="1" /&amp;gt;&amp;lt;circle cx="76" cy="188" r="1" /&amp;gt;&amp;lt;circle cx="77" cy="181" r="1" /&amp;gt;&amp;lt;circle cx="69" cy="195" r="1" /&amp;gt;&amp;lt;circle cx="92" cy="186" r="1" /&amp;gt;&amp;lt;circle cx="275" cy="96" r="1" /&amp;gt;&amp;lt;circle cx="250" cy="147" r="1" /&amp;gt;&amp;lt;circle cx="34" cy="174" r="1" /&amp;gt;&amp;lt;circle cx="213" cy="134" r="1" /&amp;gt;&amp;lt;circle cx="186" cy="129" r="1" /&amp;gt;&amp;lt;circle cx="189" cy="154" r="1" /&amp;gt;&amp;lt;circle cx="361" cy="82" r="1" /&amp;gt;&amp;lt;circle cx="363" cy="89" r="1" /&amp;gt;&amp;lt;line x1="0" x2="403" y1="200.132272535582" y2="79.2498029303056" /&amp;gt;&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I re-use the SVG code from Part 1 and add in the linear regression calculation. Continuing
a small habit from the past few weeks of these challenges I am making much use of &lt;code&gt;map&lt;/code&gt; to
keep the code as small, and yet still readable, as possible. The linear regression 
calculation is fairly straightforward, as much as I hate having a terse writeup on this
I am not sure I have much more to say!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-165/"&gt;Challenge 165&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.learnbymarketing.com/tutorials/linear-regression-by-hand-in-excel/#:~:text=To%20calculate%20our%20regression%20coefficient%20we%20divide%20the,needs%20to%20make%20up%20for%20the%20average%20case."&gt;Linear Regression Calculation&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc165</id>
    <published>2022-05-22T23:16:00-04:00</published>
    <updated>2022-05-22T23:16:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CPAN Module Tutorials</title>
    <link rel="alternate" href="https://dev.to/davorg/cpan-module-tutorials-2be9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Here's a nice little project that went from a good idea to something useable in a couple of hours.</p>

<p>We all know (I hope) that there are lots of great libraries available on <a href="https://metacpan.org/">MetaCPAN</a>. What isn't sometimes quite as obvious is how to use those libraries. The documentation is usually a pretty good reference but in many cases, what you really want is a good tutorial. And they seem pretty rare on CPAN.</p>

<p>There are, however, hundreds of good tutorials out there on the web. But that doesn't really help the people looking for documentation on MetaCPAN.</p>

<p>Yesterday there was a discussion on the TPF Slack about this very problem. Olaf Alders (who leads the team behind MetaCPAN) said that he would be happy to link to quality posts about modules that are on other sites.</p>

<p>This sounded interesting to me. And I started thinking about a web app where users could submit links to tutorials. The site would then produce an API which MetaCPAN (or, indeed, anyone else) could use to add links to those sites.</p>

<p>I was thinking about a Dancer2 app. Which would require users and authentication and hosting and all the stuff that comes with a web app. But then we realised that (at least as a proof of concept) none of that was actually needed. We could do it all on GitHub.</p>

<p>So now we have <a href="https://github.com/davorg/learncpan/">LearnCPAN</a>. It's just a CSV file with three columns (distribution name, tutorial URL and tutorial title). If you want to submit a new tutorial, then you can simply create a pull request against the repo. Once your PR is merged, there's a simple GitHub Action which parses the CSV file and produces <a href="https://davorg.dev/learncpan/tutorials.json">a JSON file</a> which MetaCPAN can use to add tutorials to a distribution's page.</p>

<p>I've seeded the CSV with a couple of years of examples from the <a href="https://perladvent.org/">Perl Advent Calendar</a>. But it's ready to take your submissions now.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/cpan-module-tutorials-2be9</id>
    <published>2022-05-20T13:45:32Z</published>
    <updated>2022-05-20T13:45:32Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="metacpan"/>
    <category term="tutorials"/>
  </entry>
  <entry>
    <title>Auf dem Weg zu Perl 5.36 - builtin</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-05-20-auf-dem-weg-zu-perl-536-builtin" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mit Perl 5.36 gibt es ein neues Pragma: `builtin`. Damit lassen sich neue Hilfsfunktionen in das Skript/Modul importieren. Derzeit bietet das Pragma folgende Hilfsfunktionen:</div>
    </content>
    <id>https://blog.perl-academy.de/2022-05-20-auf-dem-weg-zu-perl-536-builtin</id>
    <published>2022-05-20T10:00:00Z</published>
    <updated>2022-05-20T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Use multiple gmail accounts via mutt and (offline) IMAP</title>
    <link href="http://domm.plix.at/perl/2022_05_use_multiple_gmail_accounts_via_mutt_and_offlineimap.html"/>
    <id>http://domm.plix.at/perl/2022_05_use_multiple_gmail_accounts_via_mutt_and_offlineimap.html</id>
    <updated>2022-05-19T14:00:40+00:00</updated>
    <category term="perl"/>
    <summary>I started with a new project recently, which means I have to use yet another Google Workspace (i.e. gmail for businesses). While having the gmail webapp open in multiple Firefox Multi-Account ...</summary>
    <content type="html">&lt;p&gt;I started with a &lt;a href="https://balloon-events.com/"&gt;new project&lt;/a&gt; recently, which means I have to use yet another Google Workspace (i.e. gmail for businesses). While having the gmail webapp open in multiple &lt;a href="https://support.mozilla.org/en-US/kb/containers"&gt;Firefox Multi-Account Containers&lt;/a&gt; is an option, it's not something I like to do. And I don't really like the gmail web interface anyway. I prefer &lt;a href="http://www.mutt.org/"&gt;mutt&lt;/a&gt; (and use it since forever,,,). Some years ago I sort of managed to read gmail mails via &lt;span class="caps"&gt;IMAP, &lt;/span&gt;but couldn't get sending to work. So I decided to give this another try. And it worked!&lt;/p&gt;

&lt;h4&gt;Overview&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I have multiple separate gmail accounts&lt;/li&gt;
&lt;li&gt;I use mutt to read and write email&lt;/li&gt;
&lt;li&gt;I use &lt;a href="http://www.offlineimap.org/"&gt;offlineimap&lt;/a&gt; to download mails via &lt;span class="caps"&gt;IMAP &lt;/span&gt;onto my laptop (so I can read my mails while offline, and search through them on my disk)&lt;/li&gt;
&lt;li&gt;To send mails, I drop them into an exim running on my laptop, which then sends them via the mail service I use&lt;ul&gt;
&lt;li&gt;This did not work for gmail, but I found something that works (see below)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Syncing gmail via offlineimap and an "app password"&lt;/h4&gt;

&lt;p&gt;This seems rather easy, but google does not really like you to use your regular password in automated tools. One solution is to use OAuth2, as described &lt;a href="https://hobo.house/2017/07/17/using-offlineimap-with-the-gmail-imap-api/"&gt;here&lt;/a&gt;. But this seems a bit to much hassle, so I choose the other route, i.e. setting up an "app password". An "app password" is a password that google generates for you so you can use it in various apps (of dubious security).&lt;/p&gt;

&lt;p&gt;To get such an app password, you first have to secure your account with Two Factor Authentication (2FA) (if you haven't already done that):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to https://myaccount.google.com&lt;/li&gt;
&lt;li&gt;Find "2-Step Verification" under the &lt;strong&gt;Security&lt;/strong&gt; headline&lt;/li&gt;
&lt;li&gt;Go through the process. I use the "Google Authenticator" app on my mobile phone&lt;/li&gt;
&lt;li&gt;After you've set this up, you'll find the new option "App passwords" under "Security" / "Signing into Google"&lt;/li&gt;
&lt;li&gt;Select an app ("Mail") and give it a custom name (eg "offlineimap"), click on "generate" and copy the password (you'll never see it again!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can add a new Account to your &lt;code&gt;.offlineimaprc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Account FOO]
localrepository = LocalFoo
remoterepository = RemoteFoo
synclabels = yes

[Repository LocalFoo]
type = Maildir
localfolders = /path/to/mails/Foo

[Repository RemoteFoo]
type = IMAP
remotehost = imap.gmail.com
# if you have a custom domain set up:
remoteuser = foo@example.com
# if you use a plain gmail account:
# remoteuser = foo@gmail.com
remotepass = your-app-password
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before you run &lt;code&gt;offlineimap&lt;/code&gt; you might want to consider configuring your gmail labels (i.e. what google uses for mail folders). Google sets up a bunch of (IMO stupid) default labels. It will also duplicate mails, because all mails stay in the Inbox and will be sort-of-copied into folders (if the label matches). So go to your gmail settings (click on the gear-wheel, then "See all settings"), go to "Labels" and uncheck the "Show in &lt;span class="caps"&gt;IMAP&lt;/span&gt;" box on all labels (except Inbox, which you cannot uncheck anyway..). If you have set up mail filters, make sure they have the "Skip Inbox" flag set, otherwise you'll get them twice.&lt;/p&gt;

&lt;p&gt;Now is also a good time to clean up your Inbox (or you'll wait a long time on the first sync..)&lt;/p&gt;

&lt;h4&gt;Configuring mutt&lt;/h4&gt;

&lt;p&gt;The first thing we need to do is to tell mutt about the new folder / labels / &lt;code&gt;mailboxes&lt;/code&gt; (in mutt language..):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+mailboxes =Foo/INBOX +Foo/'[Gmail].Sent Mail' +Foo/some_label&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt; here is the actual directory name of the maildir you specified in offlineimap: &lt;code&gt;localfolders = /path/to/mails/Foo&lt;/code&gt;. You can list all the labels you enabled for &lt;span class="caps"&gt;IMAP &lt;/span&gt;here, and mutt will automatically jump to the mail folder if there is new mail after an offlineimap run.&lt;/p&gt;

&lt;p&gt;Another thing I like to do is to set up a separate "profile" for each account, using a different color and sender for each project. For this I set up a file like this in my &lt;code&gt;~/.mutt/&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# file: ~/.mutt/profile_foo
set from=&amp;quot;Thomas Klausner &amp;lt;domm@example.net&amp;gt;&amp;quot;
set use_from
set envelope_from
set signature=~/.foo_signature
color indicator black brightgreen&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make sure I use the right sender, and will also alert me as who I am currently writing by setting the indicator to a specific color.&lt;/p&gt;

&lt;p&gt;But how do we enable this profile? Via a &lt;code&gt;folder-hook&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;folder-hook =Foo &amp;quot;source ~/.mutt/profile_foo\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime we enter a folder under &lt;code&gt;Foo&lt;/code&gt;, we source this profile. Nice!&lt;/p&gt;

&lt;h4&gt;Sending mail&lt;/h4&gt;

&lt;p&gt;But how can we now actually send mail using the gmail sender? Thanks to spammers, you cannot just use any sender address with any &lt;span class="caps"&gt;SMTP &lt;/span&gt;server anymore, they are much stricter now (and gmail even more so). So we need to send mails via gmail, using the correct set of credentials. I assume that exim has some setting to do this, but I found an easier way:&lt;/p&gt;

&lt;p&gt;Mutt can send mail not only via localhost, but also directly via &lt;span class="caps"&gt;SMTP&lt;/span&gt;!&lt;/p&gt;

&lt;p&gt;All we have to do is add something like this to our &lt;code&gt;~/.mutt/profile_foo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set smtp_url = &amp;quot;smtps://foo@example.com:your-app-password@smtp.gmail.com:465&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we also need to unset &lt;code&gt;smtp_url&lt;/code&gt; for the default account (which uses the local exim). So in the &lt;code&gt;default_profile&lt;/code&gt; just add &lt;code&gt;unset smtp_url&lt;/code&gt;. And load the default profile via another folder hook:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;folder-hook . &amp;quot;source ~/.mutt/profile_default\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's how I prevented going crazy having to juggle multiple gmail accounts!&lt;/p&gt;

&lt;p&gt;One downside of this approach is that the app passwords are now lying around on my disk, so anybody with access to my disk can read/send mails. In case I know my disk has been compromised, I could disable the app passwords in my google account settings. But a nicer approach would be to store them in some password store (I use &lt;a href="https://github.com/gopasspw/gopass"&gt;gopass&lt;/a&gt;) and somehow inject them after unlocking them. This will have to wait for another time...&lt;/p&gt;</content>
    <category term="mutt"/>
    <category term="offlineimap"/>
  </entry>
</feed>
