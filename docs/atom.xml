<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-03-21T08:40:00Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75796755</id>
        <re:rank scheme="https://stackoverflow.com">-2</re:rank>
        <title type="text">How do I perform pattern replacement in command line in which I find patterns in one vector and replace from same position in other vector?</title>
            <category scheme="https://stackoverflow.com/tags" term="bash"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="command-line"/>
        <author>
            <name>avery</name>
            <uri>https://stackoverflow.com/users/12512945</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75796755/how-do-i-perform-pattern-replacement-in-command-line-in-which-i-find-patterns-in"/>
        <published>2023-03-21T01:57:32Z</published>
        <updated>2023-03-21T08:19:51Z</updated>
        <summary type="html">
            &lt;p&gt;So say I have two character vector lists in .txt docs, in which one has the patterns to be replaced, and the other has their replacements in the same position. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pattern.txt
this
is
the
pattern
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Replacement.txt
these
are
our
replacements
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if I had a file, specifically a gff in my case, all instances of &amp;quot;this&amp;quot; would be replaced with &amp;quot;these&amp;quot;, and so on. Is there a way I can use grep or a similar tool to recursively check for any instances of each pattern and replace with the corresponding replacement? I apologize if this is a repeat, I googled around and couldn't find what I needed.&lt;/p&gt;
&lt;p&gt;Thanks in advance!&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75797402</id>
        <re:rank scheme="https://stackoverflow.com">-2</re:rank>
        <title type="text">perl cut variable after match</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="cut"/>
        <author>
            <name>walker</name>
            <uri>https://stackoverflow.com/users/21255401</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75797402/perl-cut-variable-after-match"/>
        <published>2023-03-21T04:46:49Z</published>
        <updated>2023-03-21T08:16:47Z</updated>
        <summary type="html">
            &lt;p&gt;I am having variable storing log directory. I would like to get the word after &amp;quot;logs&amp;quot; in the path (kelvin and james for below case), the &amp;quot;logs&amp;quot; will be fixed among all path.&lt;/p&gt;
&lt;p&gt;Example path defined in variable&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Both possible:
my $path1=&amp;quot;/path/to/abc/logs/kelvin/&amp;quot;;
my $path2=&amp;quot;/path/to/abc/logs/james&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75796336</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">removing ^M and new line while reading XML document</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="replace"/>
        <author>
            <name>Koushik Chandra</name>
            <uri>https://stackoverflow.com/users/3090114</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75796336/removing-m-and-new-line-while-reading-xml-document"/>
        <published>2023-03-21T00:08:11Z</published>
        <updated>2023-03-21T08:07:40Z</updated>
        <summary type="html">
            &lt;p&gt;I am reading a XML document using perl like below and writing into a text document&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;my $var = $line-&amp;gt;find('tag1/tag2/tag3/tag4')-&amp;gt;string_value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but the value ($var) contains ^M character and new line character in the middle of the string.&lt;/p&gt;
&lt;p&gt;I tried chomp(&lt;code&gt;my $var = $line-&amp;gt;find('tag1/tag2/tag3/tag4')-&amp;gt;string_value&lt;/code&gt;), but still ^M and new line character is not getting removed.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75796802</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Perl - How to substitute non matching words with none</title>
            <category scheme="https://stackoverflow.com/tags" term="regex"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>venkata prasad</name>
            <uri>https://stackoverflow.com/users/16743763</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75796802/perl-how-to-substitute-non-matching-words-with-none"/>
        <published>2023-03-21T02:14:34Z</published>
        <updated>2023-03-21T07:33:57Z</updated>
        <summary type="html">
            &lt;p&gt;I want to replace non matching words in a string with none using perl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$variable = &amp;quot;dx_app1_admin-101-102-prod;dx_app1_read-101-102-prod;dx_app2_admin-101-102-prod;dx_app2_admin-101-102-read;dx_app3_admin-101-102-prod;dx_app3_read-101-102-prod;&amp;quot;;

$variable =~ s/?!(dx_app1_admin-101-102-prod;|dx_app1_read-101-102-prod;)//g;

print $variable;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expected OutPut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dx_app1_admin-101-102-prod;dx_app1_read-101-102-prod;
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/75798125</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Docker: 502 Connection refused Error when connecting to Perl container from nginx</title>
            <category scheme="https://stackoverflow.com/tags" term="docker"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="nginx"/>
        <author>
            <name>Kotapon</name>
            <uri>https://stackoverflow.com/users/21445110</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/75798125/docker-502-connection-refused-error-when-connecting-to-perl-container-from-ngin"/>
        <published>2023-03-21T06:59:34Z</published>
        <updated>2023-03-21T07:17:32Z</updated>
        <summary type="html">
            &lt;p&gt;I'm building a simple docker environment on my own, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After building and running these containers, PHP is working well but accessing to .cgi or .pl returns 502 error.&lt;/p&gt;
&lt;p&gt;my Dockerfile for perl is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM perl:5.36
COPY perl/src /usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;setting file for nginx is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 80;
    root /usr/share/nginx/html;

    location ~ \.php$ {
        # index          index.php index.html index.htm;
        fastcgi_pass   php-mt:9000;
        # fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
    location ~ \.(cgi|pl)$ {
        # index          index.cgi index.html index.htm;
        fastcgi_pass   perl-mt:9001;
        # fastcgi_index  index.cgi;
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;docker-compose.yml is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: '3'

services:
  php-mt:
    restart: always
    build:
      context: .
      dockerfile: ./php/Dockerfile

  nginx-mt:
    restart: always
    ports:
      - 80:80
    build:
      context: .
      dockerfile: ./nginx/Dockerfile

  perl-mt:
    # restart: always
    tty: true
    expose:
      - 9001
    build:
      context: .
      dockerfile: ./perl/Dockerfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt;command returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CONTAINER ID   IMAGE                COMMAND                  CREATED          STATUS          PORTS                NAMES
ce6f7d61cd4a   docker-mt_nginx-mt   &amp;quot;/docker-entrypoint.…&amp;quot;   20 minutes ago   Up 20 minutes   0.0.0.0:80-&amp;gt;80/tcp   docker-mt_nginx-mt_1
62fd1c445dd2   docker-mt_perl-mt    &amp;quot;perl5.36.0 -de0&amp;quot;        27 minutes ago   Up 20 minutes   9001/tcp             docker-mt_perl-mt_1
c5ed035c144b   docker-mt_php-mt     &amp;quot;docker-php-entrypoi…&amp;quot;   3 hours ago      Up 20 minutes   9000/tcp             docker-mt_php-mt_1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and error is like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx-mt_1  | 2023/03/21 06:37:13 [error] 30#30: *6 connect() failed (111: Connection refused) while connecting to upstream, client: 172.18.0.1, server: , request: &amp;quot;GET /perl.cgi HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://172.18.0.3:9001&amp;quot;, host: &amp;quot;localhost&amp;quot;
nginx-mt_1  | 172.18.0.1 - - [21/Mar/2023:06:37:13 +0000] &amp;quot;GET /perl.cgi HTTP/1.1&amp;quot; 502 559 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&amp;quot; &amp;quot;-&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I've done for this problem is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;correcting exposing port of a perl container&lt;/li&gt;
&lt;li&gt;confirmation of working of .pl file inside perl container&lt;/li&gt;
&lt;li&gt;change permissions of .pl and .cgi files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every suggestion is highly appreciated!&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>Fantasy Name Generator</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/21/fantasyname/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I submitted a <a href="https://github.com/skeeto/fantasyname/pull/20">Pull Request</a> to <a href="https://github.com/skeeto/fantasyname">Fantasy Name Generator</a>.</p>
</blockquote>

<p>About two years and a half ago I run a little series of post starting with
post <a href="/ETOOBUSY/2020/11/02/fng-grammar/">Fantasy Name Generator - a grammar</a>. The gist of it is that the
<a href="https://github.com/skeeto/fantasyname">Fantasy Name Generator</a> repository contains a <a href="https://www.perl.org/">Perl</a> implementation,
but it can become quickly slow for moderately complex expressions, as also
noted in the project itself.</p>

<p>I finally got to generate a <a href="https://github.com/skeeto/fantasyname/pull/20">Pull Request</a> about it, proposing a
different parser implementation.</p>

<p>I suspect that there’s not much interest in that repository since a long
time, because my <a href="https://github.com/skeeto/fantasyname/issues/19">previous issue</a> didn’t receive any answer, and I
see stalled pull requests as well. Anyway, maybe people interested into the
project will anyway figure that there’s been some improvement desppite the
reduced attention that the project got in these latest years.</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/21/fantasyname/</id>
    <published>2023-03-21T06:00:00+01:00</published>
    <updated>2023-03-21T06:00:00+01:00</updated>
    <category term="perl"/>
    <category term="parsing"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 209: Special Bit Characters and Merge Account</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/03/perl-weekly-challenge-209-special-bit-characters-and-merge-account.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11053</id>
    <published>2023-03-21T03:36:20Z</published>
    <updated>2023-03-21T03:40:07Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 209 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-209/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on March 26, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Special Bit Characters</h2>

<p><em>You are given an array of binary bits that ends with 0.</em></p>

<p><em>Valid sequences in the bit string are:</em></p>

<pre><code>[0] -decodes-to-&gt; "a"
[1, 0] -&gt; "b"
[1, 1] -&gt; "c"
</code></pre>

<p><em>Write a script to print 1 if the last character is an “a” otherwise print 0.</em></p>

<p><em>Example 1</em>:</p>

<pre><code>Input: @bits = (1, 0, 0)
Output: 1

The given array bits can be decoded as 2-bits character (10) followed by 1-bit character (0).
</code></pre>

<p><em>Example 2</em>:</p>

<pre><code>Input: @bits = (1, 1, 1, 0)
Output: 0

Possible decode can be 2-bits character (11) followed by 2-bits character (10) i.e. the last character is not 1-bit character.
</code></pre>

<p>This is an example of variable-length code. In order to decode such a bit string, we need to start from the beginning of the string. If the string starts with 0, then we have an "a" and can continue decoding with the next bit. If the string starts with 1, then we need to check the next digit, to figure out whether the first letter is a "b or a "c", and we can continue decoding with the third bit. And so on. So, for example, if we have the following string:</p>

<pre><code>0110100100111011100
</code></pre>

<p>We will effectively split it as follows:</p>

<pre><code>0 11 0 10 0 10 0 11 10 11 10 0,
</code></pre>

<p>yielding the following decoded string: "acababacbcba."</p>

<p>It is easy to see that such an encoding is totally unambiguous: at any point in the process, there can be only one decoded letter.</p>

<p>But if we pick one bit somewhere in the middle of the bit string, we can't know how to proceed. If it is a 0, this can be an "a", or the second bit of a "b". Similarly, if it is a 1, then it can be the first bit of a "b", or the first or the second bit of a "c". So, we can be sure to always unambiguously decode the string only if we start from the beginning. There are cases, however, where it is possible to decode part of the string starting from somewhere in the middle. For example, if we find two consecutive 0, we know that the second one can only be an "a" and proceed from there. We don't need to proceed from the beginning to find that the last letter in the above bit string is an "a". But, since we cannot be sure to meet such a situation, the best is to start from the beginning as explained above. For much longer strings, looking for the last occurrence of a "00" pattern, and proceed from the second 0 (an "a"), may be an interesting performance improvement, since we're really interested in finding out whether the final 0 is an "a" or the second bit of a "b". With the small examples at hand, this optimization would be useless.</p>

<h3>Special Bit Characters in Raku</h3>

<p>The program goes through the bit string and consume either one or two bits, depending on whether the current digit is a 0 or a 1. If the last bit (necessarily a 0) is the start of a group, then it is an "a". Otherwise, it is the second bit of a "10" group (i.e. of a "b"). Note that a <code>loop</code> statement alone, without three statements in parentheses, is just an infinite loop, from which we exit with either of the return statements.</p>

<pre><code>sub ends-with-a (@in) {
    my $i = 0;
    my $end = @in.end;
    loop {
        return 1 if $i == $end;
        $i += @in[$i] == 0 ?? 1 !! 2;
        return 0 if $i &gt; $end;
    }
}

for &lt;1 0 0&gt;, &lt;1 1 1 0&gt;, &lt;0 0 0 1 0&gt;, &lt;1 1 0&gt; -&gt; @test {
    say (~ @test).fmt("%-12s =&gt; "), ends-with-a @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./main.raku
1 0 0        =&gt; 1
1 1 1 0      =&gt; 0
0 0 0 1 0    =&gt; 0
1 1 0        =&gt; 1
</code></pre>

<h3>Special Bit Characters in Perl</h3>

<p>This is a port to Perl of the above Raku program. Please refer to the previous sections if you need additional explanations.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub ends_with_a {
    my $i = 0;
    my $end = $#_;
    while (1) {
        return 1 if $i == $end;
        $i += $_[$i] == 0 ? 1 : 2;
        return 0 if $i &gt; $end;
    }
}

for my $test ([&lt;1 0 0&gt;], [&lt;1 1 1 0&gt;], 
    [&lt;0 0 0 1 0&gt;], [&lt;1 1 0&gt;]) {
    printf "%-12s =&gt; %d\n", "@$test", ends_with_a @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./special-bit-characters.pl
1 0 0        =&gt; 1
1 1 1 0      =&gt; 0
0 0 0 1 0    =&gt; 0
1 1 0        =&gt; 1
</code></pre>

<h2>Task 2: Merge Account</h2>

<p><em>You are given an array of accounts, i.e. name with list of email addresses.</em></p>

<p><em>Write a script to merge the accounts where possible.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 
    @accounts = [ ["A", "a1@a.com", "a2@a.com"],
                  ["B", "b1@b.com"],
                  ["A", "a3@a.com", "a1@a.com"] ]
                ]

Output: [ ["A", "a1@a.com", "a2@a.com", "a3@a.com"],
          ["B", "b1@b.com"] ]
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: 
    @accounts = [ ["A", "a1@a.com", "a2@a.com"],
                  ["B", "b1@b.com"],
                  ["A", "a3@a.com"],
                  ["B"m "b2@b.com", "b1@b.com"] ]

Output: [ ["A", "a1@a.com", "a2@a.com"],
          ["A", "a3@a.com"],
          ["B", "b1@b.com", "b2@b.com"] ]
</code></pre>

<h3>Merge Account in Raku</h3>

<p>We use a hash of hashes to merge items belonging to the same name and remove possible duplicates.</p>

<pre><code>sub merge-account (@in) {
    my %merged;
    for @in -&gt; @part {
        my ($key, @values) = @part;
        %merged{$key}{$_} = True for @values;
    }
    return %merged;
}

my @tests = ( &lt;A a1@a.com a2@a.com&gt;, 
              &lt;B b1@b.com&gt;,
              &lt;A a3@a.com a1@a.com&gt; ),
            ( &lt;A a1@a.com a2@a.com&gt;,
              &lt;B b1@b.com&gt;,
              &lt;A a3@a.com&gt;,
              &lt;B b2@b.com b1@b.com&gt; );
for @tests -&gt; @test {
    say @test, " =&gt; ";
    my %merged = merge-account @test;
    for %merged.keys.sort -&gt; $k {
        say "\t[", (join " ", $k, |%merged{$k}.keys.sort), "]";
    };
    say "";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./merge-account.raku
((A a1@a.com a2@a.com) (B b1@b.com) (A a3@a.com a1@a.com)) =&gt; 
    [A a1@a.com a2@a.com a3@a.com]
    [B b1@b.com]

((A a1@a.com a2@a.com) (B b1@b.com) (A a3@a.com) (B b2@b.com b1@b.com)) =&gt; 
    [A a1@a.com a2@a.com a3@a.com]
    [B b1@b.com b2@b.com]
</code></pre>

<h3>Merge Account in Perl</h3>

<p>This is a port to Perl of the previous Raku program. We use a hash of hashes to merge items belonging to the same name and remove possible duplicates.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub merge_account {
    my %merged;
    for my $part (@_) {
        # say   Dumper $part;
        my ($key, @values) = @$part;
        $merged{$key}{$_} = 1 for @values;
    }
    # say %merged;
    return \%merged;
}

my @tests = ( [ [&lt;A a1\@a.com a2\@a.com&gt;], 
                [&lt;B b1\@b.com&gt;],
                [&lt;A a3\@a.com a1\@a.com&gt;] ],

              [ [&lt;A a1\@a.com a2\@a.com&gt;],
                [&lt;B b1\@b.com&gt;],
                [&lt;A a3\@a.com&gt;],
                [&lt;B b2\@b.com b1\@b.com&gt;] ] );

for my $test (@tests) {
    # say Dumper $test, " =&gt; ";
    for my $part (@$test) {
        print join " ", @$part;
        print " - ";
    }
    say " =&gt;";
    my %merged = %{merge_account @$test};
    for my $k (sort keys %merged) {
        say "\t[", (join " ", $k, sort keys %{$merged{$k}}), "]";
    };
    say "";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./merge-account.pl
A a1@a.com a2@a.com - B b1@b.com - A a3@a.com a1@a.com -  =&gt;
        [A a1@a.com a2@a.com a3@a.com]
        [B b1@b.com]

A a1@a.com a2@a.com - B b1@b.com - A a3@a.com - B b2@b.com b1@b.com -  =&gt;
        [A a1@a.com a2@a.com a3@a.com]
        [B b1@b.com b2@b.com]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 2, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/6faeccef23b9e46d7b088612be6c1b6668dcf091</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/6faeccef23b9e46d7b088612be6c1b6668dcf091"/>
    <title>
        update INSTALL
    </title>
    <updated>2023-03-20T20:31:24Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;update INSTALL&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/6efc7c17371cfac23b398493777d6aa116ddb120</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/6efc7c17371cfac23b398493777d6aa116ddb120"/>
    <title>
        Porting/Maintainers.pl - update Module-CoreList entry to reflect late…
    </title>
    <updated>2023-03-20T20:31:24Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Porting/Maintainers.pl - update Module-CoreList entry to reflect latest on CPAN

Apparently this should have been updated some time ago.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/6755d87e212e8b23e6975cb6ed741f3cd84e16b3</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/6755d87e212e8b23e6975cb6ed741f3cd84e16b3"/>
    <title>
        cpan/libnet - update to version 3.15 and remove old customization info
    </title>
    <updated>2023-03-20T20:31:24Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;cpan/libnet - update to version 3.15 and remove old customization info

We were bundling something that claimed to be 3.14 but which was not.
This removes the customization info and sync with a rereleased 3.15
which is the same as the actual 3.14 but with a version bump to keep
cmp_version.t happy.

This is the change log 3.15 and 3.14:

3.15 2023-03-20

    - Release for updating bleadperl to avoid cmp_version.t trouble.  No code
      changes.

3.14 2022-05-22

    - Remove broken link in Net::FTP manpage.  [Mike Blackwell]

    - Fix EBCDIC detection.  [Karl Williamson, PR#45]

    - Fix non-deterministic output in libnet.cfg.  [Sergei Trofimovich, PR#44]

    - Fix TLS session reuse for dataconn with TLS 1.3 when using passive mode.
      [Steffen Ullrich, PR#41]&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/655778a2875f291b148aff1339db591f682577da</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/655778a2875f291b148aff1339db591f682577da"/>
    <title>
        pod/perldelta.pod - updates for 5.37.10
    </title>
    <updated>2023-03-20T20:30:58Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;pod/perldelta.pod - updates for 5.37.10

Also trim some whitespace from perlvar.pod&lt;/pre&gt;
    </content>
  </entry>
  <entry>
  <title>Community Input Requested - Future of TPRF website(s)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/websiteproposalcall"/>
  <id>tag:news.perlfoundation.org,2023-03-20:/post/websiteproposalcall</id>
  <published>2023-03-20T19:06:24</published>
  <updated>2023-03-20T19:06:24</updated>
  <summary>
  <![CDATA[
     TPRF is looking for community input on the future of the TPRF website We are asking for community members to submit proposals for the Perl/Raku website The proposals would ideally address the following: Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/66cd095b5eeac285673c26906d11cd712f234d20/perl onion.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>TPRF is looking for community input on the future of the TPRF website(s). <p>
We are asking for community members to submit proposals for the Perl/Raku website(s). The proposals would ideally address the following: <p><p>
* Should there be separate websites for Perl and Raku, with a single set of main content that will be on both pages, or should TPRF continue to operate with one website, but feature separate sites for language specific donations?<p>
* An approach to the professional graphic designing of the website (Please provide links to any examples/existing websites that show what a website along these lines would look like)<p>
* Cost to deploy<p>
* Ongoing costs for technical aspects and maintenance<p></p>

<p>Suggestions should also be:<p>
1. Template-based, for custom branding<p>
2. easy to add, update, move and delete content<p>
3. customizable menus<p>
4. mobile friendly<p>
5. multi-domain support<p>
6. access to logs etc for analysis and SEO purposes<p><p><p>
You can submit your ideas using our form template at https://forms.gle/s9uKWorzQ3GSHe8JA OR you can submit a free form proposal to board@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#608 - Love You Perl!!!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/608.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>My 6 years old twins reminded me on Sunday morning about Mother's Day. Although I didn't even know such day existed when I was in India but this country exposed me to all kind of celebrations. I miss my mom a lot. Let me share with you one of my childhood memory. During my school days, everytime somebody complain to my mom about my fight she wouldn't listen to my side of story. In fact she would start beating me up infront of the complainant. All my so-called friends knew this and they would blackmail me all the time. My mom would never defend me and believe what others have to say about me. I hated it to the bottom of my heart. This affected my personality and made me an introvert. I have been fighting with my nature all my life, even today.</p>
<p>I see the similar treatment to my beloved programming language <strong>Perl</strong>. It pains me when I see some <strong>Perl Gurus</strong> never defend the language same like my mom. I expect them to show the bright side of the language to the rest of the world instead, being the language guru. Even a single negative statement about <strong>Perl</strong> would take us one step back and create a bad image. I am fully aware of all the shortcomings but I am not going to go out and tell everyone about it. I would rather find the solutions, if I can. There is nothing wrong to try other programming languages from the job prospective. In fact, I have recently played with <strong>Python</strong> and <strong>Raku</strong>, thanks to <a href="https://theweeklychallenge.org">The Weekly Challenge</a> but <strong>Perl</strong> remains my first choice of programming language.</p>
<p>I know I don't blog regularly any more but I have done it in the past every time I have done something nice using <strong>Perl</strong>. You can find some of them <a href="https://theweeklychallenge.org/blogs">here</a> and <a href="https://blogs.perl.org/users/mohammad_s_anwar">bpo</a>. I know there are many <strong>Perl</strong> fans out there doing their bits to dust off the negative image. Honestly speaking, we need more people to come forward. For example, <strong>Gabor Szabo</strong> has been running dedicated website, <a href="https://perlmaven.com">Perl Maven</a> where he showcase the cool features of <strong>Perl</strong>.</p>
<p>I have seen some of the brightest brain creating magic using <strong>Perl</strong> every week when it comes to solving the weekly challenge. The best part is that they even share the code with others on various platforms like <strong>Facebook</strong>.</p>
<p>Last but not the least, <strong>Happy Mother's Day</strong> to all the moms out there, including mine who is in India right now. I love you mom. I would like to apologise to all the readers of the newsletter about the last week incident when I couldn't get my contributions to the newsletter available on time. I will try to be more organised in future, promise.</p></div>
    </content>
    <id>https://perlweekly.com/archive/608.html</id>
    <published>2023-03-20T10:00:00Z</published>
    <updated>2023-03-20T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Perl Weekly #608 - Love You Perl!!!</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-608-love-you-perl-46eh" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/608.html"&gt;Perl Weekly 608&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;My 6 years old twins reminded me on Sunday morning about Mother's Day. Although I didn't even know such day existed when I was in India but this country exposed me to all kind of celebrations. I miss my mom a lot. Let me share with you one of my childhood memory. During my school days, everytime somebody complain to my mom about my fight she wouldn't listen to my side of story. In fact she would start beating me up infront of the complainant. All my so-called friends knew this and they would blackmail me all the time. My mom would never defend me and believe what others have to say about me. I hated it to the bottom of my heart. This affected my personality and made me an introvert. I have been fighting with my nature all my life, even today.&lt;/p&gt;

&lt;p&gt;I see the similar treatment to my beloved programming language &lt;strong&gt;Perl&lt;/strong&gt;. It pains me when I see some &lt;strong&gt;Perl Gurus&lt;/strong&gt; never defend the language same like my mom. I expect them to show the bright side of the language to the rest of the world instead, being the language guru. Even a single negative statement about &lt;strong&gt;Perl&lt;/strong&gt; would take us one step back and create a bad image. I am fully aware of all the shortcomings but I am not going to go out and tell everyone about it. I would rather find the solutions, if I can. There is nothing wrong to try other programming languages from the job prospective. In fact, I have recently played with &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;Raku&lt;/strong&gt;, thanks to &lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge&lt;/a&gt; but &lt;strong&gt;Perl&lt;/strong&gt; remains my first choice of programming language.&lt;/p&gt;

&lt;p&gt;I know I don't blog regularly any more but I have done it in the past every time I have done something nice using &lt;strong&gt;Perl&lt;/strong&gt;. You can find some of them &lt;a href="https://theweeklychallenge.org/blogs"&gt;here&lt;/a&gt; and &lt;a href="https://blogs.perl.org/users/mohammad_s_anwar"&gt;bpo&lt;/a&gt;. I know there are many &lt;strong&gt;Perl&lt;/strong&gt; fans out there doing their bits to dust off the negative image. Honestly speaking, we need more people to come forward. For example, &lt;strong&gt;Gabor Szabo&lt;/strong&gt; has been running dedicated website, &lt;a href="https://perlmaven.com"&gt;Perl Maven&lt;/a&gt; where he showcase the cool features of &lt;strong&gt;Perl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have seen some of the brightest brain creating magic using &lt;strong&gt;Perl&lt;/strong&gt; every week when it comes to solving the weekly challenge. The best part is that they even share the code with others on various platforms like &lt;strong&gt;Facebook&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Last but not the least, &lt;strong&gt;Happy Mother's Day&lt;/strong&gt; to all the moms out there, including mine who is in India right now. I love you mom. I would like to apologise to all the readers of the newsletter about the last week incident when I couldn't get my contributions to the newsletter available on time. I will try to be more organised in future, promise.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  &lt;strong&gt;Your editor: Mohammad S. Anwar.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/aristotle/2023/03/template-toolkit-default-directive.html"&gt;Template Toolkit’s DEFAULT is not too useful&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For all Template Toolkit user, do checkout the DEFAULT behaviour.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/16/1000th-consecutive-posting-day/"&gt;1000th consecutive posting day&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;What an achievements!!! Congratulation for reaching the milestone. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/kido_mitsuru/2023/03/the-first-line-of-perl-cgi-script-env-perl-vs-perl-only-how-different.html"&gt;The first line of Perl_CGI script, env perl vs perl only, how different?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Another post showing what not to do when using Perl. &lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/15/tempfile-mktemp/"&gt;tempfile and mktemp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Deal with the warning tempfile is deprecated. Nice work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/john_napiorkowski/2023/03/chatgpt-for-perl-learning.html"&gt;ChatGPT for Perl Learning&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ever played with ChatGPT? This should give you fresh perspective.&lt;/p&gt;




&lt;h2&gt;
  
  
  CPAN
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/c_y_fung/2023/03/quiq---weekly-travelling-in-cpan.html"&gt;Quiq - Weekly Travelling in CPAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A brief introduction to the CPAN module Quiq..&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/19/validate-codicefiscale/"&gt;First release of Validate::CodiceFiscale&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Find the reason behind the creation of Validate::CodiceFiscale.&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209"&gt;The Weekly Challenge - 209&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Special Bit Characters" and "Merge Account". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-208"&gt;RECAP - The Weekly Challenge - 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Minimum Index Sum" and "Duplicate and Missing" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/mis-ing.html"&gt;MIS-ing&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A detailed discussion of the solutions in Raku can be very handy with the official documentation. Great work, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/oldtechaa/perl-weekly-challenge-208-1gc3"&gt;Perl Weekly Challenge #208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Happy to see the speed up in the getting the task done. Well done. Please do checkout the details.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/boblied/pwc-208-smells-like-teen-sql-2bh6"&gt;Smells like teen SQL&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Just loved the SQL twist. You don't want to miss the fun. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/17/pwc208-minimum-index-sum/"&gt;PWC208 - Minimum Index Sum&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Valid questions raised but we still have working solutions in Perl and Raku. Thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/03/18/pwc208-duplicate-and-missing/"&gt;PWC208 - Duplicate and Missing&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A rather lengthy blog post for the task. Thanks for sharing the knowledge.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.braincells.com/perl/2023/03/perl_weekly_challenge_week_208.html"&gt;Perl Weekly Challenge: Week 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice showcase of Raku features with line-by-line explanation. Cool contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-208/james-smith#readme"&gt;The Weekly Challenge 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Compact and powerful solutions in Perl. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/03/perl-weekly-challenge-208-minimum-index-sum-and-duplicate-and-missing.html"&gt;Perl Weekly Challenge 208: Minimum Index Sum and Duplicate and Missing&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Side by side Perl and Raku solutions make it great to learn the trick. Great job.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/03/17/PerlWeeklyChallenge208.html"&gt;grep, grep and grep!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;grep in action with full force using Raku. Easy to follow the solution.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/03/13/PWC208/"&gt;Perl Weekly Challenge 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Yet another one-liner in Perl for you. Do checkout it out.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/MatthiasMuth/perlweeklychallenge-club/tree/muthm-208/challenge-208/matthias-muth#readme"&gt;Juggling with indexes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Simple and easy to follow solutions in Perl. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/208"&gt;Matching strings and missing numbers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Give it a try the online solutions. This is exceptional. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://hatley-software.blogspot.com/2023/03/robbie-hatleys-perl-solutions-to-weekly_15.html"&gt;The Weekly Challenge #208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice attempt to solve the weekly challenge. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/03/The_Weekly_Challenge_208__Missing_Index__Just_Duplicate_.html"&gt;Missing Index? Just Duplicate!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ruby is choice of language for this week blog. Thanks for your contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/weekly-challenge-208-3i23"&gt;Weekly Challenge 208&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You get the nitty gritty exposed in the blog post with examples. Well done.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/03/13/2023-11-ainions/"&gt;2023.11 Ainions&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dxlix-metacpan-weekly-report-playwright.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/03/dlxxvi-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  The corner of Gabor
&lt;/h2&gt;

&lt;p&gt;A couple of entries sneaked in by Gabor.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/the-problem-with-open-source-not-enough-contributors-5gpm"&gt;The problem with open source: not enough contributors&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I have a feeling that there are not enough people contributing to open source, but GitHub reports to have 94M users. Am I mistaken or is that number misleading?&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/github-actions-and-workflows-20p1"&gt;GitHub Actions and Workflows&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The name 'GitHub Actions' reffers to two different things. One of them is also called 'GitHub Actions Workflows'.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/one-liner-remove-first-two-characters-of-every-line-in-thousands-of-files-2jm4"&gt;One-liner: Remove first two characters of every line in thousands of files&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A very simple problem for someone who knows Perl. So it was posted on a forum where few people know Perl.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/pxi"&gt;Adventure! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game and they’re looking for experienced Perl people who have passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/uww"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The best senior developers know that variety is the spice of life. Sure, you’ve got Perl chops for days, but that’s not all you can do — and that’s why our client wants to meet you. They’re looking for senior Perl developers, Node engineers, and those with mighty Python and SQL skills to lead their team.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/0cg"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-608-love-you-perl-46eh</id>
    <published>2023-03-20T06:49:17Z</published>
    <updated>2023-03-20T06:49:17Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Modulabile</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/20/modulabile/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I want to tack a new meaning to the Italian word <strong>Modulabile</strong>.</p>
</blockquote>

<p><em>Modulabile</em> is an Italian word that more or less means <em>adjustable</em>. I’d
like to attach a new meaning in a <a href="https://www.perl.org/">Perl</a> context, though, and in
particular <em>of a module that can be easily used in a one-liner</em>.</p>

<p>We already know about <a href="https://gitlab.com/polettix/notechs/-/snippets/1868370">Modulino</a>s: a <a href="https://www.perl.org/">Perl</a> module that doubles down as
an executable, if needed.</p>

<p>Now, with a <em>Modulabile</em> I’d like to do something much in that spirit, but
going a bit farther. Where modulinos are normally created as an evolution
from programs to make them more easily testable, with a <em>Modulabile</em> I’d
like to add an easy way to use a module from the command line, or at least
its most obvious functionality.</p>

<p>The concept is by no means new or invented by me. The most egregious example
<em>that I personally know of</em> is the <a href="https://metacpan.org/pod/ojo">ojo</a> module, that allows placing a
catch <code class="language-plaintext highlighter-rouge">-Mojo</code> command line option to import a bunch of one-letter-long
functions to do all sorts of wonders with <a href="https://metacpan.org/pod/Mojolicious">Mojolicious</a>. From the
SYNOPSIS:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>perl <span class="nt">-Mojo</span> <span class="nt">-E</span> <span class="s1">'say g("mojolicious.org")-&gt;dom-&gt;at("title")-&gt;text'</span>
</code></pre></div></div>

<p>This way of having modules that can be also easily called as programs
<em>without the need to know where they have been installed</em> fascinates me. It
make the <em>module</em> somehow <em>able</em> to be run, hence the name by merging the
two words.</p>

<p>As an example, in recent module <a href="https://metacpan.org/pod/Validate::CodiceFiscale">Validate::CodiceFiscale</a> I added this
function, which can also be imported:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">sub </span><span class="nf">r</span> <span class="p">(@args) {</span>
   <span class="nv">@args</span> <span class="o">=</span> <span class="nv">@ARGV</span> <span class="k">unless</span> <span class="nv">@args</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$cf</span> <span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">validate_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">))</span> <span class="p">{</span>
         <span class="nv">say</span> <span class="p">"</span><span class="si">$i</span><span class="s2"> not ok - </span><span class="p">"</span> <span class="o">.</span> <span class="nb">join</span><span class="p">('</span><span class="s1">, </span><span class="p">',</span> <span class="nv">$errors</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">);</span>
         <span class="o">++</span><span class="nv">$n</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="nv">say</span> <span class="p">"</span><span class="si">$i</span><span class="s2"> ok - </span><span class="si">$cf</span><span class="p">";</span>
      <span class="p">}</span>
      <span class="o">++</span><span class="nv">$i</span><span class="p">;</span>
   <span class="p">}</span> <span class="c1">## end for my $cf (@ARGV)</span>
   <span class="k">return</span> <span class="nv">$n</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span> <span class="c1">## end sub r</span>
</code></pre></div></div>

<p>The short name makes it easy to import it from the command line: just use
option <code class="language-plaintext highlighter-rouge">-M</code> with the addition of two characters, i.e.
<code class="language-plaintext highlighter-rouge">-MValidate::CodiceFiscale=r</code>.</p>

<p>The way it takes arguments, defaulting to what comes from the command line
itself, makes it <em>extremely</em> easy to run the function. All in all, it’s
possible to do validation of a few strings on the command line like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl <span class="nt">-MValidate</span>::CodiceFiscale<span class="o">=</span>r <span class="nt">-er</span> <span class="s2">"</span><span class="nv">$string1</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$string2</span><span class="s2">"</span> ...
</code></pre></div></div>

<p>I was a bit surprised that the <code class="language-plaintext highlighter-rouge">-er</code> part works, I initially thought I would
have had to put it like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -M... -e 'r()' ...
</code></pre></div></div>

<p>or something similar. I quickly discovered that, having imported function
<code class="language-plaintext highlighter-rouge">r</code>, I could do away with the round parentheses and quotation marks, so this
would work as well:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -M... -e r ...
</code></pre></div></div>

<p>Then I just tried to remove the space, and it worked too!</p>

<p>There are many times when the functions in a module are better imported and
used in a <em>full</em> program; other times, though, they can come handy from the
command line, so why not enrich our module and make it a… <em>modulabile</em>?</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/20/modulabile/</id>
    <published>2023-03-20T06:00:00+01:00</published>
    <updated>2023-03-20T06:00:00+01:00</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 208</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-208/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-208/</id>
    <published>2023-03-20T00:00:00Z</published>
    <updated>2023-03-20T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 209</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-209/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Special Bit Characters 10. TASK #2: Merge Account HEADLINES  Welcome to the Week #209 of The Weekly Challenge.
We have new guest Simon Dueck joined Team PWC and shared solutions to Week #207 and Week #208 in F#.
E. Alvarez blog post sharing Javascript magic once again.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-209/</id>
    <published>2023-03-20T00:00:00Z</published>
    <updated>2023-03-20T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #208</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/03/perl-weekly-challenge-208.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11052</id>
    <published>2023-03-19T16:41:00Z</published>
    <updated>2023-03-19T17:25:48Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perlweeklychallengepractice" label="#perlweeklychallenge #practice" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>First of all, a greeting. I posted an introduction with a notification of intent to take over a module on CPAN, but the maintainer responded to me. I'm Avery, I'm developing <a href="https://github.com/oldtechaa/SeekMIDI">SeekMIDI</a>, a small graphical MIDI sequencer. I started it in 2016 and I took a long break from programming entirely, and I've just restarted developing my programming skills again. For starters, I'm working on Perl Weekly Challenges and bug fixes to modules.</p>

<p>Without further ado, here are my solutions to the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208">PWC #208</a>. All solutions are about to be posted, but this could be a spoiler if you're trying to solve it too. I was very pleased this week that I got it down to about 15-25 minutes for each task, so I'm definitely getting more comfortable in Perl again.</p>

<p>First, task 1:</p>

<pre><code>use strict;
use v5.10;

my @list1 = ("Perl", "Raku", "Love");
my @list2 = ("Raku", "Perl", "Hate");

# my @list1 = ("A", "B", "C");
# my @list2 = ("D", "E", "F");

# my @list1 = ("A", "B", "C");
# my @list2 = ("C", "A", "B");

my $minindex;
my @results;
for (my $index1 = 0; $index1 &lt; scalar @list1; $index1++) {
    for (my $index2 = 0; $index2 &lt; scalar @list2; $index2++) {
        if ($list1[$index1] eq $list2[$index2] &amp;&amp; defined($minindex)) {
            if ($index1 + $index2 &lt; $minindex) {
                @results = ($list1[$index1]);
                $minindex = $index1 + $index2;
            } elsif ($index1 + $index2 == $minindex) {
                push (@results, $list1[$index1]);
            }
        } elsif ($list1[$index1] eq $list2[$index2] &amp;&amp; !defined($minindex)) {
            @results = ($list1[$index1]);
            $minindex = $index1 + $index2;
        }
    }
}
if (scalar @results == 0) {exit}
foreach (@results) {
    say $_;
}
</code></pre>

<p>Pretty simple. For every item in list 1, I iterate through list 2 and look for a match with a lower sum than the previous lowest sum. If I find one it replaces the previous results, if it's equal I add it to the results. Then I say the results.</p>

<p>Now task 2:</p>

<pre><code>use strict;
use v5.10;

my $index;
my ($duplicate, $missing);
foreach (@ARGV) {
    if (!defined($index)) {$index = 1 and next}
    if ($_ == $ARGV[$index - 1]) {$duplicate = $_}
    if ($_ != $ARGV[$index - 1] + 1) {$missing = $ARGV[$index - 1] + 1}
    $index++;
}
defined($duplicate) &amp;&amp; defined($missing) ? say ("Duplicate is $duplicate", "\n", "Missing is $missing") : say -1;
</code></pre>

<p>For this one, I iterate through them and if it's the same thing as the previous one it's my duplicate and if it's not the previous item plus 1 then it's your missing number.</p>

<p>Anyways, hope you liked them this week. I always look at the other solutions blogged about and get ideas for use in my code. If you have any better ideas comment below.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge #208</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-208-1gc3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I've been doing the Perl Weekly Challenge, so here are my solutions to the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208">PWC #208</a>. All solutions are about to be posted, but this could be a spoiler if you're trying to solve it too. I was very pleased this week that I got it down to about 15-25 minutes for each task, so I'm definitely getting more comfortable in Perl again.</p>

<p>First, task 1:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use strict;
use v5.10;

my @list1 = ("Perl", "Raku", "Love");
my @list2 = ("Raku", "Perl", "Hate");

# my @list1 = ("A", "B", "C");
# my @list2 = ("D", "E", "F");

# my @list1 = ("A", "B", "C");
# my @list2 = ("C", "A", "B");

my $minindex;
my @results;
for (my $index1 = 0; $index1 &lt; scalar @list1; $index1++) {
    for (my $index2 = 0; $index2 &lt; scalar @list2; $index2++) {
        if ($list1[$index1] eq $list2[$index2] &amp;&amp; defined($minindex)) {
            if ($index1 + $index2 &lt; $minindex) {
                @results = ($list1[$index1]);
                $minindex = $index1 + $index2;
            } elsif ($index1 + $index2 == $minindex) {
                push (@results, $list1[$index1]);
            }
        } elsif ($list1[$index1] eq $list2[$index2] &amp;&amp; !defined($minindex)) {
            @results = ($list1[$index1]);
            $minindex = $index1 + $index2;
        }
    }
}
if (scalar @results == 0) {exit}
foreach (@results) {
    say $_;
}
</code></pre>

</div>

<p>Pretty simple. For every item in list 1, I iterate through list 2 and look for a match with a lower sum than the previous lowest sum. If I find one it replaces the previous results, if it's equal I add it to the results. Then I say the results.</p>

<p>Now task 2:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use strict;
use v5.10;

my $index;
my ($duplicate, $missing);
foreach (@ARGV) {
    if (!defined($index)) {$index = 1 and next}
    if ($_ == $ARGV[$index - 1]) {$duplicate = $_}
    if ($_ != $ARGV[$index - 1] + 1) {$missing = $ARGV[$index - 1] + 1}
    $index++;
}
defined($duplicate) &amp;&amp; defined($missing) ? say ("Duplicate is $duplicate", "\n", "Missing is $missing") : say -1;
</code></pre>

</div>

<p>For this one, I iterate through them and if it's the same thing as the previous one it's my duplicate and if it's not the previous item plus 1 then it's your missing number.</p>

<p>Anyways, hope you liked them this week. I always look at the other solutions blogged about and get ideas for use in my code. If you have any better ideas comment below.</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-208-1gc3</id>
    <published>2023-03-19T12:28:59Z</published>
    <updated>2023-03-19T12:28:59Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="challenge"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/667b5e477c41bf4038ea32ab84f239f32e5d04a4</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/667b5e477c41bf4038ea32ab84f239f32e5d04a4"/>
    <title>
        embed.fnc - remove redundant deprecate_xxx() macro declarations
    </title>
    <updated>2023-03-19T10:29:44Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;embed.fnc - remove redundant deprecate_xxx() macro declarations

autodoc.pl gets unhappy if you document a macro in place and ALSO list
it in embed.fnc. The warnings it produce tend to get crowded out from a
parallel make, but @iabyn noticed and (rightly) complained.

This removes the redundant definitions.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Weekly Challenge 208</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-208-3i23" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-208/sgreen">My solutions</a></p>

<p>Last minute commit this week, so this blog will be briefer than usual.</p>

<h2>
  
  
  Task 1: Minimum Index Sum
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given two arrays of strings.</p>

<p>Write a script to find out all common strings in the given two arrays with minimum index sum. If no common strings found returns an empty list.</p>

<h3>
  
  
  My solution
</h3>

<p>This is one of those tasks where optimisation of the solution probably isn't required. I'm sure some clever Team PWC people have a blog post on the most optimal solution.</p>

<p>For this task, I extract the word-like strings from the first two parameters, and call them <code>first_list</code> and <code>second_list</code> (yeah, really imaginative list names!)</p>

<p>I then set <code>index_sum</code> to one more than the length of the combined list. This ensures that if we do find a solution <code>index_sum</code> will be lower.</p>

<p>I then iterate over <code>first_list</code>, with <code>i1</code> as the index position and <code>w</code> being the word at that position. I then retrieve the position of that word in the <code>second_list</code>. If it appears, I calculate the sum of the positions, and take action if it is the same or less than the current <code>index_sum</code> value.</p>

<p>Python doesn't seem to have a built in command to get the index of an item in a list that matches a criteria (in this case the word), so I created a function called <code>find_index_in_list</code> to do this. To be fair, neither does Perl, but <a href="https://metacpan.org/pod/List::MoreUtils#first_index-BLOCK-LIST">first_index</a> from List::MoreUtils does what we want.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py <span class="s2">"Perl Raku Love"</span> <span class="s2">"Raku Perl Like"</span>
<span class="o">(</span><span class="s2">"Perl"</span>, <span class="s2">"Raku"</span><span class="o">)</span>

<span class="nv">$ </span>./ch-1.py <span class="s2">"A B C"</span> <span class="s2">"D E F"</span>
<span class="o">()</span>

<span class="nv">$ </span>./ch-1.py <span class="s2">"A B C"</span> <span class="s2">"C A B"</span>
<span class="o">(</span><span class="s2">"A"</span><span class="o">)</span>
</code></pre>

</div>



<h2>
  
  
  Task 2: Duplicate and Missing
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given an array of integers in sequence with one missing and one duplicate.</p>

<p>Write a script to find the duplicate and missing integer in the given array. Return -1 if none found.</p>

<p>For the sake of this task, let us assume the array contains no more than one duplicate and missing.</p>

<h3>
  
  
  My solution
</h3>

<p>The examples don't give us an indication on what the expected output is when there is no duplicate, but there is a missing number, as is the case with <code>[1, 2, 33, 4]</code>. In the case, the first value in the output is going to be blank.</p>

<p>For this task, I iterate from 1 to the length of the array, and count the number of items in the list that have that value. If there are none, I set the <code>missing</code> value. If there is more than 1, I set the <code>duplicate</code> value.</p>

<p>Finally I print the output as provided in the examples.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 1 2 2 4
<span class="o">(</span>2, 3<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 2 3 4
<span class="nt">-1</span>

<span class="nv">$ </span>./ch-2.py 1 2 3 3
<span class="o">(</span>3, 4<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 2 3 33
<span class="o">(</span>, 4<span class="o">)</span>
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-208-3i23</id>
    <published>2023-03-19T09:51:23Z</published>
    <updated>2023-03-19T09:51:23Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5037014830039743391</id>
    <published>2023-03-19T08:58:00.000+01:00</published>
    <updated>2023-03-19T08:58:08.089+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxvi) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.320&lt;/strong&gt; on 2023-03-14, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.316 was 23 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/Crypt-Passphrase-0.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.010&lt;/strong&gt; on 2023-03-14, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.009 was 5 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.68&lt;/strong&gt; on 2023-03-14, with 52 votes&lt;/li&gt;  &lt;li&gt;Previous version: 7.66 was 2 months, 20 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-2.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.07&lt;/strong&gt; on 2023-03-14, with 58 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.05 was 3 months, 28 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PLICEASE'&gt;PLICEASE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2023-03-17, with 56 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 5 months before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2023-03-17, with 45 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.64 was 1 month, 3 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/PEVANS'&gt;PEVANS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2023-03-13, with 25 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.36 was 2 months, 14 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/NLNETLABS'&gt;NLNETLABS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.014' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.014&lt;/strong&gt; on 2023-03-14, with 31 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.013 was 3 months, 11 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/RHANDOM'&gt;RHANDOM&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/Term-Choose-1.758' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.758&lt;/strong&gt; on 2023-03-17, with 13 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.757 was 8 months before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KUERBIS'&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302194' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302194&lt;/strong&gt; on 2023-03-14, with 182 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.302193 was 8 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/EXODIST'&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5037014830039743391/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5037014830039743391"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5037014830039743391"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxvi-10-great-cpan-modules-released.html" title="(cdxxxvi) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7841764249391873793</id>
    <published>2023-03-19T08:08:00.001+01:00</published>
    <updated>2023-03-19T08:08:22.913+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlix) metacpan weekly report - Playwright</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/03/19 07:07:48 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Affix" target="_blank"&gt;Affix&lt;/a&gt; - A Foreign Function Interface eXtension&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Roundtrip" target="_blank"&gt;Data::Roundtrip&lt;/a&gt; - convert between Perl data structures, YAML and JSON with unicode support (I believe ...)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::RU::Numeral" target="_blank"&gt;Lingua::RU::Numeral&lt;/a&gt; - Perl extension for generate Russian wording of numerals from the natural numbers and 0 (zero).&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::DirectoryServer" target="_blank"&gt;Mojolicious::Plugin::DirectoryServer&lt;/a&gt; - Serve static files from document root with directory index&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::OAuth" target="_blank"&gt;Net::Google::OAuth&lt;/a&gt; - Simple Google oauth api module&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::Deb::Control" target="_blank"&gt;Parse::Deb::Control&lt;/a&gt; - parse and manipulate debian/control in a controlable way&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlX::ScopeFunction" target="_blank"&gt;PerlX::ScopeFunction&lt;/a&gt; - new keywords for creating scopes.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Terse" target="_blank"&gt;Terse&lt;/a&gt; - Lightweight Web Framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Contact" target="_blank"&gt;WWW::Contact&lt;/a&gt; - Get contacts/addressbook from Web&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Google::Contacts" target="_blank"&gt;WWW::Google::Contacts&lt;/a&gt; - Google Contacts Data API&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/app::paperback" target="_blank"&gt;app::paperback&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::RecordStream" target="_blank"&gt;App::RecordStream&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Business::ISMN" target="_blank"&gt;Business::ISMN&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cassandra::Client" target="_blank"&gt;Cassandra::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::GGPlot" target="_blank"&gt;Chart::GGPlot&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPANPLUS" target="_blank"&gt;CPANPLUS&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Compare" target="_blank"&gt;Data::Compare&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Frame" target="_blank"&gt;Data::Frame&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Games::Chess" target="_blank"&gt;Games::Chess&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::RestApi" target="_blank"&gt;Google::RestApi&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hydrogen" target="_blank"&gt;Hydrogen&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager" target="_blank"&gt;Imager&lt;/a&gt; (+1=62)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::MQTT::Simple" target="_blank"&gt;Net::MQTT::Simple&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::Graphics::Prima" target="_blank"&gt;PDL::Graphics::Prima&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perldoc::Server" target="_blank"&gt;Perldoc::Server&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=141)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Moment" target="_blank"&gt;Time::Moment&lt;/a&gt; (+1=71)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::API" target="_blank"&gt;Twitter::API&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UNIVERSAL::Object" target="_blank"&gt;UNIVERSAL::Object&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Venus" target="_blank"&gt;Venus&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=95)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Firefox" target="_blank"&gt;WWW::Mechanize::Firefox&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X11::Protocol" target="_blank"&gt;X11::Protocol&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7841764249391873793/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlix-metacpan-weekly-report-playwright.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7841764249391873793"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7841764249391873793"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlix-metacpan-weekly-report-playwright.html" title="(dxlix) metacpan weekly report - Playwright"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1895189475877227587</id>
    <published>2023-03-19T08:06:00.000+01:00</published>
    <updated>2023-03-19T08:06:15.347+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2023-03-19 07:05:48 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75751245" target="_blank"&gt;Subroutine with same name in 2 different CPAN modules&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75773212" target="_blank"&gt;Where in the perl documentation does it mention 0.0001, 0.00001 printing differences?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75715549" target="_blank"&gt;How do you use globbing in perl for a one-liner with many files, avoiding xargs/find/etc&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75756560" target="_blank"&gt;why do @- and @+ have different sizes after perl regex match&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75760912" target="_blank"&gt;Using a module or a feature in another package than where it is supposed to be used&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1895189475877227587/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1895189475877227587"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1895189475877227587"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dlxxvi-stackoverflow-perl-report.html" title="(dlxxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl Interview question and answers 2023</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Collection of resources for anyone preparing for a Perl programming interview. These frequently asked questions and their detailed answers&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-interview-question-and-answers-2023-ec4458f6f26a?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/ec4458f6f26a</id>
    <published>2023-03-05T16:23:53Z</published>
    <updated>2023-03-19T05:10:07.604000Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="perl-programming"/>
    <category term="interview-questions"/>
    <category term="perl-interview-questions"/>
  </entry>
  <entry>
    <title>Perl Coding Interview Question and Answers</title>
    <link rel="alternate" href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/740/1*5Ze5CvvJkvnsARFSatSA1w.jpeg" width="740"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;As a Perl developer, you need to have a solid understanding of the language&amp;#x2019;s syntax, semantics, and best practices. This blog provides a&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@surajtaradale/perl-coding-interview-question-and-answers-a7c5b8e823e1?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Suraj Taradale</name>
    </author>
    <id>https://medium.com/p/a7c5b8e823e1</id>
    <published>2023-03-19T05:07:58Z</published>
    <updated>2023-03-19T05:07:58.592000Z</updated>
    <category term="interview-preparation"/>
    <category term="programming"/>
    <category term="coding-interviews"/>
    <category term="perl-interview-questions"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, F#, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Korn Shell, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2023-03-19T00:00:00Z</published>
    <updated>2023-03-19T00:00:00Z</updated>
  </entry>
  <entry>
    <title>First release of Validate::CodiceFiscale</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/19/validate-codicefiscale/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I pushed the first release of <a href="https://metacpan.org/pod/Validate::CodiceFiscale">Validate::CodiceFiscale</a>.</p>
</blockquote>

<p>I recently had to validate some <em>Codice Fiscale</em> (sort of social security
number) and turned to the mighty <a href="https://metacpan.org/">CPAN</a>. It contains a module that can be
used to this goal, but I was not too enthusiastic about it.</p>

<p>My main itch is about this:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$obj</span> <span class="o">=</span> <span class="nn">String::</span><span class="nv">CodiceFiscale</span><span class="o">-&gt;</span><span class="nv">parse</span><span class="p">('</span><span class="s1">WLLLRY87T18Z404B</span><span class="p">');</span>
 
<span class="k">unless</span> <span class="p">(</span><span class="nv">$obj</span><span class="p">)</span> <span class="p">{</span>                 <span class="c1"># check for errors</span>
   <span class="k">print</span> <span class="p">"</span><span class="s2">We have an error: </span><span class="p">"</span> <span class="o">.</span> <span class="nn">String::</span><span class="nv">CodiceFiscale</span><span class="o">-&gt;</span><span class="nv">error</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In my very humble opinion, parse errors should be collected at the point of
parsing, not with some <em>global</em> mechanism like a class method. Even though
I’m probably not going to use it anywhere near parallel stuff that might
suffer from it, I just don’t like the deliberate introduction of some tech
debt that is easily avoidable from the beginning.</p>

<p>So I had two paths: suggest a different interface, or roll another module. I
quickly opted for the latter, because a different interface would mean
breaking wherever that module has been used so far, at leat by the original
author.</p>

<p>So I went on with <a href="https://metacpan.org/pod/Validate::CodiceFiscale">Validate::CodiceFiscale</a>, here’s the initial SYNOPSIS:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">Validate::</span><span class="nv">CodiceFiscale</span> <span class="sx">qw&lt; assert_valid_cf is_valid_cf validate_cf &gt;</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$valid</span>   <span class="o">=</span> <span class="p">'</span><span class="s1">RSSMRA98S03B833G</span><span class="p">';</span>
<span class="k">my</span> <span class="nv">$invalid</span> <span class="o">=</span> <span class="p">'</span><span class="s1">RSICRL99C51C967X</span><span class="p">';</span>

<span class="c1"># the first does not warn, the second does warn</span>
<span class="nb">eval</span> <span class="p">{</span> <span class="nv">assert_valid_cf</span><span class="p">(</span><span class="nv">$valid</span><span class="p">);</span>   <span class="mi">1</span> <span class="p">}</span> <span class="ow">or</span> <span class="nb">warn</span> <span class="p">"</span><span class="s2">died: $@</span><span class="p">";</span>
<span class="nb">eval</span> <span class="p">{</span> <span class="nv">assert_valid_cf</span><span class="p">(</span><span class="nv">$invalid</span><span class="p">);</span> <span class="mi">1</span> <span class="p">}</span> <span class="ow">or</span> <span class="nb">warn</span> <span class="p">"</span><span class="s2">died: $@</span><span class="p">";</span>

<span class="c1"># plain boolean test, any error short-circuits</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">is_valid_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">))</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>

<span class="c1"># get everything that's wrong</span>
<span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$errors</span> <span class="o">=</span> <span class="nv">validate_cf</span><span class="p">(</span><span class="nv">$invalid</span><span class="p">))</span> <span class="p">{</span>
   <span class="nv">say</span> <span class="k">for</span> <span class="nv">$errors</span><span class="o">-&gt;</span><span class="nv">@*</span><span class="p">;</span> <span class="c1"># array with error report, one line per error</span>
<span class="p">}</span>

<span class="c1"># it's possible to pass additional validation options, like specific</span>
<span class="c1"># data. All are optional, if present they're validate, otherwise</span>
<span class="c1"># ignored.</span>
<span class="nv">assert_valid_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">,</span>
   <span class="p">{</span>
      <span class="s">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
         <span class="s">name</span> <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">Foo</span><span class="p">',</span>
         <span class="s">surname</span> <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">Bar</span><span class="p">',</span>
         <span class="s">sex</span> <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">f</span><span class="p">',</span>
         <span class="s">birthdate</span> <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">1998-03-11</span><span class="p">',</span>
         <span class="s">birthplace</span> <span class="o">=&gt;</span> <span class="p">'</span><span class="s1">B833</span><span class="p">',</span>
      <span class="p">}</span>
   <span class="p">}</span>
<span class="p">);</span>

<span class="c1"># the assertion short-circuits by default, failing at the first</span>
<span class="c1"># error. It's possible to check everyting and get a longer error</span>
<span class="c1"># message, in case.</span>
<span class="nv">assert_valid_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">,</span> <span class="p">{</span> <span class="s">all_errors</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">});</span>

<span class="c1"># it's also possible to wrap the error generation, by returning the</span>
<span class="c1"># exception to throw</span>
<span class="nv">assert_valid_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">,</span>
   <span class="p">{</span>
      <span class="s">all_errors</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
      <span class="s">on_error</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span>
         <span class="k">my</span> <span class="nv">@errors</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
         <span class="k">return</span> <span class="p">"</span><span class="s2">number of errors: </span><span class="si">$n_errors</span><span class="se">\n</span><span class="p">";</span>
      <span class="p">}</span>
   <span class="p">}</span>
<span class="p">);</span>

<span class="c1"># of course, it's possible to throw the exception directly</span>
<span class="k">use</span> <span class="nv">Ouch</span><span class="p">;</span>
<span class="nv">assert_valid_cf</span><span class="p">(</span><span class="nv">$cf</span><span class="p">,</span> <span class="p">{</span> <span class="s">on_error</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nv">ouch</span> <span class="mi">400</span><span class="p">,</span> <span class="vg">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">}</span> <span class="p">});</span>
</code></pre></div></div>

<p>I’ll be eager to see the results of <a href="https://cpantesters.org/">CPAN Testers</a>, as usual, even though
I suspect there’s something weird going on there. I released a couple of
modules recently, and it’s a bit weird that I didn’t get any feedback so
far. Let’s see.</p>

<p>Stay safe and validated!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/19/validate-codicefiscale/</id>
    <published>2023-03-19T00:01:00+01:00</published>
    <updated>2023-03-19T00:01:00+01:00</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The first line of Perl_CGI script, env perl vs perl only, how different?</title>
    <link rel="alternate" href="https://blogs.perl.org/users/kido_mitsuru/2023/03/the-first-line-of-perl-cgi-script-env-perl-vs-perl-only-how-different.html"/>
    <id>tag:blogs.perl.org,2023:/users/kido_mitsuru//4229.11051</id>
    <published>2023-03-18T08:45:05Z</published>
    <updated>2023-03-18T09:00:03Z</updated>
    <author>
        <name>Kido Mitsuru</name>
        
    </author>
    <category term="env" label="env" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/kido_mitsuru/">
        <![CDATA[<p>Hi !  Everyone there !  How are you ?</p>

<p>Until recently I runs all of my Perl scripts as well as Perl_CGI scripts by starting the folowing salutation,</p>

<p>#! /usr/bin/perl -w</p>

<p>The script with this beginning runs well at BASH shell at (/home/mkido/bin) LINUX such as Fedora, Ubuntu, Rocky (Alma-derivative).   However, almost right now I noticed some of Perl example around has the different first line as below, </p>

<p>#! /usr/bin/env perl </p>

<p>And it doesn't seem to run at HOME BASH shell  (/home/mkido/bin) by simple way of executing it by-itself by the command line.    Will someone explain me about what is this [env perl] stuff?      Thank you so much.</p>

<p>Mitsuru Kido</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Template Toolkit’s DEFAULT is not too useful</title>
    <link rel="alternate" href="https://blogs.perl.org/users/aristotle/2023/03/template-toolkit-default-directive.html"/>
    <id>tag:blogs.perl.org,2023:/users/aristotle//15.11049</id>
    <published>2023-03-15T12:06:17Z</published>
    <updated>2023-03-18T06:04:07Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Crib Sheet" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/aristotle/">
        <![CDATA[<p>Quoth <a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod#DEFAULT" title="Template::Manual::Directives - Template directives">the fine manual for Template Toolkit</a>:</p>

<blockquote>
  <p>The <code>DEFAULT</code> directive is similar to <code>SET</code> but only updates variables that are currently undefined or have no "true" value (in the Perl sense).</p>
</blockquote>

<p>Nice. Basically, where <code>SET</code> is like the <code>=</code> operator in Perl, <code>DEFAULT</code> is like the <code>||=</code> operator. Quite useful! If it were, that is. Because the analogy is only superficially true.</p>
]]>
        <![CDATA[<p>You see, <code>DEFAULT</code> in Template Toolkit does not short-circuit: it evaluates the right-hand side <em>before</em> it checks whether the expression on the left-hand side is true. If you deparse the compiled template it is obvious why:</p>

<pre><code>SET foo = bar ;
# compiles to: $stash-&gt;set('foo', $stash-&gt;get(['bar']));

DEFAULT foo = bar ;
# compiles to: $stash-&gt;set('foo', $stash-&gt;get(['bar']), 1);
</code></pre>

<p>It turns out that <code>DEFAULT</code> is not just similar to <code>SET</code>, it is literally the same thing. And as you can see, by the time the <code>set</code> method runs and gets to examine the value in <code>foo</code>, the <code>get</code> method will have already run and returned. In the case of <code>SET</code>, the order in which these calls happen makes no difference, because <code>foo</code> will be set either way. But for <code>DEFAULT</code> the order most certainly matters.</p>

<p>In the example so far this results in at most a bit of wasted computation, but it becomes an actual problem in cases where short-circuiting actually affects the outcome, e.g.</p>

<pre><code>DEFAULT foo = lookup_or_die( bar ) ;
# compiles to:
# $stash-&gt;set('foo', $stash-&gt;get(['lookup_or_die', [$stash-&gt;get('bar')]]));
</code></pre>

<p>Here you might have hoped to be saying “if <code>foo</code> wasn’t passed, populate it from a lookup on <code>bar</code>” but what you actually ended up saying is “do a lookup on <code>bar</code> and then put that value in <code>foo</code> unless something is in there already”. So if <code>bar</code> contains a value for which you know the lookup fails, and you were hoping that passing a value for <code>foo</code> would allow you to sidestep that, your hopes will be dashed. To say what you were hoping to say, you have to be explicit:</p>

<pre><code>SET foo = lookup_or_die( bar ) UNLESS foo ;
# compiles to:
# unless ($stash-&gt;get('foo')) {
#   $stash-&gt;set('foo', $stash-&gt;get(['lookup_or_die', [$stash-&gt;get('bar')]]));
# }
</code></pre>

<p>The bottom line is that <code>DEFAULT</code> is only truly fit for use with constants on the right-hand side. An expression without side effects on the right-hand side will work, but will do wasted work, which may or may not be significant. A right-hand side expression with any sort of side effect likely means you just created yourself a bug.</p>

<p>(This is mostly a note to self, written in hopes that doing so will make the lesson stick.)</p>
]]>
    </content>
</entry>
  <entry>
    <title>PWC208 - Duplicate and Missing</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/18/pwc208-duplicate-and-missing/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/">#208</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given an array of integers in sequence with one missing and one
duplicate.</p>

  <p>Write a script to find the duplicate and missing integer in the given
array. Return -1 if none found.</p>

  <p>For the sake of this task, let us assume the array contains no more than
one duplicate and missing.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @nums = (1,2,2,4)
Output: (2,3)

Duplicate is 2 and Missing is 3.
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @nums = (1,2,3,4)
Output: -1

No duplicate and missing found.
</code></pre></div>  </div>

  <p><strong>Example 3:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @nums = (1,2,3,3)
Output: (3,4)

Duplicate is 3 and Missing is 4.
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>This issue sparked so many questions that there must be something wrong
<em>somewhere</em>. I mean, either I’ve become increasingly <em>soft</em> lately, sparing
our fine host <a href="http://www.manwar.org/">manwar</a> of my usual useless nitpicking, or he decided to
throw me a bone just to have a good laugh.</p>

<p>Anyway.</p>

<p>All examples seem to start at 1. Is this a general rule? It’s not in the
rules, so I guess it’s a coincidence and will not assume this.</p>

<p>Is the “sequence” in the input array supposed to be an arithmetic
progression with common difference equal to 1? I mean, any sequence is a
sequence 🙄</p>

<p>The last example seems to imply that not finding the missing element
<em>within</em> the array is still OK, because it must be the one immediately
following. Why not the one immediately before (like 0 in the example)?</p>

<p>How are we supposed to return/print the two elements, if present? Should it
always be <em>duplicate first, then missing</em>? Or in the order of their
detection (which also happens to be their order of discovery, assuming that
the <em>missing missing</em> is the one immediately after)?</p>

<p>Is there any assumption that can be done about the position of the
duplicates and missing elements? I mean, are their positions totally random
and not correlated to one another, or anything else?</p>

<p>Is the sequence mostly short, or should we cope with very long sequences?</p>

<h1 id="the-solution">The solution</h1>

<p>The last two questions come from my strong tendency to over-engineer. I
mean…</p>

<ul>
  <li>if the inputs are very long…</li>
  <li>… and the distribution of the duplicates and missing are random and not
correlated…</li>
</ul>

<p>it might make sense to think about optimizing the solution with some
adaptation of a binary search and linear search below a certain point.</p>

<blockquote>
  <p>Why “not correlated”? If the missing always occurs very close to the
duplicate, it’s very hard to spot the division points by binary search, so
it would just make sense to do a linear search.</p>
</blockquote>

<p>Anyway, let’s assume it remains at the toy level, so we will only focus on
the linear search, right?</p>

<p>Let’s start with <a href="https://www.perl.org/">Perl</a> first. We can assume that the input is OK, but
given all other questions… <em>can we trust these assumptions?!?</em> Let the
user (partially) decide!</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">our</span> <span class="nv">$SHORT_CIRCUIT</span> <span class="o">=</span> <span class="nv">$ENV</span><span class="p">{</span><span class="nv">SHORT_CIRCUIT</span><span class="p">}</span> <span class="sr">//</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">@dam</span> <span class="o">=</span> <span class="nv">duplicate_and_missing</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">))</span> <span class="p">{</span>
   <span class="nb">local</span> <span class="vg">$"</span> <span class="o">=</span> <span class="p">'</span><span class="s1">,</span><span class="p">';</span>
   <span class="nv">say</span> <span class="p">"</span><span class="s2">(</span><span class="si">@dam</span><span class="s2">)</span><span class="p">";</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
   <span class="nv">say</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">duplicate_and_missing</span> <span class="p">(@list) {</span>
   <span class="k">my</span> <span class="p">(</span><span class="nv">$duplicate</span><span class="p">,</span> <span class="nv">$missing</span><span class="p">,</span> <span class="nv">@retval</span><span class="p">);</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$#list</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
         <span class="nb">die</span> <span class="p">"</span><span class="s2">too many duplicates (</span><span class="si">$duplicate</span><span class="s2">, </span><span class="si">$list</span><span class="s2">[</span><span class="si">$i</span><span class="s2">])</span><span class="se">\n</span><span class="p">"</span>
            <span class="k">if</span> <span class="nb">defined</span> <span class="nv">$duplicate</span><span class="p">;</span>
         <span class="nb">push</span> <span class="nv">@retval</span><span class="p">,</span> <span class="nv">$duplicate</span> <span class="o">=</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="k">elsif</span> <span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$miss</span> <span class="o">=</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
         <span class="nb">die</span> <span class="p">"</span><span class="s2">too many missing (</span><span class="si">$missing</span><span class="s2">, </span><span class="si">$miss</span><span class="s2">)</span><span class="se">\n</span><span class="p">"</span> <span class="k">if</span> <span class="nb">defined</span> <span class="nv">$missing</span><span class="p">;</span>
         <span class="nb">push</span> <span class="nv">@retval</span><span class="p">,</span> <span class="nv">$missing</span> <span class="o">=</span> <span class="nv">$miss</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">elsif</span> <span class="p">(</span><span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">!=</span> <span class="nv">$list</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
         <span class="nb">die</span> <span class="p">"</span><span class="s2">unexpected gap</span><span class="se">\n</span><span class="p">";</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{}</span> <span class="c1"># just a simple increment</span>
      <span class="k">return</span> <span class="nv">@retval</span> <span class="k">if</span> <span class="nv">@retval</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="k">our</span> <span class="nv">$SHORT_CIRCUIT</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="k">unless</span> <span class="nb">defined</span><span class="p">(</span><span class="nv">$duplicate</span><span class="p">);</span>
   <span class="nb">push</span> <span class="nv">@retval</span><span class="p">,</span> <span class="nv">$list</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">unless</span> <span class="nv">@retval</span> <span class="o">==</span> <span class="mi">2</span><span class="p">;</span>
   <span class="k">return</span> <span class="nv">@retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <a href="https://raku.org/">Raku</a> version can appear to be… <em>disappointing</em>. I nknow there must
be more idiomatic ways of putting it, but using them at every cost might be
bad for <em>my</em> readability, so let’s not pull the rope too much!</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) {
   my @dam = duplicate-and-missing(@args, %*ENV&lt;SHORT_CIRCUIT&gt;);
   put @dam ?? "({@dam.join(',')})" !! -1;
}

sub duplicate-and-missing (@list, $short-circuit is copy = Nil) {
   $short-circuit //= True;
   my ($duplicate, $missing, @retval);
   for 1 ..^ @list -&gt; $i {
      if @list[$i] == @list[$i - 1] {
         die "too many duplicates ($duplicate, {@list[$i]})\n"
            if defined $duplicate;
         @retval.push: $duplicate = @list[$i];
      }
      elsif (@list[$i] == @list[$i - 1] + 2) {
         my $miss = @list[$i] - 1;
         die "too many missing ($missing, $miss)\n" if defined $missing;
         @retval.push: $missing = $miss;
      }
      elsif (@list[$i] != @list[$i - 1] + 1) {
         die "unexpected gap\n";
      }
      else {} # just a simple increment
      return @retval if @retval == 2 &amp;&amp; $short-circuit;
   }
   return [] unless defined($duplicate);
   @retval.push(@list[*-1] + 1) unless @retval == 2;
   return @retval;
}
</code></pre>

<p>I guess it’s everything for this post, stay safe folks!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/18/pwc208-duplicate-and-missing/</id>
    <published>2023-03-18T07:00:00+01:00</published>
    <updated>2023-03-18T07:00:00+01:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>SPVM::Sys now supports symbolic links on Windows, adds Perl-compatible API.</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvmsys-now-supports-symbolic-links-on-windows-adds-perl-compatible-api-4nle" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>We reported last week that we were working on support for symbolic links on Windows to <a href="https://metacpan.org/pod/SPVM::Sys">SPVM::Sys</a>. Finally, SPVM::Sys now supports symbolic links on Windows.</p>

<h1>
  
  
  Symbolic Link Support on Windows
</h1>

<p>Portable <a href="https://metacpan.org/pod/SPVM::Sys#symlink">symlink</a>, <a href="https://metacpan.org/pod/SPVM::Sys#readlink">readlink</a>, and <a href="https://metacpan.org/pod/SPVM::Sys#l">l</a> methods have been added that also work on Windows, and <a href="https://metacpan.org/pod/SPVM::Sys#unlink">unlink</a> and <a href="https://metacpan.org/pod/SPVM::Sys#rename">rename</a> methods also support symbolic links.</p>

<p>In the process of testing symlinks, it was necessary to run Github Action in Windows developer mode. This is because symlink, which creates symbolic links, is not authorized in administrator mode, but only in developer mode. You can see how to do this in <a href="https://github.com/yuki-kimoto/SPVM-Sys/blob/master/.github/workflows/windows-latest-devel-mode.yml">this Github Action</a> using <code>ilammy/msvc-dev-cmd</code>.</p>

<h1>
  
  
  Perl Compatible API
</h1>

<p>A Perl-compatible API has been added to the <a href="https://metacpan.org/pod/SPVM::Sys#Class-Methods">Sys</a> class, so if you need to change your implementation between Linux and Windows, this class will take care of it.</p>

<h1>
  
  
  zlib support
</h1>

<p>Next week, we will try to support <a href="https://github.com/madler/zlib">zlib</a>, a module for GZIP. First we will resource the latest version of the zlib library. Then, we will implement the GZIP compression and decompression features of Perl's <a href="https://metacpan.org/pod/Compress::Raw::Zlib">Compress::Raw::Zlib</a>. And implement GZIP and compression functionality in <a href="https://metacpan.org/pod/IO::Compress::Gzip">IO::Compress::Gzip</a>.</p>

<p>The goal of the SPVM project within one year is to create a module to implement a web framework, GZIP compression is required for the ability to send and receive compressed content.</p>

<p>Translated with <a href="http://www.DeepL.com/Translator">www.DeepL.com/Translator</a> (free version)</p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvmsys-now-supports-symbolic-links-on-windows-adds-perl-compatible-api-4nle</id>
    <published>2023-03-17T23:02:17Z</published>
    <updated>2023-03-17T23:02:17Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
  <title>Deadline for TPRC </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprctalks"/>
  <id>tag:news.perlfoundation.org,2023-03-17:/post/tprctalks</id>
  <published>2023-03-17T13:58:45</published>
  <updated>2023-03-17T13:58:45</updated>
  <summary>
  <![CDATA[
     The Perl Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers. The Perl Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023. The deadline to submit your talks is coming up quickly! Please 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl &amp; Raku Conference is a high-quality, inexpensive technical Conference that celebrates the Perl and Raku programming languages. The beauty of the conference is that it remains accessible to everyone regardless of experience, yet it is still valuable to the most skilled programmers.</p>

<p>The Perl &amp; Raku Conference 2023 will be held in Toronto, Ontario, Canada from July 11-13, 2023.</p>

<p>The deadline to submit your talks is coming up quickly! Please visit https://www.papercall.io/tprctor23 to submit your talk before March 31st. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>PWC208 - Minimum Index Sum</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/03/17/pwc208-minimum-index-sum/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/">#208</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given two arrays of strings.</p>

  <p>Write a script to find out all common strings in the given two arrays with
minimum index sum. If no common strings found returns an empty list.</p>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list1 = ("Perl", "Raku", "Love")
       @list2 = ("Raku", "Perl", "Hate")

Output: ("Perl", "Raku")

There are two common strings "Perl" and "Raku".
Index sum of "Perl": 0 + 1 = 1
Index sum of "Raku": 1 + 0 = 1
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list1 = ("A", "B", "C")
       @list2 = ("D", "E", "F")

Output: ()

No common string found, so no result.
</code></pre></div>  </div>

  <p><strong>Example 3</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list1 = ("A", "B", "C")
       @list2 = ("C", "A", "B")

Output: ("A")

There are three common strings "A", "B" and "C".
Index sum of "A": 0 + 1 = 1
Index sum of "B": 1 + 2 = 3
Index sum of "C": 2 + 0 = 2
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>All examples seem to hint that the two lists have the same length, but I’ll
assume that they might have different ones. I’ll also consider that one list
might have repeated items, and that taking the one with the lowest index is
fine.</p>

<p>Another gray corner is whether the comparison should be case sensitive or
not - I’ll assume yes, i.e. <code class="language-plaintext highlighter-rouge">Foo</code> and <code class="language-plaintext highlighter-rouge">foo</code> are different strings.</p>

<h1 id="the-solution">The solution</h1>

<p>As we have to match items from one list with items from the other, it makes
sense to construct an <em>inverted index mapping</em> for the second list, taking a
string as key and providing the (lowest available) index as value. This
comes very easy mixing the <code class="language-plaintext highlighter-rouge">.kv</code> method to get an alternation of indexes and
values from the list, as well as using <code class="language-plaintext highlighter-rouge">.reverse</code> which both gives us the
inverted indexing (switching places between keys and values) <strong>and</strong>
selecting the lowest index as the winner in case of duplicates:</p>

<pre><code class="language-raku">my %list2-index-for = $list2.kv.reverse; # keeps minimum!
</code></pre>

<p>The same in <a href="https://www.perl.org/">Perl</a> could be done with some help from one of the list
modules, but we can do also in some different way leveraging the
<em>defined-or</em> to select the minimum index for each item (thus coping with
duplicates):</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">my</span> <span class="nv">%list2_index_for</span><span class="p">;</span>
<span class="nv">$list2_index_for</span><span class="p">{</span><span class="nv">$list2</span><span class="o">-&gt;</span><span class="p">[</span><span class="vg">$_</span><span class="p">]}</span> <span class="sr">//</span><span class="o">=</span> <span class="vg">$_</span> <span class="k">for</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$list2</span><span class="o">-&gt;</span><span class="nv">$#*</span><span class="p">;</span>
</code></pre></div></div>

<p>With this in hand, we can just iterate through the first list and skip items
that are <em>not</em> available in the second list. For those items that we
actually find, we can calculate the sum of the indexes from both lists and
compare with the <em>minimum so far</em>:</p>

<ul>
  <li>if the new sum is better, we reset the list of results</li>
  <li>if it’s the same, we append the new item to the list</li>
  <li>otherwise, we just ignore the item.</li>
</ul>

<p><a href="https://raku.org/">Raku</a>:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@items) {
   my @lists = [], [];
   my $i = 0;
   for @items -&gt; $item {
      if ($item eq '/') { $i = 1 }
      else { @lists[$i].push: $item }
   }
   say minimum-index-sum(@lists[0], @lists[1]);
}

sub minimum-index-sum ($list1, $list2) {
   my %list2-index-for = $list2.kv.reverse; # keeps minimum!
   my @result;
   my $min-sum = $list1.elems + $list2.elems; # beyond "possible"
   for @$list1.kv -&gt; $i1, $item {
      defined(my $i2 = %list2-index-for{$item}) or next;
      my $this-sum = $i1 + $i2;
      if ($this-sum &lt; $min-sum) { # new winner, reset
         @result = $item,;
         $min-sum = $this-sum;
      }
      elsif ($this-sum == $min-sum) { # append
         @result.push: $item;
      }
      else {} # just skip this
   }
   return @result;
}
</code></pre>

<p><a href="https://www.perl.org/">Perl</a>:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">@list1</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">my</span> <span class="nv">$item</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">);</span>
   <span class="k">last</span> <span class="k">if</span> <span class="nv">$item</span> <span class="ow">eq</span> <span class="p">'</span><span class="s1">/</span><span class="p">';</span>
   <span class="nb">push</span> <span class="nv">@list1</span><span class="p">,</span> <span class="nv">$item</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">my</span> <span class="nv">@m</span> <span class="o">=</span> <span class="nv">minimum_index_sum</span><span class="p">(</span><span class="o">\</span><span class="nv">@list1</span><span class="p">,</span> <span class="o">\</span><span class="nv">@ARGV</span><span class="p">);</span>
<span class="nv">say</span> <span class="p">"</span><span class="s2">(</span><span class="si">@m</span><span class="s2">)</span><span class="p">";</span>

<span class="k">sub </span><span class="nf">minimum_index_sum</span> <span class="p">($list1, $list2) {</span>
   <span class="k">my</span> <span class="nv">%list2_index_for</span><span class="p">;</span>
   <span class="nv">$list2_index_for</span><span class="p">{</span><span class="nv">$list2</span><span class="o">-&gt;</span><span class="p">[</span><span class="vg">$_</span><span class="p">]}</span> <span class="sr">//</span><span class="o">=</span> <span class="vg">$_</span> <span class="k">for</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$list2</span><span class="o">-&gt;</span><span class="nv">$#*</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">@result</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$min_sum</span> <span class="o">=</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">$list1</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">)</span> <span class="o">+</span> <span class="nb">scalar</span><span class="p">(</span><span class="nv">$list2</span><span class="o">-&gt;</span><span class="err">@</span><span class="o">*</span><span class="p">);</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$i1</span> <span class="p">(</span><span class="mi">0</span> <span class="o">..</span> <span class="nv">$list1</span><span class="o">-&gt;</span><span class="err">$</span><span class="c1">#*) {</span>
      <span class="k">my</span> <span class="nv">$item</span> <span class="o">=</span> <span class="nv">$list1</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i1</span><span class="p">];</span>
      <span class="nb">defined</span><span class="p">(</span><span class="k">my</span> <span class="nv">$i2</span> <span class="o">=</span> <span class="nv">$list2_index_for</span><span class="p">{</span><span class="nv">$item</span><span class="p">})</span> <span class="ow">or</span> <span class="k">next</span><span class="p">;</span>
      <span class="k">my</span> <span class="nv">$this_sum</span> <span class="o">=</span> <span class="nv">$i1</span> <span class="o">+</span> <span class="nv">$i2</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$this_sum</span> <span class="o">&lt;</span> <span class="nv">$min_sum</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># new winner, reset</span>
         <span class="nv">@result</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$item</span><span class="p">);</span>
         <span class="nv">$min_sum</span> <span class="o">=</span> <span class="nv">$this_sum</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">elsif</span> <span class="p">(</span><span class="nv">$this_sum</span> <span class="o">==</span> <span class="nv">$min_sum</span><span class="p">)</span> <span class="p">{</span> <span class="c1"># append</span>
         <span class="nb">push</span> <span class="nv">@result</span><span class="p">,</span> <span class="nv">$item</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{}</span> <span class="c1"># just skip this</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">@result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That’s all folks… stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/03/17/pwc208-minimum-index-sum/</id>
    <published>2023-03-17T07:00:00+01:00</published>
    <updated>2023-03-17T07:00:00+01:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>PWC 208 Smells like teen SQL</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-208-smells-like-teen-sql-2bh6" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Minimum Index Sum
&lt;/h2&gt;

&lt;p&gt;Perl Weekly Challenge Task 1, &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/#TASK1"&gt;Minimum Index Sum&lt;/a&gt;, asks us to match elements from a pair of lists and decide which matches have a minimum sum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given two arrays of strings.&lt;br&gt;
Write a script to find out all common strings in the &lt;br&gt;
given two arrays with minimum index sum. If no common&lt;br&gt;
strings found returns an empty list.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1

Input: @list1 = ("Perl", "Raku", "Love")
       @list2 = ("Raku", "Perl", "Hate")

Output: ("Perl", "Raku")

There are two common strings "Perl" and "Raku".
Index sum of "Perl": 0 + 1 = 1
Index sum of "Raku": 1 + 0 = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This reminds me of the sorts of things that programmers do when they don't want to write SQL. "JOIN what to what now? And where does the MIN function go? If I just had those lists in variables ... I'm already using DBI to talk to the database, what the heck, I'll just fetch the data and do it myself." Ah well, we seem to be past that point here and have already rationalized our way to data in lists, so let's begin from there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Nah, too complicated&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;LIST1&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;LIST2&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;LIST1&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;LIST2&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, the arrays give us a handy mapping from index to value, but we're going to need the other direction.  Value to index is going to be a hash.  We could go explore CPAN for modules that implement sets (what we're looking for here, after all, is  set intersection), but let's stick to core Perl.&lt;/p&gt;

&lt;p&gt;Let's invert an array into a hash, where the keys are the elements of the array, and the values are the corresponding indexes. There's a cute way to exploit hash slices to do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%h&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;@h&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#list&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's concise, but what if there are duplicate values in the list? It puts the higher index into the resulting hash, and that's clearly not going to be the right answer to get a minimum sum.  To handle the possibility that the element is repeated in the list, we need to be a bit more explicit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;asHash&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;@$list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$h&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;exists&lt;/span&gt; &lt;span class="nv"&gt;$h&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$val&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;%h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# NB: returns reference&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$h2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;asHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;asHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I'm using the &lt;code&gt;each&lt;/code&gt; function to attach names to pairs of index and value, and therefore avoid repeatedly having to de-reference &lt;code&gt;$list&lt;/code&gt; within the loop. &lt;code&gt;each&lt;/code&gt; can be fragile (check the warnings and advice in &lt;code&gt;perldoc -f each&lt;/code&gt;), but it's fine here in a well-contained context.  I've also been explicit with the logic here by using &lt;code&gt;unless&lt;/code&gt;, but for added obfuscatory fun, I could have used the &lt;code&gt;//=&lt;/code&gt; operator instead.&lt;/p&gt;

&lt;p&gt;On to the matching of parts, then. We can select things that are in both lists by walking one hash and looking it up in the other.  If we were dealing with big lists, it might be worth optimizing to loop over the shorter list, but we'll skip the complication of figuring out which that is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;exists&lt;/span&gt; &lt;span class="nv"&gt;$h2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%$h1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a list of candidate matches, so let's make a table of the possible sums for each word.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%indexSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$h1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$h2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# grep result goes here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we need the minimum value from this hash, and then to select the keys of the hash that have that minimum.  I'm throwing in a &lt;code&gt;sort&lt;/code&gt; to have a predictable order that can be tested easily.  If the &lt;code&gt;sort&lt;/code&gt; is too painful in production, the test can be upgraded to use a bag as the expected value, so that ordering doesn't matter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;%indexSum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$indexSum&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%indexSum&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole thing together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;minIndexSum&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list1&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;list2&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$h2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;asHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;asHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%indexSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$h1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$h2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;exists&lt;/span&gt; &lt;span class="nv"&gt;$h2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%$h1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;%indexSum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$indexSum&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%indexSum&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I rather like this solution because of the complete lack of obvious loops.  All the things that might have been &lt;code&gt;for&lt;/code&gt; loops or &lt;code&gt;while&lt;/code&gt; loops have dissolved away into &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;min&lt;/code&gt;; and with that, so have all the testing for boundary conditions and empty lists.&lt;/p&gt;

&lt;h2&gt;
  
  
  Duplicate and Missing
&lt;/h2&gt;

&lt;p&gt;The second task, &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/#TASK2"&gt;Duplicate and Missing&lt;/a&gt;, asks us to find an anomaly in a list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given an array of integers in sequence with one&lt;br&gt;
missing and one duplicate.&lt;/p&gt;

&lt;p&gt;Write a script to find the duplicate and missing integer &lt;br&gt;
in the given array. Return -1 if none found.&lt;/p&gt;

&lt;p&gt;For the sake of this task, let us assume the array &lt;br&gt;
contains no more than one duplicate and missing.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1: Input: @nums = (1,2,2,4)
           Output: (2,3)
           Duplicate is 2 and Missing is 3.
Example 2: Input: @nums = (1,2,3,4)
           Output: -1
           No duplicate and missing found.
Example 3: Input: @nums = (1,2,3,3)
           Output: (3,4)
           Duplicate is 3 and Missing is 4.&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As so often happens, the specification is a little ambiguous.  The implication from the examples is that one number in the list has been replaced by duplicating its neighbors.  This is what would happen if we were listing the rankings of a league and two of the teams were tied: we would give both of them the same ranking and leave a hole in the sequence.&lt;/p&gt;

&lt;p&gt;But it could also be taken literally:  there is one integer that is missing, and somewhere else in the list a different integer is duplicated.  I didn't find a simple way to handle both interpretations simultaneously, so I wrote separate functions for the two cases.&lt;/p&gt;

&lt;p&gt;First, the team-ranking interpretation.  In this case, we will expect consecutive integers, and if we find they are not consecutive, then we've found our duplicate-and-missing and can stop right there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;dupAndMissing&lt;/span&gt;&lt;span class="err"&gt;(@&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've chosen to use &lt;code&gt;shift&lt;/code&gt; to handle getting consecutive elements of the list.  This way seems to terminate the list naturally, and is less cluttered than using a &lt;code&gt;for&lt;/code&gt; loop and index variables.&lt;/p&gt;

&lt;p&gt;The alternative interpretation requires a little more logic, but is not much more difficult.  The problem statement has let us off the hook for the complications of more than one duplicate, or a gap bigger than one, so we're going to take that win to keep it simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;dupAndMissing_B&lt;/span&gt;&lt;span class="err"&gt;(@&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$missing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$dup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$dup&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$missing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$dup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$missing&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This loop could also have been terminated early once both the missing and the duplicate have been found.  It also raised the possibility of having one and not the other.  I chose to require both.&lt;/p&gt;

&lt;p&gt;Both of these functions consistently return array references, whether answers are found or not.  The problem specifies returning &lt;code&gt;-1&lt;/code&gt; if not found, so when these functions are actually called,  there must be logic around the function call to transform an empty array &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$retval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;dupAndMissing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@ARGV&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;@$retval&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$retval&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-208-smells-like-teen-sql-2bh6</id>
    <published>2023-03-16T19:56:47Z</published>
    <updated>2023-03-16T19:56:47Z</updated>
    <category term="perl"/>
    <category term="pwc"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 208: Minimum Index Sum and Duplicate and Missing</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/03/perl-weekly-challenge-208-minimum-index-sum-and-duplicate-and-missing.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11050</id>
    <published>2023-03-15T22:16:29Z</published>
    <updated>2023-03-15T22:22:01Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 208 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-208/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on March 19, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Minimum Index Sum</h2>

<p><em>You are given two arrays of strings.</em></p>

<p><em>Write a script to find out all common strings in the given two arrays with minimum index sum. If no common strings found returns an empty list.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list1 = ("Perl", "Raku", "Love")
       @list2 = ("Raku", "Perl", "Hate")

Output: ("Perl", "Raku")

There are two common strings "Perl" and "Raku".
Index sum of "Perl": 0 + 1 = 1
Index sum of "Raku": 1 + 0 = 1
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list1 = ("A", "B", "C")
       @list2 = ("D", "E", "F")

Output: ()

No common string found, so no result.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list1 = ("A", "B", "C")
       @list2 = ("C", "A", "B")

Output: ("A")

There are three common strings "A", "B" and "C".
Index sum of "A": 0 + 1 = 1
Index sum of "B": 1 + 2 = 3
Index sum of "C": 2 + 0 = 2
</code></pre>

<h3>Minimum Index Sum in Raku</h3>

<p>We need to find the intersection between two arrays of strings. Once we&#8217;ve found the intersection, we need to keep the intersection items that have the smallest sum of indexes in the original array. So, it looked like it would be nice to use <a href="https://docs.raku.org/type/Bag.html">Bags</a> for the input (with the index as weight integer for each item), and the <code>∩</code> or <code>(&amp;)</code> <a href="https://docs.raku.org/language/operators.html#infix_(|">infix intersection operator</a>,<em>infix</em>%E2%88%AA) to generate the result. It turns out that this might not be the best choice, because the integer weight associated with a bag item is signifying how many copies of that element are considered &#8220;in the bag&#8221;. So, if the weight is 0, it means the item is not in the bag and is lost during bag construction. Since array indexes start at 0, we&#8217;d be losing the first item of each array. The problem is solved by assigning the index incremented by 1 to the weight. This easily solves the problem, but makes the solution slightly less elegant than I originally hoped it to be. </p>

<pre><code>sub min-sum-idx (@s1, @s2) {
    my $b1 = (map {@s1[$_] =&gt; $_ + 1}, 0..@s1.end).Bag;
    my $b2 = (map {@s2[$_] =&gt; $_ + 1}, 0..@s2.end).Bag;
    my $result = (map { $_ =&gt;  $b1{$_} + $b2{$_}},  
        ($b1 ∩ $b2).keys).Bag;
    my $min = $result.values.min;
    return grep {$result{$_} == $min}, $result.keys;
}

for (&lt;Perl Raku Love&gt;, &lt;Raku Perl Hate&gt;), 
    (&lt;A B C&gt;, &lt;D E F&gt;), (&lt;A B C&gt;, &lt;C A B&gt;) 
        -&gt; @test {
            say "@test[0] - @test[1]".fmt("%-35s =&gt; "), 
                min-sum-idx |@test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./min-sum_idx.raku
Perl Raku Love - Raku Perl Hate    =&gt; (Perl Raku)
A B C - D E F                      =&gt; ()
A B C - C A B                      =&gt; (A)
</code></pre>

<h3>Minimum Index Sum in Perl</h3>

<p>For porting the above Raku program to Perl, we replace <code>Bags</code> with hashes. We use a <code>grep</code> to construct the <code>@result</code> intersection of the two input arrays, and a loop to compute the minimum array index sum. </p>

<pre><code>use strict;
use warnings;
use feature "say";

sub min_sum_idx {
    my @s1 = @{$_[0]};
    my @s2 = @{$_[1]};

    my %h1 = map {$s1[$_] =&gt; $_ } 0..$#s1;
    my %h2 = map {$s2[$_] =&gt; $_ } 0..$#s2;
    my @result = grep { exists $h1{$_} } @s2;
    return "()" unless @result;
    my %res = map { $_ =&gt; $h1{$_} + $h2{$_} } @result;
    my $min = $res{$result[0]};
    for my $k (keys %res) { 
        $min = $res{$k} if $res{$k} &lt; $min;
    }
    return grep {$res{$_} == $min} @result;
}

for my $test ( [[&lt;Perl Raku Love&gt;], [&lt;Raku Perl Hate&gt;]], 
    [[&lt;A B C&gt;], [&lt;D E F&gt;]], [[&lt;A B C&gt;], [&lt;C A B&gt;]] ) {

    printf "%-14s - %-16s =&gt; ", 
        "@{$test-&gt;[0]}", "@{$test-&gt;[1]}";
    say join " ", min_sum_idx @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./min-sum-idx.pl
Perl Raku Love - Raku Perl Hate   =&gt; Raku Perl
A B C          - D E F            =&gt; ()
A B C          - C A B            =&gt; A
</code></pre>

<h2>Task 2: Duplicate and Missing</h2>

<p><em>You are given an array of integers in sequence with one missing and one duplicate.</em></p>

<p><em>Write a script to find the duplicate and missing integer in the given array. Return -1 if none found.</em></p>

<p><em>For the sake of this task, let us assume the array contains no more than one duplicate and missing.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @nums = (1,2,2,4)
Output: (2,3)

Duplicate is 2 and Missing is 3.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @nums = (1,2,3,4)
Output: -1

No duplicate and missing found.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @nums = (1,2,3,3)
Output: (3,4)

Duplicate is 3 and Missing is 4.
</code></pre>

<p>First, we are told that the integers are in sequence. This presumably means that they are sorted in ascending order. If not, we could just add a call to the  built-in <a href="https://docs.raku.org/routine/sort.html">sort</a> routine at the beginning of our code.</p>

<p>Second, the task specification tells us what to do when there is no missing item and no duplicate, but not what to do when only one of these two values is missing. I&#8217;ve decided to report something like <code>(3, -)</code> when 3 is a duplicate and there is no missing item, and <code>(-, 3)</code> when 3 is a missing value and there is no duplicate.</p>

<h3>Duplicate and Missing in Raku</h3>

<p>We simply loop over the input array values and </p>

<ol>
<li>Report a duplicate if one value is equal to the previous one, and </li>
<li><p>Report a missing item if the current item is not one more than the previous one.</p>

<p>sub dupe-and-missing (@nums) {
    my ($dupe, $missing);
    for 1..@nums.end -> $i {
        if @nums[$i] == @nums[$i-1] {
            $dupe = @nums[$i];
        } elsif @nums[$i] - @nums[$i-1] != 1 {
            $missing = @nums[$i-1] + 1;
        }
    }
    return &#8220;($dupe, $missing)&#8221; if $dupe and $missing;
    return &#8220;-1&#8221; unless $dupe or $missing;
    return &#8220;($dupe, -)&#8221; if $dupe;   # no missing item
    return &#8220;(-, $missing)&#8221;;         # no dupe
}</p>

<p>for &lt;1 2 2 4>, &lt;1 2 3 4>, &lt;1 2 3 3>, &lt;1 2 4 5>,
    &lt;1 1 3 4>, &lt;1 3 4 5>, &lt;1 2 2 3 5> -> @test {
    say &#8220;@test[]&#8221;.fmt(&#8220;%-12s => &#8220;), dupe-and-missing @test;
}</p></li>
</ol>

<p>This program displays the following output:</p>

<pre><code>$ raku ./dupe_missing.raku
1 2 2 4      =&gt; (2, 3)
1 2 3 4      =&gt; -1
1 2 3 3      =&gt; (3, -)
1 2 4 5      =&gt; (-, 3)
1 1 3 4      =&gt; (1, 2)
1 3 4 5      =&gt; (-, 2)
1 2 2 3 5    =&gt; (2, 4)
</code></pre>

<h3>Duplicate and Missing in Perl</h3>

<p>This is a straight port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub dupe_and_missing {
    my @nums = @_;
    my ($dupe, $missing);
    for my $i (1..$#nums) {
        if ($nums[$i] == $nums[$i-1]) {
            $dupe = $nums[$i];
        } elsif ($nums[$i] - $nums[$i-1] != 1) {
            $missing = $nums[$i-1] + 1;
        }
    }
    return "($dupe, $missing)" if $dupe and $missing;
    return "-1" unless $dupe or $missing;
    return "($dupe, -)" if $dupe;
    return "(-, $missing)";
}

for my $test ([&lt;1 2 2 4&gt;], [&lt;1 2 3 4&gt;], [&lt;1 2 3 3&gt;], 
    [&lt;1 2 4 5&gt;], [&lt;1 1 3 4&gt;], [&lt;1 3 4 5&gt;], [&lt;1 2 2 3 5&gt;]) {
    printf "%-12s =&gt; ", "@$test";
    say dupe_and_missing @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./dupe-missing.pl
1 2 2 4      =&gt; (2, 3)
1 2 3 4      =&gt; -1
1 2 3 3      =&gt; (3, -)
1 2 4 5      =&gt; (-, 3)
1 1 3 4      =&gt; (1, 2)
1 3 4 5      =&gt; (-, 2)
1 2 2 3 5    =&gt; (2, 4)
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on March 26, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>One-liner: Remove first two characters of every line</title>
  <summary type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></summary>
  <updated>2023-03-14T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/remove-first-two-characters-of-every-line"/>  <id>https://perlmaven.com/remove-first-two-characters-of-every-line</id>
  <content type="html"><![CDATA[<p>
In a project creating a <a href="https://kantoniko.com/">Ladino dictionary</a> in which I have a few thousands of <a href="/yaml">YAML</a> files. They used to include lists of values, but a while ago I split them up into individual entries. I did this because the people who are editing them are not used to YAML files and it makes it a lot easier to explain them what to do.
<p>
However the previous change left me with 1-item lists in each file. I wanted to clean that up.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#607 - The Perl Planetarium</title>
    <link rel="alternate" href="https://perlweekly.com/archive/607.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>In the previous newsletter Mohammad included a blog post of Dave Cross about the <a href="https://perl.theplanetarium.org/">Perl Planetarium</a>, but I think it is worth another highlighting. It is an excellent way to follow what's going on in and around Perl on a daily basis. Now also including commits to the source code of Perl and questions on Stack overflow. I've also opened two issues asking Dave to allow the user to filter the messages based on source and to color-code the sources. Something one of you could implement in the front-end.</p>
<p>A couple of days ago I saw <a href="https://www.facebook.com/curtis.poe/posts/pfbid02TKsTS9KQi9TbW7hH2gmUNwm1dDJ387TquNkiUR5CCj3kfdmQM9C7RkHXusmUHN2Jl">a post on Facebook</a> by Curtis Ovid Poe and then <a href="https://www.facebook.com/groups/perlprogrammers/posts/6296612980371437/">Will Braswell reposted it</a>. The rant was on why Perl is dying. Basically Ovid says that Perl lags behind the more popular languages adopting new features. Including features that were available to some other languages 10-20-40 years ago. Predictably some people jumped on blaming the Perl 6 effort. Others pointed out the lack of volunteers. The lack of outreach. The missing modules from the standard libraries.</p>
<p>Some very interesting comment, but you might need to be Facebook account to be able to read them. Sorry for that.</p>
<p>While preparing a blog post I searched GitHub for repositories written in Perl and then it gave me the idea to check out the other languages and got this table on <a href="https://dev.to/szabgab/the-most-popular-programming-languages-on-github-2i6b">The most popular programming languages on GitHub</a>. I posted the link to the Perl programmers group on Facebook. They did not like the numbers.</p>
<p>Here is an idea to make GitHub better for Perl projects: The dependabot helps developers keep their dependencies up-to-date. As far as I can tell it does <a href="https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem">not support Perl.</a>. However, it's <a href="https://github.com/dependabot/">source code is on GitHub</a> so interested parties could probaly add this support. Let me know when it becomes available so I can try it.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/607.html</id>
    <published>2023-03-13T10:00:00Z</published>
    <updated>2023-03-13T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 207</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-207/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-207/</id>
    <published>2023-03-13T00:00:00Z</published>
    <updated>2023-03-13T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 208</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-208/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Minimum Index Sum 10. TASK #2: Duplicate and Missing HEADLINES  Welcome to the Week #208 of The Weekly Challenge.
Please do accept my apology for the late release of the weekly challenge. Thank you for your kind messages. It means a lot.
Did you notice, we now have over 10,000+ solutions in Perl?</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-208/</id>
    <published>2023-03-13T00:00:00Z</published>
    <updated>2023-03-13T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2382336803997880397</id>
    <published>2023-03-11T23:20:00.002+01:00</published>
    <updated>2023-03-11T23:20:52.007+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxxv) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PLICEASE/Alien-Build-2.78" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.78&lt;/strong&gt; on 2023-03-07, with 22 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.77 was 1 month, 18 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.060010" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060010&lt;/strong&gt; on 2023-03-10, with 14 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.060007 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/OLIVER"&gt;OLIVER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETHER/Class-Method-Modifiers-2.15" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Class::Method::Modifiers&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Provides Moose-like method modifiers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.15&lt;/strong&gt; on 2023-03-05, with 29 votes&lt;/li&gt;  &lt;li&gt;Previous version: 2.15 was  before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/LEONT/Crypt-Passphrase-0.009" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Crypt::Passphrase&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module for managing passwords in a cryptographically agile manner &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.009&lt;/strong&gt; on 2023-03-09, with 12 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.007 was 25 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TURNSTEP/DBD-Pg-3.16.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16.1&lt;/strong&gt; on 2023-03-06, with 92 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.16.0 was 6 months, 29 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/TURNSTEP"&gt;TURNSTEP&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.14" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.14&lt;/strong&gt; on 2023-03-06, with 31 votes&lt;/li&gt;  &lt;li&gt;Previous version: 5.13 was 2 months, 28 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.9001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.9001&lt;/strong&gt; on 2023-03-07, with 16 votes&lt;/li&gt;  &lt;li&gt;Previous version: 3.9000 was 2 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/DCANTRELL"&gt;DCANTRELL&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SHANCOCK/Perl-Tidy-20230309" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20230309&lt;/strong&gt; on 2023-03-08, with 132 votes&lt;/li&gt;  &lt;li&gt;Previous version: 20221112 was 3 months, 27 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SHANCOCK"&gt;SHANCOCK&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/FERKI/Rex-1.14.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.14.1&lt;/strong&gt; on 2023-03-05, with 82 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.14.0 was 1 month, 6 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/FERKI"&gt;FERKI&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9695" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9695&lt;/strong&gt; on 2023-03-06, with 28 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.9694 was 3 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test-Simple-1.302193" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302193&lt;/strong&gt; on 2023-03-06, with 182 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.302192 was 1 month, 4 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test2-Harness-1.000151" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000151&lt;/strong&gt; on 2023-03-08, with 13 votes&lt;/li&gt;  &lt;li&gt;Previous version: 1.000150 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXODIST/Test2-Suite-0.000148" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000148&lt;/strong&gt; on 2023-03-05, with 39 votes&lt;/li&gt;  &lt;li&gt;Previous version: 0.000147 was 7 days before&lt;/li&gt;  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2382336803997880397/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2382336803997880397"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2382336803997880397"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/cdxxxv-13-great-cpan-modules-released.html" title="(cdxxxv) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3970470711935013068</id>
    <published>2023-03-11T23:15:00.000+01:00</published>
    <updated>2023-03-11T23:15:46.573+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlviii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 45&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br /&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/03/11 22:14:10 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PerlNitpick" target="_blank"&gt;App::PerlNitpick&lt;/a&gt; - change-suggester about insignificant details.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/jacode" target="_blank"&gt;jacode&lt;/a&gt; - Perl program for Japanese character code conversion&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsOffice::Word::Template" target="_blank"&gt;MsOffice::Word::Template&lt;/a&gt; - generate Microsoft Word documents from Word templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::PiHole" target="_blank"&gt;WWW::PiHole&lt;/a&gt; - Perl interface to Pi-hole&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Combinatorics" target="_blank"&gt;Algorithm::Combinatorics&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Pod" target="_blank"&gt;App::Pod&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=119)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Audit" target="_blank"&gt;CPAN::Audit&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Table" target="_blank"&gt;Data::Table&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID" target="_blank"&gt;Data::UUID&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::SHA" target="_blank"&gt;Digest::SHA&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::CopyFilesFromBuild" target="_blank"&gt;Dist::Zilla::Plugin::CopyFilesFromBuild&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Pod2Readme" target="_blank"&gt;Dist::Zilla::Plugin::Pod2Readme&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::ReadmeFromPod" target="_blank"&gt;Dist::Zilla::Plugin::ReadmeFromPod&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::ReadmeMarkdownFromPod" target="_blank"&gt;Dist::Zilla::Plugin::ReadmeMarkdownFromPod&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Run" target="_blank"&gt;Dist::Zilla::Plugin::Run&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME" target="_blank"&gt;Email::MIME&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Faker" target="_blank"&gt;Faker&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=72)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIME::Lite" target="_blank"&gt;MIME::Lite&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OAuth2" target="_blank"&gt;Mojolicious::Plugin::OAuth2&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Extended" target="_blank"&gt;MooseX::Extended&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Todoist" target="_blank"&gt;Net::Todoist&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2" target="_blank"&gt;PDF::API2&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=132)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPR" target="_blank"&gt;PPR&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quiq" target="_blank"&gt;Quiq&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Nginx" target="_blank"&gt;Test::Nginx&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=182)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::GoogleAPI::Client" target="_blank"&gt;WebService::GoogleAPI::Client&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword::FromPerl" target="_blank"&gt;XS::Parse::Keyword::FromPerl&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3970470711935013068/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3970470711935013068"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3970470711935013068"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/03/dxlviii-metacpan-weekly-report.html" title="(dxlviii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Mendapatkan Username Login pada Wordpress versi 4.9.4</title>
    <link rel="alternate" href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/954/1*POyRpFXOGS0cmL9V8Dy0PQ.png" width="954"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Hai, disini saya akan menjelaskan cara mendapatkan username pada Login wordpress, yangmana cocok sekali apabila digabungkan dengan teknik&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@CumaKuliXOnline/mendapatkan-username-login-pada-wordpress-6621547dc4bf?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>SamUkhid</name>
    </author>
    <id>https://medium.com/p/6621547dc4bf</id>
    <published>2023-03-09T18:32:41Z</published>
    <updated>2023-03-09T20:06:46.424000Z</updated>
    <category term="wordpress"/>
    <category term="perl"/>
    <category term="vulnerability"/>
    <category term="username"/>
  </entry>
  <entry>
    <title>#606 - First Love Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/606.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Do you remember the first programming language you picked up?</p>
<p>I am sure in the life span of a programmer, one picks more than one programming language but still have special place for one. I remember during my first encounter in the year <strong>1993</strong>, I was introduced to <strong>COBOL</strong> as part of the course I joined immediately after getting through <strong>12th or (+2 as some remember)</strong>. I had only access to PC at the institute and that too 2 times a week for one hour each. Imagine relying on books and nothing else, I was attracted towards many other programming languages. During that period, I picked up <strong>Fortran</strong> as well and I loved it more than <strong>COBOL</strong>. When I got bored of <strong>Fortran</strong>, I went to <strong>Pascal</strong>. That too didn't last long before I moved to <strong>C</strong>. I stayed with <strong>C</strong> longer than any of the programming languages I picked before. I remember when I moved to <strong>Mumbai</strong> for a better opportunity in the year <strong>1997</strong>, I hardly got any offer so I took a part-time job to build a desktop application for a small factory using <strong>FoxPRO</strong>. It was during this period, I got the offer to join a startup looking for fresher willing to learn <strong>Perl</strong>. It was my first proper job as a programmer. Infact, I was given two choices, <strong>Perl</strong> or <strong>Java</strong>. I choose <strong>Perl</strong> as it was easier to move from <strong>C</strong>. And here I am today, in the year <strong>2023</strong>, working as a <strong>Perl Developer</strong>.</p>
<p>Reason I am sharing my story is last week I came across some post on social media talking about (again) <strong>Perl</strong> is dead or not moving fast enough to keep up with the younger generations. I don't want to repeat what is said in favour or against <strong>Perl</strong> but it pains to see not many coming forward to stop the lies. I remember when <strong>Perl v5.36</strong> was released, it made a big impact and everyone started talking about it. I even did daily series on the new features of latest release. I have kept it recorded in the <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a> for anyone to have a look. In few months time, there is going to be another big release that every <strong>Perl</strong> fans are looking forward to it. So to all ignorants and haters, <strong>Perl</strong> is not going anywhere and will remain stronger as ever.</p>
<p>Just for fun, I asked <strong>ChatGPT</strong> his views on <strong>Perl</strong>. I must say it didn't dissappoint me. It tried to be polite and diplomatic in his response. I liked it. Please don't get me wrong, I don't live in the fantasy world. I know the fact, we don't have many new projects being developed in <strong>Perl</strong>. So what? That doesn't make it any lesser than others. You can try other while still in love with <strong>Perl</strong>. I am not suggesting you do but if you do then there is nothing wrong in it. I know many experts in <strong>Perl</strong> equally good in many other languages. You can find them doing <a href="https://theweeklychallenge.org">weekly challenges</a> in so many different languages.</p>
<p>The moral of the story, <strong>Perl</strong> will remain my first love no matter what. How about you, <strong>Perl</strong> fans?</p>
<p>Last but not the least, <strong>Enlightened Perl Organisation (EPO)</strong> is closing down, <strong>Mark Keating</strong> made it public the <a href="https://ww2.enlightenedperl.org/2023/02/27/closing-down">sad news</a>. I would like to take this opportunity to thank <strong>Mark Keating</strong> and his entire team for all the hard work and support, specially to the <strong>London Perl Workshop</strong>.</p>
<p>Please enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/606.html</id>
    <published>2023-03-06T10:00:00Z</published>
    <updated>2023-03-06T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Improvements to Planet Perl and Perlanet</title>
    <link rel="alternate" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins.</p>
<p>On Reddit, a few days ago, someone asked <a href="https://www.reddit.com/r/perl/comments/119hu00/perl_rss_feeds/">‘Is there a “Planet Perl” with an RSS feed?’</a> and a few people replied, pointing out the existence of Planet Perl (which is the first Google result for <a href="https://www.google.com/search?q=planet+perl">“Planet Perl”</a>). I’m obviously not marketing that site very well as every time I mention it, I get people (pleasantly) surprised that it exists.</p>
<p>On this occasion, it was <a href="https://www.reddit.com/user/rwp0/">Elvin Aslanov</a> who seemed to discover my site for the first time. And, very soon afterwards, he started sending <a href="https://github.com/davorg/planetperl/pulls">pull requests</a> to add feeds to the site. As a result, we now have three more feeds that are being pulled into the site.</p>
<ul>
<li><a href="https://medium.com/tag/perl">Perl on Medium</a>. I’m slightly embarrassed that I hadn’t thought of this myself. I did, after all, once try to start <a href="https://medium.com/cultured-perl">a Perl publication on Medium</a>. I think I must have decided that there are better sites for technical blogging and blanked it from consideration. Medium’s not the busiest of places for Perl bloggers, but there are a few posts there and they’re mostly from people who are outside of the echo chamber – so getting more eyes on their posts is a good idea.</li>
<li><a href="https://stackoverflow.com/feeds/tag/perl">Perl questions on Stack Overflow</a>. Another one that would have been obvious if I had thought for a second. I’ve been answering questions on SO for years. It’s a good way to get more perspective on how Perl is being used across the industry. Unfortunately, the feed only includes the titles of the posts – you’ll need to click the link to actually see the question.</li>
<li><a href="https://github.com/Perl/perl5/commits/blead.atom">Perl commits on GitHub</a>. I’m interested in hearing how useful people think this is. I worry slightly that there will be times when the number of commits will overwhelm the other feeds. But maybe that’s a good idea. Perhaps it’s good for more people to see just how busy the Perl 5 Porters are. I’m a bit annoyed that the feed puts everything in a fixed-width font, but not (yet) annoyed enough to do anything about it.</li>
</ul>
<p>You might know that Planet Perl is driven by <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>. So adding new feeds is just a case of adding a few lines to <a href="https://github.com/davorg/planetperl/blob/master/perlanetrc">a configuration file</a>. And looking at the pull requests I got from Elvin, showed a potential problem in the way the configuration was laid out. Each feed has three lines of YAML configuration. There’s a title for the feed, a URL for a web page that displays the content of the feed and the URL for the feed itself. They’re called “title”, “web” and “url”. And it’s that last name that’s slightly problematic – it’s just not clear enough. Elvin got “web” and “url” muddled up in one of his PRs and, when I pointed that out to him, he suggested that renaming “url” to “feed” would make things much clearer.</p>
<p>I agreed, and the next day I hacked away for a while before releasing <a href="https://metacpan.org/release/DAVECROSS/Perlanet-v3.0.0/view/lib/Perlanet.pm">version 3.0.0 of Perlanet</a>. In this version, the “url” key is renamed to “feed”. It still accepts the old name (so older config files will still work) but you’ll get a warning if you try to use a config name in the old config.</p>
<p>I didn’t stop there. Last year, I wrote <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">a blog post about producing a docker image that already had Perlanet installed</a> – so that it was quicker to rebuild my various planets every few hours. Since then I’ve been rebuilding <a href="https://hub.docker.com/repository/docker/davorg/perl-perlanet/general">that image</a> every time I updated Perlanet. But it’s been rather a manual process. And because I’m old and decrepit, I can never remember the steps I go through to rebuild it, tag it correctly and push it to the Docker Hub. This means it always takes far longer than it’s supposed to. So this time, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/build">a script to do that for me</a>. And because I now have the kind of mind set that sees GitHub Workflows everywhere I look, I wrote <a href="https://github.com/davorg/perl-perlanet-docker/blob/main/.github/workflows/publish_image.yml">a Workflow definition that builds and publishes the image</a> any time the Dockerfile changes. I guess the next step will be to write an action that automatically updates the Dockerfile (thereby triggering the rebuild) each time I release a new version of Perlanet.</p>
<p>But that’s a problem for another day. For now, I’m happy with the improvements I’ve made to Planet Perl, Perlanet and the Perlanet Docker infrastructure.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This is a story of one of those nice incidents where something starts off simple, then spirals out of control for a while but, in the end, everyone wins. On Reddit, a few days ago, someone asked ‘Is there a “Planet Perl” with an RSS feed?’ and a few people replied, pointing out the existence… <a class="more-link" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Continue reading <span class="screen-reader-text">Improvements to Planet Perl and Perlanet</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/03/improvements-to-planet-perl-and-perlanet/">Improvements to Planet Perl and Perlanet</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2097</id>
    <published>2023-03-03T10:16:30Z</published>
    <updated>2023-03-03T10:16:30Z</updated>
    <category term="Programming"/>
    <category term="docker"/>
    <category term="perlanet"/>
    <category term="planet perl"/>
  </entry>
  <entry>
    <title>What is Perl?</title>
    <link rel="alternate" href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1280/1*b0-VWhhifQolimiOjmNsbw.jpeg" width="1280"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Perl is a general-purpose, high-level, interactive, and interpreted programming language created by Larry Wall in 1987, originally&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@nediir/what-is-perl-3cf44720bc32?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>Nediir?</name>
    </author>
    <id>https://medium.com/p/3cf44720bc32</id>
    <published>2023-03-02T16:10:41Z</published>
    <updated>2023-03-02T16:10:41.209000Z</updated>
    <category term="technology"/>
    <category term="software-development"/>
    <category term="software"/>
    <category term="perl"/>
    <category term="software-engineering"/>
  </entry>
  <entry>
  <title>TPRC 2023 March Newsletter</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-2023-march-newsletter"/>
  <id>tag:news.perlfoundation.org,2023-03-01:/post/tprc-2023-march-newsletter</id>
  <published>2023-03-01T20:06:44</published>
  <updated>2023-03-01T20:06:44</updated>
  <summary>
  <![CDATA[
     The Perl and Raku Conference 2023 in Toronto, Canada  July 11-13, 2023 is open! Sign up for talks. Book your ticket and hotel. 

The Perl Foundation is delighted to announce that the annual North American Perl and Raku Conference will be held in Toronto, Canada on July 11 to 13, 2023. The venue will be the DoubleTree (a Hilton Hotels property), located at 108 Chestnut St in downtown Toronto. That's directly North from Toronto's city hall, close to public transit and one of the country's biggest malls, the Toronto Eaton Centre.
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/3fe71fef169a5e9ca9ab275a75baa4eb3d968b24/TPRC.to.512x512.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h1>The Perl and Raku Conference 2023</h1>

<p>The Perl and Raku Foundation is delighted to announce that the annual <strong>North American Perl and Raku Conference</strong> will be held in <strong>Toronto, Canada on July 11 to 13, 2023</strong>. The venue will be the <a href="https://tprc.to/location">DoubleTree (a Hilton Hotels property), located at 108 Chestnut St in downtown Toronto</a>. That's directly North from Toronto's city hall, close to public transit and one of the country's biggest malls, the Toronto Eaton Centre.</p>

<p>Toronto is Canada's largest city, and the city and surrounding area offers many attractions for a vacation before or after your conference attendance. For our American visitors: you're in luck, three of your dollars are about the same as four of ours.</p>

<p>Call For Papers is now open! You can submit your talk Ideas at https://tprc.to/papers. Talk submission deadline is <strong>March 31 Midnight UTC.</strong> Talks must be given live and in-person. If you are looking for any talk ideas, try out the <a href="https://github.com/perlconference/tprc-2023-tor/wiki/Topics-we-want">conference wiki</a>.</p>

<p>Early bird pricing is available. Purchase your ticket now through April 15th for the low price of $275 USD. You can purchase your tickets now at https://tprc2023.sched.com/tickets.</p>

<p>Visit our website at https://tprc.to/. Information on special hotel rates can be found at https://tprc.to/location/. We've managed to arrange for a really great room rate for the conference days, and there are a few rooms for before and after the conference, in case you'd like to stay longer for a little vacation.</p>

<p>If you are flying, you can book your tickets to YYZ (Pearson, the main airport; many public and private transit options) or YTZ (Billy Bishop, on Toronto Island; 5 minute cab ride); you can also fly into BUF (Buffalo, NY) and drive (2 hours by car) across the border. Just remember to bring your passport.</p>

<h1>Unique to this year / Be Advised</h1>

<ul>
<li>The CFP closes in only 30 days! </li>
<li>The hotel has fewer rooms than prior years, and our price is half of what you can find anywhere close-by. Book your room early!</li>
<li>The hotel’s rooms are almost all King rooms. Contact the hotel directly, and pay an extra $30CAD if you want a room with two Queen beds!</li>
</ul>

<h1>How to reach our organizers</h1>

<ul>
<li>Visit our website: https://tprc.to</li>
<li>Follow us on Twitter: @PerlConferences</li>
<li>Like us on Facebook: The Perl Foundation (@tpf.perl)</li>
<li>Subscribe to the mailing list: https://tprc.to/subscribe</li>
<li>Post a message to us at https://tprc.to/tprc-2023-tor/contact-us/. </li>
</ul>

<p>An organizer will get back to you shortly!</p>

<p>Organizer: Alex Beamish and the Toronto Perl Mongers.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Feb 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/03/01/list-of-new-cpan-distributions-feb-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ANSI-Palette">ANSI-Palette</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new ANSI::Palette!</td>
<td>2023-02-19T08:11:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Matrix">Acme-Matrix</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Heavenly digital rain</td>
<td>2023-02-16T16:53:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MetaSyntactic-newsradio">Acme-MetaSyntactic-newsradio</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Characters from the sitcom Newsradio (1995-1999)</td>
<td>2023-02-18T10:26:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-CPython3">Alien-CPython3</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Python</td>
<td>2023-02-14T09:03:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Deno">Alien-Deno</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Deno</td>
<td>2023-02-14T09:43:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Go">Alien-Go</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Go</td>
<td>2023-02-14T09:22:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-LLVM">Alien-LLVM</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build LLVM</td>
<td>2023-02-14T09:20:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Nodejs">Alien-Nodejs</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Node.js</td>
<td>2023-02-14T09:41:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-OpenJDK">Alien-OpenJDK</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build OpenJDK</td>
<td>2023-02-14T09:06:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Rust">Alien-Rust</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Rust</td>
<td>2023-02-14T09:39:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Zig">Alien-Zig</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build Zig</td>
<td>2023-02-14T09:21:35</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-innoextract">Alien-innoextract</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>Find or build innoextract</td>
<td>2023-02-16T05:03:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-APA">App-APA</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Access APA News via RSS</td>
<td>2023-02-16T11:39:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-AdditivesUtils">App-AdditivesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives</td>
<td>2023-02-05T09:40:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Additives">App-BPOMUtils-Additives</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives in BPOM</td>
<td>2023-02-05T00:05:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-RPO-Checker">App-BPOMUtils-RPO-Checker</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Various checker utilities to help with Processed Food Registration (RPO – Registrasi Pangan Olahan) at BPOM</td>
<td>2023-02-11T04:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table">App-BPOMUtils-Table</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Some utilities providing table data related to BPOM</td>
<td>2023-02-05T00:37:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodAdditive">App-BPOMUtils-Table-FoodAdditive</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List additives in BPOM processed food division</td>
<td>2023-02-13T13:26:53</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodCategory">App-BPOMUtils-Table-FoodCategory</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List food categories in BPOM processed food division</td>
<td>2023-02-13T13:27:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodIngredient">App-BPOMUtils-Table-FoodIngredient</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List ingredients in BPOM processed food division</td>
<td>2023-02-13T13:27:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-FoodType">App-BPOMUtils-Table-FoodType</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List food types in BPOM processed food division</td>
<td>2023-02-13T13:27:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-MicrobeInput">App-BPOMUtils-Table-MicrobeInput</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List of microbe specification in BPOM processed food division</td>
<td>2023-02-13T13:27:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-Table-RegCodePrefix">App-BPOMUtils-Table-RegCodePrefix</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>List known alphabetical prefixes in BPOM registered product codes</td>
<td>2023-02-13T13:27:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ChemistryUtils">App-ChemistryUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to chemistry</td>
<td>2023-02-19T00:05:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FoodAdditivesUtils">App-FoodAdditivesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to food additives</td>
<td>2023-02-05T09:42:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-tee">App-Greple-tee</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>module to replace matched text by the external command result</td>
<td>2023-02-19T11:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-HTMLUtils-Grep">App-HTMLUtils-Grep</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Command-line utilities related to grepping HTML files</td>
<td>2023-02-08T14:24:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KBLIUtils">App-KBLIUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to chemistry</td>
<td>2023-02-14T13:21:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Toot">App-Toot</a></td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>post a status to Mastodon</td>
<td>2023-02-05T15:50:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-financeta-new">App-financeta-new</a></td>
<td><a href="https://metacpan.org/author/VIKAS">VIKAS</a></td>
<td>App::financeta is a Technical Analysis GUI</td>
<td>2023-02-28T03:05:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lastaccess">App-lastaccess</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>現行ディレクトリの下のファイルを、最後にアクセスされた順で網羅的に表示する。</td>
<td>2023-02-27T05:05:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-madeafter">App-madeafter</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>各ファイルの3個の日時情報が、現在から何秒前であるかを、表形式で表示。</td>
<td>2023-02-27T07:47:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-samesize">App-samesize</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>現行ディレクトリにある全く同じバイトサイズのファイルを一覧にする。MD5ハッシュ値を使うオプションもある。</td>
<td>2023-02-27T06:09:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sponge">App-sponge</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Soak up standard input and write to a file</td>
<td>2023-02-14T08:46:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-Assemble">Bencher-Scenario-Regexp-Assemble</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::Assemble</td>
<td>2023-02-05T00:05:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-IPv4">Bencher-Scenario-Regexp-IPv4</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::IPv4</td>
<td>2023-02-12T00:05:47</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-IPv6">Bencher-Scenario-Regexp-IPv6</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Regexp::IPv6</td>
<td>2023-02-19T00:06:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Regexp-Pattern-Git">Bencher-Scenario-Regexp-Pattern-Git</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark patterns in Regexp::Pattern::Git</td>
<td>2023-02-26T00:05:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Blockchain-Contract-Solidity-ABI">Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>Contract ABI utilities</td>
<td>2023-02-02T17:17:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chrome-Policy">Chrome-Policy</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Chrome Policy class</td>
<td>2023-02-04T01:26:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-CryptColumn">DBIx-Class-CryptColumn</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Automatically hash password/passphrase columns</td>
<td>2023-02-08T00:42:46</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-WithClass">DBIx-WithClass</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>DBIx::Class, with more class!</td>
<td>2023-02-12T22:01:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Resolver">Data-Resolver</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>resolve keys to data</td>
<td>2023-02-05T09:58:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-RWP">Dist-Zilla-PluginBundle-RWP</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Add [@RWP] plugin bundle into dist.ini</td>
<td>2023-02-04T19:09:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Env-Assert">Env-Assert</a></td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>Ensure that the environment variables match what you need, or abort.</td>
<td>2023-02-15T13:52:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Env-Dot">Env-Dot</a></td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>Read environment variables from .env file</td>
<td>2023-02-19T11:46:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Copy-clonefile">File-Copy-clonefile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>call clonefile system call</td>
<td>2023-02-16T17:05:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-IncludesTimeRange">File-Find-IncludesTimeRange</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>Takes a array of time stamped items(largely meant for use with files) returns ones that include the specified time range.</td>
<td>2023-02-27T05:35:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Meta-Cache">File-Meta-Cache</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Cache open file descriptors and stat meta data</td>
<td>2023-02-27T08:03:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Text-CSV">File-Text-CSV</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>Easy access to CSV data files</td>
<td>2023-02-23T13:44:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Hooks">Future-AsyncAwait-Hooks</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>scoped hook blocks that run extra code around await expressions</td>
<td>2023-02-12T00:37:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GetoptLongWrapper">GetoptLongWrapper</a></td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>A wrapper for the Getopt::Long module</td>
<td>2023-02-05T06:47:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graph-Geometric">Graph-Geometric</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>create and work with geometric graphs</td>
<td>2023-02-08T13:27:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-Magick">Image-Magick</a></td>
<td><a href="https://metacpan.org/author/JCRISTY">JCRISTY</a></td>
<td>objected-oriented Perl interface to ImageMagick. Use it to create, edit, compose, or convert bitmap images from within a Perl script.</td>
<td>2023-02-04T03:49:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Insight-Scriptures">Insight-Scriptures</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Insight::Scriptures!</td>
<td>2023-02-10T23:04:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LWP-UserAgent-msgraph">LWP-UserAgent-msgraph</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td/>
<td>2023-02-16T21:21:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Manipulator">Manipulator</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>manipulate data structs via codeblocks</td>
<td>2023-02-11T17:15:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Formula">Math-Formula</a></td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>Expressions on steriods</td>
<td>2023-02-24T14:21:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mockery">Mockery</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Mock objects for testing purposes</td>
<td>2023-02-11T01:17:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Passphrase">Mojolicious-Plugin-Passphrase</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Securely hash and validate your passwords.</td>
<td>2023-02-12T22:20:19</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-PrometheusTiny">Mojolicious-Plugin-PrometheusTiny</a></td>
<td><a href="https://metacpan.org/author/JAVIER">JAVIER</a></td>
<td>Export metrics using Prometheus::Tiny::Shared</td>
<td>2023-02-05T08:03:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Keyword-Chain">MooX-Keyword-Chain</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Subroutine chains</td>
<td>2023-02-06T01:48:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Keyword-Random">MooX-Keyword-Random</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>return a random result!</td>
<td>2023-02-07T17:26:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Chord-Progression-T">Music-Chord-Progression-T</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Generate transposed chord progressions</td>
<td>2023-02-02T04:08:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Chord-Progression-Transform">Music-Chord-Progression-Transform</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Generate transformed chord progressions</td>
<td>2023-02-02T12:36:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-CreatingRhythms">Music-CreatingRhythms</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>Perl from the C code of the book</td>
<td>2023-02-26T16:55:23</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Netkit">Netkit</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>create netkit labs with code.</td>
<td>2023-02-26T20:21:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NetworkManager-Strict">NetworkManager-Strict</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>NetworkManager strict settings class</td>
<td>2023-02-12T13:56:23</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDF-Collage">PDF-Collage</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>PDF manipulation with scissors and glue</td>
<td>2023-02-12T18:53:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-7zDownload">RT-Extension-7zDownload</a></td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>RT-Extension-7zDownload Extension</td>
<td>2023-02-21T17:19:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Redis-Cluster-Fast">Redis-Cluster-Fast</a></td>
<td><a href="https://metacpan.org/author/PLAIN">PLAIN</a></td>
<td>A fast perl binding for Redis Cluster</td>
<td>2023-02-02T19:14:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-N_Queens">Regexp-N_Queens</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>Abstract</td>
<td>2023-02-17T18:46:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Reply-Plugin-Prompt">Reply-Plugin-Prompt</a></td>
<td><a href="https://metacpan.org/author/FREED">FREED</a></td>
<td>reply plugin for powerlevel10k style prompt</td>
<td>2023-02-26T13:37:11</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SMS-Send-IN-Textlocal">SMS-Send-IN-Textlocal</a></td>
<td><a href="https://metacpan.org/author/INDRADG">INDRADG</a></td>
<td>Regional context SMS::Send driver to send messages via Textlocal's India service ( <a href="https://api.textlocal.in/send/" rel="nofollow">https://api.textlocal.in/send/</a> )</td>
<td>2023-02-14T16:07:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Copy">SPVM-File-Copy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Copying and Moving Files</td>
<td>2023-02-09T05:35:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Find">SPVM-File-Find</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Short Description</td>
<td>2023-02-23T02:12:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Glob">SPVM-File-Glob</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>The glob Function</td>
<td>2023-02-16T01:35:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Path">SPVM-File-Path</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Creating and Removing Multi-Level Path</td>
<td>2023-02-15T01:07:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Spec">SPVM-File-Spec</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>foo</td>
<td>2023-02-03T22:32:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-File-Temp">SPVM-File-Temp</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Short Description</td>
<td>2023-02-21T05:37:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-FindBin">SPVM-FindBin</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Locate Directory of Original Program</td>
<td>2023-02-07T01:12:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-RE2">SPVM-Resource-RE2</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>Google/RE2 Resources</td>
<td>2023-02-28T00:56:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Array">Sah-Schemas-Array</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Sah schemas related to array type</td>
<td>2023-02-12T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Spreadsheet-Edit">Spreadsheet-Edit</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>Slice and dice spreadsheets, optionally using tied variables.</td>
<td>2023-02-08T02:01:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Middler">Sub-Middler</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Middleware subroutine chaining</td>
<td>2023-02-27T08:32:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sys-GetRandom">Sys-GetRandom</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>Perl interface to getrandom(2)</td>
<td>2023-02-10T00:59:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-Chemistry-Element">TableData-Chemistry-Element</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Chemical elements</td>
<td>2023-02-05T09:40:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-BBIA">TableDataBundle-Business-ID-BBIA</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Collection of TableData:: modules related to BBIA (Balai Besar Industri Agro)</td>
<td>2023-02-20T12:01:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Test">TableDataBundle-Test</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Collection of more TableData::Test::* modules for testing</td>
<td>2023-02-11T04:09:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataRole-Spec-TableDef">TableDataRole-Spec-TableDef</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Role to require methods related to TableDef</td>
<td>2023-02-25T01:28:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-BeLike-RWP">Task-BeLike-RWP</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl modules bundle to install from CPAN</td>
<td>2023-02-12T18:05:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Es">Terse-Es</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse Elasticsearch.</td>
<td>2023-02-02T21:50:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-CHI">Terse-Plugin-CHI</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse response cache</td>
<td>2023-02-03T19:28:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-Glitch">Terse-Plugin-Glitch</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Terse::Plugin::Glitch!</td>
<td>2023-02-12T06:02:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Plugin-UA">Terse-Plugin-UA</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse LWP::UserAgent plugin.</td>
<td>2023-02-01T17:48:15</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Runtime">Terse-Runtime</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>Terse Runtime</td>
<td>2023-02-17T22:52:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Builder-SubtestSelection">Test-Builder-SubtestSelection</a></td>
<td><a href="https://metacpan.org/author/SVW">SVW</a></td>
<td>Select subtests by name or by number</td>
<td>2023-02-23T17:20:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-NoTty">Test-NoTty</a></td>
<td><a href="https://metacpan.org/author/NWCLARK">NWCLARK</a></td>
<td/>
<td>2023-02-26T10:37:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-cpan-versioning">Test-cpan-versioning</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>Testing how CPAN uploader treats non-standard version</td>
<td>2023-02-10T08:51:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Wrap-NoStrip">Text-Wrap-NoStrip</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Line wrapping without stripping the whitespace</td>
<td>2023-02-18T10:27:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Thread-GoChannel">Thread-GoChannel</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>Fast thread queues with go-like semantics</td>
<td>2023-02-24T16:34:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tie-Indirect">Tie-Indirect</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>tie variables to access data located at run-time.</td>
<td>2023-02-07T23:45:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-PopList">Tk-PopList</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Popping a selection list relative to a widget</td>
<td>2023-02-28T17:37:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Meteo">Weather-Meteo</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>Interface to <a href="https://open-meteo.com" rel="nofollow">https://open-meteo.com</a> for historical weather data</td>
<td>2023-02-28T16:13:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-WeatherKit">Weather-WeatherKit</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Apple WeatherKit REST API client</td>
<td>2023-02-22T00:05:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-IdoitAPI">WebService-IdoitAPI</a></td>
<td><a href="https://metacpan.org/author/MAMAWE">MAMAWE</a></td>
<td>a library to access the i-doit JSON RPC API</td>
<td>2023-02-17T14:37:36</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Workflow-Inotify">Workflow-Inotify</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>Linux::Inotify2 wrapper</td>
<td>2023-02-09T19:50:39</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wrapper-GetoptLong">Wrapper-GetoptLong</a></td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>A wrapper for the Getopt::Long module</td>
<td>2023-02-08T04:50:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XS-Parse-Keyword-FromPerl">XS-Parse-Keyword-FromPerl</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>drive XS::Parse::Keyword directly from Perl</td>
<td>2023-02-16T23:33:53</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>109</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>42</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>12</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>9</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>8</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>3</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/NGABRIEL">NGABRIEL</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/MIKKOI">MIKKOI</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MAMAWE">MAMAWE</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/JCRISTY">JCRISTY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/JAVIER">JAVIER</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/VIKAS">VIKAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SVW">SVW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/FREED">FREED</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PLAIN">PLAIN</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/NWCLARK">NWCLARK</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/INDRADG">INDRADG</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/BLAINEM">BLAINEM</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date ANSI-Palette LNATION The great new ANSI::Palette! 2023-02-19T08:11:12 Acme-Matrix LNATION Heavenly digital rain 2023-02-16T16:53:43 Acme-MetaSyntactic-newsradio PERLANCAR Characters from the sitcom Newsradio (1995-1999) 2023-02-18T10:26:03 Alien-CPython3 ZMUGHAL Find or build Python 2023-02-14T09:03:20 Alien-Deno ZMUGHAL Find or build Deno 2023-02-14T09:43:22 Alien-Go ZMUGHAL Find or build Go 2023-02-14T09:22:54 Alien-LLVM ZMUGHAL Find or build LLVM 2023-02-14T09:20:09 Alien-Nodejs … <a href="https://perlancar.wordpress.com/2023/03/01/list-of-new-cpan-distributions-feb-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Feb 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2053</id>
    <published>2023-03-01T03:02:34Z</published>
    <updated>2023-03-01T03:02:34Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Programming Language Developer Road Map</title>
    <link rel="alternate" href="https://medium.com/@azmisahin/perl-programming-language-developer-road-map-a6ca0667f189?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Perl Syntax: Master the Perl syntax. Get a basic understanding of Perl’s language features, data types, conditional expressions, loops…</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@azmisahin/perl-programming-language-developer-road-map-a6ca0667f189?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Azmi ŞAHİN</name>
    </author>
    <id>https://medium.com/p/a6ca0667f189</id>
    <published>2023-02-28T11:33:22Z</published>
    <updated>2023-02-28T11:33:22.017000Z</updated>
    <category term="roadmaps"/>
    <category term="language"/>
    <category term="programming"/>
    <category term="developer"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#605 - Trying to save a disappearing language</title>
    <link rel="alternate" href="https://perlweekly.com/archive/605.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>In 1492 the Jews were <a href="https://www.jewishvirtuallibrary.org/the-spanish-expulsion-1492">expelled from Spain</a> and 4 years later also from Portugal. Many of those Jews settled in the Ottoman Empire and kept talking and changing their language. This is what created the language we call 'Judeo-Espanyol' or in its modern name 'Ladino'. For 500 years these people kept speaking and improving their language which is now a mix of medieval Spanish, Portuguese, Catalan, Turkish, Greek, Italian, Hebrew, Arabic, and probably a few other languages. These Jews are usually referred to as the 'Sephardic' Jews because 'Sepharad' means Spain in Hebrew. It was originally written using old Hebrew letters called <a href="https://en.wikipedia.org/wiki/Rashi_script">Rashi</a> and <a href="https://en.wikipedia.org/wiki/Solitreo">Solitreo</a>, but in the last 100 years or so it was switched to Latin letters.</p>
<p>Unfortunately due to various reasons (The modernization of Turkey by Atatürk, the Holocaust, emigration to USA, Israel and elsewhere) the majority of remaining Ladino speakers switched to the local language and today there are only a few ten thousands of native Ladino speakers, most of them above 60.</p>
<p>There are various grass-root projects to revitalize the language. One of them is called <a href="https://kantoniko.com/">Kantoniko</a>. It is a multi-lingual dictionary with sample sentences, audio, poster etc. There are also experiments to use the material for educational purposes for people who would like to learn Ladino. The project has some Open Source code written in Python and JavaScript. There is also a lot of data under various Creative-Commons licenses.</p>
<p>I know Python is not your cup of tea, but the whole project might be interesting to some of you and might take a look at it. I recorded a <a href="https://www.youtube.com/playlist?list=PLw7UYp3N0eUYt8ARGB4DbNffB4MPROFDY">series of videos in English</a> about the site and how to contribute to it.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/605.html</id>
    <published>2023-02-27T10:00:00Z</published>
    <updated>2023-02-27T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>FOSDEM 2023</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem20233"/>
  <id>tag:news.perlfoundation.org,2023-02-22:/post/fosdem20233</id>
  <published>2023-02-22T22:27:23</published>
  <updated>2023-02-22T22:27:23</updated>
  <summary>
  <![CDATA[
     The Perl Raku Foundation would like to thank all of our community volunteers that helped run the TPRF stand at FOSDEM this year. The stand was successful in spreading interest in the Perl and Raku languages and promoting involvement in our communities. A special thank you to Theo van Hoesel for providing these photos. 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/96e0d34e72685ee64272a88d5170ad6e0df7312e/fosdem.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl &amp; Raku Foundation would like to thank all of our community volunteers that helped run the TPRF stand at FOSDEM this year. The stand was successful in spreading interest in the Perl and Raku languages and promoting involvement in our communities. <p> <img src="_ra-rel-mnt_/simplecas/fetch_content/96e0d34e72685ee64272a88d5170ad6e0df7312e/fosdem.png" style="max-width:100%;" /> <p> <img src="_ra-rel-mnt_/simplecas/fetch_content/b2fdf90fae0d6995fa53948dd8aa627e098ce8bb/fosdem2.png" style="max-width:100%;" /> <p> A special thank you to Theo van Hoesel for providing these photos.</p>

    ]]>
  </content>
</entry>
</feed>
