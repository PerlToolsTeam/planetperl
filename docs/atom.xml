<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-10-26T08:44:06Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Next stable DBD::SQLite will be released at the beginning of November</title>
    <link rel="alternate" href="http://blogs.perl.org/users/kenichi_ishigaki/2022/10/next-stable-dbdsqlite-will-be-released-at-the-beginning-of-november.html"/>
    <id>tag:blogs.perl.org,2022:/users/kenichi_ishigaki//264.10930</id>
    <published>2022-10-25T18:48:15Z</published>
    <updated>2022-10-25T18:48:41Z</updated>
    <author>
        <name>Kenichi Ishigaki</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/kenichi_ishigaki/">
        <![CDATA[<p>DBD::SQLite 1.71_07 (with SQLite 3.39.4) is a release candidate for the next stable DBD::SQLite. This release is mainly to address a security hole found in SQLite, plus a few performance issues for perl built with -DDEBUGGING. See Changes for other fixes and changes.</p>

<p>This time I'll wait for about a week and release 1.72 at the beginning of November if there's no blocker nor request to wait for more. Thank you for your patience.<br />
</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Dancer2: Template Toolkit</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-10-25T10:10:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-template-toolkit"/>  <id>https://perlmaven.com/dancer2-template-toolkit</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 187:  Days Together and Magical Triplets</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/10/perl-weekly-challenge-187-days-together.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10929</id>
    <published>2022-10-24T03:11:56Z</published>
    <updated>2022-10-25T03:23:00Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 187 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-187/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Days Together</h2>

<p><em>Two friends, Foo and Bar gone on holidays separately to the same city. You are given their schedule i.e. start date and end date.</em></p>

<p><em>To keep the task simple, the date is in the form DD-MM and all dates belong to the same calendar year i.e. between 01-01 and 31-12. Also the year is non-leap year and both dates are inclusive.</em></p>

<p><em>Write a script to find out for the given schedule, how many days they spent together in the city, if at all.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: Foo =&gt; SD: '12-01' ED: '20-01'
       Bar =&gt; SD: '15-01' ED: '18-01'

Output: 4 days
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: Foo =&gt; SD: '02-03' ED: '12-03'
       Bar =&gt; SD: '13-03' ED: '14-03'

Output: 0 day
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: Foo =&gt; SD: '02-03' ED: '12-03'
       Bar =&gt; SD: '11-03' ED: '15-03'

Output: 2 days
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: Foo =&gt; SD: '30-03' ED: '05-04'
       Bar =&gt; SD: '28-03' ED: '02-04'

Output: 4 days
</code></pre>

<h3>Days Together in Raku</h3>

<p>The idea here is to create a yearly calendar mapping dates such as &#8216;05-04&#8217; to their day number in the year. It is then quite easy to use simple arithmetic subtraction to find the result.</p>

<pre><code>my @m = &lt; 0 31 28 31 30 31 30 31 31 30 31 30 31 &gt;;
my $c = 1;
my %dates = map { $_ =&gt; $c++ }, 
            (map { ((1..@m[$_])&gt;&gt;.fmt("%02d-$_")) }, 
            map {.fmt("%02d")}, 1..12).flat;

sub compute-common ($sd1, $ed1, $sd2, $ed2) {
    my $start-common = max %dates{$sd1}, %dates{$sd2};
    my $end-common = min %dates{$ed1}, %dates{$ed2};
    return $end-common - $start-common + 1;
}

for &lt;12-01 20-01 15-01 18-01&gt;, &lt;03-03 12-03 13-03 14-03&gt;,
    &lt;02-03 12-03 11-03 15-03&gt;, &lt;30-03 05-04 28-03 02-04&gt;,
    &lt;12-01 13-03 09-01 25-04&gt;
        -&gt; @input-dates {
    say "Number of days together for dates @input-dates[]: ", compute-common | @input-dates;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./days-together.raku
Number of days together for dates 12-01 20-01 15-01 18-01: 4
Number of days together for dates 03-03 12-03 13-03 14-03: 0
Number of days together for dates 02-03 12-03 11-03 15-03: 2
Number of days together for dates 30-03 05-04 28-03 02-04: 4
Number of days together for dates 12-01 13-03 09-01 25-04: 61
</code></pre>

<h3>Days Together in Perl</h3>

<p>This is port to Perl of the Raku program above, using the same idea of creating first a yearly calendar to make date computations easy.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @months = &lt; 0 31 28 31 30 31 30 31 31 30 31 30 31 &gt;;
my @dates;
for my $m (map {sprintf( "%02d", $_ ) } 1..12) {
    push @dates, map {sprintf ( "%02d-$m", $_ )} 1..$months[$m];
}
my $c = 1;
my %d = map { $_ =&gt; $c++ } @dates;

sub compute_common {
    my ($sd1, $ed1, $sd2, $ed2) = map $d{$_}, @_;
    my $start_common = $sd1 &gt; $sd2 ? $sd1 : $sd2;
    my $end_common   = $ed1 &lt; $ed2 ? $ed1 : $ed2;
    return $end_common - $start_common + 1;
}

for my $test (
    [&lt;12-01 20-01 15-01 18-01&gt;], [&lt;03-03 12-03 13-03 14-03&gt;],
    [&lt;02-03 12-03 11-03 15-03&gt;], [&lt;30-03 05-04 28-03 02-04&gt;],
    [&lt;12-01 13-03 09-01 25-04&gt;] ) {
        say "Number of days together for dates @$test]: ",
            compute_common @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./days-together.pl
Number of days together for dates 12-01 20-01 15-01 18-01]: 4
Number of days together for dates 03-03 12-03 13-03 14-03]: 0
Number of days together for dates 02-03 12-03 11-03 15-03]: 2
Number of days together for dates 30-03 05-04 28-03 02-04]: 4
Number of days together for dates 12-01 13-03 09-01 25-04]: 61
</code></pre>

<h2>Task 2: Magical Triplets</h2>

<p><em>You are given a list of positive numbers, <code>@n</code>, having at least 3 numbers.</em></p>

<p><em>Write a script to find the triplets <code>(a, b, c)</code> from the given list that satisfies the following rules.</em></p>

<pre><code>1. a + b &gt; c
2. b + c &gt; a
3. a + c &gt; b
4. a + b + c is maximum.
</code></pre>

<p><em>In case, you end up with more than one triplets having the maximum then pick the triplet where a >= b >= c.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @n = (1, 2, 3, 2);
Output: (3, 2, 2)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @n = (1, 3, 2);
Output: ()
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @n = (1, 1, 2, 3);
Output: ()
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: @n = (2, 4, 3);
Output: (4, 3, 2)
</code></pre>

<p>In essence, the rules for a triplet to be valid are the same as those to determine whether three segments can form a triangle. But that doesn&#8217;t really help solving the problem.</p>

<p>Although the task specification says &#8220;to find the triplets&#8221;, it appears from the examples that what is required is only one triplet, the &#8220;maximum&#8221; one, i.e. the one with the maximum sum. To achieve that, I&#8217;ll simply sort the input list in descending order so that the the first triplet found will be the &#8220;maximum&#8221; one. In my humble view, the second rule to find the best triplet doesn&#8217;t really make sense (there may be several triplets matching that second rule, and this is what would happen in fact with the first example if the maximum rule did not apply first), so I&#8217;ll simply skip it.</p>

<h3>Magical Triplets in Raku</h3>

<p>The <code>is-valid-triplet</code> subroutine checks that size rules are satisfied. As mentioned above, we start with sorting in descending order the input list to make sure that the first triplet found is the maximum one (we could actually stop the <code>for</code> loop after having found the first triplet but didn&#8217;t do it because it would make sense to modify the program at some time in the future to list all valid triplets).</p>

<pre><code>sub is-valid-triplet ($a, $b, $c) {
    return False if $c &gt;= $a + $b;
    return False if $b &gt;= $a + $c;
    return False if $a &gt;= $b + $c;
    return True;
}
for &lt;1 2 3 2&gt;, &lt;1 3 2&gt;, &lt;1 1 2 3&gt;, &lt;2 4 3&gt; -&gt; @test {
    my @valid;
    for @test.sort.reverse.combinations: 3 -&gt; @triplet {
        push @valid, @triplet if is-valid-triplet | @triplet;
    }
    say @test, " =&gt; ", @valid.elems &gt; 0 ?? @valid[0] !! "()";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./magical-triplet.raku
(1 2 3 2) =&gt; (3 2 2)
(1 3 2) =&gt; ()
(1 1 2 3) =&gt; ()
(2 4 3) =&gt; (4 3 2)
</code></pre>

<h3>Magical Triplets in Perl</h3>

<p>This is a port to Perl of the Raku program above, and the comments made above also apply here. Since there is no built-in <code>combinations</code> routine in Perl, we roll out our own recursive <code>combine</code> subroutine.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @result;

sub is_valid_triplet {
    my ($a, $b, $c) = @_;
    return 0 if $c &gt;= $a + $b;
    return 0 if $b &gt;= $a + $c;
    return 0 if $a &gt;= $b + $c;
    return 1;
}

sub combine {
    my @out = @{$_[0]};
    my @in  = @{$_[1]};
    if (@out == 3) {
        push @result, $_[0] if is_valid_triplet @out;
        return;
    }
    for my $i (0..$#in) {
        combine ([ @out, $in[$i] ], [ @in[$i+1..$#in] ]);
    }
}

for my $test ( [&lt;1 2 3 2&gt;], [&lt;1 3 2&gt;], [&lt;1 1 2 3&gt;], [&lt;2 4 3&gt; ]) {    
    @result = ();
    combine ([], [ sort { $b &lt;=&gt; $a } @$test]);
    say "@$test =&gt; ", @result &gt; 0 ? "@{$result[0]}" : "()";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./magical-triplet.pl
1 2 3 2 =&gt; 3 2 2
1 3 2 =&gt; ()
1 1 2 3 =&gt; ()
2 4 3 =&gt; 4 3 2
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on October 30, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-10-25T00:00:00Z</published>
    <updated>2022-10-25T00:00:00Z</updated>
  </entry>
  <entry>
    <title>#587 - Continuous Integration for Perl modules</title>
    <link rel="alternate" href="https://perlweekly.com/archive/587.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>For years Perl was a long way ahead of the other languages in terms of testing the modules. The volunteers of the <a href="http://cpantesters.org/">CPAN Testers</a> provide an excellent service. Every time a new module or a new version of an older module is uploaded to CPAN (via <a href="https://pause.perl.org/">PAUSE</a>) within days and sometimes even within hours the CPAN Testers would download the new release, test it on their machines, and send a report to the author. Sometimes they would even open issues/tickets manually to report the problem and help the author(s) fix them.</p>
<p>These days, however, Open Source developers can use a number of free Continuous Integration systems that would give them feedback much sooner: On every push to GitHub or GitLab. They can run the author or release tests on these systems. They can configure to test other modules that use their module (reverse dependencies) to make sue the new changes don't have a negative impact on these users. They can can even re-run all the tests every day making sure that changes in the dependencies of the module don't break it. (CPAN Testers usually run the tests of a module only if you release a new version or if your module is a dependency of something that was released.)</p>
<p>By catching certain issues before they release a new version they provide a better experience to every user of CPAN and they also take some of the manual work off the shoulders of the CPAN Testers who are few.</p>
<p>For many years Travis-CI was the de-facto standard to set up CI for GitHub-based project. These days it is primarily GitHub Actions.</p>
<p>So, I have been on a quest to configure GitHub Actions to all the Perl projects where the author is interested. I have <a href="https://perlmaven.com/os">documented some of these</a> and I have written on <a href="https://perlmaven.com/ci">Why and how to CI</a>. I use the <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> to locate candidates, but if you'd like to get help with setting up CI, open an issue on your project and tag <a href="https://github.com/szabgab/">me</a>. If you like my quest, feel free to <a href="https://szabgab.com/support.html">sponsor me</a> so I'll be able to allocate more time to this. Oh, and if your company needs help with CI and test automation, I offer that as a service.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/587.html</id>
    <published>2022-10-24T10:00:00Z</published>
    <updated>2022-10-24T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 187</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-187/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-187/</id>
    <published>2022-10-24T00:00:00Z</published>
    <updated>2022-10-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 188</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-188/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Divisible Pairs 10. TASK #2: Total Zero HEADLINES  Welcome to the Week #188 of The Weekly Challenge.
We are into the fourth week of Hacktoberfest 2022. At last, we made it, little late though to get the 100+ mark this time too.
Week: #1 #2 #3 #4 -------------------- Perl: 55 59 56 50 Raku: 31 35 32 33 Blog: 17 19 19 19  Last week, we had 35 regular contributors and 13 guest contributors.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-188/</id>
    <published>2022-10-24T00:00:00Z</published>
    <updated>2022-10-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Days Together Are Magical</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/10/23#pwc187" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Two friends, Foo and Bar gone on holidays seperately to the same city. You are 
given their schedule i.e. start date and end date. To keep the task simple, the 
date is in the form DD-MM and all dates belong to the same calendar 
year i.e. between 01-01 and 31-12. &lt;br /&gt;
Also the year is non-leap year and both dates are inclusive. Write a script to 
find out for the given schedule, how many days they spent together in the 
city, if at all.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Time::Piece;
use Time::Seconds;

sub days_together{
    my($together) = @_;
    my $days_together = 0;
    my($start, $end);
    my $foo_start = Time::Piece-&gt;strptime($together-&gt;{Foo}-&gt;{SD}, q/%d-%m/);
    my $bar_start = Time::Piece-&gt;strptime($together-&gt;{Bar}-&gt;{SD}, q/%d-%m/);
    my $foo_end = Time::Piece-&gt;strptime($together-&gt;{Foo}-&gt;{ED}, q/%d-%m/);
    my $bar_end = Time::Piece-&gt;strptime($together-&gt;{Bar}-&gt;{ED}, q/%d-%m/);
    $start = $foo_start;
    $start = $bar_start if $bar_start &gt; $foo_start;
    $end = $foo_end;
    $end = $bar_end if $bar_end &lt; $foo_end;
    {
        $days_together++ if $start &lt;= $end;
        $start += ONE_DAY;
        redo if $start &lt;= $end;
    }
    return $days_together;
}


MAIN:{
    my $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/12-01/, ED =&gt; q/20-01/},
                           Bar =&gt; {SD =&gt; q/15-01/, ED =&gt; q/18-01/}});
    say $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/02-03/, ED =&gt; q/12-03/},
                           Bar =&gt; {SD =&gt; q/13-03/, ED =&gt; q/14-03/}});
    say $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/02-03/, ED =&gt; q/12-03/},
                           Bar =&gt; {SD =&gt; q/11-03/, ED =&gt; q/15-03/}});
    say $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/30-03/, ED =&gt; q/05-04/},
                           Bar =&gt; {SD =&gt; q/28-03/, ED =&gt; q/02-04/}});
    say $days;        
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
0
2
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Time:Piece makes this easy, once we figure out the logic. The start date should
be the later of the two start dates since clearly there can be no overlap until the
second person shows up. Similarly the end date should be the earlier of the two
dates since once one person leaves their time together is over. By converting
the dates to Time::Piece objects the comparisons are straightforward. &lt;/p&gt;

&lt;p&gt;Now, once the dates are converted to Time::Piece objects and the start and end dates
determined we could also use Time::Piece arithmetic to subtract one from the other
and pretty much be done. However, since that might be a little too boring I instead
iterate and count the number of days in a &lt;code&gt;redo&lt;/code&gt; loop!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of positive numbers, @n, having at least 3 numbers.
Write a script to find the triplets (a, b, c) from the given list that satisfies 
a set of rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Hash::MultiKey;
use Math::Combinatorics;

sub magical_triples{
    my(@numbers) = @_;
    my %triple_sum;
    tie %triple_sum, q/Hash::MultiKey/;
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; 3, data =&gt; [@numbers]);
    my($s, $t, $u);
    while(my @combination = $combinations-&gt;next_combination()){
        my($s, $t, $u) = @combination;
        my $sum;
        $sum = $s + $t + $u if $s + $t &gt; $u &amp;&amp; $t + $u &gt; $s &amp;&amp; $s + $u &gt; $t;
        $triple_sum{[$s, $t, $u]} = $sum if $sum;
    }
    my @triples_sorted = sort {$triple_sum{$b} &lt;=&gt; $triple_sum{$a}} keys %triple_sum; 
    return ($triples_sorted[0]-&gt;[0], $triples_sorted[0]-&gt;[1], $triples_sorted[0]-&gt;[2]) if @triples_sorted;
    return ();
}

MAIN:{
    say "(" . join(", ", magical_triples(1, 2, 3, 2)) . ")";
    say "(" . join(", ", magical_triples(1, 3, 2)) . ")";
    say "(" . join(", ", magical_triples(1, 1, 2, 3)) . ")";
    say "(" . join(", ", magical_triples(2, 4, 3)) . ")";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
(2, 3, 2)
()
()
(4, 3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The "magical" rules, if not clear from the above code are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a + b &gt; c&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;b + c &gt; a&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a + c &gt; b&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a + b + c is maximum.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be certain, this problem is an excellent application of constraint programming.
Unfortunately I do not know of a good constraint programming library in Perl.
If you see my &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2022/10/23"&gt;Prolog Solutions&lt;/a&gt;
for this problem you can see just how straightforward such a solution can be!&lt;/p&gt;

&lt;p&gt;Here we find ourselves with a brute force implementation. Math::Combinatorics is
a battle tested module when dealing with combinatorics problems in Perl. For all possible selections
of three elements of the original list we evaluate the rules and track their sums
in a hash. We then sort the hash keys based on the associated values and return
the triple which has maximal sum and otherwise passes all the other requirements.&lt;/p&gt;

&lt;p&gt;A nice convenient module used here is Hash::MultiKey which allows us to use
an array reference as a hash key. In this way we can have immediate access to the
triples when needed.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-187/"&gt;Challenge 187&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc187</id>
    <published>2022-10-23T17:11:00-04:00</published>
    <updated>2022-10-23T17:11:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Use Dist::Zilla to Create a Perl Distribution</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/use-distzilla-to-create-a-perl-distribution-2c5i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://dzil.org/">Dist::Zilla</a> (dzil) is a program for creating Perl distributions. While the documentation for dzil is complete, it is not geared towards a beginner that has never created a Perl distribution before. This article provides a brief introduction to Dist::Zilla geared towards users that know little about Perl distributions in general.</p>

<p><a id="orgafbbf0c"/></p>

<h1>
  
  
  What is a Perl distribution?
</h1>

<p>A Perl distribution is an archive of files that includes a Perl module. There are no official rules on what non-module files must be included in a distribution, but they often include (among other things) test scripts, a Makefile.PL, documentation, and the license. These distributions are commonly uploaded to <a href="https://metacpan.org/">CPAN</a>, which is a place for Perl programmers to upload their Perl distributions for the purpose of sharing their code.</p>

<p><a id="orgcabe74a"/></p>

<h1>
  
  
  Why Dist::Zilla?
</h1>

<p>You may think that bundling together a Perl module with some other files is simple, but there are many things that need to be accounted for, and are prone to human error. There are also many possibilities for what somebody may want to include in a distribution, and how they want to include it. Dist::Zilla exists to be a one-stop solution to every possible problem involved in creating a Perl distribution.</p>

<p><a id="org29a19e9"/></p>

<h1>
  
  
  Using Dist::Zilla
</h1>

<p>When you install Dist::Zilla, you will be provided with an executable named <code>dzil</code>. The most important command that <code>dzil</code> provides is <code>build</code>, which - when run in the projects root directory - outputs a distribution tarball. Other commands such as <code>test</code> and <code>release</code> are also provided, but when getting started with Dist::Zilla you will only need the <code>build</code> command.</p>

<p><a id="orge0178c3"/></p>

<h1>
  
  
  The "dist.ini" File
</h1>

<p>Dist::Zilla is configured on a per-project basis through a file named <code>dist.ini</code>, which should be located at the root of the project's directory tree.</p>

<p>The beginning of a <code>dist.ini</code> file specifies required settings that every distribution should have. These settings include <code>name</code>, <code>version</code>, <code>abstract</code>, <code>copyright_holder</code>, and <code>license</code>. (There is also <code>author</code>, which isn't required but you probably want to add it as well.)</p>

<p>Here is an example:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name = App-Foo
version = 1.0
author = Jane Doe
copyright_holder = Jane Doe
license = Perl_5
abstract = the best software ever
</code></pre>

</div>

<p>After you specify these required settings, you can then configure your distribution by specifying what plugins you wish to use. Plugins are the mechanism that Dist::Zilla uses for providing features to your Perl distribution. If you have <code>dist.ini</code> that doesn't specify any plugins, Dist::Zilla will produce an empty distribution with no files.</p>

<p>Let's look at example of the plugins that a simple distribution might use, then go over what a few of the plugins actually do:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>[MetaResources]
homepage       = https://github.com/JaneDoe/App-Foo
bugtracker.web = https://github.com/JaneDoe/App-Foo/issues
repository.url = https://github.com/JaneDoe/App-Foo.git

[GatherDir]
[PruneCruft]
[ManifestSkip]
[MetaYAML]
[License]
[ExecDir]
[MakeMaker]
[Manifest]
[AutoPrereqs]
[TestRelease]
</code></pre>

</div>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::MetaResources">MetaResources</a> plugin adds resource entries to the distribution's metadata. <a href="https://metacpan.org/">MetaCPAN</a> can use this information to provide useful links to the distribution's page.</p>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::GatherDir">GatherDir</a> and <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::PruneCruft">PruneCruft</a> plugins tell Dist::Zilla that you want to include all the files in your project's directory into the distribution, excluding the ones you certainly don't want. The files you certainly don't want include build artifacts introduced by recent invocations of Dist::Zilla. The combination of these two plugins is used in almost every Dist::Zilla project.</p>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::MakeMaker">MakeMaker</a> plugin will tell Dist::Zilla to produce an <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>-powered Makefile.PL. Dist::Zilla will deal with everything required to create a proper Makefile.PL, so you do not need to know anything about ExtUtils::MakeMaker. Unless you are doing something special, you almost certainly want to use this plugin.</p>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::UploadToCPAN">UploadToCPAN</a> plugin will allow you to use the <code>dzil release</code> command to upload your distribution to CPAN.</p>

<p>It is important to note that each plugin takes effect in the order the plugins are specified in your dist.ini.</p>

<p>There are <strong>many</strong> plugins available for Dist::Zilla - over 1,200 thus far - so you will probably find one that can do just about anything you could possibly need for creating a distribution. <a href="https://metacpan.org/search?size=20&amp;q=Dist%3A%3AZilla%3A%3APlugin">Here</a> is a link for a metacpan query for "Dist::Zilla::Plugin", that can be used to explore the Dist::Zilla plugin ecosystem.</p>

<p>Here are links to the documentation for the plugins in the example <code>dist.ini</code> that I did not explain:</p>

<ul>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::ManifestSkip">ManifestSkip</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::MetaYAML">MetaYAML</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::License">License</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::ExecDir">ExecDir</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::Manifest">Manifest</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::AutoPrereqs">AutoPrereqs</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::TestRelease">TestRelease</a>
</li>
</ul>

<p><a id="org23f3c96"/></p>

<h1>
  
  
  Synopsis
</h1>

<p>Dist::Zilla can seem daunting at first, but it is actually quite straightforward and easy to use once you figure it out. The only difficult thing is figuring out what plugins you want to use.</p>

</div>
    </content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/use-distzilla-to-create-a-perl-distribution-2c5i</id>
    <published>2022-10-23T14:29:26Z</published>
    <updated>2022-10-23T14:29:26Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Challenges, Solutions and more Challenges and more Solutions</title>
    <link rel="alternate" href="https://dev.to/jonasbn/challenges-solutions-and-more-challenges-and-more-solutions-4j3f" type="text/html"/>
    <content type="html">&lt;p&gt;I am maintaining two Perl distributions, which are using C-bindings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/dist/Crypt-OpenSSL-X509"&gt;Crypt::OpenSSL::X509&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/dist/Crypt-OpenSSL-PKCS12"&gt;Crypt::OpenSSL::PKCS12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do not do much day to day maintenance, but on occassion there is a PR, which needs to be processed or a report from &lt;a href="http://www.cpantesters.org/"&gt;cpan-testers&lt;/a&gt; indicating a failing test, requiring further investigation. The thing it that the surroundings of these distributions change constantly. Circumstances involving change got me involved with the maintenance of the two distributions in the first place, I was a mere user and the platforms I was using these components on, where being updated continuously and we simply needed to keep up.&lt;/p&gt;

&lt;p&gt;Apparently this never stops and when I could see that I over time got failing tests due to the toolchains used around these kept evolving. The toolchain issue was often related to &lt;strong&gt;clang&lt;/strong&gt;, I was visiting the documentation for &lt;strong&gt;clang&lt;/strong&gt; on several occassions.&lt;/p&gt;

&lt;p&gt;By adjusting the command line parameters, I could keep the tests passing.&lt;/p&gt;

&lt;p&gt;Here are some examples on the mentioned docmentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/10.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 10 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/10.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/11.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 11 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/11.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/12.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 12 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/12.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 13 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 14 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to see if a given option was available in a version or when it was introduced (or deprecated), I surfed across the pages with multiple tabs open, cross-checking command line options etc..&lt;/p&gt;

&lt;p&gt;And example: &lt;code&gt;-Wunreachable-code-fallthrough&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Present in version 14 (&lt;code&gt;https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-fallthrough&lt;/code&gt;) but not in earlier versions.&lt;/p&gt;

&lt;p&gt;Where: &lt;code&gt;-Wall&lt;/code&gt; is present in versions all versions, below some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;14 (&lt;code&gt;https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html#wall&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;13 (&lt;code&gt;https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wall&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;4 (&lt;code&gt;https://releases.llvm.org/4.0.0/tools/clang/docs/DiagnosticsReference.html#wall&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had a challenge, I needed to keep an overview of the compiler diagnostic parameters. At the same time I could see that a pattern emerged as the URL structure was uniform and the pages had the some structure. So I decided to make a matrix of all of the diagnostic command line flags. The latter was clearly a benefit, so if you are creating similar documentation, please keep this in mind as a use-case.&lt;/p&gt;

&lt;p&gt;Anyway this lets me introduce: "&lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix"&gt;clang diagnostic flags matrix generator&lt;/a&gt;", a Perl application that would iterate over a set of available web pages (one for each version of &lt;strong&gt;clang&lt;/strong&gt;), extract/scrape the information and insert it into a data structure, from which I can print a matrix expressed as a Markdown table. Do note not all versions of clang are represented, but relevant versions and data is available from version 4 and above. Please see the &lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix/blob/main/diags.pl#L13"&gt;source code&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;And it worked, one can discuss the readability due to the size of the matrix, but I had a challenge and I came up with a solution. The matrix was inserted into &lt;a href="http://jonasbn.github.io/til/clang/diagnostic_flags.html"&gt;my TIL collection under the clang category&lt;/a&gt;, it is also available in the &lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix"&gt;clang diagnostic flags matrix generator repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A new problem occurred however. The matrix would not render correctly on GitHub, it would stop at some point, in the beginning I thought this was a transient error, but it did seem to persist. I did not observe the issue when using &lt;a href="http://jonasbn.github.io/til/clang/diagnostic_flags.html"&gt;GitHub pages&lt;/a&gt; or the Markdown preview in Visual Studio Code, so the problem had to be with GitHub. So I reported it as a bug to GitHub and a got an answer, brief and to the point. My Markdown exceeded the limit of file size for rendering on GitHub.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Text files over 512 KB are always displayed as plain text. Code is not syntax highlighted, and prose files are not converted to HTML (such as Markdown, AsciiDoc, etc.).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;REF: &lt;a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories#text-limits"&gt;GitHub Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did a check on my file and it exceeded the 512 KB with a size exceeding 1MB.&lt;/p&gt;

&lt;p&gt;New challenge, how do I decrease the size of the generated Markdown table.&lt;/p&gt;

&lt;p&gt;I started out by eliminating much of the use of spaces and emojis, the latter I exchanged for ASCII characters. The size decreased, but then version 15.0.0 of clang came along and the size increased. But it was easy to spot the culprit as all of the command line flags would link to their respective documentation per version, meaning that the URL carried a log of redundant information, which was reapeated a lot.&lt;/p&gt;

&lt;p&gt;After thinking a little I came to the conclusion that had shorten the URL, boiling down all the redundant information like a &lt;em&gt;compression algorithm&lt;/em&gt;. I did an experiment, where I just rewrote the URL to a short &lt;em&gt;fake&lt;/em&gt; domain name. And immediately I could see an effect and I decided to implement support for redirecting via a short URL to the longer URL.&lt;/p&gt;

&lt;p&gt;I did some basic checks, since I could isolate the Markdown matrix/table output from the generator. The data is based on a matrix covering versions from 4 to 14.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;947393&lt;/code&gt; KB with emojis and original (long) URLs&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;926691&lt;/code&gt; KB emojis exchanged for ASCII&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;418901&lt;/code&gt; KB no emojis and URLs shortened&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned version 15 of clang was introduced around the same time I was looking into this, so it gave me the opportunity to calculate as approximate size cost of a new version.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;462850&lt;/code&gt; KB no emojis and URLs shortened including version 15.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the cost of version 15 is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;462850&lt;/code&gt; - &lt;code&gt;418901&lt;/code&gt; = &lt;code&gt;43.949&lt;/code&gt; KB&lt;/p&gt;

&lt;p&gt;Meaning in a few versions the maximum of 512 KB will be exceeded again at some point, but I will look at that challenge when it becomes a problem.&lt;/p&gt;

&lt;p&gt;Well the solution required a way to shorten the URL. I ended up with a sort of &lt;em&gt;proxy&lt;/em&gt; which redirects from my short URL to the original. Actually reversing the change made by the &lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix"&gt;clang diagnostic flags matrix generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up was understanding what the common parts was and what the variables were. Looking at the URLs mentioned above, one will spot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;version number&lt;/li&gt;
&lt;li&gt;fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could even abbreviate the version number, since it only documented major versions, since command line options was not added a removed via minor or bug releases (semantic versioning for the win).&lt;/p&gt;

&lt;p&gt;The service should need to support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;version as a 1 digit number&lt;/li&gt;
&lt;li&gt;fragment, the complete fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I came up with the following scheme: &lt;code&gt;&amp;lt;domain&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;fragment&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://releases.llvm.org/5.0.0/tools/clang/docs/DiagnosticsReference.html#rsanitize-address&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Would be abbreviated to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;domain&amp;gt;/5/rsanitize-address&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which could be expressed as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[X](https://&amp;lt;domain&amp;gt;/5/rsanitize-address)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a basic service implemented in go: &lt;a href="https://github.com/jonasbn/pxy-redirect"&gt;pxy-redirect&lt;/a&gt;. In addition I needed a short domain name and ended up registering: &lt;code&gt;pxy.fi&lt;/code&gt;. The complete solution  running at &lt;code&gt;https://pxy.fi&lt;/code&gt;, which replaced the original domain name: &lt;code&gt;https://releases.llvm.org/&lt;/code&gt;, doming the redirection by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;expanding the version number&lt;/li&gt;
&lt;li&gt;and transporting the last part of the URL as a fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The URL: &lt;code&gt;https://releases.llvm.org/5.0.0/tools/clang/docs/DiagnosticsReference.html#rsanitize-address&lt;/code&gt; is extracted as part of manual parsing&lt;/li&gt;
&lt;li&gt;The Markdown is generated with a shorter representation: &lt;code&gt;[X](https://pxy.fi/5/rsanitize-address)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;When the link is clicked, the service rewrites from: &lt;code&gt;https://pxy.fi/5/rsanitize-address&lt;/code&gt; to &lt;code&gt;https://releases.llvm.org/5.0.0/tools/clang/docs/DiagnosticsReference.html#rsanitize-address&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The the service is deployed with DigitalOcean anb is up and running and I am watching it's logs to spot any weird things.&lt;/p&gt;

&lt;p&gt;To begin with my code was very aimed at the proxy part, being very transparent, so I decided to introduce&lt;br&gt;
an &lt;code&gt;index.html&lt;/code&gt; for the root, just to introduce the service just in case somebody hit that particular URL, then I could guide them.&lt;/p&gt;

&lt;p&gt;Introducing &lt;code&gt;index.html&lt;/code&gt;, then resulted in requests for &lt;code&gt;favicon.ico&lt;/code&gt; and I recently added support for ´robots.txt`, since I could see this was requested.&lt;/p&gt;

&lt;p&gt;I can see somebody is requesting &lt;code&gt;/login&lt;/code&gt;, which is very &lt;em&gt;sweet&lt;/em&gt;, but that is not a valid URL and it results in an error. JFYI there is no need to crawl the site since it is a very basic and transparent redirecting proxy and all of the code is open source and is available on GitHub&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.com/jonasbn/pxy-redirect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I examined the option to implement this as serverless functions with DigitalOcean, but that will require some more research. If I need to do some more redirection I can added an extra part to the URL so I can separate into namespaces, but I do not currently have this requirement, so it is not implemented.&lt;/p&gt;

&lt;p&gt;The implementation has been really fun and I can highlight some of the key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Mojo::UserAgent"&gt;Mojo::UserAgent&lt;/a&gt;, which is an awesome tool for HTTP client work&lt;/li&gt;
&lt;li&gt;GitHub limitations&lt;/li&gt;
&lt;li&gt;I am still in the process of learning Go, so it was fun with an experiment, which was not just another tutorial&lt;/li&gt;
&lt;li&gt;URL fragments and their nature&lt;/li&gt;
&lt;li&gt;Deploying on DigitalOcean and I want to dig into &lt;a href="https://www.digitalocean.com/products/functions"&gt;DigitalOceans functions&lt;/a&gt;, because I believe this to be a good use-case for serverless functions over a server solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideas and suggestions for improvements are most welcome. I am thinking about doing some follow up posts on the different components mentioned to walk through the implementation highlighting different aspects, I believe this could also be a good way to spot points of interest for improvements.&lt;/p&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/challenges-solutions-and-more-challenges-and-more-solutions-4j3f</id>
    <published>2022-10-23T14:13:48Z</published>
    <updated>2022-10-23T14:13:48Z</updated>
    <category term="opensource"/>
    <category term="go"/>
    <category term="perl"/>
    <category term="github"/>
  </entry>
  <entry>
    <title>Magical Days Together with Triplets</title>
    <link rel="alternate" href="https://dev.to/simongreennet/magical-days-together-with-triplets-3lci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 187
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-187/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-187/sgreen">My solution</a></p>

<p>After a few interstate trips and a bout of COVID-19, it's now onward and upwards to the end of the year. The ICC Men's Twenty20 World Cup has also started here so it's time to change the <a href="https://www.t20worldcup.com/official-broadcasters">channel</a> and throw out the remote for the next month. Go Black Caps!</p>

<h2>
  
  
  Task 1: Days Together
</h2>

<h3>
  
  
  Task
</h3>

<p>Two friends, Foo and Bar gone on holidays seperately[sic] to the same city. You are given their schedule i.e. start date and end date.</p>

<p>To keep the task simple, the date is in the form DD-MM and all dates belong to the same calendar year i.e. between 01-01 and 31-12. Also the year is non-leap year and both dates are inclusive.</p>

<p>Write a script to find out for the given schedule, how many days they spent together in the city, if at all.</p>

<h3>
  
  
  My solution
</h3>

<p>I really like this challenge, as it makes you think about how to solve them. Date math is never easy. For this task, I convert the four input dates into day of the year (1 = January 1<sup>st</sup>, 365 = December 31<sup>st</sup>). In Python, I use the <a href="https://docs.python.org/3/library/datetime.html#datetime.date">date</a> module, while I use <a href="https://metacpan.org/pod/Date::Calc">Date::Calc</a> for the Perl solution. This makes the rest of the solution relatively easy.</p>

<p>I check that both Foo and Bar don't leave before they arrive. We can calculate the number of days by calculating when the last person arrives and when the first person leaves. If this is a negative number, they didn't see each other. Others we take the value and add 1 to print the solution.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 12-01 20-01 15-01 18-01
4 days

<span class="nv">$ </span>./ch-1.py 02-03 12-03 13-03 14-03
0 days

<span class="nv">$ </span>./ch-1.py 02-03 12-03 11-03 14-03
2 days

<span class="nv">$ </span>./ch-1.py 30-03 05-04 28-03 02-04
4 days
</code></pre>

</div>



<h2>
  
  
  Task 2: Magical Triplets
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of positive numbers, @n, having at least 3 numbers.</p>

<p>Write a script to find the triplets (<code>a</code>, <code>b</code>, <code>c</code>) from the given list that satisfies the following rules.</p>

<ol>
<li>a + b &gt; c</li>
<li>b + c &gt; a</li>
<li>a + c &gt; b</li>
<li>a + b + c is maximum.</li>
</ol>

<p>In case, you end up with more than one triplets having the maximum then pick the triplet where a &gt;= b &gt;= c.</p>

<h3>
  
  
  My solution
</h3>

<p>I'm sure there are smarter people doing this challenge that will come up with some formula for figuring out the quickest way to solve this, but some times the brute force approach is good enough. Especially when dealing with small number of things.</p>

<p>For this challenge, I use the combinations function from <a href="https://docs.python.org/3.8/library/itertools.html#itertools.permutations">itertools</a> in Python and from <a href="https://metacpan.org/pod/Algorithm::Combinatorics">Algorithm::Combinatorics</a> in Perl to compute all possible combinations of three digits.</p>

<p>I store the 'best' solution so far in the <code>solutions</code> list (which is set to None initially in Python, and an empty arrayref in Perl).</p>

<p>I then loop through each combination and determine if the first three criteria are met. If they and the solution value is empty or the sum is greater than the current <code>solution</code>, I set <code>solution</code> to the new list.</p>

<p>I finally print the result in the specified format.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 1 2 3 2
<span class="o">(</span>3, 2, 2<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 3 2
<span class="o">()</span>

<span class="nv">$ </span>./ch-2.py 1 1 2 3
<span class="o">()</span>

<span class="nv">$ </span>./ch-2.py 2 4 3
<span class="o">(</span>4, 3, 2<span class="o">)</span>
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/magical-days-together-with-triplets-3lci</id>
    <published>2022-10-23T12:21:23Z</published>
    <updated>2022-10-23T12:21:23Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-446203617544588183</id>
    <published>2022-10-22T22:38:00.000+02:00</published>
    <updated>2022-10-22T22:38:01.281+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxv) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.057008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.057008&lt;/strong&gt; on 2022-10-18&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.057007 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GARU/Clone-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Clone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - recursively copy Perl datatypes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2022-10-19&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 2 years, 5 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2022-10-17&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 8 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSAVAGE/GraphViz-2.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Interface to AT&amp;T's GraphViz. Deprecated. See GraphViz2 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.25&lt;/strong&gt; on 2022-10-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.25 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/HTTP-Message-6.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.43&lt;/strong&gt; on 2022-10-22&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 6.41 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Log-Log4perl-1.57' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Log4perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Log4j implementation for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.57&lt;/strong&gt; on 2022-10-21&lt;/li&gt;  &lt;li&gt;Votes: 97&lt;/li&gt;  &lt;li&gt;Previous version: 1.56 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.14&lt;/strong&gt; on 2022-10-15&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.14 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20221020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20221020&lt;/strong&gt; on 2022-10-20&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220920 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Params-Validate-1.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Params::Validate&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate method/function parameters &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.31&lt;/strong&gt; on 2022-10-22&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.30 was 2 years, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.130' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.130&lt;/strong&gt; on 2022-10-20&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 0.124 was 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9657' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9657&lt;/strong&gt; on 2022-10-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9655 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-XS-0.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - provides an XS boost for some of Type::Tiny's built-in type constraints &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.025&lt;/strong&gt; on 2022-10-19&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.022 was 2 years, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/446203617544588183/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxv-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/446203617544588183"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/446203617544588183"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxv-12-great-cpan-modules-released.html" title="(cdxv) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7335669636289382496</id>
    <published>2022-10-22T22:35:00.004+02:00</published>
    <updated>2022-10-22T22:35:31.342+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxviii) metacpan weekly report - Text::Table</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 48&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Text::Table"&gt;Text::Table&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/10/22 20:34:40 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::ParseLog" target="_blank"&gt;Apache::ParseLog&lt;/a&gt; - Object-oriented Perl extension for parsing Apache log files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Gimei" target="_blank"&gt;App::Gimei&lt;/a&gt; - CLI for Data::Gimei&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Call::Context" target="_blank"&gt;Call::Context&lt;/a&gt; - Sanity-check calling context&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::FindDependencies" target="_blank"&gt;CPAN::FindDependencies&lt;/a&gt; - generate reports when modules' dependencies get new releases&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Gimei" target="_blank"&gt;Data::Gimei&lt;/a&gt; - a Perl port of Ruby's gimei generates fake data in Japanese.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPM::Tools" target="_blank"&gt;RPM::Tools&lt;/a&gt; - compare installed rpms with up-to-date distribution&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Inabajun::Utils" target="_blank"&gt;Acme::Inabajun::Utils&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=157)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=269)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Staticperl" target="_blank"&gt;App::Staticperl&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+1=99)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Page" target="_blank"&gt;Data::Page&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Section::Simple" target="_blank"&gt;Data::Section::Simple&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::ParameterizedJoinHack" target="_blank"&gt;DBIx::Class::ParameterizedJoinHack&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Size" target="_blank"&gt;Devel::Size&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GBK" target="_blank"&gt;GBK&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CookieJar" target="_blank"&gt;HTTP::CookieJar&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=104)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::AIO" target="_blank"&gt;IO::AIO&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb::JSON" target="_blank"&gt;mb::JSON&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Usage" target="_blank"&gt;Memory::Usage&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=475)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=291)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl" target="_blank"&gt;Net::Curl&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl::Promiser" target="_blank"&gt;Net::Curl::Promiser&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IDN::Encode" target="_blank"&gt;Net::IDN::Encode&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::LastFM" target="_blank"&gt;Net::LastFM&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::XSRFBlock" target="_blank"&gt;Plack::Middleware::XSRFBlock&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::ES6" target="_blank"&gt;Promise::ES6&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Raisin" target="_blank"&gt;Raisin&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=81)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPM::Packager" target="_blank"&gt;RPM::Packager&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Iconv" target="_blank"&gt;Text::Iconv&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+2=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Weather::GHCN::Fetch" target="_blank"&gt;Weather::GHCN::Fetch&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X::Tiny" target="_blank"&gt;X::Tiny&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7335669636289382496/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxviii-metacpan-weekly-report-texttable.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7335669636289382496"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7335669636289382496"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxviii-metacpan-weekly-report-texttable.html" title="(dxxviii) metacpan weekly report - Text::Table"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3910816286634792056</id>
    <published>2022-10-22T22:33:00.003+02:00</published>
    <updated>2022-10-22T22:33:57.183+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-10-22 20:33:03 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74083923" target="_blank"&gt;Perl, use regex to find a match and replace just the last character of the match (in this case a line break)&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74148140" target="_blank"&gt;Perl symmetric difference aka disjunctive union of two sets&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74129734" target="_blank"&gt;How to stack function definitions in perl (call them all at once)?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74094932" target="_blank"&gt;Test::More failing test with equal strings&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74127005" target="_blank"&gt;Why can't I reference a (particular) Perl array as I'd expect?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3910816286634792056/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/dlvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3910816286634792056"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3910816286634792056"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/dlvi-stackoverflow-perl-report.html" title="(dlvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Buy a Perl 5.36 mug and support The Perl Foundation</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2022/10/buy-a-perl-536-mug-and-support-the-perl-foundation.html"/>
    <id>tag:blogs.perl.org,2022:/users/dean//558.10925</id>
    <published>2022-10-20T06:21:42Z</published>
    <updated>2022-10-20T06:26:35Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>Mugs celebrating Perl 5.36 are now available at <a href="https://the-perl-store.creator-spring.com/listing/perl-5-36-drinkware?product=1565">The Perl Store</a> with all proceeds going to The Perl Foundation</p>

<p><img alt="p536mug.jpg" src="http://blogs.perl.org/users/dean/p536mug.jpg" width="400" height="400" class="mt-image-none" style="" /></p>]]>
        
    </content>
</entry>
  <entry>
  <title>Dancer2: Template Tiny</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-10-19T08:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-template-tiny"/>  <id>https://perlmaven.com/dancer2-template-tiny</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/containers-for-coverage/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">the Perlanet one</a> I wrote about a couple of weeks ago.</p>
<p>Several years ago I got into <a href="https://www.travis-ci.com/">Travis CI</a> and set up lots of <a href="https://github.com/davorg?tab=repositories">my GitHub repos</a> so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into <a href="https://coveralls.io/">Coveralls.io</a> so I got pretty graphs of how my test coverage was looking. I gave <a href="https://www.slideshare.net/davorg/github-travisci-and-perl">a talk about what I had done</a>.</p>
<p>But two things changed.</p>
<p>Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, <a href="https://github.com/features/actions">GitHub Actions</a> was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.</p>
<p>But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows – they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.</p>
<p>I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called <a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls">Devel::Cover::Report::Coveralls</a> which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.</p>
<p>So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.</p>
<p>Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.</p>
<p>At this point, you can probably guess where this is going. And you’d be right.</p>
<p>I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub – <a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls">davorg/perl-coveralls</a>.</p>
<p>A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container – and takes 29 seconds instead of 13 minutes. So that’s a win.</p>
<p>The relevant section of my <a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml">workflow file</a> is here:</p><pre class="urvanov-syntax-highlighter-plain-tag">coverage:
    runs-on: ubuntu-latest
    container: davorg/perl-coveralls:latest
    name: Test coverage
    steps:
      - uses: actions/checkout@v3
      - name: Install modules
        run: cpanm -n --installdeps .
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cover -test -report Coveralls</pre><p>And it’s producing nice graphs on Coveralls.io like the one above.</p>
<p>Let me know if you find it useful.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than the Perlanet one I wrote about a couple of weeks ago. Several years ago I got into Travis CI and set up lots of my GitHub repos so they automatically ran the tests each time I committed… <a class="more-link" href="https://perlhacks.com/2022/10/containers-for-coverage/">Continue reading <span class="screen-reader-text">Containers for Coverage</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2087</id>
    <published>2022-10-18T17:01:50Z</published>
    <updated>2022-10-18T17:01:50Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="coveralls.io"/>
    <category term="docker"/>
    <category term="test coverage"/>
    <category term="testing"/>
  </entry>
  <entry>
  <title>Board Updates October 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/octoberupdate2022"/>
  <id>tag:news.perlfoundation.org,2022-10-17:/post/octoberupdate2022</id>
  <published>2022-10-17T19:08:04</published>
  <updated>2022-10-17T19:08:04</updated>
  <summary>
  <![CDATA[
     Board Updates October 2022 Welcome Following nomination in July, 2022, The Perl Foundation is pleased to welcome Todd Rinaldo to the board. Todd has worked with the board for many years as a conference organizer, with the Grants Committee, and in other capacities. He is also a contributor to CPAN and Perl 5 Porters. During his board nomination interview, Todd expressed an interest in offering assistance in the Foundation's mission 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h1>Board Updates October 2022</h1>

<h2>Welcome</h2>

<p>Following <a href="https://news.perlfoundation.org/post/todd-rinaldo-nominated-for-board-position">nomination</a> in July, 2022, The Perl Foundation is pleased to welcome Todd Rinaldo to the board. Todd has worked with the board for many years as a conference organizer, with the Grants Committee, and in other capacities. He is also a contributor to CPAN and Perl 5 Porters.</p>

<p>During his board nomination interview, Todd expressed an interest in offering assistance in the Foundation's mission to help the community, stregthening communication between the steering councils and the board, and helping the board find ways they can support The Perl and Raku Conference going forward. </p>

<p>We are pleased to welcome Todd to the board. </p>

<h2>Farewell</h2>

<p>Nichola Evans has been a valuable member of the TPF team since 2020. During Nic's time with TPF she spearheaded the recent prospectus, organized all meetings and minutes, and served as the board's liason to the community. Recently Nic was helping run the Marketing and Sponsorship Committees, and she kept the community up to date with her articles on the TPF Blog. </p>

<p>Truely, Nic contributed more to the community than can be listed in one blog post. We will miss her dearly. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>CI for CPAN modules</title>
  <summary type="html"><![CDATA[<p>
After I read the editorial of <a href="https://perlweekly.com/archive/586.html">Perl Weekly issue 586</a> I though I should try to send
as many PR as I can to enable GitHub Actions on CPAN projects.
<p>
There is a whole series about <a href="/ci">why use CI and how to set up CI</a> and several <a href="/os">examples with videos</a>.
<p>
I started at <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>
<p>
]]></summary>
  <updated>2022-10-17T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/ci-for-cpan-modules"/>  <id>https://perlmaven.com/ci-for-cpan-modules</id>
  <content type="html"><![CDATA[<p>
After I read the editorial of <a href="https://perlweekly.com/archive/586.html">Perl Weekly issue 586</a> I though I should try to send
as many PR as I can to enable GitHub Actions on CPAN projects.
<p>
There is a whole series about <a href="/ci">why use CI and how to set up CI</a> and several <a href="/os">examples with videos</a>.
<p>
I started at <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#586 - Perl and Camel</title>
    <link rel="alternate" href="https://perlweekly.com/archive/586.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>This is my <strong>115th edition</strong> of the weekly newsletter. I know it is nothing as compared to the <strong>323 editions</strong> by the chief editor <strong>Gabor Szabo</strong>. I am very happy to have come this far, thanks to all the readers of the weekly newsletter for the support and encouragements. It took me <strong>4 years and 5 months</strong> to achieve this milestone.</p>
<p><strong>Please excuse me for the long-winded editorial this week to celebrate the occasion.</strong></p>
<p>As we all know <strong>Perl</strong> and <strong>Camel</strong> are  insperabale for years now. I still remember when I was first introduced to <strong>Perl</strong> in the late ninetees, we use to refer <strong>Perl</strong> books as <strong>Camel</strong> books. The association of <strong>Perl</strong> with the big publishing house like, <a href="https://www.oreilly.com">O'Reilly</a> is mostly responsible for the trend. Having said, there were few others too in the market but <strong>O'Reilly</strong> stood out among them. But we can't ignore the ground reality at the same time, for reasons known to most of all, the <strong>Perl</strong> books started disappearing from the book shelves in recent years. Talking about <strong>Perl</strong> books, we can't forget the service of <strong>brian d foy</strong>, <strong>Damian Conway</strong>, <strong>Curtis Poe</strong>, <strong>Dave Cross</strong>, <strong>Randall L. Schwartz</strong> and many more. Of all those, <strong>brian d foy</strong> still holding the ground as far as <strong>Perl</strong> is concerned in my humble opinion.</p>
<p><strong>Do you remember the announcement of Perl 7?</strong></p>
<p>I still remember, I watched the <a href="https://perlconference.us/tpc-2020-cloud">announcement</a> by <strong>Sawyer X</strong> and was very excited about it. But as you all know, it didn't turn out as planned. Let's not go there. Immediately after the announcement, <strong>brian d foy</strong> came up with the book, <a href="https://leanpub.com/preparing_for_perl7">Preparing for Perl 7</a>, published by <a href="https://perlschool.com/about">{Perl School}</a> run by <strong>Dave Cross</strong>. I was lucky to get the <strong>FREE</strong> copy of the book by <strong>brian d foy</strong>. I thoroughly enjoyed it as his many other <strong>Perl</strong> books. While collecting informations for this editorial, I noticed the book is now declared <strong>retired</strong>, unfortunately.</p>
<p>Fast forward, in the year <strong>2021</strong>, we got another book, <a href="https://leanpub.com/perl_new_features">Perl new features v5.10 to v5.34</a> by <strong>brian d foy</strong>. Once again, I was offered the book for <strong>FREE</strong> by the author. I would highly recommend this book to anyone who is new to <strong>Perl</strong> or even if you have used <strong>Perl</strong> for years. I found many new features that I wasn't aware of earlier. The best part is the explanation of each features with great examples. It makes it so easy to understand the topic. I read the book from start to end and came up with my own examples of some of the features mentioned in the book. Those who follow me on <a href="https://www.facebook.com/mohammad.s.anwar">Facebook</a>, <a href="https://twitter.com/cpan_author">Twitter</a> and <a href="https://www.linkedin.com/in/mohammadanwar">LinkedIn</a> knows that I ran daily feature series where I shared one feature with examples everyday. It is now documented for future reference in the form of <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a> as suggested by <strong>Dave Cross</strong>.</p>
<p><strong>How many of you have read the book "Learning Perl"?</strong></p>
<p>I have during my early days of learning <strong>Perl</strong>. It was the main source of information for me. Keeping the tradition on, <strong>brain d foy</strong> alongwith <strong>Randall L. Schwartz</strong> and <strong>Tom Phoenix</strong> came up with the <a href="https://www.amazon.com/gp/product/1492094951">8th Edition</a>. This time, I was offered not <strong>one (1)</strong> but <strong>four (4)</strong> copies of the physical book with free delivery by the generous <strong>brian d foy</strong>. I picked four members of <strong>Team PWC</strong>(<a href="https://theweeklychallenge.org">The Weekly Challenge</a>) and hand it over the book, <strong>Learning Perl 8th edition</strong>. A very big thank you to <strong>brian d foy</strong> from the entire <strong>Team PWC</strong> members.</p>
<p><strong>Do you think it stopped there?</strong></p>
<p>Well, the short answer is <strong>"No"</strong>. Recently <strong>brian d foy</strong> contacted me and offered me <strong>50 coupons</strong> of his new creation <a href="https://leanpub.com/learning_perl_exercises">Learning Perl Exercises</a>. Honestly speaking, I didn't know about the book earlier. I have been giving <strong>one coupon</strong> every week to one lucky member of <strong>Team PWC</strong>. So far, I have already given <strong>10 coupons</strong>. If you are a <strong>Perl</strong> fan or new to <strong>Perl</strong> then why don't you <a href="https://theweeklychallenge.org/blog/how-to-contribute">join us</a> and learn from each other something new every week. Trust me, you will enjoy the journey.</p>
<p><strong>How well do I know brian d foy?</strong></p>
<p>Honestly speaking I haven't met him yet but would love to one day. My first interaction with him was in the year <strong>2010</strong> when I published my first distribution, <a href="https://metacpan.org/pod/Test::Excel">Test::Excel</a>. During those days, one need to get the namespace registered with <strong>PAUSE admins</strong>. He is one of the <strong>PAUSE admins</strong> that I happen to interact with. I still remember during the email conversation he mentioned that he liked my distribution and one day he would use it. Ever since, I have had many email conversation with on different occasions. I proudly remember one such occasion when <strong>brian d foy</strong> offered me to do interview series for <a href="https://www.perl.com">perl.com</a>. I happily accepted his offer without even blinking once. I did three interviews namely with <a href="https://www.perl.com/article/the-perl-ambassador-gabor-szabo">Gabor Szabo</a>, <a href="https://www.perl.com/article/the-perl-ambassador-curtis-poe">Curtis Poe</a> and <a href="https://www.perl.com/article/the-perl-ambassador-damian-conway">Damian Conway</a>. Unfortunately after that I got distracted and busy with other personal projects.</p>
<p><strong>Have you tried GitHub Workflow yet?</strong></p>
<p>Two names i.e. <strong>Gabor Szabo</strong> and <strong>Dave Cross</strong>  immediately come to my mind when talking about <strong>GitHub Workflow</strong>. In fact, <strong>Gabor Szabo</strong> seems to be on a mission to help <strong>CPAN</strong> modules to have workflow configured. Recently I published a new release of <a href="https://metacpan.org/pod/Test::CSS">Test::CSS</a>, the very next morning I noticed <a href="https://perlmaven.com/install-developer-dependencies-first-test-css">blog post</a> by him. I would highly recommend you to take a look at his <a href="https://perlmaven.com/os">other similar works</a>. Talking about <strong>GitHub Workflow</strong>, my colleague at work and friend, <strong>Julien Fiegehenn</strong>, wrote a detailed and thorough <a href="https://simbabque.github.io/posts/github-workflow-guide-for-modules">guide</a> on the topic, you really don't want to skip it.</p>
<p><strong>How many of you have completed the challenge of Hacktoberfest 2022?</strong></p>
<p>One thing I noticed this year, the pull request has to be accepted and merged for it to qualify. Now even after the pull request is accepted and merged, you still have to wait for another seven days review period. This year, I was lucky to receive the distribution, <a href="https://metacpan.org/pod/HTML::Form">HTML::Form</a> as my assignment for <strong>October</strong> as member of <a href="https://pullrequest.club/hello">Pull Request Club</a>. To my surprise, I noticed <strong>HTML::Form</strong> is participating in <strong>Hacktoberfest 2022</strong>. As of today, I have submitted <strong>2 Pull Requests</strong>. That means, I am done as far as my monthly assignment for <strong>Pull Request Club</strong>. With regard to the <strong>Hacktoberfest 2022</strong>, both the pull requests have been accepted and merged, thanks to <strong>Olaf Alders</strong>. One of them is passed the review period and other is still waiting. Although I submitted <strong>2 more pull requests</strong> but unfortunately they are not participating in <strong>Hacktoberfest 2022</strong>, although both have been accepted and merged. To qualify for <strong>FREE</strong> specially designed T-shirt, I still have to find a distribution and submit <strong>2 more</strong> pull requests. Wish me luck.</p>
<p><strong>Have you nominated your Perl Hero?</strong></p>
<p>If not then you still have chance to nominate your <strong>Perl Hero</strong>. Quick and easy to nominate is just commenting on this <a href="https://news.perlfoundation.org/post/nominate-2022-white-camel">official announcement</a> and giving the name with reasons. Easy, right?</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/586.html</id>
    <published>2022-10-17T10:00:00Z</published>
    <updated>2022-10-17T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Zippy Fast Dubious OCR Process</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/10/16#pwc186" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given two lists of the same size. Create a subroutine sub zip() that 
merges the two lists.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use v5.36;
use strict;
use warnings;

sub zip($a, $b){
    return map { $a-&gt;[$_], $b-&gt;[$_] } 0 .. @$a - 1;
}

MAIN:{
    print join(", ", zip([qw/1 2 3/], [qw/a b c/])) . "\n";
    print join(", ", zip([qw/a b c/], [qw/1 2 3/])) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
1, a, 2, b, 3, c
a, 1, b, 2, c, 3
</code></pre>

<h3>Notes</h3>

<p>The solution here is basically that one line <code>map</code>. Since we know that the lists
are of the same size we can map over the array indices and then construct the
desired return list directly.</p>

<h2>Part 2</h2>

<p><em>You are given a string with possible unicode characters. Create a subroutine 
sub makeover($str) that replace the unicode characters with their ascii equivalent.
For this task, let us assume the string only contains letters.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use utf8;
use v5.36;
use strict;
use warnings;
##
# You are given a string with possible unicode characters. Create a subroutine 
# sub makeover($str) that replace the unicode characters with their ascii equivalent.
# For this task, let us assume the string only contains letters.
##
use Imager;
use File::Temp q/tempfile/;
use Image::OCR::Tesseract q/get_ocr/;

use constant TEXT_SIZE =&gt; 30;
use constant FONT =&gt; q#/usr/pkg/share/fonts/X11/TTF/Symbola.ttf#;

sub makeover($s){
    my $image = Imager-&gt;new(xsize =&gt; 100, ysize =&gt; 100);
    my $temp = File::Temp-&gt;new(SUFFIX =&gt; q/.tiff/);
    my $font = Imager::Font-&gt;new(file =&gt; FONT) or die "Cannot load " . FONT . " ", Imager-&gt;errstr;
    $font-&gt;align(string =&gt; $s,
                 size =&gt; TEXT_SIZE,
                 color =&gt; q/white/,
                 x =&gt; $image-&gt;getwidth/2,
                 y =&gt; $image-&gt;getheight/2,
                 halign =&gt; q/center/,
                 valign =&gt; q/center/,
                 image =&gt; $image
    );
    $image-&gt;write(file =&gt; $temp) or die "Cannot save $temp", $image-&gt;errstr;
    my $text = get_ocr($temp);
    return $text;
}


MAIN:{
    say makeover(q/ Ã Ê Í Ò Ù /);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
EIO



</code></pre>

<h3>Notes</h3>

<p>First I have to say upfront that this code doesn't work all that well for the problem
at hand! Rather than modify it to something that works better I thought I would
share it as is. It's intentionally ridiculous and while it would have been great
if it worked better I figure it's worth taking a look at anyway.</p>

<p>So, my idea was:</p>

<ul>
<li>take the input text and generate an image
</li>
<li>ocr the image
</li>
<li>the ocr process would ignore anything non-text (emojis and other 
symbols)
</li>
<li>the ocr process would possibly ignore the accent marks
</li>
</ul>

<p>I wasn't so sure about that last one. A good ocr should maintain the true 
letters, accents and all. Tesseract, the ocr engine used here, claims to support
Unicode and "more than 100 languages" so it should have reproduced the original
input text, except that it didn't. In fact, for a variety of font sizes and letter
combinations it never detected the accents. While I would be frustrated if I wanted
that feature to work well, I was happy to find that it did not!</p>

<p>Anyway, to put it mildly, it's clear that this implementation is fragile for the task at hand!
In other ways it's pretty solid though. Imager is a top notch image manipulation module
that does the job nicely here. Image::OCR::Tesseract is similarly a high quality
wrapper around the Tesseract ocr engine. Tesseract itself is widely accepted as being
world class. My lack of a great result here is mainly due to my intentional misuse
of these otherwise fine tools!</p>

<h2>References</h2>

<p><a href="https://metacpan.org/pod/Imager">Imager</a></p>

<p><a href="https://metacpan.org/pod/Image::OCR::Tesseract">Image::OCR::Tesseract</a></p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-186/">Challenge 186</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc186</id>
    <published>2022-10-16T22:38:00-04:00</published>
    <updated>2022-10-16T22:38:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #180</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-180/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 180 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would come from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-180/</id>
    <published>2022-10-17T00:00:00Z</published>
    <updated>2022-10-17T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 186</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-186/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-186/</id>
    <published>2022-10-17T00:00:00Z</published>
    <updated>2022-10-17T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5978493742362320026</id>
    <published>2022-10-15T21:59:00.000+02:00</published>
    <updated>2022-10-15T22:04:06.105+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxiv) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.304' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.304&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.303 was 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.55&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.54 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.004004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004004&lt;/strong&gt; on 2022-10-15&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.004003 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTML-Parser-3.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTML::Parser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTML parser class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.79&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 3.78 was 6 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.41&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 6.39 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.10&lt;/strong&gt; on 2022-10-09&lt;/li&gt;  &lt;li&gt;Votes: 98&lt;/li&gt;  &lt;li&gt;Previous version: 4.09 was 2 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.12&lt;/strong&gt; on 2022-10-08&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 4.12 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.881' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.881&lt;/strong&gt; on 2022-10-14&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 1.879 was 4 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.878' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.878&lt;/strong&gt; on 2022-10-10&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.877 was 4 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.28&lt;/strong&gt; on 2022-10-14&lt;/li&gt;  &lt;li&gt;Votes: 474&lt;/li&gt;  &lt;li&gt;Previous version: 9.27 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9655' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9655&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9654 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHLOMIF/Text-Table-1.135' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Table&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Organize Data in Tables &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.135&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.134 was 2 years, 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.16&lt;/strong&gt; on 2022-10-12&lt;/li&gt;  &lt;li&gt;Votes: 105&lt;/li&gt;  &lt;li&gt;Previous version: 5.13 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5978493742362320026/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxiv-13-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5978493742362320026"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5978493742362320026"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxiv-13-great-cpan-modules-released.html" title="(cdxiv) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2788198145570323080</id>
    <published>2022-10-15T21:57:00.004+02:00</published>
    <updated>2022-10-15T21:57:28.419+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxvii) metacpan weekly report - mb::JSON</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 52&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/mb::JSON"&gt;mb::JSON&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/10/15 19:56:27 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::CPANModules::PortedFrom::Ruby" target="_blank"&gt;Acme::CPANModules::PortedFrom::Ruby&lt;/a&gt; - Modules/applications that are ported from (or inspired by) Ruby libraries&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::wsgetmail" target="_blank"&gt;App::wsgetmail&lt;/a&gt; - Fetch mail from the cloud using webservices&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/cPanel::APIClient" target="_blank"&gt;cPanel::APIClient&lt;/a&gt; - cPanel APIs, Ã&amp;nbsp; la TIMTOWTDI!&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/EAV::XS" target="_blank"&gt;EAV::XS&lt;/a&gt; - Email Address Validation Library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Log::Parse" target="_blank"&gt;Mail::Log::Parse&lt;/a&gt; - Parse and return info in maillogs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Numerical" target="_blank"&gt;Math::Numerical&lt;/a&gt; - Algorithms for numerical functions (solver, root findings, etc.)&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=156)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/API::Plesk" target="_blank"&gt;API::Plesk&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::dateseq" target="_blank"&gt;App::dateseq&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::DBBrowser" target="_blank"&gt;App::DBBrowser&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::GhostWork" target="_blank"&gt;App::GhostWork&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::GUI::Harmonograph" target="_blank"&gt;App::GUI::Harmonograph&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BioPerl" target="_blank"&gt;BioPerl&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI::Driver::Redis" target="_blank"&gt;CHI::Driver::Redis&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Crontab" target="_blank"&gt;Config::Crontab&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/cPanel::PublicAPI" target="_blank"&gt;cPanel::PublicAPI&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/cPanel::TaskQueue" target="_blank"&gt;cPanel::TaskQueue&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=208)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum" target="_blank"&gt;enum&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Simple" target="_blank"&gt;Exporter::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Pipeline" target="_blank"&gt;IPC::Pipeline&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode" target="_blank"&gt;Jacode&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode4e" target="_blank"&gt;Jacode4e&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode4e::RoundTrip" target="_blank"&gt;Jacode4e::RoundTrip&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=112)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=158)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::UtilsBy" target="_blank"&gt;List::UtilsBy&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb::Encode" target="_blank"&gt;mb::Encode&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb::JSON" target="_blank"&gt;mb::JSON&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Open" target="_blank"&gt;Modern::Open&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=398)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlfaq" target="_blank"&gt;perlfaq&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlIO::gzip" target="_blank"&gt;PerlIO::gzip&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::ES6" target="_blank"&gt;Promise::ES6&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex::Group::Lookup::Nagios" target="_blank"&gt;Rex::Group::Lookup::Nagios&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=163)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Selenium::Remote::Driver" target="_blank"&gt;Selenium::Remote::Driver&lt;/a&gt; (+1=46)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::Equ" target="_blank"&gt;Syntax::Operator::Equ&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::In" target="_blank"&gt;Syntax::Operator::In&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=138)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Normalize" target="_blank"&gt;Unicode::Normalize&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::LongPath" target="_blank"&gt;Win32::LongPath&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2788198145570323080/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2788198145570323080"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2788198145570323080"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxvii-metacpan-weekly-report.html" title="(dxxvii) metacpan weekly report - mb::JSON"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Dancer2: Upload file</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-10-13T07:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-upload-file"/>  <id>https://perlmaven.com/dancer2-upload-file</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Mystery Buglet #2</title>
    <link rel="alternate" href="http://blogs.perl.org/users/buddy_burden/2022/10/mystery-buglet-2.html"/>
    <id>tag:blogs.perl.org,2022:/users/buddy_burden//1118.10916</id>
    <published>2022-10-09T06:57:43Z</published>
    <updated>2022-10-13T06:24:03Z</updated>
    <author>
        <name>Buddy Burden</name>
        
    </author>
    <category term="Code" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="bugs" label="bugs" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/buddy_burden/">
        <![CDATA[<div>
<p>Hey! I know, I know: long time, no blog.&nbsp; I would love to blame the pandemic, but the truth is, I just haven&rsquo;t been inspired with any sufficiently Perl-y topics lately.&nbsp; Until recently, when I ran into this.</p>

<p>Now, once upon a time, I wrote a <a href="http://blogs.perl.org/users/buddy_burden/2014/06/when-a-failure-is-not-a-failure.html">post</a> about a small buglet I had encountered.&nbsp; The post presented the problem, then asked you if you saw the problem, then explained what was going on.&nbsp; So let&rsquo;s do that again.&nbsp; First, the code:<br />
<pre><code class="prettyprint">sub generate_temp_file<br/>{<br/>    state $TMPFILES = [];<br/>    END { unlink @$TMPFILES }<br/>    my $tmpfile = `script-which-generates-tempfile`;<br/>    chomp $tmpfile;<br/>    push @$TMPFILES, $tmpfile;<br/>    return $tmpfile;<br/>}<br/></code></pre></p>

<p>As before, the actual code does a bit more, but I promise I&rsquo;ve omitted nothing that&rsquo;s relevant to the bug.&nbsp; Do you see it?&nbsp; If not, click to find out more.</p>
]]>
        <![CDATA[<div>
<p>Hey! I know, I know: long time, no blog.&nbsp; I would love to blame the pandemic, but the truth is, I just haven&rsquo;t been inspired with any sufficiently Perl-y topics lately.&nbsp; Until recently, when I ran into this.</p>

<p>Now, once upon a time, I wrote a <a href="http://blogs.perl.org/users/buddy_burden/2014/06/when-a-failure-is-not-a-failure.html">post</a> about a small buglet I had encountered.&nbsp; The post presented the problem, then asked you if you saw the problem, then explained what was going on.&nbsp; So let&rsquo;s do that again.&nbsp; First, the code:<br />
<pre><code class="prettyprint">sub generate_temp_file<br/>{<br/>    state $TMPFILES = [];<br/>    END { unlink @$TMPFILES }<br/>    my $tmpfile = `script-which-generates-tempfile`;<br/>    chomp $tmpfile;<br/>    push @$TMPFILES, $tmpfile;<br/>    return $tmpfile;<br/>}<br/></code></pre></p>

<p>As before, the actual code does a bit more, but I promise I&rsquo;ve omitted nothing that&rsquo;s relevant to the bug.&nbsp; Do you see it?&nbsp; If not, click to find out more.</p>
<br/>
<p>You might be able to spot the bug just from reading the code, but I can also offer you a <em>big</em> hint by telling you what the actual error was.&nbsp; First off, I should note that there <em>was</em> no error in my testing.&nbsp; Then I committed the code and pushed it out to the repo, where all my fellow developers propmptly downloaded it and started using it&nbsp;... and there was <em>still</em> no error.&nbsp; Then, one coworker (our sysadmin, as it happened) ran the script which used this code in a particular way, and reported this error: <code class="prettyprint">Can't use an undefined value as an ARRAY reference at ...</code> and the line number that contained <code class="prettyprint">unlink @$TMPFILES</code>.</p>

<p>To see what&rsquo;s going on here, it&rsquo;s worth taking a brief detour into what a <code class="prettyprint">state</code> variable is.&nbsp; If you&rsquo;re familiar with the C-based family of languages (e.g. C++, and I&rsquo;m pretty sure Java as well), it&rsquo;s what they would refer to as a <code class="prettyprint">static</code> variable.&nbsp; I don&rsquo;t know if I agree that <code class="prettyprint">state</code> was the best name for it, but it sure beats the hell out of <code class="prettyprint">static</code>.</p>

<p>So what&rsquo;s a <code class="prettyprint">state</code> variable?&nbsp; Well, it&rsquo;s a bit like a global variable&nbsp;... and also not.&nbsp; To explain that apparent contradiction, and also to address why <code class="prettyprint">state</code> variables are awesome while everyone knows that globals are bad, we need to pick apart that stereotype.&nbsp; <em>Are</em> all global variables bad?&nbsp; Well&nbsp;... depends on what you mean by &ldquo;global.&rdquo;  See, when we talk about a &ldquo;global variable,&rdquo; we&rsquo;re talking about a variable with global <em>scope</em>.&nbsp; And scope actually consists of two distinct parts: visibility, and lifetime.&nbsp; Most of the variables that we refer to as &ldquo;globals&rdquo; are those which have global visibility <em>and</em> global lifetime.&nbsp; And those are definitely bad.&nbsp; But they&rsquo;re bad because the global visibility part is bad.&nbsp; That&rsquo;s what causes all the trouble.&nbsp; But the global <em>lifetime</em> part&nbsp;... nothing wrong with that at all.&nbsp; And a <code class="prettyprint">state</code> variable is one which has a global lifetime, but only <em>block</em> visibility.<sup><small><a href="#note1">1</a></small></sup>&nbsp; And that&rsquo;s not bad at all.&nbsp; It&rsquo;s quite useful, in fact.</p>

<p>Now, if my tempfile were being generated by Perl, I would of course use <code class="prettyprint">File::Temp</code> (or something which in turn used it, such as <code class="prettyprint">Path::Tiny</code>), and that would handle the cleanup for me.&nbsp; But, since the file is being generated by some script, I need to arrange that cleanup myself.&nbsp; How do I do that? simple: by using an <code class="prettyprint">END</code> block, which will always get called when my program exits.<sup><small><a href="#note2">2</a></small></sup>&nbsp; Admittedly, my simplistic use of it assumed that <code class="prettyprint">unlink</code> is fine with receiving no arguments (e.g. in the case where the function hasn&rsquo;t actually been called yet, and thus <code class="prettyprint">@$TMPFILES</code> is empty).&nbsp; By the way, if you&rsquo;re wondering why I&rsquo;m using <code class="prettyprint">state $TMPFILES = []</code> and <code class="prettyprint">@$TMPFILES</code> instead of <code class="prettyprint">state @TMPFILES</code> and <code class="prettyprint">@TMPFILES</code>, it&rsquo;s because one of <code class="prettyprint">state</code>&rsquo;s quirks is, it will <em>only</em> work with scalar variables.</p>

<p>But, as it turns out, <code class="prettyprint">unlink</code> <em>is</em> fine with getting an empty list (I tested it).&nbsp; So that wasn&rsquo;t the problem.&nbsp; Still, the last two sentences of the previous paragraph, when combined, contain the answer to the mystery.&nbsp; If you haven&rsquo;t spotted it by now, you may want to take a moment to reread them carefully and see if I you see it before proceeding further.</p>
<br/><br/>
<p>Still stumped?</p>
<br/><br/>
<p>Very well, then.&nbsp; Read on.</p>
<br/><br/>
What <em>does</em> happen if the function is never called?&nbsp; Well, <code class="prettyprint">$TMPFILES</code> still exists: it&rsquo;s a (sorta kinda) global, so the <code class="prettyprint">END</code> block can access it perfectly fine even if the function is never executed.&nbsp; And that&rsquo;s important, because <code class="prettyprint">END</code> blocks are processed at compile time.&nbsp; In fact, that very sticking point is why I&rsquo;m using the <code class="prettyprint">state</code> variable in the first place.&nbsp; That is, why can&rsquo;t I just do it this way?
<pre><code class="prettyprint">sub generate_temp_file<br/>{<br/>    my $tmpfile = `script-which-generates-tempfile`;<br/>    chomp $tmpfile;<br/>    END { unlink $tmpfile }<br/>    push @$TMPFILES, $tmpfile;<br/>    return $tmpfile;<br/>}<br/></code></pre>

<p>It&rsquo;s because <code class="prettyprint">END</code> happens at compile-time, when <code class="prettyprint">$tmpfile</code> hasn&rsquo;t been set yet.&nbsp; Not to mention what happens if <code class="prettyprint">generate_temp_file</code> is called multiple times: the <code class="prettyprint">END</code> block only gets added to the chain of <code class="prettyprint">END</code> blocks for the program once, so it only gets called once: if there&rsquo;s a possibility of this function happening multiple times, I need to store my tempfiles in an array.&nbsp; None of those would be an issue if <code class="prettyprint">END</code> happened at run-time, of course.&nbsp; But that ain&rsquo;t the way it works.<sup><small><a href="#note3">3</a></small></sup></p>

<p>So I&rsquo;ve set it up to handle all that, by using a (semi-)global <code class="prettyprint">state</code> var, which will always exist, and can contain multiple things, and can get processed once by the <code class="prettyprint">END</code> block.&nbsp; Except that I had to use <code class="prettyprint">$TMPFILES = []</code> instead of <code class="prettyprint">@TMPFILES</code>, like I really wanted, and <em>that&rsquo;s</em> where it all fell apart.&nbsp; See, the variable certainly <em>exists</em> whether the function is executed or not&nbsp;... but it only gets <em>assigned</em> the first time it&rsquo;s called.&nbsp; So, before the function is called for the first time, <code class="prettyprint">$TMPFILES</code> is <em>not</em> <code class="prettyprint">[]</code>&nbsp;... it&rsquo;s <code class="prettyprint">undef</code>.&nbsp; And that&rsquo;s what triggered the error message, of course.&nbsp; If <code class="prettyprint">state</code> would let me declare an array instead of an arrayref, I wouldn&rsquo;t have had the problem, but, once again: that ain&rsquo;t the way it works.</p>

<p>So, in the end, once I finally realized the problem, the fix was trivial:<br />
<pre><code class="prettyprint">-    END { unlink @$TMPFILES }<br/>+    END { unlink @$TMPFILES if $TMPFILES }<br/></code></pre></p>

<p>And now it works whether the function is called (which it always was in my testing, and always was in <em>most</em> of my coworkers&rsquo; usages), or whether it&rsquo;s never called at all (which was the case when my sysadmin ran it).&nbsp; And it taught me a valuable lesson about the interaction of seemingly unrelated implementation details of the language.&nbsp; And now I&rsquo;ve shared it with you.</p>

<p>Hopefully it&rsquo;s been helpful.</p>

<p><br />
<br/><br/><br/><br/><div style="line-height: 80%;"><br />
__________</p>

<p><small><a name="note1">1</a> Assuming you declare it inside a block.&nbsp; I suppose a <code class="prettyprint">state</code> var outside any block would have file visibility, or package visibility, or somesuch.&nbsp; But that&rsquo;s a more esoteric usage that we don&rsquo;t really need to get into.</small></p>
<p><small><a name="note2">2</a> Well, not <em>always</em>&nbsp;... in fact, the (unflattering) comparison between Perl&rsquo;s <code class="prettyprint">END</code> and bash&rsquo;s <code class="prettyprint">trap ... EXIT</code> was one of the points I made in my post on <a href="http://blogs.perl.org/users/buddy_burden/2012/04/perl-vs-shell-scripts.html">Perl vs shell scripts</a> (see the &ldquo;Commands on Exit&rdquo; section).</small></p>
<p><small><a name="note3">3</a> Although, it occurs to me that, if I were using Perl&nbsp;5.36+, I could probably work around this by using <code class="prettyprint">defer</code> instead of <code class="prettyprint">END</code>.&nbsp; I think.</small></p>
</div>
</div>]]>
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 186:  Zip List and Unicode Makeover</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/10/perl-weekly-challenge-186-zip-list-and-unicode-makeover.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10921</id>
    <published>2022-10-12T02:50:20Z</published>
    <updated>2022-10-12T02:55:58Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 186 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-186/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on Oct. 16, 2022 at 23:59). This blog post offers some solutions to this challenge.  Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Zip List</h2>

<p><em>You are given two lists <code>@a</code> and <code>@b</code> of same size.</em></p>

<p><em>Create a subroutine <code>sub zip(@a, @b)</code> that merges the two lists as shown in the example below.</em></p>

<p><em>Example:</em></p>

<pre><code>Input:  @a = qw/1 2 3/; @b = qw/a b c/;
Output: zip(@a, @b) should return qw/1 a 2 b 3 c/;
        zip(@b, @a) should return qw/a 1 b 2 c 3/;
</code></pre>

<h3>Zip List in Raku</h3>

<p>Raku has a built-in <code>zip</code> routine, so we will name <code>zip-it</code> our subroutine to avoid any confusion. In addition, Raku has an infix <a href="https://docs.raku.org/language/operators#index-entry-Zip_operator">Z</a> operator which performs exactly what is requested in the task. So we will use this operator in the<code>zip-it</code> subroutine.</p>

<pre><code>sub zip-it (@a, @b) {
    return ~ (@a Z @b).flat;
}
my @tests = &lt;1 2 3&gt;, &lt;a b c&gt;;
say zip-it @tests[0], @tests[1];
say zip-it @tests[1], @tests[0];
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./zip-list.raku
1 a 2 b 3 c
a 1 b 2 c 3
</code></pre>

<h3>Zip List in Perl</h3>

<p>The program iterates over the indices of any of the two lists (which have the same size) and concatenates to the output the corresponding values of both arrays. </p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub zip  {
    my @c = @{$_[0]};
    my @d = @{$_[1]};
    my $out = "";
    for my $i (0..$#c) {
        $out = $out . $c[$i] . " " . $d[$i] . " " ;
    }
    return $out;
}
my @tests = ([&lt;1 2 3&gt;], [&lt;a b c&gt;]);
say zip $tests[0], $tests[1];
say zip $tests[1], $tests[0];
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./zip-list.pl
1 a 2 b 3 c
a 1 b 2 c 3
</code></pre>

<h2>Task 2: Unicode Makeover</h2>

<p><em>You are given a string with possible unicode characters.</em></p>

<p><em>Create a subroutine <code>sub makeover($str)</code> that replace the unicode characters with ascii equivalent. For this task, let us assume it only contains alphabets.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $str = 'ÃÊÍÒÙ';
Output: 'AEIOU'
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $str = 'âÊíÒÙ';
Output: 'aEiOU'
</code></pre>

<p>I&#8217;m not sure what is meant by &#8220;it only contains alphabets,&#8221; but the two examples provided only contain vowels in the right alphabetical order. In my implementations, I&#8217;ve used the two test cases provided above and added a third test case, just for testing a few more letters, without attempting to satisfy any particular order.</p>

<p>I don&#8217;t like very much problems dealing with Unicode because, while I know quite a few things about Unicode, UTF8, and so on, I usually don&#8217;t fully understand what is going on at a deeper level. As a result, I often end up trying various things until it works properly, and this is really not my vision of what a programmer should be doing.</p>

<h3>Unicode Makeover in Raku</h3>

<p>In Raku, we&#8217;ll use the built-in <a href="https://docs.raku.org/routine/samemark">samemark</a> routine, which does exactly what we need.</p>

<pre><code>sub makeover ($in) {
    return $in.samemark('a');
}
for 'ÃÊÍÒÙ', 'âÊíÒÙ', 'àçùòîéèûä' -&gt; $test {
    say "$test -&gt; \t", makeover($test);
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./unicode_makeover.raku
ÃÊÍÒÙ -&gt;        AEIOU
âÊíÒÙ -&gt;        aEiOU
àçùòîéèûä -&gt;    acuoieeua
</code></pre>

<h3>Unicode Makeover in Perl</h3>

<pre><code>use strict;
use warnings;
use feature 'say';
use utf8;
use Unicode::Normalize;
binmode(STDOUT, ":utf8");

sub makeover {
    return join '', map { /(.)/ } map { /(\X)/g } NFD shift;
}

for my $test ('ÃÊÍÒÙ', 'âÊíÒÙ', 'àçùòîéèûä' ) {
    say "$test -&gt; \t", makeover($test);
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./unicode_makeover.pl
ÃÊÍÒÙ -&gt;        AEIOU
âÊíÒÙ -&gt;        aEiOU
àçùòîéèûä -&gt;    acuoieeua
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on October 23, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Adding GitHub Actions to Math::Numerical</title>
  <summary type="html"><![CDATA[<p>
Starting at <a href="https://cpan-digger.perlmaven.com/">CPAN::Digger</a> I found the <a href="https://metacpan.org/dist/Math-Numerical">Math::Numerical</a> distribution
without any Continuous Integration configured.
<p>
]]></summary>
  <updated>2022-10-11T11:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/github-actions-for-math-numerical"/>  <id>https://perlmaven.com/github-actions-for-math-numerical</id>
  <content type="html"><![CDATA[<p>
Starting at <a href="https://cpan-digger.perlmaven.com/">CPAN::Digger</a> I found the <a href="https://metacpan.org/dist/Math-Numerical">Math::Numerical</a> distribution
without any Continuous Integration configured.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Not that PR, thanks</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/not-that-pr-thanks/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s October. And that means that <a href="https://hacktoberfest.com/">Hacktoberfest</a> has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt.</p>
<p>In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can be a bit of a pain in the arse. Some people go crazy for a free t-shirt and that means you’ll almost certainly get several pull requests that aren’t really of the quality you’d hope for.</p>
<p>I have a particular problem that probably isn’t very common. I’ve talked before about the “semi-static” sites I run on GitHub Pages. There’s some data in a GitHub Repo and every couple of hours the system wakes up and runs some code which generates a few HTML pages and commits those HTML pages into the repo’s “/docs” directory. And – hey presto! – there’s a new version of your web site.</p>
<p>A good example is <a href="https://perl.theplanetarium.org/">Planet Perl</a>. The data is a YAML file which mostly consists of a list of web feeds. Every couple of hours we run <a href="https://metacpan.org/dist/Perlanet/view/bin/perlanet">perlanet</a> to pull in those web feeds and build a new version of the web site containing the latest articles about Perl.</p>
<p>Can you see what the problem is?</p>
<p>The problem is that the most obvious file in the repo is the “index.html” which is the web site. So when people find that repo and want to make a small change to the web site they’ll change that “index.html” file. But that file is generated. Every few hours, any changes to that file are overwritten as a new version is created. You actually want to change “index.tt”. But that uses <a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod">Template Toolkit syntax</a>, so it’s easy enough to see why people with no Perl knowledge might want to avoid editing that.</p>
<p>The <a href="https://github.com/davorg/planetperl/blob/master/README.md">README file</a> for the project explains which files you might want to change in order to make different types of changes. But people don’t read that. Or, if they do read it, they ignore the bits that they don’t like.</p>
<p>So I get pull requests that I have to reject because they change the wrong files.</p>
<p>Last year I got enough of these problematic pull requests that I decided to automate a solution. And it’s <a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/reject-pr.yml">this pretty simple GitHub Workflow</a>. It runs whenever my repo receives a pull request and looks at the files that have been changed. If that list of files includes “docs/index.html” then the PR is automatically closed with a polite message explaining what they’ve done wrong.</p>
<p>This makes my life easier. It’s possible it might make your life easier too.</p>
<p> </p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Not that PR, thanks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s October. And that means that Hacktoberfest has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt. In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can… <a class="more-link" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Continue reading <span class="screen-reader-text">Not that PR, thanks</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Not that PR, thanks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2082</id>
    <published>2022-10-10T16:01:43Z</published>
    <updated>2022-10-10T16:01:43Z</updated>
    <category term="Miscellaneous"/>
    <category term="github"/>
    <category term="github actions"/>
    <category term="pull request"/>
    <category term="semi-static sites"/>
    <category term="workflow"/>
  </entry>
  <entry>
    <title>#585 - Handle your Pull-Requests, please!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/585.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I know you are busy with tons of stuff and I know that as an Open Source developer you are most likely just a volunteer, but so are the people who send you Pull-Requests. It is very unpleasant to do the work, even if it small, send the pull-request and then never hear from the author any more.</p>
<p>Looking at my GitHub profile, apparently I created 600 Pull-requests, 530 of them are closed but 70 are still open. Some of them are open since 2011, that is 11 years ago. Some are as small as changing http to https in a URL, accepting (or rejecting) them should not take more than a few second. Finding them might be harder as GitHub does not seem to have a button for that, but you can easily search for them as you can see in my post <a href="https://code-maven.com/github-pull-requests-waiting-for-me">Listing Pull-request waiting for a user</a>.</p>
<p>So I'd like to ask you to check if there are any <a href="https://code-maven.com/github-pull-requests-waiting-for-me">Pull-Requests waiting for you</a> and try to clean up the queue.</p>
<p>Hacktoberfest: If you receive a Pull-request during October, if you like it, accept it and consider marking it according to the <a href="https://hacktoberfest.com/participation/#maintainers">instructions for maintainers</a> so the PR will be accepted. (Hacktoberfest recognized 11 PRs I sent since registering, none of the repos are marked as participating. I am not sending the PRs for Hacktoberfest, but it would be encouraging to get the recognition.)</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/585.html</id>
    <published>2022-10-10T10:00:00Z</published>
    <updated>2022-10-10T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>How I use Yabsm to Manage my Btrfs Snapshots</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/how-i-use-yabsm-to-manage-my-btrfs-snapshots-19a3" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I am the author of <a href="https://metacpan.org/dist/App-Yabsm/view/bin/yabsm">Yabsm (yet another btrfs snapshot manager)</a>, which is <a href="https://metacpan.org/dist/App-Yabsm/source/bin/yabsm">written in Perl</a>, and I will explain how I use Yabsm to manage my Btrfs snapshots.</p>

<p>This article is meant to supplement the official documentation linked above, and assumes a basic understanding of Linux's <a href="https://en.wikipedia.org/wiki/Btrfs">Btrfs</a> filesystem.</p>

<p>Please note that Yabsm can be configured to suit many different use cases other than the one described here.</p>

<p><a id="orgfe91a36"/></p>

<h1>
  
  
  Snapshots vs Backups
</h1>

<p>Before we go on, let's clear up the difference between a snapshot and a backup.</p>

<p>A snapshot is a read-only nested <a href="https://btrfs.readthedocs.io/en/latest/Subvolumes.html">subvolume</a> created with a command such as <code>btrfs subvolume snapshot -r $SUBVOLUME $DEST</code>. <strong>SNAPSHOTS ARE NOT RELIABLE BACKUPS!</strong> If a subvolume is corrupted then all snapshots of that subvolume will also be corrupted.</p>

<p>A backup is an <a href="https://btrfs.wiki.kernel.org/index.php/Incremental_Backup">incremental backup</a> sent to some location via Btrfs's <a href="https://btrfs.readthedocs.io/en/latest/Send-receive.html">send/receive</a> commands. These backups will not be corrupted if the subvolume being backed up is corrupted.</p>

<p><a id="org449a345"/></p>

<h1>
  
  
  My Btrfs Filesystem
</h1>

<p>I like to have just one top-level Btrfs subvolume mounted at <code>/</code>. This allows me to snapshot my entire system (excluding nested subvolumes) by running <code>btrfs subvolume snapshot -r / $DEST</code>.</p>

<p><a id="org028bea9"/></p>

<h1>
  
  
  My Yabsm Config
</h1>

<p>My configuration is based on the philosophy that because snapshots are both valuable and cheap, it makes sense to take a lot of snapshots.</p>

<p>Here is my <code>/etc/yabsm.conf</code>:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>yabsm_dir=/.snapshots/yabsm

subvol root_subvol {
    mountpoint=/
}

snap root {
    subvol=root_subvol

    timeframes=5minute,hourly,daily
    5minute_keep=36
    hourly_keep=72
    daily_times=15:00,23:59
    daily_keep=62
}

ssh_backup slackmac {
    subvol=root_subvol
    ssh_dest=slackmac
    dir=/.snapshots/yabsm-slacktop

    timeframes=daily
    daily_times=23:59
    daily_keep=365
}

local_backup easystore {
    subvol=root_subvol
    dir=/mnt/easystore/backups/yabsm-slacktop

    timeframes=daily
    daily_times=23:59
    daily_keep=365
}
</code></pre>

</div>

<p><a id="orga0d51da"/></p>

<h3>
  
  
  Yabsm Dir
</h3>

<p>I use the traditional <code>/.snapshots/yabsm</code> directory as my <code>yabsm_dir</code>, which is the location that my snapshots will reside. Yabsm will also use this directory for storing data necessary for performing SSH and local backups.</p>

<p><a id="org40ab1c1"/></p>

<h3>
  
  
  Subvol
</h3>

<p>As I mentioned earlier, I only have one top-level Btrfs subvolume, so I only need to define one <code>subvol</code> in my Yabsm config, which I name <code>root_subvol</code>.</p>

<p><a id="org77c9f84"/></p>

<h3>
  
  
  Snap
</h3>

<p>I define one <a href="https://metacpan.org/dist/App-Yabsm/view/bin/yabsm#Snaps">snap</a> named <em>root</em> that tells Yabsm I want to take snapshots of <code>root_subvol</code> in the <em>5minute</em>, <em>hourly</em>, and <em>daily</em> <a href="https://metacpan.org/dist/App-Yabsm/view/bin/yabsm#Timeframes">timeframe categories</a>.</p>

<p>In the <em>5minute</em> timeframe category I keep 36 snapshots. This lets me go to any state of my machine in the last 3 hours in 5 minute increments. I use the <em>5minute</em> category because it gives me a valuable safety net. How many times have you broken your code that was working 20 minutes ago? If you take <em>5minute</em> snapshots then you can easily go back to the state of that code 20 minutes ago.</p>

<p>In the <em>hourly</em> timeframe I keep 72 snapshots, which allows me to go back 3 days in hourly increments. How many times have you broken code that was working 2 days ago? If you take <em>hourly</em> snapshots (and keep enough of them), you can go back through the state of your machine from 2 days ago, in 1 hour increments.</p>

<p>In the <em>daily</em> timeframe category I keep 62 snapshots taken at midnight (23:59) and midafternoon (15:00). This gives me two snapshots per day in the last month.</p>

<p>Please note that there is also a <code>weekly</code> and <code>monthly</code> timeframe category.</p>

<p><a id="org41e4eb4"/></p>

<h3>
  
  
  SSH Backup
</h3>

<p>I define one <a href="https://metacpan.org/dist/App-Yabsm/view/bin/yabsm#SSH-Backups">ssh_backup</a> named <em>slackmac</em> that backs up my system to my old MacBook running Slackware.</p>

<p>The <em>ssh_dest</em> value is set to <em>slackmac</em>, which is a host defined in the <em>yabsm</em> user's <code>$HOME/.ssh/config</code> file. (Yabsm runs as a daemon process, using the special username <code>yabsm</code>.)</p>

<p>The <em>dir</em> value is set to the directory on <em>slackmac</em> where the backups will be located.</p>

<p>I perform this <em>ssh_backup</em> only in the <em>daily</em> timeframe category, backing up every night at midnight. I keep 365 of these backups so I can go back an entire year.</p>

<p><a id="orgc5909cb"/></p>

<h3>
  
  
  Local Backup
</h3>

<p>I define one <a href="https://metacpan.org/dist/App-Yabsm/view/bin/yabsm#Local-Backups">local_backup</a> named <code>easystore</code> that backs up my system to my EasyStore external hard drive.</p>

<p>The hard drive is mounted at <code>/mnt/easystore</code>, and I keep my backups in the <code>/backups/yabsm-slacktop</code> directory on the hard drive.</p>

<p>Just like my <code>slackmac</code> <em>ssh_backup</em>, I perform my <em>local_backup</em> only in the <code>daily</code> timeframe category, every night at midnight.</p>

<p><a id="orgb9f813e"/></p>

<h1>
  
  
  Finding Snapshots
</h1>

<p>Yabsm provides the <a href="https://metacpan.org/dist/App-Yabsm/view/bin/yabsm#Finding-Snapshots">find</a> command that I use to jump around to different snapshots and backups. The <em>find</em> command takes two arguments, the first is the name of any of your <em>snaps</em>, <em>ssh_backups</em>, or <em>local_backups</em>. The second argument is a query. The different kinds of queries are all documented in the link above.</p>

<p>Instead of repeating the documentation, let's break down a practical example of the <em>find</em> command's usage.</p>

<p>How many times have you broken code that worked 30 minutes ago? Because I take <em>5minute</em> snapshots I can easily get back the state of the code 30 minutes ago.</p>

<p>An example:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ diff "$(yabsm find root back-30-mins)/$HOME/projects/foo/script.sh" $HOME/projects/foo/foo.sh
</code></pre>

</div>

<p>This command will show the <code>diff</code> output of the <code>$HOME/projects/foo/foo.sh</code> file with this same file that was snapshotted 30 minutes ago. We can use this output to help figure out what we messed up.</p>

<p>The command <code>yabsm find root back-30-mins</code> will output the path to a snapshot for the <em>snap</em> named <em>root</em> that was taken 30 minutes ago. In the example we use our shell's <a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">parameter expansion</a> feature to create a string that appends the path to <code>foo.sh</code> to the output of the <code>yabsm find</code> command. This is a powerful pattern!</p>

<p>The find command can do more than find a snapshot taken N units ago, it can also:</p>

<ul>
<li>  Find the newest or oldest snapshot/backup.</li>
<li>  Find a snapshot/backup taken on a specific day and time.</li>
<li>  Find all the snapshots/backups taken before or after a certain time.</li>
<li>  Find all the snapshots/backups taken between two times.</li>
<li>  Find all snapshots/backups.</li>
</ul>

<p>The output of <code>yabsm find --help</code> shows some examples:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>usage: yabsm &lt;find|f&gt; [--help] [&lt;SNAP|SSH_BACKUP|LOCAL_BACKUP&gt; &lt;QUERY&gt;]

see the section "Finding Snapshots" in 'man yabsm' for a detailed explanation on
how to find snapshots and backups.

examples:
    yabsm find home_snap back-10-hours
    yabsm f root_ssh_backup newest
    yabsm f home_local_backup oldest
    yabsm f home_snap 'between b-10-mins 15:45'
    yabsm f root_snap 'after back-2-days'
    yabsm f root_local_backup 'before b-14-d'
</code></pre>

</div>

<p><a id="orgdac6334"/></p>

<h1>
  
  
  Synopsis
</h1>

<p>Yabsm is a powerful tool for managing your Btrfs snapshots. If you are interested in using Yabsm, then I recommend you consult the <a href="https://metacpan.org/release/NHUBBARD/App-Yabsm-3.12/view/bin/yabsm">official documentation</a>.</p>

</div>
    </content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/how-i-use-yabsm-to-manage-my-btrfs-snapshots-19a3</id>
    <published>2022-10-06T23:02:57Z</published>
    <updated>2022-10-06T23:02:57Z</updated>
    <category term="btrfs"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Building a Perlanet Container</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/building-a-perlanet-container/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain <a href="https://metacpan.org/pod/perlanet">perlanet</a> (a Perl program for aggregating web feeds into a new feed – and building a web site based on that new feed) and I use it to build <a href="https://theplanetarium.org/">a few sites on topics I’m interested in</a>.</p>
<p>Last year, I worked out a way to use GitHub Actions to <a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g">rebuild these sites automatically</a> every few hours – thereby enabling me to host the sites on GitHub Pages (I still think it’s a useful technique, but I sometimes worry slightly about the large number of commits those repos have – someone at GitHub must surely notice one day!)</p>
<p>Yesterday, I was doing some light maintenance on one of those sites when I realised that each rebuild of these sites was taking a significant time (by which I mean four or five minutes) and started wondering if there was a way to speed them up and use less of GitHub’s resources. The problem is that Perlanet is a pretty hefty module and each rebuild was installing that module (and, therefore, dozens of other modules) on a pristine Ubuntu container.</p>
<p>When you say it like that, the solution is obvious.</p>
<p>You don’t need to run your GitHub Actions on the standard containers that GitHub supplies. You can run them on any container that’s available from any public container hosting service. So the solution was to build a Perlanet container and run the jobs using that instead. So that’s how I spent an hour or so yesterday.</p>
<p>Here’s the Dockerfile I ended up with:</p><pre class="urvanov-syntax-highlighter-plain-tag">FROM perl:latest

RUN apt-get update &amp;&amp; \
    apt-get -y upgrade &amp;&amp; \ 
    apt-get install -y build-essential &amp;&amp; \
    apt-get install -y cpanminus libtidy-dev libxml++2.6-dev libhtml-tidy-perl &amp;&amp; \
    cpanm --notest Test::Exception &amp;&amp; \
    cpanm --notest Perlanet &amp;&amp; \
    cpanm --notest LWP::Protocol::https</pre><p>It’s (obviously) <a href="https://github.com/davorg/perl-perlanet-docker">available on GitHub</a> in case anyone wants to improve on my rather ropey knowledge of Docker.</p>
<p>I explicitly install Test::Exception because HTML::Tidy (one of Perlanet’s pre-requisites) needs it and I can’t work out why the standard installation procedure isn’t installing it. And while, LWP::Protocol::https is, strictly speaking, not required by Perlanet, you wouldn’t get very far on the modern web if you only accessed web feeds that are available over HTTP.</p>
<p>A little bit of Docker Hub set-up and the container is <a href="https://hub.docker.com/r/davorg/perl-perlanet">available for everyone to use</a> (and rebuilt automatically whenever I commit to the repo).</p>
<p>It was then just a case of changing my GitHub Actions to use my container. Here’s an example of <a href="https://github.com/davorg/planetdavorg/commit/5b65ce407e89dd16e74ad4b417b104c43dca96ef">one of the commits</a> that did that.</p>
<p>I realise I’m pretty late to the party here, but I think this is a useful pattern. If you have a Perl library (or, indeed, any other software) that exists to provide a service to users then it’s a great idea to provide a containerised version of that software.</p>
<p>And I’m happy to report that my site rebuilds have gone from 4-5 minutes to about 45 seconds.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Building a Perlanet Container</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain perlanet (a Perl program for aggregating web feeds into a new feed – and building a web site based on that new feed) and I use it to build a few sites on topics I’m interested in.… <a class="more-link" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Continue reading <span class="screen-reader-text">Building a Perlanet Container</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Building a Perlanet Container</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2076</id>
    <published>2022-10-06T09:43:46Z</published>
    <updated>2022-10-06T09:43:46Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="docker"/>
    <category term="packaging"/>
    <category term="perlanet"/>
    <category term="semi-static"/>
  </entry>
  <entry>
    <title>Feature release 1.32 of Date::Holidays Perl distribution</title>
    <link rel="alternate" href="https://dev.to/jonasbn/feature-release-of-dateholidays-perl-distribution-402h" type="text/html"/>
    <content type="html">&lt;p&gt;Due to a contribution from Wesley Schwengle (waterkip) I am happy to announce release 1.32 of the &lt;a href="https://metacpan.org/pod/Date::Holidays"&gt;Date::Holidays&lt;/a&gt; Perl distribution.&lt;/p&gt;

&lt;p&gt;The release introduces support for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Date::Holidays::BQ"&gt;Date::Holidays::BQ&lt;/a&gt;, a distribution handling holidays for &lt;a href="https://en.wikipedia.org/wiki/Bonaire"&gt;Bonaire&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition the adapters for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Date::Holidays::NL"&gt;Date::Holidays::NL&lt;/a&gt; (Netherlands), Date::Holidays::Adapter::NL&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Date::Holidays::AW"&gt;Date::Holidays::AW&lt;/a&gt; (Aruba), Date::Holidays::Adapter::AW&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have had their:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is_holiday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_holiday_dt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods extended with support for additional parameters so the user can specify, the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;gov&lt;/code&gt; for handling special dates influencing government interaction&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lang&lt;/code&gt; so language for holidays names can be specified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see the specific documentation for the 3 distributions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Date::Holidays::AW"&gt;Date::Holidays::AW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Date::Holidays::BQ"&gt;Date::Holidays::BQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Date::Holidays::NL"&gt;Date::Holidays::NL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am happy that waterkip created the PR to have Date::Holidays support the use for the 3 and it outlines one of the features that would be nice to have implemented, namely support for localized holiday names (&lt;a href="https://github.com/jonasbn/perl-date-holidays/issues/12"&gt;#12&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here is a short demo of inquiring whether 2022-12-25 is a holiday in the 3 respective calendars.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Data::&lt;/span&gt;&lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Date::&lt;/span&gt;&lt;span class="nv"&gt;Holidays&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$holidays_hashref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Date::&lt;/span&gt;&lt;span class="nv"&gt;Holidays&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;is_holiday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;year&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;month&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;day&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;nl&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bq&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aw&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;STDERR&lt;/span&gt; &lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$holidays_hashref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$VAR1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aw&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pasco di Nacemento&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
          &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bq&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pasco di Nacemento&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
          &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nl&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kerst&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change log for Date::Holidays.&lt;/p&gt;

&lt;h2&gt;
  
  
  1.32 2022-10-03 Feature release, update not required
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Introduction of Date::Holidays::Adapter::BQ for adapting Date::Holidays::BQ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for extra parameters for &lt;code&gt;is_holiday&lt;/code&gt; and &lt;code&gt;is_holiday_dt&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Date::Holidays::NL via Date::Holidays::Adapter::NL&lt;/li&gt;
&lt;li&gt;Date::Holidays::AW via Date::Holidays::Adapter::AW&lt;/li&gt;
&lt;li&gt;Date::Holidays::BQ via Date::Holidays::Adapter::BQ&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All via PR #70 (&lt;a href="https://github.com/jonasbn/perl-date-holidays/pull/70"&gt;https://github.com/jonasbn/perl-date-holidays/pull/70&lt;/a&gt;) by Wesley Schwengle (&lt;a class="mentioned-user" href="https://dev.to/waterkip"&gt;@waterkip&lt;/a&gt;) author of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Date::Holidays::NL&lt;/li&gt;
&lt;li&gt;Date::Holidays::AW&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Date::Holidays::BQ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fixed and clean up to Dist::Zilla configuration by &lt;a class="mentioned-user" href="https://dev.to/jonasbn"&gt;@jonasbn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/feature-release-of-dateholidays-perl-distribution-402h</id>
    <published>2022-10-04T18:09:19Z</published>
    <updated>2022-10-04T18:09:19Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="cpan"/>
    <category term="opensource"/>
  </entry>
  <entry>
  <title>Nominate heroes for the 2022 White Camel Awards</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/nominate-2022-white-camel"/>
  <id>tag:news.perlfoundation.org,2022-10-03:/post/nominate-2022-white-camel</id>
  <published>2022-10-03T23:00:00</published>
  <updated>2022-10-03T23:00:00</updated>
  <summary>
  <![CDATA[
     We're looking for nominations for the 2022 White Camel Awards that recognize significant non-technical achievement in the Perl community. Each year we recognize work in the broad categories of community, advocacy, and user groups. The Board will consider all nominations and will solicit feedback from the Advisory Board and the Perl Steering Council. To nominate someone, you can respond here with a name and your reasoning. As our community has 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Awards" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We're looking for nominations for the 2022 White Camel Awards that recognize significant non-technical achievement in the Perl community. Each year we recognize work in the broad categories of community, advocacy, and user groups. The Board will consider all nominations and will solicit feedback from the Advisory Board and the Perl Steering Council.  </p>

<p>To nominate someone, you can respond here with a name and your reasoning. As our community has become more diverse, we request that the reasoning is written so that it’s understandable for those who do not know the nominee directly.</p>

<p>Previously, the awards were organized by brian d foy with The Perl Foundation. We appreciate brian’s leadership in the past years. The past awards recipients and their achievements are at https://www.perl.org/advocacy/white_camel/</p>

<p>Raku language awards will be arranged separately.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#584 - Hacktoberfest &amp; Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/584.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p><strong>Happy Hacktoberfest 2022 everyone !!!</strong></p>
<p>I am sure, most of you, already started hacking open source code. If not then you haven't missed the train yet. You still have plenty of time to submit at least <strong>4 Pull Requests</strong> to qualified repositories in <strong>GitHub</strong> or <strong>GitLab</strong>. If you are new to <strong>Hacktoberfest</strong> then I suggest you please take a look at <a href="https://hacktoberfest.com/participation">this page</a>.</p>
<p>The rule of the game has changed since I first participated in the year <strong>2015</strong>. I have received the specially designed <strong>T-shirt</strong> every year after completing the challenge ever since. As far as <strong>Perl</strong> is concerned, there are plenty of choices we have. However you have to make sure the open source project is taking part in the <strong>Hacktoberfest</strong> event. As mentioned in the official note, you have to be quick as only the first <strong>40,000</strong> participants who complete the challenge are eligible to receive the <strong>FREE T-shirt</strong>.</p>
<p>Almost all my opensource contributions are hosted on <a href="https://github.com/manwar">GitHub</a>, you are FREE to pick any from <strong>GitLab</strong> too. If you are like me, then you can pick and choose the participating repository from the <a href="https://github.com/topics/hacktoberfest?l=perl">list here</a>. Having said, if you are still not sure then I would recommend two fun open source projects, <a href="https://pullrequest.club/hello">Pull Request Club</a> run by <strong>Kivanc Yizan</strong> and <a href="https://theweeklychallenge.org">The Weekly Challenge</a>.</p>
<p>Do you miss <strong>London Perl Workshop</strong>?</p>
<p>There has been discussion started few days ago among the team members behind the <strong>LPW</strong>. We have an official <a href="http://blogs.perl.org/users/lpw/2022/09/london-perl-workshop-status-update-2023.html">announcement</a> requesting your opinions about the proposed <strong>LPW 2023</strong>. I sincerely request you all who participated in the past and would like to attend the event next year. Please do share with your friends too. I have already seen emails with suggestions, being one of the organiser. Thank you for your inputs, much appreciated.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/584.html</id>
    <published>2022-10-03T10:00:00Z</published>
    <updated>2022-10-03T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Sep 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/10/01/list-of-new-cpan-distributions-sep-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Dead">Acme-CPANModules-Dead</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of dead (no-longer-updated, no-longer-buildable, no-longer-working) modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-DOBBY-Utils">Acme-DOBBY-Utils</a></td>
<td><a href="https://metacpan.org/author/DOBBY">DOBBY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>The great new Acme::DOBBY::Utils!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-LCS-XS">Algorithm-LCS-XS</a></td>
<td><a href="https://metacpan.org/author/JOESUF">JOESUF</a></td>
<td>1.04</td>
<td>v2.0.2</td>
<td>Fast (XS) implementation of the                  Longest Common Subsequence (LCS) Algorithm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Download-GitLab">Alien-Build-Plugin-Download-GitLab</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Alien::Build plugin to download from GitLab</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Libtensorflow">Alien-Libtensorflow</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Alien for Libtensorflow machine learning library C API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-bc-GNU">Alien-bc-GNU</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Find or download and install GNU bc</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-ed-GNU">Alien-ed-GNU</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Find or download and install GNU ed.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alt-Lexical-Var-ButSupportModernPerl">Alt-Lexical-Var-ButSupportModernPerl</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>alternative distribution of Lexical::Var, with support for more modern versions of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Angle2Zodiac">App-Angle2Zodiac</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Base class and script for angle2zodiac conversion.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GUI-Harmonograph">App-GUI-Harmonograph</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.4_0</td>
<td>0.43</td>
<td>sculpting beautiful circular drawings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-type">App-Greple-type</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>file type filter module for greple</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-update">App-Greple-update</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Greple module to update files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ListUtils">App-ListUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Command-line utilities related to lists in files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Schema-Data">App-Schema-Data</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Script for Schema data manipulation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-tarweb">App-tarweb</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Open an archive file in your web browser!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CPAN-Smoker-Utils">CPAN-Smoker-Utils</a></td>
<td><a href="https://metacpan.org/author/ARFREITAS">ARFREITAS</a></td>
<td>v1.0.0</td>
<td>v1.0.1</td>
<td>Set of CLI's to manage a Perl CPAN smoker machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Class-Plain">Class-Plain</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.04</td>
<td>a class syntax for the hash-based Perl OO.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-HTML-Button">Data-HTML-Button</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Data object for HTML button element.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-HTML-Form">Data-HTML-Form</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Data objects for HTML form.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Record-Serialize-Encode-csv">Data-Record-Serialize-Encode-csv</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>encode a record as csv</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Trace">Data-Trace</a></td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Trace when a data structure gets updated.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Efl">Efl</a></td>
<td><a href="https://metacpan.org/author/PERLMAX">PERLMAX</a></td>
<td>0.68</td>
<td>0.68</td>
<td>Perl bindings for the Enlightenment Foundation Libraries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GHCN">GHCN</a></td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>v0.22.257</td>
<td>v0.22.258</td>
<td>collect station objects and weather data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-EX-RPN">Getopt-EX-RPN</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>RPN calculation module for Getopt::EX command option</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hash-Util-Regexp">Hash-Util-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Hash utility routines related to regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-DB-Role-DBIx-Class">Mojo-DB-Role-DBIx-Class</a></td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>0.001</td>
<td>0.002</td>
<td>provides a convenience role creating a DBIx::Class for your Mojo database</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-DOM-Role-Style">Mojo-DOM-Role-Style</a></td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Adds a style method to Mojo::DOM</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MojoX-Log-Rotate">MojoX-Log-Rotate</a></td>
<td><a href="https://metacpan.org/author/XLAT">XLAT</a></td>
<td>1.222630</td>
<td>1.222670</td>
<td>Makes mojolicious log file rotation easy</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Logrotate">Mojolicious-Plugin-Logrotate</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Logrotate Mojolicious Application log</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Role-DBIConnection">MooX-Role-DBIConnection</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.02</td>
<td>0.04</td>
<td>handy mixin for objects with a DB connection</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooseX-ShortHas">MooseX-ShortHas</a></td>
<td><a href="https://metacpan.org/author/MITHALDU">MITHALDU</a></td>
<td>1.222490</td>
<td>1.222491</td>
<td>shortcuts for common Moose has attribute configurations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Muuse">Muuse</a></td>
<td><a href="https://metacpan.org/author/MITHALDU">MITHALDU</a></td>
<td>1.222490</td>
<td>1.222490</td>
<td>Moose but with less typing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDK">PDK</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>personal perl devkits</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parallel-Manager">Parallel-Manager</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>fork threads to run some callback together</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl5-CoreSmokeDB-Schema">Perl5-CoreSmokeDB-Schema</a></td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>1.07</td>
<td>1.07</td>
<td>DBIC::Schema for the smoke reports database</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-Libarchive">Plack-App-Libarchive</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Serve an archive via libarchive as a PSGI web app</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Auth-OAuth2">Plack-Middleware-Auth-OAuth2</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plack OAuth2 middleware.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-EmulateOPTIONS">Plack-Middleware-EmulateOPTIONS</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.2.1</td>
<td>handle OPTIONS requests as HEAD</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-L10N-Model">Pod-L10N-Model</a></td>
<td><a href="https://metacpan.org/author/ARGRATH">ARGRATH</a></td>
<td>1.06</td>
<td>1.06</td>
<td>Model for Pod::L10N</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Protocol-Dqlite">Protocol-Dqlite</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.02</td>
<td>Dqlite in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RF-Antenna-Planet-MSI-Format">RF-Antenna-Planet-MSI-Format</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.02</td>
<td>RF Antenna Pattern File Reader and Writer in Planet MSI Format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RF-Functions">RF-Functions</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Perl Exporter for Radio Frequency (RF) Functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Sys">SPVM-Sys</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.07</td>
<td>System Calls such as File IO, User, Process, Socket,</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQL-SimpleOps">SQL-SimpleOps</a></td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>v2022.212.1</td>
<td>v2022.266.1</td>
<td>SQL Simple Operations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Schema-Data">Schema-Data</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Abstract class for classes for database data.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Stancer">Stancer</a></td>
<td><a href="https://metacpan.org/author/JDASILVA">JDASILVA</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>Stancer Perl library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Subs-Trace">Subs-Trace</a></td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Trace all calls in a package.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-DGIP">TableDataBundle-Business-ID-DGIP</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220831.0.0</td>
<td>20220831.0.0</td>
<td>Collection of TableData:: modules related to the Directorate General of Intellectual Property</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Form">Tags-HTML-Form</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Tags helper for form.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Pager">Tags-HTML-Pager</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Tags helper for pager.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terminal-Identify">Terminal-Identify</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Module with methods for the control of the terminal window</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Circle">Test-Circle</a></td>
<td><a href="https://metacpan.org/author/CHYLLI">CHYLLI</a></td>
<td>0.001</td>
<td>0.021</td>
<td>…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Circle2">Test-Circle2</a></td>
<td><a href="https://metacpan.org/author/CHYLLI">CHYLLI</a></td>
<td>0.006</td>
<td>0.009</td>
<td>…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Release">Test-Release</a></td>
<td><a href="https://metacpan.org/author/CHYLLI">CHYLLI</a></td>
<td>0.001</td>
<td>0.001</td>
<td>…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Release4">Test-Release4</a></td>
<td><a href="https://metacpan.org/author/CHYLLI">CHYLLI</a></td>
<td>0.001</td>
<td>0.002</td>
<td>…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test2-Tools-MemoryCycle">Test2-Tools-MemoryCycle</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Check for memory leaks and circular memory references</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-HyperScript">Text-HyperScript</a></td>
<td><a href="https://metacpan.org/author/NYARLA">NYARLA</a></td>
<td>0.04</td>
<td>0.05</td>
<td>The HyperScript like library for Perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Time-Duration-Concise-Localiz">Time-Duration-Concise-Localiz</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2.62</td>
<td>2.62</td>
<td>localize concise time duration string representation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-FromSah">Type-FromSah</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.005</td>
<td>create an efficient Type::Tiny type constraint from a Data::Sah schema</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-Sah-Firefox">Types-Sah-Firefox</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Various Sah schemas related to Firefox</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Unidexer">Unidexer</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-GHCN-Fetch">Weather-GHCN-Fetch</a></td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>v0.0.001</td>
<td>v0.0.003</td>
<td>Fetch station and weather data from the NOAA GHCN repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-GHCN">Weather-GHCN</a></td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>v0.0.001</td>
<td>v0.0.001</td>
<td>collect station objects and weather data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-ADSBExchange">WebService-ADSBExchange</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>0.001</td>
<td>1.222600</td>
<td>Interface with the ADSBExchange API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Win32-Elevate">Win32-Elevate</a></td>
<td><a href="https://metacpan.org/author/SUBJUT">SUBJUT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl module for gaining higher access privilege</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-FromFile-Line">WordList-FromFile-Line</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Wordlist from lines of file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-FromFile-Word">WordList-FromFile-Word</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Wordlist from words in file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sealed">sealed</a></td>
<td><a href="https://metacpan.org/author/JOESUF">JOESUF</a></td>
<td>v4.1.1</td>
<td>v4.1.8</td>
<td>Run Django Templates in Perl</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>34</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/CHYLLI">CHYLLI</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MITHALDU">MITHALDU</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JOESUF">JOESUF</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/ARGRATH">ARGRATH</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/PERLMAX">PERLMAX</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/DOBBY">DOBBY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/XLAT">XLAT</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/NYARLA">NYARLA</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ARFREITAS">ARFREITAS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/SUBJUT">SUBJUT</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/JDASILVA">JDASILVA</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-Dead PERLANCAR 0.001 0.001 List of dead (no-longer-updated, no-longer-buildable, no-longer-working) modules Acme-DOBBY-Utils DOBBY 0.01 0.01 The great new Acme::DOBBY::Utils! Algorithm-LCS-XS JOESUF 1.04 v2.0.2 Fast (XS) implementation of the Longest Common Subsequence (LCS) Algorithm Alien-Build-Plugin-Download-GitLab PLICEASE 0.01 0.01 Alien::Build plugin to download from GitLab Alien-Libtensorflow ZMUGHAL 0.001 0.001 Alien for Libtensorflow … <a href="https://perlancar.wordpress.com/2022/10/01/list-of-new-cpan-distributions-sep-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Sep 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1998</id>
    <published>2022-10-01T00:32:08Z</published>
    <updated>2022-10-01T00:32:08Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#583 - Sponsoring Perl and other Open Source work</title>
    <link rel="alternate" href="https://perlweekly.com/archive/583.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Happy New Year - Shana Tova - to all the Jews around the world!</p>
<p>A couple of days ago Ed Freyfogle wrote us pointig to their post on <a href="https://blog.opencagedata.com/post/sponsoring-metacpan">sponsoring MetaCPAN</a>. I love this on so many levels. First of all, of course the fact that they sponsor some Perl-related activity. They also blog about it. They also send us a heads up to be included here in the Perl Weekly. I hope many more small and large companies, and also individuals will follow them.</p>
<p>Dean Hamstead also sent us an email linking to the new <a href="https://the-perl-store.creator-spring.com/">Perl Store</a>, that was also announced on <a href="https://news.perlfoundation.org/post/tpf-merch-store">The Perl Foundation blog</a>. Buying a T-shirt or some other swag will both help you with clothing and help TPF financially. Nice initiative!</p>
<p>Finally, I managed to set up my <a href="https://github.com/sponsors/szabgab/">GitHub sponsors profile</a>. So now, if you'd like to support my Perl and in more general Open Source work (articles, code, and videos) you can do so via GitHub as well. It would be awesome to get a few of you start supporting me via GitHub in the next couple of days. That will help things get rolling there and I would be able to see how the system really works.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/583.html</id>
    <published>2022-09-26T10:00:00Z</published>
    <updated>2022-09-26T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
</feed>
