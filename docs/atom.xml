<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-08-23T16:51:22Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl 2020 retrospective</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/perl-2020-retrospective-3oek" type="text/html"/>
    <content type="html">&lt;p&gt;Along the year I some took notes about Perl events/news and it's time to drop my retrospective!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perl-governance"&gt;
  &lt;/a&gt;
  Perl governance
&lt;/h1&gt;

&lt;p&gt;This year saw several changes around the Perl core governance with the setup of &lt;a href="https://github.com/Perl/perl5/wiki/Perl-Steering-Council"&gt;Perl steering committee&lt;/a&gt; and &lt;a href="https://github.com/toddr/RFB/blob/master/0001-rfb-process.md"&gt;Perl Proposal for Enhancement&lt;/a&gt; (I think it since changed its name to RFCs). We now have people opening RFCs e.g. &lt;a href="https://github.com/Perl/perl5/issues/17949"&gt;RFC 004&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/perlgov"&gt;perlgov policy&lt;/a&gt; have seen several changes, perl 5 maintainers are now using &lt;a href="https://perl.topicbox.com/latest"&gt;Perl topicbox space&lt;/a&gt; for administrative discussions (e.g. voting) while &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/"&gt;p5p&lt;/a&gt; still remains for technical discussions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xsawyerx"&gt;SawyerX&lt;/a&gt; resigned and we now have 3 Perl &lt;a href="https://perldoc.perl.org/perlhist#PUMPKIN?"&gt;pumpkins&lt;/a&gt; instead only one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perl-core"&gt;
  &lt;/a&gt;
  Perl core
&lt;/h1&gt;

&lt;p&gt;Apple decided to enable -Werror producing trouble in Perl 5 core, a grant for &lt;a href="https://news.perlfoundation.org/post/grant_proposal_documentation_standards_perl7"&gt;documentations improvements&lt;/a&gt; was accepted (in addition to the usual core maintenance grants) and... The original Perl 7 idea died.&lt;/p&gt;

&lt;p&gt;The feature "signature" became &lt;a href="https://github.com/Perl/perl5/issues/18537"&gt;no longer experimental&lt;/a&gt;, a new (experimental) &lt;a href="https://perldoc.perl.org/perlexperiment#isa-infix-operator"&gt;isa keyword&lt;/a&gt; appeared and Cor changed its name to &lt;a href="https://github.com/Ovid/Cor"&gt;Corinna&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The perl5 repository gets &lt;a href="https://github.com/Perl/perl5"&gt;1000 stars&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vjkiY06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clht83jttloca599upty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vjkiY06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clht83jttloca599upty.png" alt="1000 stars"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Concerning releasing flow, the development versions of Perl restarted after some months of pause (at least to test non-regressions on the CPAN river).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h1&gt;

&lt;p&gt;There were serious discussions about maintainer-ship and the &lt;a href="https://lists.debian.org/debian-perl/2020/08/msg00006.html"&gt;status of libemperl in Debian&lt;/a&gt;. The same kind of adventure happened to &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/03/msg259344.html"&gt;mod_perl being candidate to go "attic"&lt;/a&gt; (going attic means being archived, and we usually never returns from this place).&lt;/p&gt;

&lt;p&gt;Kritika.io also closed this year :/&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#toolchain"&gt;
  &lt;/a&gt;
  Toolchain
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://neilb.org/index.html"&gt;Neil Bowers&lt;/a&gt; (one of our current Pumpkins) spent time to &lt;a href="https://neilb.org/2020/08/08/cpan-spelunking.html"&gt;resolve inconsistent permissions&lt;/a&gt; while &lt;a href="https://www.reddit.com/r/perl/comments/hzjqcy/malicious_code_in_moduleautoload/"&gt;malicious code was found in module AutoLoad&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You probably haven't heard of it but the &lt;a href="https://github.com/next-cpan/cnext"&gt;cnext&lt;/a&gt; experiment is dead.&lt;/p&gt;

&lt;p&gt;The CPAN mirror list was &lt;a href="https://log.perl.org/2021/02/cpan-mirror-list-changes.html"&gt;finally abandoned&lt;/a&gt; since fastly CDN is doing the same job. &lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/davorg"&gt;@davorg&lt;/a&gt;
 came with &lt;a href="https://cpandashboard.com/"&gt;CPAN Dashboards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The "Bus factor river" was &lt;a href="http://blogs.perl.org/users/olaf_alders/2021/06/cpan-bus-factor.html"&gt;added to MetaCPAN&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tA4XDswy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8d3s6p1wft85hgd6tg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tA4XDswy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8d3s6p1wft85hgd6tg5.png" alt="Bus factor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h1&gt;

&lt;p&gt;People doing &lt;a href="https://theweeklychallenge.org/"&gt;Weekly Challenge&lt;/a&gt; started to post live coding  sessions!&lt;/p&gt;

&lt;p&gt;Once again this year the major Perl conference &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;TPRCiC&lt;/a&gt; was online (and a success... and I gave talks \o/)&lt;/p&gt;

&lt;p&gt;Perl (and Raku) also had their own room at &lt;a href="https://fosdem.org/2021/schedule/track/perl_and_raku_programming/"&gt;FOSDEM 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The must-have space game &lt;a href="https://taustation.space/"&gt;Tau Station&lt;/a&gt; has launched (by mistake for the record) its &lt;a href="https://www.kickstarter.com/projects/1246097605/tau-station-the-mmo-biblio-rpg?lang=fr"&gt;kickstarter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmZpVVRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cszavkkapx5dgi59zy0s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmZpVVRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cszavkkapx5dgi59zy0s.jpg" alt="Tau"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ticket tracker &lt;a href="https://rt.cpan.org/"&gt;rt.cpan.org&lt;/a&gt; was &lt;a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html"&gt;announced as closing&lt;/a&gt; then finally the maintenance handed over and &lt;a href="https://news.perlfoundation.org/post/rt-cpan-org-upgraded"&gt;rt.cpan.org moved to new home&lt;/a&gt; (with an upgrade). Despite github issue tracker being often preferred, Request Tracker is a very good issue tracker and offers an independent issue tracker (what if github suddenly decided to change its policy towards open source?)&lt;/p&gt;

&lt;p&gt;Another event that happened and had some echo outside or Perl community was when &lt;a href="https://www.perl.com/article/the-hijacking-of-perl-com/"&gt;Perl.com was kind of "hacked"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once again this year we had &lt;a href="https://perladvent.org/2020/"&gt;Perl advent calendar&lt;/a&gt; and even the &lt;a href="http://leonerds-code.blogspot.com/2020/12/2020-perl-advent-calendar-day-1.html"&gt;Leonerd advent calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And... The &lt;a href="https://dev.to/t/perl"&gt;#perl on devto&lt;/a&gt; started to works well 😀&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other"&gt;
  &lt;/a&gt;
  Other
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://www.rexify.org/"&gt;Rex friendly automation framework&lt;/a&gt; celebrated its &lt;a href="https://www.reddit.com/r/perl/comments/iict7r/celebrating_4000_commits_of_rex_o/"&gt;4000th commit&lt;/a&gt; and its &lt;a href="https://www.rexify.org/docs/release_notes/1.13.1.html"&gt;10 years&lt;/a&gt; 🎉&lt;/p&gt;

&lt;p&gt;Do you know &lt;a href="https://smxi.org/docs/inxi.htm"&gt;inxi&lt;/a&gt; ?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#raku"&gt;
  &lt;/a&gt;
  Raku
&lt;/h1&gt;

&lt;p&gt;Raku community discussed about having its own foundation and organized its first &lt;a href="https://conf.raku.org/"&gt;dedicated conference&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;That was a complicated year, Perl is changing, moving forwards but not without trouble.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this retrospective!&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/perl-2020-retrospective-3oek</id>
    <published>2021-08-23T12:57:41Z</published>
    <updated>2021-08-23T12:57:41Z</updated>
    <category term="perl"/>
    <category term="discuss"/>
  </entry>
  <entry>
    <title>Object::Pad review Yuki Kimoto's 2021-08-23 - Constructor argument customize</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-review-yuki-kimotos-2021-08-23---constructor-argument-customize.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10379</id>
    <published>2021-08-23T10:46:49Z</published>
    <updated>2021-08-23T11:20:15Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<ul>
  <li><a href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-review-yuki-kimotos-2021-08-21---constructor-argument.html">Object::Pad review Yuki Kimoto's 2021-08-21 - Constructor default argument</a></li>
</ul>

<p>In this time, I review constructor argument customize. BUILDARGS can customize contructer argument. It is good enough for me. I think existing library that receive hash references as argument will have a slight performance penalty because a BUILDARGS function call.</p>

<p><br />
<b>Point-&gt;new($x, $y)</b></p>

<pre>
use strict;
use warnings;

<p>use Object::Pad;<br />
 <br />
class Point {<br />
   has $x :param = 0;<br />
   has $y :param = 0;<br />
   <br />
   sub BUILDARGS {<br />
     my ($class, $_x, $_y) = @_;<br />
     <br />
     return (x => $_x, y => $_y);<br />
   }<br />
 <br />
   method move {<br />
      my ($dX, $dY) = @_;<br />
      $x += $dX;<br />
      $y += $dY;<br />
   }<br />
 <br />
   method describe {<br />
      print "A point at ($x, $y)\n";<br />
   }<br />
}</p>

<p>{<br />
  my $x = 5;<br />
  my $y = 10;<br />
  my $point = Point->new($x, $y);<br />
  $point->describe;<br />
}</p>

</pre>

<p><b>Point-&gt;new({x => $x, y => $y})</b></p>

<pre>
use strict;
use warnings;

<p>use Object::Pad;<br />
 <br />
class Point {<br />
   has $x :param = 0;<br />
   has $y :param = 0;<br />
   <br />
   sub BUILDARGS {<br />
     my ($class, $args) = @_;<br />
     <br />
     return (%$args);<br />
   }<br />
 <br />
   method move {<br />
      my ($dX, $dY) = @_;<br />
      $x += $dX;<br />
      $y += $dY;<br />
   }<br />
 <br />
   method describe {<br />
      print "A point at ($x, $y)\n";<br />
   }<br />
}</p>

<p>{<br />
  my $x = 5;<br />
  my $y = 10;<br />
  my $point = Point->new({x => $x, y => $y});<br />
  $point->describe;<br />
}</p>

</pre>
]]>
        
    </content>
</entry>
  <entry>
    <title>Object::Pad review Yuki Kimoto's 2021-08-21 - Constructor default argument</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/08/objectpad-review-yuki-kimotos-2021-08-21---constructor-argument.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10376</id>
    <published>2021-08-21T06:05:17Z</published>
    <updated>2021-08-23T11:20:00Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I start to review Paul Evans's <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> from my personal thinking.</p>

<p>Latest years, Perl core teams positively try to implement Object-Oriented feature to Perl core. I hope my review helps a little.</p>

<p>First time is constructor default arguments.</p>

<pre>
use Object::Pad;
 
class Point {
   has $x :param = 0;
   has $y :param = 0;
 
   method move {
      my ($dX, $dY) = @_;
      $x += $dX;
      $y += $dY;
   }
 
   method describe {
      print "A point at ($x, $y)\n";
   }
}
 
{
  my $point = Point->new(x => 5, y => 10);
  $point->describe;
}

<p># Unsupported hash reference<br />
# I think a little time<br />
# Benefit: a little fast because type check isn't done<br />
{<br />
  my $args = {x => 5, y => 10};<br />
  my $point = Point->new($args);<br />
  $point->describe;<br />
}<br />
# Need the following. Not too bad.<br />
# I can accept hash reference argument feature is none.<br />
{<br />
  my $args = {x => 5, y => 10};<br />
  my $point = Point->new(%$args);<br />
  $point->describe;<br />
}<br />
</pre></p>]]>
        
    </content>
</entry>
  <entry>
    <title>#526 - Politics in Programming?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/526.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I came across a blog post by Curtis titled <a href="https://ovid.github.io/blog/politics-in-programming.html">Politics in Programming</a>. As is always the case, it touched on sensitive topics. You may or may not agree with his point of view but it is worth a read, IMHO.</p>
<p>Let me confess, ever since Cor was renamed to Corinna, I always double check whether there is a double "r" or a double "n" in the name. I get it wrong all the time. Joking apart, I am very happy that Corinna is being discussed on so many different public platforms, a BIG thanks to Curtis and his team.</p>
<p>There was another topic discussed on Facebook, "Data structures in Perl". It brought back some good old memories of when I was first introduced to Perl. I came from a C background, so you would assume the transition would have been smooth. That wasn't the case for me. I had a hard time getting my head around "references" in Perl. Once I passed that hurdle, the next disaster was waiting for me, i.e. "regex". I had no clue about it before. It took me a while to get hold of it. Even after 22 years of working with Perl, I still find regex magic that I have never seen before, thanks to Abigail contributions to <a href="https://github.com/manwar/perlweeklychallenge-club">the weekly challenge</a>. The next big thing I dealt with after regex was "network programming". The best book to understand the subject is <a href="https://www.oreilly.com/library/view/network-programming-with/0201615711/">Network Programming with Perl</a> by Lincoln D. Stein, imho.</p>
<p>Did you notice, I didn't mention OO in Perl yet?</p>
<p>It is only because I got the opportunity to actually use OO programming very late in my career. The first book that I read on the subject was <a href="https://www.manning.com/books/object-oriented-perl">Object Oriented Perl</a> by Damian Conway. It was the first book by Damian that I read and I completely fell in love with it. Of course, how can I miss the next one by Damian, <a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/">Perl Best Practices</a>. I am happy to see Damian giving a thumbs up to the Corinna project headed by Curtis in his recent blog post, <a href="http://blogs.perl.org/users/damian_conway/2021/08/a-dream-realized.html">A dream realized</a>. About the future of OO in core Perl, I am not too worried as it is in safe hands now.</p>
<p>A fellow member of Team PWC, Adam Russell, started a Discord server for the purposes of discussing more academic Computer Science type topics, as they relate to Perl. If you are keen to join then please follow the <a href="https://discord.gg/Ng9nrdDg">invitation</a>.</p>
<p>School holidays are coming to an end soon, at least in the UK, so enjoy it while it lasts. Don't forget to keep a safe distance and use a mask in public places. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/526.html</id>
    <published>2021-08-23T10:00:00Z</published>
    <updated>2021-08-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Count Numbers / MineSweeper game: The Weekly Challenge 126</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/22#pwc126" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to print count of numbers from 1 to 
$N that don’t contain digit 1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub has_1{
    my($x) = @_;
    return 1 if $x =~ tr/1//d &gt; 0;
    return 0;   
}

sub count_with_1{
    my($n) = @_;
    my $x = 1;  
    my $count = 0; 
    {
        $count += has_1($x); 
        $x += 1;
        redo if $x &lt;= $n; 
    }
    return $count; 
}

sub count_without_1{
    my($n) = @_;
    return $n - count_with_1($n);  
}

MAIN:{
    my $N;
    $N = 15;
    print count_without_1($N) . "\n"; 
    $N = 25;
    print count_without_1($N) . "\n"; 
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
13
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Given the flexibility and richness of Perl there were many choices of how to determine the
presence of a '1'. I decided to use &lt;code&gt;tr&lt;/code&gt; which will helpfully return the number of changes
made. In this case, what is returned is the number of 1's deleted. If this number is 
greater than zero then we know a &lt;code&gt;1&lt;/code&gt; was found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a rectangle with points marked with either x or *. Please consider the x as
a land mine. Write a script to print a rectangle with numbers and x as in the Minesweeper 
game.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub initialize_grid{
    my($m, $n) = @_;
    my @grid; 
    for my $i (0 .. $m - 1){
        for my $j (0 .. $n - 1){
            $grid[$i][$j] = "*";   
            $grid[$i][$j] = "x" if rand() &lt;= (1 / 3);   
        }  
    }  
    return @grid; 
}

sub make_grid{
    my($m, $n) = @_;
    my @initial_grid = initialize_grid($m, $n);  
    my @grid = map {[@$_]} @initial_grid; 
    for my $i (0 .. $m - 1){ 
        for my $j (0 .. $n - 1){
            unless($grid[$i][$j] eq "x"){
                my $mine_count = 0;
                $mine_count++ if $i &gt;= 1 &amp;&amp; $j &gt;= 1 &amp;&amp; $grid[$i - 1][$j - 1] eq "x"; 
                $mine_count++ if $i &gt;= 1 &amp;&amp; $grid[$i - 1][$j] eq "x"; 
                $mine_count++ if $i &gt;=1 &amp;&amp; $j &lt; $n - 1 &amp;&amp; $grid[$i - 1][$j + 1] eq "x"; 
                $mine_count++ if $j &gt;= 1 &amp;&amp; $grid[$i][$j - 1] eq "x"; 
                $mine_count++ if $j &lt; $n - 1 &amp;&amp; $grid[$i][$j + 1] eq "x"; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $j &gt;= 1 &amp;&amp; $grid[$i + 1][$j - 1] eq "x"; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $grid[$i + 1][$j] eq "x" ; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $j &lt; $n - 1 &amp;&amp; $grid[$i + 1][$j + 1] eq "x"; 
                $grid[$i][$j] = $mine_count; 
            } 
        }  
    } 
    return (\@initial_grid, \@grid); 
}  

sub print_grid{
    my @grid = @_; 
    for my $row (@grid){
        print "\t" . join(" ", @{$row}) . "\n"  
    } 
} 

MAIN:{
    my($m, $n) = @ARGV;
    my($initial_grid, $grid) = make_grid($m, $n);  
    print "Input:\n"; 
    print_grid(@{$initial_grid});      
    print "Output:\n"; 
    print_grid(@{$grid});      
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 5 10
Input:
        x x * * * * x * * x
        * * x * x x x * x *
        * * * * * * * * * *
        x * x x * * * * * x
        * * x * x * * * x *
Output:
        x x 2 2 2 4 x 3 2 x
        2 3 x 2 x x x 3 x 2
        1 3 3 4 3 3 2 2 2 2
        x 3 x x 2 1 0 1 2 x
        1 3 x 4 x 1 0 1 x 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The grid is randomly determined. Any cell has a 1/3 chance of being a mine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code for finding all adjacent cells, if they exist, is largely taken from my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/09/13#pwc077"&gt;solution to Challenge 077&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the tedious business of finding the adjacent cells is done counting up the "mines" 
and labelling the cells is straightforward!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126/"&gt;Challenge 126&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25295.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25444.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.minesweeperonline.net/history.php"&gt;History of Minesweeper&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc126</id>
    <published>2021-08-22T17:39:00-04:00</published>
    <updated>2021-08-22T17:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Monthly Report - July</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10378</id>
    <published>2021-08-22T10:07:51Z</published>
    <updated>2021-08-22T10:11:04Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmonthlyreport" label="perl monthly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-07.jpg"/></p>

<p><strong>Never been so busy ...</strong></p>

<p>The guilt is killing me every time I delay the monthly report. I finally found time to get this out on 22nd day of the month where I would do that on the very first day of the month in the past.</p>

<p>Life can be challenging at times, balancing personal and professional aspect can be difficult, I must confess.</p>

<p>In all of these up and down, I have to keep myself motivated and find ways to stay happy. </p>

<p>I try to avoid negative thoughts coming on my way and stay positive.</p>

<p>For the last few weeks, I have been too busy with my new day job. I am happy that I got to explore things that I have never done in the past. For example, I tried <a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF</a> in Dancer2 application. It was fun. I will soon share the code when I get time. Also I got to play with Elastic Search. I was very nervous initially as the work in hand was mostly around it. I spent few evenings and finally got my head around it. At least I know enough now to build the API for the task. Last but not the least, I tried something new for unit testing, <a href="https://metacpan.org/pod/Test::Unit::TestCase">Test::Unit::TestCase</a>. In the past, <a href="https://metacpan.org/pod/Test::More">Test::More</a> had been more than enough for unit testing. I am in love with Test::Unit::TestCase now, I can tell you with confident. I would like to thank, <a href="https://www.oleeo.com/">Oleeo</a> for giving me the opportunity to explore so many different things. I am very happy with my decision to change job.</p>

<p>As you see, with all the fun going around, I find very little time to participate in the weekly challenge. However I did manage to do FOUR live videos with regard to my weekly challenge contributions last month. I hope you like it.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>4 Pull Requests</strong> submitted in the month of <strong>July 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-07.png"/></p>

<p><strong>2362 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-07.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>913 commits</strong> recorded in the month of <strong>July 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-07.png"/></p>

<p>Overall <strong>5470 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-07.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>July 2021</strong>:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-120">Challenge #120</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-121">Challenge #121</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-122">Challenge #122</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123">Challenge #123</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-119">RECAP Challenge #119</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-120">RECAP Challenge #120</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-121">RECAP Challenge #121</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-122">RECAP Challenge #122</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>Last month, I created <strong>2 videos</strong> working on various tasks of the weekly challenges.</p>

<h4>The Weekly Challenge - 120 (Task #1: Swap Odd/Even bits)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/VyBVS0IHvnI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br></p>

<h4>The Weekly Challenge - 120 (Task #2: Clock Angle)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/lTwlnsnDl2I" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br></p>

<h4>The Weekly Challenge - 121 (Task #1: Invert Bit)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/n1EECfp0YTA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br></p>

<h4>The Weekly Challenge - 122 (Task #1: Average of Stream)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/vOad7ZjwqlQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br></p>

<p>There are plenty of videos available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <strong>Abigail</strong> as the Champion of <strong>The Weekly Challenge</strong>. </p>

<p>If you are interested in past champions interview then you can find it all <a href="https://theweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/Plack::App::ServiceStatus">Plack::App::ServiceStatus</a> by <strong>Thomas Klausner</strong>. I submitted <a href="https://github.com/domm/Plack-App-ServiceStatus/pull/4">one</a> Pull Request.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-07.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-07.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/07/monthly-report---june-2.html">Monthly Report - June</a></li>.</p>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/520.html">Issue #520</a> and <a href="http://perlweekly.com/archive/522.html">Issue #522</a>.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>July 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-07.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Raku CI Bot grant repot for July 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/raku-ci-bot-grant-report-2021-07"/>
  <id>tag:news.perlfoundation.org,2021-08-22:/post/raku-ci-bot-grant-report-2021-07</id>
  <published>2021-08-22T08:51:08</published>
  <updated>2021-08-22T08:51:08</updated>
  <summary>
  <![CDATA[
     Patrick Böker has submitted the following grant progress report for his Raku CI Bot grant: In July I worked on the GitHub and OBS integrations. I decided to work on OBS first and tackle Azure once OBS and the system as a whole works. I implemented logic to parse GitHub hook messages and add them to an internal work queue. On the OBS side I added functionality to start test 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Patrick Böker has submitted the following grant progress report for his Raku CI Bot grant:</p>

<hr />

<p>In July I worked on the GitHub and OBS (the Open Build Service) integrations. 
I decided to work on OBS first and tackle Azure once OBS and the system as a 
whole works.</p>

<p>I implemented logic to parse GitHub hook messages and add them to an internal 
work queue. On the OBS side I added functionality to start test runs and query 
for build results. Both accompanied by tests.</p>

<p>I am / will be on vacation for the most part of August. So I'll continue 
working on the Raku CI bot grant in September.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1556743972363638502</id>
    <published>2021-08-21T22:43:00.001+02:00</published>
    <updated>2021-08-21T22:43:53.474+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclv) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/CPANPLUS-0.9912' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CPANPLUS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Ameliorated interface to the CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9912&lt;/strong&gt; on 2021-08-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.9910 was 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.072' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.072&lt;/strong&gt; on 2021-08-16&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.071 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/Keyword-Declare-0.001018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Keyword::Declare&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Declare new Perl keywords...via a keyword...named keyword &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001018&lt;/strong&gt; on 2021-08-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.001017 was 1 year, 6 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.56&lt;/strong&gt; on 2021-08-17&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.55 was 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210820' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210820&lt;/strong&gt; on 2021-08-21&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210723 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MAROS/MooseX-App-1.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MooseX::App&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write user-friendly command line apps with even less suffering &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.42&lt;/strong&gt; on 2021-08-15&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 1.41 was 2 years, 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.79&lt;/strong&gt; on 2021-08-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.78 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.611' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.611&lt;/strong&gt; on 2021-08-18&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Tickit-0.72' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Tickit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Terminal Interface Construction KIT &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.72&lt;/strong&gt; on 2021-08-18&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.71 was 1 year, 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1556743972363638502/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclv-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1556743972363638502"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1556743972363638502"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/ccclv-9-great-cpan-modules-released.html" title="(ccclv) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4278560936122128670</id>
    <published>2021-08-21T22:41:00.002+02:00</published>
    <updated>2021-08-21T22:41:27.350+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxi) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 22&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/21 20:41:02 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Plugin::Auth::HTTP::Basic::DWIW" target="_blank"&gt;Dancer2::Plugin::Auth::HTTP::Basic::DWIW&lt;/a&gt; - HTTP Basic authentication plugin for Dancer2 that does what I want.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Template::Handlebars" target="_blank"&gt;Dancer2::Template::Handlebars&lt;/a&gt; - Dancer2 wrapper for Handlebars templating engine&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Device::Hue" target="_blank"&gt;Device::Hue&lt;/a&gt; - Perl module for the Philips Hue light system&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Integer::Partition" target="_blank"&gt;Integer::Partition&lt;/a&gt; - Generate all integer partitions of an integer&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MQSeries" target="_blank"&gt;MQSeries&lt;/a&gt; - Interface to IBM's MQSeries Product&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Neo4j::Types" target="_blank"&gt;Neo4j::Types&lt;/a&gt; - Common Neo4j type system&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::MQTT" target="_blank"&gt;AnyEvent::MQTT&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Asterisk::AMI" target="_blank"&gt;Asterisk::AMI&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Always" target="_blank"&gt;Carp::Always&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Assert" target="_blank"&gt;Carp::Assert&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::XSAccessor" target="_blank"&gt;Class::XSAccessor&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=279)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::C" target="_blank"&gt;Inline::C&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=460)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=382)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Raisin" target="_blank"&gt;Raisin&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=171)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4278560936122128670/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxxi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4278560936122128670"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4278560936122128670"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxxi-metacpan-weekly-report.html" title="(cdlxxxi) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8280893021405695243</id>
    <published>2021-08-21T22:40:00.000+02:00</published>
    <updated>2021-08-21T22:40:25.605+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-08-21 20:31:23 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68844753" target="_blank"&gt;Nested perl arrays and hashes and references&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68863999" target="_blank"&gt;Why is division parsed as regular expression?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68808552" target="_blank"&gt;Check data structure and disregard if hash or array&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68845224" target="_blank"&gt;Perl - multithreading / fork / synchronize problem:&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68809019" target="_blank"&gt;I am having a problem with the base64_decode output in Perl being truncated&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68810780" target="_blank"&gt;Capture::Tiny incompatible with Mason?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68868798" target="_blank"&gt;Perl performance is slow, file I/O issue or due to while loop&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68816095" target="_blank"&gt;Creating a UDP server using IO::Socket::INET without specifying a port&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68823888" target="_blank"&gt;How to optimize code using binary, variable lookup and foreach?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68837117" target="_blank"&gt;how can I invoke timelocal_modern() in perl 5.18?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8280893021405695243/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/dii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8280893021405695243"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8280893021405695243"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/dii-stackoverflow-perl-report.html" title="(dii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>A dream realized</title>
    <link rel="alternate" href="http://blogs.perl.org/users/damian_conway/2021/08/a-dream-realized.html"/>
    <id>tag:blogs.perl.org,2021:/users/damian_conway//875.10373</id>
    <published>2021-08-18T01:56:42Z</published>
    <updated>2021-08-21T07:50:42Z</updated>
    <author>
        <name>Damian Conway</name>
        <uri>http://damian.conway.org</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/damian_conway/">
        <![CDATA[<p>Have you heard that they are finally putting together a proposal to add a clean modern OO system into the core of Perl?</p>

<p>If you haven’t, I strongly encourage you to look over <a href="https://github.com/Ovid/Cor">the RFC for Corinna</a>, or at least watch Ovid’s <a href="https://www.youtube.com/watch?v=kSZO-aJg4dM">excellent presentation</a> on the project.</p>

<p>It’s reassuring that <a href="https://github.com/Ovid/Cor/blob/master/rfc/overview.md#contributors">the list of contributors</a> to the proposed design includes some of the most highly respected names in the Perl community, many of whom have previously taken one (or more!) tilts at this particular object-oriented windmill.</p>

<p>Indeed, over the past two decades I too have repeatedly attempted to design and prototype richer and more robust OO systems for Perl, starting way back in the previous millennium with a brief stint as the maintainer of <a href="https://metacpan.org/pod/Class::Struct">Class::Struct</a>, and continuing on though the release of modules such as <a href="https://metacpan.org/pod/Class::Std">Class::Std</a>, <a href="https://metacpan.org/pod/Class::Delegation">Class::Delegation</a>, and most recently: <a href="https://metacpan.org/pod/Dios">Dios</a>.</p>

<p>The Dios module represented almost everything I thought a comprehensive Perl OO system should contain. Not surprisingly, that actually meant it simply stole almost everything that <a href="https://docs.raku.org/language/classtut">Raku’s comprehensive OO system</a> contains <em>(mostly because I had spent quite a lot of time over the past two decades helping design that OO mechanism as well)</em>.</p>

<p>The only three problems with Dios are:</p>

<ul>
<li>It’s not built-in to Perl itself, so its performance is suboptional;</li>
<li>It’s not built-in to Perl itself, so it requires <a href="https://youtu.be/ob6YHpcXmTg?t=493">a huge amount of extremely complex multi-layer code</a> to make it feel as if is;</li>
<li>It’s not built-in to Perl itself, so it's merely one possible choice amongst the vast and incoherent array of entirely reasonable alternatives already on CPAN.</li>
</ul>

<p>That’s why, when people ask me whether I support the Corinna proposal, my response is: <strong><em>OH, HELL YES!</em></strong> I’ve literally been waiting two decades to see Perl gain a proper, built-in, declarative, encapsulated, and performant OO system. And this, I firmly believe, is it.</p>

<p>At this point I could launch into one of my usual extended exegeses on why this particular design is so exceptionally good, but I think two quick and specific examples are actually sufficient to explain my excitement about this proposal.</p>

<p>The first example is purely syntactic. If you were kind enough to watch the <a href="https://youtu.be/ob6YHpcXmTg?t=493">Three Little Words video</a> in which I introduced Dios, you’ll have seen how that module vastly improves the syntax for declaring a Perl class. Instead of something like:</p>

<pre><code>  package Account {
      use experimental 'signatures';
      use Carp 'croak';

      state $next_ID = 'AAA0001';

      sub new($class, %arg) {
          croak('Cannot specify ID as an constructor argument')
              if exists $arg{ID};
          bless {
              name    =&gt; $arg{name}    // croak('Missing name arg'),
              balance =&gt; $arg{balance} // 0,
              ID      =&gt; $next_ID++,
          }, $class;
      }

      sub name ($self) {
          return $self-&gt;{name};
      }

      sub set_name ($self, $newname) {
          $self-&gt;{name} = $newname;
      }

      sub balance ($self) {
          return $self-&gt;{balance};
      }

      sub ID ($self) {
          return $self-&gt;{ID};
      }

      sub deposit ($self, $amount) {
          $self-&gt;{balance} += $amount;
      }

      sub report ($self, $fh = *STDOUT) {
          $fh-&gt;say( $self-&gt;ID . ': ' . $self-&gt;balance );
      }
  }
</code></pre>

<p>...Dios allows you to achieve exactly the same functionality with just:</p>

<pre><code>  use Dios;

  class Account {
      state $next_ID = 'AAA0001';

      has $.name     is rw  is required;
      has $.balance  = 0;
      has $.ID       = $next_ID++;

      method deposit ($amount) {
          $balance += $amount;
      }

      method report ($fh = *STDOUT) {
          $fh-&gt;say( "$ID: $balance" );
      }
  }
</code></pre>

<p>Not only is that three times less code, it’s three times simpler code, which means it’s also likely to be code that’s three times less buggy.</p>

<p>But what really excites me about Corinna is that, under that proposal, the same code would look like this:</p>

<pre><code>  use experimental 'class';

  class Account {

      state $next_ID = 'AAA0001';

      slot $name     :param :reader :writer;
      slot $balance  :param :reader  = 0;
      slot $ID              :reader  = $next_ID++;

      method deposit ($amount) {
          $balance += $amount;
      }

      method report ($fh = *STDOUT) {
          $fh-&gt;say( "$ID: $balance" );
      }
  }
</code></pre>

<p>In other words: just as concise, just as readable, just as declarative. But without the huge behind-the-scenes overheads that Dios currently imposes.</p>

<p>The second example that illustrates why I’m so enthusiastic about the Corinna proposal is simply a subset of the first example. If we zoom in on that <code>deposit()</code> method:</p>

<pre><code>  # under Corinna
  method deposit ($amount) {
      $balance += $amount;
  }
</code></pre>

<p>...we can see an important improvement over the current standard Perl version:</p>

<pre><code>  # under standard Perl
  sub deposit ($self, $amount) {
      $self-&gt;{balance} += $amount;
  }
</code></pre>

<p>...and an even greater improvement over what would be required under
Moose or Moo or Object::InsideOut or most other existing OO frameworks:</p>

<pre><code>  # under most OO frameworks
  sub deposit ($self, $amount) {
      $self-&gt;balance( $self-&gt;balance + $amount );
  }
</code></pre>

<p>Under Corinna, the slots of an object are accessed via simple scalar variables (<em>e.g.</em> <code>$balance</code>) , not via a (slower) hash look-up (<em>e.g.</em> <code>$self->{balance}</code> or via (much slower) accessor methods (<em>e.g.</em> <code>$self->balance</code>).</p>

<p>This means that each individual slot access is going to be faster under Corinna, and so almost every method call will likewise be less expensive. For instance, each call to <code>deposit()</code> is likely to be at least three times quicker than under any of the many OO frameworks, because we’re dispensing with the two additional embedded method calls to <code>$self->balance()</code>.</p>

<p>More subtly, if we happened to misspell our slot variable:</p>

<pre><code>  # under standard Perl
  sub deposit ($self, $amount) {
      $self-&gt;{balence} += $amount;
      # Silent bug (autovivifies useless 'balence' key)
  }

  # under most OO frameworks
  sub deposit ($self, $amount) {
      $self-&gt;balance( $self-&gt;balence + $amount );
      # Runtime exception ("No such method 'balence'...")
  }

  # under Corinna
  method deposit ($amount) {
      $balence += $amount;
      # Compile-time exception: ("No such variable: $balence...")
  }
</code></pre>

<p>I don't know about you, but I'd <em>much</em> rather discover this problem the first time I compile the code, rather than at the first time it happens to actually be executed or, even worse, after a long and fruitless day of trying to debug the mysterious absence of recent deposit amounts.</p>

<p>There are so many other reasons to be enthusiastic about this proposed addition to standard Perl, not the least of which is that it <strong><em>will</em></strong> become standard and universally available, which may finally cut through the endless debate over whether your next project should use Moose or Moos or Moo or Mu or Spiffy or Object::InsideOut or Class::InsideOut or Class::Simple or Class::Easy or Class::Tiny or Class::Std or Dios or...</p>

<p>So, yes, I’m very excited about the <a href="https://github.com/Ovid/Cor">RFC for Corinna</a>, and I strongly encourage you to take a look for yourself at the powerful new OO features that will soon be proposed for Perl.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Inspecting loaded Perl modules</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/inspecting-loaded-modules-1f24" type="text/html"/>
    <content type="html">&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Acme::Prereq::&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%INC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$k&lt;/span&gt;&lt;span class="s2"&gt; =&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;$v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That produces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;strict.pm &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; /usr/share/perl/5.26/strict.pm
warnings.pm &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; /usr/share/perl/5.26/warnings.pm
Acme/Prereq/F.pm &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; /usr/local/share/perl/5.26.1/Acme/Prereq/F.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#tada"&gt;
  &lt;/a&gt;
  🎉
&lt;/h1&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/inspecting-loaded-modules-1f24</id>
    <published>2021-08-20T12:03:59Z</published>
    <updated>2021-08-20T12:03:59Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 126: Count Numbers and Minesweeper Game</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/08/perl-weekly-challenge-126-count-numbers-and-minesweeper-game.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10375</id>
    <published>2021-08-20T03:16:34Z</published>
    <updated>2021-08-20T03:18:17Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 126 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-126/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on August 22, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Count Numbers</h2>

<p><em>You are given a positive integer <code>$N</code>.</em></p>

<p><em>Write a script to print count of numbers from 1 to <code>$N</code> that don’t contain digit 1.</em></p>

<p><em>Example</em></p>

<pre><code>Input: $N = 15
Output: 8

    There are 8 numbers between 1 and 15 that don't contain digit 1.
    2, 3, 4, 5, 6, 7, 8, 9.

Input: $N = 25
Output: 13

    There are 13 numbers between 1 and 25 that don't contain digit 1.
    2, 3, 4, 5, 6, 7, 8, 9, 20, 22, 23, 24, 25.
</code></pre>

<h3>Count Numbers in Raku</h3>

<p>This is quite simple. Our program simply loops over the integers in the <code>2..$N</code> range and increments a counter for each integer not containing any 1.</p>

<pre><code>sub check ( $n where { $n ~~ /^\d+$/} ) {
    my $count = 0;
    for 2..$n -&gt; $i {
        $count++ unless $i ~~ /1/;
    }
    say "There are $count integers without a 1 in the 1..$n range.";
}
check @*ARGS[0] // 24;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./count_numbers.raku
There are 12 integers without a 1 in the 1..24 range.

$ raku ./count_numbers.raku 32
There are 19 integers without a 1 in the 1..32 range.
</code></pre>

<h3>Count Numbers in Perl</h3>

<p>To have a bit more fun, I decided to write a different, more functional, implementation, with a <code>grep</code> on the range of integers. All the real work is done in a single code line:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my $n = shift // 24;
my $count = scalar grep {not /1/} 2..$n;
say "There are $count integers with no 1 in the 1..$n range";
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./count_numbers.pl
There are 12 integers with no 1 in the 1..24 range

$ perl ./count_numbers.pl 32
There are 19 integers with no 1 in the 1..32 range
</code></pre>

<h3>Count Numbers in Julia</h3>

<p>Essentially a port of the Raku program to Julia:</p>

<pre><code>function check(n)
    count = 0;
    for i in 2:n
        if ! contains("$i", "1")
            count += 1
        end
    end
    println("There are $count integers without a 1 in the 1..$n range.")
end
check(24);
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./count_numbers.jl
There are 12 integers without a 1 in the 1..24 range.
</code></pre>

<h2>Task 2: Minesweeper Game</h2>

<p><em>You are given a rectangle with points marked with either x or <code>*</code>. Please consider the x as a land mine.</em></p>

<p><em>Write a script to print a rectangle with numbers and x as in the Minesweeper game.</em></p>

<pre><code>A number in a square of the minesweeper game indicates the number of mines within the neighbouring squares (usually 8), also implies that there are no bombs on that square.
</code></pre>

<p><em>Example:</em></p>

<pre><code>Input:
    x * * * x * x x x x
    * * * * * * * * * x
    * * * * x * x * x *
    * * * x x * * * * *
    x * * * x * * * * x

Output:
    x 1 0 1 x 2 x x x x
    1 1 0 2 2 4 3 5 5 x
    0 0 1 3 x 3 x 2 x 2
    1 1 1 x x 4 1 2 2 2
    x 1 1 3 x 2 0 0 1 x
</code></pre>

<p>In principle, this is quite easy, except that there are a number of edge cases (in the literal sense of the word edge), namely the edges and corners of the minesweeper grid.</p>

<p>Solving the edge cases might be as easy as dis-activating the &#8220;uninitialized&#8221; warnings, but I eschew doing that. Another way might be to add fictitious lines and columns (with no mine) around the grid and removing them at the end after the computations. I doubt though that it leads to a really simpler solution. Anyway, I decided to implement it &#8220;the hard way&#8221;, i.e. to check whether the position being examined is on a border or a corner.</p>

<h3>Minesweeper Game in Raku</h3>

<p>The <code>get-count</code> subroutine does the hard work: for an input position in the grid, it checks which adjacent positions are defined and then computes the number of such adjacent position where there is a mine. The rest of the program is populating the grid (an array of arrays) and looping on every position of the grid to get the number of neighboring mines. Note that we&#8217;re using some dynamic scope variables to avoid passing them around. </p>

<pre><code>use v6;

sub get-count (\i, \j) {
    my $count = 0;
    my @positions;
    for -1, 0, +1 -&gt; $k {
        for -1, 0, +1 -&gt; $m {
            push @positions, (i + $k, j + $m) unless $k == $m == 0;
        }
    }
    my $count-mines = 0;
    for @positions -&gt; $pos {
        next if $pos[0] | $pos[1] &lt; 0;
        next if $pos[0] &gt; $*max-i or $pos[1] &gt; $*max-j;
        $count-mines++ if @*mine-field[$pos[0]][$pos[1]] eq 'x';
    }
    return $count-mines;
}

my @in-str = 
    "x * * * x * x x x x",  
    "* * * * * * * * * x", 
    "* * * * x * x * x *", 
    "* * * x x * * * * *", 
    "x * * * x * * * * x";

my @*mine-field;
# Populating an AoA from the array of strings
for @in-str -&gt; $line {
    push @*mine-field, [split /\s+/, $line];
}
say join "\n", @*mine-field, "\n";
my $*max-i = @*mine-field.end;
my $*max-j = @*mine-field[0].end;
for 0..$*max-i -&gt; $i {
    for 0..$*max-j -&gt; $j {
        next if @*mine-field[$i][$j] eq 'x';
        @*mine-field[$i][$j] = get-count $i, $j;
    }
}
say join "\n", @*mine-field;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./mine-sweeper.raku
x * * * x * x x x x
* * * * * * * * * x
* * * * x * x * x *
* * * x x * * * * *
x * * * x * * * * x
-
-
x 1 0 1 x 2 x x x x
1 1 0 2 2 4 3 5 5 x
0 0 1 3 x 3 x 2 x 2
1 1 1 x x 4 1 2 2 2
x 1 1 3 x 2 0 0 1 x
</code></pre>

<h3>Minesweeper Game in Perl</h3>

<p>This is essentially a port to Perl of the above Raku program. The <code>get_count</code> subroutine does the hard work: for an input position in the grid, it checks which adjacent positions are defined and then computes the number of such adjacent position where there is a mine. The rest of the program is populating the grid (an array of arrays) and looping on every position of the grid to get the number of neighboring mines.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;

my (@mine_field, $max_i, $max_j);

sub get_count {
    my ($i, $j) = @_;
    my $count = 0;
    my @positions;
    for my $k (-1, 0, +1) {
        for my $m (-1, 0, +1) {
            push @positions, [$i + $k, $j + $m] unless $k == 0 and $m == 0;
        }
    }
    my $count_mines = 0;
    for my $pos (@positions) {
        next if $pos-&gt;[0] &lt;0 or $pos-&gt;[1] &lt; 0;
        next if $pos-&gt;[0] &gt; $max_i or $pos-&gt;[1] &gt; $max_j;
        $count_mines++ if $mine_field[$pos-&gt;[0]][$pos-&gt;[1]] eq 'x';
    }
    return $count_mines;
}

sub print_grid {
    say "@$_" for @_; say "";
}

my @in_str = 
    ( "x * * * x * x x x x",  
      "* * * * * * * * * x", 
      "* * * * x * x * x *", 
      "* * * x x * * * * *", 
      "x * * * x * * * * x" );

# Populating an AoA from the array of strings
for my $line (@in_str) {
    push @mine_field, [split /\s+/, $line];
}

$max_i = $#mine_field;
$max_j = $#{$mine_field[0]};
print_grid @mine_field;

for my $i (0..$max_i) {
    for my $j (0..$max_j) {
        next if $mine_field[$i][$j] eq 'x';
        $mine_field[$i][$j] = get_count $i, $j;
    }
}
print_grid @mine_field;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./mine-sweeper.pl
x * * * x * x x x x
* * * * * * * * * x
* * * * x * x * x *
* * * x x * * * * *
x * * * x * * * * x

x 1 0 1 x 2 x x x x
1 1 0 2 2 4 3 5 5 x
0 0 1 3 x 3 x 2 x 2
1 1 1 x x 4 1 2 2 2
x 1 1 3 x 2 0 0 1 x
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on August 29, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>RakuAST Grant Report for June 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jnthn-rakuast-grant-report-2021-06"/>
  <id>tag:news.perlfoundation.org,2021-08-19:/post/jnthn-rakuast-grant-report-2021-06</id>
  <published>2021-08-19T08:44:09</published>
  <updated>2021-08-19T08:44:09</updated>
  <summary>
  <![CDATA[
     Jonathan Worthing has submitted the following report on his RakuAST grant. Delays in publishing are purely my fault, not Jonathan's. Jonathan also gave a talk during the first Raku conference on the topic of RakuAST. It is a highly recommended watch. My work on RakuAST and the new RakuAST-based compiler frontend in June saw a further 40 test files from the Raku test suite start to pass in full. I 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthing has submitted the following report on his RakuAST grant. Delays in publishing are purely my fault, not Jonathan's.</p>

<p>Jonathan also gave a talk during the first Raku conference <a href="https://conf.raku.org/talk/147">on the topic of RakuAST.</a> It is a highly recommended watch.</p>

<hr />

<p>My work on RakuAST and the new RakuAST-based compiler frontend in June
saw a further 40 test files from the Raku test suite start to pass in full.
I added RakuAST nodes and compilation to them for the following language
features:</p>

<ul>
<li>Regex back-references</li>
<li>Named regex captures of the form <code>$&lt;foo&gt;=[bar]</code></li>
<li>Regex sigspace</li>
<li>Substitutions (both for <code>s/x/y/</code> and <code>s[x] = 'y'</code> forms)</li>
<li>Postfix, prefix, and infix hyper ops</li>
</ul>

<p>I also did a number of other improvements:</p>

<ul>
<li>Added support for all regex adverbs to the <code>m//</code> and <code>rx//</code> AST nodes
(this came before substitutions, which were made to support the applicable
adverbs right away)</li>
<li>Added compilation of <code>@$foo</code> contextualizers (without parentheses)
to the existing RakuAST contextualizer nodes</li>
<li>Ensured that <code>/&lt;foo&gt;/</code> assertions in regexes find a lexical rule of
that name if it exists before looking for a method</li>
<li>Added support for default parameter values, both with the runtime
semantics and for introspection</li>
<li>Fixed various minor bugs in regex compilation</li>
<li>Reinstated more typed compilation error reporting</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
  <title>LibUV Final Grant Report by Paul Evans</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/libuv-grant-report-final"/>
  <id>tag:news.perlfoundation.org,2021-08-19:/post/libuv-grant-report-final</id>
  <published>2021-08-19T08:36:19</published>
  <updated>2021-08-19T08:36:19</updated>
  <summary>
  <![CDATA[
     Paul "LeoNerd" Evans has submitted his final grant report for the LibUV grant. The Grants Committee will vote on its completion and payment. If you have feedback or question on its completion, please comment here. The latest release of UV version 2.000 indicates that this project is now fundamentally done. The CPAN version of UV, the libuv binding module, is now sufficiently complete and useable, to allow event systems and 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul "LeoNerd" Evans has submitted his final grant report for the LibUV grant.</p>

<p>The Grants Committee will vote on its completion and payment. If you have feedback or question on its completion, please comment here.</p>

<hr />

<p>The latest release of UV version 2.000 indicates that this project is
now fundamentally done. The CPAN version of UV, the libuv binding
module, is now sufficiently complete and useable, to allow event
systems and other similar modules to make use of the abstractions
provided by libuv.</p>

<p>It's unlikely that most programs would choose to operate directly with
UV itself, but rather via some higher-level event system. There are UV
adapter modules for IO::Async (IO::Async::Loop::UV), Mojo
(Mojo::Reactor::UV), and Future::IO (Future::IO::Impl::UV) at least.</p>

<p>The UV module certainly wraps much of what libuv has to offer, but
there are still some parts missing. libuv can watch filesystems for
changes of files, and provides asynchronous filesystem access access
functions - both of these are currently missing from the Perl binding.
Threadpools are an entire concept that doesn't map very well to the
Perl language, so they are absent too. Finally, libuv lists an entire
category of "miscellaneous functions", most of which are already
available independently in Perl, so there seems little point to
wrapping those provided by libuv.</p>

<p>Finally, we should take note of one thing that doesn't work - the
UV::TCP-&gt;open and UV::UDP-&gt;open functions when running on Windows. The
upshot here is that you cannot create TCP or UDP sockets in your
application independently of libuv and then hand them over to be
handled by the library; this is not permitted. This is because on
Windows, there are fundamentally two different kinds of sockets that
require two different sets of API to access them - ones using
WSA_FLAG_OVERLAPPED, and ones not. libuv needs that flag in order to
perform event-based IO on sockets, and so it won't work with sockets
created without it - which is the usual kind that most other modules,
and perl itself, will create. This means that on Windows, the only
sockets you can use with the UV module are ones created by UV itself -
such as by asking it to connect out to servers, or listen and accept
incoming connections. Fortunately, this is sufficient for the vast
majority of applications.</p>

<p>While approaching the end of this project, I found that there is a
shortage of Win32 experts around Perl. It was difficult to to get some
expert opinion on the Windows-specific testing failures that were
holding back a complete release of this module, as it was unclear
whether the things being tested were supposed to be working or not.</p>

<p>I would like to finish up by saying thanks to The Perl Foundation for
funding me to complete this project.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl &amp; Raku: Best frenemies</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-raku-best-frenemies-2hal" type="text/html"/>
    <content type="html">&lt;p&gt;The Perl and Raku programming languages have a complicated history together. The latter was &lt;a href="https://www.perl.com/pub/2000/07/perl6.html/"&gt;envisioned in the year 2000&lt;/a&gt; as Perl 6, a complete redesign and rewrite of Perl to solve its problems of difficult maintenance and the burden of then-13 years of backward compatibility. Unfortunately, the development effort towards a first major release dragged on for ten years, and some developers began to believe the delay contributed to the decline of Perl’s market- and mindshare among programming languages.&lt;/p&gt;

&lt;p&gt;In the intervening years &lt;a href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/"&gt;work continued on Perl 5&lt;/a&gt;, and eventually, Perl 6 was &lt;a href="https://www.perl.org/"&gt;positioned&lt;/a&gt; as “a sister language, part of the Perl family, not intended as a replacement for Perl.” Two years ago it was &lt;a href="https://lwn.net/Articles/802329/"&gt;renamed Raku&lt;/a&gt; to better indicate it as a different project.&lt;/p&gt;

&lt;p&gt;Although the two languages aren’t source-compatible, the &lt;a href="https://modules.raku.org/dist/Inline::Perl5:cpan:NINE"&gt;Inline::Perl5&lt;/a&gt; module does enable Raku developers to run Perl code and use Perl modules within Raku, You can even subclass Perl classes in Raku and call Raku methods from Perl code. I hadn’t realized until recently that the Perl support was so strong in Raku despite them being so different, and so I thought I’d take the opportunity to write some sample code in both languages to better understand the Raku way of doing things.&lt;/p&gt;

&lt;p&gt;Rather than a simple &lt;a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program"&gt;“Hello World” program&lt;/a&gt;, I decided to write a simple syndicated news reader. The &lt;a href="https://modules.raku.org/"&gt;Raku modules directory&lt;/a&gt; didn’t appear to have anything comparable to Perl’s &lt;a href="https://metacpan.org/pod/WWW::Mechanize"&gt;WWW::Mechanize&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/XML::RSS"&gt;XML::RSS&lt;/a&gt; modules, so this seemed like a great way to test Perl-Raku interoperability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-feed-finder"&gt;
  &lt;/a&gt;
  Perl Feed Finder
&lt;/h2&gt;

&lt;p&gt;First, the Perl script. I wanted it smart enough to either directly fetch a news feed or find it on a site’s HTML page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the beginning, you’ll notice there’s a bit of boilerplate: &lt;code&gt;use v5.24&lt;/code&gt; (&lt;a href="https://perldoc.perl.org/perl5240delta"&gt;released in 2016&lt;/a&gt;) to enable &lt;a href="https://perldoc.perl.org/strict"&gt;restricting unsafe code&lt;/a&gt;, the &lt;a href="https://perldoc.perl.org/functions/say"&gt;&lt;code&gt;say&lt;/code&gt;&lt;/a&gt; function, and &lt;a href="https://perldoc.perl.org/perlref#Postfix-Dereference-Syntax"&gt;postfix dereferencing&lt;/a&gt; to reduce the noise from nested curly braces. I’m also bringing in the &lt;a href="https://metacpan.org/pod/List::Util#first"&gt;&lt;code&gt;first&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/List::Util#none"&gt;&lt;code&gt;none&lt;/code&gt;&lt;/a&gt; &lt;a href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/"&gt;list processing&lt;/a&gt; functions from &lt;a href="https://metacpan.org/pod/List::Util"&gt;List::Util&lt;/a&gt; as well as the WWW::Mechanize web page retriever and parser and the XML::RSS feed parser.&lt;/p&gt;

&lt;p&gt;Next is an array of possible &lt;a href="https://www.iana.org/assignments/media-types/media-types.xhtml"&gt;media (formerly MIME) types&lt;/a&gt; used to serve the &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS news feed format&lt;/a&gt; on the web. Like Perl and Raku, RSS formats have a &lt;a href="https://en.wikipedia.org/wiki/History_of_web_syndication_technology"&gt;long and sometimes contentious history&lt;/a&gt;, so a newsreader needs to support several different ways of identifying them on a page.&lt;/p&gt;

&lt;p&gt;The program then creates new WWW::Mechanize (called a &lt;em&gt;mech&lt;/em&gt; for short) and XML::RSS objects for use later and gets a URL to browse from its command-line argument, defaulting to &lt;a href="https://phoenixtrap.com"&gt;my blog&lt;/a&gt; if it has none. &lt;em&gt;(My site, my rules, right?)&lt;/em&gt; It then retrieves that URL from the web. If mech believes that the URL &lt;a href="https://metacpan.org/pod/WWW::Mechanize#%24mech-%3Eis_html()"&gt;contains an HTML page&lt;/a&gt; and can find &lt;code&gt;link&lt;/code&gt; tags with &lt;code&gt;rel="alternate"&lt;/code&gt; attributes possibly identifying any news feeds, it then goes on to check the media types of those links against the earlier list of RSS types and retrieves the first one it finds.&lt;/p&gt;

&lt;p&gt;Next comes the only error checking done by this script: checking if the retrieved feed’s media type actually matches the list defined earlier. This prevents the RSS parser from attempting to process plain web pages. This isn’t a large and complicated program, so the die function is called with a trailing newline character (&lt;code&gt;\n&lt;/code&gt;) to suppress reporting the line on which the error occurred.&lt;/p&gt;

&lt;p&gt;Finally, it’s time to output the headlines and links, but before that happens Perl has to be told that they may contain so-called “wide characters” found in the &lt;a href="https://home.unicode.org/"&gt;Unicode standard&lt;/a&gt; but not in the plain &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; that it normally uses. This includes things like the typographical ‘curly quotes’ that I sometimes use in my titles. The last two lines of the script loop through the parsed items in the feed, extracting their titles and links and printing them out with a tab (&lt;code&gt;\t&lt;/code&gt;) separator between them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--So5qkmYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epa9p1qtjaijhce65tfz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--So5qkmYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epa9p1qtjaijhce65tfz.jpeg" alt="Output from feed_finder.pl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raku-feed-finder"&gt;
  &lt;/a&gt;
  Raku Feed Finder
&lt;/h2&gt;

&lt;p&gt;Programming is often just stitching libraries and APIs together, so it shouldn’t have been surprising that the Raku version of the above would be so similar. There are some significant (and sometimes welcome) differences, though, which I’ll go over now:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The first thing to notice is there’s a bit less boilerplate code at the beginning. Raku is a younger language and doesn’t have to add instructions to enable less backward-compatible features. It’s also a larger language with functions and methods built-in that Perl needs to load from modules, though this feed finder program still needs to bring in WWW::Mechanize and XML::RSS with annotations to indicate they’re coming from the &lt;code&gt;Perl5&lt;/code&gt; side of the fence.&lt;/p&gt;

&lt;p&gt;I decided to wrap the majority of the program in a &lt;a href="https://docs.raku.org/language/create-cli#index-entry-MAIN"&gt;&lt;code&gt;MAIN&lt;/code&gt;&lt;/a&gt; function, which handily &lt;a href="https://docs.raku.org/language/create-cli#Calling_a_provided_MAIN_subroutine_using_that_capture"&gt;gives me command line arguments as variables&lt;/a&gt; as well as a &lt;a href="https://docs.raku.org/language/create-cli#Creating_/_showing_usage_information_if_calling_MAIN_failed"&gt;usage message&lt;/a&gt; if someone calls it with a &lt;code&gt;--help&lt;/code&gt; option. This is a neat quality-of-life feature for script authors that cleverly reuses function signatures, and I’d love to see this available in Perl as an extension to its &lt;a href="https://perldoc.perl.org/perlsub#Signatures"&gt;signatures&lt;/a&gt; feature.&lt;/p&gt;

&lt;p&gt;Raku and Perl also differ in that the former &lt;a href="https://docs.raku.org/language/contexts"&gt;has a different concept&lt;/a&gt; of &lt;a href="https://perldoc.perl.org/perldata#Context"&gt;context&lt;/a&gt;, where an expression may be evaluated differently depending upon whether its result is expected to be a single value (scalar) or a list of values. Inline::Perl5 calls Perl functions in list context by default, but you can add the &lt;code&gt;Scalar&lt;/code&gt; type object as a first argument to force scalar context as I’ve done with calls to &lt;a href="https://metacpan.org/pod/WWW::Mechanize#%24mech-%3Efind_all_links(-...-)"&gt;&lt;code&gt;find_all_links&lt;/code&gt;&lt;/a&gt; (to return an array reference) and &lt;a href="https://metacpan.org/pod/WWW::Mechanize#%24mech-%3Ect()-/-%24mech-%3Econtent_type()"&gt;content_type&lt;/a&gt; (to &lt;a href="https://metacpan.org/pod/HTTP::Headers#%24h-%3Econtent_type"&gt;return the first parameter&lt;/a&gt; of the HTTP Content-Type header).&lt;/p&gt;

&lt;p&gt;Another interesting difference is the use of the &lt;a href="https://docs.raku.org/routine/(elem),%20infix%20%E2%88%88"&gt;&lt;code&gt;(elem)&lt;/code&gt;&lt;/a&gt; operator to determine membership in a set. This is Raku’s ASCII way of spelling the ∈ symbol, which it can also use; &lt;code&gt;!(elem)&lt;/code&gt; can also be spelled &lt;a href="https://docs.raku.org/routine/%E2%88%89"&gt;∉&lt;/a&gt;. Both are hard to type on my keyboard so I chose the more verbose alternative, but if you want your code to more closely resemble mathematical notation it’s nice to know the option is there.&lt;/p&gt;

&lt;p&gt;I also didn’t use Raku’s &lt;a href="https://docs.raku.org/routine/die"&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; routine to exit the program with an error, mainly because of its method of suppressing the line on which the error occurred. It requires &lt;a href="https://docs.raku.org/language/exceptions#index-entry-CATCH"&gt;using a &lt;code&gt;CATCH&lt;/code&gt; block&lt;/a&gt; and then keying off of the type of exception thrown in order to customize its behavior, which seemed like overkill for such a small script. It would have looked something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    die $mech.uri ~ ' does not have an RSS feed'
        if $response.content_type(Scalar) !(elem) @rss_types;
    CATCH {
        default {
            note .message;
            exit 1;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doubtless, this could be &lt;a href="https://en.wikipedia.org/wiki/Code_golf"&gt;golfed&lt;/a&gt; down to reduce its verbosity at the expense of readability, but I didn’t want to resort to clever tricks when trying to do a one-to-one comparison with Perl. More experienced Raku developers are welcome to set me straight in the comments below.&lt;/p&gt;

&lt;p&gt;The last difference I’ll point out is Raku’s welcome lack of &lt;a href="https://perldoc.perl.org/perlref#Using-References"&gt;dereferencing&lt;/a&gt; operators compared to Perl. This is due to the former’s concept of &lt;a href="https://docs.raku.org/language/containers"&gt;containers&lt;/a&gt;, which I’m &lt;a href="https://docs.raku.org/language/5to6-nutshell#Creating_references_and_using_them"&gt;still learning about&lt;/a&gt;. It seems to be fairly &lt;a href="https://en.wikipedia.org/wiki/DWIM"&gt;DWIM&lt;/a&gt;my so I’m not that worried, but it’s nice to know there’s an understandable mechanism behind it.&lt;/p&gt;

&lt;p&gt;Overall I’m pleased with this first venture into Raku and I enjoyed what I’ve learned of the language so far. It’s not as different with Perl as I anticipated, and I can foresee coding more projects as I learn more. The community on the &lt;a href="https://web.libera.chat/#raku"&gt;&lt;code&gt;#raku&lt;/code&gt; IRC channel&lt;/a&gt;was also very friendly and helpful, so I’ll be hanging out there as time permits.&lt;/p&gt;

&lt;p&gt;What do you think? Can Perl and Raku better learn to coexist, or are they destined to be rivals? Leave a comment below.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image: &lt;a href="https://www.flickr.com/photos/38631185@N06/5551846737"&gt;“Frenemies 2”&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/38631185@N06"&gt;Mauricio Delgado&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-sa/2.0/?ref=ccsearch&amp;amp;atype=rich"&gt;CC BY-SA 2.0&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-raku-best-frenemies-2hal</id>
    <published>2021-08-17T14:00:00Z</published>
    <updated>2021-08-17T14:00:00Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="rakulang"/>
    <category term="rss"/>
  </entry>
  <entry>
    <title>Weekly Challenge 126</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-126-19fg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-126/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-count-numbers">
  </a>
  TASK #1 › Count Numbers
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive integer <code>$N</code>.</p>

<p>Write a script to print count of numbers from 1 to <code>$N</code> that don’t contain digit 1.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This seems pretty straight forward. Have a loop from 2 to <code>$N</code> and add one if that number does not contain a one <code>index( $number, '1' ) == -1</code>.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 15
8

$ ./ch-1.pl 25
13
</code></pre>

</div>



<h2>
  <a href="#task-2-minesweeper-game">
  </a>
  TASK #2 › Minesweeper Game
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a rectangle with points marked with either x or *. Please consider the x as a land mine.</p>

<p>Write a script to print a rectangle with numbers and x as in the Minesweeper game.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>My solution is basically two sub-tasks. The first is processing the input, and the second is populating the board.</p>

<p>In the real world, you generally know what the input to a program is be it a file, URI or an HTTP request. For Team TWC challenges, this is up to the author to decide. For most tasks, it is usually a series of values than can be read from <code>@ARGV</code>. For this task, I read lines from STDIN. This allows a file to be piped in.</p>

<p>I turn the input into an array of arrays of <code>x</code> (mines) and <code>*</code> (non mines). I skip any blank lines, and then check all rows have the same number of columns.</p>

<p>The next part is to work through each cell. If it doesn't have a mine, I count the number of mines in the surrounding cells, making sure that we don't outside the bounds of the board. I then replace the cell value with the number of mines.</p>

<p>The last step is to print the output.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl &lt; input.txt 
x 1 0 1 x 2 x x x x
1 1 0 2 2 4 3 5 5 x
0 0 1 3 x 3 x 2 x 2
1 1 1 x x 4 1 2 2 2
x 1 1 3 x 2 0 0 1 x
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-126-19fg</id>
    <published>2021-08-16T13:57:15Z</published>
    <updated>2021-08-16T13:57:15Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Daniel Sockwell candidacy for Board positon</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/daniel_sockwell_board_candidate"/>
  <id>tag:news.perlfoundation.org,2021-08-16:/post/daniel_sockwell_board_candidate</id>
  <published>2021-08-16T13:29:42</published>
  <updated>2021-08-16T13:29:42</updated>
  <summary>
  <![CDATA[
     We would like to present Daniel Sockwell as a candidate to join the Board. He has worked with the foundation over the last year, participated in the monthly community meetings and presented Raku at a variety of events. The board will vote on Daniel's appointment at the board meeting 27th August 2021. Below are Daniel's responses to the application questions. Brief biography Before becoming a programmer, I earned a J.D. 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We would like to present Daniel Sockwell as a candidate to join the Board. He has worked with the foundation over the last year, participated in the monthly community meetings and presented Raku at a variety of events. </p>

<p>The board will vote on Daniel's appointment at the board meeting 27th August 2021.</p>

<p>Below are Daniel's responses to the application questions. </p>

<h2>Brief biography</h2>

<p>Before becoming a programmer, I earned a J.D. from Columbia Law School and was a practicing attorney with a large law firm in New York City.  </p>

<p>While there, I somewhat unexpectedly ended up writing code for a JavaScript web app that the firm was building for its large banking clients.</p>

<p>After discovering how much I enjoy writing code, I made a career change and became a programmer.  I have written JavaScript, Rust, and Raku professionally and enjoy exploring many other languages.</p>

<p>I currently serve on the Raku Steering Council and the TPF Legal Committee and was a moderator for the 2021 Perl and Raku Conference.</p>

<h2>Why do you want to become a member of the TPF Board?</h2>

<p>Yet Another Society does not currently have any board members who serve on the Raku Steering Council.</p>

<p>I would like to join YAS's board to help it and the RSC/the Raku community more broadly better work together.</p>

<h2>What goals would you like to see TPF pursue in the next years?</h2>

<p>I would like to see YAS help Perl and Raku help each other – and prevent them from getting in each other's way.</p>

<p>More specifically, I'd like to see the YAS board develop a framework for continuing to share infrastructure and other logistical resources while also giving both languages space to develop their independent identities and developer mindshare.</p>

<p>Here's why I think that goal is worth pursuing: Perl and Raku have a tremendous amount in common (as is only natural for two languages that spent decades with Larry Wall as BDFL).</p>

<p>Both languages are deeply committed to expressive, flexible code; both want to stand up and say that there should be more than one way to do it – pushing back against a landscape of "modern" programming tools that want to enforce a one-size-fits-all approach and style.  Accordingly, both languages have a common interest in promoting the overall linguistic approach to programming that distinguishes Perl-family languages.</p>

<p>Moreover, both languages have open-source/free software at their heart.  Though both languages gratefully accept corporate contributions, each is committed to remaining a community project, without undue influence from any single tech giant.</p>

<p>This brings many advantages, but it also many costs: neither language is likely to have the financial resources that a Facebook, Google, or Microsoft provide to their own languages.  Given this constraint, it makes sense for Raku and Perl to work together through YAS to more efficiently handle the many administrative, logistical, and infrastructure issues that could otherwise be solved with (more) money.</p>

<p>However, Perl and Raku also risk getting in each other's way if our relationship isn't handled correctly.</p>

<p>For example, consistently promoting Perl and Raku in the same breath risks giving the (absolutely false!) impression that Perl is the deprecated/old version of Raku; it also risks giving the (equally false) impression that Raku is an incremental change from Perl that is unlikely to appeal to an audience beyond Perl programmers.</p>

<p>Sharing administrative burdens and working together to promote Perl-family languages without getting in each other's way is a tricky balance, but it's one I believe we can strike.</p>

<p>For example, the recent creation of a "Raku Foundation" alias for YAS seems like a step in the right direction – and I'd personally like YAS to build on that step by deploying a separate website for the Raku Foundation and thereby freeing the Perl Foundation website up to be more Perl-focused. </p>

<p>I'm not exactly sure what other opportunities like that will come up, but I'd be happy to help find any that do.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#525 - Vacation time?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/525.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>it seems it is vacation time for many of the authors as the number of posts is smaller than usual.</p>
<p>Enjoy your vacation and remember if you can get vaccinated and in any case, even if you are already vaccinated and even if your country/state/city does not require you to put on a mask, put it on when among people! It is just a small piece of fabric and it might save the life of some other person.</p>
<p>Sure, you might not be contagious, but by having a mask on you also encourage others to put on their mask.</p>
<p>Enjoy your time here!</p></div>
    </content>
    <id>https://perlweekly.com/archive/525.html</id>
    <published>2021-08-16T10:00:00Z</published>
    <updated>2021-08-16T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Your code looks like Chinese to me!</title>
    <link rel="alternate" href="https://dev.to/tinydevops/your-code-looks-like-chinese-to-me-23ge" type="text/html"/>
    <content type="html">&lt;p&gt;Do you ever feel like the code you’re reading is written in a completely foreign language?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPJoWxSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jhall.io/archive/images/hieroglyphs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPJoWxSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jhall.io/archive/images/hieroglyphs.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I learned that a couple of studies have been done on this topic. While the &lt;a href="https://www.youtube.com/watch?v=HrVtA-ue-x0"&gt;video&lt;/a&gt; that introduced me to the studies is new, the research article about the studies is nearly ten years old: &lt;a href="https://dl.acm.org/doi/10.1145/2534973"&gt;An Empirical Investigation into Programming Language Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;According to the video, “all of the languages in the C family, Perl, Java, C++ … are as hard for novices to read and recognize as a randomly designed language. Ruby and Python are significantly easier.”&lt;/p&gt;

&lt;p&gt;And although &lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; isn’t mentioned (it was barely known at the time the studies were conducted), I imagine it would skew toward the Ruby and Python end of the scale, as one of its core design goals is to improve code readability.&lt;/p&gt;

&lt;p&gt;I’ve often said that I, like many, came to Go for its concurrency support, but stayed for its readability. And to contrast, I’ve often used Perl as an example (having been a Perl developer for 12 years or so before learning Go).&lt;/p&gt;

&lt;p&gt;I challenge any fresh university graduate who has never used Perl or Go to read any code written by &lt;a href="https://en.wikipedia.org/wiki/Larry_Wall"&gt;Larry Wall&lt;/a&gt; (the creator of Perl), and then to read code written by &lt;a href="https://en.wikipedia.org/wiki/Rob_Pike"&gt;Rob Pike&lt;/a&gt; (co-creator of Go). I’d bet a significant portion of my monthly income that the Go code will be much more understandable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …[Therefore,] making it easy to read makes it easier to write.”&lt;br&gt;&lt;br&gt;
— &lt;strong&gt;Bob Martin&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How important is code readability to you?&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you enjoyed this message, &lt;a href="https://jhall.io/daily"&gt;subscribe&lt;/a&gt; to &lt;u&gt;The Daily Commit&lt;/u&gt; to get future messages to your inbox.&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Jonathan Hall</name>
    </author>
    <id>https://dev.to/tinydevops/your-code-looks-like-chinese-to-me-23ge</id>
    <published>2021-08-16T00:00:00Z</published>
    <updated>2021-08-16T00:00:00Z</updated>
    <category term="codereadability"/>
    <category term="perl"/>
    <category term="c"/>
  </entry>
  <entry>
  <title>Returning multiple values or a list from a subroutine in Perl</title>
  <summary type="html"><![CDATA[<p>
It is really easy to return multiple values from a subroutine in Perl. One just needs to pass the values to the <span class="inline_code">return</span> statement.
<p>
]]></summary>
  <updated>2021-08-15T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/returning-a-list-from-a-subroutine"/>  <id>https://perlmaven.com/returning-a-list-from-a-subroutine</id>
  <content type="html"><![CDATA[<p>
It is really easy to return multiple values from a subroutine in Perl. One just needs to pass the values to the <span class="inline_code">return</span> statement.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6910895443264170537</id>
    <published>2021-08-14T22:19:00.000+02:00</published>
    <updated>2021-08-14T22:19:32.984+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccliv) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.048000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.048000&lt;/strong&gt; on 2021-08-14&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.047008 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.12&lt;/strong&gt; on 2021-08-09&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.11 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JACQUESG/Git-Raw-0.88' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Git::Raw&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl bindings to the Git linkable library (libgit2) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.88&lt;/strong&gt; on 2021-08-08&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.87 was 11 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.30&lt;/strong&gt; on 2021-08-12&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.26 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.21&lt;/strong&gt; on 2021-08-13&lt;/li&gt;  &lt;li&gt;Votes: 459&lt;/li&gt;  &lt;li&gt;Previous version: 9.19 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.51&lt;/strong&gt; on 2021-08-10&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.057' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.057&lt;/strong&gt; on 2021-08-13&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.055 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.60&lt;/strong&gt; on 2021-08-14&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.59 was 2 years, 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.714' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.714&lt;/strong&gt; on 2021-08-09&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 7.713 was 1 month, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.604' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.604&lt;/strong&gt; on 2021-08-09&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.602 was 5 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.076' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.076&lt;/strong&gt; on 2021-08-11&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.075 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6910895443264170537/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliv-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6910895443264170537"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6910895443264170537"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cccliv-11-great-cpan-modules-released.html" title="(cccliv) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3683535139214601981</id>
    <published>2021-08-14T22:14:00.004+02:00</published>
    <updated>2021-08-14T22:16:06.239+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxx) metacpan weekly report - IO::Async </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 35&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/IO::Async"&gt;IO::Async&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/08/14 20:13:11 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::LogFormat::Compiler" target="_blank"&gt;Apache::LogFormat::Compiler&lt;/a&gt; - Compile a log format string to perl-code &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI::Migration" target="_blank"&gt;DBI::Migration&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Iterator::Merger" target="_blank"&gt;Iterator::Merger&lt;/a&gt; - an iterator to efficiently mergesort iterators&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Leds" target="_blank"&gt;Mojo::Leds&lt;/a&gt; - Leds aka Light Environment (emi) for Development System based on Mojolicious&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad::SlotAttr::Isa" target="_blank"&gt;Object::Pad::SlotAttr::Isa&lt;/a&gt; - apply class type constraints to Object::Pad slots&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract::Pg" target="_blank"&gt;SQL::Abstract::Pg&lt;/a&gt; - PostgreSQL features for SQL::Abstract&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=148)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Osprey" target="_blank"&gt;CLI::Osprey&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::COW" target="_blank"&gt;Data::COW&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Fake" target="_blank"&gt;Data::Fake&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Object" target="_blank"&gt;Data::Object&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Error" target="_blank"&gt;DBIx::Error&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/enum" target="_blank"&gt;enum&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/EventStore::Tiny" target="_blank"&gt;EventStore::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+3=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Interface" target="_blank"&gt;IO::Interface&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Declare" target="_blank"&gt;Keyword::Declare&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::SQLite" target="_blank"&gt;Minion::Backend::SQLite&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=459)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=382)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Launcher" target="_blank"&gt;Proc::Launcher&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Autobox" target="_blank"&gt;Shell::Autobox&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=134)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Template::Simple" target="_blank"&gt;Text::Template::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3683535139214601981/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3683535139214601981"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3683535139214601981"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/08/cdlxxx-metacpan-weekly-report.html" title="(cdlxxx) metacpan weekly report - IO::Async "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#524 - Object::Pad</title>
    <link rel="alternate" href="https://perlweekly.com/archive/524.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>It is no longer a secret that I am the biggest fan of the <a href="https://github.com/Ovid/Cor/wiki">Corinna</a> project, headed by Curtis Poe. The motto of the project tells you everything you need to know about it, "Good enough" is not good enough. Having said that we still have to wait for the final push by the team behind the project.</p>
<p>What shall we do in the meantime?</p>
<p>Well, we are encouraged to give <a href="https://metacpan.org/pod/Object::Pad">Object::Pad</a> a try. Paul Evans is the man behind this distribution. A fellow member of Team PWC, Cheok-Yin Fung, wrote a blog post, <a href="http://blogs.perl.org/users/c_y_fung/2020/09/oo-linked-lists-in-perl.html">OO linked lists in Perl</a>, last year (25th Sep 2020 to be precise). She updated this blog post recently and added another implementation using Object::Pad. This is what I call serious hacking. I have one more similar story to share with you as shared in a <a href="https://phoenixtrap.com/2021/08/03/whats-next-oo-perl/">blog post</a> by Mark Gardner. In this post, Mark shared his experience dealing with Object::Pad. With so much going on about Object::Pad, I gave myself a week to get things in place. But the week went past without any results unfortunately. Don't get me wrong, I am not giving up yet. I will get my hands dirty and share my experience with everyone. In fact, Dave Cross, suggested I should include Object::Pad in the book I am currently working on. Currently the book has solutions implemented in traditional OO and Moo only. I will definitely add Object::Pad in the second revision soon after, promise.</p>
<p>Do you have any stories to share with regard to Object::Pad? If yes then please do share them with us. Or if you haven't tried it then why not give it a go and make-over your existing project to use Object::Pad.</p>
<p>Last but not least, did you attend <a href="https://conf.raku.org/">The Raku Conference</a>? If not then you can still watch the recordings of the three-day event. I also gave a short talk (30 minutes) on day three about "Making of Raku Developer".</p>
<p>Enjoy the school holiday period with your loved ones.</p></div>
    </content>
    <id>https://perlweekly.com/archive/524.html</id>
    <published>2021-08-09T10:00:00Z</published>
    <updated>2021-08-09T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Binary search in Perl array</title>
  <summary type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></summary>
  <updated>2021-08-08T10:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/binary-search-in-perl-array"/>  <id>https://perlmaven.com/binary-search-in-perl-array</id>
  <content type="html"><![CDATA[<p>
Binary search is one of the basic algorithms of computer sciences. It goes like this:
<p>
Given a sorted(!) array of strings and a single string, what is the fastest way to find the location of the string?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Grants: July 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_july_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-08-07:/post/grants_july_2021_votes</id>
  <published>2021-08-07T12:42:34</published>
  <updated>2021-08-07T12:42:34</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the July 2021 round. One grant request was submitted: Grant Proposal: Maintaining Perl 5 Core VOTING RESULTS: Approved. 7 YES vote 0 NO votes We accept proposals throughout the year; our next round of review will begin in July. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit our donations page. We 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the July 2021 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl_5_dave_mitchell">Grant Proposal: Maintaining Perl 5 Core</a> (USD 21,000)</h4>

<p>VOTING RESULTS: Approved. 7 YES vote (35 points), 0 NO votes</p>

<p>We accept proposals throughout the year; our next round of review will begin in July. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#523 - How to improve your Perl?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/523.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>There were not many posts this week, but some of them were really interesting.</p>
<p>Personally I got a bit overwhelmed with work. It is very interesting that there are organizations where people don't know how to use git properly, where they hardly have any tests and no CI is running, but they already have Kubernetes set up because some consultant thought that would be cool to use it.</p>
<p>On one hand it makes me angry that people don't introduce testing, CI, and CD early in the development process. It would be a lot cheaper, smoother and faster for them, but on the other hand I also like trying to figure out how things happen to work. Sometimes, it seems, by total chance.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/523.html</id>
    <published>2021-08-02T10:00:00Z</published>
    <updated>2021-08-02T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Ugly Numbers / Square Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/01#pwc123" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt;= 1. Write a script to find the $nth Ugly Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub is_ugly{
    my($x) = @_; 
    for my $factor (prime_factor($x)){
        return false if $factor != 2 &amp;&amp; $factor != 3 &amp;&amp; $factor !=5; 
    }
    return true; 
}

sub nth_ugly{
    my($n) = @_;  
    return 1 if $n == 1; 
    my $ugly_count = 1; 
    my $i = 1;  
    do{
        $i++;
        $ugly_count++ if is_ugly($i);   
    }while($ugly_count != $n);
    return $i;    
} 

MAIN:{
    my($N);
    $N = 7; 
    print nth_ugly($N) . "\n"; 
    $N = 10; 
    print nth_ugly($N) . "\n"; 
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
12
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I also worked this problem in Prolog and C++ and, unsurprisingly, the Perl code is the 
shortest. All three solutions followed the same approach but Perl's syntax is naturally 
less verbose without making comprehension of the code more difficult.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given co-ordinates for four points. Write a script to find out if the given 
four points form a square.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;  
use Math::GSL::Vector;

sub unique{
    my %seen;
    return grep {!$seen{$_}++} @_;
} 

sub is_square{
    my @points = @_;
    ##
    # Definitely a square if there are only 2 x and 2 y values. 
    ##
    my @x = unique(map {$_-&gt;[0]} @points);  
    my @y = unique(map {$_-&gt;[1]} @points);  
    return true if @x == 2 &amp;&amp; @y == 2;
    ##
    # sort the points and compute side lengths  
    ##  
    my @sorted_x = sort {$a-&gt;[0] &lt;=&gt; $b-&gt;[0]} @points;  
    my @sorted_y = sort {$a-&gt;[1] &lt;=&gt; $b-&gt;[1]} @points;  
    my($s, $t, $u, $v) = ($sorted_y[@sorted_y - 1], $sorted_x[@sorted_x - 1], $sorted_y[0], $sorted_x[0]);    
    return false if $s-&gt;[0] + $u-&gt;[0] != $t-&gt;[0] + $v-&gt;[0];  
    return false if $s-&gt;[1] + $u-&gt;[1] != $t-&gt;[1] + $v-&gt;[1];  
    return false if $s-&gt;[1] - $u-&gt;[1] != $t-&gt;[0] - $v-&gt;[0];  
    ##
    # compute angles 
    ##
    my $dv_st = new Math::GSL::Vector([$s-&gt;[0] - $t-&gt;[0], $s-&gt;[1] - $t-&gt;[1]]); 
    my $dv_tu = new Math::GSL::Vector([$t-&gt;[0] - $u-&gt;[0], $t-&gt;[1] - $u-&gt;[1]]); 
    my $dv_uv = new Math::GSL::Vector([$u-&gt;[0] - $v-&gt;[0], $u-&gt;[1] - $v-&gt;[1]]); 
    my $dv_vs = new Math::GSL::Vector([$v-&gt;[0] - $s-&gt;[0], $v-&gt;[1] - $s-&gt;[1]]); 
    return false if $dv_st * $dv_tu != 0;
    return false if $dv_tu * $dv_uv != 0;
    return false if $dv_uv * $dv_vs != 0;
    return true;  
}



MAIN:{
    my @points;
    @points = ([10, 20], [20, 20], [20, 10], [10, 10]);  
    print is_square(@points) . "\n";  
    @points = ([12, 24], [16, 10], [20, 12], [18, 16]);  
    print is_square(@points) . "\n";  
    @points = ([-3, 1], [4, 2], [9, -3], [2, -4]);  
    print is_square(@points) . "\n";  
    @points = ([0, 0], [2, 1], [3, -1], [1, -2]);  
    print is_square(@points) . "\n";  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The logic of determining if the points determine a square is clear to most people familiar
with geometry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are there only two each of X and Y co-ordinates? Then that is enough to establish that
we have a square.
&lt;/li&gt;
&lt;li&gt;Otherwise, make sure the side lengths are all equivalent and that the angles between the
sides are all 90 degrees.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code in &lt;code&gt;is_square()&lt;/code&gt; works through that logic with multiple exit points set up along 
the way. Perhaps this is a bit odd looking but I have been doing a lot of logic 
programming in Prolog recently and thought to give a somewhat more logical style to this
perl solution to this problem. Developing a more logical style for Perl is a bit of a work
in progress for me, I will admit!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;unique&lt;/code&gt; function (and it's clever use of &lt;code&gt;grep&lt;/code&gt;!) was taken from a 
&lt;a href="https://perlmaven.com/unique-values-in-an-array-in-perl"&gt;PerlMaven article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-123/"&gt;Challenge 123&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24078.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/24559.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Rhombus.html"&gt;Rhombus&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc123</id>
    <published>2021-08-01T17:00:00-04:00</published>
    <updated>2021-08-01T17:00:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PERLANCAR-Dummy-POD">Acme-PERLANCAR-Dummy-POD</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Dummy distribution for various POD testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ClipboardUtils">App-ClipboardUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI utilities related to clipboard</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DiffPDFText">App-DiffPDFText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Diff the text of two PDF documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Easer">App-Easer</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Simplify writing (hierarchical) CLI applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleFeaturesUtils">App-ModuleFeaturesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>CLI Utilities related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Phoebe">App-Phoebe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>4.01</td>
<td>4.01</td>
<td>a Gemini-based wiki</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-arxiv2bib">App-arxiv2bib</a></td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>0.1</td>
<td>0.2</td>
<td>Extract bibliographic data from the arXiv API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-efm_perl">App-efm_perl</a></td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>0.01</td>
<td>1.0.0</td>
<td>It's new $module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-grep-url">App-grep-url</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Print lines having URL(s) (optionally of certain criteria) in them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-quickabspath">App-quickabspath</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Print the absolute path</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-intrange">App-seq-intrange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Like seq, but accepts intrange specification (e.g. 1,5-10,15)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-seq-numseq">App-seq-numseq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like seq, but accepts numseq specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-List-Utils-MoveElement">Bencher-Scenarios-List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Scenarios to benchmark List::Utils::MoveElement</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Book-Collate">Book-Collate</a></td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Tools to Collate and Report Text Documents</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-Session-Store-Redis-Fast">Catalyst-Plugin-Session-Store-Redis-Fast</a></td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1.000</td>
<td>1.001</td>
<td>lib/Catalyst/Plugin/Session/Store/Redis/Fast.pm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clipboard-Any">Clipboard-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Common interface to clipboard manager functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Messages">Cucumber-Messages</a></td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>17.0.0</td>
<td>17.0.0</td>
<td>A library for (de)serializing Cucumber protocol messages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-ManipX-Almanac">Date-ManipX-Almanac</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.000_901</td>
<td>0.001_01</td>
<td>Add almanac date/time functionality (sunrise, etc.) to Date::Manip</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-Format-JP">DateTime-Format-JP</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>Japanese DateTime Parser and Formatter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Desktop-Open">Desktop-Open</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Open a file or URL in the user's preferred application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Prereqs-From-cpmfile">Dist-Zilla-Plugin-Prereqs-From-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Register prereqs from cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-EA">Evo-EA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Perl extension for evolutionary algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-GA">Evo-GA</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.13</td>
<td>Perl extension for genetic algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Immune">Evo-Immune</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for GA for the biological immune system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Inference">Evo-Inference</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>v0.1.11</td>
<td>Perl extension for an Inference engine for Evolutionary Algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-MoreUtils">File-Temp-MoreUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Provide more routines related to creating temporary files/dirs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Timer">Future-Timer</a></td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>timer implemented as Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Getopt-EX-Hashed">Getopt-EX-Hashed</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9905</td>
<td>Hash store object automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphite-Simple">Graphite-Simple</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.02</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IntRange-Iter">IntRange-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Generate a coderef iterator from an int range specification (e.g. '1,5-10,20')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSONSchema-Validator">JSONSchema-Validator</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Validator for JSON Schema Draft4 and OpenAPI Specification 3.0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-Go-Mod">Lang-Go-Mod</a></td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>parse and model go.mod files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Utils-MoveElement">List-Utils-MoveElement</a></td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Move elements of a list, optionally with XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Cryptarithm">Math-Cryptarithm</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.02</td>
<td>0.02</td>
<td>Solving simple cryptarithm.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-FeaturesUtil-Get">Module-FeaturesUtil-Get</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Get a feature</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-cpmfile">Module-cpmfile</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Parse cpmfile</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Leds">Mojo-Leds</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>1.02</td>
<td>Leds aka Light Environment (emi) for Development System based on Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-MongoDBv2">Mojolicious-Plugin-MongoDBv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Mongodbv2">Mojolicious-Plugin-Mongodbv2</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.02</td>
<td>1.00</td>
<td>MongoDB v2 driver in Mojolicious</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Restify-OtherActions">Mojolicious-Plugin-Restify-OtherActions</a></td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Mojolicious plug-in which extends Restify with more actions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Route">Mojolicious-Plugin-Route</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Plugin to loader files of routes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-MouseTypeConstraints">MooX-MouseTypeConstraints</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Mouse type constraints for Moo</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Music-Guidonian">Music-Guidonian</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a "Guidonian Hand" melodic phrase generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Magallanes">Net-Magallanes</a></td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>encapsulation of API calls to RIPE Atlas project.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NumSeq-Iter">NumSeq-Iter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Generate a coderef iterator from a number sequence specification (e.g. '1,3,5,…,101')</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Final">Object-Pad-SlotAttr-Final</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare Object::Pad slots readonly after construction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-SlotAttr-Trigger">Object-Pad-SlotAttr-Trigger</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>invoke an instance method after a :writer accessor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Ozeki-Libs-Rest">Ozeki-Libs-Rest</a></td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>You can use this module to send SMS messages with the Ozeki SMS Gateway using Perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-Args-Common">Perinci-Sub-Args-Common</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>A collection of common subroutine argument specifications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-PrereqScanner-Scanner-TestNeeds">Perl-PrereqScanner-Scanner-TestNeeds</a></td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>0.001</td>
<td>0.001</td>
<td>scan for modules loaded with Test::Needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/QRCode-Base45">QRCode-Base45</a></td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Base45 encoding used in QR codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-DefHash">Regexp-Pattern-DefHash</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to DefHash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-IntRange">Regexp-Pattern-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-Pattern-URI">Regexp-Pattern-URI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Regexp patterns related to URI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SDL2-FFI">SDL2-FFI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.05</td>
<td>FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Manual">Sah-Manual</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Documentation for Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Bencher">Sah-Schemas-Bencher</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>1.054.0</td>
<td>1.054.1</td>
<td>Sah schemas for Bencher</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-CPANModules">Sah-Schemas-CPANModules</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Sah schemas for Acme::CPANModules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-IntRange">Sah-Schemas-IntRange</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Sah schemas for various integer ranges</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-ModuleFeatures">Sah-Schemas-ModuleFeatures</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas related to Module::Features</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-NumSeq">Sah-Schemas-NumSeq</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah schemas for number sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Deprecate">Sub-Deprecate</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Assists in providing deprecation notices to subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TCOD">TCOD</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.009</td>
<td>FFI bindings for libtcod</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Fixture-Teng">Test-Fixture-Teng</a></td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>0.01</td>
<td>0.01</td>
<td>load fixture data to storage for Teng</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mojo-Role-Routes">Test-Mojo-Role-Routes</a></td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Write Mojo tests using named routes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-PO">Text-PO</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Read and write PO files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-QuacksLike">Types-QuacksLike</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001001</td>
<td>Check for object providing all methods from a class or role</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-EN-StopWords">WordList-EN-StopWords</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>English stop words</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>34</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>26</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/EBRUNI">EBRUNI</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DSTROMA">DSTROMA</a></td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/EHUELS">EHUELS</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MASIUCHI">MASIUCHI</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LEAM">LEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/SPAJAI">SPAJAI</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/YENYA">YENYA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/DELPHINUS">DELPHINUS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HUGUEI">HUGUEI</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BCLAWSIE">BCLAWSIE</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ZUSY">ZUSY</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/BDIII">BDIII</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/SLITTL">SLITTL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-PERLANCAR-Dummy-POD PERLANCAR 0.001 0.005 Dummy distribution for various POD testing App-ClipboardUtils PERLANCAR 0.001 0.001 CLI utilities related to clipboard App-DiffPDFText PERLANCAR 0.001 0.002 Diff the text of two PDF documents App-Easer POLETTIX 0.001 0.002 Simplify writing (hierarchical) CLI applications App-ModuleFeaturesUtils PERLANCAR 0.001 0.003 CLI Utilities related to Module::Features App-Phoebe SCHROEDER … <a href="https://perlancar.wordpress.com/2021/08/01/list-of-new-cpan-distributions-jul-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1949</id>
    <published>2021-08-01T00:01:20Z</published>
    <updated>2021-08-01T00:01:20Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>How deep is a recursion in Perl?</title>
  <summary type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></summary>
  <updated>2021-07-31T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/how-deep-is-the-recursion"/>  <id>https://perlmaven.com/how-deep-is-the-recursion</id>
  <content type="html"><![CDATA[<p>
We have discussed <a href="/recursion">recursion in Perl</a> and the problem with
<a href="/deep-recursion-on-subroutine">recursion that is too deep</a>, but how can you find out the current depth
of the recursion?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#522 - Promote Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/522.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I am sure many of you are aware of &lt;a href="https://www.outreachy.org"&gt;Outreachy&lt;/a&gt;. It all started with GNOME's Women's Summer Outreach Program (WSOP) in 2006. The idea was to encourage women's participation in Open Source projects. In 2009, the GNOME community revived the program to encourage more women to contribute to GNOME and renamed it to GNOME Outreach Program for Women. It became a very popular program in no time and successfully brought in more women into the fold. The program was further expanded with more organisations joining in e.g. Fedora, Mozilla, JBoss, OpenStack, Subversion etc. With the additions, in 2013, the program was renamed to the Free and Open Source Software Outreach Program. At one point, there were 16 organizations involved in this program. In 2015, the program was again renamed to Outreachy.&lt;/p&gt;
&lt;p&gt;Did I mention Perl in the above discussion?&lt;/p&gt;
&lt;p&gt;Well, in 2014, TPF sponsored an internship for Pattawan Kaewduangdee to work on MetaCPAN under the mentorship of Olaf Alders as a part of the Outreach Program for Women. There is another name that caught my eye, Upasana Shukla. I came across &lt;a href="https://upasana.me/2013/05/18/meta-cpan-debian-wikimedia-twisted-dancer-moose/"&gt;a blog post&lt;/a&gt; by Upasana where she mentioned how GNOME's Outreach Program for Women helped her get into the Perl fold. If you look at the &lt;a href="https://www.outreachy.org/alums/2021-05/"&gt;list of interns&lt;/a&gt; from the Indian subcontinent (India, Pakistan, Bangladesh, Nepal, Sri Lanka) it is amazing. In recent years, TPF has sponsored &lt;a href="https://world.openfoodfacts.org"&gt;Open Food Facts&lt;/a&gt; projects for Outreachy. In 2020, Areesha Tariq, from Pakistan successfully got the internship to work on the Open Food Facts project. Please check out this &lt;a href="https://medium.com/@areeshatariq02/get-a-remote-and-paid-internship-my-outreachy-experience-482a6cfc0564"&gt;blog post&lt;/a&gt; by Areesha sharing her experience. It didn't stop there, a few weeks ago, TPF announced another intern, Rosheen Naeem, again from Pakistan, to work on the Open Food Facts project. You should check out her recent &lt;a href="https://roshnaeem.medium.com/everybody-struggles-f6dbe33293b4"&gt;blog post&lt;/a&gt; about her journey. It is very inspiring.&lt;/p&gt;
&lt;p&gt;I would like to thank TPF for supporting the Perl projects and Outreachy.&lt;/p&gt;
&lt;p&gt;I can tell you from my own experience, we have great talent in the Indian Subcontinent. I wish more and more organisations would come forward and sponsor interns from these regions. When I started &lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge - Perl &amp; Raku&lt;/a&gt;, (a.k.a Perl Weekly Challenge), I was hoping to tap into the talent pool from this region, specially young college students. As the tagline says "You do not have to be an expert" to take part in the weekly challenge. Although we do have handful of students from Russia in the team. I am glad that, at least, we have built a platform where geeks from around the world come and share their experiences every week. Maybe one day we will have sponsors to help us reach out to young talent and bring new energy into the Perl community. Sometimes I wonder why we have never had a Perl Conference on the Indian subcontinent just like we have here in Europe and America. It shouldn't be too hard to hold one as these days everything is online. We could invite guest speakers from across the globe to address the talent in the region. Is there anyone out there willing to help us orgranise Perl Conference?&lt;/p&gt;
&lt;p&gt;A humble request to all fellow citizens of the United Kingdom, please don't listen to Boris Johnson (Prime Minister of the UK) and keep wearing masks in public and maintain social distancing.&lt;/p&gt;
&lt;p&gt;Enjoy rest of the newsletter until then.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/522.html</id>
    <published>2021-07-26T10:00:00Z</published>
    <updated>2021-07-26T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Average of Stream / Basketball Points</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/07/25#pwc122" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a stream of numbers, @N. Write a script to print the average of the stream 
at every point.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub moving_average{
    my $n = 0;
    my $sum = 0;
    {
        $n += 1;
        $sum += shift;
        print $sum / $n;
        print ", " if @_;
        redo if @_;
    }
    print "\n";
}


MAIN:{
    my @N;
    for(my $i = 10; $i &lt; 1_000_000; $i += 10){
        push @N, $i;
    }
    moving_average(@N);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, &lt;OUTPUT TRUNCATED&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Typically when one thinks of a &lt;em&gt;stream&lt;/em&gt; the idea is of a virtually endless source of data.
Or, at least, data which is handled as if this were the case. Here the "stream" is 
simulated by a long (one million items) array.&lt;/p&gt;

&lt;p&gt;The computation of the average as the simulated stream is evaluated is done using a &lt;code&gt;redo&lt;/code&gt;
loop. I would think it is fair to say that typically my code is somewhat verbose. I prefer
to be fairly explicit in that way to enhance readability. Here, however, I try to be more
terse. The "stream" is evaluated by shifting values off the array passed to the function.
The array argument is also used to determine if the block should be repeated, and also
to format the output. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a score $S. You can win basketball points e.g. 1 point, 2 points and 3 
points. Write a script to find out the different ways you can score $S.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub basketball_points{
    my($total) = @_;
    my %points;
    my @valid_points;
    $points{"1"} = "1";
    $points{"2"} = "2";
    $points{"3"} = "3";
    while((keys %points) &gt; 0){
        my %updated_points = ();
        for my $points (keys %points){
            my @points = split(/,/, $points);
            for my $point (1 .. 3){
                my $point_sum = unpack("%32I*", pack("I*",  (@points, $point)));
                push @valid_points, [@points, $point] if $point_sum == $total;
                $updated_points{join(",", (@points, $point))} = $point_sum if $point_sum &lt; $total;
            }
        }
        %points = %updated_points;
    }
    return @valid_points;
}

MAIN:{
    my $S;
    $S = 4;
    print "\$S = $S\n";
    my @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
    $S = 5;
    print "\n\$S = $S\n";
    @point_combinations = basketball_points($S);
    for my $points (basketball_points($S)){
        print join(" ", @{$points}) . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
$S = 4
1 3
2 2
3 1
1 2 1
1 1 2
2 1 1
1 1 1 1

$S = 5
3 2
2 3
3 1 1
2 1 2
1 3 1
2 2 1
1 2 2
1 1 3
1 2 1 1
1 1 1 2
1 1 2 1
2 1 1 1
1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here borrows heavily from the solution to the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117"&gt;triangle problem&lt;/a&gt; from 
Challenge 117. This is a &lt;em&gt;dynamic programming&lt;/em&gt; style solution which builds and updates
lists of potential point sequences. Uniqueness is guaranteed by saving the lists as hash
keys, in a command separated values string format. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-122/"&gt;Challenge 122&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.topcoder.com/thrive/articles/Dynamic%20Programming:%20From%20Novice%20to%20Advanced"&gt;Dynamic Programming&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc122</id>
    <published>2021-07-25T18:53:00-04:00</published>
    <updated>2021-07-25T18:53:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
