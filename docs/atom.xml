<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-01-20T20:39:28Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>This Week in PSC (094)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/01/this-week-in-psc-094.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11005</id>
    <published>2023-01-20T22:28:36Z</published>
    <updated>2023-01-20T22:30:24Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>PSC met today, all three of us attended.</p>

<p>We discussed:</p>

<ul>
<li>HAARG's <tt>map my $x</tt> RFC. Overall thoughts are good, with one or two minor questions we'll add as comments.
<li>Whether the additions to <tt>join()</tt> as part of RFC0013 should be gated by some sort of opt-in flag, so as to avoid surprises. Either a feature flag for the caller of <tt>join()</tt>, or a <tt>use overload</tt> import option.
<li>Maybe renaming the RFC process itself (because of the ambiguity with IETF's RFC) and improving the numbering system. More discussion needed.
</ul>]]>
        
    </content>
</entry>
  <entry>
    <title> OTOBO supports the German Perl/Raku-Workshop</title>
    <link rel="alternate" href="https://blogs.perl.org/users/max_maischein/2023/01/otobo-supports-the-german-perlraku-workshop.html"/>
    <id>tag:blogs.perl.org,2023:/users/max_maischein//227.11004</id>
    <published>2023-01-20T13:16:06Z</published>
    <updated>2023-01-20T13:19:48Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>We are happy to announce that Rother OSS again supports the German Perl/Raku-Workshop as a sponsor.</p>

<p>Since 2011, <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a>, based in southern Germany and with a team throughout Germany, has relied on the combination of an open source ticket system and business services from experts. Specifically: consulting, development and support for the free OTRS versions.</p>]]>
        <![CDATA[<p>Since 2011, <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a>, based in southern Germany and with a team throughout Germany, has relied on the combination of an open source ticket system and business services from experts. Specifically: consulting, development and support for the free OTRS versions.</p>

<p>In response to their changed release strategy, we released our fork <a href="https://otobo.de/">OTOBO</a> at the beginning of 2020.</p>

<p>It is again 100% free and open source, builds on a strong community and combines broad functionality in the standard with a modern service portal.</p>

<p>Seit 2011 setzt die <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a> mit Sitz in Süddeutschland und deutschlandweitem Team auf die Kombination aus Open-Source-Ticketsystem und Business Services vom Experten. Konkret: Consulting, Entwicklung und Support zu den freien OTRS-Versionen.</p>

<p>Als Reaktion auf deren geänderte Release-Strategie haben wir Anfang 2020 unseren Fork <a href="https://otobo.de/">OTOBO</a>veröffentlicht.</p>

<p>Der ist wieder 100% frei und Open Source, baut auf eine starke Community und kombiniert breite Funktionalität im Standard mit einem modernen Serviceportal.<br />
</p>]]>
    </content>
</entry>
  <entry>
  <title>Retirement Announcement - Dave Rolsky</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/retirementdave"/>
  <id>tag:news.perlfoundation.org,2023-01-20:/post/retirementdave</id>
  <published>2023-01-20T13:03:53</published>
  <updated>2023-01-20T13:03:53</updated>
  <summary>
  <![CDATA[
     After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed. 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/cc70f58576aabcc208602bd2e0339e3660864805/clock.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>After several years of service to The Perl/Raku Foundation, Dave Rolsky is retiring. The board thanks Dave for all of his work, he will be missed. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 200: Arithmetic Slices and Seven Segment Display</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/01/perl-weekly-challenge-200-arithmetic-slices-and-seven-segment-display.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11003</id>
    <published>2023-01-18T23:12:38Z</published>
    <updated>2023-01-19T19:34:29Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 200 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-200/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days from now (on January 22, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Arithmetic Slices</h2>

<p><em>You are given an array of integers.</em></p>

<p><em>Write a script to find out all Arithmetic Slices for the given array of integers.</em></p>

<blockquote>
  <p><em>An integer array is called arithmetic if it has at least 3 elements and the differences between any three consecutive elements are the same.</em></p>
</blockquote>

<p><em>Example 1</em></p>

<pre><code>Input: @array = (1,2,3,4)
Output: (1,2,3), (2,3,4), (1,2,3,4)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @array = (2)
Output: () as no slice found.
</code></pre>

<h3>Arithmetic Slices in Raku</h3>

<p>The <code>find_slices</code> subroutine loops over the input array, computes the difference (<code>$gap</code>) between any two consecutive integers and checks whether the same difference can be found between the next integers. </p>

<pre><code>sub find_slices (@in) {
    my @out;
    return @out if @in.elems &lt; 3;
    for 0..@in.end - 2 -&gt; $i {
        my $gap = @in[$i+1] - @in[$i];
        for $i+2..@in.end -&gt; $j {
            last if @in[$j] - @in[$j-1] != $gap;
            push @out, @in[$i..$j];
        }
    }
    return @out;
}
for &lt;1 2 3 4&gt;, &lt;2 5&gt;, &lt;3 5 7 9&gt;, &lt;2 5 9&gt; -&gt; @test {
    say (~@test).fmt("%-10s =&gt; "), find_slices @test;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./arithmetic-slices.raku
1 2 3 4    =&gt; [(1 2 3) (1 2 3 4) (2 3 4)]
2 5        =&gt; []
3 5 7 9    =&gt; [(3 5 7) (3 5 7 9) (5 7 9)]
2 5 9      =&gt; []
</code></pre>

<h3>Arithmetic Slices in Perl</h3>

<p>This a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub find_slices  {
    my @in = @_;
    my @out;
    # return [] if @in &lt; 3;
    for my $i (0..$#in - 2) {
        my $gap = $in[$i+1] - $in[$i];
        for my $j ($i+2..$#in) {
            last if $in[$j] - $in[$j-1] != $gap;
            push @out, [@in[$i..$j]];
        }
    }
    return @out ? @out : [];
}
for my $test ([&lt;1 2 3 4&gt;], [&lt;2 5&gt;], [&lt;3 4 5 6 8&gt;],
              [&lt;3 5 7 9&gt;], [&lt;2 5 9&gt;]) {
    printf "%-10s =&gt; ", "@$test";
    say map "(@$_) ", find_slices @$test;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./arithmetic-slices.pl
1 2 3 4    =&gt; (1 2 3) (1 2 3 4) (2 3 4)
2 5        =&gt; ()
3 4 5 6 8  =&gt; (3 4 5) (3 4 5 6) (4 5 6)
3 5 7 9    =&gt; (3 5 7) (3 5 7 9) (5 7 9)
2 5 9      =&gt; ()
</code></pre>

<h2>Task 2: Seven Segment 200</h2>

<p><em>A seven segment display is an electronic component, usually used to display digits. The segments are labeled &#8216;a&#8217; through &#8216;g&#8217; as shown:</em></p>

<p><img alt="lcd-display_week200.png" src="https://blogs.perl.org/users/laurent_r/lcd-display_week200.png" width="71" height="135" class="mt-image-none" style="" /></p>

<p><em>The encoding of each digit can thus be represented compactly as a truth table:</em></p>

<pre><code>my @truth = qw&lt;abcdef bc abdeg abcdg bcfg acdfg a cdefg abc abcdefg abcfg&gt;;
</code></pre>

<p><em>For example, <code>$truth[1] = ‘bc’</code>. The digit 1 would have segments ‘b’ and ‘c’ enabled.</em></p>

<p><em>Write a program that accepts any decimal number and draws that number as a horizontal sequence of ASCII seven segment displays, similar to the following:</em></p>

<pre><code>-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
</code></pre>

<p><em>To qualify as a seven segment display, each segment must be drawn (or not drawn) according to your @truth table.</em></p>

<p><em>The number &#8220;200&#8221; was of course chosen to celebrate our 200th week!</em></p>

<p>For the 200th week of the Perl Weekly Challenge, Ryan J Thompson, the author of this task, has decided to bring us decades backward, back in the 1970s when they started to be widely used (remember lieutenant Theo Kojak&#8217;s LED watch?). We&#8217;re actually driven back more than decades, since the first seven-segment display devices date as far back as 1903 (but obviously did not use LEDs).</p>

<p>The difficulty in this task is that, for ASCII art display, we need to slice the digits into horizontal lines. I&#8217;ve decided not to use the suggested truth table, as this is quite unpractical. Instead, I&#8217;m using a table (<code>@nums</code>) dividing each digit into seven horizontal lines</p>

<h3>Seven Segment Display in Raku</h3>

<pre><code>my %c;                   # ascii coding of digit's slices
%c&lt;h&gt; = "-" x 7;         # Horizontal line
%c&lt;l&gt; = "|      ";       # Vertical bar, left
%c&lt;r&gt; = "      |";       # Vertical bar, right
%c&lt;2&gt; = "|     |";       # 2 vertical bars
%c&lt;n&gt; = " " x 7;         # empty horizontal line

my @nums =               # Digit horizontal slices
    &lt;h 2 2 n 2 2 h&gt;,     # 0
    &lt;n r r n r r n&gt;,     # 1
    &lt;h r r h l l h&gt;,     # 2
    &lt;h r r h r r h&gt;,     # 3
    &lt;n l l h 2 2 n&gt;,     # 4
    &lt;h l l h r r h&gt;,     # 5
    &lt;n l l h 2 2 h&gt;,     # 6
    &lt;h r r n r r n&gt;,     # 7
    &lt;h 2 2 h 2 2 h&gt;,     # 8
    &lt;h 2 2 h r r n&gt;;     # 9

sub display ($num) {
    my @digits = $num.comb;
    for 0..6 -&gt; $l {     # Lines 0 to 6 iof the display
        say join "  ", map {%c{@nums[$_][$l]}}, @digits;
    }
}

for &lt;200 2023 01234 56789&gt; -&gt; $test {
  display $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./seven_segments.raku

-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
-------  -------  -------  -------
      |  |     |        |        |
      |  |     |        |        |
-------           -------  -------
|        |     |  |              |
|        |     |  |              |
-------  -------  -------  -------
-------           -------  -------
|     |        |        |        |  |     |
|     |        |        |        |  |     |
                  -------  -------  -------
|     |        |  |              |        |
|     |        |  |              |        |
-------           -------  -------  -------
|        |              |  |     |  |     |
|        |              |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------
</code></pre>

<p>Note that digits 6 and 9 could have an additional horizontal bar and 7 an additional vertical bar:</p>

<pre><code>@nums[6] = &lt;h l l h 2 2 h&gt;;    # 6
@nums[7] = &lt;h 2 2 n r r n&gt;;    # 7
@nums[9] = &lt;h 2 2 h r r h&gt;;    # 9
</code></pre>

<p>This allegedly provides a more legible display (for some eyes, at least). Thus, the test line with the last five digits would be displayed like so:</p>

<pre><code>-------  -------  -------  -------  -------
|        |        |     |  |     |  |     |
|        |        |     |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------  -------
</code></pre>

<h2>Seven Segment Display in Perl</h2>

<p>This a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my %c;                   # ascii coding of digit's slices
$c{'h'} = "-" x 7;       # Horizontal line
$c{'l'} = "|      ";     # Vertical bar, left
$c{'r'} = "      |";     # Vertical bar, right
$c{'2'} = "|     |";     # 2 vertical bars
$c{'n'} = " " x 7;       # empty horizontal line

my @nums = (             # Digit hoirizontal slices
    [&lt;h 2 2 n 2 2 h&gt;],   # 0
    [&lt;n r r n r r n&gt;],   # 1
    [&lt;h r r h l l h&gt;],   # 2
    [&lt;h r r h r r h&gt;],   # 3
    [&lt;n 2 2 h r r n&gt;],   # 4
    [&lt;h l l h r r h&gt;],   # 5
    [&lt;n l l h 2 2 h&gt;],   # 6
    [&lt;h r r n r r n&gt;],   # 7
    [&lt;h 2 2 h 2 2 h&gt;],   # 8
    [&lt;h 2 2 h r r n&gt;]);  # 9


sub display{
    my @digits = split //, shift;
    for my $l (0..6) {
        say join "  ", map {$c{$nums[$_][$l]}} @digits;
    }
}

for my $test (&lt;200 2023 01234 56789&gt;) {
  display $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./seven_segments.pl
-------  -------  -------
      |  |     |  |     |
      |  |     |  |     |
-------                  
|        |     |  |     |
|        |     |  |     |
-------  -------  -------
-------  -------  -------  -------
      |  |     |        |        |
      |  |     |        |        |
-------           -------  -------
|        |     |  |              |
|        |     |  |              |
-------  -------  -------  -------
-------           -------  -------
|     |        |        |        |  |     |
|     |        |        |        |  |     |
                  -------  -------  -------
|     |        |  |              |        |
|     |        |  |              |        |
-------           -------  -------
-------           -------  -------  -------
|        |              |  |     |  |     |
|        |              |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------
</code></pre>

<p>We could use the changes that we did to the Raku program (definition of digits 6, 7, and 9) to presumably improve their legibility:</p>

<pre><code>-------  -------  -------  -------  -------
|        |        |     |  |     |  |     |
|        |        |     |  |     |  |     |
-------  -------           -------  -------
      |  |     |        |  |     |        |
      |  |     |        |  |     |        |
-------  -------           -------  -------
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 29, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Util::H2O and More, during Ordinary Times</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oodler_577/2023/01/post-advent-carolling.html"/>
    <id>tag:blogs.perl.org,2023:/users/oodler_577//3888.11002</id>
    <published>2023-01-18T04:33:05Z</published>
    <updated>2023-01-18T22:13:56Z</updated>
    <author>
        <name>Oodler 577</name>
        
    </author>
    <category term="h2oobjectsooppoop" label="h2o objects oop poop" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oodler_577/">
        <![CDATA[<h1>Background</h1>

<p>During the 2022 <a href="https://perladvent.org/2022/2022-12-06.html">Perl Advent</a>, in particular the entry for <a href="https://perladvent.org/2022/2022-12-06.html">December 06</a>; Perl Advent fans were introduced to a little module called <code>Util::H2O</code>.</p>

<p>A lot has already been said about <code>Util::H2O</code>, and this author uses it a lot in client and production code because it helps produce very clean and maintainable <code>HASH</code> reference <em>heavy</em> code. So much so, that he created the <code>Util::H2O::More</code> module to encapsulate some common tasks and additional capabilities for working between <em>pure</em> Perl data structures and <em>blessed</em> objects that have real data <em>accessors</em>, in a natural and idiomatic way.</p>

<h1>Support for Generic Perl Data Structures</h1>

<p><code>h2o</code> is perfect for dealing with data structures that are made up of strictly <code>HASH</code> references, but it is often the case that useful data structures contain a mix of <code>HASH</code> and <code>ARRAY</code> references. For example, when using databases or web API calls returning <code>JSON</code>, it is often a list of records that is returned. This was the case of the example call that was in the <em>December 06</em> Perl Advent 2022 article. </p>
]]>
        <![CDATA[<p>Recall the original example,</p>

<pre><code>use strict;
use warnings;
use JSON       qw//;
use HTTP::Tiny qw//;
use Util::H2O;    # only exports 'h2o'
my $http     = HTTP::Tiny-&gt;new;
my $response = h2o $http-&gt;get(q{https://jsonplaceholder.typicode.com/users});
if ( not $response-&gt;success ) {
    print STDERR qq{Cannot get list of online persons to watch!\n};
    printf STDERR qq{Web request responded with with HTTP status: %d\n}, $response-&gt;status;
    exit 1;
}
my $json_array_ref = JSON::decode_json( $response-&gt;content );

print qq{lat, lng, name, username\n};
foreach my $person (@$json_array_ref) {

    # objectify each HASH reference at a time
    h2o -recurse, $person;
    printf qq{%5.4f, %5.4f, %s, %s\n},
      $person-&gt;address-&gt;geo-&gt;lat,
      $person-&gt;address-&gt;geo-&gt;lng,
      $person-&gt;name, $person-&gt;username;
}
</code></pre>

<p>Which outputs:</p>

<pre><code>lat, lng, name, username
-37.3159, 81.1496, Leanne Graham, Bret
-43.9509, -34.4618, Ervin Howell, Antonette
-68.6102, -47.0653, Clementine Bauch, Samantha
29.4572, -164.2990, Patricia Lebsack, Karianne
-31.8129, 62.5342, Chelsey Dietrich, Kamren
-71.4197, 71.7478, Mrs. Dennis Schulist, Leopoldo_Corkery
24.8918, 21.8984, Kurtis Weissnat, Elwyn.Skiles
-14.3990, -120.7677, Nicholas Runolfsdottir V, Maxime_Nienow
24.6463, -168.8889, Glenna Reichert, Delphine
-38.2386, 57.2232, Clementina DuBuque, Moriah.Stanton
</code></pre>

<h1>Some New Keywords</h1>

<p>New keywords have been introduced in <code>Util::H2O::More</code>, called <code>d2o</code> and it's <em>undoer</em>, <code>o2d</code> (like <code>o2h</code> is to <code>h2o</code>). Essentially, it traverses a Perl data structure, looking for pure <code>HASH</code> refs that may be potentially contained inside of <code>ARRAY</code> refs, and adds accessors. For <code>ARRAY</code>s, it adds some handy vmethods to make accessing the lists much cleaner (e.g., <code>all</code>).</p>

<p>Without much ado:</p>

<pre><code>use strict;
use warnings;
use JSON            qw//;
use HTTP::Tiny      qw//;
use Util::H2O::More qw/h2o d2o/;
my $http           = HTTP::Tiny-&gt;new;
my $response       = h2o $http-&gt;get(q{https://jsonplaceholder.typicode.com/users});
if ( not $response-&gt;success ) {
    print STDERR qq{Cannot get list of online persons to watch!\n};
    printf STDERR qq{Web request responded with with HTTP status: %d\n}, $response-&gt;status;
    exit 1;
}

# objectify contents of $json_array_ref in one pass
my $json_array_ref = d2o JSON::decode_json( $response-&gt;content );

# $json is an ARRAY reference
foreach my $person ( $json_array_ref-&gt;all ) {
    printf qq{%5.4f, %5.4f, %s, %s\n},
      $person-&gt;address-&gt;geo-&gt;lat,
      $person-&gt;address-&gt;geo-&gt;lng,
      $person-&gt;name, $person-&gt;username;
}
</code></pre>

<p>Which outputs, like above:</p>

<pre><code>lat, lng, name, username
-37.3159, 81.1496, Leanne Graham, Bret
-43.9509, -34.4618, Ervin Howell, Antonette
-68.6102, -47.0653, Clementine Bauch, Samantha
29.4572, -164.2990, Patricia Lebsack, Karianne
-31.8129, 62.5342, Chelsey Dietrich, Kamren
-71.4197, 71.7478, Mrs. Dennis Schulist, Leopoldo_Corkery
24.8918, 21.8984, Kurtis Weissnat, Elwyn.Skiles
-14.3990, -120.7677, Nicholas Runolfsdottir V, Maxime_Nienow
24.6463, -168.8889, Glenna Reichert, Delphine
-38.2386, 57.2232, Clementina DuBuque, Moriah.Stanton
</code></pre>

<p>In this example, the initial <code>HASH</code> reference returned by <code>HTTP::Tiny</code> is made into an object with accessors using <code>h2o</code> like the original code. However, rather than having to dereference the <code>ARRAY</code> reference <code>$json_array_ref</code> (returned after decoding by <code>decode_json</code>), <code>d2o</code> is employed to convert the data structure such that all <code>HASH</code> references have accessors as expected. And the <code>ARRAY</code> reference containing the list of <code>HASH</code> references has been <em>blessed</em> so that it has the <em>virtual</em> methods on <code>ARRAY</code>s briefly mentioned above.</p>

<p>This allows the code to collapse from:</p>

<pre><code>foreach my $person (@$json_array_ref) {
    h2o -recurse, $person;
...
</code></pre>

<p>to, simply:</p>

<pre><code>foreach my $person ( $json_array_ref-&gt;all ) {
</code></pre>

<p>thus avoiding the call to <code>h2o</code> since the <code>d2o</code> rooted out all the <code>HASH</code> references buried in <code>$json_array_ref</code> and applied <code>h2o</code> to them.</p>

<p>More importantly, this requires no <em>a priori</em> knowledge of the data structure.</p>

<h1>Conclusion</h1>

<p>It is critical to point out, that <code>h2o</code> does <em>one thing</em> and does it <em>very</em> well - which is a cherished and time tested UNIX <em>ideal</em> for standard tooling. But as a result of <em>present</em>'ing <code>Util::H2O</code> in 2022's Perl Advent, it was clear that for this common case, <code>h2o</code> by itself was insufficient to idiomatically improve the handling of Perl data structures that was resulting from the web API call and subsequent <code>decode_json</code>. The solution is to just add some support for data structure traversal (applying <code>h2o</code> along the way), which is all <code>d2o</code> does.</p>

<p>So <code>d2o</code> was then added to <code>Util::H2O::More</code> to make things a little nicer, and thus taking Perl another step closer to a situation that alls programmers to more cleanly work with complex data structures - by eliminating the glut of <em>curley</em> and <em>square</em> braces and the need to dereference data structures along the way. The addition of the virtual methods to the <code>ARRAY</code> containers, is just more sweetness.</p>

<p>Please checkout <a href="https://metacpan.org/pod/Util::H2O">Util::H2O</a> and <a href="https://metacpan.org/pod/Util::H2O::More">Util::H2O::More</a>; alone or combined, the options available to deal with <em>ad hoc</em> or <em>in flight</em> complex data structures in Perl in very clean and idiomatic ways <em>without</em> resorting to so called "POOP" (<em>Perl Object Oriented Programming</em>) is continuing to improve. Practical sources of these data structures include, <code>DBI</code> (e.g., <code>DBD::mysql</code>), <code>JSON::decode_json</code>, and <code>Web::Scraper</code>. <code>Util::H2O::More</code> even provides special methods for working with <code>Getopt::Long</code> and <code>Config::Tiny</code>, <code>opt2h2o</code> and <code>ini2h2o</code>, respectively.</p>

<p>PS: Sorry for the bad code highlighting, I have no idea how this thing works. :-)</p>
]]>
    </content>
</entry>
  <entry>
    <title>My Family and Other Fish  (PerlayStation Part 2)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/saif/2023/01/my-family-and-other-fish.html"/>
    <id>tag:blogs.perl.org,2023:/users/saif//3152.10992</id>
    <published>2023-01-18T02:30:58Z</published>
    <updated>2023-01-18T17:56:44Z</updated>
    <author>
        <name>Saif</name>
        <uri>https://github.com/saiftynet</uri>
    </author>
    <category term="breakout" label="Breakout" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="games" label="Games" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perlaystation" label="PerlayStation" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="termgraille" label="Term::Graille" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="terminal" label="Terminal" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/saif/">
        <![CDATA[<p>Faced with any problem, there are many potential approaches. This, I have realised, is amply illustrated by the members of my own family, further reinforcing the educational value of having one.  I shall anonymise them for my own protection, and as a disclaimer also state that everything I say about them or anything at all is probably wrong.  In fact I have already issued my daily, pre-emptive, unspecified apology to my wife.  For me, game coding in Perl is no different. </p>

<h3>Identify Problem</h3>

<p>Take the aforementioned Mrs S,  for example. Faced with a mildly unacceptable state of affairs, her approach is reliably consistent. A detailed root-cause-analysis invariably identifies the source of disquiet: it often comes down to something I did, occasionally something I didn't do, and on serious situations something I was possibly thinking of doing. Her problem can be retrospectively solved if only she had picked any of the better looking and supremely solvent alternatives available to her. My fault then, for choosing the terminal to program Perl Games in. This “blame someone” approach never solved anything, but in difficult situations diverts attention, explains failure and justifies expenditure on jewellery, home decorations, the plumber, or in the case of software development, discarding previous knowledge and using a more popular, fancier, methodology like the neighbours.</p>

<h3>Consider Ignoring It</h3>

<p>My rather chilled-out older daughter on the other hand handles difficult problems with eminent ease. Her energy-efficient solution is simply to ignore them, saving her time, expense and effort.  "Dad, it is only your problem if you see it as your problem." In reality, many problems have always existed; they are not created <em>de novo</em>. They don't have to be your problem,  and the world will keep turning,  and you will find ways of doing without. Who needs your games? Why do you do open source? Why in fact, do anything strenuous at all, one might say.  Perl was never a powerhouse gaming tool, and terminal is not where one looks for arcade thrills given technologies offered by graphical tool-kits and modern browser engines. But one makes games for many reasons.  In making games you discover how things work, you learn strategies, transferable skills, and who knows, maybe give fun to others.  Critically you develop tools that allow you to make games and practical utilities easier.  Indeed, game coding is a diversion, not the end-game for me.  The tools one creates to help game development may also help in other projects.</p>

<h3>Unexpected Benefits</h3>

<p>I do have another hare-brained offspring, a delightfully positive and more energetic individual whose attention is devoted to exclusively herself and her friends.  There is seemingly nothing she can not solve by merely fluttering her eyelids and exuding praise, and at the same time getting a profitable outcome. “Oh daddy, those socks go so well with your sandals, but I have nothing to wear for the par… study-session this evening, can you please buy me a &lt;insert-any-item that-could-not-conceivably-improve-grades>, PLEASE???".   In reality coding without feedback, whether positive or negative, is difficult. One needs motivation, a second pair of eyes to affirm or maybe redirect thoughts, and recognise connections that may not at first glance be apparent, and that motivation is by definition outward looking.  Certainly that motivation factor may be driving secondary gains for other people, but that by no means diminishes its value. Who knew that roller skates actually help effective group-learning?</p>

<p>So the resultant path that <a href="https://github.com/saiftynet/Term-Graille">Term::Graille</a> has taken is this.  It avoids the fancier toolkits that rely on <code>libcurses</code> or <code>libtickit</code>.  It starts off as a graphical tool for a non-graphical interface.  For practical applications it emulates real-time interactivity (instead of using things like <code>libev</code>) for an environment that is principally asynchronous using <a href="https://github.com/saiftynet/Term-Graille/wiki/Term::Graille-Interact">Term::Graille::Interact</a>.  This is inevitably weak and has to be  to be stressed to to become optimised, and game development perhaps allows this stress, highlighting failures in other existing code. Just developing one game is a dead end, however and the diverse set of problems one might face requires more specialised assets. Term::Graille::Sprite, like my daughter’s roller skates, does not outwardly have any of the features that will be required for serious, useful applications. But who knows, it might reasonably stress the platform and may offer secondary entertainment for others.</p>

<h3>Term::Graille::Sprite</h3>

<p>So what is a <code>$sprite</code>?  A Term::Graille::Sprite object which can have a <code>{shape}</code> , a <code>{pos}</code>ition on a screen, and a <code>{vel}</code>ocity. <code>{vel}</code>olicity is a matter of displacement over time, and Term::Graille::Interact, the time is represented by the refresh cycles for the keyboard read routine. The updating of the sprites may be prolonged by skipping a number of updating events.  Motion is simulated by <code>blank-&gt;()</code>ing a sprite current position and re-blitting the image on the screen.   It may interact with other sprites, e.g. <code>collide-&gt;($another_sprite)</code> or the environment e.g. <code>edge()</code> or with the user (via an <code>addAction()</code> on Term::Graille::Interact.  We may have multiple sprites and these can be handled as a group of sprites, and a SpriteBank object is also provided, that keeps a store of these groups of items, updating them automatically each cycle as needed, or removing them if set to be  <code>{destroyed}</code>.</p>

<pre><code>my $spriteBank=Term::Graille::SpriteBank-&gt;new(); # store sprites
my $dir="./sprites/";   # path for predefined sprite shapes
my $bat=new Term::Graille::Sprite(data=&gt;[[("█") x 6]],pos=&gt;[20,0],
   bounds=&gt;[1,14,60,0]);   # creating a bat
my $ball=new Term::Graille::Sprite(pos=&gt;[20,3],vel=&gt;[1,1],
   bounds=&gt;[1,14,70,-1],skip=&gt;6);    #  default shape is ⬤ 
$spriteBank-&gt;addSprite("player",$bat);  #  Adding $bat to  spriteBank
$spriteBank-&gt;addSprite("ball",$ball);    #  Adding a ball
</code></pre>

<p>One imagines in the future, one would include animations, physics (e.g. mass, acceleration and gravity).  But what is clear is that in developing games, we find multiple failures in Term::Graille. Glitches as the drawing application plots off screen or experiences an error in data supplied.   These should be cleanly handled, and one gradually makes adjustments for this, all the time hoping that these changes don’t break previous applications.  <a href="https://github.com/saiftynet/PerlayStation/tree/main/Arcade/SingleScreen/Breakout">Breakout</a> is a prototype game that uses Sprite.pm</p>

<h3>Inconclusion</h3>

<p>My goldfish, Goldzilla, on the other hand has a much wiser outlook to my life’s difficulties. She recognises my flaws and chooses to ignore them.  She appreciates my problems, sympathises, listens calmly to my rants, but only ever offers advice when asked.  She never showers me with praise to get a new aquarium  ornament and appears to mouth out Perl code to herself, if only I could hear this stream of wisdom.  Here is the mainstay of problem solving.  You are either provided with the tools to solve them or you make the tools yourself.  The majority of useful tips will remain  unheard, but they do exist and you have to listen closely…and use your imagination.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>one-liner: read first elements of a huge directory</title>
  <summary type="html"><![CDATA[<p>
At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.
<p>
<b>ls -l | head</b> takes ages, but here is a Perl one-liner to make it work:
<p>
]]></summary>
  <updated>2023-01-17T10:55:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/oneliner-read-huge-directory"/>  <id>https://perlmaven.com/oneliner-read-huge-directory</id>
  <content type="html"><![CDATA[<p>
At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.
<p>
<b>ls -l | head</b> takes ages, but here is a Perl one-liner to make it work:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>one-liner: read first elements of a huge directory</title>
    <link rel="alternate" href="https://dev.to/szabgab/one-liner-read-first-elements-of-a-huge-directory-2h8c" type="text/html"/>
    <content type="html">&lt;p&gt;At a client we have a networked disk with millions of files. I was trying to list the first few files to see what's going on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -l | head&lt;/code&gt; takes ages, but here is a Perl one-liner to make it work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -E 'opendir(my $dh, "/huge_dir"); my $c = 0; while (my $d = readdir($dh)) { say $d; exit if ++$c &amp;gt; 3 }'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a different layout that could be put in a file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nb"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/huge_dir&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dh&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl -E&lt;/code&gt; tells perl that the next string is a piece of perl code that should executed. (as opposed to being a filename) This is what let's us write one-liners in Perl. Using the capital letter &lt;b&gt;-E&lt;/b&gt; turns on the feature &lt;b&gt;say&lt;/b&gt; among other things.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;opendir(my $dh, "/huge_dir");&lt;/code&gt; opens a directory and assigns the directory handle to the new variable called &lt;code&gt;$dh&lt;/code&gt; that was declared on the spot with &lt;code&gt;my&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;my $c = 0;&lt;/code&gt; declares a variable called &lt;code&gt;$c&lt;/code&gt; and assign 0. We'll use this for  counting the entries.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;while (my $d = readdir($dh))&lt;/code&gt; a while loop that for each iteration will read one entry from the directory and assign it to the newly declared variable &lt;code&gt;$d&lt;/code&gt;.  We declare this variable inside the loop to make it scoped to the loop.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ say $d; exit if ++$c &amp;gt; 3 }&lt;/code&gt; the block of the &lt;code&gt;while loop&lt;/code&gt;. First statement prints the value of &lt;code&gt;$d&lt;/code&gt; followed by a newline. Then we have a conditional statement in what is called &lt;code&gt;statement modifier&lt;/code&gt; where the statement comes before the condition. We first increment the counter and then check if it is greater than 3 and if it is then we call &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I was even a bit overdoing with declarations. If we are not using &lt;code&gt;strict&lt;/code&gt; we don't need to declare variables. If a variable does not even have value but is incremented using &lt;code&gt;++&lt;/code&gt; it will behave as if there was a 0 in it. So we don't need to initialize &lt;code&gt;$c&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -E 'opendir($dh, "/huge_dir"); while ($d = readdir($dh)) { say $d; exit if ++$c &amp;gt; 3}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nb"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/huge_dir&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dh&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I don't need that &lt;code&gt;$d&lt;/code&gt; variable either. Instead of that I can use the invisible &lt;code&gt;$_&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -E 'opendir($dh, "/huge_dir"); while (readdir($dh)) { say; exit if ++$c &amp;gt; 3}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;say&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nb"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/huge_dir&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dh&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/one-liner-read-first-elements-of-a-huge-directory-2h8c</id>
    <published>2023-01-17T09:16:42Z</published>
    <updated>2023-01-17T09:16:42Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="devops"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>Weekly Challenge 200</title>
    <link rel="alternate" href="https://dev.to/zapwai/weekly-challenge-200-1o38" type="text/html"/>
    <content type="html">&lt;p&gt;I've been doing &lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; for a few weeks now, I thought this one was tricky/fun.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200/"&gt;Challenge 200&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task One
&lt;/h2&gt;

&lt;p&gt;An integer array is called &lt;em&gt;arithmetic&lt;/em&gt; if it has at least 3 elements and the differences between any three consecutive elements are the same. Write a script to find all Arithmetic Slices for the given array of integers.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task Two
&lt;/h2&gt;

&lt;p&gt;A seven segment display is an electronic component, usually used to display digits. Write a program that accepts any natural number and draws it as an ASCII seven segment display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-200/zapwai"&gt;My solutions on github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Solution to Task One
&lt;/h2&gt;

&lt;p&gt;Initially I was constructing the slices during one pass of the array, but decided to create a list of start/end points to make the logic easier.&lt;br&gt;
As we traverse the list, if a difference is detected that's identical to the previous, we push the starting index to the begin array. When the difference between list elements becomes different again, the ending index is pushed to the end array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.30.0;
my @array = (1,2,3,4);
#my @array = (1,2,3,5,7,9,10,11,14);
#my @array = (1,2,3,5,7,9,10,11,14,5,32,33,40,43,46,49);

sub wrap {
    my @array = @_;
    "(" . join(",", @array).")"
}

# return all sets of size 3+
sub bundle {
    my $len = @_;
    my $str; 
    unless (@_ &amp;lt; 4) {
    do {
        $len--;
        for (0 .. @_ - $len) {
        my @list;
        for my $i ($_ .. $_ + $len - 1) {
            push @list, $_[$i];
        }
        $str .= wrap(@list).", ";
        }
    } while ($len &amp;gt; 3);
    }
    $str .= wrap(@_);    
    print $str;
}

say "Input: \@array = " . wrap(@array);
if ($#array &amp;lt; 2) {
    say "Output: No slice found."; exit;
}

# indices as we traverse list
my $begin = 0;
my $end = 0;            

my @begin;
my @end;

$begin[0] = 0 if ($array[2] - $array[1] == $array[1] - $array[0]);
for my $i (0 .. $#array - 2) {
    next if ($i &amp;lt; $end);
    $begin = $i;
    my $diff = $array[$i + 1] - $array[$i];
    for my $j ($i + 1 .. $#array - 1) {
    if ($array[$j + 1] - $array[$j] == $diff) {
        $end = $j + 1;
        push @begin, $begin unless ($begin[$#begin] == $begin);
    } else {
        last if (($end == 0) or ($end[$#end] == $end));
        push @end, $end;
        last;
    }
    }
}
push @end, $end if (@begin != @end);
print "Output: ";
for my $i (0 .. $#begin - 1) {
    bundle @array[$begin[$i] ..  $end[$i]];
    print ", ";
}
bundle @array[$begin[$#begin] ..  $end[$#begin]];
say;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I converted this solution to Raku, I had to address the numerical use of an uninitialized value. Perl did not mind &lt;code&gt;($end[$#end] == $end)&lt;/code&gt; where the end array is empty, but in Raku I decided to initialize the arrays to avoid the "Use of Nil in numeric context" warning. Part of the Raku code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my $begin = 0;
my $end = 0;            

my @begin = (-1);
my @end = (-1);

@begin[1] = 0 if (@array[2] - @array[1] == @array[1] - @array[0]);
loop (my $i = 0; $i &amp;lt; @array.elems - 2; $i++) {
    next if ($i &amp;lt; $end);
    $begin = $i;    
    my $diff = @array[$i + 1] - @array[$i];
    loop (my $j = $i + 1; $j &amp;lt; @array.elems - 1; $j++) {
    if (@array[$j + 1] - @array[$j] == $diff) {
        $end = $j + 1;
        push @begin, $begin unless (@begin.tail == $begin);
    } else {
        last if (($end == 0) or (@end.tail == $end));
        push @end, $end;
        last;
    }
    }
}
push @end, $end if (@begin.elems != @end.elems);
print "Output: ";

shift @begin;
shift @end;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Solution to Task Two
&lt;/h2&gt;

&lt;p&gt;This was a fun one. Initially I wrote it with newlines so it only printed one digit. Then I modified it by adding a newline_flag to determine if we're on the final digit and require a newline character printed instead of a space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use v5.30.0;
my @truth = qw( 1110111 0010010 1011101 1011011 0111010 1101011 0101111 1010010 1111111 1111010 );
my $N = $ARGV[0] || 200;

my $vert = 2;
my $horiz = 2*$vert + 1;

sub hor {
    my ($newline_flag, $i, @a) = @_;
    if ($a[$i]) {
    print " ";
    print "-" x $horiz;
    ($newline_flag) ? { say " " } : { print " " };
    } else {
    ($newline_flag) ? { say " " x $horiz } : { print " " x ($horiz + 2) }
    }
}

sub ver {
    my ($newline_flag, $i, @a) = @_;

    if ($a[$i]) {
    print "|";
    } else {
    print " ";
    }
    print " " x $horiz;
    if ($a[$i + 1]) {
    ($newline_flag) ? { say "|" } : { print "|" };  
    } else {
    ($newline_flag) ? { say " " } : { print " " };  
    }
}

sub d {
    my @num = @_;
    my $last = pop @num;
    foreach (@num) {
    my @a = split("", $truth[$_]);
    hor(0,0, @a);
    }
    my @b = split("", $truth[$last]);    
    hor(1,0, @b);

    my $N = $vert;
    do {
    $N--;    
    foreach (@num) {
        my @a = split("", $truth[$_]);
        ver(0,1, @a);
    }
    ver(1,1,@b);
    } while ($N &amp;gt; 0);

    foreach (@num) {
    my @a = split("", $truth[$_]);
    hor(0,3, @a);
    }
    hor(1,3, @b);

    $N = $vert;
    do {
    $N--;    
    foreach (@num) {
        my @a = split("", $truth[$_]);  
        ver(0,4, @a);
    }
    ver(1,4, @b);
    } while ($N &amp;gt; 0);

    foreach (@num) {
    my @a = split("", $truth[$_]);  
    hor(0,6, @a);   
    }
    hor(1,6, @b);
}

my @nums = split("",$N);
d(@nums);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Converting this to Raku, I had some issues with the ternary operator, and had some bugs with the split operator until I added the :skip-empty option. e.g. &lt;code&gt;my @a = split("", @truth[$_], :skip-empty);&lt;/code&gt;&lt;/p&gt;

</content>
    <author>
      <name>Zapwai</name>
    </author>
    <id>https://dev.to/zapwai/weekly-challenge-200-1o38</id>
    <published>2023-01-16T21:15:44Z</published>
    <updated>2023-01-16T21:15:44Z</updated>
    <category term="perl"/>
    <category term="raku"/>
  </entry>
  <entry>
    <title>Perl is so nice...!!</title>
    <link rel="alternate" href="https://dev.to/ryumura222/perl-is-so-nice-4ggn" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hello! I'm Ryu from Japan, learning Perl little bit now. </p>

<p>I've read Perl book "One-Liners: 130 Programs That Get Things Done" recently and I was impressed.</p>

<p>Wanna learn more about Perl. What book or material is good for begineers?</p>

<p>Produced by <a href="https://perlclub.net/">Perl Club</a></p>

</div>
    </content>
    <author>
      <name>RyunosukeMurakami</name>
    </author>
    <id>https://dev.to/ryumura222/perl-is-so-nice-4ggn</id>
    <published>2023-01-16T10:52:51Z</published>
    <updated>2023-01-16T10:52:51Z</updated>
    <category term="programming"/>
    <category term="perl"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>#599 - Open Source Development Course for Perl developers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/599.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Recently I started to offer a course called <a href="https://osdc.code-maven.com/">Open Source Development Course</a>. The idea is to let participants learn and practice(!) git/github/pull-request/testing/code-coverage/linters/ci/etc. That way they improve their development practices and can also contribute to Open Source projects.</p>
<p>It is a course designed to run for 12-13 weeks with about 5 hours per week workload. It can be either part of a university program or people can take it while they have a full-time job. Every week there is a 1-2 hours long presentation and the rest is hands-on work with my async help.</p>
<p>I'd like to offer a version of this course especially for people who are interested in contributing to Perl-based Open Source projects. The participants will learn Perl-specific tools and processes. All proceedings will go to sponsor the <a href="https://blogs.perl.org/users/book/2023/01/the-perl-toolchain-summit-is-back-in-2023.html">The Perl Toolchain Summit</a>.</p>
<p>Check out <a href="https://osdc.code-maven.com/osdc-public-2023-01-perl">this page</a> for further details and let me know ASAP if you are interested.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/599.html</id>
    <published>2023-01-16T10:00:00Z</published>
    <updated>2023-01-16T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Perl Weekly #599 - Open Source Development Course for Perl developers</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-599-open-source-development-course-for-perl-developers-5edk" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/599.html"&gt;Perl Weekly 599&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there!&lt;/p&gt;

&lt;p&gt;Recently I started to offer a course called &lt;a href="https://osdc.code-maven.com/"&gt;Open Source Development Course&lt;/a&gt;. The idea is to let participants learn and practice(!) git/github/pull-request/testing/code-coverage/linters/ci/etc. That way they improve their development practices and can also contribute to Open Source projects.&lt;/p&gt;

&lt;p&gt;It is a course designed to run for 12-13 weeks with about 5 hours per week workload. It can be either part of a university program or people can take it while they have a full-time job. Every week there is a 1-2 hours long presentation and the rest is hands-on work with my async help.&lt;/p&gt;

&lt;p&gt;I'd like to offer a version of this course especially for people who are interested in contributing to Perl-based Open Source projects. The participants will learn Perl-specific tools and processes. All proceedings will go to sponsor the &lt;a href="https://blogs.perl.org/users/book/2023/01/the-perl-toolchain-summit-is-back-in-2023.html"&gt;The Perl Toolchain Summit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://osdc.code-maven.com/osdc-public-2023-01-perl"&gt;this page&lt;/a&gt; for further details and let me know ASAP if you are interested.&lt;/p&gt;

&lt;p&gt;Enjoy your week!&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Gabor Szabo.&lt;/p&gt;

&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rjbs.cloud/blog/2022/12/so-many-cpan-uploads-code-review-mark-iii/"&gt;so many CPAN uploads! (code review mark iii)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ricardo has 114 distributions on CPAN, give or take a few. (&lt;a href="https://metacpan.org/author/RJBS"&gt;MetaCPAN&lt;/a&gt; shows 265). He wanted to do some housekeeping that was almost fun. I think one of these cleanup uploads caught my eye thinking that the distribution is actively maintained and I sent him PR adding GitHub Actions probably making him regret a bit the new uploads.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/scotticles/jenkins-for-running-scripts-kg1"&gt;Jenkins for running scripts! &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Using Jenkins as a cron daemon that also nicely collects the results of all the jobs.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/tobyink/creating-a-simple-dsl-in-perl-4f12"&gt;Creating a Simple DSL in Perl&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Creating a XSPF playlist with your own words.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/09/app-easer-release/"&gt;New App::Easer release 2.006&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/10/home-brewn-sets/"&gt;Home-brewn sets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Set operations are rarely needed, but when they are, perl developers usually use the keys of a hash to pretend they have sets.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/drhyde/numberphone-release-candidate-3h7"&gt;Number::Phone release candidate&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rjbs.cloud/blog/2023/01/leaving-perl-v5.8-behind/"&gt;leaving perl v5.8 behind&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For a long time I felt that it is not a good idea to want to support people who have not upgraded their version of perl for 5-10-15(!) years, but want the latest modules from CPAN. I am glad RJBS also thinks so. He also writes about it a lot more nicely than I could ever do and gives several ways to handle the situation when a new version of a module starts requiring a version of Perl that is only 10 years old...&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/davorg/updating-github-pages-using-github-actions-395a"&gt;Updating GitHub Pages using GitHub Actions&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/aristotle/2023/01/io-loop-abort.html"&gt;How to prevent an infinite loop&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Perl
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/01/this-week-in-psc-093.html"&gt;This Week in PSC (093)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Weekly report of the Perl Steering Council&lt;/p&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200"&gt;The Weekly Challenge - 200&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks "Arithmetic Slices" and "Seven Segment 200". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-199"&gt;RECAP - The Weekly Challenge - 199&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Good Pairs" and "Good Triplets" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2023/01/15"&gt;Multiple Goods&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Did I repeat the past task? Well, it seems yes. Should have been more careful? Nice demo of do blocks and postfix for.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/twice-as-good.html"&gt;Twice as Good&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Great use of Bag of Raku with detailed discussion. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://colincrain.com/2023/01/15/not-a-bad-couple-and-theres-always-room-for-one-more-baby/"&gt;Not a Bad Couple… And There’s Always Room for One More, Baby&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Colin is back to blogging after a short break. Always pleasure to read his blog. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://jacoby.github.io/2023/01/09/for-the-good-the-weekly-challenge-199.html"&gt;For The Good&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Dave is back with yet another blog post sharing the details of his contributions.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://www.braincells.com/perl/2023/01/perl_weekly_challenge_week_199.html"&gt;Perl Weekly Challenge: Week 199&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Jaldhar is back too, we all missed you. Thank you for sharing the knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-199/james-smith#readme"&gt;The Weekly Challenge 198&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;James never stop just after solving the weekly task but share the performance stats, magical.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/12/pwc199-good-pairs/"&gt;PWC199 - Good Pairs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Flavio couldn't resist using one-liner in Perl and Raku. Always a treat.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/13/pwc199-good-triplets/"&gt;PWC199 - Good Triplets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Although, not to his taste but we still have a solution. Fun Fun Fun.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2023/01/perl-weekly-challenge-199-good-pairs-and-good-triplets.html"&gt;Perl Weekly Challenge 199: Good Pairs and Good Triplets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Usually we get Raku to Perl but this time, it is other way around. Nice work,&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2023/01/09/PerlWeeklyChallenge199.html"&gt;Nested Loops Everywhere!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Fun and easy use of loops to get the job done. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/01/09/PWC199/"&gt;PWC 199&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sleek one-liner in Perl as always. You don't want to miss it. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://pjcs-pwc.blogspot.com/2023/01/all-good-things.html"&gt;All good things&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Use of regular for loop is enough this week. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/01/The_Weekly_Challenge_199__Good_N_lets.html"&gt;Good N-lets&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Use of CPAN module makes the solution easier to follow. Great work!&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/its-all-good-foe"&gt;It's all good&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Like every week, we got Perl and Python twin solutions. Keep it up the momentum.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://thiujiac.blogspot.com/2023/01/pwc-199.html"&gt;PWC 199&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice one-liners both in Perl and Raku. Well done and thanks for sharing.&lt;/p&gt;




&lt;h2&gt;
  
  
  Videos
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://code-maven.com/cmos-3-joel-berger-mojolicious"&gt;Joel Berger on Mojolicious&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This interview was recorded in 2016.&lt;/p&gt;




&lt;h2&gt;
  
  
  Other
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/01/14/jq-cheats/"&gt;jq cheats&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;jq is an excellent tool to interrogate and even change a JSON file. Flavio has some examples.&lt;/p&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/01/cdxxvii-16-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/01/dxl-metacpan-weekly-report-testnamed.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/01/dlxviii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  Events
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/max_maischein/2023/01/geizhals-preisvergleich-sponsors-the-german-perlraku-workshop.html"&gt;Geizhals Preisvergleich sponsors the German Perl/Raku Workshop&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The German Perl/Raku Workshop conference will take place 27.2-1.3 2023 in Frankfurt.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/book/2023/01/the-perl-toolchain-summit-is-back-in-2023.html"&gt;The Perl Toolchain Summit is back in 2023!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It will take place in Lyon, from Wednesday April 27 to Sunday April 30 2023&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://news.perlfoundation.org/post/fosdem2023"&gt;FOSDEM mini grants &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Would you like to give a Perl or Raku related presentation at &lt;a href="https://fosdem.org/2023/"&gt;FOSDEM 2023&lt;/a&gt; that will take place 4-5 February in Brussels? TPRF can help you financially.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/9vs"&gt;Adventure! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game, and they’re looking for senior Perl developers with passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/3r7"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/uqm"&gt;Perl Developer and Business Owner? Remote Perl role in UK &amp;amp; EU&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Our clients run a job search engine that has grown from two friends with an idea to a site that receives more than 10 million visits per month. They're looking for a Perl pro with at least three years of experience with high-volume and high-traffic apps and sites, a solid understanding of Object-Oriented Perl (perks if that knowledge includes Moose), SQL/MySQL and DBIx::Class.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/xt8"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe. Remote Perl Role in the UK&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-599-open-source-development-course-for-perl-developers-5edk</id>
    <published>2023-01-16T06:24:40Z</published>
    <updated>2023-01-16T06:24:40Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 199</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-199/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-199/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 200</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-200/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Arithmetic Slices 10. TASK #2: Seven Segment 200 HEADLINES  Welcome to the Week #200 of The Weekly Challenge.
Ryan Thompson, our in-house Perl and Raku reviewer came up with fun task to celebrate the 200th week of the weekly challenge. I am sure you will find it fun to work on it.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-200/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2023-01-16T00:00:00Z</published>
    <updated>2023-01-16T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Multiple Goods</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2023/01/15#pwc199" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers, @list. Write a script to find the total count of Good 
airs.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub good_pairs{
    my(@numbers) = @_;
    my @pairs;  
    do{ 
        my $i = $_;
        do{
            my $j = $_;
            push @pairs, [$i, $j] if $numbers[$i] == $numbers[$j] &amp;&amp; $i &lt; $j;  
        } for 0 .. @numbers - 1;
    } for 0 .. @numbers - 1;
    return 0 + @pairs;  
}

MAIN:{
    say good_pairs 1, 2, 3, 1, 1, 3;
    say good_pairs 1, 2, 3;
    say good_pairs 1, 1, 1, 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 
4
0
6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First off, a pair &lt;code&gt;(i, j)&lt;/code&gt; is called &lt;em&gt;good&lt;/em&gt; if &lt;code&gt;list[i] == list[j]&lt;/code&gt; and &lt;code&gt;i &amp;lt; j&lt;/code&gt;. Secondly,
I have never written a nested loop with this mix of &lt;code&gt;do&lt;/code&gt; blocks and postfix &lt;code&gt;for&lt;/code&gt;, and
I am greatly entertained by it! Perl fans will know that it really isn't all that 
different from the more standard looking do/while construct. A &lt;code&gt;do&lt;/code&gt; block is not really a 
loop, although it can be repeated, and so you cannot use &lt;code&gt;last&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, or &lt;code&gt;next&lt;/code&gt; within
the block. But this is exactly the same case as within a &lt;code&gt;map&lt;/code&gt;, which is what we are 
trying to replicate here, a &lt;code&gt;map&lt;/code&gt; in &lt;em&gt;void context&lt;/em&gt; without actually using &lt;code&gt;map&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Imagine a nested &lt;code&gt;map&lt;/code&gt;, that is basically the same thing as this, but with the more clear
focus on &lt;em&gt;side effects&lt;/em&gt; versus a return value. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of integers, @array and three integers $x,$y,$z. Write a script to 
find out total Good Triplets in the given array.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use Math::Combinatorics;
sub good_triplets{
    my($numbers, $x, $y, $z) = @_;
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; 3, data =&gt; [0 .. @{$numbers} - 1]);
    my @combination = $combinations-&gt;next_combination;  
    my @good_triplets;
    {
        my($s, $t, $u) = @combination;
        unless($s &gt;= $t || $t &gt;= $u || $s &gt;= $u){
            push @good_triplets, [@{$numbers}[$s, $t, $u]] if(abs($numbers-&gt;[$s] - $numbers-&gt;[$t]) &lt;= $x &amp;&amp; 
                                                              abs($numbers-&gt;[$t] - $numbers-&gt;[$u]) &lt;= $y &amp;&amp;  
                                                              abs($numbers-&gt;[$s] - $numbers-&gt;[$u]) &lt;= $z);  

    }
        @combination = $combinations-&gt;next_combination;  
        redo if @combination;
    }
    return 0 + @good_triplets;
}

MAIN:{
    say good_triplets([3, 0, 1, 1, 9, 7], 7, 2, 3);
    say good_triplets([1, 1, 2, 2, 3], 0, 0, 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The approach here is the same that I used for the &lt;em&gt;Magical Triples&lt;/em&gt; problem from 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2022/10/23"&gt;TWC 187&lt;/a&gt;. The module
Math::Combinatorics is used to generate all possible triples of indices. These are then
filtered according to the criteria for good triplets.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-199/"&gt;Challenge 199&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc199</id>
    <published>2023-01-15T11:22:00-05:00</published>
    <updated>2023-01-15T11:22:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1956320381649186064</id>
    <published>2023-01-14T21:21:00.000+01:00</published>
    <updated>2023-01-14T21:21:08.200+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxvii) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.313' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.313&lt;/strong&gt; on 2023-01-13&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.309 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.060004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060004&lt;/strong&gt; on 2023-01-11&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.060003 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Config-INI-0.029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::INI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple .ini-file format &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.029&lt;/strong&gt; on 2023-01-14&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.028 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/CPAN-Uploader-0.103018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CPAN::Uploader&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - upload things to the CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.103018&lt;/strong&gt; on 2023-01-14&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.103017 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Natural&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse informal natural language date/time strings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.15&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.14 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-Plugin-PodWeaver-4.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::PodWeaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave your Pod together from configuration and Dist::Zilla &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.010&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 4.009 was 1 year, 6 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Dist-Zilla-Plugin-Test-ReportPrereqs-0.029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::Test::ReportPrereqs&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Report on prerequisite versions during automated testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.029&lt;/strong&gt; on 2023-01-08&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.028 was 2 years, 4 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Address-1.913' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Address&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - RFC 2822 Address Parsing and Creation &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.913&lt;/strong&gt; on 2023-01-10&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.912 was 4 years, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-MIME-1.953' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::MIME&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - easy MIME message handling &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.953&lt;/strong&gt; on 2023-01-09&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.952 was 1 year, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Simple-2.218' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple parsing of RFC2822 message format and headers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.218&lt;/strong&gt; on 2023-01-09&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 2.216 was 4 years, 7 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Stuffer-0.020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Stuffer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A more casual approach to creating and sending Email:: emails &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.020&lt;/strong&gt; on 2023-01-11&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.018 was 2 years, 6 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Moose-2.2202' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A postmodern object system for Perl 5 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.2202&lt;/strong&gt; on 2023-01-14&lt;/li&gt;  &lt;li&gt;Votes: 325&lt;/li&gt;  &lt;li&gt;Previous version: 2.2201 was 1 year, 2 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.78' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Pod-Weaver-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Weaver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - weave together a Pod document from an outline &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2023-01-12&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMS/Redis-2.000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Redis&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl binding for Redis database &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000&lt;/strong&gt; on 2023-01-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.999 was 11 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9681' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9681&lt;/strong&gt; on 2023-01-13&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9680 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1956320381649186064/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxvii-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1956320381649186064"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1956320381649186064"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxvii-16-great-cpan-modules-released.html" title="(cdxxvii) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5835715004542461094</id>
    <published>2023-01-14T21:12:00.002+01:00</published>
    <updated>2023-01-14T21:12:54.947+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxl) metacpan weekly report - Test::Named</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 27&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Test::Named" target="_blank"&gt;Test::Named (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/01/14 20:12:27 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Anki::Import" target="_blank"&gt;Anki::Import&lt;/a&gt; - Anki note generation made easy.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::ansicolumn" target="_blank"&gt;App::ansicolumn&lt;/a&gt; - ANSI sequence aware column command&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::MXNet" target="_blank"&gt;AI::MXNet&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Licensecheck" target="_blank"&gt;App::Licensecheck&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autovivification" target="_blank"&gt;autovivification&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AWS::Signature4" target="_blank"&gt;AWS::Signature4&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=144)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Pager" target="_blank"&gt;IO::Pager&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::IMAPClient" target="_blank"&gt;Mail::IMAPClient&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=477)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::NYTProf" target="_blank"&gt;Mojolicious::Plugin::NYTProf&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::RenderFile" target="_blank"&gt;Mojolicious::Plugin::RenderFile&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Phone" target="_blank"&gt;Number::Phone&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Simple" target="_blank"&gt;Pod::Simple&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Weaver" target="_blank"&gt;Pod::Weaver&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scope::Upper" target="_blank"&gt;Scope::Upper&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Dynamically" target="_blank"&gt;Syntax::Keyword::Dynamically&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=140)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Named" target="_blank"&gt;Test::Named&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown" target="_blank"&gt;Text::Markdown&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Loy" target="_blank"&gt;XML::Loy&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Sublike" target="_blank"&gt;XS::Parse::Sublike&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5835715004542461094/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxl-metacpan-weekly-report-testnamed.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5835715004542461094"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5835715004542461094"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxl-metacpan-weekly-report-testnamed.html" title="(dxl) metacpan weekly report - Test::Named"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3069042649088332045</id>
    <published>2023-01-14T21:11:00.000+01:00</published>
    <updated>2023-01-14T21:11:19.360+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2023-01-14 20:09:45 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75058363" target="_blank"&gt;Perl print "$("&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75103783" target="_blank"&gt;How to shorten this Perl expression&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75085251" target="_blank"&gt;What happens if I assign two DBI connections in a row to a variable?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75087972" target="_blank"&gt;Combine category with code name [DS code format]&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/75108410" target="_blank"&gt;regex which will identify text containing a | but only if it is not within ' anywhere else in the text&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3069042649088332045/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dlxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3069042649088332045"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3069042649088332045"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dlxviii-stackoverflow-perl-report.html" title="(dlxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>It's all good</title>
    <link rel="alternate" href="https://dev.to/simongreennet/its-all-good-foe" type="text/html"/>
    <content type="html">&lt;h2&gt;
  
  
  Weekly Challenge 199
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-199/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-199/sgreen"&gt;My solution&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1: Good Pairs
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given a list of integers, &lt;code&gt;@list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to find the total count of Good Pairs. A pair &lt;code&gt;(i, j)&lt;/code&gt; is called good if &lt;code&gt;list[i] == list[j]&lt;/code&gt; and &lt;code&gt;i &amp;lt; j&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;One of the challenges when completing these tasks is needless optimizations. Given that the input list is relatively small there is a fine line between being clever and just brute forcing the solution.&lt;/p&gt;

&lt;p&gt;The brute force solution is (where &lt;code&gt;n&lt;/code&gt; is the length of the array) to go through all combinations of i and j (where &lt;code&gt;i&lt;/code&gt; is an iterator from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n - 2&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; is an iterator from &lt;code&gt;i + 1&lt;/code&gt; to &lt;code&gt;n - 1&lt;/code&gt;), and count the occurrences where the value in that position is the same. And that's a perfectly acceptable solution in solving the task. I'd approve that pull request every day of the week :)&lt;/p&gt;

&lt;p&gt;The solution I took is a little more complex, but will work on extremely large lists better. The first thing I do is count the frequency of each 'integer'. I put that in quotes as in Python they really are strings. This is stored as the &lt;code&gt;freq&lt;/code&gt; dict (hash in Perl).&lt;/p&gt;

&lt;p&gt;I then loop through the frequency counts (the values of the &lt;code&gt;freq&lt;/code&gt; dict). If the frequency is greater than one, we have good pairs. The number pairs is the sum of &lt;code&gt;1 + ... + n-1&lt;/code&gt;. Rather than calculating the sum by hand, we &lt;a href="https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF"&gt;know&lt;/a&gt; that the sum of &lt;code&gt;n&lt;/code&gt; can be expressed a &lt;code&gt;n × (n + 1) ÷ 2&lt;/code&gt;, which is the formula that I use.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 1 2 3 1 1 3
4

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 1 2 3
0

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-1.py 1 1 1 1
6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Task 2: Good Triplets
&lt;/h2&gt;

&lt;h3&gt;
  
  
  Task
&lt;/h3&gt;

&lt;p&gt;You are given an array of integers, &lt;code&gt;@array&lt;/code&gt; and three integers &lt;code&gt;$x&lt;/code&gt;, &lt;code&gt;$y&lt;/code&gt;, &lt;code&gt;$z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to find out total Good Triplets in the given array.&lt;/p&gt;

&lt;p&gt;A triplet array[i], array[j], array[k] is good if it satisfies the following conditions:&lt;/p&gt;

&lt;p&gt;1) 0 &amp;lt;= i &amp;lt; j &amp;lt; k &amp;lt;= n (size of given array)&lt;br&gt;
1) abs(array[i] - array[j]) &amp;lt;= x&lt;br&gt;
1) abs(array[j] - array[k]) &amp;lt;= y&lt;br&gt;
1) abs(array[i] - array[k]) &amp;lt;= z&lt;/p&gt;

&lt;h3&gt;
  
  
  My solution
&lt;/h3&gt;

&lt;p&gt;My first observation is that &lt;code&gt;k&lt;/code&gt; can be the size of the array. This will cause an out of bounds errors. For example, if an array has three elements, &lt;code&gt;array[3]&lt;/code&gt; is not valid. So I'm assuming that for the first condition it is meant that &lt;code&gt;k &amp;lt; n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My next observation is that this very similar to the first task in week 196, so most of the code comes from that solution.&lt;/p&gt;

&lt;p&gt;The first thing I do is remove the last three values from the input to represent &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this task I used the combinations method from &lt;a href="https://docs.python.org/3.8/library/itertools.html#itertools.combinations"&gt;itertools&lt;/a&gt; (Python) or &lt;a href="https://metacpan.org/pod/Algorithm::Combinatorics"&gt;Algorithm::Combinatorics&lt;/a&gt; (Perl) to generate all combinations of positions (not values) from &lt;code&gt;0&lt;/code&gt; to one less than the length of the array.&lt;/p&gt;

&lt;p&gt;For each iteration, I (numerically) sort the numbers to ensure &lt;code&gt;i &amp;lt; j &amp;lt; k&lt;/code&gt;. I then check if the other three criteria are met. If it is, I add one to &lt;code&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-2.py 3 0 1 1 9 7 7 2 3
4

&lt;span class="nv"&gt;$ &lt;/span&gt;./ch-2.py 1 1 2 2 3 0 0 1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/its-all-good-foe</id>
    <published>2023-01-14T05:47:02Z</published>
    <updated>2023-01-14T05:47:02Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Fosdem mini grants</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem2023"/>
  <id>tag:news.perlfoundation.org,2023-01-11:/post/fosdem2023</id>
  <published>2023-01-11T12:23:33</published>
  <updated>2023-01-11T12:23:33</updated>
  <summary>
  <![CDATA[
     One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. TPRF has made an intentional decision to not apply for 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/648b3a74e8794037135843200c91d2c94ee9cce5/money.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects.</p>

<p>In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences.</p>

<p>In addition, TPRF will have a 2 day stand at FOSDEM and are in need of volunteers to staff it. Stand  volunteers are also eligible to apply for a mini grant of up to $300 to assist with the cost of attending. </p>

<p>To apply for a FOSDEM mini grant, please send a completed <a href="https://docs.google.com/document/d/1y2Aj7bByeuLJ2V3y0SPFKO0W_xlUVerfYl0ROhlOnjI/copy">application</a> to fosdem2023-grants@perlfoundation.org.</p>

<p>If you have questions, please join our fosdem slack channel, leave a comment below, or send a message to hello@perlfoundation.org</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#598 - TIOBE and Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/598.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p><strong>Happy New Year everyone !!!</strong></p>
<p><strong>Year 2022</strong> saw the biggest release of <strong>Perl v5.36</strong>. It was released with big bang. There were lots of positive vibes around it. I had never seen such noise before. If you missed the fun then you can checkout my <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a>.</p>
<p>I am not a big fan of <strong>TIOBE</strong> but came across <a href="https://www.tiobe.com/tiobe-index">TIOBE Index for January 2023</a> talking about <strong>Perl</strong> going up slightly in the index recently. It is refreshing to see the progress. Who knows one day, it would reach the <strong>TOP 5</strong> brackets.</p>
<p>Looking back the participation in <a href="https://theweeklychallenge.org">The Weekly Challenge</a>, it looks promising. Nearly <strong>10K</strong> contributions in <strong>Perl</strong> by the members of <strong>Team PWC</strong> in the last <strong>4 years</strong>.</p>
<p><strong>What is new happening in Perl?</strong></p>
<p>For me, personally, I am looking forward to the modern OO <strong>Corinna</strong> in core <strong>Perl</strong>.</p>
<p><strong>Curtis</strong> wrote an interesting <a href="https://ovid.github.io/articles/converting-object-oriented-code-to-corinna.html">blog post</a> recently where he shared his real life experience with <strong>Corinna</strong>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/598.html</id>
    <published>2023-01-09T10:00:00Z</published>
    <updated>2023-01-09T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Prime the Gaps!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2023/01/08#pwc198" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers, @list. Write a script to find the total pairs in the 
sorted list where 2 consecutive elements has the max gap. If the list contains less 
then 2 elements then return 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub largest_gap{
    my(@numbers) = @_;
    my $gap = -1;
    map{ $gap = $numbers[$_] - $numbers[$_ - 1] if $numbers[$_] - $numbers[$_ - 1] &gt; $gap } 1 .. @numbers - 1;  
    return $gap;
}

sub gap_pairs{
    my(@numbers) = @_;
    return 0 if @numbers &lt; 2; 
    my $gap = largest_gap(@numbers);
    my $gap_count;
    map { $gap_count++ if $numbers[$_] - $numbers[$_ - 1] == $gap } 1 .. @numbers - 1;  
    return $gap_count;

}

MAIN:{
    say gap_pairs(3);    
    say gap_pairs(2, 5, 8, 1);    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 
0
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Probably these two subroutines could be combined into one without too much trouble, but it 
still seems cleaner to me this way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Do an initial pass over the list to determine the largest gap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perform a second pass over the list and count up all pairs which have the maximum gap.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An interesting issue came up. I've been trying to avoid the use of a map in a void 
context. This is just due to the general principal to use map as a function and use its 
return value rather than rely on side effects.&lt;/p&gt;

&lt;p&gt;As part of this reformative effort I have been doing more with for in a postfix position. 
I discovered this when working this problem:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{say $_ if $_ % 2 == 0} for 0 .. 9&lt;/code&gt; will not work. Perl gets confused by the 
postfix &lt;code&gt;if&lt;/code&gt; within the block, apparently.&lt;/p&gt;

&lt;p&gt;But there is a work around! Add &lt;code&gt;do&lt;/code&gt; and all is well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;do {say $_ if $_ % 2 == 0} for 0 .. 9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course the equivalent &lt;code&gt;map&lt;/code&gt; works just fine as you'd 
expect &lt;code&gt;map {say $_ if $_ % 2 == 0} 0 .. 9)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.perlmonks.org/?node_id=832495"&gt;E. Choroba&lt;/a&gt; pointed out this is due to postfix
&lt;code&gt;for&lt;/code&gt; being a statement modifier which doesn't know what to do with blocks. But why does 
&lt;code&gt;do&lt;/code&gt; fix this? I am still unclear on why that is. Even with the &lt;code&gt;do&lt;/code&gt; it's still a block!
Apparently perl will view it as a statement, for the purposes of the postfix &lt;code&gt;for&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;UPDATE: Turns out that the &lt;code&gt;do {}&lt;/code&gt; construct qualifies as a &lt;em&gt;Simple Statement&lt;/em&gt;. From the
&lt;a href="https://perldoc.perl.org/perlsyn#Simple-Statements"&gt;perldoc&lt;/a&gt;: &lt;em&gt;Note that there are 
operators like eval {}, sub {}, and do {} that look like compound statements, but 
aren't--they're just TERMs in an expression--and thus need an explicit termination when 
used as the last item in a statement.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer $n &gt; 0. Write a script to print the count of primes less 
than $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use Math::Primality q/is_prime/;

sub prime_count{
    return 0 + grep { is_prime $_ } 2 .. $_[0] - 1;  
}

MAIN:{
    say prime_count(10);  
    say prime_count(15);  
    say prime_count(1);  
    say prime_count(25);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
6
0
9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The Math::Primality module makes this quite easy! In fact, I am not sure there is that 
much to elaborate on. Check primality using is_prime() and we're done!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-198/"&gt;Challenge 198&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc198</id>
    <published>2023-01-08T19:30:00-05:00</published>
    <updated>2023-01-08T19:30:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 198</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-198/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-198/</id>
    <published>2023-01-09T00:00:00Z</published>
    <updated>2023-01-09T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 199</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-199/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Good Pairs 10. TASK #2: Good Triplets HEADLINES  Welcome to the Week #199 of The Weekly Challenge.
Last week, another new member, Rawley Fowler, joined the Team PWC from Canada. We are now a family of 280 members.
With the start of new year, I feel little tired.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-199/</id>
    <published>2023-01-09T00:00:00Z</published>
    <updated>2023-01-09T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3083285055011071355</id>
    <published>2023-01-08T08:16:00.000+01:00</published>
    <updated>2023-01-08T08:16:07.435+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxvi) 18 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.309' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.309&lt;/strong&gt; on 2023-01-06&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.307 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/CGI-4.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CGI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handle Common Gateway Interface requests and responses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.55&lt;/strong&gt; on 2023-01-03&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 4.54 was 11 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BIGPRESH/Dancer-1.3520' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3520&lt;/strong&gt; on 2023-01-02&lt;/li&gt;  &lt;li&gt;Votes: 145&lt;/li&gt;  &lt;li&gt;Previous version: 1.3513 was 2 years, 11 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/DBD-CSV-0.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::CSV&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI driver for CSV files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.60&lt;/strong&gt; on 2023-01-06&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.59 was 1 year, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BOOK/Devel-TraceUse-2.097' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::TraceUse&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - show the modules your program loads, recursively &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.097&lt;/strong&gt; on 2023-01-04&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.096 was 4 years, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.884' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.884&lt;/strong&gt; on 2023-01-05&lt;/li&gt;  &lt;li&gt;Votes: 94&lt;/li&gt;  &lt;li&gt;Previous version: 1.882 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.880' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.880&lt;/strong&gt; on 2023-01-04&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.879 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CHROMATIC/Modern-Perl-1.20230106' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Modern::Perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - enable all of the features of Modern Perl with one import &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.20230106&lt;/strong&gt; on 2023-01-06&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: 1.20220515 was 7 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005005&lt;/strong&gt; on 2023-01-05&lt;/li&gt;  &lt;li&gt;Votes: 294&lt;/li&gt;  &lt;li&gt;Previous version: 2.005004 was 1 year, 9 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Params-ValidationCompiler-0.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Params::ValidationCompiler&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build an optimized subroutine parameter validator once, use it forever &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.31&lt;/strong&gt; on 2023-01-07&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.30 was 4 years, 5 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.148' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.148&lt;/strong&gt; on 2023-01-07&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: 1.146 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.48&lt;/strong&gt; on 2023-01-02&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 1.47 was 7 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Spreadsheet-Read-0.85' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Spreadsheet::Read&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Meta-Wrapper for reading spreadsheet data &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.85&lt;/strong&gt; on 2023-01-04&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.84 was 1 year, 10 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9680' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9680&lt;/strong&gt; on 2023-01-06&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9675 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Test-Deep-1.204' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Deep&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extremely flexible deep comparison &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.204&lt;/strong&gt; on 2023-01-07&lt;/li&gt;  &lt;li&gt;Votes: 52&lt;/li&gt;  &lt;li&gt;Previous version: 1.130 was 2 years, 10 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Test-Routine-0.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Routine&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - composable units of assertion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.030&lt;/strong&gt; on 2023-01-06&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.029 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.49&lt;/strong&gt; on 2023-01-03&lt;/li&gt;  &lt;li&gt;Votes: 96&lt;/li&gt;  &lt;li&gt;Previous version: 1.48 was 7 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-2.002000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002000&lt;/strong&gt; on 2023-01-01&lt;/li&gt;  &lt;li&gt;Votes: 133&lt;/li&gt;  &lt;li&gt;Previous version: 2.002000 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3083285055011071355/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxvi-18-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3083285055011071355"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3083285055011071355"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/cdxxvi-18-great-cpan-modules-released.html" title="(cdxxvi) 18 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8044239666468895239</id>
    <published>2023-01-08T08:13:00.002+01:00</published>
    <updated>2023-01-08T08:13:54.487+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxix) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 34&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2023/01/08 07:13:20 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::GUI::Cellgraph" target="_blank"&gt;App::GUI::Cellgraph&lt;/a&gt; - draw pattern by cellular automata&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2::Template::MojoTemplate" target="_blank"&gt;Dancer2::Template::MojoTemplate&lt;/a&gt; - Mojo::Template wrapper for Dancer2&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::App::Plugin::ZshCompletion" target="_blank"&gt;MooseX::App::Plugin::ZshCompletion&lt;/a&gt; - zsh completion for your MooseX::App applications&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Melody" target="_blank"&gt;Regexp::Melody&lt;/a&gt; - Melody is a language that compiles to regular expressions, while aiming to be more readable and maintainable&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Bleach" target="_blank"&gt;Acme::Bleach&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autodie" target="_blank"&gt;autodie&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Gnuplot" target="_blank"&gt;Chart::Gnuplot&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Plain" target="_blank"&gt;Class::Plain&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer::Plugin::NYTProf" target="_blank"&gt;Dancer::Plugin::NYTProf&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer::Template::MojoTemplate" target="_blank"&gt;Dancer::Template::MojoTemplate&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::StackTrace" target="_blank"&gt;Devel::StackTrace&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::TraceUse" target="_blank"&gt;Devel::TraceUse&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dumbbench" target="_blank"&gt;Dumbbench&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exception::Class" target="_blank"&gt;Exception::Class&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus::Lang::Rust" target="_blank"&gt;FFI::Platypus::Lang::Rust&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Into" target="_blank"&gt;Import::Into&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Iterator::Simple" target="_blank"&gt;Iterator::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libnet" target="_blank"&gt;libnet&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Perl" target="_blank"&gt;Modern::Perl&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::NYTProf" target="_blank"&gt;Mojolicious::Plugin::NYTProf&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Status" target="_blank"&gt;Mojolicious::Plugin::Status&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=401)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quiq" target="_blank"&gt;Quiq&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract" target="_blank"&gt;SQL::Abstract&lt;/a&gt; (+1=72)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract::Pg" target="_blank"&gt;SQL::Abstract::Pg&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Descriptive" target="_blank"&gt;Statistics::Descriptive&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable::Improved" target="_blank"&gt;Storable::Improved&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Modern" target="_blank"&gt;Test::Modern&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Loy" target="_blank"&gt;XML::Loy&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8044239666468895239/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxxxix-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8044239666468895239"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8044239666468895239"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/01/dxxxix-metacpan-weekly-report.html" title="(dxxxix) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): December 2022 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_dec_2022"/>
  <id>tag:news.perlfoundation.org,2023-01-04:/post/maintaining_perl_dave_mitchell_dec_2022</id>
  <published>2023-01-04T10:07:57</published>
  <updated>2023-01-04T10:07:57</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during December covered by my TPF perl core maintenance grant. This month I continued work on making the stack reference counted. A couple of weeks ago I reached a major milestone: the point where I actually enabled reference-counting of SVs on the stack for the first time. Since then I have reached the point where the perl build actually completes 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during December covered by my TPF
perl core maintenance grant.</p>

<p>This month I continued work on making the stack reference counted.</p>

<p>A couple of weeks ago I reached a major milestone: the point where I
actually enabled reference-counting of SVs on the stack for the first
time. Since then I have reached the point where the perl build actually
completes (including the make runs in each dist/ and cpan/ subdir) and
'make minitest' only has a couple of failures. A full 'make test' seems to
have a lot of passing test files but currently hangs in some of the
threads tests - so I haven't been able to run 'make test' to completion
yet.</p>

<p>These preliminary results give me encouragement that my approach is sound,
and that it is just a case of fixing up all individual issues as they are
revealed by the test suite.</p>

<p>As a trivial example, this code was failing: ($ref + 1), because the
addition (like other numeric ops) uses the address of a plain reference as
the value to add, and pp_add() does this by replacing the ref SV on the
stack with an SV containing the int value of the ref. This simple
replacement, without adjusting reference counts, leaked the ref SV and
caused the temporary integer SV to be prematurely freed. Because this was
hidden away in a separate function dedicated to handling possible
overloading, I didn't spot it before enabling reference counting.</p>

<p>I have no idea how much further effort it will require to get the main
test suite to pass. After that, it is then a case of removing the wrapping
of performance-critical functions, then I'll be able to measure how much
slowdown there is. At that point it may become a candidate to be merged
into bleed (but enabled by default), then I can continue (at a more
leisurely pace) to unwrap further ops, add in optimisations, and work out
how new XS code be written to take direct advantage of a ref-counted
stack.</p>

<p>SUMMARY:
* 1:01 #6543 $1 dynamic scoping breaks with recursion
* 78:03 make stack reference counted
* 7:22 process p5p mailbox</p>

<p>TOTAL:
 * 86:26 (HH::MM)</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#597 - Happy New Year!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/597.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I hope you had a successful 2022 and you are ready for the next year. I certainly have lots of plans. As always. They are also changing a lot all the time. One of them is a new course I am working on called <a href="https://osdc.code-maven.com/">OSDC - Open Source Development Course</a>. It is a hands-on course that covers git/GitHub/GitLab/Testing/CI using real-world open source projects. It is also not only a plan, I am starting the first session next Sunday. It will be given in Hebrew.</p>
<p>For the course I started to collect <a href="https://github.com/szabgab/open-source-by-corporations">Open Source projects developed by corporations</a>. There are a few where the product is open source such as <a href="https://redis.io/">Redis</a> and <a href="https://www.elastic.co/">Elastic</a>. There are others where the company shares some of its code as open source such as Netflix, Facebook, or Booking.com.</p>
<p>I'd like to ask for your help. Look around at your company and maybe other companies and let me know which one shares projects using an Open Source license. It would help me and the participants of this courses a lot. For the purpose of the course and for my collection the programming languages don't matter.</p>
<p>However, if you can also point out Perl-based projects, that would be even better. Then I could feature these projects in the newsletter. Let's start now with one I already found:</p>
<p><a href="https://github.com/bookingcom/pakket">pakket</a> by <a href="https://www.booking.com/">Booking.com</a> is an Unopinionated Meta-Packaging System that allows you to manage dependencies. It works by trying to avoid work.</p>
<p>Enjoy your year!</p></div>
    </content>
    <id>https://perlweekly.com/archive/597.html</id>
    <published>2023-01-02T10:00:00Z</published>
    <updated>2023-01-02T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/01/02/list-of-new-cpan-distributions-dec-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Cavaspazi">Acme-Cavaspazi</a></td>
<td><a href="https://metacpan.org/author/PROCH">PROCH</a></td>
<td>0.1.0</td>
<td>1.0.0</td>
<td>a simple function to remove spaces from strings or lists of strings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-FSM">Acme-FSM</a></td>
<td><a href="https://metacpan.org/author/WHYNOT">WHYNOT</a></td>
<td>v2.3.5</td>
<td>v2.3.5</td>
<td>Pseudo Finite State Machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Affix">Affix</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.04</td>
<td>0.09_05</td>
<td>A Foreign Function Interface eXtension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Boost-Headers">Alien-Boost-Headers</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1.7</td>
<td>1.9</td>
<td>Find or build Boost Headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Boost-ProgramOptions">Alien-Boost-ProgramOptions</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1.7</td>
<td>1.7</td>
<td>Find or build libboost</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-BPOMUtils-NutritionFacts">App-BPOMUtils-NutritionFacts</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015</td>
<td>0.015</td>
<td>Utilities related to BPOM nutrition facts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CSV2LaTeXTable">App-CSV2LaTeXTable</a></td>
<td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
<td>1.0.0</td>
<td>1.1.0</td>
<td>Generate LaTeX table from CSV file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox-Client">App-OpenMbox-Client</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.11</td>
<td>0.13</td>
<td>A perl client to send simple email via OpenMbox's smtp server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox-Test">App-OpenMbox-Test</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.10</td>
<td>0.13</td>
<td>Auto delivery test for OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/C600">C600</a></td>
<td><a href="https://metacpan.org/author/XYF">XYF</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Wrap of C600</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Changes">Changes</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.1</td>
<td>Changes file management</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-EncodedColumn-Crypt-Passphrase-Argon2">DBIx-Class-EncodedColumn-Crypt-Passphrase-Argon2</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0107</td>
<td>Crypt::Passphrase::Argon2 backend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-EncodedColumn-Crypt-Passphrase-Bcrypt">DBIx-Class-EncodedColumn-Crypt-Passphrase-Bcrypt</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0110</td>
<td>Crypt::Passphrase::Bcrypt backend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-HTML-TreeDumper">Data-HTML-TreeDumper</a></td>
<td><a href="https://metacpan.org/author/TAKEASH">TAKEASH</a></td>
<td>v0.0.1</td>
<td>v0.0.4</td>
<td>dumps perl data as HTML5 open/close tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Localize-YAML">Data-Localize-YAML</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acquire Lexicons From .yml Files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-FilterBundle-Regexp">Data-Sah-FilterBundle-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah filters related to regular expressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-ULID-XS">Data-ULID-XS</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.005</td>
<td>XS backend for ULID generation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Cover-Report-Cobertura">Devel-Cover-Report-Cobertura</a></td>
<td><a href="https://metacpan.org/author/JEFFCPAN">JEFFCPAN</a></td>
<td>1.0</td>
<td>1.0</td>
<td>Backend for Cobertura reporting of coverage statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Filesys-Restrict">Filesys-Restrict</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Restrict filesystem access</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-Dogecoin-Utils">Finance-Dogecoin-Utils</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20221211.2353</td>
<td>1.20221211.2353</td>
<td>Libraries and Utilities to work with Dogecoin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-SEC-EdgarData">Finance-SEC-EdgarData</a></td>
<td><a href="https://metacpan.org/author/TRSKI">TRSKI</a></td>
<td>0.01</td>
<td>0.010021</td>
<td>scraping edgar for fun and profit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KCP">KCP</a></td>
<td><a href="https://metacpan.org/author/HOMQYY">HOMQYY</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Perl extension for skywind3000/kcp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LibUI">LibUI</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Simple, Portable, Native GUI Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-NFTables">Linux-NFTables</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl interface to libnftables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-SNAFU">Math-SNAFU</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>decimal to SNAFU converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Redis-XS">Net-Async-Redis-XS</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.008</td>
<td>faster version of Net::Async::Redis</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Newtype">Newtype</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Perl implementation of an approximation for Haskell's newtype</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Pad-Keyword-Accessor">Object-Pad-Keyword-Accessor</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>declare lvalue accessors on Object::Pad classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenAI-API">OpenAI-API</a></td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>0.01</td>
<td>0.06</td>
<td>A Perl module for accessing the OpenAI API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perlsac-rwsac">Perlsac-rwsac</a></td>
<td><a href="https://metacpan.org/author/HIREPLAN">HIREPLAN</a></td>
<td>0.01</td>
<td>0.01</td>
<td>a module to read and write SAC file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Favicon_Simple">Plack-Middleware-Favicon_Simple</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl Plack Middleware to provide favicon</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Method_Allow">Plack-Middleware-Method_Allow</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.01</td>
<td>perl Plack Middleware to filter HTTP Methods</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-SocketUtil">SPVM-Resource-SocketUtil</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>The Resource for Socket Utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Phone">Sah-Schemas-Phone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Schemas related to phones &amp; phone numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Elasticsearch-Client-8_0">Search-Elasticsearch-Client-8_0</a></td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>8.00</td>
<td>8.00</td>
<td>Thin client with full support for Elasticsearch 8.x APIs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Elasticsearch-Client-8_0-Async">Search-Elasticsearch-Client-8_0-Async</a></td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>8.00</td>
<td>8.00</td>
<td>Thin async client with full support for Elasticsearch 8.x APIs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Tagged-Markdown">String-Tagged-Markdown</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>parse and emit text with Markdown inline formatting</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Operator-ExistsOr">Syntax-Operator-ExistsOr</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>an infix operator sensitive to hash element existence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Business-ID-KBLI">TableDataBundle-Business-ID-KBLI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20220912.0.0</td>
<td>20220912.0.0</td>
<td>Collection of TableData:: modules related to KBLI (Kode Baku Lapangan Usaha, a.k.a. Standard Code of Business Field)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Software-License">TableDataBundle-Software-License</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Collection of TableData:: modules related to software license</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse">Terse</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.121</td>
<td>lightweight JSON APIs.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Config">Terse-Config</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Terse configs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Headers">Terse-Headers</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Terse headers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terse-Static">Terse-Static</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Serve static resources</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Named">Test-Named</a></td>
<td><a href="https://metacpan.org/author/AIMASS">AIMASS</a></td>
<td>v001</td>
<td>v0.03</td>
<td>Perl extension for named tests. Inspired on this:</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test2-Tools-Command">Test2-Tools-Command</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.11</td>
<td>run unix commands</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TimeZone-Solar">TimeZone-Solar</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.2.1</td>
<td>local solar timezone lookup and utilities including DateTime compatibility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-FileTree">Tk-FileTree</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Tk::DirTree like widget for displaying &amp; manipulating directories  (and files).</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wasm-Wasmer">Wasm-Wasmer</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>WebAssembly in Perl via Wasmer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-SendBird">WebService-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/oo_sub">oo_sub</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>v1.0.0</td>
<td>v1.0.9</td>
<td>Enable OOP in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/oop">oop</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1.00</td>
<td>v1.0.0</td>
<td>Use object-oriented versions of built-in Perl functions</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>52</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>32</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EZIMUEL">EZIMUEL</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/WHYNOT">WHYNOT</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RENEEB">RENEEB</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/AIMASS">AIMASS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JEFFCPAN">JEFFCPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/HIREPLAN">HIREPLAN</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/TAKEASH">TAKEASH</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PROCH">PROCH</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/XYF">XYF</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/TRSKI">TRSKI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/HOMQYY">HOMQYY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-Cavaspazi PROCH 0.1.0 1.0.0 a simple function to remove spaces from strings or lists of strings Acme-FSM WHYNOT v2.3.5 v2.3.5 Pseudo Finite State Machine Affix SANKO 0.04 0.09_05 A Foreign Function Interface eXtension Alien-Boost-Headers CONTRA 1.7 1.9 Find or build Boost Headers Alien-Boost-ProgramOptions CONTRA 1.7 1.7 Find or build libboost … <a href="https://perlancar.wordpress.com/2023/01/02/list-of-new-cpan-distributions-dec-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2004</id>
    <published>2023-01-02T02:06:15Z</published>
    <updated>2023-01-02T02:06:15Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
  <title>Marketing Committee Achievements in 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/marketingendofyr22"/>
  <id>tag:news.perlfoundation.org,2022-12-27:/post/marketingendofyr22</id>
  <published>2022-12-27T18:07:42</published>
  <updated>2022-12-27T18:07:42</updated>
  <summary>
  <![CDATA[
     Looking back over 2022 the Marketing Committee presents our accomplishments to the Board and the Communities we serve. Our sincere and abundant thanks to all those who have volunteered their time to deliver these outcomes. Created the Prospectus for 2022 Arranged to have 2 Perl related articles published in the Linux Format magazine Launched The Perl store offering Official Perl merchandise with profits going to the Perl Fund Organized and 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/298983015c683950e6b5ede69dbae0d3f27f1fd6/prospectus logos.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Looking back over 2022 the Marketing Committee presents our accomplishments to the Board and the Communities we serve.</p>

<p>Our sincere and abundant thanks to all those who have volunteered their time to deliver these outcomes.</p>

<ul>
<li>Created the <a href="https://www.perlfoundation.org/uploads/1/0/6/6/106663517/perl_raku_prospectus_final_interactive_v2.pdf">Prospectus for 2022</a></li>
<li>Arranged to have 2 Perl related articles published in the Linux Format magazine</li>
<li>Launched <a href="https://the-perl-store.creator-spring.com/">The Perl store</a> offering Official Perl merchandise with profits going to the Perl Fund</li>
<li>Organized and held the <a href="https://blogs.perl.org/users/dean/2022/07/debrief-perl-ide-hackathon-2022.html">Perl IDE Hackathon</a> at The Perl and Raku Conference in Houston. This in response to <a href="https://news.perlfoundation.org/post/newcomer-survey-results-actions">community feedback</a> about the importance of IDE support.</li>
<li><a href="https://facebook.com/tpf.perl">The Perl Foundation</a> continues to grow on Facebook</li>
<li><a href="https://facebook.com/theperlconference">Perl and Raku Conference</a> page continues to grow on Facebook</li>
<li>Secured FOSDEM booth space in 2023</li>
<li>Secured the Camelia logo for The Perl and Raku Foundation</li>
</ul>

<p>We are excited for the opportunities that the new year presents and express our continuing commitment to growing the Perl and Raku communities.</p>

<p>The committee exists to coordinate and facilitate volunteer efforts to promote the Perl and Raku ecosystems, create and distribute quality content, promote Perl and Raku related events, and assist with getting people involved.</p>

<p>All willing hands are welcome to attend our monthly meetings via Zoom. Please <a href="mailto:marketing@perlfoundation.org">contact the committee via email</a> for meeting invites.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Fractal Christmas Tree</title>
    <link href="http://perladvent.org/2022/2022-12-27.html"/>
    <id>http://perladvent.org/2022/2022-12-27.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;!-- exit HTML &lt;body&gt; section, go back into &lt;head&gt; section, 
     modify CSS to increase visibility of POD C&lt;&gt; formatting codes
     (which generate HTML &lt;code&gt; tags not inside &lt;table&gt; tags),
     exit &lt;head&gt; section, go back into &lt;body&gt; section,
     CSS changes will apply to the entire HTML document --&gt;
&lt;/body&gt;
&lt;head&gt;
&lt;style&gt;

/* POD text inside C&lt;&gt; tags; generates HTML &lt;code&gt; tags outside &lt;table&gt; tags  */
code {
    background-color: lightblue;
    padding: 2px;
}

/* HTML table cells via &lt;td class='code'&gt; tags */
/*
.code {
    background-color: none;
}
*/

/* POD text inside '=begin perl' and '=begin code' sections; generates HTML &lt;code&gt; tags inside &lt;table&gt; tags */
table code {
    background: none;
    padding: 0px;
}

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;Merry Christmas and Happy New Year! :-)&lt;/p&gt;

&lt;p&gt;Our holiday-themed programming goal is to implement a fun little Perl application, which will display a Christmas tree using the Sierpinski fractal algorithm.&lt;/p&gt;

&lt;center&gt;&lt;img src="fractal_christmas_tree_10_pink.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;p&gt;Let&amp;#39;s begin by reviewing the code for generating Sierpinski Triangle fractals, stored in a file named &lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/lib/MathPerl/Fractal/Sierpinski.pm"&gt;Sierpinski.pm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are an experienced Perl programmer, you will immediately notice the definition and utilization of data types such as &lt;code&gt;integer&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;, as well as data structures such as &lt;code&gt;integer::arrayref&lt;/code&gt; and &lt;code&gt;integer::arrayref::arrayref&lt;/code&gt; etc. Data types and data structures, along with other Perl programming strategies such as &lt;code&gt;CRITICS&lt;/code&gt; as well as subroutine &lt;code&gt;$RETURN_TYPE&lt;/code&gt; and &lt;code&gt;@ARG&lt;/code&gt; named input arguments, are included for best practices and compatibility with the &lt;a href="http://rperl.org"&gt;Perl compiler&lt;/a&gt;.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;# [[[ PREPROCESSOR ]]]&lt;br /&gt;# declare Perl-compatible data types &amp;amp; data structures &lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;#use RPerl;  # replaced by PREPROCESSOR for simplicity&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::Sierpinski&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.14&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# required for /r return AKA non-destructive regex flag&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CRITICS ]]]&lt;br /&gt;# USER DEFAULT 1: allow numeric values &amp;amp; print operator&lt;br /&gt;## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)&lt;br /&gt;## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters &amp;amp; sigils&lt;br /&gt;## no critic qw(ProhibitConstantPragma ProhibitMagicNumbers)  # USER DEFAULT 3: allow constants&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OO INHERITANCE ]]]&lt;br /&gt;#use parent qw(MathPerl::Fractal);  # disable unnecessary inheritance for simplicity&lt;br /&gt;#use MathPerl::Fractal;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;English&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$Data::Dumper::Deepcopy&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# display human-readable numeric data, not $VAR1-&amp;gt;[0] references&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ SUBROUTINES ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# recursively generate triangles, grouped by recursion level&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;sierpinski&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt; &lt;span class="symbol"&gt;$RETURN_TYPE&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;@ARG&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $recursions_remaining = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $triangle = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # shortcut variables, easier to read in midpoint calculations below&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # calculate midpoints between two coordinates [x1, y1] and [x2, y2] is [(x1+x2)/2, (y1+y2)/2]&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # construct 3 sub-triangles from orinal points and newly-calculated midpoints&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;   &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # $triangle_groups is zero-indexed like all other Perl arrays,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# so we need to subtract one from $recursions_remaining before using as an index,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# in order to avoid an undefined element at element 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# also, we need to decrement $recursions_remaining before making recursive calls;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# for both of these reasons, we can decrement now&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # store all triangles grouped by recursion level&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # recurse once for each sub-triangle&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # return after maximum recursion level is reached (conditional block above not entered),&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# or all recursion calls have returned (conditional block above entered);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# no return value, all generated data is stored directly in $triangle_groups&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# end of class&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Let&amp;#39;s see what happens when we call the &lt;code&gt;sierpinski()&lt;/code&gt; subroutine, passing in only 1 level of recursion for simplicity...&lt;/p&gt;

&lt;p&gt;The recursion directly populates &lt;code&gt;$retval&lt;/code&gt; in reverse order, from highest index to lowest index, eventually ending at index 0 with no further recursion to be done, and all the values are returned back to the original subroutine call. Because of this reverse-index population, the hard-coded initial triangle is stored at the highest (not the lowest) index in &lt;code&gt;$retval&lt;/code&gt;, as you can see in the Perl one-liner (two-liner?) below. The initial triangle&amp;#39;s hard-coded definition is done during declaration for brevity, and the to-be-populated element is left as undef.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ perl -e &amp;#39;use MathPerl::Fractal::Sierpinski; my $retval = [undef, [[512, 100], [212, 600], [812, 600]]];&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MathPerl::Fractal::Sierpinski::sierpinski($retval-&amp;gt;[1], 1, $retval);&amp;#39;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;First, &lt;code&gt;sierpinski()&lt;/code&gt; will display the 3 &lt;code&gt;[ x, y ]&lt;/code&gt; cartesian coordinates representing the 3 corners of our initial input triangle, received in the &lt;code&gt;my number::arrayref::arrayref $triangle&lt;/code&gt; argument:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;in sierpinski(), received $recursions_remaining = 1&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [ [ 512, 100 ], [ 212, 600 ], [ 812, 600 ] ];&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Then the Sierpinski algorithm creates 3 sub-triangles and makes a recursive call to &lt;code&gt;sierpinski()&lt;/code&gt; for each sub-triangle:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;in sierpinski(), received $recursions_remaining = 0&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;100&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;br /&gt;&lt;br /&gt;in sierpinski(), received $recursions_remaining = 0&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;212,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;br /&gt;&lt;br /&gt;in sierpinski(), received $recursions_remaining = 0&lt;br /&gt;in sierpinski(), received $triangle = $VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;812,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If we were to render these 3 sub-triangles in white, it would look like a monochrome triforce:&lt;/p&gt;

&lt;center&gt;&lt;img src="fractal_christmas_tree_01_white.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;p&gt;After all recursion has completed, we are left with our final &lt;code&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/code&gt; data structure, which contains all generated triangles grouped by recursion level:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;have $my_triangle_groups = &lt;br /&gt;$VAR1 = [&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;100&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;362,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;212,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;662,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;350&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;812,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;512,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;100&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;212,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;812,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;600&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;];&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Ultimately, it is the &lt;code&gt;$my_triangle_groups&lt;/code&gt; data which will be rendered to comprise the main triangular body of the Christmas tree.&lt;/p&gt;

&lt;p&gt;Next let&amp;#39;s review the Perl code for generating the Christmas Tree data and rendering the Simple DirectMedia Layer (&lt;a href="https://metacpan.org/module/SDL"&gt;SDL&lt;/a&gt;) graphics, stored in a file named &lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/lib/MathPerl/Fractal/ChristmasTree.pm"&gt;ChristmasTree.pm&lt;/a&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;br /&gt;96:&amp;nbsp;&lt;br /&gt;97:&amp;nbsp;&lt;br /&gt;98:&amp;nbsp;&lt;br /&gt;99:&amp;nbsp;&lt;br /&gt;100:&amp;nbsp;&lt;br /&gt;101:&amp;nbsp;&lt;br /&gt;102:&amp;nbsp;&lt;br /&gt;103:&amp;nbsp;&lt;br /&gt;104:&amp;nbsp;&lt;br /&gt;105:&amp;nbsp;&lt;br /&gt;106:&amp;nbsp;&lt;br /&gt;107:&amp;nbsp;&lt;br /&gt;108:&amp;nbsp;&lt;br /&gt;109:&amp;nbsp;&lt;br /&gt;110:&amp;nbsp;&lt;br /&gt;111:&amp;nbsp;&lt;br /&gt;112:&amp;nbsp;&lt;br /&gt;113:&amp;nbsp;&lt;br /&gt;114:&amp;nbsp;&lt;br /&gt;115:&amp;nbsp;&lt;br /&gt;116:&amp;nbsp;&lt;br /&gt;117:&amp;nbsp;&lt;br /&gt;118:&amp;nbsp;&lt;br /&gt;119:&amp;nbsp;&lt;br /&gt;120:&amp;nbsp;&lt;br /&gt;121:&amp;nbsp;&lt;br /&gt;122:&amp;nbsp;&lt;br /&gt;123:&amp;nbsp;&lt;br /&gt;124:&amp;nbsp;&lt;br /&gt;125:&amp;nbsp;&lt;br /&gt;126:&amp;nbsp;&lt;br /&gt;127:&amp;nbsp;&lt;br /&gt;128:&amp;nbsp;&lt;br /&gt;129:&amp;nbsp;&lt;br /&gt;130:&amp;nbsp;&lt;br /&gt;131:&amp;nbsp;&lt;br /&gt;132:&amp;nbsp;&lt;br /&gt;133:&amp;nbsp;&lt;br /&gt;134:&amp;nbsp;&lt;br /&gt;135:&amp;nbsp;&lt;br /&gt;136:&amp;nbsp;&lt;br /&gt;137:&amp;nbsp;&lt;br /&gt;138:&amp;nbsp;&lt;br /&gt;139:&amp;nbsp;&lt;br /&gt;140:&amp;nbsp;&lt;br /&gt;141:&amp;nbsp;&lt;br /&gt;142:&amp;nbsp;&lt;br /&gt;143:&amp;nbsp;&lt;br /&gt;144:&amp;nbsp;&lt;br /&gt;145:&amp;nbsp;&lt;br /&gt;146:&amp;nbsp;&lt;br /&gt;147:&amp;nbsp;&lt;br /&gt;148:&amp;nbsp;&lt;br /&gt;149:&amp;nbsp;&lt;br /&gt;150:&amp;nbsp;&lt;br /&gt;151:&amp;nbsp;&lt;br /&gt;152:&amp;nbsp;&lt;br /&gt;153:&amp;nbsp;&lt;br /&gt;154:&amp;nbsp;&lt;br /&gt;155:&amp;nbsp;&lt;br /&gt;156:&amp;nbsp;&lt;br /&gt;157:&amp;nbsp;&lt;br /&gt;158:&amp;nbsp;&lt;br /&gt;159:&amp;nbsp;&lt;br /&gt;160:&amp;nbsp;&lt;br /&gt;161:&amp;nbsp;&lt;br /&gt;162:&amp;nbsp;&lt;br /&gt;163:&amp;nbsp;&lt;br /&gt;164:&amp;nbsp;&lt;br /&gt;165:&amp;nbsp;&lt;br /&gt;166:&amp;nbsp;&lt;br /&gt;167:&amp;nbsp;&lt;br /&gt;168:&amp;nbsp;&lt;br /&gt;169:&amp;nbsp;&lt;br /&gt;170:&amp;nbsp;&lt;br /&gt;171:&amp;nbsp;&lt;br /&gt;172:&amp;nbsp;&lt;br /&gt;173:&amp;nbsp;&lt;br /&gt;174:&amp;nbsp;&lt;br /&gt;175:&amp;nbsp;&lt;br /&gt;176:&amp;nbsp;&lt;br /&gt;177:&amp;nbsp;&lt;br /&gt;178:&amp;nbsp;&lt;br /&gt;179:&amp;nbsp;&lt;br /&gt;180:&amp;nbsp;&lt;br /&gt;181:&amp;nbsp;&lt;br /&gt;182:&amp;nbsp;&lt;br /&gt;183:&amp;nbsp;&lt;br /&gt;184:&amp;nbsp;&lt;br /&gt;185:&amp;nbsp;&lt;br /&gt;186:&amp;nbsp;&lt;br /&gt;187:&amp;nbsp;&lt;br /&gt;188:&amp;nbsp;&lt;br /&gt;189:&amp;nbsp;&lt;br /&gt;190:&amp;nbsp;&lt;br /&gt;191:&amp;nbsp;&lt;br /&gt;192:&amp;nbsp;&lt;br /&gt;193:&amp;nbsp;&lt;br /&gt;194:&amp;nbsp;&lt;br /&gt;195:&amp;nbsp;&lt;br /&gt;196:&amp;nbsp;&lt;br /&gt;197:&amp;nbsp;&lt;br /&gt;198:&amp;nbsp;&lt;br /&gt;199:&amp;nbsp;&lt;br /&gt;200:&amp;nbsp;&lt;br /&gt;201:&amp;nbsp;&lt;br /&gt;202:&amp;nbsp;&lt;br /&gt;203:&amp;nbsp;&lt;br /&gt;204:&amp;nbsp;&lt;br /&gt;205:&amp;nbsp;&lt;br /&gt;206:&amp;nbsp;&lt;br /&gt;207:&amp;nbsp;&lt;br /&gt;208:&amp;nbsp;&lt;br /&gt;209:&amp;nbsp;&lt;br /&gt;210:&amp;nbsp;&lt;br /&gt;211:&amp;nbsp;&lt;br /&gt;212:&amp;nbsp;&lt;br /&gt;213:&amp;nbsp;&lt;br /&gt;214:&amp;nbsp;&lt;br /&gt;215:&amp;nbsp;&lt;br /&gt;216:&amp;nbsp;&lt;br /&gt;217:&amp;nbsp;&lt;br /&gt;218:&amp;nbsp;&lt;br /&gt;219:&amp;nbsp;&lt;br /&gt;220:&amp;nbsp;&lt;br /&gt;221:&amp;nbsp;&lt;br /&gt;222:&amp;nbsp;&lt;br /&gt;223:&amp;nbsp;&lt;br /&gt;224:&amp;nbsp;&lt;br /&gt;225:&amp;nbsp;&lt;br /&gt;226:&amp;nbsp;&lt;br /&gt;227:&amp;nbsp;&lt;br /&gt;228:&amp;nbsp;&lt;br /&gt;229:&amp;nbsp;&lt;br /&gt;230:&amp;nbsp;&lt;br /&gt;231:&amp;nbsp;&lt;br /&gt;232:&amp;nbsp;&lt;br /&gt;233:&amp;nbsp;&lt;br /&gt;234:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;#use RPerl;  # disabled for simplicity; data types declared in Sierpinski.pm &amp;amp; inherited below&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::ChristmasTree&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.14&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# required for /r return AKA non-destructive regex flag&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CRITICS ]]]&lt;br /&gt;# USER DEFAULT 1: allow numeric values &amp;amp; print operator&lt;br /&gt;## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)&lt;br /&gt;## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters &amp;amp; sigils&lt;br /&gt;## no critic qw(ProhibitConstantPragma ProhibitMagicNumbers)  # USER DEFAULT 3: allow constants&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OO INHERITANCE ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;parent&lt;/span&gt; &lt;span class="words"&gt;qw(MathPerl::Fractal::Sierpinski)&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::Sierpinski&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;English&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$Data::Dumper::Deepcopy&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# display human-readable numeric data, not $VAR1-&amp;gt;[0] references&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# https://metacpan.org/dist/SDL/view/lib/pods/SDL/Event.pod&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;   &lt;span class="comment"&gt;# used for window creation &amp;amp; control&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for creating Event object&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Events&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="comment"&gt;# used for Event queue handling functions&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Time::HiRes&lt;/span&gt; &lt;span class="words"&gt;qw( gettimeofday usleep )&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for time-based animation control&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ SUBROUTINES ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# display an animated Christmas tree!&lt;br /&gt;# define hard-coded constant data; call sierpinski() to recursively generate fractal triangles;&lt;br /&gt;# initialize SDL graphics; render static graphics; render dynamic graphics (animation)&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;generate_fractal__render_animation&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt; &lt;span class="symbol"&gt;$RETURN_TYPE&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ DATA FOR SIZES &amp;amp; SHAPES &amp;amp; COLORS;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#   HARD-CODED 1024x768 RESOLUTION &amp;amp; 32-BIT COLOR DEPTH ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initial triangle's 3 corners as [x, y] Euclidean coordinates&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;212&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;812&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;     &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;105&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;150&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;175&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_white&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;140&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # colors as [r, g, b] triplets; number of colors is number of recursions&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# green needs to be the color of the smallest, and thus most numerous, triangles&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_white&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;scalar&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # rectangle in format [ x, y, width, height ]&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;601&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;050&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;155&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# top right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # colors for animated Christmas tree lights&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ PREPARE &amp;amp; MAKE INITIAL RECURSIVE CALL ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # declare &amp;amp; initialize final array outside of the recursive subroutine for easy direct access by all recursive calls&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initial triangle is in a triangle group by itself&lt;br /&gt;&lt;/span&gt;    &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initial call to recursive subroutine&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;MathPerl::Fractal::Sierpinski::sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # regex to (g)lobally (s)earch for numbers incorrectly wrapped in 'single-quotes' by Dumper,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# replace by // empty string, no lvalue $variable so directly (r)eturn modified string;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# https://perldoc.perl.org/perlop#s%2FPATTERN%2FREPLACEMENT%2Fmsixpodualngcer&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_triangle_groups = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ INITIALIZE GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # https://metacpan.org/dist/SDL/view/lib/pods/SDL/Events.pod&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="words"&gt;qw(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;no_such_event&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_ACTIVEEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_KEYDOWN SDL_KEYUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_MOUSEMOTION SDL_MOUSEBUTTONDOWN SDL_MOUSEBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_JOYAXISMOTION SDL_JOYBALLMOTION SDL_JOYHATMOTION SDL_JOYBUTTONDOWN SDL_JOYBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_QUIT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_SYSWMEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_VIDEORESIZE SDL_VIDEOEXPOSE&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_USEREVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_NUMEVENTS&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# constant data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # SDL includes moved into [[[ INCLUDES ]]] section above&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # initialize SDL video &amp;amp; application &amp;amp; event;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# we do not call $my_SDL_app-&amp;gt;run() anywhere in this program, instead we use the while() run loop below&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;SDL::init&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Merry Christmas!!  Perl Advent 2022!!!'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1024&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                     &lt;span class="comment"&gt;# hard-coded 1024x768 resolution&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;height&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;768&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;depth&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;32&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                       &lt;span class="comment"&gt;# hard-coded 32-bit color&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;resizeable&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;                     &lt;span class="comment"&gt;# allow window resize; does not scale window contents&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ RENDER STATIC GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # draw Christmas tree branches &amp;amp; snow tinsel &amp;amp; ornaments &amp;amp; lights;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# iterate through triangle groups in reverse order, due to reverse population during recursion&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # https://metacpan.org/dist/SDL/view/lib/pods/SDLx/Surface.pod&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # refresh window on every triangle for fun cascade drawing effect&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # draw Christmas tree trunk &amp;amp; Star of Bethlehem&lt;br /&gt;&lt;/span&gt;    &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_rect&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;  &lt;span class="comment"&gt;# refresh window&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # [ RENDER DYNAMIC (ANIMATED) GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # set initial index for accesssing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # set initial time for changing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    #print 'have $seconds_start = ', $seconds_start, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # the main run loop, used instead of calling $my_SDL_app-&amp;gt;run();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# animate forever, until SDL_QUIT event is received in GUI window via &amp;lt;Alt-F4&amp;gt; keypress or window close mouse click,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# or in CLI window via &amp;lt;Ctrl-C&amp;gt; keypress&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # pump the event loop, gathering events from input devices&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;SDL::Events::pump_events&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # poll for currently pending events&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL::Events::poll_event&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have @SDL_EVENTS['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # we only care about the SDL_QUIT event telling us to exit&lt;br /&gt;&lt;/span&gt;            &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt; &lt;span class="operator"&gt;==&lt;/span&gt; &lt;span class="word"&gt;SDL_QUIT&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'SDL_QUIT event received, exiting'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;exit&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class="comment"&gt;        # get current time, for comparison with start time of current Christmas tree lights color&lt;br /&gt;&lt;/span&gt;        &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    #    print 'have $seconds_current = ', $seconds_current, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # twinkle Christmas tree lights every 1 second&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$seconds_current&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # reset start time to current time, for time cycle of next animation frame&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # iterate through lights colors&lt;br /&gt;&lt;/span&gt;            &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_color = $my_lights_colors-&amp;gt;['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_color&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # wrap back to beginning of lights colors when end is reached&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # only update second-smallest triangles, not the green of the Christmas tree itself&lt;br /&gt;&lt;/span&gt;            &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # redraw green of Christmas tree&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # redraw Star of Bethlehem&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;            # refresh window once for every Christmas tree lights color change, for synchronized lights&lt;br /&gt;&lt;/span&gt;            &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # briefly pause between each while() loop iteration, to avoid overloading CPU;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# ( 1_000_000 microseconds per second ) / ( 10_000 microseconds per iteration) = 100 iterations per second;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# need at least 100 while loop iterations per second, in order to process all of the otherwise-ignored&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# SDL_MOUSEMOTION events which are caused by simply moving the mouse over top of the window&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;usleep&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10_000&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;  &lt;span class="comment"&gt;# end of generate_fractal__render_animation()&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# end of class&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The above Christmas tree code is pretty much the simplest 2-D graphics rendering system I could write using SDL, with the ability to be exited gracefully instead of having to type &lt;code&gt;Ctrl-Z&lt;/code&gt; and then &lt;code&gt;$ killall -KILL perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Last, we only need a few lines of driver code to run it all:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/script/sierpinski_triangles_christmas.pl"&gt;sierpinski_triangles_christmas.pl&lt;/a&gt;&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# Fractal Christmas Tree&lt;br /&gt;# Sierpinski triangles animated using SDL graphics&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;MathPerl::Fractal::ChristmasTree&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OPERATIONS ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;MathPerl::Fractal::ChristmasTree::generate_fractal__render_animation&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you were to run the above program, which includes 5 colors for 5 levels of recursion, then you would see a rendered series of images similar to the following:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ ./sierpinski_triangles_christmas.pl&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_00_blank.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_01_white.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_02_red.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_03_blue.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_04_pink.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_05_green.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_10_pink.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_11_orange.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_12_purple.png" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;p&gt;However, before you can run this program you will need to install the SDL dependencies:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ cpanm -v SDL SDLx::App SDL::Event SDL::Events&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Also, the easiest way to run this Fractal Christmas Tree program is to copy or download the monolithic code below (instead of all 3 files above), and then paste it into a single executable Perl file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wbraswell/mathperl/blob/1300d49616055f2fd55bb5385b8341005c238e15/script/sierpinski_triangles_christmas_monolith.pl"&gt;sierpinski_triangles_christmas_monolith.pl&lt;/a&gt;&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;br /&gt;96:&amp;nbsp;&lt;br /&gt;97:&amp;nbsp;&lt;br /&gt;98:&amp;nbsp;&lt;br /&gt;99:&amp;nbsp;&lt;br /&gt;100:&amp;nbsp;&lt;br /&gt;101:&amp;nbsp;&lt;br /&gt;102:&amp;nbsp;&lt;br /&gt;103:&amp;nbsp;&lt;br /&gt;104:&amp;nbsp;&lt;br /&gt;105:&amp;nbsp;&lt;br /&gt;106:&amp;nbsp;&lt;br /&gt;107:&amp;nbsp;&lt;br /&gt;108:&amp;nbsp;&lt;br /&gt;109:&amp;nbsp;&lt;br /&gt;110:&amp;nbsp;&lt;br /&gt;111:&amp;nbsp;&lt;br /&gt;112:&amp;nbsp;&lt;br /&gt;113:&amp;nbsp;&lt;br /&gt;114:&amp;nbsp;&lt;br /&gt;115:&amp;nbsp;&lt;br /&gt;116:&amp;nbsp;&lt;br /&gt;117:&amp;nbsp;&lt;br /&gt;118:&amp;nbsp;&lt;br /&gt;119:&amp;nbsp;&lt;br /&gt;120:&amp;nbsp;&lt;br /&gt;121:&amp;nbsp;&lt;br /&gt;122:&amp;nbsp;&lt;br /&gt;123:&amp;nbsp;&lt;br /&gt;124:&amp;nbsp;&lt;br /&gt;125:&amp;nbsp;&lt;br /&gt;126:&amp;nbsp;&lt;br /&gt;127:&amp;nbsp;&lt;br /&gt;128:&amp;nbsp;&lt;br /&gt;129:&amp;nbsp;&lt;br /&gt;130:&amp;nbsp;&lt;br /&gt;131:&amp;nbsp;&lt;br /&gt;132:&amp;nbsp;&lt;br /&gt;133:&amp;nbsp;&lt;br /&gt;134:&amp;nbsp;&lt;br /&gt;135:&amp;nbsp;&lt;br /&gt;136:&amp;nbsp;&lt;br /&gt;137:&amp;nbsp;&lt;br /&gt;138:&amp;nbsp;&lt;br /&gt;139:&amp;nbsp;&lt;br /&gt;140:&amp;nbsp;&lt;br /&gt;141:&amp;nbsp;&lt;br /&gt;142:&amp;nbsp;&lt;br /&gt;143:&amp;nbsp;&lt;br /&gt;144:&amp;nbsp;&lt;br /&gt;145:&amp;nbsp;&lt;br /&gt;146:&amp;nbsp;&lt;br /&gt;147:&amp;nbsp;&lt;br /&gt;148:&amp;nbsp;&lt;br /&gt;149:&amp;nbsp;&lt;br /&gt;150:&amp;nbsp;&lt;br /&gt;151:&amp;nbsp;&lt;br /&gt;152:&amp;nbsp;&lt;br /&gt;153:&amp;nbsp;&lt;br /&gt;154:&amp;nbsp;&lt;br /&gt;155:&amp;nbsp;&lt;br /&gt;156:&amp;nbsp;&lt;br /&gt;157:&amp;nbsp;&lt;br /&gt;158:&amp;nbsp;&lt;br /&gt;159:&amp;nbsp;&lt;br /&gt;160:&amp;nbsp;&lt;br /&gt;161:&amp;nbsp;&lt;br /&gt;162:&amp;nbsp;&lt;br /&gt;163:&amp;nbsp;&lt;br /&gt;164:&amp;nbsp;&lt;br /&gt;165:&amp;nbsp;&lt;br /&gt;166:&amp;nbsp;&lt;br /&gt;167:&amp;nbsp;&lt;br /&gt;168:&amp;nbsp;&lt;br /&gt;169:&amp;nbsp;&lt;br /&gt;170:&amp;nbsp;&lt;br /&gt;171:&amp;nbsp;&lt;br /&gt;172:&amp;nbsp;&lt;br /&gt;173:&amp;nbsp;&lt;br /&gt;174:&amp;nbsp;&lt;br /&gt;175:&amp;nbsp;&lt;br /&gt;176:&amp;nbsp;&lt;br /&gt;177:&amp;nbsp;&lt;br /&gt;178:&amp;nbsp;&lt;br /&gt;179:&amp;nbsp;&lt;br /&gt;180:&amp;nbsp;&lt;br /&gt;181:&amp;nbsp;&lt;br /&gt;182:&amp;nbsp;&lt;br /&gt;183:&amp;nbsp;&lt;br /&gt;184:&amp;nbsp;&lt;br /&gt;185:&amp;nbsp;&lt;br /&gt;186:&amp;nbsp;&lt;br /&gt;187:&amp;nbsp;&lt;br /&gt;188:&amp;nbsp;&lt;br /&gt;189:&amp;nbsp;&lt;br /&gt;190:&amp;nbsp;&lt;br /&gt;191:&amp;nbsp;&lt;br /&gt;192:&amp;nbsp;&lt;br /&gt;193:&amp;nbsp;&lt;br /&gt;194:&amp;nbsp;&lt;br /&gt;195:&amp;nbsp;&lt;br /&gt;196:&amp;nbsp;&lt;br /&gt;197:&amp;nbsp;&lt;br /&gt;198:&amp;nbsp;&lt;br /&gt;199:&amp;nbsp;&lt;br /&gt;200:&amp;nbsp;&lt;br /&gt;201:&amp;nbsp;&lt;br /&gt;202:&amp;nbsp;&lt;br /&gt;203:&amp;nbsp;&lt;br /&gt;204:&amp;nbsp;&lt;br /&gt;205:&amp;nbsp;&lt;br /&gt;206:&amp;nbsp;&lt;br /&gt;207:&amp;nbsp;&lt;br /&gt;208:&amp;nbsp;&lt;br /&gt;209:&amp;nbsp;&lt;br /&gt;210:&amp;nbsp;&lt;br /&gt;211:&amp;nbsp;&lt;br /&gt;212:&amp;nbsp;&lt;br /&gt;213:&amp;nbsp;&lt;br /&gt;214:&amp;nbsp;&lt;br /&gt;215:&amp;nbsp;&lt;br /&gt;216:&amp;nbsp;&lt;br /&gt;217:&amp;nbsp;&lt;br /&gt;218:&amp;nbsp;&lt;br /&gt;219:&amp;nbsp;&lt;br /&gt;220:&amp;nbsp;&lt;br /&gt;221:&amp;nbsp;&lt;br /&gt;222:&amp;nbsp;&lt;br /&gt;223:&amp;nbsp;&lt;br /&gt;224:&amp;nbsp;&lt;br /&gt;225:&amp;nbsp;&lt;br /&gt;226:&amp;nbsp;&lt;br /&gt;227:&amp;nbsp;&lt;br /&gt;228:&amp;nbsp;&lt;br /&gt;229:&amp;nbsp;&lt;br /&gt;230:&amp;nbsp;&lt;br /&gt;231:&amp;nbsp;&lt;br /&gt;232:&amp;nbsp;&lt;br /&gt;233:&amp;nbsp;&lt;br /&gt;234:&amp;nbsp;&lt;br /&gt;235:&amp;nbsp;&lt;br /&gt;236:&amp;nbsp;&lt;br /&gt;237:&amp;nbsp;&lt;br /&gt;238:&amp;nbsp;&lt;br /&gt;239:&amp;nbsp;&lt;br /&gt;240:&amp;nbsp;&lt;br /&gt;241:&amp;nbsp;&lt;br /&gt;242:&amp;nbsp;&lt;br /&gt;243:&amp;nbsp;&lt;br /&gt;244:&amp;nbsp;&lt;br /&gt;245:&amp;nbsp;&lt;br /&gt;246:&amp;nbsp;&lt;br /&gt;247:&amp;nbsp;&lt;br /&gt;248:&amp;nbsp;&lt;br /&gt;249:&amp;nbsp;&lt;br /&gt;250:&amp;nbsp;&lt;br /&gt;251:&amp;nbsp;&lt;br /&gt;252:&amp;nbsp;&lt;br /&gt;253:&amp;nbsp;&lt;br /&gt;254:&amp;nbsp;&lt;br /&gt;255:&amp;nbsp;&lt;br /&gt;256:&amp;nbsp;&lt;br /&gt;257:&amp;nbsp;&lt;br /&gt;258:&amp;nbsp;&lt;br /&gt;259:&amp;nbsp;&lt;br /&gt;260:&amp;nbsp;&lt;br /&gt;261:&amp;nbsp;&lt;br /&gt;262:&amp;nbsp;&lt;br /&gt;263:&amp;nbsp;&lt;br /&gt;264:&amp;nbsp;&lt;br /&gt;265:&amp;nbsp;&lt;br /&gt;266:&amp;nbsp;&lt;br /&gt;267:&amp;nbsp;&lt;br /&gt;268:&amp;nbsp;&lt;br /&gt;269:&amp;nbsp;&lt;br /&gt;270:&amp;nbsp;&lt;br /&gt;271:&amp;nbsp;&lt;br /&gt;272:&amp;nbsp;&lt;br /&gt;273:&amp;nbsp;&lt;br /&gt;274:&amp;nbsp;&lt;br /&gt;275:&amp;nbsp;&lt;br /&gt;276:&amp;nbsp;&lt;br /&gt;277:&amp;nbsp;&lt;br /&gt;278:&amp;nbsp;&lt;br /&gt;279:&amp;nbsp;&lt;br /&gt;280:&amp;nbsp;&lt;br /&gt;281:&amp;nbsp;&lt;br /&gt;282:&amp;nbsp;&lt;br /&gt;283:&amp;nbsp;&lt;br /&gt;284:&amp;nbsp;&lt;br /&gt;285:&amp;nbsp;&lt;br /&gt;286:&amp;nbsp;&lt;br /&gt;287:&amp;nbsp;&lt;br /&gt;288:&amp;nbsp;&lt;br /&gt;289:&amp;nbsp;&lt;br /&gt;290:&amp;nbsp;&lt;br /&gt;291:&amp;nbsp;&lt;br /&gt;292:&amp;nbsp;&lt;br /&gt;293:&amp;nbsp;&lt;br /&gt;294:&amp;nbsp;&lt;br /&gt;295:&amp;nbsp;&lt;br /&gt;296:&amp;nbsp;&lt;br /&gt;297:&amp;nbsp;&lt;br /&gt;298:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# Fractal Christmas Tree, Monolithic Single File&lt;br /&gt;# Sierpinski triangles animated using SDL graphics&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ PREPROCESSOR ]]]&lt;br /&gt;# declare Perl-compatible data types &amp;amp; data structures &lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ HEADER ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;main&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.14&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# required for /r return AKA non-destructive regex flag&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="float"&gt;0.008_000&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CRITICS ]]]&lt;br /&gt;# USER DEFAULT 1: allow numeric values &amp;amp; print operator&lt;br /&gt;## no critic qw(ProhibitUselessNoCritic ProhibitMagicNumbers RequireCheckedSyscalls)&lt;br /&gt;## no critic qw(RequireInterpolationOfMetachars)  # USER DEFAULT 2: allow single-quoted control characters &amp;amp; sigils&lt;br /&gt;## no critic qw(ProhibitConstantPragma ProhibitMagicNumbers)  # USER DEFAULT 3: allow constants&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ INCLUDES ]]]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;English&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$Data::Dumper::Deepcopy&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# display human-readable numeric data, not $VAR1-&amp;gt;[0] references&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# https://metacpan.org/dist/SDL/view/lib/pods/SDL/Event.pod&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;   &lt;span class="comment"&gt;# used for window creation &amp;amp; control&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for creating Event object&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SDL::Events&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="comment"&gt;# used for Event queue handling functions&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Time::HiRes&lt;/span&gt; &lt;span class="words"&gt;qw( gettimeofday usleep )&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# used for time-based animation control&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ CONSTANTS ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ DATA FOR SIZES &amp;amp; SHAPES &amp;amp; COLORS;&lt;br /&gt;#   HARD-CODED 1024x768 RESOLUTION &amp;amp; 32-BIT COLOR DEPTH ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initial triangle's 3 corners as [x, y] Euclidean coordinates&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;212&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;812&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;     &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;105&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;150&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;220&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;    &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;  &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;175&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_white&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt;   &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;140&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;255&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# colors as [r, g, b] triplets; number of colors is number of recursions&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_green&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# green needs to be the color of the smallest, and thus most numerous, triangles&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_blue&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_red&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_color_white&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;scalar&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# rectangle in format [ x, y, width, height ]&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;601&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="octal"&gt;050&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;130&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# bottom right&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[[&lt;/span&gt; &lt;span class="number"&gt;512&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;155&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# bottom point&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;462&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="comment"&gt;# top left&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="number"&gt;562&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;  &lt;span class="number"&gt;70&lt;/span&gt;&lt;span class="structure"&gt;]];&lt;/span&gt; &lt;span class="comment"&gt;# top right&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# colors for animated Christmas tree lights&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_color_pink&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_purple&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_orange&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# https://metacpan.org/dist/SDL/view/lib/pods/SDL/Events.pod&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="words"&gt;qw(&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;no_such_event&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_ACTIVEEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_KEYDOWN SDL_KEYUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_MOUSEMOTION SDL_MOUSEBUTTONDOWN SDL_MOUSEBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_JOYAXISMOTION SDL_JOYBALLMOTION SDL_JOYHATMOTION SDL_JOYBUTTONDOWN SDL_JOYBUTTONUP&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_QUIT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_SYSWMEVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_VIDEORESIZE SDL_VIDEOEXPOSE&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_USEREVENT&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SDL_NUMEVENTS&lt;br /&gt;)&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# constant data&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ OPERATIONS ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ PREPARE &amp;amp; MAKE INITIAL RECURSIVE CALL ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# declare &amp;amp; initialize final array outside of the recursive subroutine for easy direct access by all recursive calls&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initial triangle is in a triangle group by itself&lt;br /&gt;&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initial call to recursive subroutine&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_initial&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# regex to (g)lobally (s)earch for numbers incorrectly wrapped in 'single-quotes' by Dumper,&lt;br /&gt;# replace by // empty string, no lvalue $variable so directly (r)eturn modified string;&lt;br /&gt;# https://perldoc.perl.org/perlop#s%2FPATTERN%2FREPLACEMENT%2Fmsixpodualngcer&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_triangle_groups = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ INITIALIZE GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# SDL includes moved into [[[ INCLUDES ]]] section above&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# initialize SDL video &amp;amp; application &amp;amp; event;&lt;br /&gt;# we do not call $my_SDL_app-&amp;gt;run() anywhere in this program, instead we use the while() run loop below&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;SDL::init&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDLx::App&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Merry Christmas!!  Perl Advent 2022!!!'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1024&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                     &lt;span class="comment"&gt;# hard-coded 1024x768 resolution&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;height&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;768&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;depth&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;32&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;                       &lt;span class="comment"&gt;# hard-coded 32-bit color&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;resizeable&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;                     &lt;span class="comment"&gt;# allow window resize; does not scale window contents&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SDL::Event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ RENDER STATIC GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# draw Christmas tree branches &amp;amp; snow tinsel &amp;amp; ornaments &amp;amp; lights;&lt;br /&gt;# iterate through triangle groups in reverse order, due to reverse population during recursion&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$i&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # https://metacpan.org/dist/SDL/view/lib/pods/SDLx/Surface.pod&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # refresh window on every triangle for fun cascade drawing effect&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# draw Christmas tree trunk &amp;amp; Star of Bethlehem&lt;br /&gt;&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_rect&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_rectangle_trunk&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_brown&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;  &lt;span class="comment"&gt;# refresh window&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [ RENDER DYNAMIC (ANIMATED) GRAPHICS ]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# set initial index for accesssing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# set initial time for changing Christmas tree lights colors&lt;br /&gt;&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;#print 'have $seconds_start = ', $seconds_start, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# the main run loop, used instead of calling $my_SDL_app-&amp;gt;run();&lt;br /&gt;# animate forever, until SDL_QUIT event is received in GUI window via &amp;lt;Alt-F4&amp;gt; keypress or window close mouse click,&lt;br /&gt;# or in CLI window via &amp;lt;Ctrl-C&amp;gt; keypress&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # pump the event loop, gathering events from input devices&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;SDL::Events::pump_events&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # poll for currently pending events&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;if&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;SDL::Events::poll_event&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have @SDL_EVENTS['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;@SDL_EVENTS&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt;&lt;span class="structure"&gt;()]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # we only care about the SDL_QUIT event telling us to exit&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_SDL_event&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;type&lt;/span&gt; &lt;span class="operator"&gt;==&lt;/span&gt; &lt;span class="word"&gt;SDL_QUIT&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'SDL_QUIT event received, exiting'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;exit&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class="comment"&gt;    # get current time, for comparison with start time of current Christmas tree lights color&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;gettimeofday&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;#    print 'have $seconds_current = ', $seconds_current, &amp;quot;\n&amp;quot;;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # twinkle Christmas tree lights every 1 second&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$seconds_current&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # reset start time to current time, for time cycle of next animation frame&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$seconds_start&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$seconds_current&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # iterate through lights colors&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'have $my_color = $my_lights_colors-&amp;gt;['&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'] = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_color&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # wrap back to beginning of lights colors when end is reached&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_lights_colors&lt;/span&gt;&lt;span class="structure"&gt;})&lt;/span&gt; &lt;span class="operator"&gt;-&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_lights_colors_index&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # only update second-smallest triangles, not the green of the Christmas tree itself&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # redraw green of Christmas tree&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;for&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt; &lt;span class="operator"&gt;&amp;lt;&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;scalar&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt; &lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="operator"&gt;++&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_group&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$j&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_colors&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # redraw Star of Bethlehem&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_up&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;draw_trigon_filled&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$my_triangle_star_down&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$my_color_yellow&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # refresh window once for every Christmas tree lights color change, for synchronized lights&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$my_SDL_app&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;update&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # briefly pause between each while() loop iteration, to avoid overloading CPU;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# ( 1_000_000 microseconds per second ) / ( 10_000 microseconds per iteration) = 100 iterations per second;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# need at least 100 while loop iterations per second, in order to process all of the otherwise-ignored&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# SDL_MOUSEMOTION events which are caused by simply moving the mouse over top of the window&lt;br /&gt;&lt;/span&gt;    &lt;span class="word"&gt;usleep&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10_000&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# [[[ SUBROUTINES ]]]&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# recursively generate triangles, grouped by recursion level&lt;br /&gt;&lt;/span&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;sierpinski&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;void&lt;/span&gt; &lt;span class="symbol"&gt;$RETURN_TYPE&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;integer&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;@ARG&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $recursions_remaining = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="single"&gt;'in sierpinski(), received $triangle = '&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="substitute"&gt;s/'//gr&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt; &lt;span class="operator"&gt;&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # shortcut variables, easier to read in midpoint calculations below&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$triangle&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # calculate midpoints between two coordinates [x1, y1] and [x2, y2] is [(x1+x2)/2, (y1+y2)/2]&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;[((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;((&lt;/span&gt;&lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt; &lt;span class="operator"&gt;+&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;])&lt;/span&gt; &lt;span class="operator"&gt;/&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;)];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # construct 3 sub-triangles from orinal points and newly-calculated midpoints&lt;br /&gt;&lt;/span&gt;        &lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;   &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt; &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="word"&gt;number::arrayref::arrayref&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt; &lt;span class="symbol"&gt;$point_a_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_b_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$point_c&lt;/span&gt;   &lt;span class="structure"&gt;];&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # $triangle_groups is zero-indexed like all other Perl arrays,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# so we need to subtract one from $recursions_remaining before using as an index,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# in order to avoid an undefined element at element 0;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# also, we need to decrement $recursions_remaining before making recursive calls;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# for both of these reasons, we can decrement now&lt;br /&gt;&lt;/span&gt;        &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;--&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # store all triangles grouped by recursion level&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;push&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="structure"&gt;]}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # recurse once for each sub-triangle&lt;br /&gt;&lt;/span&gt;        &lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_a&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_b&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;sierpinski&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$subtriangle_c&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$recursions_remaining&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$triangle_groups&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # return after maximum recursion level is reached (conditional block above not entered),&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# or all recursion calls have returned (conditional block above entered);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;# no return value, all generated data is stored directly in $triangle_groups&lt;br /&gt;&lt;/span&gt;    &lt;span class="keyword"&gt;return&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;  &lt;span class="comment"&gt;# end of package 'main'&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If you review the graphics rendering code above, you will see the &lt;code&gt;while(1)&lt;/code&gt; main run loop which twinkles the Christmas tree lights, displaying an animated color change once every second.&lt;/p&gt;

&lt;p&gt;Run it yourself and bask in the Perl yuletide glory of your very own Sierpinski triangle fractal Christmas tree!&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ ./sierpinski_triangles_christmas_monolith.pl&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Merry Christmas to all, and to all a good night! :-)&lt;/p&gt;

&lt;br&gt;
&lt;center&gt;&lt;img src="fractal_christmas_tree_20_animated.gif" alt="Fractal Christmas Tree" width="75%"&gt;&lt;/center&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-27T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Will 'the Chill' Braswell</name>
    </author>
  </entry>
  <entry>
  <title>Set HTTP headers with WWW-Mechanize</title>
  <summary type="html"><![CDATA[<p>
Perl has several modules on several levels of abstraction to interact with web sites using HTTP requests. One of the nice modules is <a href="https://metacpan.org/pod/WWW::Mechanize">WWW::Mechanize</a> that is built on top of <a href="https://metacpan.org/pod/LWP::UserAgent">LWP::UserAgent</a>. In this example we'll see how to set the header in the HTTP request using WWW::Mechanize.
<p>
We'll use the service provided by the <a href="https://httpbin.org/">httpbin.org</a> web site to see the headers we set.
<p>
It has many end-points. We use the one that will send back the header the client sent as its content. It makes it very easy to see what was in our header.
<p>
]]></summary>
  <updated>2022-12-26T12:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/set-http-headers-with-www-mechanize"/>  <id>https://perlmaven.com/set-http-headers-with-www-mechanize</id>
  <content type="html"><![CDATA[<p>
Perl has several modules on several levels of abstraction to interact with web sites using HTTP requests. One of the nice modules is <a href="https://metacpan.org/pod/WWW::Mechanize">WWW::Mechanize</a> that is built on top of <a href="https://metacpan.org/pod/LWP::UserAgent">LWP::UserAgent</a>. In this example we'll see how to set the header in the HTTP request using WWW::Mechanize.
<p>
We'll use the service provided by the <a href="https://httpbin.org/">httpbin.org</a> web site to see the headers we set.
<p>
It has many end-points. We use the one that will send back the header the client sent as its content. It makes it very easy to see what was in our header.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#596 - New Year Resolution</title>
    <link rel="alternate" href="https://perlweekly.com/archive/596.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>With the end of <strong>Advent Calendar</strong> celebration, another celebration kicks in i.e. <strong>Christmas/Boxing Day</strong>. Although I don't celebrate, being a Muslim, but I do enjoy the break from the routine work.</p>
<p>This edition of the weekly newsletter is my <strong>120th edition</strong>. I hope you enjoy reading the newsletter as much as I do getting ready for you.</p>
<p><strong>Do you have any new year resolutions?</strong></p>
<p>I used to but then last year I stopped it.</p>
<p><strong>Why?</strong></p>
<p>Well couple of projects closed to my heart didn't get started and that made me very pessimistic. I feel so bad that I don't even talk about it. I hope new year will bring positive change.</p>
<p>Still, I don't feel like setting new year resolutions. Could it be, I am getting old to keep up with fast pace dev life? Having said, the dev inside me still alive but just needs some push. Fortunately I have so many people around me that always gives me much needed positive energy.</p>
<p>Let's talk about some positivity now. Well for me, it was the <a href="https://perladvent.org/2022">Perl Advent Calendar 2022</a>, thanks to <strong>Olaf Alders</strong> and team. I wanted to be part of it but then missed the train unfortunately. Never mind, there is always next time. Having said, I did manage to get <a href="https://theweeklychallenge.org/blog/app-timer">the post</a> up but was too late to make it. Fortunately my contribution to <strong>Raku Advent Calendar 2022</strong> did work out nicely like <a href="https://raku-advent.blog/2022/12/21/day-21-raku-and-i-journey-begin">Raku and I</a>.</p>
<p>Enjoy rest of the holidays and stay safe.</p></div>
    </content>
    <id>https://perlweekly.com/archive/596.html</id>
    <published>2022-12-26T10:00:00Z</published>
    <updated>2022-12-26T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Create Your Excel using Perl!</title>
    <link href="http://perladvent.org/2022/2022-12-26.html"/>
    <id>http://perladvent.org/2022/2022-12-26.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h2 id="Create-Your-Excel-using-Perl"&gt;Create Your Excel using Perl!&lt;/h2&gt;

&lt;h3 id="Intro"&gt;Intro&lt;/h3&gt;

&lt;p&gt;A long-long time ago, during the Advent of 2001, there was an article about manipulating Excel spreadsheets using Perl, &lt;a href="https://perladvent.org/2001/14th/"&gt;Spreadsheet::WriteExcel&lt;/a&gt;. It&amp;#39;s been a while now, so Santa decided to ask the Wise Old Elf to write another article about creating Excel files using Perl.&lt;/p&gt;

&lt;p&gt;There were only 3 days until Advent, with lots of articles missing, so the Wise Old Elf immediately delegated this task to Wunorse Openslae, and he chose wisely - as always. Wunorse was a master of managing Excel files and started to work on that article immediately.&lt;/p&gt;

&lt;h3 id="Preface"&gt;Preface&lt;/h3&gt;

&lt;p&gt;Some historical background: The older module &lt;a href="https://metacpan.org/pod/Spreadsheet::WriteExcel"&gt;Spreadsheet::WriteExcel&lt;/a&gt; is for creating Excel files compatible with Excel 97, 2000, 2002, 2003 and 2007, mainly with &lt;code&gt;.xls&lt;/code&gt; extension. It is mostly compatible with Excel::Writer::XLSX, so &lt;a href="https://metacpan.org/pod/Spreadsheet::WriteExcel#Migrating-to-Excel::Writer::XLSX"&gt;migrating to the newer version&lt;/a&gt; should be as easy as Christmas pie. However such a migration is more like a heavy Christmas pudding loaded with goodness and lots of issues might arise during the process.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;Spreasheet::ParseExcel&lt;/code&gt; for reading the older Excel files having &lt;code&gt;.xls&lt;/code&gt; extension, on the other hand you should use &lt;code&gt;Spreadsheet::ParseXLSX&lt;/code&gt; or &lt;code&gt;Spreadsheet::XLSX&lt;/code&gt; to open and manipulate existing Excel files having the &lt;code&gt;.xlsx&lt;/code&gt; extension. This article deals with creating Excel files in &lt;code&gt;.xlsx&lt;/code&gt; format.&lt;/p&gt;

&lt;h3 id="Basics"&gt;Basics&lt;/h3&gt;

&lt;p&gt;First things first: import the module, initialize an &lt;code&gt;.xlsx&lt;/code&gt; file, add some worksheets, input some data on them and finally close the file, as you would do with a usual filehandle. This looks a bit different, though:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;use Excel::Writer::XLSX;&lt;br /&gt;&lt;br /&gt;#Create excel file               &lt;br /&gt;my $merry = Excel::Writer::XLSX-&amp;gt;new( &amp;#39;xmas.xlsx&amp;#39; );&lt;br /&gt;#create the workbooks&lt;br /&gt;my $xmas = $merry-&amp;gt;add_worksheet(&amp;#39;Merry&amp;#39;);&lt;br /&gt;my $baking_sheet = $merry-&amp;gt;add_worksheet(&amp;#39;Xmas&amp;#39;);&lt;br /&gt;my $stats = $merry-&amp;gt;add_worksheet(&amp;#39;Everybody!&amp;#39;);&lt;br /&gt;$xmas-&amp;gt;write( &amp;#39;A1&amp;#39;, &amp;#39;Merry Christmas!&amp;#39; );&lt;br /&gt;$merry-&amp;gt;close();&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;I skipped to display the usual stuff from the beginning of the script, everyone should know by heart: &lt;code&gt;use strict; use warnings;&lt;/code&gt;, etc. This will be the skeleton or the Christmas themed frame of our script. You can put everything else in between, depending on Santa&amp;#39;s needs, a list of Christmas cookies from around Europe in hash format is a good example, including some stats.&lt;/p&gt;

&lt;h3 id="Formatting"&gt;Formatting&lt;/h3&gt;

&lt;p&gt;To add some format to your cells, use the &lt;code&gt;add_format()&lt;/code&gt; method. You can either just call it on your &lt;code&gt;$workbook&lt;/code&gt; without parameters or pass a hash of formatting properties to it. The rest depends on your choice from the two options. It is more convenient - in my opinion - to create a format object with a hash, rather than calling the formatting methods afterwards. But the option is there to call the specific format methods for as you need them. I will demonstrate both ways in the examples.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;#This will create a christmas colored landscape with snow in the background represented as dots.&lt;br /&gt;my %props = ( color =&amp;gt; &amp;#39;red&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size =&amp;gt; &amp;#39;20&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bg_color =&amp;gt; &amp;#39;green&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pattern =&amp;gt; 18,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;align =&amp;gt; &amp;#39;center&amp;#39;,&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;my $format = $workbook-&amp;gt;add_format( %props );&lt;br /&gt;#write welcome text with formatting to top left cell&lt;br /&gt;$xmas-&amp;gt;write( &amp;#39;A1&amp;#39;, &amp;#39;Merry Christmas!&amp;#39;, $format);&lt;br /&gt;#Set the column width.&lt;br /&gt;$xmas-&amp;gt;set_column(&amp;#39;A:A&amp;#39;, 30);&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You will need to pass the format object to your write method as a parameter:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$merry-&amp;gt;write( &amp;#39;A1&amp;#39;, &amp;#39;Merry Christmas!&amp;#39;, $format );&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You might notice the &lt;code&gt;set_column()&lt;/code&gt; method, this takes the column &amp;#39;coordinates&amp;#39; as a parameter and a number which is the actual width. Let&amp;#39;s add some more format objects for later.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;my $format2 = $merry-&amp;gt;add_format();&lt;br /&gt;&lt;br /&gt;#Setting format using formatting methods, red and bold text, green background, center alignment, green background and dotted borders (for the snowflakes)&lt;br /&gt;&lt;br /&gt;$format2-&amp;gt;set_color( &amp;#39;red&amp;#39; );&lt;br /&gt;$format2-&amp;gt;set_bold();&lt;br /&gt;$format2-&amp;gt;set_size( 12 );&lt;br /&gt;$format2-&amp;gt;set_bg_color( &amp;#39;green&amp;#39; );&lt;br /&gt;$format2-&amp;gt;set_align( &amp;#39;center&amp;#39; );&lt;br /&gt;$format2-&amp;gt;set_border( 4 );&lt;br /&gt;&lt;br /&gt;#Just some snowflakes as border&lt;br /&gt;my $format3 = $merry-&amp;gt;add_format( border =&amp;gt; 4,);&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h3 id="Writing-data-into-cells"&gt;Writing data into cells&lt;/h3&gt;

&lt;p&gt;There are two ways to do that: you can use either the row-column notation or the A1 notation as described in &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#Cell-notation"&gt;Cell notation&lt;/a&gt;. First of all we need some data so let&amp;#39;s compose our cookies list. We will use a hash of array refs to do this:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;my $cookies = { &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Hungary =&amp;gt; [ &amp;#39;bejgli&amp;#39;, &amp;#39;h&amp;oacute;labda&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Scandinavia =&amp;gt; [ &amp;#39;Pepparkakor&amp;#39;, &amp;#39;Ruiskakut&amp;#39;, &amp;#39;Lussekatter&amp;#39;, &amp;#39;Krumkake&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Netherlands =&amp;gt; [ &amp;#39;Spekulaas&amp;#39;, &amp;#39;Kerstkranjes&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Germany =&amp;gt; [ &amp;#39;Lebkuchen&amp;#39;, &amp;#39;Stollen&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Switzerland =&amp;gt; [ &amp;#39;Basler L&amp;auml;ckerli&amp;#39;, &amp;#39;Brunsli&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Italy =&amp;gt; [ &amp;#39;Panettone&amp;#39;, &amp;#39;Pignoli&amp;#39;, &amp;#39;Cannoli&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Spain =&amp;gt; [ &amp;#39;Polvorones&amp;#39;, &amp;#39;Mantecados&amp;#39;, &amp;#39;Turr&amp;oacute;n&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Greece =&amp;gt; [ &amp;#39;Melomakarona&amp;#39; ],&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;#Sort the countries alphabetically&lt;br /&gt;my @countries = sort keys %$cookies;&lt;br /&gt;&lt;br /&gt;#Add the cookies to the baking sheet, one country per column.&lt;br /&gt;$baking_sheet-&amp;gt;set_column( 0, scalar keys %$cookies, 15 );&lt;br /&gt;$baking_sheet-&amp;gt;write( &amp;#39;A1&amp;#39;, \@countries, $format2 );&lt;br /&gt;&lt;br /&gt;my $i = 0;&lt;br /&gt;for ( sort keys %$cookies ) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;#Place Your cookies to the baking sheet&lt;br /&gt;&amp;nbsp;&amp;nbsp;$baking_sheet-&amp;gt;write( 1, $i, [ $cookies-&amp;gt;{$_} ], $format3 );&lt;br /&gt;&amp;nbsp;&amp;nbsp;$i++;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;#write some statistics about how many types of cookies we have per country&lt;br /&gt;$stats-&amp;gt;write( &amp;#39;A1&amp;#39;, [ \@countries ], $format2 );&lt;br /&gt;&lt;br /&gt;#Reset the counter&lt;br /&gt;$i = 0;&lt;br /&gt;#count how many cookies we have country wise.&lt;br /&gt;for ( sort keys %$cookies ) {&lt;br /&gt;&amp;nbsp;&amp;nbsp;#Place Your cookies to the baking sheet&lt;br /&gt;&amp;nbsp;&amp;nbsp;$stats-&amp;gt;write( $i, 1, scalar @{$cookies-&amp;gt;{$_}} , $format3 );&lt;br /&gt;&amp;nbsp;&amp;nbsp;$i++;&lt;br /&gt;}&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Many things are happening here.&lt;/p&gt;

&lt;p&gt;First we get a list of countries sorted alphabetically. Second we are writing those countries into the first row, alongside some formats, defined above. Then comes the first usage of &lt;code&gt;write()&lt;/code&gt;, where we are using the A1 notation to start from the top left corner, then comes the reference to the &lt;code&gt;@countries&lt;/code&gt; array, followed by the format2. When we pass an array reference to &lt;code&gt;write()&lt;/code&gt;, it will write the elements of the array in the same row. It is equivalent to write_row(). If you pass an array ref of array refs to &lt;code&gt;write()&lt;/code&gt;, it is the same as calling &lt;code&gt;write_col()&lt;/code&gt;, it will write to the columns, as demonstrated in the lines 22 and 27.&lt;/p&gt;

&lt;p&gt;For more on &lt;code&gt;write()&lt;/code&gt;, please check the &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#write(-$row,-$column,-$token,-$format-)"&gt;write section&lt;/a&gt; on the module&amp;#39;s page.&lt;/p&gt;

&lt;h3 id="Outro"&gt;Outro&lt;/h3&gt;

&lt;p&gt;Santa was cheerful about this guide, especially that it contains the long avaited Christmas cookie statistics. And perhaps the next task will be to extend this report with more Christmas cookies from around the world.&lt;/p&gt;

&lt;p&gt;We just scratched the surface of &lt;code&gt;Excel::Writer::XLSX&lt;/code&gt; with this short tutorial. You can find a comprehensive guide on CPAN, &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX"&gt;Excel::Writer::XLSX&lt;/a&gt;. This is a very useful and powerful module, which can deal with a range of tasks from the basics of generating reports to the heavy lifting of the work with VBA in Excel. To cover all of its features would take a whole book.&lt;/p&gt;

&lt;p&gt;You can find the whole script on my Github &lt;a href="https://github.com/x1mandi/padvent_code/blob/main/cookies_test.pl"&gt;cookies_test.pl&lt;/a&gt;, so that you can test it on your own and play with the module. Merry Christmas!&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-26T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Csaba Simándi</name>
    </author>
  </entry>
  <entry>
    <title>How to wrap a camel?</title>
    <link href="http://perladvent.org/2022/2022-12-25.html"/>
    <id>http://perladvent.org/2022/2022-12-25.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h2 id="How-to-wrap-a-camel"&gt;How to wrap a camel?&lt;/h2&gt;

&lt;p&gt;In the elf workshop, elves never knew what to do when they were passed a camel and were instructed to wrap it to put it on Santa&amp;#39;s sleigh. Many times the elves skipped wrapping and loaded camels right onto the sleigh. This practice garnered the North Pole many letters from children around the world being unable to install and use their new camel! &lt;b&gt;&amp;quot;How do I install Perl?&amp;quot;, &amp;quot;cpanm: command not found&amp;quot;, &amp;quot;Permission denied&amp;quot;, &amp;quot;collect2.exe: error: ld returned 1 exit status&amp;quot;, &amp;quot;Can&amp;#39;t locate&amp;quot;&lt;/b&gt; they cried out for help. Some gift recipients even refused to install their camel despite their needs and desires, as they didn&amp;#39;t want to deal with the difficulties of installing Perl. Claus tasked master elf, Artie, to design a fool-proof way of wrapping a camel for enjoyment by children across the world.&lt;/p&gt;

&lt;p&gt;Artie got right to work as they knew from experience that wrapping a camel was not a trivial task. First, Artie attempted to wrap a camel with &lt;a href="https://metacpan.org/module/PAR::Packer"&gt;PAR::Packer&lt;/a&gt;, but discovered that the wrapped camel was unusable when the user&amp;#39;s glibc version or operating system differed from the one Artie used to wrap. Artie knew Santa had high standards and would want a more robust solution, so they continued to do research. Artie stumbled upon the &lt;a href="https://github.com/jart/cosmopolitan"&gt;Cosmopolitan Libc&lt;/a&gt; and &lt;a href="https://justine.lol/ape.html"&gt;Actually Portable Executables&lt;/a&gt;. What if you built a single binary version of Perl that runs on six operating systems and melded your camel to the binary? Then, everyone can use camels! Artie got to work creating &lt;a href="https://computoid.com/posts/Perl-is-Actually-Portable.html"&gt;Actually Portable Perl (APPerl)&lt;/a&gt; with the &lt;a href="https://metacpan.org/module/Perl::Dist::APPerl"&gt;Perl::Dist::APPerl&lt;/a&gt; package for building APPerl and wrapping camels with it.&lt;/p&gt;

&lt;p&gt;Close to Christmas, Artie finally had &lt;a href="https://metacpan.org/module/Perl::Dist::APPerl"&gt;Perl::Dist::APPerl&lt;/a&gt; ready and notified Santa. Santa requested an immediate demonstration to determine if it is a viable way of wrapping camels starting this Christmas season.&lt;/p&gt;

&lt;h3 id="Wrapping-Pure-Perl-camels"&gt;Wrapping Pure Perl camels&lt;/h3&gt;

&lt;p&gt;Artie created some directories to contain the camel project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir -p wrap_camel/src wrap_camel/script
    cd wrap_camel&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie created an example script and saved it to &lt;code&gt;script/cameltype&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;cancel_christmas&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;die&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;$!&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$numhumps&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;How many humps?\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$numhumps&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="readline"&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; &lt;span class="operator"&gt;or&lt;/span&gt; &lt;span class="word"&gt;cancel_christmas&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;chomp&lt;/span&gt; &lt;span class="symbol"&gt;$numhumps&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;last&lt;/span&gt; &lt;span class="word"&gt;if&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$numhumps&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="match"&gt;/^\d+$/&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Your nose ain't too bright, $numhumps is not a number\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;%results&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Dromedary\n&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Bactrian\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;print&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$results&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$numhumps&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="operator"&gt;//&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Maybe a reindeer? Probably not a camel!\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie noted to Santa that Pure Perl scripts can be wrapped with an existing version of APPerl, off the shelf builds of APPerl can be found on the &lt;a href="https://computoid.com/APPerl/#RELEASES"&gt;APPerl webpage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artie picked &lt;code&gt;perl-small.com&lt;/code&gt; off the shelf and created an APPerl project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget -O src/perl.com &amp;#39;https://github.com/G4Vi/Perl-Dist-APPerl/releases/latest/download/perl-small.com&amp;#39;
    chmod +x src/perl.com
    apperlm init --name default_config&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie edited &lt;code&gt;default_config&lt;/code&gt; in the newly created &lt;code&gt;apperl-project.json&lt;/code&gt; to copy in the &lt;code&gt;cameltype&lt;/code&gt; script and set the destination executable name to &lt;code&gt;cameltype.com&lt;/code&gt;, the name is important as &lt;code&gt;argv[0]&lt;/code&gt; is used to determine which script embedded in APPerl to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;dest&amp;quot; : &amp;quot;cameltype.com&amp;quot;,
    &amp;quot;zip_extra_files&amp;quot; : { &amp;quot;bin&amp;quot; : [&amp;quot;script/cameltype&amp;quot;] },&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie wrapped the camel and demonstrated the &lt;code&gt;cameltype&lt;/code&gt; binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    apperlm build
    ./cameltype.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Santa said, &amp;quot;Ho, ho, ho. Very impressive, Artie! What about the camels with XS modules?&amp;quot;&lt;/p&gt;

&lt;h3 id="Wrapping-camels-with-XS-modules"&gt;Wrapping camels with XS modules&lt;/h3&gt;

&lt;p&gt;Artie said, &amp;quot;Camels with XS modules can also be wrapped into APPerl. However, every XS-wrapping elf needs a Linux build environment.&amp;quot; Santa, a big fan of developing on several platforms, asked, &amp;quot;Why is that required?&amp;quot; Artie replied, &amp;quot;While APPerl binaries are also ZIP files, APPerl binaries are statically linked, so there is no way to add binary modules after compilation. To wrap with XS modules, the Cosmopolitan Libc and Perl must be built from scratch.&amp;quot; Santa was reasonably worried about this and asked Artie to show him once more.&lt;/p&gt;

&lt;p&gt;Artie ran some commands to create a new APPerl project and install build dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir -p ../wrap_xs_camel/script
    cd ../wrap_xs_camel
    apperlm install-build-deps
    apperlm init --name default_config --base v5.36.0-small-v0.1.0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie created &lt;code&gt;MerryChristmas.xs&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;#define PERL_NO_GET_CONTEXT&lt;br /&gt;#include &amp;quot;EXTERN.h&amp;quot;&lt;br /&gt;#include &amp;quot;perl.h&amp;quot;&lt;br /&gt;#include &amp;quot;XSUB.h&amp;quot;&lt;br /&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br /&gt;&lt;br /&gt;MODULE = MerryChristmas    PACKAGE = MerryChristmas&lt;br /&gt;&lt;br /&gt;void&lt;br /&gt;merry_christmas()&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CODE:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(&amp;quot;Merry Christmas from XS!\n&amp;quot;);&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie created &lt;code&gt;MerryChristmas.pm&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;MerryChristmas&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="single"&gt;'0.0'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;require&lt;/span&gt; &lt;span class="word"&gt;XSLoader&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;XSLoader::load&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;MerryChristmas&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie created a &lt;code&gt;script/merrychristmas&lt;/code&gt; to demo the module:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;MerryChristmas&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;MerryChristmas::merry_christmas&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie edited &lt;code&gt;default_config&lt;/code&gt; in &lt;code&gt;apperl-project.json&lt;/code&gt; to add the &lt;code&gt;MerryChristmas&lt;/code&gt; module to the Perl repo, copy in the script, and set the destination executable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;dest&amp;quot; : &amp;quot;merrychristmas.com&amp;quot;,
    &amp;quot;perl_repo_files&amp;quot; : { &amp;quot;ext/MerryChristmas&amp;quot; : [&amp;quot;MerryChristmas.pm&amp;quot;, &amp;quot;MerryChristmas.xs&amp;quot;]},
    &amp;quot;+MANIFEST&amp;quot; : [&amp;quot;__perlarchlib__/MerryChristmas.pm&amp;quot;, &amp;quot;bin/merrychristmas&amp;quot;],
    &amp;quot;+perl_onlyextensions&amp;quot; : [&amp;quot;MerryChristmas&amp;quot;],
    &amp;quot;zip_extra_files&amp;quot; : { &amp;quot;bin&amp;quot; : [&amp;quot;script/merrychristmas&amp;quot;] }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie checked out the config, configured, built, and tested out the Merry Christmas message contraption:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    apperlm checkout default_config
    apperlm configure
    apperlm build
    ./merrychristmas.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Santa said, &amp;quot;Great work, now we can wrap camels of all shapes and sizes to spread cheer to the world! I&amp;#39;d like to put this into practice immediately&amp;quot;. Artie replied, &amp;quot;Thank you Santa, I&amp;#39;ll get to work teaching all the other elves how to wrap a camel.&amp;quot;&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-25T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Gavin Hayes</name>
    </author>
  </entry>
  <entry>
    <title>Looking at the Christmas Numbers</title>
    <link href="http://perladvent.org/2022/2022-12-24.html"/>
    <id>http://perladvent.org/2022/2022-12-24.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;All the elves know: it is mainly about spreading joy. But some numbers need to be kept in check - maybe with bar charts.&lt;/p&gt;

&lt;h3 id="Get-some-code"&gt;Get some code&lt;/h3&gt;

&lt;p&gt;Because they is no time for a long coding session during the jolly season, they just grab some example from &lt;a href="https://metacpan.org/module/Chart::Manual::Types"&gt;Chart::Manual::Types&lt;/a&gt;. Every line of it is explained there in detail. Once the code is pasted, they change the first dataset (animal names =&amp;gt; gift recipients) and paste into the following sets (rows) the real numbers. At last axis and legend need to be labeled properly and a first draft is ready:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Chart::Bars&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Chart::Bars&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="words"&gt;qw/ Peter Paul Mary/&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;40&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;80&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;80&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;60&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;50&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;60&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Christmas Expenses'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;x_label&lt;/span&gt;       &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Recipient'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_label&lt;/span&gt;       &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Amount'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;legend_labels&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="single"&gt;'2020'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'2021'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'2022'&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;    &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'true'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;min_val&lt;/span&gt;       &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;precision&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray70'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;misc&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;text&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;x_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;        &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray20'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;png&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;bars1.png&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The values under the Hash-key &lt;code&gt;colors&lt;/code&gt; just gray out the less important parts, so that the chart is more pleasant.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars1.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Finding-Colors"&gt;Finding Colors&lt;/h3&gt;

&lt;p&gt;The only issue now are the dataset colors, which are optimized for contrast (they scream). Intuitive would be to have shades of the same color to signify that neighbouring bars are about the same person, only some numbers are older than others. To achieve that let&amp;#39;s pick some appealing color from the table in the lower half of &lt;a href="https://metacpan.org/module/Graphics::Toolkit::Color::Constant"&gt;Graphics::Toolkit::Color::Constant&lt;/a&gt;. I like &lt;code&gt;&amp;#39;royalblue3&amp;#39;&lt;/code&gt; of the &lt;i&gt;CSS&lt;/i&gt; standard. It also has the advantage of providing a workable gradient (list of shades) for free. So just add:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset0&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'royalblue4'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset1&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'royalblue3'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset2&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'royalblue2'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The only counterintuitive part of this code is to understand that the first &lt;code&gt;add_dataset&lt;/code&gt; only adds X-axis labels and the following &lt;code&gt;add_dataset&lt;/code&gt; is &lt;code&gt;dataset0&lt;/code&gt;.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars2.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Customize-Colors"&gt;Customize Colors&lt;/h3&gt;

&lt;p&gt;Good, but much of the Christmas business reacts to what was last year. How do we highlight a certain dataset with a more red&amp;#39;ish color, while still keeping saturation and lightness in the targeted scheme of the gradient we had before? For that we load the whole toolkit (a direct dependency of &lt;code&gt;Chart&lt;/code&gt;) and import also the helper function &lt;code&gt;color&lt;/code&gt;, to keep it all short and sweet.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Graphics::Toolkit::Color&lt;/span&gt; &lt;span class="single"&gt;'color'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;color&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'royalblue3'&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;Hue&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;-220&lt;/span&gt; &lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Please make sure to have atleast the version 1.03 installed to use that feature.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars3.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Open-the-Color-Factory"&gt;Open the Color Factory&lt;/h3&gt;

&lt;p&gt;Normal people would be good now, but what would a super picky designer, who just came from the &lt;i&gt;New York Fashion Week&lt;/i&gt; say? Maybe something like: how lame - I want a gradient from &lt;i&gt;Glacier Lake&lt;/i&gt; to &lt;i&gt;Harbor Blue&lt;/i&gt;. Alright - let&amp;#39;s check quickly if &lt;a href="https://metacpan.org/module/Graphics::ColorNames::PantoneReport"&gt;Graphics::ColorNames::PantoneReport&lt;/a&gt; is installed by &lt;code&gt;grep&lt;/code&gt; &amp;#39;ing the result of &lt;code&gt;Graphics::ColorNames::all_schemes&lt;/code&gt; and if so, create our own three color gradient with the colors from this summers &lt;i&gt;Pantone Report&lt;/i&gt;. (Other standards like &lt;i&gt;X&lt;/i&gt;, &lt;i&gt;HTML&lt;/i&gt; or &lt;i&gt;VACCC&lt;/i&gt; are available too - just look at &lt;a href="https://metacpan.org/module/Bundle::Graphics::ColorNames"&gt;Bundle::Graphics::ColorNames&lt;/a&gt;).&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@gradient&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;color&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'PantoneReport:Glacier Lake'&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;gradient_to&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'PantoneReport:Harbor Blue'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset0&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$gradient&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset1&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$gradient&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset2&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$gradient&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If more datasets are present - just increase the second argument of the method &lt;code&gt;gradient_to&lt;/code&gt;.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars4.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;p&gt;When grouping the values by year instead of recipient, we have to switch X-axis and legend labeling and transpose the data. But also change the colors since they have now to express the difference between people. This does not fit on a linear scale because every human has many different qualities. But the colors still have to go together well to create a harmonious chart. For that task you can create complementary colors, which are maximally different in hue, but same in lightness and saturation (unless the advanced arguments of the method &lt;code&gt;complementary&lt;/code&gt; are used).&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@gradient&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;color&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'lapisblue'&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;complementary&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;3&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/module/Graphics::Toolkit::Color"&gt;Graphics::Toolkit::Color&lt;/a&gt; still holds some more options, but that was enough to get a taste for whats possible.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars5.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With &lt;a href="https://metacpan.org/module/Graphics::Toolkit::Color"&gt;Graphics::Toolkit::Color&lt;/a&gt; you can quickly color you chart after your liking. Check all example code and images &lt;a href="https://github.com/lichtkind/Chart/tree/main/dev/example/advent"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-24T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>lichtkind</name>
    </author>
  </entry>
  <entry>
    <title>At the Present Factory</title>
    <link href="http://perladvent.org/2022/2022-12-23.html"/>
    <id>http://perladvent.org/2022/2022-12-23.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;Father Christmas is very old-school and so is his Perl code. There are no towering software engineering marvels - just a bunch of wonderful scripts: small, meticulously written, very readable and changeable. And because there are so well organized, his system scales up to billions of cheering children.&lt;/p&gt;

&lt;p&gt;Reporting about such a high volume of numbers has to be graphical - charts are needed. They are getting mass produced by scripts that convert one dataset into one chart of a particular layout and design by a call like:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;perl script.pl data.tsv &amp;gt; chart.png&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This approach allows maximal flexibility since source and target names are set from the outside and the scripts don&amp;#39;t have to be adapted, even if the data comes from a database or a web scraper. But how to write such a converter script?&lt;/p&gt;

&lt;h3 id="Establishing-the-Pipe"&gt;Establishing the Pipe&lt;/h3&gt;

&lt;p&gt;Basic examples can be found under &lt;a href="https://metacpan.org/module/Chart::Manual::Types"&gt;Chart::Manual::Types&lt;/a&gt;. But the code there only uses inline data added by the &lt;code&gt;add_dataset&lt;/code&gt; method. In our case we have to use &lt;code&gt;add_datafile&lt;/code&gt;, which accepts file names or handles and loads an entire table of space or tab separated values (empty rows and perl style comments ignored). Here a short example with only three data rows:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;Peter Paul Mary&lt;br /&gt;30    40   80 &lt;br /&gt;80    60   30 &lt;br /&gt;50    30   60 &lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You can produce such files with &lt;a href="https://metacpan.org/module/Text::CSV"&gt;Text::CSV&lt;/a&gt; by setting the porperty &lt;code&gt;sep_char&lt;/code&gt; to &lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt; (&lt;i&gt;0x20&lt;/i&gt;) or &lt;code&gt;&amp;quot;\t&amp;quot;&lt;/code&gt; (&lt;i&gt;0x09&lt;/i&gt;). Or you update to Chart 2.403.9 or later and use pure CSV.&lt;/p&gt;

&lt;p&gt;The names of the first row are of course X-axis-labels, but &lt;code&gt;Chart&lt;/code&gt; takes care of that automatically and recognizes the following three rows as dataset0 .. dataset2. So let&amp;#39;s look at the entire code:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Chart::Lines&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="core"&gt;shift&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Chart::Lines&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_datafile&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;          &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Latest Numbers !'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;include_zero&lt;/span&gt;   &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'true'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt;   &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'true'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;precision&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray60'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;misc&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;text&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;x_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;        &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray20'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="word"&gt;binmode&lt;/span&gt; &lt;span class="word"&gt;STDOUT&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="word"&gt;STDOUT&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;scalar_png&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The last two code lines put the image binary into the command line, so after&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;perl ./script.pl data.tsv &amp;gt; chart.png&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;.. we get the chart in an image file of our choosing.&lt;/p&gt;

&lt;h3 id="Data-Set-Manipulation"&gt;Data Set Manipulation&lt;/h3&gt;

&lt;p&gt;To take full advantage of this setup, our script should automatically adapt to different data set sizes. For that we have to get hold of the data, transform as needed and put it back in. It is simply a reference to an &lt;i&gt;array of arrays&lt;/i&gt;.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_datafile&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$data&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;get_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;clear_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# data transform&lt;br /&gt;&lt;/span&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="magic"&gt;$_&lt;/span&gt; &lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="word"&gt;for&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This for instance would allow us to create color gradients or wheels of complementary colors of needed size matching the size of the dataset. How this works I already showed in a previous calendar leaf. But to give another practical example - wouldn&amp;#39;t it be nice to have data tables like:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;o     Peter Paul Mary&lt;br /&gt;2020  30    40   80 &lt;br /&gt;2021  80    60   30 &lt;br /&gt;2020  50    30   60 &lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;i&gt;o&lt;/i&gt; symbol or any other placeholder is important because &lt;code&gt;Chart&lt;/code&gt; gets unhappy quickly when rows are of unequal length - even we pull out the first column before drawing. With this little preprocessing the first column of our data table is now appearing in the legend of the chart.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_datafile&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$data&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;get_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;clear_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@label&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;map&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="core"&gt;shift&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="magic"&gt;$_&lt;/span&gt; &lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="core"&gt;shift&lt;/span&gt; &lt;span class="symbol"&gt;@label&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="magic"&gt;$_&lt;/span&gt; &lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="word"&gt;for&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;legend_labels&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;@label&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Voil&amp;agrave;, our chart factory is humming away peacefully.&lt;/p&gt;

&lt;h3 id="Conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Little scripts can produce piles of charts that are well labeled and and designer-colored, even if the incoming data sets have various sizes. Check all example code and images &lt;a href="https://github.com/lichtkind/Chart/tree/main/dev/example/advent"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-23T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>lichtkind</name>
    </author>
  </entry>
</feed>
