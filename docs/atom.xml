<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-09-16T04:45:49Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Monthly Report - August</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/09/monthly-report---august-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10420</id>
    <published>2021-09-16T04:31:39Z</published>
    <updated>2021-09-16T04:46:12Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmothlyreport" label="perl mothly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-08.jpg"/></p>

<p><strong>Finally enjoying again ...</strong></p>

<p>Ever since I joined <a href="https://www.oleeo.com/">Oleeo</a>, I keep talking about it in every monthly report.</p>

<p><strong>Why?</strong></p>

<p>Well, right from day one, I have been getting to work on something I never worked on before. To be honest with you, I was expecting to fight with good old <strong>CGI</strong> ridden code mostly. I find myself lucky to have such a great supporting team. Right now I am playing with <strong>Elastic Search</strong> and I am enjoying it. Thanks to <strong>CPAN</strong> for such a cool library, <a href="https://metacpan.org/pod/Search::Elasticsearch">Search::Elasticsearch</a>.</p>

<p>Did you notice last <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html">monthly report</a> was published on <strong>22nd Aug</strong>? </p>

<p>I have never been so late ever since I started the series of monthly report.</p>

<p>You must be thinking, why bother with monthly report? Who cares what I do?</p>

<p>I agree, nobody cares. But I still do it every month since <strong>Nov 2018</strong>, my first <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/11/monthly-report---october.html">monthly report</a> was published on <strong>2nd Nov 2018</strong>. In two months time, I would complete <strong>3 years</strong> of monthly reporting. Honestly speaking, I didn't realise it until now.</p>

<p>Going back to the original question, <strong>why?</strong> </p>

<p>Well, I do it to keep myself self-motivated and keep track of my pet projects. This time, at least I am not as late as last time. So there is a improvement, little bit though. I am getting the monthly report out on <strong>16th</strong> as compared to <strong>22nd</strong> last month. Hopefully in the near future, I would be back on track.</p>

<p>I am so much involved in learning new things these days, I hardly find time to do any <strong>YouTube</strong> videos. For the first time, I didn't do any Live Coding YouTube videos last month. In fact, I have even not participated in the weekly challenge in the month of <strong>August</strong>. I promise to get back on track soon.</p>

<p>I would like to talk about my involvement with <strong>Pull Request Club</strong>. During the peak of my game with Pull Request, I used to spend at least <strong>2-4 hours</strong> every day looking for low hanging issues to fix. Ever since the weekly challenge started, I hardly find any time for the pull requests. Although I have never missed a monthly assignment for <strong>Pull Request Club</strong>, I am not happy with my contributions. Most of my contributions are limited to documentation and nothing ground breaking. I am grateful to everyone who have accepted my small contributions so far. It brings smile on my face every time.</p>

<p>In all of these drama, I am unable to give due attention to the book I am currently working on. At least, I have not dumped the idea. It is still very much alive. I should get back on track asap.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>3 Pull Requests</strong> submitted in the month of <strong>August 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-08.png"/></p>

<p><strong>2365 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-08.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>686 commits</strong> recorded in the month of <strong>August 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-08.png"/></p>

<p>Overall <strong>6156 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-08.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>August 2021</strong>:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-124">Challenge #124</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-125">Challenge #125</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126">Challenge #126</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-127">Challenge #127</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-128">Challenge #128</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-123">RECAP Challenge #123</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-124">RECAP Challenge #124</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-125">RECAP Challenge #125</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-126">RECAP Challenge #126</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-127">RECAP Challenge #127</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>Last month, none created. However, there are plenty of videos available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <strong>Flavio Poletti</strong> as the Champion of <strong>The Weekly Challenge</strong>. Please checkout the <a href="https://theweeklychallenge.org/blog/meet-the-champion-2021-07">interview</a> with him.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://theweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/ARGV::OrDATA">ARGV::OrDATA</a> by <strong>E. Choroba</strong>. I submitted <a href="https://github.com/choroba/argv-ordata/pull/2">one</a> Pull Request and it has been kindly accepted and merged.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-08.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-08.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html">Monthly Report - July</a></li>.</p>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/524.html">Issue #524</a> and <a href="http://perlweekly.com/archive/526.html">Issue #526</a>.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>August 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-08.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>My Favorite Warnings: redundant and missing</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10419</id>
    <published>2021-09-15T18:10:19Z</published>
    <updated>2021-09-15T18:12:24Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>The <a href="https://perldoc.perl.org/perldiag#Redundant-argument-in-%25s"><code>redundant</code></a> and <a href="https://perldoc.perl.org/perldiag#Missing-argument-in-%25s"><code>missing</code></a> warnings were added in Perl 5.22 to cover the case where a call to the <a href="http://perldoc.perl.org/perlfunc.html#printf"><code>printf</code></a> or <a href="http://perldoc.perl.org/perlfunc.html#sprintf"><code>sprintf</code></a> had more (<code>redundant</code>) or fewer (<code>missing</code>) arguments than the format calls for. The documentation says that they may be extended to other built-ins (<code>pack</code> and <code>unpack</code> being named specifically) but as of Perl 5.34.0 only the printf() built-ins are covered.</p>

<p>I have (<strong>very</strong> occasionally) found myself writing a subroutine taking a printf-style format and some arguments, and letting the format specify which (if any) of the arguments actually appear in the output. If I just throw all the arguments after the format into the printf(), one of these warnings is very likely to be thrown, starting with 5.22, since <code>use warnings;</code> enables them by default.</p>

<p>Getting such code to work silently under versions of Perl both before and after the warnings were introduced puzzled me for a bit. Eventially I realized the solution was another pragma: <a href="https://metacpan.org/pod/if"><code>if</code></a>, which has been in core since Perl 5.6.2. To wit:</p>

<pre>
sub my_printf {
    no if "$]" >= 5.022, qw{ warnings redundant missing };
    return printf @_;
}
</pre>

<p><i>This is the second entry in a desultory series of blogs on the <a href="http://perldoc.perl.org/warnings.html">warnings</a> pragma.</i></p>]]>
        
    </content>
</entry>
  <entry>
    <title>The ephemeral miniconf - Call for lightning talks</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-call-for-lightning-talks-36h9" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;(Image from &lt;a href="https://unsplash.com/@stickermule"&gt;stickermule&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A bit more than one weeks ago, I announced &lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-tentative-planning-aom"&gt;the tentative planning&lt;/a&gt; for &lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-292j"&gt;the ephemeral miniconf&lt;/a&gt; that will take place the 18th of november 2021.&lt;/p&gt;

&lt;p&gt;I'm very proud that all slots were filled very quickly and I'm also very happy with the speakers that I presented in dedicated blog posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-presentation-i0e"&gt;Mark Gardner&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-annoucement-4n8f"&gt;Juan Julián Merelo&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-annoucement-314d"&gt;Stephane Gigandet&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-clement-oudot-2a1a"&gt;Clement Oudot&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-jose-joaquin-atria-2m5h"&gt;José Joaquín Atria&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-adam-russell-3599"&gt;Adam Russell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I also plan to speak but I did not write a post about myself 😀)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYgLsFTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7d6ndkh1x3f5hbjgdei.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYgLsFTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7d6ndkh1x3f5hbjgdei.jpg" alt="Planning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#call-to-lightning-talk-speakers"&gt;
  &lt;/a&gt;
  Call to lightning talk speakers
&lt;/h1&gt;

&lt;p&gt;If the &lt;em&gt;"normal"&lt;/em&gt; slots are filled, I'm still looking for lightning talk speakers. &lt;/p&gt;

&lt;p&gt;Giving a lightning talk is very easy, it's short (less than 5 min and it don't have to be close to 5 min, it can be 1 min) and can be funny or an advertisement or presenting a module or a short technical presentation...&lt;/p&gt;

&lt;p&gt;So come on guys, let's join the speakers side! &lt;/p&gt;

&lt;p&gt;(contact me at &lt;strong&gt;&lt;a href="mailto:thibault.duponchelle@gmail.com"&gt;thibault.duponchelle@gmail.com&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-call-for-lightning-talks-36h9</id>
    <published>2021-09-14T14:12:04Z</published>
    <updated>2021-09-14T14:12:04Z</updated>
    <category term="perl"/>
    <category term="discus"/>
    <category term="raku"/>
  </entry>
  <entry>
    <title>A good old-fashioned Perl log analyzer</title>
    <link rel="alternate" href="https://dev.to/mjgardner/a-good-old-fashioned-perl-log-analyzer-2dfc" type="text/html"/>
    <content type="html">&lt;p&gt;A &lt;a href="https://lobste.rs/s/ztofac/awk_power_promise_40_year_old_language"&gt;recent Lobsters post&lt;/a&gt; lauding the virtues of &lt;a href="https://en.wikipedia.org/wiki/AWK"&gt;AWK&lt;/a&gt; reminded me that although the language is powerful and lightning-fast, I usually find myself exceeding its capabilities and reaching for Perl instead. One such application is analyzing voluminous log files such as the ones generated by &lt;a href="https://phoenixtrap.com"&gt;this blog&lt;/a&gt;. Yes, &lt;a href="https://wordpress.com/support/stats/"&gt;WordPress has stats&lt;/a&gt;, but I’ve never let reinvention of the wheel get in the way of a good programming exercise.&lt;/p&gt;

&lt;p&gt;So I whipped this script up on Sunday night while watching &lt;em&gt;&lt;a href="https://www.vh1.com/shows/rupauls-drag-race"&gt;RuPaul’s Drag Race&lt;/a&gt;&lt;/em&gt; reruns. It parses my &lt;a href="https://httpd.apache.org/docs/2.4/logs.html"&gt;Apache web server log files&lt;/a&gt; and reports on hits from week to week.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Syntax::&lt;/span&gt;&lt;span class="nv"&gt;Construct&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;operator-double-diamond&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Regexp::Log::&lt;/span&gt;&lt;span class="nv"&gt;Common&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;DateTime::Format::&lt;/span&gt;&lt;span class="nv"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="mf"&gt;1.33&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;any&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Number::&lt;/span&gt;&lt;span class="nv"&gt;Format&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;format_number&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Regexp::Log::&lt;/span&gt;&lt;span class="nv"&gt;Common&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;format&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:extended&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;capture&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sx"&gt;qw&amp;lt;req ts status&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@fields&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$compiled_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@skip_uri_patterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;
  ^/+robots\.txt
  [-\w]*sitemap[-\w]*\.xml
  ^/+wp-
  /feed/?$
  ^/+\?rest_route=
&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;%count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%week_of&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;@log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;@fields&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/$compiled_re/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# only interested in successful or cached requests&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^2/&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;304&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$protocol&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@skip_uri_patterns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;DateTime::Format::&lt;/span&gt;&lt;span class="nv"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;parse_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sprintf&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%u-%02u&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;week&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$week_of&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nv"&gt;$dt&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;# get first date of each week&lt;/span&gt;
    &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Week of %s: % 10s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;$week_of&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;format_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s some sample output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Week of 2021-07-31: 2,672
Week of 2021-08-02: 16,222
Week of 2021-08-09: 12,609
Week of 2021-08-16: 17,714
Week of 2021-08-23: 14,462
Week of 2021-08-30: 11,758
Week of 2021-09-06: 14,811
Week of 2021-09-13: 407
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I first started prototyping this on the command line as if it were an &lt;code&gt;awk&lt;/code&gt; one-liner by using the &lt;a href="https://perldoc.pl/perlrun#-n"&gt;&lt;code&gt;perl -n&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://perldoc.pl/perlrun#-a"&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/a&gt; flags. The former wraps code in a &lt;a href="https://perldoc.perl.org/perlsyn#Compound-Statements"&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop over the &lt;a href="https://perldoc.perl.org/perlop#I/O-Operators"&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; “diamond operator”&lt;/a&gt;, processing each line from standard input or files passed as arguments. The latter splits the fields of the line into an array named &lt;a href="https://perldoc.perl.org/perlvar#@F"&gt;&lt;code&gt;@F&lt;/code&gt;&lt;/a&gt;. It looked something like this while I was listing URIs (locations on the website):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;gunzip&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; ~/logs/phoenixtrap.com-ssl_log-&lt;span class="k"&gt;*&lt;/span&gt;.gz | 
perl &lt;span class="nt"&gt;-anE&lt;/span&gt; &lt;span class="s1"&gt;'say $F[6]'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But once I realized I’d need to filter out a bunch of URI patterns and do some aggregation by date, I turned it into a script and turned to &lt;a href="https://www.cpan.org/"&gt;CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There I found &lt;a href="https://metacpan.org/pod/Regexp::Log::Common"&gt;Regexp::Log::Common&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/DateTime::Format::HTTP"&gt;DateTime::Format::HTTP&lt;/a&gt;, which let me pull apart the Apache log format and its timestamp strings without having to write even more complicated regular expressions myself. (As noted above, this was already a wheel-reinvention exercise; no need to compound that further.)&lt;/p&gt;

&lt;p&gt;Regexp::Log::Common builds a compiled regular expression based on the log format and fields you’re interested in, so that’s the constructor on lines 11 through 14. The expression then returns those fields as a list, which I’m assigning to a hash slice with those field names as keys in line 29. I then skip over requests that aren’t successful or browser cache hits, skip over requests that don’t &lt;code&gt;GET&lt;/code&gt; web pages or other assets (e.g., &lt;code&gt;POST&lt;/code&gt;s to forms or updating other resources), and skip over the URI patterns mentioned earlier.&lt;/p&gt;

&lt;p&gt;(Those patterns are worth a mention: they include the &lt;a href="https://www.robotstxt.org/"&gt;&lt;code&gt;robots.txt&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.sitemaps.org/"&gt;sitemap XML&lt;/a&gt; files used by search engine indexers, WordPress administration pages, files used by &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS&lt;/a&gt; newsreaders subscribed to my blog, and routes used by the &lt;a href="https://jetpack.com/"&gt;Jetpack&lt;/a&gt; WordPress add-on. If you’re adapting this for your site you might need to customize this list based on what software you use to run it.)&lt;/p&gt;

&lt;p&gt;Lines 38 and 39 parse the timestamp from the log into a &lt;a href="https://metacpan.org/pod/DateTime"&gt;DateTime&lt;/a&gt; object using &lt;a href="https://metacpan.org/pod/DateTime::Format::HTTP"&gt;DateTime::Format::HTTP&lt;/a&gt; and then build the key used to store the per-week hit count. The last lines of the loop then grab the first date of each new week (assuming the log is in chronological order) and increment the count. Once finished, lines 46 and 47 provide a report sorted by week, displaying it as a friendly “Week of &lt;em&gt;date&lt;/em&gt;” and the hit counts aligned to the right with &lt;a href="https://perldoc.perl.org/functions/sprintf"&gt;&lt;code&gt;sprintf&lt;/code&gt;&lt;/a&gt;. &lt;a href="https://metacpan.org/pod/Number::Format#format_number(%24number,-%24precision,-%24trailing_zeroes)"&gt;Number::Format’s &lt;code&gt;format_number&lt;/code&gt;&lt;/a&gt; function displays the totals with thousands separators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; After this was ini­tial­ly pub­lished. astute read­er Chris McGowan not­ed that I had a bug where &lt;code&gt;$log{status}&lt;/code&gt; was assigned the val­ue 304 with the &lt;code&gt;=&lt;/code&gt; oper­a­tor rather than com­pared with &lt;code&gt;==&lt;/code&gt;. He also sug­gest­ed I use the &lt;a href="https://perldoc.perl.org/perl5220delta#New-double-diamond-operator"&gt;double-​diamond &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; oper­a­tor&lt;/a&gt; intro­duced in Perl v5.22.0 to avoid maliciously-​named files. Thanks, Chris!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#room-for-improvement"&gt;
  &lt;/a&gt;
  Room for improvement
&lt;/h2&gt;

&lt;p&gt;DateTime is a very powerful module but this comes at a price of speed and memory. Something simpler like &lt;a href="https://metacpan.org/pod/Date::WeekNumber"&gt;Date::WeekNumber&lt;/a&gt; should yield performance improvements, especially as my logs grow (here’s hoping). It requires a bit more manual massaging of the log dates to convert them into something the module can use, though:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Syntax::&lt;/span&gt;&lt;span class="nv"&gt;Construct&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;
  operator-double-diamond
  regex-named-capture-group
&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Regexp::Log::&lt;/span&gt;&lt;span class="nv"&gt;Common&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Date::&lt;/span&gt;&lt;span class="nv"&gt;WeekNumber&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iso_week_number&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="mf"&gt;1.33&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;any&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Number::&lt;/span&gt;&lt;span class="nv"&gt;Format&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;format_number&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Regexp::Log::&lt;/span&gt;&lt;span class="nv"&gt;Common&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;format&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:extended&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;capture&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sx"&gt;qw&amp;lt;req ts status&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@fields&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$compiled_re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$parser&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;regexp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@skip_uri_patterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;
  ^/+robots\.txt
  [-\w]*sitemap[-\w]*\.xml
  ^/+wp-
  /feed/?$
  ^/+\?rest_route=
&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;Jan&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Feb&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;02&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Mar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;03&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Apr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;04&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;May&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;05&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Jun&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;06&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Jul&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;07&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Aug&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;08&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;Sep&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;09&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Oct&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Nov&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;11&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;Dec&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;%count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%week_of&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;@log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;@fields&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/$compiled_re/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# only interested in successful or cached requests&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^2/&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;304&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$protocol&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$method&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@skip_uri_patterns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# convert log timestamp to YYYY-MM-DD for Date::WeekNumber&lt;/span&gt;
    &lt;span class="nv"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;m!^ (?&amp;lt;day&amp;gt;\d\d) / (?&amp;lt;month&amp;gt;...) / (?&amp;lt;year&amp;gt;\d{4}) : !x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$+{year}-&lt;/span&gt;&lt;span class="si"&gt;$month&lt;/span&gt;&lt;span class="s2"&gt;{ $+{month} }-$+{day}&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;iso_week_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$week_of&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$week&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$week&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Week of %s: % 10s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;$week_of&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;format_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks almost the same as the first ver­sion, with the addi­tion of a hash to con­vert month names to num­bers and the actu­al con­ver­sion (using named &lt;a href="https://perldoc.perl.org/perlre#Capture-groups"&gt;regular expression capture groups&lt;/a&gt; for read­abil­i­ty, using &lt;a href="https://metacpan.org/pod/Syntax::Construct#?%3C%3E"&gt;Syntax::Construct to check for that feature&lt;/a&gt;). On my serv­er, this results in a ten- to eleven-​second sav­ings when pro­cess­ing two months of com­pressed logs.&lt;/p&gt;

&lt;p&gt;What’s next? Pretty graphs? Drilling down to specific blog posts? Database storage for further queries and analysis? Perl and CPAN make it possible to go far beyond what you can do with AWK. What would you add or change? Let me know in the comments.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/a-good-old-fashioned-perl-log-analyzer-2dfc</id>
    <published>2021-09-14T14:00:00Z</published>
    <updated>2021-09-14T14:00:00Z</updated>
    <category term="perl"/>
    <category term="awk"/>
    <category term="webdev"/>
    <category term="apache"/>
  </entry>
  <entry>
  <title>Raku Dispatch and Compiler Improvements: Grant Report Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-raku-dispatch-and-compiler-improvements-1"/>
  <id>tag:news.perlfoundation.org,2021-09-14:/post/jonathan-raku-dispatch-and-compiler-improvements-1</id>
  <published>2021-09-14T02:37:51</published>
  <updated>2021-09-14T02:37:51</updated>
  <summary>
  <![CDATA[
     Jonathan reports a lot of progress on his grant. We would like to thank the sponsors and Jonathan for his work. Here is his report: Raku Dispatch and Compiler Improvements Grant Update Since the approval of my grant in late June, I have been making a lot of progress with it. The grant allowed me to dedicate the vast majority of my working time in July and August to Raku 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan reports a lot of progress on his grant. We would like to thank the sponsors and Jonathan for his work.</p>

<p>Here is his report:</p>

<hr />

<h1>Raku Dispatch and Compiler Improvements Grant Update</h1>

<p>Since the <a href="https://news.perlfoundation.org/post/grants_may_2021_votes">approval</a>
of my <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">grant</a>
in late June, I have been making a lot of progress with it. The grant allowed
me to dedicate the vast majority of my working time in July and August to Raku
(although I was away for 2 weeks of August on vacation). This report covers
the work done between grant approval up to the end of August.</p>

<p>The key goal of the grant is to bring my work on a new generalized dispatch
mechanism to the point where it can be merged and delivered to Raku users.
In summary, the new dispatch mechanism:</p>

<ul>
<li>Delivers greatly improved performance for a number of constructs that
are very slow in Rakudo/MoarVM today, including deferral with <code>callsame</code>
and other such functions (thus also aiding code using <code>wrap</code>), multiple
dispatch involving <code>where</code> clauses or named arguments, method calls on
roles that are punned into classes, invocation of objects that implement
<code>CALL-ME</code>, and others.</li>
<li>Replaces many special-case performance mechanisms with a single, general,
programmable one. This simplifies MoarVM internally, while simultaneously
allowing it to do more optimization.</li>
</ul>

<p>Far more details can be found in the presentation I gave about this work at
The Raku Conference 2021 (<a href="https://jnthn.net/papers/2021-trc-dispatch.pdf">slides</a>,
<a href="https://www.youtube.com/watch?v=yRFyGDVHl0E">video</a>).</p>

<p>At the point the grant got underway, the new dispatch mechanism was looking
promising, but still some distance from being ready to ship. The work so far
under this grant has decisively changed that, the expectation being that it
will be merged shortly after the September monthly releases (of Rakudo and
MoarVM) and thus be delivered to Raku users in the October releases.</p>

<p>Key tasks performed under the grant up to the end of August are as follows:</p>

<ul>
<li>Switch all method and subroutine dispatches in both NQP and Raku over to
using the new dispatch mechanism, taking care of cross-language calls
(for example, where the compiler calls bits of Raku code at <code>BEGIN</code> time)</li>
<li>Switch over all implicit calls emitted during compilation to use the new
dispatch mechanism also</li>
<li>Switch the regex compiler over to emitting its calls using the new dispatch
mechanism</li>
<li>Replace the boolification mechanism and complex <code>if</code>/<code>unless</code> object ops,
which previously involved an opaque chunk of C code, over to the new
dispatch mechanism; this eliminated a bunch of code in the optimizer too</li>
<li>Replace NQP's stringification and numification - which also involved a
bunch of custom logic in MoarVM - with a dispatcher</li>
<li>Bring the implementation of Raku multiple dispatch using the new dispatch
mechanism to completion, including handling of required named arguments,
typed exceptions on dispatch failure, <code>Junction</code> failover, <code>Proxy</code> args,
dispatch based on argument unpacking, and <code>nextcallee</code> support in complex
dispatch cases</li>
<li>Add support for <code>callwith</code> to the method, wrap, and multiple dispatchers</li>
<li>Various fixes to <code>lastcall</code> handling</li>
<li>Switch NQP's multiple dispatch over to the new dispatcher</li>
<li>Implement support for <code>CALL-ME</code>, which can be handled far more efficiently
using the new dispatch mechanism (current Rakudo has an intermediate
invocation that leads to slurping and re-flattening arguments, which in turn
frustrates optimization; with the new dispatcher, the <code>CALL-ME</code> body can even
be a candidate for inlining)</li>
<li>Handle coercions using the new dispatch mechanism, again with some
performance wins</li>
<li>Replace the <code>findmethod</code>, <code>tryfindmethod</code>, and <code>can</code> ops with a dispatcher
based solution; while the use of <code>nqp::ops</code> in modules is discouraged, these
are among the more common ones, so retaining the API compatibility is good
for the module ecosystem</li>
<li>Implement a dispatcher-based solution for <code>istype</code>: if the answer cannot be
given by the type cache, then a dispatcher is now used for the fallback. This
opens the door to a range of future optimizations.</li>
<li>Implement sink handling in Raku using a dispatcher, which in turn allows us
to avoid a huge number of method calls in the common no-op situation, by
instead using a type guard and mapping it directly to <code>Nil</code></li>
<li>Eliminate lots of superseded mechanisms in MoarVM: the multiple dispatch
cache, smart coercion ops, the method cache, the legacy argument capture
data structure, the invocation protocol mechanism, and the legacy calling
conventions</li>
<li>Replace a number of Rakudo extension ops with dispatcher-based solutions
(these are C extensions to MoarVM, which we are seeking to fully eliminate;
while this is not a goal for the new dispatcher work, we are now down to
around 10 of them, putting it in reach in the near future; this is of some
end user interest as it is currently a blocker for making a single executable
that bundles MoarVM, Rakudo, and a program)</li>
<li>Reinstate type statistics collection when using the new dispatcher, so the
type specializer can start to do its optimization work again</li>
<li>Start translating dispatch programs built at callsites into sequences of
ops, including guards. This means that, in specialized code, we can very
often avoid interpreting dispatch programs, and instead have JITted guard
sequences (with the guards potentially being eliminated), and also exposes
dispatches resulting in bytecode invocation for further optimization</li>
<li>Reinstate specialization linking for bytecode invocations (this is where
one piece of specialized code can directly call a specialized form of the
caller without additional type checks); this is restricted so far to
calls that don't have potential resumptions, so doesn't yet work for method
or multi calls, for example</li>
<li>Resinstate inlining, with the same restrictions as for specialization
linking</li>
<li>Reinstate OSR (On Stack Replacement, used to switch hot loops into their
optimized form when it is available)</li>
<li>Design and implement a solution for better handling of megamorphic method
callsites, and make use of it in the NQP method dispatcher</li>
</ul>

<p>A few other improvements were made not directly related to the new dispatch
mechanism, but because the opportunity for improvement was spotted during
performance analysis:</p>

<ul>
<li>Rework how action methods are invoked, such that most such invocations are
monomorphic rather than all going through a megamorphic site; this should
allow simple action methods to even be inlined in the future</li>
<li>Make specializer statistics cleanup much cheaper, meaning the specializer
thread can spend more time doing useful work</li>
</ul>

<p>The total time worked up to the end of August on the grant is <strong>144 hours
42 minutes</strong>, meaning that 55 hours and 18 minutes remain.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#529 - KöMaL for the math enthusiasts</title>
    <link rel="alternate" href="https://perlweekly.com/archive/529.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>A long long time ago, when I was in high school, I participated in the annual competition of <a href="https://www.komal.hu/">KöMaL, the Mathematical and Physical Journal for High Schools</a>. (Look for the little UK flag for the English version). Back then we sent in the solution by snail-mail and we only had to write our name to be identified. However people with very common names were asked to include a 3-digit number between their names. There was no verification that two people with the exact same name did not pick the same number, but the chances were slim. Because my name is way too common in Hungary I picked the number 529 because it is 23^2. Funnily, if you squint it also resembles the initials of my name: SzG</p>
<p>Anyway, if you or your kids like math, informatics, or physics, I'd recommend it!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/529.html</id>
    <published>2021-09-13T10:00:00Z</published>
    <updated>2021-09-13T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>How to show UTF-8 at the Windows command prompt </title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/09/how-to-show-utf-8-at-the-windows-command-prompt.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10417</id>
    <published>2021-09-13T06:17:40Z</published>
    <updated>2021-09-13T06:20:16Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>If you windows Perl user, It is good to know How to show UTF-8 at the Windows command prompt .</p>

<p><a href="https://perlzemi.com/blog/20210903122616.html">How to show UTF-8 at the Windows command prompt </a></p>

<p>One liner is yet buggy, however UTF-8 showing is good in Windows command prompt.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Two Exercises in Fundamental Data Structures</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/09/12#pwc129" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a tree and a node of the given tree. Write a script to find out the 
distance of the given node from the root.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Tree129{
    use boolean;  
    use Tie::RefHash;
    use Class::Struct; 

    package Node{
        use boolean;  
        use Class::Struct; 
        struct(
            value =&gt; q/$/,
        );  
        true; 
    }  

    package Edge{
        use boolean;  
        use Class::Struct; 
        struct(
            weight =&gt; q/$/,
            source =&gt; q/Node/,
            target =&gt; q/Node/
        );  
        true; 
    }  

    struct(
        root =&gt; q/Node/,
        edges =&gt; q/%/
    );   

    sub print_tree{ 
        my($self) = @_;   
        for my $edge_source (keys %{$self-&gt;edges()}){
            for my $target (@{$self-&gt;edges()-&gt;{$edge_source}}){
                print $edge_source-&gt;value() . "-&gt;" . $target-&gt;value() . "\n";
            }
        }
    }  

    sub distance{
        my($self, $target) = @_;
        my $distance = 0;
        return $distance if($self-&gt;root()-&gt;value() == $target);
        my @nodes = @{$self-&gt;edges()-&gt;{$self-&gt;root()}};
        my @edge_sources = keys %{$self-&gt;edges()};
        do{
            $distance++;
            return $distance if((grep {$_-&gt;value() == $target} @nodes) &gt; 0);
            my @child_nodes;
            for my $node (@nodes){
                my @k = grep {$_-&gt;value() == $node-&gt;value()} @edge_sources;
                push @child_nodes, @{$self-&gt;edges()-&gt;{$k[0]}} if $k[0] &amp;&amp; $self-&gt;edges()-&gt;{$k[0]};
            }
            @nodes = @child_nodes;
        }while(@nodes);
        return -1;
    }

    sub insert{
        my($self, $source, $target) = @_;   
        if(!$self-&gt;root()){      
            $self-&gt;root(new Node(value =&gt; $source));  
            tie %{$self-&gt;edges()}, "Tie::RefHash";
            $self-&gt;edges($self-&gt;root() =&gt; [new Node(value =&gt; $target)]);          
        }   
        else{
            my $found = false;
            for my $edge_source (keys %{$self-&gt;edges()}){
                if($edge_source-&gt;value() == $source){
                    push @{$self-&gt;edges()-&gt;{$edge_source}}, new Node(value =&gt; $target);
                    $found = true;
                }
            }
            if(!$found){
                $self-&gt;edges()-&gt;{new Node(value =&gt; $source)} = [new Node(value =&gt; $target)];
            }
        }
    }  
    true; 
}

package main{
    my $tree = new Tree129(); 
    $tree-&gt;insert(1, 2); 
    $tree-&gt;insert(1, 3); 
    $tree-&gt;insert(3, 4); 
    $tree-&gt;insert(4, 5); 
    $tree-&gt;insert(4, 6); 
    print $tree-&gt;distance(6) . "\n";
    print $tree-&gt;distance(5) . "\n";
    print $tree-&gt;distance(2) . "\n";
    print $tree-&gt;distance(4) . "\n";
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
3
3
1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;In the past, for this sort of problem, I would separate out the Tree package into 
its own file . Here I decided to keep everything in one file, but still divide everything
into the proper packages.&lt;/p&gt;

&lt;p&gt;While creating a Tree package from scratch was fun, getting that data structure correct
is just half the battle. Still need to solve the problem! To that end we need to start at
the root of the tree and then descend and count how many levels down the node is found, if
it exists. If not return -1.&lt;/p&gt;

&lt;p&gt;One issue is that to store the edges I use a hash with Nodes as keys. To use a Node 
instance as a key we need to use Tie::RefHash. There is a slight trick here though, to 
properly retrieve the value we need to access the keys using &lt;code&gt;keys&lt;/code&gt;. Here I store the keys 
in an array and &lt;code&gt;grep&lt;/code&gt; for a match. A slightly awkward requirement, but the work around is
easy enough.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two linked list having single digit positive numbers. Write a script to add
the two linked list and create a new linked representing the sum of the two linked list 
numbers. The two linked lists may or may not have the same number of elements.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList129{
    use boolean;
    use Class::Struct;

    package Node{
        use boolean;
        use Class::Struct;
        struct(
            value =&gt; q/$/,
            previous =&gt; q/Node/,
            next =&gt; q/Node/
        );
        true;
    }

    struct(
        head =&gt; q/Node/,
        tail =&gt; q/Node/,
        length =&gt; q/$/
    );

    sub stringify{
        my($self) = @_;
        my $s = $self-&gt;head()-&gt;value();
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;value();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;value() if $next-&gt;value();
        $s .= "\n"; 
        return $s;
    }

    sub stringify_reverse{
        my($self) = @_;
        my $s = $self-&gt;tail()-&gt;value();
        my $previous = $self-&gt;tail()-&gt;previous();
        while($previous &amp;&amp; $previous-&gt;previous()){
            $s .= " -&gt; " if $s; 
            $s = $s . $previous-&gt;value();
            $previous = $previous-&gt;previous();
        }
        $s = $s . " -&gt; " . $self-&gt;head()-&gt;value();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $value) = @_;
        if(!$self-&gt;head()){
            $self-&gt;head(new Node(value =&gt; $value, previous =&gt; undef, next =&gt; undef));
            $self-&gt;tail($self-&gt;head());
            $self-&gt;length(1);
        }
        else{
            my $current = $self-&gt;head();
            my $inserted = false;
            do{
                if(!$current-&gt;next()){
                    $current-&gt;next(new Node(value =&gt; $value, previous =&gt; $current, next =&gt; undef));
                    $inserted = true; 
                }
                $current = $current-&gt;next();
            }while(!$inserted);
            $self-&gt;tail($current);
            $self-&gt;length($self-&gt;length() + 1);
        }
        return $value;
    }

    sub add{
        my($self, $list) = @_;
        my $shortest = [sort {$a &lt;=&gt; $b} ($self-&gt;length(), $list-&gt;length())]-&gt;[0];
        my($x, $y) = ($self-&gt;tail(), $list-&gt;tail());
        my $sum = new LinkedList129();
        my $carry = 0;
        do{
            my $z;
            if($x &amp;&amp; $x-&gt;value() &amp;&amp; $y &amp;&amp; $y-&gt;value()){
                $z = $x-&gt;value() + $y-&gt;value() + $carry;
                ($x, $y) = ($x-&gt;previous(), $y-&gt;previous());
            }
            elsif($x &amp;&amp; $x-&gt;value() &amp;&amp; !$y){
                $z = $x-&gt;value() + $carry;
                ($x, $y) = ($x-&gt;previous(), undef);
            }
            elsif(!$x-&gt;value() &amp;&amp; $y-&gt;value()){
                $z = $y-&gt;value() + $carry;
                ($x, $y) = (undef, $y-&gt;previous());
            }
            if(length($z) == 2){
                $carry = 1;
                $sum-&gt;insert(int(substr($z, 1, 1)));
            }
            else{
                $carry = 0;
                $sum-&gt;insert($z);
            }

        }while($x || $y);
        return $sum;
    }
    true;
}

package main{
    my $l0 = new LinkedList129();
    $l0-&gt;insert(1);
    $l0-&gt;insert(2);
    $l0-&gt;insert(3);
    $l0-&gt;insert(4);
    $l0-&gt;insert(5);
    my $l1 = new LinkedList129();
    $l1-&gt;insert(6);
    $l1-&gt;insert(5);
    $l1-&gt;insert(5);
    my $sum = $l0-&gt;add($l1);
    print "    " . $l0-&gt;stringify();
    print "+\n";
    print "              " . $l1-&gt;stringify();
    print "---" x ($l0-&gt;length() * 2) . "\n";  
    print "    " . $sum-&gt;stringify_reverse();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
    1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5
+
              6 -&gt; 5 -&gt; 5
------------------------------
    1 -&gt; 3 -&gt; 0 -&gt; 0 -&gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My opinion on LinkedList problems may not be shared by the majority of Team PWC. I love
Linked List problems! &lt;/p&gt;

&lt;p&gt;Similar to the first part of Challenge 129 Class::Struct is used to create the data 
structure central tot he problem. This LinkedList implementation just has an &lt;code&gt;insert()&lt;/code&gt;
and two &lt;code&gt;stringify&lt;/code&gt; functions, along with the required &lt;code&gt;add()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem asks to sum two linked lists of single digit numbers. The &lt;code&gt;add()&lt;/code&gt; function
works in the same way that one would manually add the numbers. The sum of the two lists
is represented as a new Linked List, but to represent it properly it is output in reverse.
That should be fine for the purposes of this challenge. Other options are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function for inserting at the end of the list, insert at each addition step
&lt;/li&gt;
&lt;li&gt;holding the sum in an array and when &lt;code&gt;add()&lt;/code&gt; is finished with all list elements use the
existing &lt;code&gt;insert()&lt;/code&gt; and create a LinkedList instance to return by &lt;code&gt;shift&lt;/code&gt;ing off the 
array.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-129/"&gt;Challenge 129&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Class::Struct"&gt;Class::Struct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Tie::RefHash"&gt;Tie::RefHash&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc129</id>
    <published>2021-09-12T23:53:00-04:00</published>
    <updated>2021-09-12T23:53:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 129</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-129-33kn" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi all. I only completed one challenge this week. But at 140 lines, it's the second longest submission. For the record, my longest submission was 156 lines for challenge 118.</p>

<p>I attended <a href="https://2021.pycon.org.au/">PyConline Australia</a> the past few days, virtually of course thanks to the 'rona. The videos from the conference should be on their <a href="https://www.youtube.com/c/PyConAU">Youtube channel</a> by the time you read this.</p>

<p>This <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-129/">weeks challenge</a> and my <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-129/sgreen">solution</a>.</p>

<h2>
  <a href="#task-2-add-linked-lists">
  </a>
  TASK #2 › Add Linked Lists
</h2>

<p>You are given two linked list having single digit positive numbers.</p>

<p>Write a script to add the two linked list and create a new linked representing the sum of the two linked list numbers. The two linked lists may or may not have the same number of elements.</p>

<p>Feel free to come up with your own unique way to deal with the task. I am expecting a class representing linked list. It should have methods to create a linked list given list of single digit positive numbers and a method to add new member. Also have a method that takes 2 linked list objects and returns a new linked list. Finally a method to print the linked list object in a user friendly format.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>As regularly readers of my blog probably know, I don't like to use non-core modules when solving the challenge. And that is true this time.</p>

<p>It's also the first time I've done a linked list challenge properly. So the main part of the challenge is to write the LinkedList module. Since we need to know the values in reverse, this is a double linked list. That is, each node is linked both the next and previous node. In the real world, I would have used Moo, but see the above paragraph for why I didn't.</p>

<p>My LinkedList module stores an internal value of <code>_list</code> that contains the ordered list of LinkedList::Node objects. It has the <code>first</code> and <code>last</code> method which returns the first and last node respectively. And it has the <code>as_string</code> function to display the list as a printable string separated by <code>-&gt;</code>.</p>

<p>Each LinkedList::Node object has the methods <code>value</code> (to get the value of the node), and <code>prev</code> and <code>next</code> to get the previous or next node (or undef if none exists). It also has <code>set_prev</code> and <code>set_next</code> to set these values.</p>

<p>That's all the boring bits. Now for the fun.</p>

<p>The LinkedList model has the methods <code>push</code>, <code>unshift</code> which both do the same as the Perl methods of the same name. These methods create a new node object, and creates the prev / next link between the last node and the newly created one (or the first node for the unshift method).</p>

<p>The LinkedList module also has the <code>_add</code> method, which <a href="https://metacpan.org/pod/overload">overloads</a> the addition method. For this method, I get the last value of each linked list and sum them together. The last digit is added to the <code>$new_list</code> linked list, and the carry forward is added to the <code>$carry</code> variable. I repeat this until both lists are exhausted and there is no carry forward.</p>

<p>Still reading? Well done :-)</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 123 321
4 -&gt; 4 -&gt; 4

$ ./ch-2.pl "1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5" "6 -&gt; 5 -&gt; 5"
1 -&gt; 3 -&gt; 0 -&gt; 0 -&gt; 0
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-129-33kn</id>
    <published>2021-09-12T10:57:18Z</published>
    <updated>2021-09-12T10:57:18Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5262678631760837780</id>
    <published>2021-09-11T16:10:00.000+02:00</published>
    <updated>2021-09-11T16:10:57.565+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclviii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049005&lt;/strong&gt; on 2021-09-09&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049004 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AAR/DBIx-Lite-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::Lite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Chained and minimal ORM &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2021-09-07&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 2 years, 8 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.23&lt;/strong&gt; on 2021-09-11&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.21 was 4 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.26&lt;/strong&gt; on 2021-09-08&lt;/li&gt;  &lt;li&gt;Votes: 68&lt;/li&gt;  &lt;li&gt;Previous version: 4.25 was 6 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/FAYLAND/Net-GitHub-1.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::GitHub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface for github.com &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.02&lt;/strong&gt; on 2021-09-08&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.01 was 1 year, 4 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Iterator-Rule-1.015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Iterator::Rule&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Iterative, recursive file finder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.015&lt;/strong&gt; on 2021-09-09&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.014 was 3 years, 2 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.63' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.63&lt;/strong&gt; on 2021-09-10&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.62 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.612' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.612&lt;/strong&gt; on 2021-09-08&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.611 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9012' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9012&lt;/strong&gt; on 2021-09-10&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9011 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GFRANKS/Test-MockModule-v0.177.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::MockModule&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Override subroutines in a module for unit testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.177.0&lt;/strong&gt; on 2021-09-07&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v0.176.0 was 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.077' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.077&lt;/strong&gt; on 2021-09-06&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.076 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5262678631760837780/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclviii-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5262678631760837780"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5262678631760837780"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclviii-11-great-cpan-modules-released.html" title="(ccclviii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6106121584978385693</id>
    <published>2021-09-11T16:07:00.002+02:00</published>
    <updated>2021-09-11T16:07:37.489+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiv) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 38&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/09/11 14:07:22 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Generate" target="_blank"&gt;JSON::Schema::Generate&lt;/a&gt; - Generate JSON Schemas from data!&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Modern" target="_blank"&gt;JSON::Schema::Modern&lt;/a&gt; - Validate data against a schema&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::SchemaValidator" target="_blank"&gt;JSON::SchemaValidator&lt;/a&gt; - JSON Schema Validator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSONSchema::Validator" target="_blank"&gt;JSONSchema::Validator&lt;/a&gt; - Validator for JSON Schema Draft4/Draft6/Draft7 and OpenAPI Specification 3.0&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::POP3" target="_blank"&gt;Mail::POP3&lt;/a&gt; - A POP3 stand-alone forking daemon or inetd server&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::Equ" target="_blank"&gt;Syntax::Operator::Equ&lt;/a&gt; - equality operators that distinguish undef&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mojo::Role::Log" target="_blank"&gt;Test::Mojo::Role::Log&lt;/a&gt; - Testing Mojo Log messages&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::XS" target="_blank"&gt;URI::XS&lt;/a&gt; - fast URI framework, compatible with classic URI.pm, with C++ interface&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sdif" target="_blank"&gt;App::sdif&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp" target="_blank"&gt;Carp&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Method::Modifiers" target="_blank"&gt;Class::Method::Modifiers&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::mysql" target="_blank"&gt;DBD::mysql&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::StrictMode" target="_blank"&gt;Devel::StrictMode&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus" target="_blank"&gt;FFI::Platypus&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk2" target="_blank"&gt;Gtk2&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk2::TrayIcon" target="_blank"&gt;Gtk2::TrayIcon&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3" target="_blank"&gt;Gtk3&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Packer" target="_blank"&gt;HTML::Packer&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=101)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::All" target="_blank"&gt;IO::All&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema" target="_blank"&gt;JSON::Schema&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::AsType" target="_blank"&gt;JSON::Schema::AsType&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Tiny" target="_blank"&gt;JSON::Schema::Tiny&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Validator" target="_blank"&gt;JSON::Validator&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AccessLog" target="_blank"&gt;Mojolicious::Plugin::AccessLog&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IMAP::Simple" target="_blank"&gt;Net::IMAP::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::WebSocket::Server" target="_blank"&gt;Net::WebSocket::Server&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::ProcessTable" target="_blank"&gt;Proc::ProcessTable&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=64)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Bind" target="_blank"&gt;SQL::Bind&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::UI" target="_blank"&gt;Term::UI&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UV" target="_blank"&gt;UV&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Machine" target="_blank"&gt;Web::Machine&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Simple" target="_blank"&gt;Web::Simple&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML" target="_blank"&gt;YAML&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6106121584978385693/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/cdlxxxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6106121584978385693"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6106121584978385693"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/cdlxxxiv-metacpan-weekly-report.html" title="(cdlxxxiv) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Outreachy Perl internship 2021 successful completion</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy2021-complete"/>
  <id>tag:news.perlfoundation.org,2021-09-11:/post/outreachy2021-complete</id>
  <published>2021-09-11T10:24:43</published>
  <updated>2021-09-11T10:24:43</updated>
  <summary>
  <![CDATA[
     I am pleased to announce that the Outreachy internship concluded successfully again in 2021. As previously announced, The Perl Foundation accepted Rosheen Naeem as an intern for 2021 to work on Open Food Facts. Stéphane Gigandet provided mentorship for her during the entire program. I would like to congratulate both for the successful program completion and express gratitude for their hard work. Rosheen reported that she completed the following during 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce that the Outreachy internship concluded successfully again in 2021.</p>

<p>As previously <a href="https://news.perlfoundation.org/post/outreachy2021-intro">announced</a>, The Perl Foundation accepted Rosheen Naeem as an intern for 2021 to work on Open Food Facts. Stéphane Gigandet provided mentorship for her during the entire program. I would like to congratulate both for the successful program completion and express gratitude for their hard work.</p>

<p>Rosheen reported that she completed the following during the internship:
* Worked on templatization of Perl scripts.
* Added template files for Perl functions and modules.
* Refactored the OpenFoodFacts Perl modules and functions. 
* Added Developer guide for the developers and newcomers.
* Updated the docker development documentation and added the producer’s platform section. 
* Worked on UI of few files.
* Worked on issues of OpenFoodFacts.
* Added Perl Pod documentation.
* Added new products and ingredients.
* Fixed the directory structure.</p>

<p>Rosheen also wrote about her experience in her <a href="https://roshnaeem.medium.com/">blog articles</a>.</p>

<p>Stéphane says:</p>

<p>"We were very fortunate and happy to get Rosheen’s help this summer to improve the Perl code quality of Open Food Facts. Thanks to Rosheen, we made a lot of progress to better structure our code and document it, and to separate business from display logic thanks to templatization with Template::Toolkit. Those improvements are very useful to make our codebase friendlier for new contributors and much more pleasant to work with!"</p>

<p><em>*Open Food Facts *</em></p>

<p><a href="https://world.openfoodfacts.org">Open Food Facts</a> is a Wikipedia for food products, a free, nonprofit, collaborative and open project to gather photos and data for millions of food products from around the world.</p>

<p><a href="https://github.com/openfoodfacts/openfoodfacts-server">Open Food Facts is written in Perl</a>, and the project is looking for Perl developers to extend the impact of free and open food information: internationalizing and improving algorithms to “understand” ingredients list, analyzing the healthiness and environmental friendliness of food products and computing their Nutri-Score and Eco-Score, and much more!</p>

<p>Stéphane also gave a talk about Open Food Facts at the Perl and Raku Conference 2021 (<a href="https://www.youtube.com/watch?v=imugl2dSdnU">video</a>). </p>

<p><strong>Outreachy</strong></p>

<p>Outreachy, formerly The Outreach Program for Women, was started by the GNOME Foundation in 2006 to encourage women to participate in the GNOME project. Since inception the project has grown to include many Free and Open Source organisations, including The Perl Foundation, and now the program has been rebranded and extended to encourage the participation of other underrepresented groups.</p>

<p>Outreachy explicitly invites applicants from around the world who are women (cis and trans), trans men, and genderqueer people. Additionally, they explicitly invite residents and nationals of the United States of any gender who are Black/African American, Hispanic/Latino, American Indian, Alaska Native, Native Hawaiian, or Pacific Islander. Anyone who faces systemic bias or discrimination in the technology industry of their country is invited to apply.</p>

<p><strong>Looking ahead</strong></p>

<p>The Perl Foundation is looking for mentors and project ideas for the next Outreachy rounds. If you have Perl or Raku project ideas, please contact makoto@perlfoundation.org. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>CPAN Release of Time::Verbal module</title>
    <link rel="alternate" href="https://dev.to/gugod/cpan-release-of-time-verbal-module-1ecl" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/Time::Verbal"&gt;Time::Verbal&lt;/a&gt; 1.1.1 made its way to CPAN.&lt;/p&gt;

&lt;p&gt;This module dose one little things, that is to convert the time differece to a verbal format, rounded to some unit that "makes sense", just as how you would say such thing as a human.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new();
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; about 1 hour
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides the default English format, other 67 languages identified by these ISO language codes are supported:&lt;/p&gt;

&lt;p&gt;ar bg bn-IN bs ca cy da de-AT de-CH de dsb el en-AU en-GB en-US eo es-AR es-CL es-CO es-MX es-PE es et eu fa fi fr-CA fr-CH fr fur gl-ES gsw-CH he hi-IN hi hr hsb hu id is it ja ko lo lt lv mk mn nb nl nn pl pt-BR pt-PT rm ro ru sk sl sr-Latn sr sv-SE sw tr uk vi zh-CN zh-TW&lt;/p&gt;

&lt;p&gt;I don't know all these languages (nor their language codes), but &lt;a href="https://metacpan.org/pod/Locale::Wolowitz"&gt;Locale::Wolowiz&lt;/a&gt; does. Or, at least it is the library that does the translation, given a bunch of JSON files that contain the body of translations.&lt;/p&gt;

&lt;p&gt;So here's how you say "about 1 hour" in Vietnamese:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new( "locale" =&amp;gt; "vi" );
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; khoảng 1 giờ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A default version of translations of all the above-mentioned 68 languages are provided  with &lt;code&gt;Time::Verbal&lt;/code&gt; itself and is ready to use once installed properly -- a usual &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanm&lt;/code&gt; or &lt;code&gt;cpm&lt;/code&gt; command would suffice. However, in case some customize version is need because, say, you wish to provide better UX to whom speak the Vulcan variant of Klingon, you need to create a file named after the language code -- which can be arbitrary such as &lt;code&gt;tlh-Vulcan&lt;/code&gt;. You would create &lt;code&gt;tlh-Vulcan.json&lt;/code&gt; and put it under &lt;code&gt;/app/i18n&lt;/code&gt;, or really any directory of your choice, then do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new(
    "locale" =&amp;gt; "tlh-Vulcan",
    "i18n_dir" =&amp;gt; "/app/i18n"
);
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; Chaq wa' rep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Disclaimer -- I don't know if that's how Volcanized Klingon speaks. Don't take my example as if it is authentic.&lt;/p&gt;

&lt;p&gt;To prepare the translation, take a look of the json files under the default &lt;code&gt;i18n_dir&lt;/code&gt;, which can be printed by running this oneliner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -MTime::Verbal -E 'say Time::Verbal-&amp;gt;new()-&amp;gt;i18n_dir'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It shouldn't be difficult to grasp the structure of those translation files and produce a new one. It is however, very difficult to start describing the schema of thoes json file as an indolent developer.&lt;/p&gt;

&lt;p&gt;The translations are accquired from &lt;a href="https://github.com/svenfuchs/rails-i18n"&gt;rails-i18n&lt;/a&gt; project -- which is one of the first modules that does things like this.&lt;/p&gt;




&lt;p&gt;Originally posted at &lt;a href="https://gugod.org/2021/09/cpan-release-of-time-verbal/"&gt;https://gugod.org/2021/09/cpan-release-of-time-verbal/&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Kang-min Liu</name>
    </author>
    <id>https://dev.to/gugod/cpan-release-of-time-verbal-module-1ecl</id>
    <published>2021-09-08T15:09:37Z</published>
    <updated>2021-09-08T15:09:37Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 128: Minimum Platforms</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/09/perl-weekly-challenge-128-minimum-platforms.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10412</id>
    <published>2021-09-08T02:41:27Z</published>
    <updated>2021-09-08T02:44:54Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 128 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-128/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Note:</em> very little time this week, so I only completed task 2.</p>

<p><em>You are given two arrays of arrival and departure times of trains at a railway station.</em></p>

<p><em>Write a script to find out the minimum number of platforms needed so that no train needs to wait.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @arrivals   = (11:20, 14:30)
       @departures = (11:50, 15:00)
Output: 1

    The 1st arrival of train is at 11:20 and this is the only train at the station, so you need 1 platform.
    Before the second arrival at 14:30, the first train left the station at 11:50, so you still need only 1 platform.

Example 2:

Input: @arrivals   = (10:20, 11:00, 11:10, 12:20, 16:20, 19:00)
       @departures = (10:30, 13:20, 12:40, 12:50, 20:20, 21:20)
Output: 3

    Between 12:20 and 12:40, there would be at least 3 trains at the station, so we need minimum 3 platforms.

UPDATED [2021-08-30 23:30 UK TIME]: Corrected the between time description of the example 2. Thanks Peter Campbell Smith.
</code></pre>

<p>We need to perform a number of comparisons between arrival and departure times. We could write a dedicated compare subroutine (which would be quite simple). I decided however that I prefer to convert all the times into time stamps, namely the number of seconds elapsed since 00:00 a.m. that day, for which we can simply perform a numerical comparison. Our program then reads both arrays in parallel, always picking the smallest value. A <code>size</code> counter keeps track of the number of trains in the station at any given time, and <code>$max-size</code> keeps track of the maximum value reached by <code>$size</code>.</p>

<h2>Minimum Platforms in Raku</h2>

<p>Our program reads both arrays in parallel, always picking the smallest value. A <code>size</code> counter keeps track of the number of trains in the station at any given time, and <code>$max-size</code> keeps track of the largest size reached. When reading to sets of values in parallel, there are usually two edge cases when we reach the end of any of the datasets. If we reach the end of the arrival times, we can just exit the loop, since we will not increase the <code>$size</code> value beyond the maximum value so far. If we reach the end of the departure time array, then we need to increment the <code>$max-size</code> by one for any value left in the arrival time array.</p>

<pre><code>my @arrivals   = &lt;10:20 11:00 11:10 12:20 16:20 19:00&gt;;
my @departures = &lt;10:30 13:20 12:40 12:50 20:20 21:20&gt;;
my @ts-arr = map { my ($m, $s) = split /\:/, $_; $m * 60 + $s;}, @arrivals;
my @ts-dep = map { my ($m, $s) = split /\:/, $_; $m * 60 + $s;}, @departures;
my $size = 0;
my $max-size = 0;
while @ts-arr.end != 0 {
    if @ts-dep.end == 0 {
        $max-size++;
    } elsif @ts-arr[0] &lt;= @ts-dep[0] {
        shift @ts-arr;
        $size++;
        $max-size = $size if $size &gt; $max-size;
        # say "$size $max-size";
    } else {
        shift @ts-dep;
        $size--;
    }
}
say $max-size;
</code></pre>

<p>With the built-in sample input data, the program displays the following output:</p>

<pre><code>$ raku ./min-platforms.raku
3
</code></pre>

<h2>Minimum Platforms in Perl</h2>

<p>We&#8217;re basically porting the Raku program to Perl. Please refer to the above if you need explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @arrivals   = qw&lt;10:20 11:00 11:10 12:20 16:20 19:00&gt;;
my @departures = qw&lt;10:30 13:20 12:40 12:50 20:20 21:20&gt;;
my @ts_arr = map { my ($m, $s) = split /:/, $_; $m * 60 + $s;} @arrivals;
my @ts_dep = map { my ($m, $s) = split /:/, $_; $m * 60 + $s;} @departures;
my $size = 0;
my $max_size = 0;
while (@ts_arr) {
    if ($#ts_dep == 0) {
        $max_size++;
    } elsif ($ts_arr[0] &lt;= $ts_dep[0]) {
        shift @ts_arr;
        $size++;
        $max_size = $size if $size &gt; $max_size;
        # say "$size $max-size";
    } else {
        shift @ts_dep;
        $size--;
    }
}
say $max_size;
</code></pre>

<p>Output:</p>

<pre><code>$ perl min-platforms.pl
3
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on September 12, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Cutting the fat: Lightweight Perl OO modules</title>
    <link rel="alternate" href="https://dev.to/mjgardner/cutting-the-fat-lightweight-perl-oo-modules-14g4" type="text/html"/>
    <content type="html">&lt;p&gt;This blog has devoted a fair amount of attention to the popular and multifaceted object-oriented system &lt;a href="https://phoenixtrap.com/tag/moose/"&gt;Moose&lt;/a&gt; and its lightweight subset &lt;a href="https://phoenixtrap.com/tag/moo/"&gt;Moo&lt;/a&gt;. I’ve also covered &lt;a href="https://phoenixtrap.com/tag/objectpad/"&gt;Object::Pad&lt;/a&gt;, the testbed of concepts and syntax for &lt;a href="https://phoenixtrap.com/tag/corinna/"&gt;Corinna&lt;/a&gt;, the &lt;a href="https://github.com/Ovid/Cor/wiki#the-proposal"&gt;proposed&lt;/a&gt; next-generation Perl core OO system. But what if your project is too memory‑, performance‑, or dependency-constrained for these options?&lt;/p&gt;

&lt;p&gt;It turns out that &lt;a href="https://www.cpan.org/"&gt;CPAN&lt;/a&gt; has a rich history of lighter-weight OO modules to meet many different needs. If you can live with their trade-offs, they’re worth investigating instead of rolling your own layer over &lt;a href="https://perldoc.perl.org/perlobj"&gt;Perl’s OO&lt;/a&gt;. Here are a few.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classstruct"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/Class::Struct"&gt;Class::Struct&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Class::Struct"&gt;Class::Struct&lt;/a&gt;’s main claim to fame is its inclusion in the standard Perl distribution, so there’s no need to install dependencies from CPAN. It provides a syntax for defining classes as &lt;a href="https://en.wikipedia.org/wiki/Struct_(C_programming_language)"&gt;C‑style &lt;code&gt;struct&lt;/code&gt;s&lt;/a&gt; at either &lt;a href="https://perldoc.perl.org/Class::Struct#Class-Creation-at-Compile-Time"&gt;compile time&lt;/a&gt; or runtime. (There’s no speed advantage to the former; it just means that your class will be built as if you had written the accessors yourself as &lt;a href="https://perldoc.perl.org/functions/sub"&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/a&gt;s.) Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict, say, and postfix dereferencing&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Class::&lt;/span&gt;&lt;span class="nv"&gt;Struct&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="p"&gt;'},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# replace the name element of baz&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sharon&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# replace the second element of bar&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;replaced&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here’s the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello Mark
1,2,3
hello Sharon
1,replaced,3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that Class::Struct supports accessors for scalar, array, and hash types, as well as other classes (not demonstrated). Consult &lt;a href="https://perldoc.pl/Class::Struct#Element-Types-and-Accessor-Methods"&gt;the module’s documentation&lt;/a&gt; for the different ways to define and retrieve them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#classaccessor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Class::Accessor"&gt;Class::Accessor&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Class::Accessor"&gt;Class::Accessor&lt;/a&gt; does one thing: it makes accessors and mutators (also known as getters and setters) for fields in your class. Okay, it actually does another thing: it provides your class with a new method to initialize those fields. Those accessors can be &lt;a href="https://metacpan.org/pod/Class::Accessor#mk_accessors"&gt;read-write&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Class::Accessor#mk_ro_accessors"&gt;read-only&lt;/a&gt;, or &lt;a href="https://metacpan.org/pod/Class::Accessor#mk_wo_accessors"&gt;write-only&lt;/a&gt;. (Why would you want write-only accessors?) You can define any of them using either its historical class methods or a &lt;a href="https://metacpan.org/pod/Class::Accessor#Moose!"&gt;Moose-like attribute syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re trying to squeeze every bit of performance out of your code and can sacrifice a little flexibility in altering accessor behavior, you can opt for &lt;a href="https://metacpan.org/pod/Class::Accessor::Fast"&gt;Class::Accessor::Fast&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Class::Accessor::Faster"&gt;Class::Accessor::Faster&lt;/a&gt;. The former still uses hash references under the hood to represent objects and the latter uses array references. The main Class::Accessor documentation contains an &lt;a href="https://metacpan.org/pod/Class::Accessor#EFFICIENCY"&gt;efficiency comparison of the three&lt;/a&gt; for your edification.&lt;/p&gt;

&lt;p&gt;Here’s an example script using Class::Accessor::Faster and the Moose-like syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict and say&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Class::Accessor::&lt;/span&gt;&lt;span class="nv"&gt;Faster&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;moose-like&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;readwrite&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;readonly&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# must be a hash reference&lt;/span&gt;
    &lt;span class="s"&gt;readwrite&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;readonly&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;readwrite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;readwrite&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;readwrite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# throws an error&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Cleveland&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is its output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello world
greetings world
'main' cannot alter the value of 'readonly' on objects of class 'Local::MyClass' at ./caf.pl line 24.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classtiny"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Class::Tiny"&gt;Class::Tiny&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Class::Tiny"&gt;Class::Tiny&lt;/a&gt; both does less and more than Class::Accessor. All of its generated accessors are read-write, but you can also give their attributes lazy defaults. Its generated constructor takes arguments via either a Class::Accessor-style hash reference or a plain list of key/value pairs, so that’s a little more convenient. It also supports Moose-style &lt;a href="https://metacpan.org/pod/Class::Tiny#Object-construction"&gt;&lt;code&gt;BUILDARGS&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Class::Tiny#BUILD"&gt;&lt;code&gt;BUILD&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Class::Tiny#DEMOLISH"&gt;&lt;code&gt;DEMOLISH&lt;/code&gt;&lt;/a&gt; methods for argument adjustment, validation, and object cleanup, respectively.&lt;/p&gt;

&lt;p&gt;It’s a toss-up as to which of the previous two is “better.” You’ll have to examine their respective features and determine which ones map to your needs.&lt;/p&gt;

&lt;p&gt;Here’s an example script that shows a few of Class::Tiny’s unique features:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict and say&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Class::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;foo bar&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default baz&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="c1"&gt;# plain key-values OK&lt;/span&gt;
    &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object built on &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt; &lt;span class="nb"&gt;localtime&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Cleveland&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And its output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello world
Object built on Tue Sep 7 09:00:00 2021
greetings Cleveland
default baz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objecttiny"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Object::Tiny"&gt;Object::Tiny&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For an even more minimalist approach, consider &lt;a href="https://metacpan.org/pod/Object::Tiny"&gt;Object::Tiny&lt;/a&gt;. Its accessors are read-only, it gives you a simple constructor, and that’s it. Its documentation lists &lt;a href="https://metacpan.org/pod/Object::Tiny#Why-bother-when-Class::Accessor::*-already-does-the-same-thing?"&gt;a number of reasons&lt;/a&gt; why it can be superior to Class::Accessor, including lower memory usage and less typing. There’s also a fork called &lt;a href="https://metacpan.org/pod/Object::Tiny::RW"&gt;Object::Tiny::RW&lt;/a&gt; that adds read-write support to its accessors.&lt;/p&gt;

&lt;p&gt;Class::Tiny’s documentation contains a &lt;a href="https://metacpan.org/pod/Class::Tiny#Why-this-instead-of-Object::Tiny-or-Class::Accessor-or-something-else?"&gt;feature table comparison&lt;/a&gt; of it, Object::Tiny, and Class::Accessor. This may help you decide which to use.&lt;/p&gt;

&lt;p&gt;Here’s an example script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict and say&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Object::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt; &lt;span class="sx"&gt;qw&amp;lt;foo bar&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# has no effect unless you use Object::Tiny::RW&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And its output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hello world
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-some-speed-with-xs"&gt;
  &lt;/a&gt;
  Add some speed with XS
&lt;/h2&gt;

&lt;p&gt;If the above options are still too slow and you don’t mind requiring a C compiler to install them, there are variants that use &lt;a href="https://perldoc.perl.org/perlxs"&gt;Perl’s XS interface&lt;/a&gt; instead of pure Perl code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Class::XSAccessor"&gt;Class::XSAccessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Class::XSAccessor::Compat"&gt;Class::XSAccessor::Compat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Object::Tiny::XS"&gt;Object::Tiny::XS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Object::Tiny::RW::XS"&gt;Object::Tiny::RW::XS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#roles-with-roletiny"&gt;
  &lt;/a&gt;
  Roles with &lt;a href="https://metacpan.org/pod/Role::Tiny"&gt;Role::Tiny&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you’re eyeing Moose and Moo’s support for &lt;a href="https://metacpan.org/dist/Moose/view/lib/Moose/Manual/Roles.pod"&gt;roles&lt;/a&gt; (also known as &lt;a href="https://en.m.wikipedia.org/wiki/Trait_(computer_programming)"&gt;traits&lt;/a&gt;) as an alternative to inheritance but still want to keep things light with one of the above modules, you’re in luck. The &lt;a href="https://metacpan.org/pod/Role::Tiny"&gt;Role::Tiny&lt;/a&gt; module lets you compose methods into consuming classes with Moo-like syntax and will pull in &lt;a href="https://en.wikipedia.org/wiki/Common_Lisp_Object_System"&gt;Common Lisp Object System&lt;/a&gt;-style &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers#DESCRIPTION"&gt;method modifier&lt;/a&gt; support from &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;Class::Method::Modifiers&lt;/a&gt; if you need it. It does mean another couple of CPAN dependencies, so if that’s a problem in your situation you’ll just have to live without roles.&lt;/p&gt;

&lt;p&gt;Here’s an example script with a role and a consuming class that uses Class::Tiny. The role requires that its consumers implement a &lt;code&gt;required_method&lt;/code&gt;, provides a &lt;code&gt;foo&lt;/code&gt; method that uses it, and a method modifier for &lt;code&gt;bar&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# for strict and say&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyRole&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;required_method&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;required_method&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="s"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;About to call bar...&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Class::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;''};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Local::MyRole&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$greeting&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;required_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Required by Local::MyRole&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Sharon&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;salutations&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And its output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;About to call bar... at ./rt.pl line 17.
hello Mark
About to call bar... at ./rt.pl line 17.
salutations Sharon
Required by Local::MyRole
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-your-favorite"&gt;
  &lt;/a&gt;
  What’s your favorite?
&lt;/h2&gt;

&lt;p&gt;There will always be those who insist on writing everything longhand, but modules like these can save a lot of time and typing as well as reduce errors. Do you have a favorite, maybe something I missed? Let me know in the comments.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/cutting-the-fat-lightweight-perl-oo-modules-14g4</id>
    <published>2021-09-07T14:00:00Z</published>
    <updated>2021-09-07T14:00:00Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="cpan"/>
    <category term="accessors"/>
  </entry>
  <entry>
    <title>My Favorite Warnings: once</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10403</id>
    <published>2021-09-06T21:21:03Z</published>
    <updated>2021-09-06T21:21:49Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>The Perl compiler wants to help us write clean code. One of the ways that it does this is to issue warnings when a global variable appears ony once: <code>Name "main::Foo" used only once: possible typo at ...</code></p>

<p>The thing is, sometimes this is not an error. For example, we may want to refer to a global variable in another package, one that was not imported into our namespace.</p>

<p>I have seen various expedients used to avoid this warning in CPAN code. Something like <code>$Foo::Bar = $Foo::Bar = 42;</code> is fairly typical. Sometimes this strange-looking code is commented as to its purpose, others not.</p>

<p>Alternatively, you can use the pragma <code>no warnings 'once';</code> to supress this warning. This seems to me the appropriate way to spell "I meant to do that!" under the circumstances:</p>

<pre>
{
    no warnings 'once';
    $Foo::Bar = 42;
}
</pre>

<p>Oddly, the relevant portion of <a href="http://perldoc.perl.org/perldiag.html#Name-&quot;%s::%s&quot;-used-only-once:-possible-typo"><code>perldoc perldiag</code></a> does not mention this explicitly, though I suppose the annotation <code>(W once)</code> should be considered to imply it. On the other hand, it <strong>does</strong> explicitly mention inserting a second reference, which may be what gave rise to the code in the third paragraph (<code>$Foo::Bar = $Foo::Bar = 42;</code>.)</p>

<p><i>This is the first (and perhaps only) entry in a possible desultory series of blogs on the <a href="http://perldoc.perl.org/warnings.html">warnings</a> pragma.</i></p>
]]>
        
    </content>
</entry>
  <entry>
    <title>#528 - Legacy Code</title>
    <link rel="alternate" href="https://perlweekly.com/archive/528.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How old is the Perl code that you work on currently?</p>
<p>Curtis wrote an interesting <a href="https://ovid.github.io/articles/a-simple-way-to-fix-legacy-code.html">blog post</a> talking about dealing with legacy code.</p>
<p>After a long time, I got the opportunity to work with good old CGI. It reminds me of my early learning days. Talking about CGI, I came across fun <a href="https://www.oasys.net/posts/migrating-a-perl-cgi-to-aws-lambda">blog post</a> talking about Migrating a Perl CGI application to AWS Lambda.</p>
<p>Please do share anything interesting you are trying using Perl. I am currently working on Elastic Search using Perl. As always CPAN provides great support e.g. <a href="https://metacpan.org/pod/Search::Elasticsearch">Search::Elasticsearch</a>.</p>
<p>What else changed in your routine?</p>
<p>For me, the school run is back. How about you?</p>
<p>Enjoy the rest of the newsletter. Hopefully next week we will have more perl blog posts.</p></div>
    </content>
    <id>https://perlweekly.com/archive/528.html</id>
    <published>2021-09-06T10:00:00Z</published>
    <updated>2021-09-06T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A Platform for Every Departing Sub-Matrix</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/09/05#pwc128" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given m x n binary matrix having 0 or 1. Write a script to find out maximum 
sub-matrix having only 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Tree::Suffix; 

sub maximum_sub_matrix{
    my @matrix = @_;
    my @sub_matrix;

    my %indices;  
    my @indices_maximum;
    my $indices_previous = "";
    my $indices_current = "";
    my $tree = new Tree::Suffix(); 
    for my $i (0 .. @matrix - 1){
        $indices_current = "";
        for my $j (0 .. @{$matrix[0]} - 1){
            $indices_current .= $j if $matrix[$i][$j] == 0;  
            $indices_current .= "x" if $matrix[$i][$j] == 1;  
        }
        $tree-&gt;insert($indices_current);  
        for my $n (2 .. @{$matrix[0]}){
            for my $s ($tree-&gt;longest_common_substrings(1, $n)){
                if(!$indices{$s}){
                    $indices{$s} = [$i - 1, $i];  
                }
                else{ 
                    push @{$indices{$s}}, $i - 1, $i; 
                } 
            }
        }
        $tree-&gt;remove($indices_previous) if $indices_previous; 
        $indices_previous = $indices_current; 
    } 
    for my $s (keys %indices){
        my $max_area = -1; 
        my @indices = sort {$a &lt;=&gt; $b} do {my %seen; grep { !$seen{$_}++} @{$indices{$s}}};  
        unless($indices[0] &lt; 0){
            my $area = 0;
            my $count = 0; 
            for(my $i = 0; $i &lt;=  @indices - 1; $i++){ 
                $count++; 
                $area += length($s) if $i == 0;
                $area += length($s) if $i &gt; 0 &amp;&amp; $indices[$i] == $indices[$i - 1] + 1;   
                do{$area = 0; $count = 0} if $i &gt; 0 &amp;&amp; $indices[$i] != $indices[$i - 1] + 1;  
            }
            if($area &gt;= $max_area){
                $max_area = $area; 
                push @indices_maximum, [$s, $count];      
            } 
        } 
    } 
    for (0 .. $indices_maximum[0][1] - 1){
        push @sub_matrix, [(0) x length($indices_maximum[0][0])];  
    }  
    return @sub_matrix; 
}

MAIN:{
    my @sub_matrix = maximum_sub_matrix(
        [1, 0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0]
    );
    for my $row (@sub_matrix){
        print "[" . join(" ", @{$row}) . "]\n"; 
    }  
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
[0 0]
[0 0]
[0 0]
$ perl perl/ch-1.pl
[0 0 0]
[0 0 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;At first this seemed like a very similar Dynamic Programming style approach like the one
used in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117"&gt;Challenge 117&lt;/a&gt; would
be suitable. The idea being to start with the top row and the track in a hash all the
different possible submatrices that arise as we work downwards in the matrix. While this
is definitely a DP problem tracking the possible submatrices in this way is completely
inefficient! Unlike the problem of Challenge 117 in which the possible paths descending
the triangle are all completely known and predictable, here a lot of extra work needs to 
be done. &lt;/p&gt;

&lt;p&gt;In order to determine overlap between the zeroes in successive rows of the matrix the rows
are converted to strings and then the common substrings are computed using Tree::Suffix.
Because we are looking for any possible overlap we need to repeat the common substring
search for different lengths. The process to do this is a bit cumbersome, but it does
work! So, at least the solution I had in mind ended up working but it's all so convoluted.
Clearly more elegant solutions exist. One positive feature here though is that multiple
maximum sized submatrices can be identified. In the example output you can see that two
solutions exist, both with an "area" of six. Here which one gets shown is just based on
the random ordering of the keys in &lt;code&gt;%indices&lt;/code&gt;, but determining all solutions could be
easily done. Since this was not part of the original challenge it was left undone.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of intervals. Write a script to determine conflicts between the 
intervals.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Date::Parse;
use Heap::MinMax;

sub number_platforms{
    my($arrivals, $departures) = @_;
    my $platforms = 0; 
    my $heap = new Heap::MinMax();
    $heap-&gt;insert(str2time(shift @{$departures}));  
    for my $i (0 .. @{$departures}){
        $platforms++ if str2time($arrivals-&gt;[$i]) &lt; $heap-&gt;min();  
        $heap-&gt;pop_min() if str2time($arrivals-&gt;[$i]) &gt;= $heap-&gt;min();  
        $heap-&gt;insert(str2time($departures-&gt;[$i]));  
    }    
    return $platforms; 
}

MAIN:{
    print number_platforms(
        ["11:20", "14:30"],
        ["11:50", "15:00"]
    ) . "\n"; 
    print number_platforms(
        ["10:20", "11:00", "11:10", "12:20", "16:20", "19:00"],
        ["10:30", "13:20", "12:40", "12:50", "20:20", "21:20"],
    ) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First, all times have to be converted to something numeric and so Date::Parse's &lt;code&gt;str2time&lt;/code&gt;
is used to convert the times to Unix epoch timestamps.&lt;/p&gt;

&lt;p&gt;Heaps are not usually something I commonly use, even for these challenge problems they
never seem to be convenient. Here though is a pretty standard use of a Heap! Here the use
of a Heap allows for easy access to the next departure time. If a train arrives before
the next departure, increase the number of platforms. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-128/"&gt;Challenge 128&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Date::Parse"&gt;Date::Parse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Heap::MinMax"&gt;Heap::MinMax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Tree::Suffix"&gt;Tree::Suffix&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc128</id>
    <published>2021-09-05T23:59:00-04:00</published>
    <updated>2021-09-05T23:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6252804818034577771</id>
    <published>2021-09-04T22:43:00.000+02:00</published>
    <updated>2021-09-04T22:43:06.159+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclvii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049004&lt;/strong&gt; on 2021-09-03&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049001 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9723' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9723&lt;/strong&gt; on 2021-09-01&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9722 was 1 month, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2021-09-03&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.51 was 1 month, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/IO-1.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl core IO modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.48&lt;/strong&gt; on 2021-09-01&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 7 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.23&lt;/strong&gt; on 2021-08-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.22 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.02&lt;/strong&gt; on 2021-08-28&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.01 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VANSTYN/RapidApp-1.3402' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;RapidApp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Turnkey ajaxy webapps &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3402&lt;/strong&gt; on 2021-08-31&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 1.3401 was 7 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9011' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9011&lt;/strong&gt; on 2021-08-31&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9010 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NWCLARK/Storable-3.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Storable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - persistence for Perl data structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.25&lt;/strong&gt; on 2021-08-30&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 3.15 was 2 years, 4 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.7.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.7.0&lt;/strong&gt; on 2021-09-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.5.0 was 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSCHOUT/Text-Template-1.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Template&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Expand template text with embedded Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.60&lt;/strong&gt; on 2021-09-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 1.59 was 1 year, 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2021-08-29&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.67 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6252804818034577771/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclvii-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6252804818034577771"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6252804818034577771"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclvii-12-great-cpan-modules-released.html" title="(ccclvii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2461768022258320529</id>
    <published>2021-09-04T22:06:00.001+02:00</published>
    <updated>2021-09-04T22:06:49.228+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiii) metacpan weekly report </title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 39&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/09/04 20:05:43 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::findeps" target="_blank"&gt;App::findeps&lt;/a&gt; - the Module to find dependencies for files you've selected&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::xFTP" target="_blank"&gt;Net::xFTP&lt;/a&gt; - Common wrapper functions for use with either Net::FTP, Net::SFTP,  Net::FSP, Net::FTPSSL, Net::OpenSSH, Net:SSH2, and Net::SFTP::Foreign.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SDL2::FFI" target="_blank"&gt;SDL2::FFI&lt;/a&gt; - FFI Wrapper for SDL (Simple DirectMedia Layer) Development Library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::WWW::Mechanize::Mojo" target="_blank"&gt;Test::WWW::Mechanize::Mojo&lt;/a&gt; - Test::WWW::Mechanize for Mojo / Mojolicious&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased" target="_blank"&gt;aliased&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=107)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Plugin::Session::Store::Redis::Fast" target="_blank"&gt;Catalyst::Plugin::Session::Store::Redis::Fast&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Contextual::Return" target="_blank"&gt;Contextual::Return&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CryptX" target="_blank"&gt;CryptX&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer::Plugin::WebSocket" target="_blank"&gt;Dancer::Plugin::WebSocket&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=201)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::ISO8601" target="_blank"&gt;DateTime::Format::ISO8601&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::MySQL" target="_blank"&gt;DateTime::Format::MySQL&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Pg" target="_blank"&gt;DateTime::Format::Pg&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Cover::Report::SonarGeneric" target="_blank"&gt;Devel::Cover::Report::SonarGeneric&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Milla" target="_blank"&gt;Dist::Milla&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=176)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO" target="_blank"&gt;IO&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=64)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kelp" target="_blank"&gt;Kelp&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=84)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::MongoDB" target="_blank"&gt;Minion::Backend::MongoDB&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::JWT" target="_blank"&gt;Mojo::JWT&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::RequestBase" target="_blank"&gt;Mojolicious::Plugin::RequestBase&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::SessionStore" target="_blank"&gt;Mojolicious::Plugin::SessionStore&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::API::Stripe" target="_blank"&gt;Net::API::Stripe&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::DNS" target="_blank"&gt;Net::DNS&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Drive::Simple" target="_blank"&gt;Net::Google::Drive::Simple&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Kafka" target="_blank"&gt;Net::Kafka&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OAuth::Cmdline" target="_blank"&gt;OAuth::Cmdline&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pinto" target="_blank"&gt;Pinto&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Harness" target="_blank"&gt;Test2::Harness&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::WWW::Mechanize" target="_blank"&gt;Test::WWW::Mechanize&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::NewsAPI" target="_blank"&gt;Web::NewsAPI&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2461768022258320529/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/cdlxxxiii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2461768022258320529"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2461768022258320529"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/cdlxxxiii-metacpan-weekly-report.html" title="(cdlxxxiii) metacpan weekly report "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3730634665475270355</id>
    <published>2021-09-04T21:59:00.000+02:00</published>
    <updated>2021-09-04T22:04:27.064+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(div) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-09-04 19:57:27 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69040993" target="_blank"&gt;What does 0 plus a pointer mean?&lt;/a&gt; - [&lt;b&gt;18&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69009440" target="_blank"&gt;bash + how to capture the version from rpm&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/7]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68973667" target="_blank"&gt;How to set cursor color in Gtk3 selectable label?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69020991" target="_blank"&gt;Mojolicious API is disregarding the characters after " . " in the URL argument&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68989431" target="_blank"&gt;How does Perl regexp anchor $ actually handle a trailing newline?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68989887" target="_blank"&gt;Perl: Converting strings to Unicode&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69038102" target="_blank"&gt;Math::BigInt error: Can't locate object method "bmuladd"&lt;/a&gt;&amp;nbsp;- [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69005939" target="_blank"&gt;Unable to follow opendir syntax in Perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/68980080" target="_blank"&gt;JSONizing nested Perl objects&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69022977" target="_blank"&gt;Trying to install a perl module with cpanm, got a fail&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3730634665475270355/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/div-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3730634665475270355"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3730634665475270355"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/div-stackoverflow-perl-report.html" title="(div) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Raku Foundation DBA and Trademark Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/raku-foundation-and-tm-update"/>
  <id>tag:news.perlfoundation.org,2021-09-02:/post/raku-foundation-and-tm-update</id>
  <published>2021-09-02T13:37:02</published>
  <updated>2021-09-02T13:37:02</updated>
  <summary>
  <![CDATA[
      Since 2012, Yet Another Society has also been officially known by its less confusing alias: The Perl Foundation.  Now, it has a new alias: The Raku Foundation.  Like the TPF alias, this new name is a dba – it doesn't change any of the realities of how YAS (aka TPF, aka TRF) is organized, governed, or structured.  Pretty much the only legal effect is to allow YAS to cash checks made out to "The Raku Foundation" in the same way it can cash ones made out to "The Perl Foundation".
   ]]>
  </summary>
  <author>
    <name>Daniel Sockwell</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>A new alias</h2>

<p>Since 2012, Yet Another Society has also been officially known by a less confusing name: The Perl Foundation.  Now it has another alias: The Raku Foundation.  Like the TPF alias, this new name is a <a href="https://en.wikipedia.org/wiki/Trade_name">dba</a> – it doesn't change any of the realities of how YAS (aka TPF, aka TRF) is organized, governed, or structured.  Pretty much the only <em>legal</em> effect is to allow YAS to cash checks made out to "the Raku Foundation" in the same way it can cash ones made out to "The Perl Foundation".</p>

<p>In the short term, we're hopeful that this will make the sponsorship committee's job easier – the rich history connecting Perl and Raku is important to those of us in the communities, but we shouldn't need to explain that history to someone who just wants to fund Perl or Raku grants.  In the slightly longer term, I'm hopeful that having the two aliases will make it easier for the Perl and Raku communities to define ourselves as the separate (though philosophically aligned) languages that we are.  Perl and Raku share deep ties,but address different use cases, and having the "Raku Foundation" alias should help lay the groundwork for separating those use cases as we present ourself to a wider audience.</p>

<h2>Raku trademark rights secured</h2>

<p>The YAS legal committee hasn't just been involved in securing the dba; we've also been working to register "Raku" as a trademark.  Well, I say "we", but the vast majority of the credit should go to Nige Hamilton, who shepherded the effort through to completion.  I'm therefore happy to announce that we have now secured the Raku trademark in the United States, the United Kingdom, and the European Union.</p>

<p>Trademark rights are mostly something we hope never to need to use.  They would help us deal with situations such as someone claiming to represent Raku despite flouting our <a href="https://github.com/Raku/Raku-Steering-Council/blob/main/papers/code_of_conduct.md">Code of Conduct</a> or someone trying to sell a counterfeit "Raku".  I very much doubt anything like that will happen, but trademark rights are like backups – it's far better to have them and not need them than to need them and not have them.</p>

<h2>Laying foundations</h2>

<p>It's an exciting time for Raku – our first independent conference just concluded, the new dispatch system (and all the performance improvements that entails) just around the corner, and the Raku AST system and all the superpowers it will unlock (real macros!) not too much further behind.  In the midst of these technical and community milestones, it would be easy to neglect some of the more administrative/legal tasks.  But those tasks are vital, and neglecting them would be a mistake.  So a sincere thanks to Nige and all of the TPF volunteers for all the work they do to support the Perl and Raku communities.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Aug 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/09/01/list-of-new-cpan-distributions-aug-2021/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AI-Perceptron-Simple"&gt;AI-Perceptron-Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ELLEDNERA"&gt;ELLEDNERA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;A Newbie Friendly Module to Create, Train, Validate and Test Perceptrons / Neurons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-RtMidi"&gt;Alien-RtMidi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBARRETT"&gt;JBARRETT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Install RtMidi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-libvterm"&gt;Alien-libvterm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Alien wrapping for libvterm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-BPOMUtils"&gt;App-BPOMUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;List food types in BPOM processed food division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-DataDirUtils"&gt;App-DataDirUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;CLI utilities related to datadirs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-FileModifyUtils"&gt;App-FileModifyUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Utilities related to modifying files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-MineralUtils"&gt;App-MineralUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;Utilities related to minerals (and mineral supplements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-RouterColorizer"&gt;App-RouterColorizer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMASLAK"&gt;JMASLAK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.212300&lt;/td&gt;
&lt;td&gt;1.212302&lt;/td&gt;
&lt;td&gt;Colorize router CLI output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Tac_n"&gt;App-Tac_n&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.2&lt;/td&gt;
&lt;td&gt;tac with line numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-TaggedDirUtils"&gt;App-TaggedDirUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;CLI utilities related to tagged directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-TypecastTemplates"&gt;App-TypecastTemplates&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAMAWE"&gt;MAMAWE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.2.0&lt;/td&gt;
&lt;td&gt;v0.3.0&lt;/td&gt;
&lt;td&gt;Format records with different templates.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-achart"&gt;App-achart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A program to print ASCII charts in the terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-grep-email"&gt;App-grep-email&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Print lines having email address(es) (optionally of certain criteria) in them&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bio-Epithelium"&gt;Bio-Epithelium&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;v0.1.4&lt;/td&gt;
&lt;td&gt;Perl extension for Biology &amp;#8211; CS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CPANPLUS-Dist-Debora"&gt;CPANPLUS-Dist-Debora&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VOEGELAS"&gt;VOEGELAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;Create Debian or RPM packages from Perl modules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CeeJay"&gt;CeeJay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CEEJAY"&gt;CEEJAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.3&lt;/td&gt;
&lt;td&gt;0.0.4&lt;/td&gt;
&lt;td&gt;All about me. Cee Jay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Config-XrmDatabase"&gt;Config-XrmDatabase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Pure Perl X Resource Manager Database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Crypt-SPAKE2Plus"&gt;Crypt-SPAKE2Plus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABBYPAN"&gt;ABBYPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;SPAKE2+ protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBI-Migration"&gt;DBI-Migration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;An easy way to start using migrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBI-Schema-Migration"&gt;DBI-Schema-Migration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;An easy way to start using migrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBIx-Schema-Migration"&gt;DBIx-Schema-Migration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.01&lt;/td&gt;
&lt;td&gt;An easy way to start using migrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DNS-NIOS"&gt;DNS-NIOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SSMN"&gt;SSMN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Perl binding for NIOS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Sah-Coerce-perl-To_array-From_str-csv_row"&gt;Data-Sah-Coerce-perl-To_array-From_str-csv_row&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Coerce a single CSV row to array of scalars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-ArchiveTar"&gt;Dist-Zilla-Plugin-ArchiveTar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Create dist archives using  Archive::Tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-Docker"&gt;Dist-Zilla-Plugin-Docker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MSCHOUT"&gt;MSCHOUT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Build docker image and upload to a docker repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-Libarchive"&gt;Dist-Zilla-Plugin-Libarchive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Create dist archives using Archive::Libarchive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-Module-Features"&gt;Dist-Zilla-Plugin-Module-Features&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Plugin to use when building Module::Features::* distribution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/End-Eval"&gt;End-Eval&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Take code from import arguments, then eval it in END block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/End-Eval-Env"&gt;End-Eval-Env&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Take code from environment variable(s), then eval it in END block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/End-Eval-FirstArg"&gt;End-Eval-FirstArg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Take code from first command-line argument, then eval it in END block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Feature-Compat-Defer"&gt;Feature-Compat-Defer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;make defer syntax available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/File-TreeCreate"&gt;File-TreeCreate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;recursively create a directory tree.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Future-IO-Impl-Tickit"&gt;Future-IO-Impl-Tickit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;implement Future::IO with Tickit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GFX-Enhancer"&gt;GFX-Enhancer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.14&lt;/td&gt;
&lt;td&gt;v0.1.17&lt;/td&gt;
&lt;td&gt;Perl extension for enhancing scanned in images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Grizzly"&gt;Grizzly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NOBUNAGA"&gt;NOBUNAGA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Grizzly &amp;#8211; A command-line interface for looking up stock quote.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTTP-Tiny-Plugin-NewestFirefox"&gt;HTTP-Tiny-Plugin-NewestFirefox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Set User-Agent to newest Firefox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Healthchecks"&gt;Healthchecks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LDIDRY"&gt;LDIDRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;interact with Healthchecks API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Lingua-Poetry-Haiku-Finder"&gt;Lingua-Poetry-Haiku-Finder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;find poetry in the least poetic places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Markdown-Compiler"&gt;Markdown-Compiler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SYMKAT"&gt;SYMKAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Perl Markdown Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Markdown-Parser"&gt;Markdown-Parser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Markdown Parser Only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mock-Data"&gt;Mock-Data&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NERDVANA"&gt;NERDVANA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.00_001&lt;/td&gt;
&lt;td&gt;0.00_001&lt;/td&gt;
&lt;td&gt;Extensible toolkit for generating mock data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Module-Abstract"&gt;Module-Abstract&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Extract the abstract of a locally installed Perl module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-DOM-Role-Restrict"&gt;Mojo-DOM-Role-Restrict&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;The great new Mojo::DOM::Role::Restrict!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojolicious-Plugin-LinkedContent-v9"&gt;Mojolicious-Plugin-LinkedContent-v9&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EBRUNI"&gt;EBRUNI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;manage linked css and js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Music-Beets-Info"&gt;Music-Beets-Info&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Import data from Beets database into a perl data structure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-Dimona"&gt;Net-Dimona&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GARU"&gt;GARU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;acesso r&amp;Atilde;&amp;iexcl;pido &amp;Atilde;&amp;nbsp; API de print-on-demand da Dimona.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-SNMP-Mixin-ArubaCX-Dot1qFdb"&gt;Net-SNMP-Mixin-ArubaCX-Dot1qFdb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GAISSMAI"&gt;GAISSMAI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;mixin class for ArubaCX switch forwarding databases&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-SNMP-Mixin-ArubaCX-VlanStatic"&gt;Net-SNMP-Mixin-ArubaCX-VlanStatic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GAISSMAI"&gt;GAISSMAI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;mixin class for ArubaCX static vlan info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Number-Pad"&gt;Number-Pad&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Pad numbers so the decimal point (or &amp;quot;E&amp;quot; if in exponential notation) align&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Object-Pad-ClassAttr-Struct"&gt;Object-Pad-ClassAttr-Struct&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;declare an Object::Pad class to be struct-like&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Object-Pad-SlotAttr-Isa"&gt;Object-Pad-SlotAttr-Isa&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;apply class type constraints to Object::Pad slots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Object-Pad-SlotAttr-LazyInit"&gt;Object-Pad-SlotAttr-LazyInit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;lazily initialise Object::Pad slots at first read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pod-Reader"&gt;Pod-Reader&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MONSIEURP"&gt;MONSIEURP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;1.020&lt;/td&gt;
&lt;td&gt;curses TUI to read Perl POD from.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pod-Weaver-Plugin-Module-Features"&gt;Pod-Weaver-Plugin-Module-Features&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Plugin to use when building distribution that has feature definer or featurer declarer modules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RT-Extension-ShareSearchLink"&gt;RT-Extension-ShareSearchLink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJWOOD"&gt;AJWOOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;RT-Extension-ShareSearchLink Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Redis-OpenTracing"&gt;Redis-OpenTracing&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VANHOESEL"&gt;VANHOESEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.4&lt;/td&gt;
&lt;td&gt;Wrap Redis inside OpenTracing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Regexp-Pattern-Email"&gt;Regexp-Pattern-Email&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Regexp patterns related to email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Setup-File-Line"&gt;Setup-File-Line&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Insert/delete a line in a file (with undo support)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Syntax-Operator-Divides"&gt;Syntax-Operator-Divides&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;an infix operator for division test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Syntax-Operator-Equ"&gt;Syntax-Operator-Equ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;equality operators that distinguish undef&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Template-Plugin-AutoDate"&gt;Template-Plugin-AutoDate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NERDVANA"&gt;NERDVANA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.90&lt;/td&gt;
&lt;td&gt;Enhance Template Toolkit with easy access to DateTime and DateTime::Format::Flexible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tickit-Widget-Entry-Plugin-Completion"&gt;Tickit-Widget-Entry-Plugin-Completion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;add word-completion logic to a Tickit::Widget::Entry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tie-Array-IntSpan"&gt;Tie-Array-IntSpan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Tied-array interface for Array::IntSpan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Unisyn-Parse"&gt;Unisyn-Parse&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210720&lt;/td&gt;
&lt;td&gt;20210830&lt;/td&gt;
&lt;td&gt;Parse a Unisyn expression.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/oCLI"&gt;oCLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SYMKAT"&gt;SYMKAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Opinionated Command Line Interface&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;65&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;32&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SYMKAT"&gt;SYMKAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GAISSMAI"&gt;GAISSMAI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NERDVANA"&gt;NERDVANA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MONSIEURP"&gt;MONSIEURP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CEEJAY"&gt;CEEJAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ELLEDNERA"&gt;ELLEDNERA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LDIDRY"&gt;LDIDRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VANHOESEL"&gt;VANHOESEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EBRUNI"&gt;EBRUNI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBARRETT"&gt;JBARRETT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMASLAK"&gt;JMASLAK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NOBUNAGA"&gt;NOBUNAGA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MSCHOUT"&gt;MSCHOUT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABBYPAN"&gt;ABBYPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJWOOD"&gt;AJWOOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VOEGELAS"&gt;VOEGELAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAMAWE"&gt;MAMAWE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SSMN"&gt;SSMN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GARU"&gt;GARU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-Perceptron-Simple ELLEDNERA 1.00 1.02 A Newbie Friendly Module to Create, Train, Validate and Test Perceptrons / Neurons Alien-RtMidi JBARRETT 0.01 0.02 Install RtMidi Alien-libvterm PEVANS 0.01 0.01 Alien wrapping for libvterm App-BPOMUtils PERLANCAR 0.001 0.002 List food types in BPOM processed food division App-DataDirUtils PERLANCAR 0.001 0.003 CLI utilities related … <a href="https://perlancar.wordpress.com/2021/09/01/list-of-new-cpan-distributions-aug-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Aug 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1951</id>
    <published>2021-09-01T04:27:00Z</published>
    <updated>2021-09-01T04:27:00Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): July 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_tony_cook_july_2021"/>
  <id>tag:news.perlfoundation.org,2021-08-31:/post/maintaining_perl_5_tony_cook_july_2021</id>
  <published>2021-08-31T20:13:32</published>
  <updated>2021-08-31T20:13:32</updated>
  <summary>
  <![CDATA[
     Tony reports his July progress on maintaining Perl 5 core: Approximately 23 tickets were reviewed, and 1 patches were applied 19.37 #1420 working on a fix #1420 accessor for the split up last_in_*, start replacing accesses #1420 testing, fix some bugs, need more tests #1420 more tests, debugging ${^LAST_FH} problem #1420 more debugging, fixes, more tests #1420 code review, fix one problem, try to refactor a bit, debugging #1420 debugging 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Tony reports his July progress on maintaining Perl 5 core:
```
Approximately 23 tickets were reviewed, and 1 patches were
applied</p>

<p>[Hours] [Activity]
19.37 #1420 working on a fix</p>

<h1>1420 accessor for the split up last_in_*, start replacing</h1>

<p>accesses</p>

<h1>1420 testing, fix some bugs, need more tests</h1>

<h1>1420 more tests, debugging ${^LAST_FH} problem</h1>

<h1>1420 more debugging, fixes, more tests</h1>

<h1>1420 code review, fix one problem, try to refactor a bit,</h1>

<p>debugging</p>

<h1>1420 debugging intermittent failures</h1>

<h1>1420 try to reproduce crashes</h1>

<h1>1420 reproduce in test, try to reproduce independently,</h1>

<p>stopped failing</p>

<h1>1420 add debugging code and see the problem, attempts to</h1>

<p>fix and testing</p>

<h1>1420 debugging</h1>

<h1>1420 more debugging, track down a related bug</h1>

<p>0.53 #18643 re-test and apply to blead, update perldelta
2.27 #18734 review and comment</p>

<h1>18734 zoom testing session (debugger had problems)</h1>

<h1>18734 research, follow-up comment</h1>

<p>0.58 #18746 review, research and comment
0.32 #18820 review, briefly comment
6.66 #18837 configuration, work on the pp_stat code</p>

<h1>18837 more pp_stat</h1>

<h1>18837 recheck, testing</h1>

<h1>18837 fix some config issues, testing, push for CI</h1>

<h1>18837 review CI results and push a fix</h1>

<h1>18837 review CI results and open pr #19005</h1>

<p>1.10 #18882 review, testing and comment
0.43 #18948 review
4.55 #18953 setup test environment</p>

<h1>18953 fail to reproduce, try setting up a different test</h1>

<p>environment</p>

<h1>18953 more try to reproduce</h1>

<h1>18953 more fail to reproduce, review code and query</h1>

<p>0.52 #18955 review, research and comment
0.75 #18968 edits, testing sample code, update PR
1.23 #18973 review code, testing on FreeBSD
0.67 #18980 comment, some research
1.97 #18984 review suggested change, review code, test an
alternative change and make #18984
0.22 #18995 briefly comment
0.28 #19005 fix some review issues
1.32 comment security list
2.05 feature.pm feature test API
0.27 feature.pm feature test API, make PR
0.90 list catch up
list catch up
1.52 list catchup, comment on security discussion
2.52 more feature.pm, testing, documentation, look at
optimizing to use bundles where possible</p>

<h1>0.50 research interpreter cloning</h1>

<p>50.53 hours total
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): July 2021 Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_5_dave_mitchell_july_2021"/>
  <id>tag:news.perlfoundation.org,2021-08-31:/post/maintaining_perl_5_dave_mitchell_july_2021</id>
  <published>2021-08-31T20:08:26</published>
  <updated>2021-08-31T20:08:26</updated>
  <summary>
  <![CDATA[
     Dave reports the following for July: In July I managed to mostly catch up on the last few months of unread p5p emails, github notifications etc, and have been keeping up to date with them on a daily basis now. SUMMARY: 16:04 process p5p mailbox 16:04 TOTAL There are 12.6 hours left on the existing grant, 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Dave reports the following for July:</p>

<p>```
In July I managed to mostly catch up on the last few months of unread p5p
emails, github notifications etc, and have been (mostly) keeping up to
date with them on a daily basis now.</p>

<p>SUMMARY:</p>

<h2>16:04 process p5p mailbox</h2>

<p>16:04 TOTAL (HH::MM)</p>

<p>There are 12.6 hours left on the existing grant, (but I've applied
for a new grant).
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#527 - New school-year?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/527.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The number of posts has been really low in the last couple of weeks. I really hope that with the new school-year in the northern hemisphere, we'll see an uptick in Perl-related content.</p>
<p>Other:</p>
<p>I just saw a Tweet explaining why the person does not wear a mask. He writes because he is vaccinated he isn't likely to be infected and <b>he accepts the risks</b>. Well, I really try to avoid arguing with strangers on the Internet so I did not write to him, but basically he said that <b>he accepts the risk of endangering others</b>.</p>
<p>In reality he spread two types of viruses. Potentially he spreads the Covid19 virus and for sure he spreads the idea that not caring for others is acceptable. For one, people who are unsure about the masks, seeing him without a mask will more likely stop wearing masks too.</p>
<p>Get vaccinated if you can and wear a mask when among people!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/527.html</id>
    <published>2021-08-30T10:00:00Z</published>
    <updated>2021-08-30T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Conflicting Lists and Intervals</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/29#pwc127" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two sets with unique numbers. Write a script to figure out if they are 
disjoint.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub disjoint{
    my($list1, $list2) = @_;
    my @a = map { my $n = $_; grep  $n == $_ , @{$list2} }  @{$list1};
    return boolean(@a == 0);#boolean() used for better stringification
}

MAIN:{
    my(@S1, @S2);
    @S1 = (1, 2, 5, 3, 4);
    @S2 = (4, 6, 7, 8, 9);
    print disjoint(\@S1, \@S2) . "\n";
    @S1 = (1, 3, 5, 7, 9);
    @S2 = (0, 2, 4, 6, 8);
    print disjoint(\@S1, \@S2) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I cannot think of a way of determining conflicts between these two lists which is all that
more efficient than comparing them in this way. Sorting helps a little in some cases but 
if the overlapping element(s) are at the end of the sorted list you need to traverse the 
entire list anyway. Sorting would help the average case and since we need only find one 
overlapping element and then stop looking this would have some noticeable effect in the 
case of very large lists. But then I'd have to write a for-loop in order to break out of
the loop early and instead I wanted to experiment with this &lt;code&gt;grep&lt;/code&gt; inside a &lt;code&gt;map&lt;/code&gt;
construct! This worked without too much hassle, the only consideration really being to 
assign map's list value alias &lt;code&gt;$_&lt;/code&gt; to a variable so as to not conflict with grep's &lt;code&gt;$_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The use of &lt;code&gt;boolean()&lt;/code&gt; is just to make sure that a 1 or 0 is printed as the final result.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of intervals. Write a script to determine conflicts between the 
intervals.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub conflicts{
    my @intervals = @_;
    my @conflicts;
    @intervals = sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] } @intervals;
    {
        my $interval = pop @intervals;
        my($i, $j) = @{$interval};
        for $interval (@intervals){
            my($m, $n) = @{$interval};
            do { unshift @conflicts, [$i, $j]; last } if $i &gt;= $m &amp;&amp; $i &lt;= $n;
        }
        redo if @intervals;
    }
    return @conflicts;
}

MAIN:{
    my(@Intervals);
    @Intervals = ([1, 4], [3, 5], [6, 8], [12, 13], [3, 20]);
    map { print "[" . join(", ", @{$_}) . "] " } conflicts(@Intervals);
    print "\n";
    @Intervals = ([3, 4], [5, 7], [6, 9], [10, 12], [13, 15]);
    map { print "[" . join(", ", @{$_}) . "] " } conflicts(@Intervals);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
[3, 5] [3, 20]
[6, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The examples given in the problem statement are with the &lt;code&gt;[minimum, maximum]&lt;/code&gt; intervals 
sorted by the maximum value. This makes the problem a bit easier since then we need only
check to see, when working down the sorted list, if the minimum is in one of the other
intervals.&lt;/p&gt;

&lt;p&gt;Since it isn't totally clear if this is something that should be assumed for all inputs
I added a sort in &lt;code&gt;conflicts()&lt;/code&gt; to ensure this is the case.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-127/"&gt;Challenge 127&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25818.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25919.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/DisjointSets.html"&gt;Disjoint Sets&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc127</id>
    <published>2021-08-29T17:18:00-04:00</published>
    <updated>2021-08-29T17:18:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#526 - Politics in Programming?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/526.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I came across a blog post by Curtis titled <a href="https://ovid.github.io/blog/politics-in-programming.html">Politics in Programming</a>. As is always the case, it touched on sensitive topics. You may or may not agree with his point of view but it is worth a read, IMHO.</p>
<p>Let me confess, ever since Cor was renamed to Corinna, I always double check whether there is a double "r" or a double "n" in the name. I get it wrong all the time. Joking apart, I am very happy that Corinna is being discussed on so many different public platforms, a BIG thanks to Curtis and his team.</p>
<p>There was another topic discussed on Facebook, "Data structures in Perl". It brought back some good old memories of when I was first introduced to Perl. I came from a C background, so you would assume the transition would have been smooth. That wasn't the case for me. I had a hard time getting my head around "references" in Perl. Once I passed that hurdle, the next disaster was waiting for me, i.e. "regex". I had no clue about it before. It took me a while to get hold of it. Even after 22 years of working with Perl, I still find regex magic that I have never seen before, thanks to Abigail contributions to <a href="https://github.com/manwar/perlweeklychallenge-club">the weekly challenge</a>. The next big thing I dealt with after regex was "network programming". The best book to understand the subject is <a href="https://www.oreilly.com/library/view/network-programming-with/0201615711/">Network Programming with Perl</a> by Lincoln D. Stein, imho.</p>
<p>Did you notice, I didn't mention OO in Perl yet?</p>
<p>It is only because I got the opportunity to actually use OO programming very late in my career. The first book that I read on the subject was <a href="https://www.manning.com/books/object-oriented-perl">Object Oriented Perl</a> by Damian Conway. It was the first book by Damian that I read and I completely fell in love with it. Of course, how can I miss the next one by Damian, <a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/">Perl Best Practices</a>. I am happy to see Damian giving a thumbs up to the Corinna project headed by Curtis in his recent blog post, <a href="http://blogs.perl.org/users/damian_conway/2021/08/a-dream-realized.html">A dream realized</a>. About the future of OO in core Perl, I am not too worried as it is in safe hands now.</p>
<p>A fellow member of Team PWC, Adam Russell, started a Discord server for the purposes of discussing more academic Computer Science type topics, as they relate to Perl. If you are keen to join then please follow the <a href="https://discord.gg/Ng9nrdDg">invitation</a>.</p>
<p>School holidays are coming to an end soon, at least in the UK, so enjoy it while it lasts. Don't forget to keep a safe distance and use a mask in public places. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/526.html</id>
    <published>2021-08-23T10:00:00Z</published>
    <updated>2021-08-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Count Numbers / MineSweeper game: The Weekly Challenge 126</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/22#pwc126" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to print count of numbers from 1 to 
$N that don’t contain digit 1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub has_1{
    my($x) = @_;
    return 1 if $x =~ tr/1//d &gt; 0;
    return 0;   
}

sub count_with_1{
    my($n) = @_;
    my $x = 1;  
    my $count = 0; 
    {
        $count += has_1($x); 
        $x += 1;
        redo if $x &lt;= $n; 
    }
    return $count; 
}

sub count_without_1{
    my($n) = @_;
    return $n - count_with_1($n);  
}

MAIN:{
    my $N;
    $N = 15;
    print count_without_1($N) . "\n"; 
    $N = 25;
    print count_without_1($N) . "\n"; 
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
8
13
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Given the flexibility and richness of Perl there were many choices of how to determine the
presence of a '1'. I decided to use &lt;code&gt;tr&lt;/code&gt; which will helpfully return the number of changes
made. In this case, what is returned is the number of 1's deleted. If this number is 
greater than zero then we know a &lt;code&gt;1&lt;/code&gt; was found.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a rectangle with points marked with either x or *. Please consider the x as
a land mine. Write a script to print a rectangle with numbers and x as in the Minesweeper 
game.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub initialize_grid{
    my($m, $n) = @_;
    my @grid; 
    for my $i (0 .. $m - 1){
        for my $j (0 .. $n - 1){
            $grid[$i][$j] = "*";   
            $grid[$i][$j] = "x" if rand() &lt;= (1 / 3);   
        }  
    }  
    return @grid; 
}

sub make_grid{
    my($m, $n) = @_;
    my @initial_grid = initialize_grid($m, $n);  
    my @grid = map {[@$_]} @initial_grid; 
    for my $i (0 .. $m - 1){ 
        for my $j (0 .. $n - 1){
            unless($grid[$i][$j] eq "x"){
                my $mine_count = 0;
                $mine_count++ if $i &gt;= 1 &amp;&amp; $j &gt;= 1 &amp;&amp; $grid[$i - 1][$j - 1] eq "x"; 
                $mine_count++ if $i &gt;= 1 &amp;&amp; $grid[$i - 1][$j] eq "x"; 
                $mine_count++ if $i &gt;=1 &amp;&amp; $j &lt; $n - 1 &amp;&amp; $grid[$i - 1][$j + 1] eq "x"; 
                $mine_count++ if $j &gt;= 1 &amp;&amp; $grid[$i][$j - 1] eq "x"; 
                $mine_count++ if $j &lt; $n - 1 &amp;&amp; $grid[$i][$j + 1] eq "x"; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $j &gt;= 1 &amp;&amp; $grid[$i + 1][$j - 1] eq "x"; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $grid[$i + 1][$j] eq "x" ; 
                $mine_count++ if $i &lt; $m - 1 &amp;&amp; $j &lt; $n - 1 &amp;&amp; $grid[$i + 1][$j + 1] eq "x"; 
                $grid[$i][$j] = $mine_count; 
            } 
        }  
    } 
    return (\@initial_grid, \@grid); 
}  

sub print_grid{
    my @grid = @_; 
    for my $row (@grid){
        print "\t" . join(" ", @{$row}) . "\n"  
    } 
} 

MAIN:{
    my($m, $n) = @ARGV;
    my($initial_grid, $grid) = make_grid($m, $n);  
    print "Input:\n"; 
    print_grid(@{$initial_grid});      
    print "Output:\n"; 
    print_grid(@{$grid});      
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 5 10
Input:
        x x * * * * x * * x
        * * x * x x x * x *
        * * * * * * * * * *
        x * x x * * * * * x
        * * x * x * * * x *
Output:
        x x 2 2 2 4 x 3 2 x
        2 3 x 2 x x x 3 x 2
        1 3 3 4 3 3 2 2 2 2
        x 3 x x 2 1 0 1 2 x
        1 3 x 4 x 1 0 1 x 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The grid is randomly determined. Any cell has a 1/3 chance of being a mine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code for finding all adjacent cells, if they exist, is largely taken from my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/09/13#pwc077"&gt;solution to Challenge 077&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the tedious business of finding the adjacent cells is done counting up the "mines" 
and labelling the cells is straightforward!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126/"&gt;Challenge 126&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25295.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25444.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.minesweeperonline.net/history.php"&gt;History of Minesweeper&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc126</id>
    <published>2021-08-22T17:39:00-04:00</published>
    <updated>2021-08-22T17:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#525 - Vacation time?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/525.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>it seems it is vacation time for many of the authors as the number of posts is smaller than usual.</p>
<p>Enjoy your vacation and remember if you can get vaccinated and in any case, even if you are already vaccinated and even if your country/state/city does not require you to put on a mask, put it on when among people! It is just a small piece of fabric and it might save the life of some other person.</p>
<p>Sure, you might not be contagious, but by having a mask on you also encourage others to put on their mask.</p>
<p>Enjoy your time here!</p></div>
    </content>
    <id>https://perlweekly.com/archive/525.html</id>
    <published>2021-08-16T10:00:00Z</published>
    <updated>2021-08-16T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
</feed>
