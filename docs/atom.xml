<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-02-28T01:29:48Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Building a microservice in Perl, part 1: Designing the API</title>
    <link rel="alternate" href="https://dev.to/mjgardner/building-a-microservice-in-perl-part-1-designing-the-api-13ll" type="text/html"/>
    <content type="html">&lt;p&gt;A microservice can be thought of as the distributed computing implementation of the &lt;a href="http://catb.org/~esr/writings/taoup/html/ch01s06.html"&gt;Unix philosophy&lt;/a&gt; of &lt;strong&gt;“Do one thing and do it well.&lt;/strong&gt;” Usually modeled around specific business domains, a well-designed set of microservices each have their own lifecycle and communicate with each other and with consuming applications via technology-agnostic protocols like &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Because of this, a microservice may be implemented using whatever is the best programming language, database, or other environment to fit the job. &lt;strong&gt;&lt;a href="https://www.perl.org/"&gt;Perl&lt;/a&gt; can be an excellent choice for development&lt;/strong&gt; because of its strengths as a battle-tested, expressive multi-paradigm language with a &lt;a href="https://www.perl.org/cpan.html"&gt;broad open-source library of modules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this series of articles we’ll be using Perl, the &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; web framework, and the &lt;a href="https://swagger.io/specification/"&gt;OpenAPI&lt;/a&gt; (formerly &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt;) specification for describing web services to develop an example microservice that adheres to the &lt;a href="https://restfulapi.net/"&gt;REST&lt;/a&gt; standard for communication over HTTP. Some knowledge of Perl and web development is assumed, and we’ll be linking to supporting documentation and literature as we go.&lt;/p&gt;

&lt;p&gt;In a full microservices implementation, we would start by &lt;strong&gt;modeling the business domains being serviced and the explicit boundaries between them.&lt;/strong&gt; For the purposes of this series, we are limiting ourselves to developing only one microservice with a trivial purpose—a toy, if you will. This service will act as a simple dictionary allowing consumers to both query for the definitions of words as well as add new entries.&lt;/p&gt;

&lt;p&gt;We could envision a variety of consumers: a web front-end, a mobile app, maybe even SMS text messaging. The key is that &lt;strong&gt;the design of our application programming interface (API) should not dictate the implementation or lifecycle&lt;/strong&gt; of any of these consumers, and it should be easy for their developers to understand its specification.&lt;/p&gt;

&lt;p&gt;To that end, we turn to &lt;a href="https://spec.openapis.org/oas/v3.0.3.html"&gt;OpenAPI&lt;/a&gt;, which gives both our microservice and its consumers &lt;strong&gt;an unambiguous machine-readable description of the interface&lt;/strong&gt; without the need for additional code or documentation. And as we’ll see later, we’ll use that very same specification to drive our web framework to produce HTTP routes that accept valid input and produce valid output.&lt;/p&gt;

&lt;p&gt;A full OpenAPI document can be written in either JSON or YAML format, but it must ultimately be able to be represented in both formats, so there are some &lt;a href="https://spec.openapis.org/oas/v3.0.3.html#format"&gt;limitations described in the spec&lt;/a&gt;. Here’s the OpenAPI document for our dictionary microservice in YAML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;openapi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;3.0.3&lt;/span&gt;
&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dictionary&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The PhoenixTrap.com dictionary microservice&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;
  &lt;span class="na"&gt;license&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Artistic License &lt;/span&gt;&lt;span class="m"&gt;2.0&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://www.perlfoundation.org/artistic-license-20.html&lt;/span&gt;
&lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;/health&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check if this service is online&lt;/span&gt;
      &lt;span class="na"&gt;x-mojo-to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring#heartbeat&lt;/span&gt;
      &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;200&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;All systems operational&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
        &lt;span class="na"&gt;500&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Something is wrong&lt;/span&gt;
  &lt;span class="s"&gt;/word/{word}&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get the definition of a word&lt;/span&gt;
      &lt;span class="na"&gt;x-mojo-to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;word#define&lt;/span&gt;
      &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/parameters/word'&lt;/span&gt;
      &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;200&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Found word&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="s"&gt;application/json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
        &lt;span class="na"&gt;404&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Could not find word&lt;/span&gt;
    &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add or replace the definition of a word&lt;/span&gt;
      &lt;span class="na"&gt;x-mojo-to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;word#save&lt;/span&gt;
      &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/parameters/word'&lt;/span&gt;
      &lt;span class="na"&gt;requestBody&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Definition of a word&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="s"&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
              &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;definition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;200&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Word saved&lt;/span&gt;
    &lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Delete an entry from the dictionary&lt;/span&gt;
      &lt;span class="na"&gt;x-mojo-to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;word#remove&lt;/span&gt;
      &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;#/components/parameters/word'&lt;/span&gt;
      &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;200&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Word deleted&lt;/span&gt;
&lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A word in the dictionary&lt;/span&gt;
      &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;path&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;word&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(I worked on this in the &lt;strong&gt;free online &lt;a href="https://editor.swagger.io/"&gt;Swagger Editor&lt;/a&gt;&lt;/strong&gt;, which checks your syntax, previews what API documentation might look like, and offers suggestions if it finds errors in your document.)&lt;/p&gt;

&lt;p&gt;Most of the above should be fairly self-explanatory to any web developer, and you can check &lt;a href="https://spec.openapis.org/oas/v3.0.3.html"&gt;the OpenAPI specification&lt;/a&gt; for required and optional fields and their allowed values. The only odd field listed is &lt;code&gt;x-mojo-to&lt;/code&gt;; we’ll be using the &lt;a href="https://metacpan.org/pod/Mojolicious::Plugin::OpenAPI"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; module to read that field when generating routes to controllers in the &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt; web framework.&lt;/p&gt;

&lt;p&gt;In the next installment, we’ll actually be writing some Perl by building our Mojo application and tests.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/building-a-microservice-in-perl-part-1-designing-the-api-13ll</id>
    <published>2021-02-27T22:09:59Z</published>
    <updated>2021-02-27T22:09:59Z</updated>
    <category term="perl"/>
    <category term="microservices"/>
    <category term="mojolicious"/>
    <category term="openapi"/>
  </entry>
  <entry>
    <title>Perl weekly challenge 101</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/02/perl-weekly-challenge-101.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10102</id>
    <published>2021-02-23T10:20:05Z</published>
    <updated>2021-02-27T19:05:58Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-100/james-smith/perl">Github</a></p>

<h3>Task 1: Pack a Spiral</h3>
You are given an array @A of items (integers say, but they can be anything).

<p>Your task is to pack that array into an MxN matrix spirally counterclockwise, as tightly as possible.</p>

<p>‘Tightly’ means the absolute value |M-N| of the difference has to be as small as possible.</p>

<pre>
(1..4)  ->  4 3
            1 2
(1..6)  ->  6 5 4   5 4
            1 2 3   6 3
                    1 2
                   
(1..12) ->  9  8  7  6    8  7  6
           10 11 12  5    9 12  5
            1  2  3  4   10 11  4
                          1  2  3
</pre>

<h4>The solution</h4>
No attempting at real <em>golfing</em> this week - but still want to keep it "minimalist"...

<p>Our <code>pack_spiral</code> routine starts by finding the largest factor of the size of the list below sqrt of the size of the list. The two dimensions we will need are this (<code>$rows</code>) and <code>$cols</code>. Just for compactness when printing we chose it so that <code>$rows < $cols</code>.</p>

<p>To compute the number of rows ($rows) this is the largest number < sqrt of the number of elements (N) which is a factor of N. We can use grep to get all factors - if we reverse this the highest factor is the first element of the list...</p>

<pre><code>sub pack_spiral {
  my( $rows )               = reverse grep { ! (@_ % $_) } 1 .. sqrt @_;
  my( $cols, $r, $c, @out ) = ( @_/$rows, $rows-1, -1 );

<p>  while( @_ ) {                                      # do until empty<br />
    $out[ $r ][ ++$c ] = shift foreach 1 .. $cols--; # >><br />
    $out[ --$r ][ $c ] = shift foreach 1 .. --$rows; # ^^<br />
    last                       unless  @_;           # exit if empty<br />
    $out[ $r ][ --$c ] = shift foreach 1 .. $cols--; # <<<br />
    $out[ ++$r ][ $c ] = shift foreach 1 .. --$rows; # vv<br />
  }<br />
  return \@out;<br />
}</code></pre></p>

<p>We work around the spiral starting bottom left - and then work our way right <code>++$c</code>, up <code>--$r</code>, left <code>--$c</code> & down <code>++$r</code>. Each time when we draw one less column (when going left or right) and one less row (when going up or down) - hence the <code>$cols--</code> & <code>--$rows</code>.</p>

<p>Notes: <code>shift</code> by itself shifts off the magic "@_" array - so in our cases takes the next item of the list...</p>

<p>You can see the progress below:<br />
<pre>       [__]  [__]  [__]  [__] </p>

<p>       [__]  [__]  [__]  [__]</p>

<p> (st)  [__]  [__]  [__]  [__]</p>

<p>  $rows = 3; $cols = 4; $r = 2; $c = -1; @_=12;<br />
  $out[ $r ][ ++$c ] = shift foreach 1 .. $cols--;<br />
                                          < 4 ><br />
       [__]  [__]  [__]  [__]</p>

<p>       [__]  [__]  [__]  [__]</p>

<p>  st ->[_1]->[_2]->[_3]->(_4)</p>

<p>  $rows = 3; $cols = 3; $r = 2; $c = 3; @_=8;<br />
  $out[ --$r ][ $c ] = shift foreach 1 .. --$rows;<br />
                                            < 2 ><br />
       [__]  [__]  [__]  (_6)<br />
                          ^^<br />
       [__]  [  ]  [  ]  [_5]<br />
                          ^^<br />
  st   [_1]->[_2]->[_3]->[_4]</p>

<p>  $rows = 2; $cols = 3; $r = 0; $c = 3;  @_=6;<br />
  $out[ $r ][ ++$c ] = shift foreach 1 .. $cols--;<br />
                                          < 3 ><br />
       (_9)<-[_8]<-[_7]<-[_6]<br />
                          ^^<br />
       [__]  [  ]  [  ]  [_5]<br />
                          ^^<br />
  st   [_1]->[_2]->[_3]->[_4]</p>

<p>  $rows = 2; $cols = 2; $r = 0; $c = 0;  @_=3;<br />
  $out[ ++$r ][ $c ] = shift foreach 1 .. --$rows;<br />
                                            < 1 ><br />
   <br />
       [_9]<-[_8]<-[_7]<-[_6]<br />
        vv                ^^<br />
       (10)  [  ]  [  ]  [_5]<br />
                          ^^<br />
  st   [_1]->[_2]->[_3]->[_4]<br />
 <br />
  $rows = 1; $cols = 2; $r = 1; $c = 0;  @_=1;<br />
  $out[ $r ][ ++$c ] = shift foreach 1 .. $cols--;<br />
                                          < 2 >   <br />
       [_9]<-[_8]<-[_7]<-[_6]<br />
        vv                ^^<br />
       [10]->[11]->(12)  [_5]<br />
                          ^^<br />
  st   [_1]->[_2]->[_3]->[_4]</p>

<p>  $rows = 1; $cols = 1; $r = 1; $c = 2;  @_=0;<br />
  $out[ --$r ][ $c ] = shift foreach 1 .. --$rows; # does nothing..<br />
                                            < 0 ><br />
  <br />
       [_9]<-[_8]<-[_7]<-[_6]<br />
        vv                ^^<br />
       [10]->[11]->(12)  [_5]<br />
                          ^^<br />
  st   [_1]->[_2]->[_3]->[_4]</pre></p>

<p><br />
<h3>Task 2: Origin-containing Triangle</h3><br />
You are given three points in the plane, as a list of six co-ordinates: A=(x1,y1), B=(x2,y2) and C=(x3,y3).</p>

<p>Write a script to find out if the triangle formed by the given three co-ordinates contain origin (0,0).</p>

<p>Print 1 if found otherwise 0.</p>

<pre>
Input: A=(0,1) B=(1,0)  C=(2,2)   Output: 0
Input: A=(1,1) B=(-1,1) C=(0,-3)  Output: 1
Input: A=(0,1) B=(2,0)  C=(-6,0)  Output: 1
</pre>

<h4>The solution</h4>
One of the uses I put my degree to at work was to use "Winding numbers" to replicate image maps in web pages {we needed to implement drag features and click feature on an image}... So winding numbers are what I will use here...

<p><em>Winding number</em> - imagine you are a dalek standing at the origin - and you trace around the triangle with your gunstick... If your head turns a full 360 either way then you are in the triangle - if it does not you are outside the triangle! This extends to any shape - you are inside the shape if you take an odd number of turns - outside if you take an even number. The following code is a quick way to compute the winding number.</p>

<p>To include each line - we start with the last point and join it to the first... and then first to second until we finally get back to the line between the last two points.</p>

<pre><code>sub winding_number {
  my ( $a, $b, $wn ) = @_[ -2, -1 ], 0;

<p>  while( my($x,$y) = splice @_, 0, 2 ) {<br />
    $wn += $a<=0 ? $y>0  && $a*$y-$x*$b >  0 ?  1 : 0<br />
                 : $y<=0 && $a*$y-$x*$b <= 0 ? -1 : 0;<br />
    ($a,$b)=($x,$y);<br />
  }<br />
  return $wn%2;<br />
}</code></pre></p>]]>
        
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-831434383182425068</id>
    <published>2021-02-27T19:40:00.000+01:00</published>
    <updated>2021-02-27T19:40:16.498+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxx) 18 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997003&lt;/strong&gt; on 2021-02-23&lt;/li&gt;  &lt;li&gt;Votes: 52&lt;/li&gt;  &lt;li&gt;Previous version: 0.997002 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.047005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.047005&lt;/strong&gt; on 2021-02-24&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.047004 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Data-Fake-0.006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Fake&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Declaratively generate fake structured data for testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.006&lt;/strong&gt; on 2021-02-26&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.005 was 4 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GARU/Data-Printer-1.000001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Printer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - colored &amp; full-featured pretty print of Perl data structures and objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000001&lt;/strong&gt; on 2021-02-25&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 0.40 was 3 years, 6 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Dist-Zilla-Plugin-GitHub-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla::Plugin::GitHub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Plugins to integrate Dist::Zilla with GitHub &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2021-02-20&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 2 years, 5 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2021-02-24&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.66&lt;/strong&gt; on 2021-02-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.65 was 1 month, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PMQS/IO-Compress-2.101' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Compress::Zlib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IO Interface to compressed data files/buffers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.101&lt;/strong&gt; on 2021-02-20&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.100 was 1 month, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.070' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.070&lt;/strong&gt; on 2021-02-26&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 2.069 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.14&lt;/strong&gt; on 2021-02-23&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.13 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210220' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210220&lt;/strong&gt; on 2021-02-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210123 was 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.25&lt;/strong&gt; on 2021-02-20&lt;/li&gt;  &lt;li&gt;Votes: 66&lt;/li&gt;  &lt;li&gt;Previous version: 4.24 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.15&lt;/strong&gt; on 2021-02-20&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.14 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.00' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.00&lt;/strong&gt; on 2021-02-23&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.25 was 7 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/OrePAN2-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OrePAN2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Yet another DarkPAN manager. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2021-02-25&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 2 years, 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GRICHTER/Perl-LanguageServer-2.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::LanguageServer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Language Server and Debug Protocol Adapter for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v2.2.0&lt;/strong&gt; on 2021-02-21&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.1.0 was 7 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Spreadsheet-Read-0.84' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Spreadsheet::Read&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Meta-Wrapper for reading spreadsheet data &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.84&lt;/strong&gt; on 2021-02-26&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.83 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAYASHI/Term-ReadLine-Gnu-1.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::ReadLine::Gnu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for the GNU Readline/History Library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.40&lt;/strong&gt; on 2021-02-23&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.37 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/831434383182425068/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cccxxx-18-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/831434383182425068"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/831434383182425068"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cccxxx-18-cpan-great-modules-released.html" title="(cccxxx) 18 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6807292797867419496</id>
    <published>2021-02-27T19:36:00.004+01:00</published>
    <updated>2021-02-27T19:36:29.897+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlvi) metacpan weekly report - Text::Table::More</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 57&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Text::Table::More"&gt;Text::Table::More&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/02/27 18:35:17 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BoardStreams" target="_blank"&gt;BoardStreams&lt;/a&gt; - An easy way to use WebSockets on the browser and on the server&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Tau" target="_blank"&gt;Math::Tau&lt;/a&gt; - provide the important mathematical constant tau = 6.2831...&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::CPAN::Packages::Fast" target="_blank"&gt;Parse::CPAN::Packages::Fast&lt;/a&gt; - parse CPAN's package index&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::QueryParser" target="_blank"&gt;Search::QueryParser&lt;/a&gt; - parses a query string into a data structure&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Engine" target="_blank"&gt;SQL::Engine&lt;/a&gt; - SQL Generation for Perl 5&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::financeta" target="_blank"&gt;App::financeta&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=167)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Heap" target="_blank"&gt;Array::Heap&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Art::World" target="_blank"&gt;Art::World&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Keywords" target="_blank"&gt;B::Keywords&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Compress::LZ4" target="_blank"&gt;Compress::LZ4&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Compress::Raw::Zlib" target="_blank"&gt;Compress::Raw::Zlib&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Uploader" target="_blank"&gt;CPAN::Uploader&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dump" target="_blank"&gt;Data::Dump&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Fake" target="_blank"&gt;Data::Fake&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::SQLite" target="_blank"&gt;DBD::SQLite&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/dip" target="_blank"&gt;dip&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3" target="_blank"&gt;Gtk3&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gzip::Libdeflate" target="_blank"&gt;Gzip::Libdeflate&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::BrowserDetect" target="_blank"&gt;HTTP::BrowserDetect&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=109)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::BrillTagger" target="_blank"&gt;Lingua::BrillTagger&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::EN::Inflect" target="_blank"&gt;Lingua::EN::Inflect&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::EN::Inflexion" target="_blank"&gt;Lingua::EN::Inflexion&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::EN::Tagger" target="_blank"&gt;Lingua::EN::Tagger&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::Stem" target="_blank"&gt;Lingua::Stem&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Marpa::R2" target="_blank"&gt;Marpa::R2&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=161)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PathTools" target="_blank"&gt;PathTools&lt;/a&gt; (+1=74)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pegex" target="_blank"&gt;Pegex&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=370)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Controls" target="_blank"&gt;Perl6::Controls&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POSIX::strptime" target="_blank"&gt;POSIX::strptime&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::ES6" target="_blank"&gt;Promise::ES6&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::XS" target="_blank"&gt;Promise::XS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Reddit::Client" target="_blank"&gt;Reddit::Client&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Selenium::Remote::Driver" target="_blank"&gt;Selenium::Remote::Driver&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Teng" target="_blank"&gt;Teng&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Exception" target="_blank"&gt;Test::Exception&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::Any" target="_blank"&gt;Text::Table::Any&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::More" target="_blank"&gt;Text::Table::More&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WordNet::Similarity" target="_blank"&gt;WordNet::Similarity&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML" target="_blank"&gt;XML::LibXML&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Yancy" target="_blank"&gt;Yancy&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6807292797867419496/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdlvi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6807292797867419496"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6807292797867419496"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdlvi-metacpan-weekly-report.html" title="(cdlvi) metacpan weekly report - Text::Table::More"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4257823332046364525</id>
    <published>2021-02-27T19:31:00.000+01:00</published>
    <updated>2021-02-27T19:31:03.297+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-02-27 18:29:49 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66380162" target="_blank"&gt;No error or warning for trying to print to an already closed filehandle&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66325325" target="_blank"&gt;Ternary producing different results than If&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66371070" target="_blank"&gt;How to create many hash references with identical data?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66349658" target="_blank"&gt;How to Perl calculate array column data?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66375965" target="_blank"&gt;Count the number of non-whitespace characters in a string in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66301973" target="_blank"&gt;Perl repeat string which has repeated substring&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66302100" target="_blank"&gt;In Perl, how can query a JSON::Path object and return the paths of the matched elements?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66302271" target="_blank"&gt;Cannot install DBD::Oracle on macOS Big Sur =&amp;gt; dependent dylib '@rpath/libclntsh.dylib.19.1' not found&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66331974" target="_blank"&gt;I need to serialize in Perl with PHP format&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66372019" target="_blank"&gt;Perl 5 OOP programming&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4257823332046364525/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdlxxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4257823332046364525"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4257823332046364525"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdlxxix-stackoverflow-perl-report.html" title="(cdlxxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>rt.cpan.org has a new home</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rt-cpan-org-upgraded"/>
  <id>tag:news.perlfoundation.org,2021-02-26:/post/rt-cpan-org-upgraded</id>
  <published>2021-02-26T12:24:46</published>
  <updated>2021-02-26T12:24:46</updated>
  <summary>
  <![CDATA[
     Last week, we reported that rt.cpan.org would be moving from its old home, and that it would be hosted by Best Practical, the makers of RT. The timeline we gave was "will be done sometime in early March," but fortunately, the process has gone very well and is now just about complete. Within a few hours from now, rt.cpan.org will point to the new instance, where all the old data 
   ]]>
  </summary>
  <author>
    <name>Ricardo Signes</name>
  </author>
  <category term="CPAN" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Last week, <a href="https://news.perlfoundation.org/post/rt-cpan-org-future">we reported</a> that rt.cpan.org would be moving from its old home, and that it would be hosted by Best Practical, the makers of RT.  The timeline we gave was "will be done sometime in early March," but fortunately, the process has gone very well and is now just about complete.  Within a few hours from now, <a href="https://rt.cpan.org/">rt.cpan.org</a> will point to the new instance, where all the old data has been migrated.  Some small amount of below the surface work remains to be done, but we expect that you should be able to continue using RT without interruption.</p>

<p>You might notice that things look pretty different.  That's because the whole system has been upgraded from v4.0.18 to v5.0.  If you encounter something in the new RT install that used to work and now doesn't, or that just seems plain old broken, please <a href="mailto:rt-cpan-admin@bestpractical.com">contact the rt.cpan.org admins</a>, who can look into it.</p>

<p>Thanks to Best Practical for getting this done without any down time, and of course many thanks to the <a href="https://noc.perl.org/">Perl NOC</a>, who kept our old RT running for so many years!</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>What return is expected from a function?</title>
  <summary type="html"><![CDATA[<p>
Perl is very different from most other programming languages in that functions in Perl can be made aware of their environment, especially they can chechk what kind of data is
expected from them? A scalar, a list? Maybe nothing?
<p>
This expectation might be different every place the function is called. In order to know what is expectation in the current call, the function can use the
slightly incorrectly named <a href="/wantarray">wantarray</a> function.
<p>
However Perl can be a lot more precize telling a function what is expected from it. Using the <a href="https://metacpan.org/pod/Want">Want</a>
module the function can know exactly how many values it needd to return.
<p>
]]></summary>
  <updated>2021-02-25T17:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/what-return-is-expected"/>  <id>https://perlmaven.com/what-return-is-expected</id>
  <content type="html"><![CDATA[<p>
Perl is very different from most other programming languages in that functions in Perl can be made aware of their environment, especially they can chechk what kind of data is
expected from them? A scalar, a list? Maybe nothing?
<p>
This expectation might be different every place the function is called. In order to know what is expectation in the current call, the function can use the
slightly incorrectly named <a href="/wantarray">wantarray</a> function.
<p>
However Perl can be a lot more precize telling a function what is expected from it. Using the <a href="https://metacpan.org/pod/Want">Want</a>
module the function can know exactly how many values it needd to return.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>"Perl in 2025" FOSDEM video review </title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/perl-in-2025-fosdem-video-review-1k70" type="text/html"/>
    <content type="html">&lt;p&gt;Once again, I have to talk you about &lt;a href="http://leonerds-code.blogspot.com/"&gt;Paul "Leonerd" Evans&lt;/a&gt; 😃&lt;/p&gt;

&lt;p&gt;He is the author of the video that I will review now and I have to say first that I consider that we are lucky to have such brilliant guy in Perl community 👍 💪&lt;/p&gt;

&lt;p&gt;The video is titled &lt;a href="https://fosdem.org/2021/schedule/event/perl_in_2025/"&gt;Perl in 2025&lt;/a&gt; and is actually a list of &lt;strong&gt;open questions&lt;/strong&gt; about Perl new operators in near future.&lt;/p&gt;

&lt;p&gt;Leonerd goes a bit fast, but I really enjoyed the video.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#isa-signatures" class="anchor"&gt;
  &lt;/a&gt;
  isa, signatures
&lt;/h1&gt;

&lt;p&gt;I won't discuss this part, it is stable and coming in the core soon, but he explained these things, and it was very clear.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#smart-match" class="anchor"&gt;
  &lt;/a&gt;
  Smart match
&lt;/h1&gt;

&lt;p&gt;I started Perl when smart match (&lt;code&gt;~~&lt;/code&gt;) was already around (and already not recommended to the usage). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TdtwuDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu9qj9g74hz6ivcuxpf7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TdtwuDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu9qj9g74hz6ivcuxpf7.jpeg" alt="Smartmatch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used them a bit (I was young and bold at that time 😀) then quickly followed the recommendations and forbid myself to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what were my needs to use smartmatch?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, it was to emulate &lt;strong&gt;"is in"&lt;/strong&gt; ("Is this value in this array?"). Yes it can be done with other operators or CPAN module but &lt;code&gt;~~&lt;/code&gt; seemed so short and elegant...&lt;/p&gt;

&lt;p&gt;Second, as explained by Paul, another &lt;em&gt;hidden&lt;/em&gt; usage of &lt;code&gt;~~&lt;/code&gt; is internally in &lt;code&gt;given/when&lt;/code&gt; construction (that I don't used so much at the end).&lt;/p&gt;

&lt;p&gt;I would actually have loved to continue to use smartmatch, but I'm a prudent programmer so one warning was sufficient to make me run away and totally forget about this construction 😂&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sharpy-equalities" class="anchor"&gt;
  &lt;/a&gt;
  Sharpy equalities
&lt;/h1&gt;

&lt;p&gt;Leonerd then discusses also about new operators &lt;code&gt;equ&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; that I unilaterally decided to name "nervous equalities" or "sharpy equalities" (maybe it sounds terribly bad, but yes I'm not a native english speaker 😀).&lt;/p&gt;

&lt;p&gt;The need for them comes from smartmatch (watch the video to know why!) but extends to simplify basic comparisons (&lt;code&gt;if(defined $var and $var eq "perl")&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It appeared to me to be at first a very sharp usage, but finally it seems very cool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(""&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# it is true&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(""&lt;/span&gt; &lt;span class="nv"&gt;equ&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# it will be false&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The same way with numeric &lt;code&gt;===&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# it is true&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# it will be false&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#any-and-in" class="anchor"&gt;
  &lt;/a&gt;
  any and in
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;any&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; would cover the need (dig into lists) that I previously mentioned.&lt;/p&gt;

&lt;p&gt;Leonerd presents in as a possible metaoperator that you can "parametrize" to choose how it behaves (a bit crazy in a &lt;a href="https://docs.raku.org/language/operators#Metaoperators"&gt;Raku way&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;By detailing &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;given/when&lt;/code&gt;, and friends, I understand the difficulty it was to properly implement smartmatch (that contains all these things).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multi-dispatch" class="anchor"&gt;
  &lt;/a&gt;
  Multi dispatch
&lt;/h1&gt;

&lt;p&gt;The same way, "multi dispatch" makes me think again of Raku which is amazing on this.&lt;/p&gt;

&lt;p&gt;I wondered what dispatch mechanism was already implemented in Perl, since we already have a notion of &lt;a href="https://perldoc.perl.org/mro"&gt;Method Resolution Order&lt;/a&gt;. The answer is that there is dispatch mechanism but limited to Oriented Object Programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we try to do multi sub dispatch in the same package?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With prototypes, if you try something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt;&lt;span class="p"&gt;($)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Unfortunately you will get an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;Prototype&lt;/span&gt; &lt;span class="nv"&gt;mismatch:&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="err"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;a&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nf"&gt;vs&lt;/span&gt; &lt;span class="p"&gt;($)&lt;/span&gt; &lt;span class="nf"&gt;at&lt;/span&gt; &lt;span class="nf"&gt;multi&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pl&lt;/span&gt; &lt;span class="nf"&gt;line&lt;/span&gt; &lt;span class="err"&gt;2.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With signatures, if you try something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="sx"&gt;qw(signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;no&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt; &lt;span class="sx"&gt;qw(experimental::signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;($arg) {&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bb&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;myarg&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The latest declaration will override the previous one and you can get &lt;code&gt;Too few arguments for subroutine&lt;/code&gt; or &lt;code&gt;Too many arguments for subroutine&lt;/code&gt; depending the order you declared the &lt;code&gt;sub b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/mjgardner"&gt;@mjgardner&lt;/a&gt;
 (and others) do not hesitate to correct me, you master better than me all these things.&lt;/p&gt;

&lt;p&gt;You can still use the flexibility of Perl and handle dispatch inside the &lt;code&gt;sub&lt;/code&gt;, but it is not properly &lt;em&gt;native&lt;/em&gt; dispatch.&lt;/p&gt;

&lt;p&gt;Back to the MRO (Method Resolution Order), &lt;a href="https://perldoc.perl.org/mro#NAME"&gt;Perl MRO&lt;/a&gt; is by default implemented using &lt;a href="https://en.wikipedia.org/wiki/Depth-first_search"&gt;DFS (Depth First Search)&lt;/a&gt; but can be configured to use &lt;a href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3&lt;/a&gt; from the &lt;a href="https://metacpan.org/pod/Class::C3"&gt;CPAN module C3&lt;/a&gt;.&lt;br&gt;
Python or Raku use C3 algorithm as default impementation.&lt;/p&gt;

&lt;p&gt;Then as a summary, Paul discusses about adding &lt;strong&gt;multi dispatch&lt;/strong&gt; (i.e. &lt;strong&gt;method overriding&lt;/strong&gt; or &lt;strong&gt;polymorphism&lt;/strong&gt; in the same package) and he proposes implementations based on &lt;code&gt;signatures&lt;/code&gt;, &lt;code&gt;isa&lt;/code&gt; and &lt;code&gt;is&lt;/code&gt; (that I do not talked but &lt;code&gt;is&lt;/code&gt; is a part of possible new ops).&lt;/p&gt;

&lt;p&gt;My thought is... It would be nice! 😃&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#all-things-together" class="anchor"&gt;
  &lt;/a&gt;
  All things together
&lt;/h1&gt;

&lt;p&gt;This is a great talk, that opens the door to discussion and implementations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pvQd67by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npqkx3kim0zypdjwhdbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pvQd67by--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npqkx3kim0zypdjwhdbg.png" alt="All"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a conclusion, thank you again &lt;strong&gt;Leonerd&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;That was the last time I talked about you... for today 😀&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/perl-in-2025-fosdem-video-review-1k70</id>
    <published>2021-02-25T15:04:53Z</published>
    <updated>2021-02-25T15:04:53Z</updated>
    <category term="perl"/>
    <category term="future"/>
    <category term="fosdem"/>
    <category term="video"/>
  </entry>
  <entry>
  <title>our</title>
  <summary type="html"><![CDATA[<p>
In Perl the <b>our</b> keyword is used to declare one or more package variables. More exactly it creates lexical alias to a packaga variable, but for our practical
purposes <b>our</b> means we are allowed to use the package variable without giving the fully qualified name and without violating the rules
of <a href="/strict">use strict</a>.
<p>
With that out of the way, in most cases, you'd want to declare variables in a lexical scope using the <a href="/my">my</a> keyword.
<p>
]]></summary>
  <updated>2021-02-23T20:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/our"/>  <id>https://perlmaven.com/our</id>
  <content type="html"><![CDATA[<p>
In Perl the <b>our</b> keyword is used to declare one or more package variables. More exactly it creates lexical alias to a packaga variable, but for our practical
purposes <b>our</b> means we are allowed to use the package variable without giving the fully qualified name and without violating the rules
of <a href="/strict">use strict</a>.
<p>
With that out of the way, in most cases, you'd want to declare variables in a lexical scope using the <a href="/my">my</a> keyword.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>my</title>
  <summary type="html"><![CDATA[<p>
In Perl the <b>my</b> keyword is used to declare one or more lexical variables. That is variables that are scoped to the enclosing block of curly braces.
There are also package variables in Perl that are declared using the <a href="/our">our</a> keyword.
<p>
]]></summary>
  <updated>2021-02-23T20:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/my"/>  <id>https://perlmaven.com/my</id>
  <content type="html"><![CDATA[<p>
In Perl the <b>my</b> keyword is used to declare one or more lexical variables. That is variables that are scoped to the enclosing block of curly braces.
There are also package variables in Perl that are declared using the <a href="/our">our</a> keyword.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>q</title>
  <summary type="html"><![CDATA[<p>
<b>q</b> behaves just like single quotes <b>'</b> do, but they make it easy to include other single-quotes in a string without the need to escape them.
<p>
]]></summary>
  <updated>2021-02-23T19:20:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/q"/>  <id>https://perlmaven.com/q</id>
  <content type="html"><![CDATA[<p>
<b>q</b> behaves just like single quotes <b>'</b> do, but they make it easy to include other single-quotes in a string without the need to escape them.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>qq</title>
  <summary type="html"><![CDATA[<p>
<b>qq</b> behaves just like double quotes <b>"</b> do, they interpolate variables, but they make it easy to include double-quotes in a string without the need to escape them.
<p>
]]></summary>
  <updated>2021-02-23T19:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/qq"/>  <id>https://perlmaven.com/qq</id>
  <content type="html"><![CDATA[<p>
<b>qq</b> behaves just like double quotes <b>"</b> do, they interpolate variables, but they make it easy to include double-quotes in a string without the need to escape them.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Random integer generation in an interval with Modern OOP Perl</title>
    <link rel="alternate" href="https://dev.to/smonff/random-integer-generation-in-an-interval-with-modern-oop-perl-4p2c" type="text/html"/>
    <content type="html">&lt;p&gt;I always have to search &lt;a href="https://stackoverflow.com/a/21806398/954777"&gt;how to generate a random integer number between a range&lt;/a&gt; because this is a common task that I use a lot in tests, but really, I can't memorize it.&lt;/p&gt;

&lt;p&gt;Though, this is how I would do it in 2021.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Class definition&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Random::&lt;/span&gt;&lt;span class="nv"&gt;Range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Zydeco&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;Integer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;pick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt; &lt;span class="nv"&gt;$max&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$min&lt;/span&gt; &lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Script&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nn"&gt;Random::&lt;/span&gt;&lt;span class="nv"&gt;Range&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;new_integer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;pick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;#==&amp;gt; 42 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what did we do here? We used the &lt;a href="https://perldoc.pl/functions/rand"&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/a&gt; function where we applied the &lt;code&gt;int&lt;/code&gt; function, so we would get an integer, not a fractional number. The small calculation makes possible to restrict the result to the desired interval.&lt;/p&gt;

&lt;p&gt;All of this is glued into a minimal Zydeco class that adds a very nice object-oriented interface. You maybe don't need Zydeco, this simple one-liner would work:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -le 'my @interval = (1, 100); print $interval[0] + int ( rand ( $interval[1] - $interval[0] ))'  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Note this is not cryptographically secure and should only be used in simple cases: if you need a secure implementation, please check some &lt;a href="https://metacpan.org/search?q=math+random+secure"&gt;appropriate solutions on CPAN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Art: digital painting by myself.&lt;/p&gt;

</content>
    <author>
      <name>🌌 Sébastien Feugère ☔</name>
    </author>
    <id>https://dev.to/smonff/random-integer-generation-in-an-interval-with-modern-oop-perl-4p2c</id>
    <published>2021-02-23T11:45:18Z</published>
    <updated>2021-02-23T11:45:18Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="random"/>
  </entry>
  <entry>
    <title>Exceptional Perl: Failure is an option</title>
    <link rel="alternate" href="https://dev.to/mjgardner/exceptional-perl-failure-is-an-option-382h" type="text/html"/>
    <content type="html">&lt;p&gt;Failure is a universal truth of computers. Files fail to open, web pages fail to load, programs fail to install, messages fail to arrive. As a developer you have no choice but to work in a seemingly hostile environment in which bugs and errors lurk around every corner.&lt;/p&gt;

&lt;p&gt;Hopefully you find and fix the bugs during development and testing, but even with all bugs squashed exceptional conditions can occur. It’s your job as a Perl developer to use the tools available to you to handle these exceptions. Here are a few of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-eval-endraw-raw-die-endraw-and-raw-evalerror-endraw-raw-endraw-updated" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/functions/eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://perldoc.pl/functions/die"&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://perldoc.pl/variables/%24@"&gt;&lt;code&gt;$EVAL_ERROR&lt;/code&gt;&lt;/a&gt; &lt;a href="https://perldoc.pl/variables/%24@"&gt;&lt;code&gt;($@)&lt;/code&gt;&lt;/a&gt; &lt;em&gt;(updated)&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Perl has a primitive but effective mechanism for running code that may fail called &lt;a href="https://perldoc.pl/functions/eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. It runs either a string or block of Perl code, trapping any errors so that the enclosing program doesn’t crash. It’s your job then to ignore or handle the error; &lt;code&gt;eval&lt;/code&gt; will return &lt;code&gt;undef&lt;/code&gt; (or an empty list in list &lt;a href="https://perldoc.pl/perldata#Context"&gt;context&lt;/a&gt;) and set the magic variable &lt;code&gt;$@&lt;/code&gt; to the error string. (You can spell that &lt;code&gt;$EVAL_ERROR&lt;/code&gt; if you &lt;code&gt;use&lt;/code&gt; the &lt;a href="https://perldoc.pl/English"&gt;&lt;code&gt;English&lt;/code&gt;&lt;/a&gt; module, which &lt;strong&gt;you probably should to allow for more readable code&lt;/strong&gt;.) Here’s a contrived example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;English&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tried to divide by zero: &lt;/span&gt;&lt;span class="si"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(Why the &lt;code&gt;1&lt;/code&gt; at the end of the block? It forces the &lt;code&gt;eval&lt;/code&gt; to return true if it succeeds; the &lt;code&gt;or&lt;/code&gt; condition is executed if it returns false.)&lt;/p&gt;

&lt;p&gt;What if you want to purposefully cause an exception, so that an enclosing eval (possibly several layers up) can handle it? You use &lt;a href="https://perldoc.pl/functions/die"&gt;&lt;code&gt;die&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;English&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;process_file&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;foo.txt&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;couldn't process file: &lt;/span&gt;&lt;span class="si"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;process_file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;
      &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;couldn't read &lt;/span&gt;&lt;span class="si"&gt;$file&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;$OS_ERROR&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# do something with $fh&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It’s worth repeating that as a statement: &lt;strong&gt;You use exceptions so that enclosing code can decide how to handle the error.&lt;/strong&gt; Contrast this with simply handling a function’s return value at the time it’s executed: except in the simplest of scripts, that part of the code likely has no idea what the error means to the rest of the application or how to best handle the problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-autodie-endraw-updated" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.pl/autodie"&gt;&lt;code&gt;autodie&lt;/code&gt;&lt;/a&gt; &lt;em&gt;(updated)&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Since many of Perl’s built-in functions (like &lt;a href="https://perldoc.pl/functions/open"&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;) return false or other values on failure, it can be tedious and error-prone to make sure that all of them report problems as exceptions. Enter &lt;strong&gt;&lt;a href="https://perldoc.pl/autodie"&gt;&lt;code&gt;autodie&lt;/code&gt;&lt;/a&gt;, which will helpfully replace the functions &lt;a href="https://perldoc.pl/autodie#CATEGORIES"&gt;you choose&lt;/a&gt; with equivalents that throw exceptions&lt;/strong&gt;. &lt;a href="https://perldoc.pl/perl5101delta#autodie"&gt;Introduced in Perl 5.10.1&lt;/a&gt;, it only affects the enclosing code block, and even goes so far as to set &lt;code&gt;$EVAL_ERROR&lt;/code&gt; to &lt;a href="https://perldoc.pl/autodie::exception"&gt;an object&lt;/a&gt; that can be queried for more detail. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;English&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;autodie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# defaults to everything but system and exec&lt;/span&gt;

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.txt&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$EVAL_ERROR&lt;/span&gt;
      &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;autodie::exception&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error from open&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
        &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I/O error&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;:io&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something else went wrong: &lt;/span&gt;&lt;span class="si"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-try-endraw-and-raw-catch-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you’re familiar with other programming languages, you’re probably looking for syntax like &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; for your exception needs. &lt;strong&gt;The good news is that it’s &lt;a href="https://github.com/Perl/perl5/issues/18504"&gt;coming in Perl 5.34&lt;/a&gt;&lt;/strong&gt; thanks to the ever-productive &lt;a href="https://leonerds-code.blogspot.com/"&gt;Paul “LeoNerd” Evans&lt;/a&gt;; the better news is that you can use it today with his &lt;a href="https://metacpan.org/pod/Feature::Compat::Try"&gt;&lt;code&gt;Feature::Compat::Try&lt;/code&gt;&lt;/a&gt; module, itself a distillation of his popular &lt;a href="https://metacpan.org/pod/Syntax::Keyword::Try"&gt;&lt;code&gt;Syntax::Keyword::Try&lt;/code&gt;&lt;/a&gt;. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;English&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;autodie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Feature::Compat::&lt;/span&gt;&lt;span class="nv"&gt;Try&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;attempt_a_thing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;failure: &lt;/span&gt;&lt;span class="si"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;autodie::exception&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed in &lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; line &lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; called with &lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;autodie&lt;/code&gt; and &lt;code&gt;Feature::Compat::Try&lt;/code&gt; are complementary and can be used together; also note that unlike an &lt;code&gt;eval&lt;/code&gt; block, you can return from the enclosing function in a &lt;code&gt;try&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;The underlying &lt;code&gt;Syntax::Keyword::Try&lt;/code&gt; module has even more options like a &lt;a href="https://metacpan.org/pod/Syntax::Keyword::Try#finally"&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; block and a couple &lt;a href="https://metacpan.org/pod/Syntax::Keyword::Try#Experimental-Features"&gt;experimental features&lt;/a&gt;. I now prefer it to &lt;a href="https://metacpan.org/pod/Syntax::Keyword::Try#OTHER-MODULES"&gt;other modules&lt;/a&gt; that implement &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax like &lt;a href="https://metacpan.org/pod/Try::Tiny"&gt;&lt;code&gt;Try::Tiny&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/TryCatch"&gt;&lt;code&gt;TryCatch&lt;/code&gt;&lt;/a&gt; (even though we use &lt;code&gt;Try::Tiny&lt;/code&gt; at work). If all you need is the basic syntax above, &lt;strong&gt;using &lt;code&gt;Feature::Compat::Try&lt;/code&gt; will get you used to the semantics that are coming&lt;/strong&gt; in the next version of Perl.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-exception-modules-updated" class="anchor"&gt;
  &lt;/a&gt;
  Other exception modules &lt;em&gt;(updated)&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;autodie&lt;/code&gt; is nice, and some &lt;a href="https://metacpan.org/pod/HTTP::Exception"&gt;other&lt;/a&gt; &lt;a href="https://metacpan.org/pod/HTTP::Throwable"&gt;modules&lt;/a&gt; &lt;a href="https://metacpan.org/pod/Mojo::Exception"&gt;and&lt;/a&gt; &lt;a href="https://metacpan.org/pod/Dancer::Exception"&gt;frameworks&lt;/a&gt; implement their own exception classes, but what if you want some help defining your own? After all, an error string can only convey so much information, may be difficult to parse, and may need to change as business requirements change.&lt;/p&gt;

&lt;p&gt;Although CPAN has the popular &lt;a href="https://metacpan.org/pod/Exception::Class"&gt;&lt;code&gt;Exception::Class&lt;/code&gt;&lt;/a&gt; module, its author Dave Rolsky recommends that you &lt;strong&gt;use &lt;a href="https://metacpan.org/pod/Throwable"&gt;&lt;code&gt;Throwable&lt;/code&gt;&lt;/a&gt; if you're using &lt;a href="https://metacpan.org/pod/Moose"&gt;&lt;code&gt;Moose&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/Moo"&gt;&lt;code&gt;Moo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;. If you’re &lt;a href="https://perldoc.pl/perlobj"&gt;rolling your own objects&lt;/a&gt;, &lt;strong&gt;use &lt;a href="https://metacpan.org/pod/Throwable::Error"&gt;&lt;code&gt;Throwable::Error&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;Throwable&lt;/code&gt; couldn’t be simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Throwable&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# later...&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong&lt;/span&gt;&lt;span class="p"&gt;'}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And it comes with &lt;code&gt;Throwable::Error&lt;/code&gt;, which you can subclass to get several useful methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::My::&lt;/span&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Throwable::Error&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# later...&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Feature::Compat::&lt;/span&gt;&lt;span class="nv"&gt;Try&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;Local::My::&lt;/span&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;something bad&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;warn&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;stack_trace&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(That &lt;a href="https://metacpan.org/pod/Throwable::Error#stack_trace"&gt;&lt;code&gt;stack_trace&lt;/code&gt;&lt;/a&gt; attribute comes courtesy of the &lt;a href="https://metacpan.org/pod/StackTrace::Auto"&gt;&lt;code&gt;StackTrace::Auto&lt;/code&gt;&lt;/a&gt; role composed into &lt;code&gt;Throwable::Error&lt;/code&gt;. &lt;code&gt;Moo&lt;/code&gt; and &lt;code&gt;Moose&lt;/code&gt; users should simply compose it into their classes to get it.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-exceptions-with-raw-testexception-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Testing exceptions with &lt;a href="https://metacpan.org/pod/Test::Exception"&gt;&lt;code&gt;Test::Exception&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Inevitably bugs will creep in to your code, and automated tests are one of the main weapons in a developer’s arsenal against them. &lt;strong&gt;Use &lt;a href="https://metacpan.org/pod/Test::Exception"&gt;&lt;code&gt;Test::Exception&lt;/code&gt;&lt;/a&gt; when writing tests&lt;/strong&gt; against code that emits exceptions to see whether it behaves as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;English&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;More&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nv"&gt;throws_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="sx"&gt;qr/error 42/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method throws an error when it gets 42&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;throws_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My::Exception::Class&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method throws the right exception class&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;dies_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method died, no params&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;lives_and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$baz&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;method ran without exception, returned right value&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt; 

&lt;span class="nv"&gt;throws_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$qux&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;nonexistent_file.txt&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autodie::exception&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="c1"&gt;# hey look, it's autodie again&lt;/span&gt;
  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;got an autodie exception&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$EVAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;SKIP:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;skip&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no autodie exception thrown&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;
      &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;autodie::exception&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="nv"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;:socket&lt;/span&gt;&lt;span class="p"&gt;'),&lt;/span&gt;
      &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;was a socket error:&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;Test::Exception&lt;/code&gt;’s functions don’t mess with &lt;code&gt;$EVAL_ERROR&lt;/code&gt;, so you’re free to check its value right after you call it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documenting-errors-and-exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Documenting errors and exceptions
&lt;/h2&gt;

&lt;p&gt;If I can leave you with one message, it’s this: &lt;strong&gt;Please document every error and exception your code produces&lt;/strong&gt;, preferably in a place and language that the end-user can understand. The DIAGNOSTICS section of your documentation &lt;em&gt;(you are writing documentation, right, not just code comments?)&lt;/em&gt; is a great candidate. You can model this section after the &lt;a href="https://perldoc.pl/perldiag"&gt;&lt;code&gt;perldiag&lt;/code&gt;&lt;/a&gt; manual page, which goes into great detail about many of the error messages generated by Perl itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(A previous version of this article did not note that one should make sure a successful &lt;code&gt;eval&lt;/code&gt; returns true, and incorrectly stated that &lt;code&gt;Class::Exception&lt;/code&gt; and &lt;code&gt;Throwable&lt;/code&gt; were deprecated due to &lt;a href="https://github.com/metacpan/metacpan-web/issues/2438"&gt;a bug in the MetaCPAN web site&lt;/a&gt;. Thanks to Dan Book for the corrections.)&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/exceptional-perl-failure-is-an-option-382h</id>
    <published>2021-02-23T01:07:30Z</published>
    <updated>2021-02-23T01:07:30Z</updated>
    <category term="programming"/>
    <category term="perl"/>
    <category term="testing"/>
    <category term="documentation"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-2584063206988559741</id>
    <published>2021-02-22T09:39:00.002-08:00</published>
    <updated>2021-02-22T09:39:49.187-08:00</updated>
    <title type="text">CPAN Mirror List Changes</title>
    <content type="html">&lt;p&gt;We sent the below email to all the CPAN Mirror contacts yesterday:&lt;/p&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;&lt;h1 style="text-align: justify;"&gt;An Important Update about the CPAN Mirror List&lt;/h1&gt;&lt;p style="text-align: justify;"&gt;You're receiving this email because you're listed as a contact point for a CPAN mirror. Thank you! The mirror network has been a huge part of CPAN’s success. Soon, the way clients use CPAN mirrors is changing. You don't need to do anything, but after reading this email, you might want to.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;Some background: For a long time, when the CPAN client (aka CPAN.pm) started up for the first time, it prompted users to configure it by picking a nearby mirror. The assumption was that it would be best to find a geographically nearby mirror. This necessitated the keeping of a central list of mirrors which the client could retrieve and offer as a menu. That's the CPAN Mirror List, maintained by the Perl NOC.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;In 2011, the client changed behavior to configure itself automatically, meaning that most new users never saw this list. Furthermore, www.cpan.org was pointed at a global CDN, meaning that traffic could be routed efficiently without client configuration. The CDN also meant that users wouldn’t need to worry about out of date or down mirrors..&lt;/p&gt;&lt;p style="text-align: justify;"&gt;After ten years of CPAN defaulting to the CDN, we are going to stop maintaining the mirror list. It will still be present, but have only one entry: www.cpan.org. This means that anyone attempting to pick a mirror from the list will only find this one option. The mirror status site will be replaced with a static page. As has always been the case, the CPAN client can be configured manually to use any mirror, whether or not it's on the mirror list.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;Users who have configured their CPAN clients to point at your mirror will continue to hit it. No new users are likely to find it -- but after all, they were already very unlikely to do so! That said, you do not need to shut down your mirror. If you use your mirror, you can keep mirroring. We’re not removing or changing the ability to mirror. If you know you have users of your mirror who would like to keep using it, please feel free to keep mirroring it.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;On the other hand, if you would like to stop mirroring CPAN, feel free to do that, too. Clients have always had to deal with their mirror going away, and they will be fine if you choose to shut down your mirror.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;We have not set a firm date for the emptying of the mirror list, but we expect it to happen no earlier than mid-February and no later than June 2021.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;If you have any questions, please email us at &amp;lt;cpan at perl.org&amp;gt;.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;Concerned this is fake? A copy of this email can be found at https://log.perl.org/2021/02/cpan-mirror-list-changes.html.&lt;/p&gt;&lt;p style="text-align: justify;"&gt;Finally: Thanks! The mirror network helped make CPAN practical for many years, and CPAN helped make Perl a success. You were part of this endeavor, and we appreciate it!&lt;span style="text-align: left;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;&lt;p style="text-align: justify;"&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;-- The&amp;nbsp;&lt;/span&gt;&lt;span class="il" face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;CPAN&lt;/span&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="il" face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;Mirror&lt;/span&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="il" face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;List&lt;/span&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;Admins&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/2584063206988559741"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/2584063206988559741"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/02/cpan-mirror-list-changes.html" title="CPAN Mirror List Changes"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
  </entry>
  <entry>
    <title>Browse CPAN modules per namespaces</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/browse-cpan-modules-per-namespaces-6p" type="text/html"/>
    <content type="html">&lt;p&gt;I once was looking to filter out CPAN modules per namespace. Namespaces generally have &lt;em&gt;meaning&lt;/em&gt; in CPAN since there are conventions and Perl folks try to be rigourous and to &lt;a href="http://prepan.org"&gt;fit well in the existing naming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So back again to my research, I was looking for a way to filter out CPAN modules per namespaces.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#become-the-master-of-metacpan-search" class="anchor"&gt;
  &lt;/a&gt;
  Become the master of MetaCPAN search
&lt;/h1&gt;

&lt;p&gt;From &lt;a href="https://metacpan.org/about/faq"&gt;METACPAN faq&lt;/a&gt; you can get some tips like the &lt;strong&gt;module:&lt;/strong&gt; prefix&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sjr9LXX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv1570s030v3onxsl9h6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sjr9LXX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yv1570s030v3onxsl9h6.png" alt="MetaCPAN tips"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this trick, you can search for instance all &lt;a href="https://metacpan.org/search?p=7&amp;amp;q=module%3AXML"&gt;XML related modules&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works well, but does not achieve exactly what I want since it returns me also for instance the &lt;strong&gt;SVG::XML&lt;/strong&gt; which is not actually prefixed by &lt;strong&gt;XML::&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TxiC-Jot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/696xvyzky4j2edsvdnsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxiC-Jot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/696xvyzky4j2edsvdnsr.png" alt="Problem"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#cpanmeta-the-great" class="anchor"&gt;
  &lt;/a&gt;
  CPANMeta the great
&lt;/h1&gt;

&lt;p&gt;By asking on the good old IRC, I get a solution thanks to &lt;a href="https://cpanmeta.grinnz.com"&gt;CPANMeta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then list all &lt;a href="https://cpanmeta.grinnz.com/packages?module=XML%3A%3A&amp;amp;match_mode=prefix"&gt;XML::* modules&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2sqyfG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mahc6obx5924sd6fw7jy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2sqyfG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mahc6obx5924sd6fw7jy.png" alt="CPANMeta"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#manual-grep" class="anchor"&gt;
  &lt;/a&gt;
  Manual grep
&lt;/h1&gt;

&lt;p&gt;The quick and dirty hack!&lt;/p&gt;

&lt;p&gt;I downloaded the &lt;code&gt;02packages.details.txt&lt;/code&gt; file from &lt;a href="https://www.cpan.org/modules/02packages.details.txt"&gt;CPAN.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then using a grep&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"^XML::"&lt;/span&gt; 02packages.details.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the output is a long list of modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;XML::XSS                         v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Comment                v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Document               v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Element                v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::ProcessingInstruction  v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Role::Renderer         v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Role::StyleAttribute   v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::StyleAttribute         v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Stylesheet::HTML2TD    v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Template               v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XSS::Text                   v0.3.5  Y/YA/YANICK/XML-XSS-0.3.5.tar.gz
XML::XUpdate::LibXML           0.006000  P/PA/PAJAS/XML-XUpdate-LibXML-0.6.0.tar.gz
XML::YYLex                         0.04  B/BO/BOEWE/XML-YYLex-0.04.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#more-experiments" class="anchor"&gt;
  &lt;/a&gt;
  More experiments
&lt;/h1&gt;

&lt;p&gt;I tried also to use &lt;a href="https://metacpan.org/pod/CPAN::02Packages::Search"&gt;CPAN::02Packages::Search&lt;/a&gt; but it seems to only allow exact match.&lt;/p&gt;

&lt;p&gt;Look at this working code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;CPAN::02Packages::&lt;/span&gt;&lt;span class="nv"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Data::&lt;/span&gt;&lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CPAN::02Packages::&lt;/span&gt;&lt;span class="nv"&gt;Search&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./02packages.details.txt&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;search&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Plack&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I tried to tweak it with &lt;code&gt;$index-&amp;gt;search('XML::*');&lt;/code&gt; or &lt;code&gt;$index-&amp;gt;search('XML::.*');&lt;/code&gt; but it is not valid 😕&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/CPAN::Common::Index#search_packages-(ABSTRACT)"&gt;CPAN::Common::Index::Mirror&lt;/a&gt; is promising to do the job according to the documentation&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6QvcEMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ck8wq5gg14cm5ig3eyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6QvcEMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ck8wq5gg14cm5ig3eyj.png" alt="Index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I was not able to make it work &lt;em&gt;at first&lt;/em&gt; 😃&lt;/p&gt;

&lt;p&gt;I started with this code snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;CPAN::Common::Index::Mux::&lt;/span&gt;&lt;span class="nv"&gt;Ordered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Data::&lt;/span&gt;&lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CPAN::Common::Index::Mux::&lt;/span&gt;&lt;span class="nv"&gt;Ordered&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;assemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;MetaDB&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s"&gt;Mirror&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;mirror&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://cpan.cpantesters.org&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;search_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XML::LibXML&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And tried various &lt;code&gt;XML::*&lt;/code&gt; and &lt;code&gt;XML::.*&lt;/code&gt; and &lt;code&gt;/^XML::.*/&lt;/code&gt; and &lt;code&gt;m/^XML::.*/&lt;/code&gt; and the same with &lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;::&lt;/code&gt; but no way 😬&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a class="comment-mentioned-user" href="https://dev.to/grinnz"&gt;@grinnz&lt;/a&gt;
, I get it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;CPAN::Common::Index::Mux::&lt;/span&gt;&lt;span class="nv"&gt;Ordered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Data::&lt;/span&gt;&lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CPAN::Common::Index::Mux::&lt;/span&gt;&lt;span class="nv"&gt;Ordered&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;assemble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;MetaDB&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="s"&gt;Mirror&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;mirror&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://cpan.cpantesters.org&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;search_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;qr/^XML::/&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That will returns several packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$VAR2326&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;package&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XML::XSH::Parser&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cpan:///distfile/CHOROBA/XML-XSH-1.8.6.tar.gz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
           &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nv"&gt;$VAR2327&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.48&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;package&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XML::XSLT&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cpan:///distfile/JSTOWE/XML-XSLT-0.48.tar.gz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
           &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nv"&gt;$VAR2328&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;package&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XML::XSLT::DOM::TextDOE&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.31&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
             &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cpan:///distfile/MAHEX/XML-XSLT-0.31.tar.gz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
           &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I see there are also some other possible alternatives like &lt;a href="https://metacpan.org/pod/App::CPANIDX"&gt;App::CPANIDX&lt;/a&gt; or maybe &lt;a href="https://metacpan.org/pod/distribution/CPANDB/lib/CPANDB/Module.pod"&gt;CPANDB&lt;/a&gt;?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#metacpan-native-treeview" class="anchor"&gt;
  &lt;/a&gt;
  MetaCPAN native treeview
&lt;/h1&gt;

&lt;p&gt;I wonder if it should not simply be part of MetaCPAN. I other words a &lt;strong&gt;native tree view in MetaCPAN&lt;/strong&gt; 💃&lt;/p&gt;

&lt;p&gt;Maybe I'm missing a point, but a feature like this would make me happy for a while.&lt;/p&gt;

&lt;p&gt;What about something like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFQxz6NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8zn3qriemgtm2rf84ip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFQxz6NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8zn3qriemgtm2rf84ip.png" alt="CPAN treeview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/browse-cpan-modules-per-namespaces-6p</id>
    <published>2021-02-22T14:07:34Z</published>
    <updated>2021-02-22T14:07:34Z</updated>
    <category term="perl"/>
    <category term="metacpan"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/ngh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/ngh</id>
    <published>2021-02-22T10:00:53Z</published>
    <updated>2021-02-22T10:00:53Z</updated>
  </entry>
  <entry>
    <title>Join Our Merry Band of Perl Programmers. Perl in Belarus</title>
    <link rel="alternate" href="https://job.perl.careers/kf1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools. Our client has opened a new office in Belarus. This role offers a unique opportunity to join an established company in a new space.</div>
    </content>
    <id>https://job.perl.careers/kf1</id>
    <published>2021-02-22T10:00:52Z</published>
    <updated>2021-02-22T10:00:52Z</updated>
  </entry>
  <entry>
    <title>Cooking Up Something Good. Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/u7l" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If your mouth is watering at the thought of joining this dynamic team and you’re a senior Perl programmer with a solid understanding of Go programming languages, they just might set a place for you at the table.</div>
    </content>
    <id>https://job.perl.careers/u7l</id>
    <published>2021-02-22T10:00:51Z</published>
    <updated>2021-02-22T10:00:51Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/jkf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/jkf</id>
    <published>2021-02-22T10:00:50Z</published>
    <updated>2021-02-22T10:00:50Z</updated>
  </entry>
  <entry>
    <title>Not All Heroes Wear Capes. Perl in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/deu" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client takes the legwork out of the hunt for the best bargain, offering one of the largest product and price comparison platforms in German-speaking countries. They’re looking for a heroic Perl programmer to develop and deliver quality content and all the info users need to find their gadgets for the right price.</div>
    </content>
    <id>https://job.perl.careers/deu</id>
    <published>2021-02-22T10:00:49Z</published>
    <updated>2021-02-22T10:00:49Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021 </title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-02-22T10:00:48Z</published>
    <updated>2021-02-22T10:00:48Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will take place online between March 24-26 2021. The private ticket will be cheaper (EUR 30). People who register in time and transfer the participation fee, will get exclusive extras.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-02-22T10:00:47Z</published>
    <updated>2021-02-22T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Regular Expression: Master Manipulator of Text</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, March 4, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-02-22T10:00:46Z</published>
    <updated>2021-02-22T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, February 18, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-02-22T10:00:45Z</published>
    <updated>2021-02-22T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 25, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-02-22T10:00:44Z</published>
    <updated>2021-02-22T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, February 24, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-02-22T10:00:43Z</published>
    <updated>2021-02-22T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Rex</title>
    <link rel="alternate" href="https://perlmaven.com/rex" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ferki taught me a few things about <a href="https://www.rexify.org/">Rex</a> and now we are planning a live session in which he is going to teach me a lot more. Follow my <a href="https://www.twitch.tv/szabgab">Twitch</a> channel to get notified.</div>
    </content>
    <id>https://perlmaven.com/rex</id>
    <published>2021-02-22T10:00:42Z</published>
    <updated>2021-02-22T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Add FAQ entry to MetaCPAN</title>
    <link rel="alternate" href="https://perlmaven.com/add-faq-to-metacpan" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Some of the distributions on CPAN are marked as 'looking for maintainer'. <a href="https://metacpan.org/pod/Test::Class">Test::Class</a> displayed this message, so I asked for it and became the maintainer of that module. Then came the question, how can I remove the notifiaction about the need for a maintainer. In this video you will see how to add this explanation to the <a href="https://metacpan.org/about/faq#howtoadoptadistribution">FAQ</a> of MetaCPAN and then how to add a link from the notification banner to this entry in the FAQ.</div>
    </content>
    <id>https://perlmaven.com/add-faq-to-metacpan</id>
    <published>2021-02-22T10:00:41Z</published>
    <updated>2021-02-22T10:00:41Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/02/cccxxix-19-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/02/cdlv-metacpan-weekly-report-teng.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/02/cdlxxviii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-02-22T10:00:40Z</published>
    <updated>2021-02-22T10:00:40Z</updated>
  </entry>
  <entry>
    <title>2021.07 Easy | Hard</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/02/15/2021-07-easy-hard/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/02/15/2021-07-easy-hard/</id>
    <published>2021-02-22T10:00:39Z</published>
    <updated>2021-02-22T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Accept a payment with perl</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=fOSXTpzlqts" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In this episode, you'll learn how to accept a one time payment with stripe-perl aka Net::Stripe.</div>
    </content>
    <id>https://www.youtube.com/watch?v=fOSXTpzlqts</id>
    <published>2021-02-22T10:00:38Z</published>
    <updated>2021-02-22T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Thank You - Team PWC</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=kr0Xz2BYvXU" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Celebrating the 100th week of The Weekly Challenge.</div>
    </content>
    <id>https://www.youtube.com/watch?v=kr0Xz2BYvXU</id>
    <published>2021-02-22T10:00:37Z</published>
    <updated>2021-02-22T10:00:37Z</updated>
  </entry>
  <entry>
    <title>FOSDEM Videos</title>
    <link rel="alternate" href="https://video.fosdem.org/2021/D.perl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please find all the talks recorded at the recently-held FOSDEM conference.</div>
    </content>
    <id>https://video.fosdem.org/2021/D.perl/</id>
    <published>2021-02-22T10:00:36Z</published>
    <updated>2021-02-22T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Carp::Always to find the source of the problem</title>
    <link rel="alternate" href="https://perlmaven.com/carp-always" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In Perl warn and die tell us where a problem was noticed. carp and croak tell us where it was created.</div>
    </content>
    <id>https://perlmaven.com/carp-always</id>
    <published>2021-02-22T10:00:35Z</published>
    <updated>2021-02-22T10:00:35Z</updated>
  </entry>
  <entry>
    <title>List::GroupBy</title>
    <link rel="alternate" href="https://perlmaven.com/list-groupby" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">List::GroupBy is a small module converting a list of hashes to some multi-level hash tabele. This is a code-reading video.</div>
    </content>
    <id>https://perlmaven.com/list-groupby</id>
    <published>2021-02-22T10:00:34Z</published>
    <updated>2021-02-22T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/02/15/PWC100/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis' one-liner is easily decodable and does the job.</div>
    </content>
    <id>https://wlmb.github.io/2021/02/15/PWC100/</id>
    <published>2021-02-22T10:00:33Z</published>
    <updated>2021-02-22T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 100</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-100-4lf6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon came up with a cryptic one-liner. Decoding one-liners is always fun.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-100-4lf6</id>
    <published>2021-02-22T10:00:32Z</published>
    <updated>2021-02-22T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100: Time Triangle</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/02/Perl_Weekly_Challenge_100__Time_Triangle.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It is pretty evident that Roger doesn't like Perl one-liners. He came up with detailed solution as always.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/02/Perl_Weekly_Challenge_100__Time_Triangle.html</id>
    <published>2021-02-22T10:00:31Z</published>
    <updated>2021-02-22T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100: times and triangles</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/02/15/PerlWeeklyChallenge100.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca shares his Raku skill and presented some Raku magic.</div>
    </content>
    <id>https://fluca1978.github.io/2021/02/15/PerlWeeklyChallenge100.html</id>
    <published>2021-02-22T10:00:30Z</published>
    <updated>2021-02-22T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100: Fun Time and Triangle Sum</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/02/perl-weekly-challenge-100-fun-time-and-triangle-sum.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent's modular approach is always very elegant. Thanks for sharing.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/02/perl-weekly-challenge-100-fun-time-and-triangle-sum.html</id>
    <published>2021-02-22T10:00:29Z</published>
    <updated>2021-02-22T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100 part 2</title>
    <link rel="alternate" href="https://perl.kiwi/tales/2021/02/20/perl_weekly_challenge_100_part_2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lance presented us a double bonus this week, thank you.</div>
    </content>
    <id>https://perl.kiwi/tales/2021/02/20/perl_weekly_challenge_100_part_2/</id>
    <published>2021-02-22T10:00:28Z</published>
    <updated>2021-02-22T10:00:28Z</updated>
  </entry>
  <entry>
    <title>pErLM for the Perl Weekly Challenge 100</title>
    <link rel="alternate" href="https://perl.kiwi/tales/2021/02/18/perlm-for-the-perl-weekly-challenge-100/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lance promotes TDD with great precision. Thanks for the kind words.</div>
    </content>
    <id>https://perl.kiwi/tales/2021/02/18/perlm-for-the-perl-weekly-challenge-100/</id>
    <published>2021-02-22T10:00:27Z</published>
    <updated>2021-02-22T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 100</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/02/perl-weekly-challenge-100.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James turned out to be a big fan of Perl one-liners. I loved his code.</div>
    </content>
    <id>http://blogs.perl.org/users/james_curtis-smith/2021/02/perl-weekly-challenge-100.html</id>
    <published>2021-02-22T10:00:26Z</published>
    <updated>2021-02-22T10:00:26Z</updated>
  </entry>
  <entry>
    <title>PWC100 - Triangle Sum</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/02/18/pwc100-triangle-sum/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I enjoy the story behind the solution. The solution itself is so trivial.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/02/18/pwc100-triangle-sum/</id>
    <published>2021-02-22T10:00:25Z</published>
    <updated>2021-02-22T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC100 - Fun Time</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/02/17/pwc100-fun-time/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's beautifully laid out solution is very pleasing.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/02/17/pwc100-fun-time/</id>
    <published>2021-02-22T10:00:24Z</published>
    <updated>2021-02-22T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Turning Over A New Digit: Perl Weekly Challenge #100</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/02/16/turning-over-a-new-digit-perl-weekly-challenge-100.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave's contribution is always verbose and his blog posts explain every minute detail.</div>
    </content>
    <id>https://jacoby.github.io/2021/02/16/turning-over-a-new-digit-perl-weekly-challenge-100.html</id>
    <published>2021-02-22T10:00:23Z</published>
    <updated>2021-02-22T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Time Traveling Under Pyramid Power</title>
    <link rel="alternate" href="https://colincrain.com/2021/02/20/time-traveling-under-pyramid-power/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin uses modulo to solve the fun time task; a very different approach.</div>
    </content>
    <id>https://colincrain.com/2021/02/20/time-traveling-under-pyramid-power/</id>
    <published>2021-02-22T10:00:22Z</published>
    <updated>2021-02-22T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Fun Sum Time with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/fun-sum-time.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As always, Arne's blog post is full of Raku tricks. You don't want to miss it.</div>
    </content>
    <id>https://raku-musings.com/fun-sum-time.html</id>
    <published>2021-02-22T10:00:21Z</published>
    <updated>2021-02-22T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Challenge 100</title>
    <link rel="alternate" href="https://andinus.tilde.institute/pwc/challenge-100/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Andinus use of Grammar is a great example.</div>
    </content>
    <id>https://andinus.tilde.institute/pwc/challenge-100/</id>
    <published>2021-02-22T10:00:20Z</published>
    <updated>2021-02-22T10:00:20Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 100</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/02/21" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam also shows his regex skill while dealing with this week's task.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/02/21</id>
    <published>2021-02-22T10:00:19Z</published>
    <updated>2021-02-22T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100: Triangle Sum</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/02/21/perl-weekly-challenge-100-triangle-sum/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's use of map to read the input numbers is interesting.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/02/21/perl-weekly-challenge-100-triangle-sum/</id>
    <published>2021-02-22T10:00:18Z</published>
    <updated>2021-02-22T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100: Fun Time</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/02/21/perl-weekly-challenge-100-fun-time/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail shows his one-liner skill with great detail.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/02/21/perl-weekly-challenge-100-fun-time/</id>
    <published>2021-02-22T10:00:17Z</published>
    <updated>2021-02-22T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-100/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron is becoming a master of the one-liner in Perl. It is always fun to decode his code.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-100/</id>
    <published>2021-02-22T10:00:16Z</published>
    <updated>2021-02-22T10:00:16Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 100</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-100" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Fun Time" and "Triangle Sum" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-100</id>
    <published>2021-02-22T10:00:15Z</published>
    <updated>2021-02-22T10:00:15Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 101</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-101" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "Pack a Spiral" and "Origin-containing Triangle". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-101</id>
    <published>2021-02-22T10:00:14Z</published>
    <updated>2021-02-22T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Maintaining Perl 5 (Tony Cook): January 2021 Grant Report</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tony-report-21-01" type="text/html"/>
    <id>https://news.perlfoundation.org/post/tony-report-21-01</id>
    <published>2021-02-22T10:00:13Z</published>
    <updated>2021-02-22T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Inline::F2003</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ron_grunwald/2021/02/inline-f2003-103.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Do you want to inline Fortran in your Perl script?</div>
    </content>
    <id>http://blogs.perl.org/users/ron_grunwald/2021/02/inline-f2003-103.html</id>
    <published>2021-02-22T10:00:12Z</published>
    <updated>2021-02-22T10:00:12Z</updated>
  </entry>
  <entry>
    <title>New compression module Gzip::Libdeflate</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/02/new-compression-module-gziplibdeflate.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">libdeflate compression library turned into a CPAN module:</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2021/02/new-compression-module-gziplibdeflate.html</id>
    <published>2021-02-22T10:00:11Z</published>
    <updated>2021-02-22T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Excel::Grinder</title>
    <link rel="alternate" href="https://metacpan.org/pod/Excel::Grinder" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Import/export plain Excel (XLSX) files as simply as possible.</div>
    </content>
    <id>https://metacpan.org/pod/Excel::Grinder</id>
    <published>2021-02-22T10:00:10Z</published>
    <updated>2021-02-22T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Net::Curl::Easier</title>
    <link rel="alternate" href="https://metacpan.org/pod/Net::Curl::Easier" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Convenience wrapper around Net::Curl::Easy</div>
    </content>
    <id>https://metacpan.org/pod/Net::Curl::Easier</id>
    <published>2021-02-22T10:00:09Z</published>
    <updated>2021-02-22T10:00:09Z</updated>
  </entry>
  <entry>
    <title>The Raku Foundation</title>
    <link rel="alternate" href="https://github.com/Raku/problem-solving/issues/263" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Please do share your opinion on the subject.</div>
    </content>
    <id>https://github.com/Raku/problem-solving/issues/263</id>
    <published>2021-02-22T10:00:08Z</published>
    <updated>2021-02-22T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Corinna Project</title>
    <link rel="alternate" href="https://github.com/Ovid/Cor/wiki" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you have followed the Corinna project and have thoughts about it being in the Perl core, then why not share with the team?</div>
    </content>
    <id>https://github.com/Ovid/Cor/wiki</id>
    <published>2021-02-22T10:00:07Z</published>
    <updated>2021-02-22T10:00:07Z</updated>
  </entry>
  <entry>
    <title>An easy way to use WebSockets?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/karjala/2021/02/an-easy-way-to-use-websockets.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">An interesting use case for WebSockets.</div>
    </content>
    <id>http://blogs.perl.org/users/karjala/2021/02/an-easy-way-to-use-websockets.html</id>
    <published>2021-02-22T10:00:06Z</published>
    <updated>2021-02-22T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Setup Mojolicious using Vagrant</title>
    <link rel="alternate" href="https://ashutosh.dev/blog/post/2021/02/setup-mojolicious-using-vagrant" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Detailed guide to setting up Mojolicious using Vagrant.</div>
    </content>
    <id>https://ashutosh.dev/blog/post/2021/02/setup-mojolicious-using-vagrant</id>
    <published>2021-02-22T10:00:05Z</published>
    <updated>2021-02-22T10:00:05Z</updated>
  </entry>
  <entry>
    <title>To help Perl, just blog</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/to-help-perl-just-blog-9h4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Find out how blogging can help to promote Perl.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/to-help-perl-just-blog-9h4</id>
    <published>2021-02-22T10:00:04Z</published>
    <updated>2021-02-22T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Better Perl: More on signatures and types</title>
    <link rel="alternate" href="https://phoenixtrap.com/index.php/2021/02/16/better-perl-more-on-signatures-and-types/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark continued playing with method signatures.</div>
    </content>
    <id>https://phoenixtrap.com/index.php/2021/02/16/better-perl-more-on-signatures-and-types/</id>
    <published>2021-02-22T10:00:03Z</published>
    <updated>2021-02-22T10:00:03Z</updated>
  </entry>
  <entry>
    <title>rt.cpan.org is staying</title>
    <link rel="alternate" href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/02/msg259168.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ricardo shared the good news with us.</div>
    </content>
    <id>https://www.nntp.perl.org/group/perl.perl5.porters/2021/02/msg259168.html</id>
    <published>2021-02-22T10:00:02Z</published>
    <updated>2021-02-22T10:00:02Z</updated>
  </entry>
  <entry>
    <title>How to install a Perl environment with a single command?</title>
    <link rel="alternate" href="https://www.activestate.com/resources/videos/state-tool-demo-how-to-install-a-perl-environment-with-a-single-command/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=video-perl-single-command&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">This video demonstrates how to use ActiveState Platform’s CLI interface, the State Tool to install Perl environments generally. For purposes of this demo, we compare two web frameworks: Mojolicious versus Dancer. &lt;a href="https://www.activestate.com/resources/videos/state-tool-demo-how-to-install-a-perl-environment-with-a-single-command/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=video-perl-single-command&amp;utm_campaign=user-acquisition"&gt;Take a look!&lt;/a&gt;</content>
    <id>https://www.activestate.com/resources/videos/state-tool-demo-how-to-install-a-perl-environment-with-a-single-command/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=video-perl-single-command&amp;utm_campaign=user-acquisition</id>
    <published>2021-02-22T10:00:01Z</published>
    <updated>2021-02-22T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#500 - TPF and TRF</title>
    <link rel="alternate" href="http://perlweekly.com/archive/500.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>What an honour to present the 500th edition of the Perl Weekly newsletter. Thank you Gabor Szabo.</p>
<p>Let's begin the week with the good news, rt.cpan.org is staying. You can find more details <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/02/msg259168.html">here</a>.</p>
<p>Andrew Shitov raised an <a href="https://github.com/Raku/problem-solving/issues/263">issue</a> with regard to creating separate entity - "The Raku Foundation". Feel free to share your views on the subject.</p>
<p>Did you know Cor has been given a new name, Corinna?</p>
<p>Curtis Poe recently requested the general public to share their views about Corinna being in the Perl core. Please do checkout the <a href="https://github.com/Ovid/Cor/wiki">wiki page</a></p>
<p>This week, we celebrated the 100th week of <a href="https://perlweeklychallenge.org">The Weekly Challenge</a>. I even created <a href="https://www.youtube.com/watch?v=kr0Xz2BYvXU">YouTube Video</a> to thank Team PWC for their support and encouragements.</p>
<p>After a long time, I finally got the opportunity to try Pair Programming thanks to my friend, Julien Fiegehenn. We spent an hour and half and got <a href="https://metacpan.org/release/MooX-Clone">MooX::Clone</a> released to CPAN in the end. It all started when I was working on my latest project <a href="https://github.com/manwar/design-patterns">Design Patterns using Modern Perl</a>, more specifically, <a href="https://github.com/manwar/design-patterns/tree/master/15-prototype">Prototype Design Pattern</a> where I was looking for a clean interface to create a clone of Moo object.</p>
<p>Zum ersten Mal teilen wir <a href="https://blog.perl-academy.de">Blogs</a> in nicht-englischer Sprache. Ich hoffe es würde unseren deutschen Lesern gefallen.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>http://perlweekly.com/archive/500.html</id>
    <published>2021-02-22T10:00:00Z</published>
    <updated>2021-02-22T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 100: Fun Time and Triangle Sum</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/02/perl-weekly-challenge-100-fun-time-and-triangle-sum.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10100</id>
    <published>2021-02-22T03:22:36Z</published>
    <updated>2021-02-22T03:26:41Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 100 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-100/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Fun Time</h2>

<p><em>You are given a time (12 hour / 24 hour).</em></p>

<p><em>Write a script to convert the given time from 12 hour format to 24 hour format and vice versa.</em></p>

<p><em>Ideally we expect a one-liner.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 05:15 pm or 05:15pm
Output: 17:15
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: 19:15
Output: 07:15 pm or 07:15pm
</code></pre>

<p>Well, I like concise code, but I don&#8217;t think it makes real sense to try to pack this task into a one-liner. I have no doubt that it can be done, but it will either be not a real one-liner (like a pipeline chaining multiple statements into one expression), or a difficult to understand golfing attempt. So, I will not try to do a one-liner.</p>

<h3>Fun Time in Raku</h3>

<p>We use a regex to detect whether the input string matches &#8220;am&#8221; or &#8220;pm&#8221;; if so, we remove that &#8220;am&#8221; or &#8220;pm&#8221; string and add 12 hours if the matched string was &#8220;pm&#8221;; otherwise, we subtract 12 from the hour part it if is larger than 12 and add &#8220;pm&#8221; or &#8220;am&#8221; depending on the case. </p>

<pre><code>use v6;

my $time = @*ARGS[0];
if $time ~~ /(&lt;[ap]&gt;)m/ {
    if $0 eq 'a'  {
        $time ~~ s/(\d\d':'\d\d).*/$0/;
    } else {
        $time ~~ s/(\d\d)':'(\d\d).*/{$0 + 12}:$1/;
    }
} else {
    $time ~~ /^(\d\d)':'(\d\d)/;
    my ($suffix, $hour) = $0 &gt; 12 ?? ('pm', $0 - 12) !! ('am', $0);
    $time = "$hour:$1 $suffix";
}
say $time;
</code></pre>

<p>These are some execution examples with various input strings:</p>

<pre><code>$ raku fun-time.raku '10:54'
10:54 am
-
$ raku fun-time.raku '17:54'
5:54 pm
-
$ raku fun-time.raku '10:54 pm'
22:54
-
$ raku fun-time.raku '10:54 am'
10:54
</code></pre>

<h3>Fun Time in Perl</h3>

<p>This is a port to Perl of the Raku program just above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $time = shift;
if ($time =~ /([ap])m/) {
    if ($1 eq 'a')  {
        $time =~ s/(\d\d:\d\d).*/$1/;
    } else {
        $time =~ /(\d\d):(\d\d.).*/;
        my $hour = $1 + 12;
        $time = "$hour:$2";
    }
} else {
    $time =~ /^(\d\d):(\d\d)/;
    my ($suffix, $hour) = $1 &gt; 12 ? ('pm', $1 - 12) : ('am', $1);
    $time = "$hour:$2 $suffix";
}
say $time;
</code></pre>

<p>And some execution examples:</p>

<pre><code>$ perl fun-time.pl '10:54 pm'
22:54

$ perl fun-time.pl '10:54 am'
10:54

$ perl fun-time.pl '10:54'
10:54 am

$ perl fun-time.pl '15:54'
3:54 pm
</code></pre>

<h2>Task 2: Triangle Sum</h2>

<p><em>You are given triangle array.</em></p>

<p><em>Write a script to find the minimum path sum from top to bottom.</em></p>

<p><em>When you are on index i on the current row then you may move to either index i or index i + 1 on the next row.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: Triangle = [ [1], [2,4], [6,4,9], [5,1,7,2] ]
Output: 8

Explanation: The given triangle

            1
           2 4
          6 4 9
         5 1 7 2

The minimum path sum from top to bottom:  1 + 2 + 4 + 1 = 8

             [1]
           [2]  4
           6 [4] 9
          5 [1] 7 2
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: Triangle = [ [3], [3,1], [5,2,3], [4,3,1,3] ]
Output: 7

Explanation: The given triangle

            3
           3 1
          5 2 3
         4 3 1 3

The minimum path sum from top to bottom: 3 + 1 + 2 + 1 = 7

             [3]
            3  [1]
           5 [2] 3
          4 3 [1] 3
</code></pre>

<h3>Triangle Sum in Raku</h3>

<p>We use the <code>traverse</code> recursive subroutine to find the smallest path through the triangular array:</p>

<pre><code>use v6;

my @triangle = (1), (2,4), (6,4,9), (5,1,7,2);
my @min-path = map { $_[0] }, @triangle; # pick any path
my $min-path-val = @min-path.sum;
my $index = 0;
traverse @triangle, (), $index;
say @min-path;

sub traverse (@triangle, @path, $index) {
    my @first-line = @triangle[0];
    my @new-triangle = @triangle[1 .. @triangle.end];
    say "First-line: ", @first-line;
    my @new-path = | (@path, @first-line[$index]);
    say @new-path, "  ", "\n";
    if @new-triangle.elems &gt; 0 {
        traverse(@new-triangle, @new-path, $index);
        traverse(@new-triangle, @new-path, $index + 1);
    } else {
        my $new-path-val = @new-path.sum;
        if $new-path-val &lt; $min-path-val {
            @min-path = @new-path;
            $min-path-val = $new-path-val
        }
    }
}
</code></pre>

<p>Output:</p>

<p>$ raku triangle-sum.raku
1 2 4 1</p>

<h3>Triangle Sum in Perl</h3>

<p>Except for the fact that we define also a <code>sum</code> subroutine, this essentially the same Raku algorithm ported to Perl:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $triangle = [ [1], [2,4], [6,4,9], [5,1,7,2] ];
# $triangle = [ [1], [2,4], [6,30,9], [30,30,30,2] ];
my $min_path = [ map { $_-&gt;[0] } @$triangle];
my $min_path_val = sum($min_path);
my $index = 0;
find_min_path($triangle, [], $index);
say "@$min_path";

sub sum {
    my $aref = shift;
    my $sum = 0;
    $sum += $_ for @$aref;
    return $sum;
}

sub find_min_path {
    my ($tri_ref, $path, $index) = @_;
    my @triangle = @$tri_ref;
    my @first_row = @{$triangle[0]};
    my @new_triangle = @triangle[1 .. $#triangle];
    my $new_path = [ @$path, $first_row[$index] ];
    if (@new_triangle) {
        find_min_path([@new_triangle], $new_path , $index);
        find_min_path([@new_triangle], $new_path, $index + 1);
    } else { 
        my $new_path_val = sum($new_path);
        if ($new_path_val &lt; $min_path_val) {
            $min_path = $new_path;
            $min_path_val = $new_path_val;
        }
    }
}
</code></pre>

<p>Output with the above input data:</p>

<pre><code>$ perl  triangle-sum.pl
1 2 4 1
</code></pre>

<p>If you uncomment the second triangle definition, you get the following output:</p>

<pre><code>$ perl  triangle-sum.pl
1 4 9 2
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, February 28, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>&lt;p&gt;The Weekly Challenge 100&lt;/p&gt;</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/02/21#pwc100" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a time (12 hour / 24 hour). Write a script to convert the given time from 12 hour format to 24 hour format and vice versa.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
perl -e 'shift=~/(\d+):(\d\d\s*((am|pm)))/;if($1 &lt; 12 &amp;&amp; $3 eq "pm"){$h = $1 + 12}elsif($1 &gt; 12 &amp;&amp; $3 eq "pm"){$h = "0" . ($1 - 12)}else{$h = $1}print "$h:$2\n"' "17:15 pm"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
perl -e 'shift=~/(\d+):(\d\d\s*((am|pm)))/;if($1 &lt; 12 &amp;&amp; $3 eq "pm"){$h = $1 + 12}elsif($1 &gt; 12 &amp;&amp; $3 eq "pm"){$h = "0" . ($1 - 12)}else{$h = $1}print "$h:$2\n"' "17:15 pm"
05:15 pm
perl -e 'shift=~/(\d+):(\d\d\s*((am|pm)))/;if($1 &lt; 12 &amp;&amp; $3 eq "pm"){$h = $1 + 12}elsif($1 &gt; 12 &amp;&amp; $3 eq "pm"){$h = "0" . ($1 - 12)}else{$h = $1}print "$h:$2\n"' "05:15 pm"
17:15 pm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Ok, so this isn;t going to win and &lt;em&gt;Perl Golf&lt;/em&gt; competitions, that’s for sure! Frankly, this approach using regexes might not be the best for succinctly handling the bi-directionality.&lt;/p&gt;
&lt;p&gt;For anyone that might not be familiar &lt;code&gt;shift=~/(\d+):(\d\d\s*((am|pm)))/&lt;/code&gt; means &lt;em&gt;shift the first argument off of &lt;span class="citation" data-cites="ARGV"&gt;@ARGV&lt;/span&gt; (the command line arguments and then match against the regex.&lt;/em&gt; This is equivalent to &lt;code&gt;$ARGV[0]=~/(\d+):(\d\d\s*((am|pm)))/&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given triangle array. Write a script to find the minimum path sum from top to bottom. When you are on index i on the current row then you may move to either index i or index i + 1 on the next row.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub minimum_sum{
    my(@triangle) = @_;
    my($i, $j) = (0, 0);
    my $sum = $triangle[0]-&gt;[0]; 
    while($i &lt; @triangle){
        unless(!exists($triangle[$i+1])){
            $j = ($triangle[$i+1]-&gt;[$j] &gt;= $triangle[$i+1]-&gt;[$j+1]) ? $j+1 : $j; 
            $sum += $triangle[$i+1]-&gt;[$j]; 
        } 
        $i++;
    }  
    return $sum;
}

MAIN:{
    my(@TRIANGLE);
    @TRIANGLE = ([1], [2, 4], [6, 4, 9], [5, 1 , 7, 2]); 
    print minimum_sum(@TRIANGLE) . "\n"; 

    @TRIANGLE =([3], [3, 1], [5, 2, 3], [4, 3, 1, 3]); 
    print minimum_sum(@TRIANGLE) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-2.pl 
8
7
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I think this is a relatively well known &lt;em&gt;greedy&lt;/em&gt; tactic. In order to minimize the total sum, make the minimum choice at each step.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-100/"&gt;Challenge 100&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc100</id>
    <published>2021-02-21T17:09:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>rt.cpan.org to remain online</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin_mcgrath/2021/02/rtcpanorg-to-remain-online.html"/>
    <id>tag:blogs.perl.org,2021:/users/martin_mcgrath//2910.10099</id>
    <published>2021-02-21T16:00:28Z</published>
    <updated>2021-02-21T16:06:21Z</updated>
    <author>
        <name>Martin McGrath</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/martin_mcgrath/">
        <![CDATA[<p>Despite rt.cpan.org still displaying the sunset message, it is in fact <strong>not</strong> going away forever on the 1st of March, but will have an 'extended downtime' while it is moved elsewhere. In future it'd be nice if communications of such things, and even allowing others to have a say on the matter, could be handled better.</p>

<p>See also:<br />
<ul><br />
	<li><a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/02/msg259168.html">https://www.nntp.perl.org/group/perl.perl5.porters/2021/02/msg259168.html</a></li><br />
        <li><a href="https://news.perlfoundation.org/post/rt-cpan-org-future">https://news.perlfoundation.org/post/rt-cpan-org-future</a></li><br />
        <li><a href="http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html">http://blogs.perl.org/users/martin_mcgrath/2021/01/regarding-the-closure-of-rtcpan.html</a></li><br />
</ul></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Inline::F2003</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ron_grunwald/2021/02/inline-f2003-103.html"/>
    <id>tag:blogs.perl.org,2021:/users/ron_grunwald//3098.10097</id>
    <published>2021-02-21T07:05:48Z</published>
    <updated>2021-02-21T08:00:09Z</updated>
    <author>
        <name>Ron Grunwald</name>
        <uri>https://sourceforge.net/projects/inline-f2003/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ron_grunwald/">
        <![CDATA[<p>Hi all,</p>

<p>I started the Inline::F2003 project in 2017 because I have a strong interest in modern Fortran and Perl programming.</p>

<p>The project features the Perl module <em>Inline::F2003</em>. This module allows modern Fortran source to be inlined and called from a Perl program. The module compiles the Fortran source and builds an executable shared library that is loaded into the Perl system.</p>

<p><em>Inline::F2003</em> is usually invoked at compile-time. The source fragment below shows typical use of the module.</p>

<pre><code>use constant { BOOL_T =&gt; 1, BOOL_F =&gt; 0 };
use File::Spec;

use Inline F2003 =&gt; "DATA",
         ( FOR        =&gt; "gfortran",
           MAKEFILE   =&gt; "matopmul.mk",
           MAKEDIR    =&gt; File::Spec-&gt;curdir(),
           SRCLIST    =&gt; [ qw( ModMatrixOps.f03 ) ],
           DIRECTORY  =&gt; $main::InlineRoot,
           PRINT_INFO =&gt; BOOL_T );
</code></pre>

<p>I've uploaded a new version (1.03) to Sourceforge. The project home page is located at,</p>

<p><a href="https://sourceforge.net/projects/inline-f2003/">https://sourceforge.net/projects/inline-f2003/</a></p>

<p>If you are interested in Perl-Fortran interoperability I would encourage you to have a look and let me know what you think. At present the project only runs on Linux systems. All the documentation is contained in the file <em>README.html</em>. Please read it carefully to get a good understanding of the project.</p>

<p>Any comments/suggestions/questions are most appreciated.</p>

<p>Thank you!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>An easy way to use WebSockets?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/karjala/2021/02/an-easy-way-to-use-websockets.html"/>
    <id>tag:blogs.perl.org,2021:/users/karjala//2082.10096</id>
    <published>2021-02-21T06:35:47Z</published>
    <updated>2021-02-21T06:45:56Z</updated>
    <author>
        <name>karjala</name>
        <uri>http://www.karjala.org/</uri>
    </author>
    <category term="webdev" label="webdev" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="websockets" label="websockets" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/karjala/">
        <![CDATA[<p>It's often (for work or for personal projects) that I need to create a real-time feature for a website. This can range from a simple notification whenever an event happens on the server of an existing website, to implementing a real-time multiplayer game or adding a feature inspired from social media websites.</p>

<p>Unfortunately the increase in complexity in code (Perl & JS) and architecture involved in setting up a reliable solution, very often made me forego the opportunity to use WebSockets for many of these projects, and instead resorted to http polling to keep the solution simple for the others to maintain.</p>

<p>So I started looking for a library with a client & server component, that would make life easier. The library would hopefully have to have the following features:</p>

<ul>
	<li>Automatically reconnect to the WebSockets server, after a broken connection</li>
        <li>Server channels that broadcast event streams that browsers can subscribe to, like Socket.io</li>
        <li>A shared data object among all connected clients, that is always kept up to date, like Firebase</li>
        <li>Automatic and transparent retrieval of all missed broadcast events after a temporary disconnect</li>
        <li>Perl compatibility</li>
        <li>Custom authorization routines, to decide who gets to join a channel</li>
        <li>Free and open source self-hosted solution, for privacy so that it can be used in companies, plus because some customers don't like paying monthly subscription fees</li>
        <li>Easy to use and set-up</li>
        <li>(Optionally) allow requests/responses over the WebSocket connection</li>
</ul>

<p>I couldn't find what I was looking for, so I made the solution:</p>

<p><a href="https://boardstreams.dev">The BoardStreams library</a></p>

<p>And I also created a demo site to show some of what's possible with this library:</p>

<p><a href="https://boardstreams.com">https://boardstreams.com</a></p>

<p>That's all. I'm curious to see if you guys think this is interesting to you at all.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Outreachy participation - looking for mentors</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy-2021"/>
  <id>tag:news.perlfoundation.org,2021-02-20:/post/outreachy-2021</id>
  <published>2021-02-20T20:29:16</published>
  <updated>2021-02-20T20:29:16</updated>
  <summary>
  <![CDATA[
     Last year The Perl Foundation participated in Outreachy May to August internships and it was successfully completed. We are looking to participate again this year. At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the Mentor description and add your ideas at our repo. We plan to close our internal submission process 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Last year The Perl Foundation participated in <a href="https://www.outreachy.org/">Outreachy</a> May to August internships and <a href="https://news.perlfoundation.org/post/outreach-2020-complete">it was successfully completed</a>. We are looking to participate again this year.</p>

<p>At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the <a href="https://www.outreachy.org/mentor/#mentor">Mentor description</a> and add your ideas at <a href="https://github.com/perl-foundation-outreach/outreachy-2020-ideas">our repo</a>. We plan to close our internal submission process on February 28th. Note that mentors are expected to spend 5-10 hours per week during the program period.</p>

<p>We also have a Perl/Raku Outreachy discussion forum at <a href="https://groups.google.com/forum/#!forum/perl-foundation-outreach">Google Groups</a>.</p>

<p>Outreachy, formerly The Outreach Program for Women, was started by the GNOME Foundation in 2006 to encourage women to participate in the GNOME project. Since inception the project has grown to include many Free and Open Source organisations, including The Perl Foundation, and now the program has been rebranded and extended to encourage the participation of other underrepresented groups.</p>

<p>Outreachy explicitly invites applicants from around the world who are women (cis and trans), trans men, and genderqueer people. Additionally, they explicitly invite residents and nationals of the United States of any gender who are Black/African American, Hispanic/Latino, American Indian, Alaska Native, Native Hawaiian, or Pacific Islander. Anyone who faces systemic bias or discrimination in the technology industry of their country is invited to apply.  </p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5506210206110693164</id>
    <published>2021-02-20T15:08:00.000+01:00</published>
    <updated>2021-02-20T15:08:48.645+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxix) 19 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.047004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.047004&lt;/strong&gt; on 2021-02-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.047002 was 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/Dumbbench-0.501' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dumbbench&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - More reliable benchmarking with the least amount of thinking &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.501&lt;/strong&gt; on 2021-02-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.111 was 3 years, 7 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.60&lt;/strong&gt; on 2021-02-17&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 7.58 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2021-02-15&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.28&lt;/strong&gt; on 2021-02-19&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.27 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.709' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.709&lt;/strong&gt; on 2021-02-17&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 1.708 was 1 year, 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.16&lt;/strong&gt; on 2021-02-16&lt;/li&gt;  &lt;li&gt;Votes: 80&lt;/li&gt;  &lt;li&gt;Previous version: 10.15 was 1 month, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Minion-Backend-SQLite-v5.0.4' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SQLite backend for Minion job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v5.0.4&lt;/strong&gt; on 2021-02-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: v5.0.3 was 6 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-IRC-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IRC Client for the Mojo IOLoop &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2021-02-17&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 2 years, 8 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.005&lt;/strong&gt; on 2021-02-16&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 3.004 was 6 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.01&lt;/strong&gt; on 2021-02-16&lt;/li&gt;  &lt;li&gt;Votes: 444&lt;/li&gt;  &lt;li&gt;Previous version: 8.73 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-AssetPack-2.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::AssetPack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Compress and convert css, less, sass, javascript and coffeescript files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.11&lt;/strong&gt; on 2021-02-19&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 2.10 was 2 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OAuth2-1.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OAuth2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Auth against OAuth2 APIs &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.59&lt;/strong&gt; on 2021-02-16&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 1 year, 7 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.00' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.00&lt;/strong&gt; on 2021-02-17&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 3.41 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.026' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.026&lt;/strong&gt; on 2021-02-13&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 2.025 was 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SZABGAB/Test-Class-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Class&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Easily create test classes in an xUnit/JUnit style &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2021-02-17&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.50 was 5 years, 8 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.602' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.602&lt;/strong&gt; on 2021-02-19&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.601 was 4 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SREZIC/Tk-804.036' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Tk&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Tk - a Graphical User Interface Toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;804.036&lt;/strong&gt; on 2021-02-14&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 804.035 was 10 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YOREEK/XML-Hash-XS-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;XML::Hash::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Simple and fast hash to XML and XML to hash conversion written in C &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2021-02-13&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 11 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5506210206110693164/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cccxxix-19-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5506210206110693164"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5506210206110693164"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cccxxix-19-cpan-great-modules-released.html" title="(cccxxix) 19 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6418237824611230315</id>
    <published>2021-02-20T15:04:00.004+01:00</published>
    <updated>2021-02-20T15:04:44.492+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlv) metacpan weekly report - Teng</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 53&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Teng"&gt;Teng&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/02/20 14:03:38 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Prima::REPL" target="_blank"&gt;App::Prima::REPL&lt;/a&gt; - a GUI REPL written with Prima for the PDL community.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DataLoader" target="_blank"&gt;DataLoader&lt;/a&gt; - Abstract data loading, auto batch and cache&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GraphQL::Plugin::Convert::DBIC" target="_blank"&gt;GraphQL::Plugin::Convert::DBIC&lt;/a&gt; - convert DBIx::Class schema to GraphQL schema&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::GroupBy" target="_blank"&gt;List::GroupBy&lt;/a&gt; - Group a list of hashref's to a multilevel hash of hashrefs of arrayrefs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::Private::Attribute" target="_blank"&gt;MooX::Private::Attribute&lt;/a&gt; - private attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl::Easier" target="_blank"&gt;Net::Curl::Easier&lt;/a&gt; - Convenience wrapper around Net::Curl::Easy&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common::Apache2" target="_blank"&gt;Regexp::Common::Apache2&lt;/a&gt; - Apache2 Expressions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::Span" target="_blank"&gt;Text::Table::Span&lt;/a&gt; - (DEPRECATED) Text::Table::Tiny + support for column/row spans&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::EyeDrops" target="_blank"&gt;Acme::EyeDrops&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Continuity" target="_blank"&gt;Continuity&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Uploader" target="_blank"&gt;CPAN::Uploader&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Daiku" target="_blank"&gt;Daiku&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTimeX::Auto" target="_blank"&gt;DateTimeX::Auto&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::MariaDB" target="_blank"&gt;DBD::MariaDB&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::SQLite" target="_blank"&gt;DBD::SQLite&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Mint" target="_blank"&gt;DBIx::Mint&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Sunny" target="_blank"&gt;DBIx::Sunny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dios" target="_blank"&gt;Dios&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph::Easy" target="_blank"&gt;Graph::Easy&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager" target="_blank"&gt;Imager&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jifty" target="_blank"&gt;Jifty&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kavorka" target="_blank"&gt;Kavorka&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Accessor" target="_blank"&gt;Lexical::Accessor&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MLPerl" target="_blank"&gt;MLPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=444)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::GraphQL" target="_blank"&gt;Mojolicious::Plugin::GraphQL&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::ChainedAttributes" target="_blank"&gt;MooX::ChainedAttributes&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::HandlesVia" target="_blank"&gt;MooX::HandlesVia&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moxie" target="_blank"&gt;Moxie&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Async::WebSocket" target="_blank"&gt;Net::Async::WebSocket&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl::Promiser" target="_blank"&gt;Net::Curl::Promiser&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Params::ValidationCompiler" target="_blank"&gt;Params::ValidationCompiler&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=160)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Table" target="_blank"&gt;PDF::Table&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl6::Controls" target="_blank"&gt;Perl6::Controls&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Return::Type" target="_blank"&gt;Return::Type&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch" target="_blank"&gt;Search::Elasticsearch&lt;/a&gt; (+2=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Squatting" target="_blank"&gt;Squatting&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Teng" target="_blank"&gt;Teng&lt;/a&gt; (+3=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Caml" target="_blank"&gt;Text::Caml&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Levenshtein" target="_blank"&gt;Text::Levenshtein&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tk" target="_blank"&gt;Tk&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::XSD" target="_blank"&gt;Types::XSD&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UML::Class::Simple" target="_blank"&gt;UML::Class::Simple&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Scraper" target="_blank"&gt;Web::Scraper&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6418237824611230315/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdlv-metacpan-weekly-report-teng.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6418237824611230315"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6418237824611230315"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/02/cdlv-metacpan-weekly-report-teng.html" title="(cdlv) metacpan weekly report - Teng"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Maintaining Perl 5 (Tony Cook): January 2021 Grant Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tony-report-21-01"/>
  <id>tag:news.perlfoundation.org,2021-02-19:/post/tony-report-21-01</id>
  <published>2021-02-19T13:41:59</published>
  <updated>2021-02-19T13:41:59</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Tony Cook on his grant under Perl 5 Core Maintenance Fund.  We thank the TPF sponsors to make this grant possible. Approximately 46 tickets were reviewed, and 6 patches were applied  1.88 #17331 research  #17331 more research and comment  0.73 #17848 review hvds’ alternative and comment  0.33 #18014 review, research  0.50 #18073 rebase, re-test, bump version, apply to 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>This is a monthly report by Tony Cook on his grant under <a href="http://www.perlfoundation.org/perl_5_core_maintenance_fund">Perl 5 Core Maintenance Fund</a>.
 We thank the TPF sponsors to make this grant possible.</p>

<pre>
Approximately 46 tickets were reviewed, and 6 patches were
applied

[Hours]         [Activity]
  1.88          #17331 research
  .             #17331 more research and comment (and more discussion with khw)
  0.73          #17848 review hvds’ alternative and comment
  0.33          #18014 review, research
  0.50          #18073 rebase, re-test, bump version, apply to blead
  0.93          #18252 testing, review build process and comment
  1.35          #18256 research and long comment
  1.25          #18273 research and comment
  0.77          #18423 review, research and comment
  1.60          #18431 research and comment
  3.12          #18433 review, research
  .             #18433 review, testing and comments
  2.68          #18435 review and comments
  .             #18435 review latest changes, testing, apply to blead
  0.23          #18443 comment
  0.47          #18444 review, some research, comments
  0.50          #18454 review and apply to blead
  2.32          #18456 review, testing, run into an unrelated build issue,
                fix it, test and update authors, and apply to blead
  0.27          #18457 review, test and apply to blead (and notice a build
                issue)
  0.95          #18459 reproduce, report upstream and close
  0.37          #18461 review and comment
  0.42          #18466 review and briefly comment
  1.71          #18467 test, research and comment
                review github notifications, comment on #18467
  1.48          #18473 debugging, research
  0.33          #18486 review and briefly comment
  0.22          #18490 review and apply to blead
  0.18          #18493 comment
  0.73          #18496 review and approve
  3.30          #18505 review and comment
                review notifications, including review #18505 changes
  0.75          5.32.1 discussion
  0.58          5.32.1 discussion follow-up (and a typo fix)
  1.57          :utf8 code review, find an issue work on test and fix
  5.90          :utf8 debugging
                :utf8 debugging
                :utf8 debugging
                :utf8 debugging  
  2.53          :utf8 debugging, find one problem and fix
  1.80          :utf8 debugging, more PoC discussion/thinking
  1.57          :utf8 fill out different mode tests, valgrind some and
                find a bug and fix
  1.82          :utf8 find an issue, debugging
  1.55          :utf8 fix cpan module expected buggy :utf8, rebase to
                blead, work on more tests
  0.98          :utf8 more testing, fixes
  2.53          :utf8 more testing, port test changes and other fixes
                forward
  1.50          :utf8 re-work to avoid bad rebase
  1.45          :utf8 try to break it, fuzzing, debugging
  0.85          discussion with khw re freebsd and default warnings, email
                response to jim keenan re coverity scan results
  0.25          dTHX discussion with khw
  0.25          freebsd build issue discussion with khw, testing
  0.40          review github notifications
  1.33          review notifications, manual test mingw64, find and fix a
                parallel build problem with pl2bat
  0.47          review POC note and comment
  0.53          track down build issue and fix (d1293dc)

 57.23 hours total
</pre>

    ]]>
  </content>
</entry>
  <entry>
  <title>January report of the Raku Development Grant of Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-2021-01"/>
  <id>tag:news.perlfoundation.org,2021-02-19:/post/jonathan-2021-01</id>
  <published>2021-02-19T12:57:58</published>
  <updated>2021-02-19T12:57:58</updated>
  <summary>
  <![CDATA[
     Happy to announce that Jonathan was able to resume work on his Raku Development Grant. Here is his report. In January, I at last felt in shape to get back to the new dispatch mechanism. The key remaining piece of the mechanism is *dispatch resumption* a general term I'm using for a range of situations where we start doing some kind of dispatch, and may continue it later. For example: 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Happy to announce that Jonathan was able to resume work on his Raku Development Grant. 
Here is his report. </p>

<p><hr>
In January, I at last felt in shape to get back to the new dispatch mechanism. The key remaining piece of the mechanism is <em>dispatch resumption</em> - a general term I'm using for a range of situations where we start doing some kind of dispatch, and may continue it later. For example:</p>

<ul>
<li>When we call a method, we might later use <code>callsame</code> or similar in order to call a method in the base class (strictly, given multiple inheritance, the next method in the method resolution order)</li>
<li>When we use <code>wrap</code>, we also use <code>callsame</code> to call the wrapped code (and there may be any number of wrappers)</li>
<li>When we call a multi candidate, we can also use <code>callsame</code> to defer to the next best one</li>
<li>When we have a <code>proto</code> <code>sub</code> or <code>method</code> with a body, we need to run that body before we proceed with the multi-dispatch</li>
<li>Today, when we have a multi-dispatch with <code>where</code> clauses or unpacks, we need to do a test bind of the signature to see if the candidate is valid, followed by doing the invocation. This creates duplicate work. A better way would be to just try calling the candidate and having a way to treat a failure in parameter binding as a dispatch resumption, at which point we'd just continue with the next candidate.</li>
</ul>

<p>Having an intuition that these can be neatly handled as cases of the same thing is rather easier, however, than coming up with a design to make it happen! Last year, before I had to take a break from my work on this, I had a number of false starts: designs that were partly right, and gave me some things to implement, but that all ran into problems.</p>

<p>Finally, I believe I've got a design that holds up. While that was still a quite theoretical claim at the end of January, I'm writing this report mid-February, by which point I've got a significant amount of the desgin implemented and working. Despite the fact that the specializer has not yet learned about this aspect of the new dispatch mechanism, I'm still seeing speedups of a factor of about 7 in a <code>callsame</code> to parent <code>method</code> benchmark (with 4 levels of inheritance), and a factor of 10 in a benchmark involving a subroutine with a single wrapper. I had planned to accompany this report with a link to a blog post with further technical details and the benchmarks; unfortunately, that's been delayed thanks to an injured arm (which I hope is now on the mend, although I should still keep my keyboard time down a bit for the days to come).</p>

<p>```
15:59    Work on dispatch resumption in new dispatch mechanism
00:17    Code review</p>

<p>Total time worked: 16 hours 16 minutes
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>rt.cpan.org to remain online</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rt-cpan-org-future"/>
  <id>tag:news.perlfoundation.org,2021-02-19:/post/rt-cpan-org-future</id>
  <published>2021-02-19T12:45:54</published>
  <updated>2021-02-19T12:45:54</updated>
  <summary>
  <![CDATA[
     Since the announcement of the upcoming closure of rt.cpan.org, we've looked at what could, should, or must be done to keep it available in one form or another. After looking at a few options, The Perl Foundation has voted to contract Best Practical to take over the hosting of the CPAN RT instance. Starting immediately, they will be porting the data to their hosting, upgrading the RT instance to the 
   ]]>
  </summary>
  <author>
    <name>Ricardo Signes</name>
  </author>
  <category term="CPAN" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Since the announcement of the upcoming closure of rt.cpan.org, we've looked at what could, should, or must be done to keep it available in one form or another.  After looking at a few options, The Perl Foundation has voted to contract Best Practical to take over the hosting of the CPAN RT instance.  Starting immediately, they will be porting the data to their hosting, upgrading the RT instance to the latest version, and adapting the custom RT plugins and code that make rt.cpan.org go.</p>

<p>This work is expected to take until some time during March.  With the current RT install going dark on March 1, this means that there may be an extended downtime at the beginning of the month.  We will keep the page at rt.cpan.org up to date with the progress of the project.  When the upgrade is complete, we have a commitment for three years of hosting from Best Practical.  If future changes are likely or needed, we'll post them well in advance.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Kommandozeilenwerkzeuge mit App::Cmd</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-15-app-cmd" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das Schreiben von CLI-Tools erfordert einiges an Infrastrukturcode, um ein komfortables Tool mit Kommandos zu erstellen. Teile dieses Codes gleichen sich bei der Implementierung von Unterkommandos. Die Distribution App::Cmd hilft mit Mitteln der objektorientierten Entwicklung dabei, ein komfortables CLI-Tool schnell und erweiterbar zu implementieren.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-15-app-cmd</id>
    <published>2021-02-15T10:00:00Z</published>
    <updated>2021-02-15T10:00:00Z</updated>
  </entry>
  <entry>
    <title>An Modul-Autoren: Badges für CPANCover</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-09-badges-cpancover" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Sowohl für Nutzer als auch für Entwickler ist es ganz schön, wenn auf einen Blick der Zustand  eines Moduls ersichtlich ist: Sind Fehler bekannt? Kann das Projekt gebaut werden? Wie ist die Testabdeckung?</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-09-badges-cpancover</id>
    <published>2021-02-09T10:00:00Z</published>
    <updated>2021-02-09T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 098</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/02/06#pwc098" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given file &lt;code&gt;$FILE&lt;/code&gt;. Create subroutine &lt;code&gt;readN($FILE, $number)&lt;/code&gt; returns the first n-characters and moves the pointer to the (n+1)th character.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub read_maker0{
    my $n = 0;
    return sub{
        my($file, $x) = @_;
        my $chars;
        open(FILE, $file);
        unless(seek(FILE, $n, 0)){
            close(FILE);
        }
        read(FILE, $chars, $x);
        $n = $n + $x;
        return $chars;
    }
}

sub read_maker1{
    my ($file) = @_;
    my $n = 0;
    open(FILE, $file);
    return sub{
        my($x) = @_;
        my $chars;
        my $read = read(FILE, $chars, $x);
        $n = $n + $x;
        unless(seek(FILE, $n, 0)){
            close(FILE);
        }
        return $chars;
    }
}

MAIN:{
    my($FILE, $number) = ("ch-1.dat", 4);
    my($read_n, $chars);
    $read_n = read_maker0();
    $chars = $read_n-&gt;($FILE, $number);
    print "$chars\n";
    $chars = $read_n-&gt;($FILE, $number);
    print "$chars\n";
    $chars = $read_n-&gt;($FILE, $number);
    print "$chars\n";
    
    
    $read_n = read_maker1($FILE);
    $chars = $read_n-&gt;($number);
    print "$chars\n";
    $chars = $read_n-&gt;($number);
    print "$chars\n";
    $chars = $read_n-&gt;($number);
    print "$chars\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1234
5678
90

1234
5678
90
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I actually did this two different ways. The first follows the letter of the challenge as to the parameters of the &lt;code&gt;read_n&lt;/code&gt; function and the second differs, only passing in &lt;code&gt;$number&lt;/code&gt; and does not include the filename.&lt;/p&gt;
&lt;p&gt;Before I get into the differences it makes sense to point out how &lt;code&gt;read_maker0()&lt;/code&gt; works. What is does is create a closure over the value &lt;code&gt;$n&lt;/code&gt; which will hold the current position in the file. Think of the variable &lt;code&gt;$n&lt;/code&gt; created in &lt;code&gt;read_maker0()&lt;/code&gt; as &lt;em&gt;captured&lt;/em&gt; inside the function that is being returned. This process is called &lt;em&gt;currying&lt;/em&gt; and it’s a neat trick. I’ve used it in the past for these challenges, the first being way back in &lt;a href="https://adamcrussell.livejournal.com/948.html"&gt;Challenge 003&lt;/a&gt;! In this way &lt;code&gt;read_maker0()&lt;/code&gt; is creating the function which we are referring to by the scalar &lt;code&gt;$read_n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After each &lt;a href="https://perldoc.perl.org/functions/read"&gt;read&lt;/a&gt; &lt;code&gt;$n&lt;/code&gt; is incremented and used to &lt;a href="https://perldoc.perl.org/functions/seek"&gt;seek&lt;/a&gt; to the next position. I should note that this is not really necessary here since the value of &lt;code&gt;$number&lt;/code&gt; is never changed. In this case the &lt;code&gt;read&lt;/code&gt; alone will advance the file position as necessary. However, by including &lt;code&gt;seek&lt;/code&gt; the solution is more general. We would be able to move around the file however we want, backwards and forwards, with &lt;code&gt;seek&lt;/code&gt; if we wanted to.&lt;/p&gt;
&lt;p&gt;So we see that we can capture &lt;code&gt;$n&lt;/code&gt; and use it to store the file position between function calls. The challenge states that we are to called &lt;code&gt;read_n&lt;/code&gt; with two parameters, the filename and the number of characters to read. As you can see, we do not need to keep sending the filename with each function call. The filename can also be a part of the closure!&lt;/p&gt;
&lt;p&gt;That is the difference between &lt;code&gt;read_maker0()&lt;/code&gt; and &lt;code&gt;read_maker1()&lt;/code&gt;. The first returns a &lt;code&gt;read_n&lt;/code&gt; function that matches the challenge specification of taking a filename and a number of characters to read. &lt;code&gt;read_maker1()&lt;/code&gt; returns a function that only takes the number of characters to read, the function itself has a stored value for the file handle we want.&lt;/p&gt;
&lt;p&gt;One small final thing to mention: anyone unfamiliar with &lt;code&gt;read&lt;/code&gt; might notice that there is no checking to see if we attempt to read past the end of the file. That is because &lt;code&gt;read&lt;/code&gt; will read all the characters it can and if it hits the end of the file it will stop. The return value from &lt;code&gt;read&lt;/code&gt; is the number of characters successfully read. While we do not check that value in this code, if we did we would see that in this example the final read would return 2, which is clear in the output shown.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a sorted array of distinct integers &lt;code&gt;@N&lt;/code&gt; and a target `$N``. Write a script to return the index of the given target if found otherwise place the target in the sorted array and return the index.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub find_insert{
    my($list, $n) = @_;
    if($n &lt; $list-&gt;[0]){
        unshift @{$list}, $n;
        return 0;
    }
    if($n &gt; $list-&gt;[@{$list} - 1]){
        push @{$list}, $n;
        return @{$list} - 1;
    }
    for(my $i = 0; $i &lt; (@{$list} - 1); $i++){
        return $i if $n == $list-&gt;[$i];
        if($n &gt; $list-&gt;[$i] &amp;&amp; $n &lt; $list-&gt;[$i + 1]){
            splice(@{$list}, $i, 2, ($list-&gt;[$i], $n, $list-&gt;[$i + 1]));
            return $i + 1;
        }
    }
}


MAIN:{
    my(@N, $N, $i);
    @N = (1, 2, 3, 4);
    $N = 3;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
    
    @N = (1, 3, 5, 7);
    $N = 6;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
    
    @N = (12, 14, 16, 18);
    $N = 10;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
    
    @N = (11, 13, 15, 17);
    $N = 19;
    $i = find_insert(\@N, $N);
    print "$i\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
3
0
4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;While somewhat convoluted sounding at first this part of Challenge 098 ended up being fairly straightforward, especially when using &lt;a href="https://perldoc.perl.org/functions/splice"&gt;splice&lt;/a&gt; to do any array insertions. Probably there are more “fun” ways to have done this but the intuitive way here has an almost comforting look to it. Reminds me of university computer lab exercises!&lt;/p&gt;
&lt;p&gt;Anyway, the approach here is to consider the possible cases. &lt;code&gt;find_insert&lt;/code&gt; starts off by checking to see if &lt;code&gt;$n&lt;/code&gt; would belong at the very start or end of the array. If neither of those cases hold we loop over the array looking for where &lt;code&gt;$n&lt;/code&gt; might be. If found in the array we return with the index, else we insert with &lt;code&gt;splice&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The challenge never asks to see the modified array so I suppose it is possible to merely return where &lt;code&gt;$n&lt;/code&gt; belongs without actually inserting it but that didn’t seem quite as sporting.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-098/"&gt;Challenge 098&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.perlmonks.net/?node_id=594140"&gt;Perlmonks article on currying&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc098</id>
    <published>2021-02-06T21:34:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CPAN-News Januar 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-06-cpannews-januar-2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Der Januar ist rum, Zeit mal nachzuschauen was wir im Januar so alles auf CPAN geladen haben.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-06-cpannews-januar-2021</id>
    <published>2021-02-06T10:00:00Z</published>
    <updated>2021-02-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Sicherheit für Perl-Anwendungen: fail2ban</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-03-perl-anwendungen-fail2ban" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Ist eine Webanwendung öffentlich erreichbar, wird es nicht lange dauern und irgendwelche Bots versuchen sich anzumelden. Oder es werden wild irgendwelche URLs aufgerufen. Auch wenn die Anmeldeversuche wahrscheinlich scheitern, geht die Bot-Aktivität zu Lasten der Webanwendung. Und mit genügend versuchen klappt es vielleicht doch mal, dass sich jemand Unbefugtes anmeldet.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-03-perl-anwendungen-fail2ban</id>
    <published>2021-02-03T10:00:00Z</published>
    <updated>2021-02-03T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jan 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/02/01/list-of-new-cpan-distributions-jan-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ContainingJustData-0.002">Acme-CPANModules-ContainingJustData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that just contain data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-PERLANCAR-Forked-0.002">Acme-CPANModules-PERLANCAR-Forked</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of my modules which are forked from others</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-UUID-0.001">Acme-CPANModules-UUID</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that can generate immutable universally unique identifier (UUIDs)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Acme-ConspiracyTheory-Random-0.001">Acme-ConspiracyTheory-Random</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>random theories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Acme-STEVEB-0.43">Acme-STEVEB</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.43</td>
<td>One line description</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NMELNICK/AnyEvent-Discord-0.1">AnyEvent-Discord</a></td>
<td><a href="https://metacpan.org/author/NMELNICK">NMELNICK</a></td>
<td>0.1</td>
<td>Provides an AnyEvent interface to the Discord bot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JDEGUEST/Apache2-SSI-v0.1.0">Apache2-SSI</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>Apache2 Server Side Include</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/App-Device-Chip-sensor-0.01">App-Device-Chip-sensor</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>Base class to build Device::Chip::Sensor-based applications on</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JV/App-Dusage-2.00">App-Dusage</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>2.00</td>
<td>provide disk usage statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-xp-0.01">App-Greple-xp</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>extended pattern module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-idxdb-0.001">App-idxdb</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Import data from IDX and perform queries on them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-borderstyle-0.001">App-lcpan-CmdBundle-borderstyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>lcpan subcommands related to BorderStyle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-streamfinder-0.001">App-streamfinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI for StreamFinder, a module to fetch actual raw streamable URLs from video &amp; podcasts sites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OELE/Audio-StreamGenerator-0.01">Audio-StreamGenerator</a></td>
<td><a href="https://metacpan.org/author/OELE">OELE</a></td>
<td>0.01</td>
<td>create a 'radio' stream by mixing ('cross fading') multiple audio sources (files or anything that can be converted to PCM audio) and sending it to a streaming server (like Icecast)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ATRODO/Audio-TinySoundFont-0.10">Audio-TinySoundFont</a></td>
<td><a href="https://metacpan.org/author/ATRODO">ATRODO</a></td>
<td>0.10</td>
<td>Interface to TinySoundFont, a "SoundFont2 synthesizer library in a single C/C++ file"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBAURAIN/Bio-MUST-Tools-Mcl-0.210170">Bio-MUST-Tools-Mcl</a></td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>0.210170</td>
<td>Scripts for processing MCL clusters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBAURAIN/Bio-MUST-Tools-TreeParsing-0.210200">Bio-MUST-Tools-TreeParsing</a></td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>0.210200</td>
<td>Scripts for parsing trees</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/CSS-Struct-Output-Indent-ANSIColor-0.01">CSS-Struct-Output-Indent-ANSIColor</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Indent printing 'CSS::Struct' structure to CSS code with ansi color output.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/CSS-Tidy-0.00_01">CSS-Tidy</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>reformat CSS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JJNAPIORK/CatalystX-Errors-0.001001">CatalystX-Errors</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001001</td>
<td>Default Web HTTP Error Pages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ColorTheme-Distinct-WhiteBG-0.001">ColorTheme-Distinct-WhiteBG</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Pick some distinct colors (that are suitable for white background) for you</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Crayon-0.01">Crayon</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>CSS Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TIMLEGGE/Crypt-OpenSSL-Verify-TRIAL-0.24">Crypt-OpenSSL-Verify-TRIAL</a></td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>0.20</td>
<td>OpenSSL Verify certificate verification in XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PAWELKROL/D64-Disk-Layout-0.01">D64-Disk-Layout</a></td>
<td><a href="https://metacpan.org/author/PAWELKROL">PAWELKROL</a></td>
<td>0.01</td>
<td>Handling entire Commodore (D64/D71/D81) disk image data in pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-Constraints-NumberPhone-0.04">Data-FormValidator-Constraints-NumberPhone</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.04</td>
<td>Data constraints, using Number::Phone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-Filters-WikiTrim-0.03">Data-FormValidator-Filters-WikiTrim</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>Trim filter for wikitext fields</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-URI-0.03">Data-FormValidator-URI</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>URI constraint/filter for Data::FormValidator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Data-Prepare-0.001">Data-Prepare</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>prepare CSV (etc) data for automatic processing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BSHIELDS/Data-QuickMemoPlus-Reader-0.01">Data-QuickMemoPlus-Reader</a></td>
<td><a href="https://metacpan.org/author/BSHIELDS">BSHIELDS</a></td>
<td>0.01</td>
<td>Extract text from QuickMemo+ LQM export files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-Plugin-EnsureMinimumPerl-0.01">Dist-Zilla-Plugin-EnsureMinimumPerl</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Ensure that you have specified a minimum version of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-Plugin-GitHub-RequireGreenBuild-0.01">Dist-Zilla-Plugin-GitHub-RequireGreenBuild</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Require a successful GitHub Actions workflow run</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/Dist-Zilla-Plugin-SyncCPANfile-0.01">Dist-Zilla-Plugin-SyncCPANfile</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Sync a cpanfile with the prereqs listed in dist.ini</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOMM/Dist-Zilla-PluginBundle-Author-DOMM-0.906">Dist-Zilla-PluginBundle-Author-DOMM</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>0.906</td>
<td>Dist::Zilla config suiting my needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOMM/Dist-Zilla-PluginBundle-DOMM-0.900">Dist-Zilla-PluginBundle-DOMM</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>0.900</td>
<td>Dist::Zilla config suiting my needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AMICELI/Fancazzista-Scrap-0.01">Fancazzista-Scrap</a></td>
<td><a href="https://metacpan.org/author/AMICELI">AMICELI</a></td>
<td>0.01</td>
<td>Scrap websites and reddit posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Feature-Compat-Try-0.01">Feature-Compat-Try</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>make try/catch syntax available</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/File-FormatIdentification-RandomSampling-0.005">File-FormatIdentification-RandomSampling</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.005</td>
<td>methods to identify content of device o media files using random sampling</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Future-IO-Impl-UV-0.01">Future-IO-Impl-UV</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>implement Future::IO using UV</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LORENZO/Games-Dice-Roller-0.01">Games-Dice-Roller</a></td>
<td><a href="https://metacpan.org/author/LORENZO">LORENZO</a></td>
<td>0.01</td>
<td>a full featured dice roller system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMERELO/GitHub-Actions-0.0.3">GitHub-Actions</a></td>
<td><a href="https://metacpan.org/author/JMERELO">JMERELO</a></td>
<td>0.0.3</td>
<td>Work in GitHub Actions using Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XAOC/Gtk2-Html2-0.05">Gtk2-Html2</a></td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>0.05</td>
<td>DEPRECATED Perl bindings for the GtkHtml2 Html display widget</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XAOC/Gtk2-Recent-0.052">Gtk2-Recent</a></td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>0.052</td>
<td>(DEPRECATED) Perl wrapper to the recent files spec Gtk</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/HTML-Make-Calendar-0.00_01">HTML-Make-Calendar</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Make an HTML calendar</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/HTML-Make-Page-0.00_01">HTML-Make-Page</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Automate making HTML &lt;head&gt; and &lt;body&gt;</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Image-PNG-Util-0.00_01">Image-PNG-Util</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>manipulate the image data part of PNGs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/JSON-Server-0.00_01">JSON-Server</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>JSON-only server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RCOSCALI/JSON_minify-1.0">JSON_minify</a></td>
<td><a href="https://metacpan.org/author/RCOSCALI">RCOSCALI</a></td>
<td>1.0</td>
<td>minify a JSON and also remove comments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRTASTIC/Kelp-Module-Raisin-1.00">Kelp-Module-Raisin</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>Raisin integration with Kelp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRTASTIC/Kelp-Module-Sereal-1.00">Kelp-Module-Sereal</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>Sereal encoder / decoder for Kelp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Lingua-String-0.01">Lingua-String</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Class to contain a string in many different languages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AFAN/Loctools-Markdown-0.9-TRIAL">Loctools-Markdown</a></td>
<td><a href="https://metacpan.org/author/AFAN">AFAN</a></td>
<td>0.9</td>
<td>Localization-focused Markdown parser/generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-List-More-Patch-Hide-0.001">Module-List-More-Patch-Hide</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Hide some modules from Module::List::More</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JHTHORSEN/Mojo-UserAgent-SecureServer-0.01">Mojo-UserAgent-SecureServer</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>Secure application server for Mojo::UserAgent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojolicious-Matterbridge-0.01">Mojolicious-Matterbridge</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>a simplistic module to connect to chat servers via matterbridge</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Mojolicious-Plugin-Component-0.01">Mojolicious-Plugin-Component</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Module-based Component Renderer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AJNN/Neo4j-Types-1.00">Neo4j-Types</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>Common Neo4j type system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FSM/Net-OBS-Client-0.0.5">Net-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/FSM">FSM</a></td>
<td>v0.0.5</td>
<td>simple OBS API calls</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/OTRS-OPM-Validate-0.01">OTRS-OPM-Validate</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Validate .opm files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VERMAUDH/Pod-Modifier-1">Pod-Modifier</a></td>
<td><a href="https://metacpan.org/author/VERMAUDH">VERMAUDH</a></td>
<td>1</td>
<td>Modify/ add to an existing POD dynamically</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Pulsar-WebSocket-Client-0.01">Pulsar-WebSocket-Client</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>Perl client for Apache Pulsar WebSocket API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-BorderStyle-0.001">Sah-Schemas-BorderStyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to BorderStyle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-ColorTheme-0.001">Sah-Schemas-ColorTheme</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to ColorTheme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Simd-Avx512-20210121">Simd-Avx512</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210121</td>
<td>Simd::Avx512 – Emulate SIMD instructions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-VideoTag-0.0100">Statocles-Plugin-VideoTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Change video file anchors to video elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAMTAUXE/Store-Directories-0.1">Store-Directories</a></td>
<td><a href="https://metacpan.org/author/CAMTAUXE">CAMTAUXE</a></td>
<td>0.1</td>
<td>Manage a key/value store of directories with controls for</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Finally-0.01">Syntax-Keyword-Finally</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>add FINALLY phaser block syntax to perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Table-Trans-0.00_01">Table-Trans</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>simple translations for templating</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Table-Translations-0.00_01">Table-Translations</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>simple translations for templating</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-Lookup-0.001">TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SNEZ/Task-OpenTracing-v0.0.1">Task-OpenTracing</a></td>
<td><a href="https://metacpan.org/author/SNEZ">SNEZ</a></td>
<td>v0.0.1</td>
<td>install all the OpenTracing modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GUGOD/Task-PerlCriticAllPolicies-0.01">Task-PerlCriticAllPolicies</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>0.01</td>
<td>A Task for installing all Perl::Critic policies at once.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Template-Plugin-StripComments-1.02">Template-Plugin-StripComments</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1.02</td>
<td>Template Toolkit filter to strip comment blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Text-BibTeX-Validate-0.1.0">Text-BibTeX-Validate</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>validator for BibTeX format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Text-LooksLike-0.00_01">Text-LooksLike</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>make guesses about snippets of text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ELIONORA/Text-Unmunch-0.1">Text-Unmunch</a></td>
<td><a href="https://metacpan.org/author/ELIONORA">ELIONORA</a></td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/USCIS-Case-0.01">USCIS-Case</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to check USCIS case status. More features would be added in the future.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Random-PERLANCAR-0.002">UUID-Random-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Another implementation of UUID::Random</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Tiny-Patch-UseMRS-0.001">UUID-Tiny-Patch-UseMRS</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Make UUID::Tiny use Math::Random::Secure's rand()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WHO-GrowthReference-GenChart-0.001">WHO-GrowthReference-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create WHO growth chart ()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WHO-GrowthReference-GenTable-0.001">WHO-GrowthReference-GenTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Add WHO reference fields to table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/WebService-Postex-0.001">WebService-Postex</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Postex WebService implemenation in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBIB/Wireguard-WGmeta-0.0.6">Wireguard-WGmeta</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.0.6</td>
<td>An approach to add metadata to the main Wireguard config</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-ColorName-WWW-0.003">WordList-EN-ColorName-WWW</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Color names from Graphics::ColorNames::WWW</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ID-ColorName-HTML_ID-0.002">WordList-ID-ColorName-HTML_ID</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of color names from Graphics::ColorNames::HTML_ID</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>84</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>48</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>17</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/AMICELI">AMICELI</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ELIONORA">ELIONORA</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/PAWELKROL">PAWELKROL</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/AFAN">AFAN</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/ATRODO">ATRODO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SNEZ">SNEZ</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BSHIELDS">BSHIELDS</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/NMELNICK">NMELNICK</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/FSM">FSM</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/RCOSCALI">RCOSCALI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/CAMTAUXE">CAMTAUXE</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/LORENZO">LORENZO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/VERMAUDH">VERMAUDH</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/OELE">OELE</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/JMERELO">JMERELO</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-ContainingJustData PERLANCAR 0.002 Modules that just contain data Acme-CPANModules-PERLANCAR-Forked PERLANCAR 0.002 List of my modules which are forked from others Acme-CPANModules-UUID PERLANCAR 0.001 Modules that can generate immutable universally unique identifier (UUIDs) Acme-ConspiracyTheory-Random TOBYINK 0.001 random theories Acme-STEVEB STEVEB 0.43 One line description AnyEvent-Discord NMELNICK 0.1 Provides an AnyEvent interface to … <a href="https://perlancar.wordpress.com/2021/02/01/list-of-new-cpan-distributions-jan-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jan 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1935</id>
    <published>2021-02-01T00:53:24Z</published>
    <updated>2021-02-01T00:53:24Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/31#pwc097" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given string &lt;code&gt;$S&lt;/code&gt; containing alphabets A..Z only and a number &lt;code&gt;$N&lt;/code&gt;. Write a script to encrypt the given string &lt;code&gt;$S&lt;/code&gt; using Caesar Cipher with left shift of size &lt;code&gt;$N&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub caesar_cypher{
    my($s, $n) = @_;
    my @cypher = map { unless(ord($_) == ord(' ')){
                           my $x = ((ord($_) - $n) &lt; ord('A')?(ord($_) - $n + 26):(ord($_) - $n)); 
                           chr($x);
                       }
                       else{
                           $_
                       }
                 } split(//, $s);
    return join("", @cypher);
}

MAIN:{
    my($S, $N);
    $S = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
    $N = 3;
    print "$S\n";
    print caesar_cypher($S, $N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The basic approach here is pretty much the straightforward one: use the ascii values for the characters and subtract &lt;code&gt;$n&lt;/code&gt;. In Perl we use the &lt;a href="https://perldoc.perl.org/functions/ord"&gt;ord&lt;/a&gt; function to do this and the &lt;a href="https://perldoc.perl.org/functions/chr"&gt;chr&lt;/a&gt; to go in the other direction, ascii value to character. The only thing we really need to be careful of is if subtracting &lt;code&gt;$n&lt;/code&gt; takes us outside the ascii range for upper case letters, then we need to add 26 to get back in range.&lt;/p&gt;
&lt;p&gt;Certain style instructions have been burned into my brain over the years and I find them almost impossible to deviate from. The one that applies here is &lt;em&gt;Whenever possible do not use numeric literals. They are often poorly documented and become “magic numbers”, and make code readability and future debugging unnecessarily difficult.&lt;/em&gt; So it is in that spirit that I write, for example, &lt;code&gt;ord(' ')&lt;/code&gt; instead of just &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary string &lt;code&gt;$B&lt;/code&gt; and an integer &lt;code&gt;$S&lt;/code&gt;. Write a script to split the binary string &lt;code&gt;$B&lt;/code&gt; of size &lt;code&gt;$S&lt;/code&gt; and then find the minimum number of flips required to make it all the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use feature "bitwise";

sub substrings{
    my($d, $s) = @_;
    my @substrings;
    for(my $i = 0; $i &lt; length($d); $i+=$s){
        push @substrings, substr($d, $i, $s);
    }    
    return @substrings;
}

sub min_flips{
    my($d, $s) = @_;
    my @flips;
    my @substrings = substrings($d, $s);
    for my $digits (@substrings){
        my $flip_count = 0;
        map { $flip_count += unpack("%32b*", $digits ^. $_) } @substrings;
        push @flips, $flip_count;
    }
    return [sort {$a &lt;=&gt; $b} @flips]-&gt;[0];
}

MAIN:{
    my($B, $S);
    $B = "101100101";
    $S = 3;
    print min_flips($B, $S) . " flips\n";
    $B = "10110111";
    $S = 4;
    print min_flips($B, $S) . " flips\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1 flips
2 flips
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;substrings&lt;/code&gt; function is just a convenient wrapper around the code necessary to break the string into the right sized chunks. The assumption is that the string is evenly divisible into chunks of size &lt;code&gt;$s&lt;/code&gt;. If we were not making this assumption we would need to add some &lt;em&gt;zero padding&lt;/em&gt; for any unevenly sized substring.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;use feature "bitwise";&lt;/code&gt; is present the &lt;code&gt;^.&lt;/code&gt; is defined and the operands to &lt;code&gt;^.&lt;/code&gt; are taken to be bit strings and the result is itself a bit string.&lt;code&gt;min_flips&lt;/code&gt; does a bitwise xor operation, pairwise comparing each substring in a &lt;code&gt;map&lt;/code&gt;. Since xor is 1 only when the bits are different the result is a bit string of set bits, the ones needed to be flipped. &lt;code&gt;unpack&lt;/code&gt; is used to sum these, and the result added &lt;code&gt;$flip_count&lt;/code&gt; which is then pushed into an array. The minimum number of flips is determined by the smallest number in that array. The bitwise feature was introduced in Perl 5.22 and graduated from experimental status in Perl 5.28.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.asciitable.com"&gt;ASCII Table&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/XOR.html"&gt;xor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlop#Bitwise-Or-and-Exclusive-Or"&gt;Perl’s xor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/feature#The-%27bitwise%27-feature"&gt;bitwise feature&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc097</id>
    <published>2021-01-31T11:11:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
