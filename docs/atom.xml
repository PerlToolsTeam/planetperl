<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-12-05T16:50:33Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Advent of Code Day 1 to 5</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_01_to_05.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_01_to_05.html</id>
    <updated>2021-12-05T16:45:36+00:00</updated>
    <category term="perl"/>
    <summary type="html">As you have probably noted by the measurable reduction of programmer productivity worldwide, Advent of Code is running again. Here's a short recap of my experiences from day 1 to day 5.

I usually ...</summary>
    <content type="html">&lt;p&gt;As you have probably noted by the measurable reduction of programmer productivity worldwide, &lt;a href="https://adventofcode.com/2021"&gt;Advent of Code&lt;/a&gt; is running again. Here's a short recap of my experiences from day 1 to day 5.&lt;/p&gt;

&lt;p&gt;I usually approach the problems straight-forward (or brute-force), mostly because I'm not that kind of smart to know all the nice shortcuts and algorithms (which I later usually read up on the very recommended "Solution Megathreads" on &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;reddit&lt;/a&gt;. You can find me solutions &lt;a href="https://github.com/domm/advent_of_code/tree/main/2021"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/1"&gt;Day 1&lt;/a&gt; - Sonar Sweep&lt;/h4&gt;

&lt;p&gt;Starting of easy, just adding / comparing some values. I still learned something during the second task: When comparing a sliding window of data (at least in this simple case), you only need to compare the first and the last value, because the middle values are affecting both window-values the same way and thus can be ignored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12
24    24
53    53
      13&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, you can sum up 12+24+53 and compare that with the sum of 24+53+13, but you can just as well ignore 24+53 and just compare 12 and 13.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/01_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/01_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/2"&gt;Day 2&lt;/a&gt; - Dive!&lt;/h4&gt;

&lt;p&gt;Still simple, a little bit of parsing and the rest was again just adding up numbers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/02_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/02_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/3"&gt;Day3&lt;/a&gt; - Binary Diagnostic&lt;/h4&gt;

&lt;p&gt;I had some troubles remembering how to convert a binary sting (&lt;code&gt;1001101&lt;/code&gt;) to an int. I first used the rather ugly &lt;code&gt;my $bits='110101'; my $int = eval '0b'.$bits&lt;/code&gt;, and only "remembered" about &lt;code&gt;oct()&lt;/code&gt; after reading it in some other solutions. But I used unicode var names &lt;code&gt;$γ, $ε&lt;/code&gt; :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/03_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/03_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/4"&gt;Day 4&lt;/a&gt; - Giant Squid aka Bingo&lt;/h4&gt;

&lt;p&gt;I again forgot something I already learned in a previous Advent: If the input contains blocks separated by blank lines, it's much easier to just split the input on two newlines instead of remembering state and starting new blocks if there is an empty line...&lt;/p&gt;

&lt;p&gt;I convert the horizontal rows and vertical cols into lines, so each bingo card has 10 lines. Each line is a Hash where key and value are the number (i.e. 42 =&amp;gt; 42) because I thought that in part 2 we might need to do something with the checked values (with turned out to not be the case, ah, well..)&lt;/p&gt;

&lt;p&gt;When a number is drawn, go through all the boards and all the rows, mark the drawn number with a X, and check if a line has 5 Xs (&lt;code&gt;my @checked = grep {/X/} values $line-&amp;gt;%*;&lt;/code&gt;). If it has, we have a winner, so calc the value and report it.&lt;/p&gt;

&lt;p&gt;In theory part 2 only needed to remove the exit, but as I had to remove bingo cards that have already one I had to convert my loop to use an iterator.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/04_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/04_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/4"&gt;Day 5&lt;/a&gt; - Hydrothermal Venture&lt;/h4&gt;

&lt;p&gt;I had a solution for part 1 quite quickly, but it didn't work for the proper data. So I let the code rest for a bit, went for a run, cooked lunch, and later checked a few of the posts on reddit. And indeed I found the needed tip: I was using a plain &lt;code&gt;sort&lt;/code&gt;, which (in Perl) sorts alphanumerically, and not by int value. This was quickly fixed by the spaceship operator: &lt;code&gt;sort { $a &amp;lt;=&amp;gt; $b }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the diagonals in part 2 I wasted a lot of time on just mucking with the coordinates, without success. I knew what I had to do, but was too lazy to properly implement it. So late in the afternoon I took pen &amp;amp; paper, drawed some diagrams, and renamed my vars from &lt;code&gt;$x, $y&lt;/code&gt; to &lt;code&gt;$row, $col&lt;/code&gt;, because I constantly messed up which was which. Also figuring out which direction was which took me an embarrassingly long time...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/05_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/05_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Next week..&lt;/h4&gt;

&lt;p&gt;I plan to keep playing (and posting here and on reddit), but let's see what the combination of more complex tasks, work and family will allow :-)&lt;/p&gt;</content>
    <category term="git"/>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Writing a SNES assembler compiler/disassembler - Day 2</title>
    <link rel="alternate" href="http://blogs.perl.org/users/sylvain_colinet/2021/12/writing-a-snes-assembler-compilerdisassembler---day-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/sylvain_colinet//2727.10561</id>
    <published>2021-12-04T19:54:03Z</published>
    <updated>2021-12-04T19:57:12Z</updated>
    <author>
        <name>Sylvain Colinet</name>
        
    </author>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/sylvain_colinet/">
        <![CDATA[<h1 data-line="0" class="code-line" id="first-look-at-generating-grammars-1" style="padding-bottom: 0.3em; line-height: 1.25; border-bottom: 1px solid rgb(234, 236, 239); font-weight: 600; box-sizing: border-box; border-top-color: rgba(255, 255, 255, 0.18); border-right-color: rgba(255, 255, 255, 0.18); border-left-color: rgba(255, 255, 255, 0.18); margin-bottom: 16px; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">First look at generating grammars</h1><p data-line="2" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">This will be very short even if that take me a lot of time to figure this part.</p><p data-line="4" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">In my&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">ASM65816Grammar.rakumod</code>&nbsp;I manually wrote the Number and Addressing grammar but obiously for the instructions it's not really possible.</p><h2 data-line="7" class="code-line" id="general-asm-grammar-1" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; line-height: 1.25; padding-bottom: 0.3em; border-bottom: 1px solid rgb(234, 236, 239); position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">General ASM grammar</h2><p data-line="9" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">First let's focus on parsing something simple.</p><p data-line="11" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">The basic gist of what you can write in an asm file is very short</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="13" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">    lda $42
    clc
    adc #3 
    cmp #0005:beq $4855 ; if $42 + 3 is 5 branch to $4855

</div></code></code></pre><p data-line="21" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">You have an instruction per line, or you can have multiple instructions separated with a&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">:</code>, and&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">;</code>&nbsp;are used to mark a comment.</p><p data-line="24" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">I don't handle label for now since I just want to dumbly generate a grammar for all the valid instruction from my instruction list and see if that work well.</p><p data-line="27" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">The final grammar look like that</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="29" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">grammar GrammarASM65816 is InstructionGrammar is export {
    token TOP {
        &lt;thing&gt;+
    }
    token thing {
        || &lt;asm-comment&gt;
        || &lt;instruction-line&gt; &lt;.ws&gt; &lt;.asm-comment&gt;*
        || &lt;instruction&gt; &lt;.ws&gt; &lt;.asm-comment&gt;*
    }
    token instruction-line{
        &lt;instruction&gt; (&lt;.ws&gt; ':' &lt;.ws&gt; &lt;instruction&gt;)+
    }
    token asm-comment {
        ';' .*
    }
}
</div></code></code></pre><h3 data-line="48" class="code-line" id="today-i-learn-1" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; font-size: 1.25em; line-height: 1.25; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">Today I learn</h3><p data-line="50" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Don't use &lt;.ws&gt;* &lt;.ws&gt; already have a quantifier, adding a * make Raku goes on forever. Maybe there should have a warning about that?</p><h2 data-line="52" class="code-line" id="instructiongrammar-1" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; line-height: 1.25; padding-bottom: 0.3em; border-bottom: 1px solid rgb(234, 236, 239); position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">InstructionGrammar</h2><p data-line="54" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Yes, I like to compose my grammar with multiple piece since I plan to support like 2-3 ASM grammars : My own for my SLANG and one compatible with xkas/Asar a tool used in romhacking (this include instructions to specify where to inject code in a ROM)</p><p data-line="57" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Before generating each token, let manually write 1-2 token to see if that work. I use a proto token for instruction since I will not really care about indivisual instructions in the Action class.</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="60" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">grammar InstructionGrammar is Addressing {
    proto token instruction {*}
    token instruction:sym&lt;LDA&gt; {:i "LDA"&lt;.ws&gt;&lt;word&gt;}
    token instruction:sym&lt;RTL&gt; {:i "RTL"}
}
</div></code></code></pre><p data-line="67" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">The&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">:i</code>&nbsp;adverb makes the token ignore the case.</p><p data-line="69" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">let's run this to see if that work</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="71" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">raku -I lib -e 'use ASM65816Grammar; say GrammarASM65816.parse("RTL")'
｢RTL｣
 thing =&gt; ｢RTL｣
  instruction =&gt; ｢RTL｣
</div></code></code></pre><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="78" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">raku -I lib -e 'use ASM65816Grammar; say GrammarASM65816.parse("RTL:lda 42;piko")'
｢RTL:lda 42;piko｣
 thing =&gt; ｢RTL:lda 42;piko｣
  instruction-line =&gt; ｢RTL:lda 42｣
   instruction =&gt; ｢RTL｣
   0 =&gt; ｢:lda 42｣
    instruction =&gt; ｢lda 42｣
      word =&gt; ｢42｣
</div></code></code></pre><p data-line="89" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">We don't see the ;piko since It's not captured in the grammar. Also my grammar for word is not really right, 42 is not a word but a byte. This is fine for now :)</p><h2 data-line="91" class="code-line " id="generating-the-intruction-tokens-1" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; line-height: 1.25; padding-bottom: 0.3em; border-bottom: 1px solid rgb(234, 236, 239); position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">Generating the intruction tokens</h2><p data-line="93" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">From this advent post&nbsp;<a href="https://perl6advent.wordpress.com/2015/12/08/day-8-grammars-generating-grammars/" data-href="https://perl6advent.wordpress.com/2015/12/08/day-8-grammars-generating-grammars/" title="https://perl6advent.wordpress.com/2015/12/08/day-8-grammars-generating-grammars/" style="color: rgb(3, 102, 214); text-decoration-line: none; box-sizing: border-box; background-color: initial;">https://perl6advent.wordpress.com/2015/12/08/day-8-grammars-generating-grammars/</a>&nbsp;that generate Raku grammar from BNF grammar it look possible. We need to use&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">^add_method</code>&nbsp;and&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">EVAL</code>&nbsp;to add our token.</p><p data-line="96" class="code-line    code-active-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Let's do only simple instructions like&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">TXA</code>&nbsp;that does not take an argument.</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="98" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">sub gen-instru {
    for @ASM65816::instructions -&gt; $instruct {
        my $token-name = $instruct.inst ~ '-' ~ $instruct.addressing.Str;
        if $instruct.addressing == IMPLIED {
            InstructionGrammar.^add_method("instruction:sym&lt;{ $instruct.inst }&gt;",
                EVAL "my token instruction:sym&lt;{ $instruct.inst }&gt;" ~ '{:i "' ~ $instruct.inst ~ '"}');
        }
    }
}
</div></code></code></pre><p data-line="110" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">And....</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="112" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">$ raku -I lib -e 'use ASM65816Grammar; say GrammarASM65816.parse("TXA")'
TOP
|  thing
|  |  asm-comment
|  |  * FAIL
|  |  instruction-line
|  |  |  instruction
|  |  |  * FAIL
|  |  * FAIL
|  |  instruction
|  |  * FAIL
|  * FAIL
* FAIL
Nil
skarsnik@DESKTOP-UIA12T1:/mnt/f/Project/SnesASM$
</div></code></code></pre><p data-line="130" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">I added Grammar::Tracer to have more details, and that does not work. You can probably tell me, "But wait, in the article they create a new grammar and compose it at the end, maybe that why it does not work?"</p><p data-line="133" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">I don't really know, let have a look if both grammars have the right method :</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="135" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">#After the Grammar definitons
say "Instruction Grammar - Name : ", $_.name, " Method :", $_ if $_.name ~~ /TXA/ for InstructionGrammar.^methods;
say "Grammar ASM65816 - Name : ", $_.name, " Method :", $_ if $_.name ~~ /TXA/ for GrammarASM65816.^methods;

$ raku -I lib -e 'use ASM65816Grammar; say GrammarASM65816.parse("TXA")'
Instruction Grammar - Name : instruction:sym&lt;TXA&gt; Method :token instruction:sym&lt;TXA&gt;{:i "TXA"}
Grammar ASM65816 - Name : instruction:sym&lt;TXA&gt; Method :token instruction:sym&lt;TXA&gt;{:i "TXA"}
</div></code></code></pre><p data-line="145" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">So yes, the token are here but it probably missing something to be a real token.</p><p data-line="147" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">So for now I opted to generate the lines defining the instructions tokens and copy/paste then in the file. It's not really great if I want to tweak the whole grammar.</p>]]>
        
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2438191565013524930</id>
    <published>2021-12-04T17:28:00.001+01:00</published>
    <updated>2021-12-04T17:28:16.407+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxx) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.46&lt;/strong&gt; on 2021-11-30&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.45 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052000&lt;/strong&gt; on 2021-11-30&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.051005 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.034' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.034&lt;/strong&gt; on 2021-11-28&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.033 was 6 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.59&lt;/strong&gt; on 2021-12-02&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.58 was 1 month, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.876' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.876&lt;/strong&gt; on 2021-12-02&lt;/li&gt;  &lt;li&gt;Votes: 89&lt;/li&gt;  &lt;li&gt;Previous version: 1.875 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.875' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.875&lt;/strong&gt; on 2021-12-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.873 was 1 year, 4 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.30&lt;/strong&gt; on 2021-11-30&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.29 was 5 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DBOOK/Mojo-SQLite-3.008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::SQLite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny Mojolicious wrapper for SQLite &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.008&lt;/strong&gt; on 2021-11-28&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 3.007 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-12-04&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.10.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.10.0&lt;/strong&gt; on 2021-12-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.9.0 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000144&lt;/strong&gt; on 2021-12-03&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.000142 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.085' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.085&lt;/strong&gt; on 2021-12-04&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.084 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2438191565013524930/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxx-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2438191565013524930"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2438191565013524930"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxx-12-great-cpan-modules-released.html" title="(ccclxx) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7225888110025479431</id>
    <published>2021-12-04T17:26:00.002+01:00</published>
    <updated>2021-12-04T17:26:21.895+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxciii) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 26&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/12/04 16:26:06 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Modern::Document::OpenAPI" target="_blank"&gt;JSON::Schema::Modern::Document::OpenAPI&lt;/a&gt; - One OpenAPI v3.1 document&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/aliased" target="_blank"&gt;aliased&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Iptables2Dot" target="_blank"&gt;App::Iptables2Dot&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::shcompgen" target="_blank"&gt;App::shcompgen&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Faker" target="_blank"&gt;Data::Faker&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=251)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Enbugger" target="_blank"&gt;Enbugger&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Complete" target="_blank"&gt;Getopt::Long::Complete&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteProcess" target="_blank"&gt;Mojo::IOLoop::ReadWriteProcess&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IRC" target="_blank"&gt;Mojo::IRC&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=465)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::HTTP::Async" target="_blank"&gt;MojoX::HTTP::Async&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSL::ExpireDate" target="_blank"&gt;Net::SSL::ExpireDate&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::CognitiveComplexity" target="_blank"&gt;Perl::Critic::CognitiveComplexity&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::SigAction" target="_blank"&gt;Sys::SigAction&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColor" target="_blank"&gt;Term::ANSIColor&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Perl::Critic" target="_blank"&gt;Test::Perl::Critic&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::XPath" target="_blank"&gt;Test::XPath&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unidecode" target="_blank"&gt;Text::Unidecode&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7225888110025479431/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/cdxciii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7225888110025479431"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7225888110025479431"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/cdxciii-metacpan-weekly-report.html" title="(cdxciii) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-607926694231674912</id>
    <published>2021-12-04T17:25:00.000+01:00</published>
    <updated>2021-12-04T17:25:10.796+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-12-04 16:19:09 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70167857" target="_blank"&gt;Why would you ever need (?(R)...|...) if condition in a regex?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70158802" target="_blank"&gt;MultiDimensional array Input to Single array in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70139704" target="_blank"&gt;Perl code executed alongside C program writes incorrect byte length to memory in Windows&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70207227" target="_blank"&gt;Perl way to allocate some memory inglobal array&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70179933" target="_blank"&gt;Perl Dynaloader gives Usage error while calling function with parameters&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70181597" target="_blank"&gt;In Mojolicious can I forward to another action?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70190875" target="_blank"&gt;How do I search and replace a string after an arbitrary amount of white space in bash?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70193994" target="_blank"&gt;How to avoid line insert to the file if the line is already present in the file?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70138714" target="_blank"&gt;Perl match and extract phone number with (312) 555-1212 format&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70160375" target="_blank"&gt;Perl: What is the preferred way of evaluating expressions besides eval?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/607926694231674912/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/dxii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/607926694231674912"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/607926694231674912"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/dxii-stackoverflow-perl-report.html" title="(dxii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>100 Languages Speedrun: Episode 15: Awk</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-15-awk-1d55" type="text/html"/>
    <content type="html">&lt;p&gt;Awk is basically a proto-Perl. As Perl was one of the most influential language of all times (JavaScript, Ruby, and PHP are all Perl's direct descendants), Awk is indirectly quite historically important.&lt;/p&gt;

&lt;p&gt;There hasn't been any good reason to use Awk for decades now. As I keep saying over and over, if you write anything nontrivial, just use a real programming language like Ruby, Python, or Perl. But it's still interesting for historical reason, so let's check what coding was like back in the 1980s.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;Awk scripts are a series of &lt;code&gt;pattern { command }&lt;/code&gt;, where pattern is most often a regular expression. If script contains any such pattern, it will be executed on each line.&lt;/p&gt;

&lt;p&gt;Here's one way to say Hello, World! in Awk:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="sr"&gt;/./&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ seq 1 5 | ./hello.awk
Hello, 1!
Hello, 2!
Hello, 3!
Hello, 4!
Hello, 5!
$ ./hello.awk
World
Hello, World!
Bob Ross
Hello, Bob!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So any line that contains non-whitespace characters will result in a hello. String concatenation is done by just putting a few strings next to each other. &lt;code&gt;"Hello, " $1 "!"&lt;/code&gt; is what would be &lt;code&gt;"Hello, " + $1 + "!"&lt;/code&gt; or &lt;code&gt;"Hello, " . $1 . "!"&lt;/code&gt; or such in a more reasonable language.&lt;/p&gt;

&lt;p&gt;Each line is &lt;code&gt;$0&lt;/code&gt;, and it's also automatically split into words, so &lt;code&gt;$1&lt;/code&gt; means first word of currently processed lines, &lt;code&gt;$2&lt;/code&gt; means second word, etc. Those special variables are used for regular expression's first, second etc. match in Perl, Ruby, and some other languages, and I think that's where they came from.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sum-numbers-from-stdin"&gt;
  &lt;/a&gt;
  Sum numbers from STDIN
&lt;/h3&gt;

&lt;p&gt;There are some other patterns like &lt;code&gt;BEGIN&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; to do before and after processing lines. Here's a simple Awk program for adding all numbers, one per line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/[0-9]+/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which works like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ seq 10 20 | ./sum.awk
165
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awk has pre-Perl regular expressions, so things like &lt;code&gt;\d&lt;/code&gt; don't work. That's another reason why it's better to use something more modern.&lt;/p&gt;

&lt;p&gt;Awk's &lt;code&gt;BEGIN { }&lt;/code&gt; and &lt;code&gt;END { }&lt;/code&gt; blocks are still present in Perl, Ruby, and some other languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz-with-regexp"&gt;
  &lt;/a&gt;
  FizzBuzz with regexp
&lt;/h3&gt;

&lt;p&gt;One way to do the FizzBuzz is to reuse our regular expressions from episode 7. At first you might think command block would just do &lt;code&gt;{ print "FizzBuzz" }&lt;/code&gt; or such, but then all the other blocks would match too (divisible by 15 is also divisible by 3 and 5 etc.). An easy way is to modify &lt;code&gt;$0&lt;/code&gt; variable (current line). We print it at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="sr"&gt;/^(([0369]*[147]([258][0369]*[147]|[0369])*([258][0369]*[258]|[147])|[0369]*[258])(([147][0369]*[147]|[258])([258][0369]*[147]|[0369])*([258][0369]*[258]|[147])|([147][0369]*[258]|[0369]?))*(([147][0369]*[147]|[258])([258][0369]*[147]|[0369])*[258][0369]*|[147][0369]*)|([0369]*[147]([258][0369]*[147]|[0369])*[258][0369]*|[0369]*))0$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/^(([0369]*[147]([258][0369]*[147]|[0369])*([258][0369]*[258]|[147])|[0369]*[258])(([147][0369]*[147]|[258])([258][0369]*[147]|[0369])*([258][0369]*[258]|[147])|([147][0369]*[258]|[0369]?))*(([147][0369]*[147]|[258])([258][0369]*[147]|[0369])*([258][0369]*[147]|[0369]?)|([147][0369]*[147]|[258]))|([0369]*[147]([258][0369]*[147]|[0369])*([258][0369]*[147]|[0369]?)|[0369]*[147]))5$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/^.*[05]$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/^(([0369]*[147]([258][0369]*[147]|[0369])*([258][0369]*[258]|[147])|[0369]*[258])(([147][0369]*[147]|[258])([258][0369]*[147]|[0369])*([258][0369]*[258]|[147])|([147][0369]*[258]|[0369]?))*(([147][0369]*[147]|[258])([258][0369]*[147]|[0369])*[258][0369]*|[147][0369]*)|([0369]*[147]([258][0369]*[147]|[0369])*[258][0369]*|[0369]*))$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/./&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ seq 1 20 | ./fizzbuzz.awk
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;A less ridiculous version would be this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any expression can be used as pattern. &lt;code&gt;next&lt;/code&gt; prevents all other pattern checks for the current lines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-output"&gt;
  &lt;/a&gt;
  File output
&lt;/h3&gt;

&lt;p&gt;Awk makes it really easy to print to files. This script sort out the input to &lt;code&gt;odd.txt&lt;/code&gt; and &lt;code&gt;even.txt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="sr"&gt;/[13579]$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;odd.txt&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/[02468]$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;even.txt&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like in shell &lt;code&gt;&amp;gt;&lt;/code&gt; means overwrite the file, and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; means append. But while it might look like it will keep reopening and overwriting so you only see last line, each file will be opened just once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; % seq 20 30 | ./file_output.awk
$ cat odd.txt
21
23
25
27
29
$ cat even.txt
20
22
24
26
28
30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;print&lt;/code&gt; without arguments is the same as &lt;code&gt;print $0&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pipe-output"&gt;
  &lt;/a&gt;
  Pipe output
&lt;/h3&gt;

&lt;p&gt;Even nicer, we can do similar redirection with pipes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="sr"&gt;/[13579]$/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tac&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which matches all the lines with odd numbers and send them to &lt;code&gt;tac&lt;/code&gt; program to print them in backward order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ seq 10 30 | ./reverse_odds.awk
29
27
25
23
21
19
17
15
13
11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fibbonacci"&gt;
  &lt;/a&gt;
  Fibbonacci
&lt;/h3&gt;

&lt;p&gt;Awk has normal function definitions. There's no distinction between number and string variables. If we put a command block without a pattern, it will match every line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="nv"&gt;function&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ seq 1 20 | ./fib.awk
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rolling-dice"&gt;
  &lt;/a&gt;
  Rolling Dice
&lt;/h3&gt;

&lt;p&gt;Awk has some trouble with command line arguments - it normally treats them as files to open. This code only works because we don't actually have any per-line patterns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use it to roll 5 100-sided dice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./dice.awk 100 5
84
39
78
79
91
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tally"&gt;
  &lt;/a&gt;
  Tally
&lt;/h3&gt;

&lt;p&gt;Awk has associative arrays (nowadays usually called hashes or dictionaries).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/awk -f&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;tally&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tally&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;tally&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awk has no way to print regular arrays or associative arrays. If you try to &lt;code&gt;print tally&lt;/code&gt; it will give you an error. It's another feature of modern programming languages that has roots in times of Awk, but is now done in much better ways.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./dice.awk 6 100 | ./tally.awk
2 17
3 18
4 17
5 22
0 13
1 13
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#should-you-use-awk"&gt;
  &lt;/a&gt;
  Should you use Awk?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;Special purpose languages have their place, but what Awk is doing - processing text files - is no longer "special purpose". Pretty much every modern language excels at processing text files and matching regular expressions, and handles everything Awk does a lot better.&lt;/p&gt;

&lt;p&gt;Awk made a lot of sense back when its originated, as C was godawful at text processing, and Unix shell was godawful at writing any kind of structured programs, so Awk was addressing an obvious need. In modern times where every programmer is familiar with a language like Ruby, Python, Perl, or pretty much anything else that can process text, there's no place for Awk.&lt;/p&gt;

&lt;p&gt;The language also definitely shows its age. Its regular expression engine is bad. It doesn't have &lt;code&gt;console.log&lt;/code&gt; equivalent. It can't handle common text formats like CSV or JSON. It doesn't have sufficient Unicode capabilities. And so on. It does quite decently on conciseness, but only if you do exactly the kind of programs it likes - common requirements like parsing command line arguments will not work too well.&lt;/p&gt;

&lt;p&gt;Awk is mainly of historical relevance, but it's not completely dead yet. If you work with a lot of Unix shell scripts, short Awk programs will be occasionally used there. I don't approve of this at all (seriously, just use real programming language like Ruby, Python, or Perl), but it might be useful to learn basics of Awk so you can read such shell code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-15-awk"&gt;Code for the Awk episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-15-awk-1d55</id>
    <published>2021-12-04T14:49:33Z</published>
    <updated>2021-12-04T14:49:33Z</updated>
    <category term="unix"/>
    <category term="awk"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Geizhals Preisvergleich sponsors the German Perl/Raku Workshop 2022</title>
    <link rel="alternate" href="http://blogs.perl.org/users/max_maischein/2021/12/geizhals-preisvergleich-sponsors-the-german-perlraku-workshop-2022.html"/>
    <id>tag:blogs.perl.org,2021:/users/max_maischein//227.10560</id>
    <published>2021-12-04T14:33:58Z</published>
    <updated>2021-12-04T14:36:03Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <category term="gpw2022" label="gpw2022" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>In 2022, the German Perl/Raku Workshop will take place in Leipzig. We are very happy to announce that long time Perl supporter Geizhals Preisvergleich sponsor the workshop.</p>
]]>
        <![CDATA[<p><a href="https://geizhals.de/">Geizhals Preisvergleich</a> zählt zu den größten Produkt- und
Preisvergleichsplattformen im deutschsprachigen Raum.</p>

<p>Unser Unternehmen bewährt sich seit mittlerweile 20 Jahren in einer hoch
kompetitiven, dynamischen Branche.</p>

<p>Unseren Erfolg führen wir auf eine kompromisslose Umsetzung unserer
Unternehmensphilosophie zurück: Transparenz, objektive und
User-orientierte Information sowie Qualität unseres Contents.</p>

<p>Geizhals Preisvergleich ist ein mit der Heise Medien Gruppe verbundenes
Unternehmen.</p>

<p><a href="https://unternehmen.geizhals.at/jobs/#tech">Geizhals sucht Mitarbeiter</a></p>
]]>
    </content>
</entry>
  <entry>
    <title>Weekly Challenge 141</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-141-133e" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-141/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-141/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-number-divisors">
  </a>
  TASK #1 › Number Divisors
</h2>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>Write a script to find lowest 10 positive integers having exactly 8 divisors.</p>

<h2>
  <a href="#my-solutions">
  </a>
  My solutions
</h2>

<p>The main part of this challenge is calculating the number of divisors a given number has. This is one of those cases where you can over-optimize the code for no real benefit. My function <code>divisors</code> assumes that a number has two divisors (1 and itself) and then goes from 2 to half the number to see if there is any other divisors. A special case is made for one, which only has one divisor.</p>

<p>Once that part is done, the main function has an list called <code>solutions</code>, and set <code>number</code> to 1. It then increments <code>number</code> and adds it to the <code>solutions</code> list if it has eight divisors, continuing until we have 10 numbers.</p>

<p>The Perl solution is a transliteration of the Python code.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py
24, 30, 40, 42, 54, 56, 66, 70, 78, 88

$ ./ch-1.pl
24, 30, 40, 42, 54, 56, 66, 70, 78, 88
</code></pre>

</div>



<h2>
  <a href="#task-2-like-numbers">
  </a>
  TASK #2 › Like Numbers
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given positive integers, <code>$m</code> and <code>$n</code>.</p>

<p>Write a script to find total count of integers created using the digits of <code>$m</code> which is also divisible by <code>$n</code>.</p>

<p>Repeating of digits are not allowed. Order/Sequence of digits can’t be altered. You are only allowed to use (n-1) digits at the most. For example, 432 is not acceptable integer created using the digits of 1234. Also for 1234, you can only have integers having no more than three digits.</p>

<h3>
  <a href="#my-solutions">
  </a>
  My solutions
</h3>

<p>In Python I use itertools' <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations">combinations</a> function to generate a list of all combinations. I then use a for loop to count the number of combinations that are divisible by <code>n</code>.</p>

<p>Perl doesn't have a built in combination function, so I took a slight different tack with this task. I basically used a binary switch to generate a list of combinations using <code>map { substr( $m, $_, 1 ) } grep { $i &amp; 2**$_ } ( 0 .. $l - 1 )</code> where <code>$l</code> is the length of the first number (<code>$m</code>) and <code>$i</code> is between 1 and 2<sup>$l</sup> - 2.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 1234 2
9

$ ./ch-2.py 768 4
3

$ ./ch-2.pl 1234 2
9

$ ./ch-2.pl 768 4
3
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-141-133e</id>
    <published>2021-12-04T10:39:48Z</published>
    <updated>2021-12-04T10:39:48Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Grant report: Optimizations building upon the new Raku dispatch mechanism</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-raku-2021-11"/>
  <id>tag:news.perlfoundation.org,2021-12-04:/post/jonathan-raku-2021-11</id>
  <published>2021-12-04T05:27:10</published>
  <updated>2021-12-04T05:27:10</updated>
  <summary>
  <![CDATA[
     Jonathan writes: My latest grant proposal was recently approved. I had the possibility to dedicate quality time to Raku work at the start of November, but knew I would be tied up with some other work in the latter part of the month. Thus I optimistically forged ahead with some grant work while I could, crossing my fingers for approval. This report covers what got done. The main completed task 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan writes:
<hr>
My latest <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_optimizations">grant proposal</a> 
was <a href="https://news.perlfoundation.org/post/grants_nov_2021_votes">recently approved</a>. 
I had the possibility to dedicate quality time to Raku work at the start of November, but knew I would be tied up with some other
work in the latter part of the month. Thus I optimistically forged ahead with some grant work while I could,
crossing my fingers for approval. This report covers what got done.</p>

<p>The main completed task was to reorganize and streamline return and stack unwind handling. My work on the
new dispatch mechanism introduced a new callstack layout. This created an opportunity to simplify the way
we handle stack unwinding - that is, removing frames either because we are returning or because of an
exception. Since this happens for every single non-inlined block or routine that we call, savings here
have an impact on all but the most micro of micro-benchmarks. For example, a recursive Fibonacci benchmark
(written recursively to frustrate inlining) showed a 5% improvement from this work. The work also elimiated
some <code>malloc</code> calls in favor of callstack allocation in a number of situations, and resulted in overall
simpler and smaller code in MoarVM. Faster and simpler is certainly welcome.</p>

<p>I also did some optimization on frame invocation, primarily by splitting the specialized and unspecialized
callframe setup paths, which allowed for eliminating a number of branches that the C compiler was not able
to. This new factoring also revealed an opportunity to fold two <code>memset</code> calls into one, which was also a
welcome saving. This was worth a further 3% off the recursive Fibonacci benchmark. (To give a picture of how
Raku compares with Perl in this benchmark, Raku runs it in around two thirds of the time, despite the fact
that it has to cope with the potential upgrade of <code>Int</code> to a big integer.)</p>

<p>A central goal for the grant as a whole is to make progress on escape analysis. When I worked on this previously,
a particular challenge was the reliance on attribute container to vivify (get allocated) upon first touch. This
was not so much an optimization as a means to determine if an attribute had been initialized, for the purpose of
running defaults. Unfortunately, however, it greatly complicates the escape analysis of object graphs at creation
time, and makes all attribute access a little more costly. (One could also get occasionally surprised by the fact
that reading an attribute during a constructor would count as initializing it too.) Thus, I started working on a
new appraoch, based upon container descriptors, which are also the mechanism used in array and hash element
auto-vivification. The work in progress is currently a pull request, which needs further work to analyze why
it causes regressions in a small number of modules; this new approach does, however, already passes the
specification test suite.</p>

<p>I also did some design work for a faster and simpler way to handle <code>LEAVE</code> blocks. Today they carry quite some
performance overhead, we are unable to ever inline them, and needing to support them imposes a small, but non-zero,
cost on the exit of every callframe, regardless of if they have a <code>LEAVE</code> block. The new design I have worked on
should fix all of these issuses, and I hope to implement it during December. Even if <code>LEAVE</code> is rarely directly
used, it plays an important part in ensuring locks are reliabily released, and so is used implicitly in many
programs.</p>

<p>Finally, I also tracked down and fixed a bug in the intersection of dispatch resumption and inlining. </p>

<p><code>
Time spent on the grant: 30 hours 52 minutes
Time remaining on the grant: 169 hours 8 minuates
</code></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Writing a SNES assembler compiler/disassembler - Day 1</title>
    <link rel="alternate" href="http://blogs.perl.org/users/sylvain_colinet/2021/12/writing-a-snes-assembler-compilerdisassembler---day-1.html"/>
    <id>tag:blogs.perl.org,2021:/users/sylvain_colinet//2727.10559</id>
    <published>2021-12-04T01:02:13Z</published>
    <updated>2021-12-04T01:12:37Z</updated>
    <author>
        <name>Sylvain Colinet</name>
        
    </author>
    <category term="Perl 6" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/sylvain_colinet/">
        <![CDATA[<h1 data-line="0" class="code-line" id="writing-a-snes-assembler-compilerdisassembler" style="padding-bottom: 0.3em; line-height: 1.25; border-bottom: 1px solid rgb(234, 236, 239); font-weight: 600; box-sizing: border-box; border-top-color: rgba(255, 255, 255, 0.18); border-right-color: rgba(255, 255, 255, 0.18); border-left-color: rgba(255, 255, 255, 0.18); margin-bottom: 16px; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">Writing a SNES assembler compiler/disassembler</h1><p data-line="2" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Why&nbsp;? Because I can. More seriously I have a project where I need to inject new Snes code in a running game and I want to express directly this new code in my Raku component (A webserver service). I want to have special sub that returns me Snes bytecode but that contains Snes assembler.</p><p data-line="6" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">I tried injecting a SLANG in Raku already. Like writing&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">my $byte-code = SNES lda $42; sta $54; rtl;</code>&nbsp;But it’s rather tricky and I will probably just have a additional Slang with its own grammar in a dedicated file.</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="9" class="code-line language-raku" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">use SNES-ASM;

sub unlock-door (%door-id) {
    lda #%door-id
    sta $12
    jmp $4565
    rtl
}
</div></code></code></pre><p data-line="20" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">And later in code, I can just do&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">my $unlock-bytecode = SNES::unlock-door(42)</code></p><p data-line="22" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">I could just write a custom grammar and have an existing library (libasar) to generate me the bytecode. but since I will write the first part of an assembler (parsing and validating code), why not write a complete assembler anyways?</p><h2 data-line="25" class="code-line" id="a-byte-on-the-snes-asm" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; line-height: 1.25; padding-bottom: 0.3em; border-bottom: 1px solid rgb(234, 236, 239); position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">A byte on the Snes ASM</h2><p data-line="27" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">The Snes only have one accumulator (A) and 2 index register. Most instructions work on these 3 storages space (in 8 or 16 bits mode)</p><p data-line="29" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;"><code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">lda</code>&nbsp;load a value in A,&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">sta</code>&nbsp;put a value in A. Number can be written like&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">42</code>&nbsp;or more commonly with a $ before to say it's an hexadecimal value&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">$20</code>. A word is 2 bytes long, a long is 3 bytes long.</p><h2 data-line="33" class="code-line" id="generating-instructions" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; line-height: 1.25; padding-bottom: 0.3em; border-bottom: 1px solid rgb(234, 236, 239); position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">Generating instructions</h2><p data-line="35" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Since I don't want to type the whole instruction set and its associated bytecode. I will use the table I refer to when I write SNES code (Sometimes I question my sanity)</p><p data-line="37" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">With Gumbo and the XML module, I generate a list of instructions from&nbsp;<a href="https://wiki.superfamicom.org/65816-reference" data-href="https://wiki.superfamicom.org/65816-reference" title="https://wiki.superfamicom.org/65816-reference" style="color: rgb(3, 102, 214); text-decoration-line: none; box-sizing: border-box; background-color: initial;">https://wiki.superfamicom.org/65816-reference</a></p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="39" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">@instructions.push(Instruction.new(:inst("ADC"), :addressing(DP-INDEXED-INDIRECT-X), :description("Add With Carry"), :byte(0x61), :alias("")));
@instructions.push(Instruction.new(:inst("ADC"), :addressing(STACK-RELATIVE), :description("Add With Carry"), :byte(0x63), :alias("")));
@instructions.push(Instruction.new(:inst("ADC"), :addressing(DIRECT-PAGE), :description("Add With Carry"), :byte(0x65), :alias("")));
</div></code></code></pre><p data-line="45" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">This table is not complete because some instructions are 'ambiguous in their normal form. Something like&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">ldx 42</code>&nbsp;could be compiled differently if you encode 42 as a word or a byte so I will need to add some stuff later.</p><p data-line="48" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Addressing is a generated Enum</p><p data-line="50" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Everything is put in a&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">ASM65816.rakumod</code>&nbsp;file</p><h3 data-line="52" class="code-line" id="rant-time---hashset" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; font-size: 1.25em; line-height: 1.25; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">Rant Time - HashSet</h3><p data-line="54" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">When generating this, the addressing part was put in a Set since I want to generate an enumeration from it.</p><p data-line="56" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">Why does a Mutable Set have to be a Hash and not just a regular Array? It makes sense if you look at how to implement this since in a Hash each key is unique, but I don't get why this has to be exposed this way for the user. Having to write&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">for $myset.keys -&gt; $entry { do stuff}</code>&nbsp;feel so wrong and dumb.</p><h2 data-line="59" class="code-line" id="addressing-the-addressing" style="margin-top: 24px; font-weight: 600; margin-bottom: 16px; box-sizing: border-box; line-height: 1.25; padding-bottom: 0.3em; border-bottom: 1px solid rgb(234, 236, 239); position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;;">Addressing the Addressing</h2><p data-line="61" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">An instruction is basicly something like&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">&lt;keyword&gt; &lt;addressing&gt;</code>. Addressing is what you are trying to affect with the instruction. Some example :</p><ul data-line="64" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; padding-left: 2em; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;"><li data-line="64" class="code-line" style="box-sizing: border-box; position: relative;">Nothing :&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">rtl</code></li><li data-line="65" class="code-line" style="box-sizing: border-box; margin-top: 0.25em; position: relative;">Constant/Immediate :&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">lda #42</code>&nbsp;put 42 in A</li><li data-line="66" class="code-line" style="box-sizing: border-box; margin-top: 0.25em; position: relative;">Address/Absolute :&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">lda $4545</code>&nbsp;put the value of the address $4545 in A</li><li data-line="67" class="code-line" style="box-sizing: border-box; margin-top: 0.25em; position: relative;">Indirect :&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">lda ($4545)</code>&nbsp;put the value of the address pointed by $4545</li><li data-line="68" class="code-line" style="box-sizing: border-box; margin-top: 0.25em; position: relative;">Indexed X :&nbsp;<code style="color: inherit; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: 1.357em; box-sizing: border-box; padding: 0.2em 0.4em; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px;">lda $42, X</code>&nbsp;put the value of the address $42, + the value of the X register</li></ul><p data-line="70" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">You probably saw DP/Direct-page from the example of the instruction table. Direct Page is a special range of address that is basicly the beginning of the RAM (WRAM) of the Snes.</p><p data-line="73" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">We can already write the Grammar for all the addressing and what I called Number (byte, word, dp, ect...)</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="75" class="code-line language-raku" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">grammar Number {
    token byte {
        | '$' &lt;xdigit&gt; ** 1..2
        | \d+&lt;?{ $/ &lt; 0x100}&gt;
    }
    token word {
        | '$' &lt;xdigit&gt; ** 3..4
        | \d+&lt;?{ $/ &lt; 0x10000}&gt;
    }
    token long {
        | '$' &lt;xdigit&gt; ** 1..6
        | \d+&lt;?{ $/ &lt; 0x1000000}&gt;
    }
    token bank {
        &lt;byte&gt;
    }
    token dp {
        &lt;byte&gt;
    }
    token pc-relative {
        | '$' &lt;xdigit&gt; ** 1..4
        | \d+&lt;?{ $/ &lt; 0x10000}&gt;
    }
    token pc-relative-long {
        | '$' &lt;xdigit&gt; ** 4..6
        | \d+&lt;?{ $/ &lt; 0x1000000}&gt;
    }
};
</div></code></code></pre><p data-line="106" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">I will probably rename thesebecause they are basicl what I need to encode after the instruction opcode.</p><p data-line="108" class="code-line" style="margin-bottom: 16px; box-sizing: border-box; position: relative; color: rgb(36, 41, 46); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px;">This is part of the Addressing grammar. Absolute is a word, since an address that is &lt; $100 is Direct Page.</p><pre style="box-sizing: border-box; padding: 16px; border-radius: 3px; overflow: auto; background-color: rgb(246, 248, 250); color: initial; margin-bottom: 16px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; overflow-wrap: normal; line-height: 1.45; white-space: pre-wrap; background-image: initial !important; background-position: initial !important; background-size: initial !important; background-repeat: initial !important; background-attachment: initial !important; background-origin: initial !important; background-clip: initial !important;"><code data-line="110" class="code-line" style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 13.6px; line-height: inherit; tab-size: 4; box-sizing: border-box; background: initial; border-radius: 3px; word-break: normal; white-space: pre; display: inline; overflow: visible; overflow-wrap: normal; position: relative;"><code style="color: initial; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, monospace; font-size: 11.56px; line-height: inherit; tab-size: 4; box-sizing: border-box; background-color: initial; border-radius: 3px; display: inline; overflow: visible; overflow-wrap: normal;"><div style="box-sizing: border-box; background: none;">grammar Addressing is Number {
    token ABSOLUTE {
        &lt;word&gt;
    }
    token ABSOLUTE-INDEXED-INDIRECT {
        '(' &lt;word&gt; ',' 'X' ')'
    }
    token ABSOLUTE-INDEXED-X {
        &lt;word&gt; ',' 'X'
    }
    token ABSOLUTE-INDIRECT {
        '(' &lt;word&gt; ')'
    }
    token ABSOLUTE-LONG {
        &lt;long&gt;
    }
    token ACCUMULATOR {
        'A'
    }
    token DP-INDIRECT-LONG {
        '[' &lt;dp&gt; ']'
    }
    token DP-INDIRECT-LONG-INDEXED-Y {
        '[' &lt;dp&gt; ']' ',' 'Y'
    }
    token DIRECT-PAGE {
        &lt;dp&gt;
    }
    token IMMEDIATE {
        |'#'&lt;word&gt;
        |'#'&lt;byte&gt;
    }
    token IMMEDIATE-BYTE {
        '#'&lt;byte&gt;
    }
    token IMMEDIATE-WORD {
        '#'&lt;word&gt;
    }
    token PROGRAM-COUNTER-RELATIVE {
        &lt;pc-relative&gt;
    }
    ....
}</div></code></code></pre> ]]>
        
    </content>
</entry>
  <entry>
    <title>Developing A Game Engine with Perl: Part 7 - Fork</title>
    <link rel="alternate" href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-7-fork-3acm" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;Pssssst...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuing from our last post, I talked about how &lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine&lt;/a&gt; is a &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;colourful telnet server&lt;/a&gt;. We left off with needing to fork the engines telnet server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#player-2-has-joined-the-game"&gt;
  &lt;/a&gt;
  Player 2 has joined the game!
&lt;/h2&gt;

&lt;p&gt;Time to level up our telnet server and make it multi-player with some knify forky.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh4vwXMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyx9lszlna5k69crhw62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh4vwXMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyx9lszlna5k69crhw62.png" alt="Image description" width="487" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've added in the &lt;a href="https://man7.org/linux/man-pages/man3/strftime.3.html"&gt;&lt;code&gt;strftime&lt;/code&gt;&lt;/a&gt; identifier from &lt;a href="https://perldoc.perl.org/POSIX"&gt;Perl's POSIX module&lt;/a&gt; to help with time stamping the output. The &lt;a href="https://man7.org/linux/man-pages/man2/setsid.2.html"&gt;&lt;code&gt;setsid&lt;/code&gt;&lt;/a&gt; identifier is for starting a new session and group ID for each forked process. A.K.A, the child process. &lt;a href="https://perldoc.perl.org/functions/waitpid"&gt;&lt;code&gt;:sys_wait_h&lt;/code&gt;&lt;/a&gt; is for returning without wait after the child process has exited, using the WNOHANG flag when calling &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;waitpid()&lt;/a&gt;. This provides non-blocking wait for all pending &lt;strong&gt;zombie&lt;/strong&gt; children.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zombie-attack"&gt;
  &lt;/a&gt;
  Zombie Attack!!!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_dXRqOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31gew1fffn1ac0v0zfzn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_dXRqOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31gew1fffn1ac0v0zfzn.jpeg" alt="Image description" width="500" height="281"&gt;&lt;/a&gt;&lt;br&gt;
You see, when a process dies (exits), it becomes a zombie and needs to be &lt;strong&gt;reaped&lt;/strong&gt;. This will be done when our parent process calls &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;waitpid&lt;/a&gt; after receiving a &lt;a href="https://man7.org/linux/man-pages/man7/signal.7.html"&gt;CHLD signal&lt;/a&gt;, indicating the child has stopped or terminated.&lt;/p&gt;

&lt;p&gt;Ok, I hope that will give you enough information to work with while dissecting the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/perl
use strict;
use warnings;
use IO::Socket::INET;
use POSIX qw(setsid);
use POSIX qw(strftime);
use POSIX ":sys_wait_h";

sub timestamp {
    my $epoc_seconds = time();
    my $time = strftime "%H:%M:%S", localtime($epoc_seconds);
    my $date = strftime "%m/%d/%Y", localtime;
    my $return = $date . " " . $time;
    return ($return);
}

sub logmsg { print timestamp . " -&amp;gt; $0 -&amp;gt; PID:$$: @_ \n" }
logmsg "Begin";

my $socket = new IO::Socket::INET (
    LocalHost =&amp;gt; '192.168.1.15',
    LocalPort =&amp;gt; '27777',
    Proto =&amp;gt; 'tcp',
    Listen =&amp;gt; SOMAXCONN,
    ReuseAddr =&amp;gt; 1
);

my $waitedpid = 0;
my $player_data;
my $player_socket;

sub REAPER {
    local $!;   # don't let waitpid() overwrite current error
    logmsg "Ending Player's Game";
    while ((my $pid = waitpid(-1, WNOHANG)) &amp;gt; 0 &amp;amp;&amp;amp; WIFEXITED($?)) {
        logmsg "Closed Game ID:$pid : WaitPid:$waitedpid : " . ($? ? " with exit $?" : "");
    }
    $SIG{CHLD} = \&amp;amp;REAPER;  # loathe SysV
}
#if we get the CHLD signal call REAPER sub
$SIG{CHLD} = \&amp;amp;REAPER;

logmsg "Ready and waiting for connection";
while(1)
{
    next unless $player_socket = $socket-&amp;gt;accept();
    logmsg ("Incomming Connection");
    logmsg ("Spawning Player A Game");
    my $pid = fork();

    next if $pid; #NEXT if $pid exists (parent)

    #As Child
    setsid();
    my $proc = $$;

    logmsg ("Game ID:$proc -&amp;gt; Ready");

    # get information about a newly connected player
    my $player_address = $player_socket-&amp;gt;peerhost();
    my $player_port    = $player_socket-&amp;gt;peerport();
    logmsg "Game ID:$proc -&amp;gt; Connection from $player_address:$player_port";

    my $response = "Welcome Player: $player_address:$player_port. Press any key to disconnect.";
    $player_socket-&amp;gt;send($response);

    while ($player_socket-&amp;gt;connected()) {
        $player_socket-&amp;gt;recv($player_data, 1024);
            if ($player_data) {
                logmsg "Player Disconnecting $player_address : $player_port";
                $socket-&amp;gt;close();
                logmsg "Player Disconnected";
                last;
            }
    }
    last;
}
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code and connecting with two players via &lt;a href="https://syncterm.bbsdev.net/"&gt;SyncTERM&lt;/a&gt;, our &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;client of choice&lt;/a&gt;, shows the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~/ANSIGameEngine # perl forking_telnet_server.pl 
12/03/2021 18:16:58 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Begin 
12/03/2021 18:16:58 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Ready and waiting for connection 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Incomming Connection 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Spawning Player A Game 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Game ID:15979 -&amp;gt; Ready 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Game ID:15979 -&amp;gt; Connection from 192.168.1.9:33422 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Incomming Connection 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Spawning Player A Game 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Game ID:15980 -&amp;gt; Ready 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Game ID:15980 -&amp;gt; Connection from 192.168.1.9:33428 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Player Disconnecting 192.168.1.9 : 33422 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Player Disconnected 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Ending Player's Game 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Closed Game ID:15979 : WaitPid:0 :  
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Player Disconnecting 192.168.1.9 : 33428 
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Player Disconnected 
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Ending Player's Game 
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Closed Game ID:15980 : WaitPid:0 :  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJVxSJuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my89biw6wsyhn0kx7klb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJVxSJuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my89biw6wsyhn0kx7klb.png" alt="Image description" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-all-works"&gt;
  &lt;/a&gt;
  How it all works
&lt;/h2&gt;

&lt;p&gt;The main (parent) process that accepts new incoming telnet requests is &lt;code&gt;PID:15978&lt;/code&gt; in the above example. After it sets up the listen server, it waits for a connection request and creates a forked process when a new player connects (child). The code distinguishes the parent (main waiting telnet server) process from the child (player) process with the value &lt;a href="https://perldoc.perl.org/functions/fork"&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; returns. The parent process receives the child's (player) PID as the return value of &lt;code&gt;fork()&lt;/code&gt;, so it loops back up and waits for another player to connect. The child (player) process receives a value of &lt;code&gt;0&lt;/code&gt; from &lt;code&gt;fork()&lt;/code&gt;, so we continue downward in the code. In Perl doing &lt;code&gt;if($pid)&lt;/code&gt; does &lt;strong&gt;NOT&lt;/strong&gt; evaluate &lt;code&gt;TRUE&lt;/code&gt; if &lt;code&gt;$pid == (0 || undef)&lt;/code&gt;, which is what the child (player) process will receive as the returned value from &lt;code&gt;fork()&lt;/code&gt;. We give the child (player) process a new session, record it's PID (&lt;code&gt;$$&lt;/code&gt;) and wait for them to press any key. When the player presses a key the socket is closed and the child (player) process exists and becomes a zombie. This is when the parent (main) process receives the CHLD signal (&lt;code&gt;$SIG{CHLD}&lt;/code&gt;) and calls &lt;strong&gt;&lt;code&gt;REAPER&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-you"&gt;
  &lt;/a&gt;
  How about you?
&lt;/h2&gt;

&lt;p&gt;Have you worked with fork before? Have you unleashed a zombie apocalypse forgetting to reap? Comment about your experience, I'd love to hear your stories.&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;Prev &amp;lt;&amp;lt; Part 6 - A Colourful Telnet Server&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Next &amp;gt;&amp;gt; Coming Soon&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</content>
    <author>
      <name>Shawn Holland</name>
    </author>
    <id>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-7-fork-3acm</id>
    <published>2021-12-03T23:34:45Z</published>
    <updated>2021-12-03T23:34:45Z</updated>
    <category term="perl"/>
    <category term="linux"/>
    <category term="gamedev"/>
    <category term="devjournal"/>
  </entry>
  <entry>
    <title>Developing A Game Engine with Perl: Part 5 - 32bit -&gt; 64bit &amp; Perl's Storable </title>
    <link rel="alternate" href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-5---32bit---64bit-perls-storable.html"/>
    <id>tag:blogs.perl.org,2021:/users/shawn1//3947.10555</id>
    <published>2021-12-02T08:42:40Z</published>
    <updated>2021-12-03T07:18:04Z</updated>
    <author>
        <name>Shawn Holland</name>
        <uri>https://www.facebook.com/ANSIGameEngine</uri>
    </author>
    <category term="32bit" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="32bit architecture" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="64bit" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="64bit architecture" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="ANSI Game Engine" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Storable" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="architecture" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="byte order" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="compatibility" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="error" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="lock_nstore" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="lock_store" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="nstore" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="store" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="use" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="use Storable" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="32bit" label="32bit" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="32bitarchitecture" label="32bit architecture" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="64bit" label="64bit" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="64bitarchitecture" label="64bit architecture" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="ansigameengine" label="ANSI Game Engine" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="architecture" label="architecture" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="byteorder" label="byte order" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="compatibility" label="compatibility" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="error" label="error" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="lock_nstore" label="lock_nstore" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="lock_store" label="lock_store" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="nstore" label="nstore" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="storable" label="Storable" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="store" label="store" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="use" label="use" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="usestorable" label="use Storable" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/shawn1/">
        <![CDATA[<div><a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-2---mouse-input.html">If you haven't heard already...</a> <strong>I DO NOT KNOW WHAT I AM DOING.</strong></div><div><strong><br /></strong></div><div class="crayons-article__main"><div class="crayons-article__body text-styles spec__body" data-article-id="913844" id="article-body">

<p>If you want to start reading from the beginning. Check out the <a href="http://blogs.perl.org/users/shawn1/2021/11/developing-a-game-engine-with-perl.html">first article in this series</a></p>

<p>Continuing on with the <a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-4---uefi-vs-opensuse-installer.html">last article</a> let's talk about changing system architecture and how that can affect Perl code, specifically <a href="https://perldoc.perl.org/Storable">Storable</a>.</p>

<ul><li>Mouse Input Support</li><li>Hardware Failure</li><li>Server Upgrade</li><li>UEFI vs OpenSuSE Installer</li><li><strong>32bit -&gt; 64bit &amp; Perl's Storable</strong></li></ul>

<p>After the old server had <a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-3---hardware-failure-server-upgrade.html">HDD failures</a> and finally <a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-4---uefi-vs-opensuse-installer.html">managing to upgrade</a>
 to the new server, I eagerly began getting all the services and 
software installed to test the engine on new hardware. I was quickly 
meet with an error I have never seen before.</p>

<p><code>Byte order is not compatible at /usr/lib/perl5/5.34.0/x86_64-linux-thread-multi/Storable.pm</code></p>

<p>After doing some quick reading, I came to understand that Perl uses 
architecture specific ways to save content to files when using Storable.
 Specifically if you use <code>lock_store</code> and <code>store</code>. These are part of Perl's core system and what I use throughout the engine for working with the file structure.</p>

<p>I had to carefully re-read the perldoc's to discover that you can avoid architecture incompatibility by simply using <code>nstore</code> and <code>lock_nstore</code> The method you use for retrieving the stored files doesn't matter, only when storing the data into files does it matter.</p>

<p>I tried to find ways of being able to convert the stored files from 
32bit architecture to 64bit, but ultimately the only real option was to 
use the old server to re-store the files with lock_nstore.</p>

<p>Luckily the old PC was still working, and I was able to modify the 
code and re-store all the files. The change and usage was simple:</p>

<p>I had to change my use statement from:<br />
<code>use Storable qw(lock_store lock_retrieve);</code><br />
to<br />
<code>use Storable qw(lock_nstore lock_retrieve)</code></p>

<p>And to re-store I changed my code from this:<br />
<code>lock_store($data_ref, $dir_location);</code><br />
to<br />
<code>lock_nstore($data_ref, $dir_location);</code></p>

<p>Have you ever had to write code for architecture compatibility? Or 
fix code migrated from one architecture to another? What do you prefer 
for storing data to files in Perl?</p>

<p>If you have any suggestions or comments please share constructively. 
Also please visit our social media pages for lots of fun videos and 
pictures showing the game engine in action. </p>

<p><a href="https://www.instagram.com/ANSIGameEngine/">ANSI Game Engine on Instagram</a><br />
<a href="https://www.facebook.com/ANSIGameEngine">ANSI Game Engine on Facebook</a></p>

<p><a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-4---uefi-vs-opensuse-installer.html">Prev &lt;&lt; Part 4 - UEFI vs OpenSuSE Installer</a><br />
<a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-6---a-colourful-telnet-server.html">Next &gt;&gt; Part 6 - A Colourful Telnet Server</a></p>

<p>Cheers!<br />
Shawn</p>


          </div>

        </div>]]>
        
    </content>
</entry>
  <entry>
    <title>Developing A Game Engine with Perl: Part 6 - A Colourful Telnet Server</title>
    <link rel="alternate" href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-6---a-colourful-telnet-server.html"/>
    <id>tag:blogs.perl.org,2021:/users/shawn1//3947.10557</id>
    <published>2021-12-03T06:25:42Z</published>
    <updated>2021-12-03T06:40:09Z</updated>
    <author>
        <name>Shawn Holland</name>
        <uri>https://www.facebook.com/ANSIGameEngine</uri>
    </author>
    <category term="ANSI Game Engine" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="ANSI Graphics" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="IO::Socket::INET" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="IP Address" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Linux" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Mac" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Man page" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="OpenSuSE" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="OpenSuSE Tumbleweed" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Port" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="SOMAXCONN" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="SyncTERM" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Telnet" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Telnet Server" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Windows" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="cat" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="cpan" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="cpan module" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="fork" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="listen" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="listen server" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="listen(2)" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="sample code" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="use" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="use IO::Socket::INET" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="ansigameengine" label="ANSI Game Engine" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="ansigraphics" label="ANSI Graphics" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="cat" label="cat" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="cpanmodule" label="cpan module" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="fork" label="fork" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="iosocketinet" label="IO::Socket::INET" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="ipaddress" label="IP Address" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="linux" label="Linux" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="listen" label="listen" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="listenserver" label="listen server" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="listen2" label="listen(2)" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="mac" label="Mac" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="manpage" label="man page" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="opensuse" label="OpenSuSE" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="opensusetumbleweed" label="OpenSuSE Tumbleweed" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="port" label="Port" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="samplecode" label="sample code" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="somaxconn" label="SOMAXCONN" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="syncterm" label="SyncTERM" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="telnet" label="Telnet" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="telnetserver" label="Telnet Server" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="use" label="use" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="useiosocketinet" label="use IO::Socket::INET" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="windows" label="Windows" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/shawn1/">
        <![CDATA[<p><a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-2---mouse-input.html">I'll stop reminding you that...</a> <strong>I DO NOT KNOW WHAT I AM DOING.</strong></p>

<p>If you want to start reading from the beginning. Check out the <a href="http://blogs.perl.org/users/shawn1/2021/11/developing-a-game-engine-with-perl.html">first article in this series</a></p>

<h2>
  What is ANSI Game Engine?
</h2>

<p>Well, at it's core, <a href="https://www.facebook.com/ANSIGameEngine">ANSI Game Engine</a> is a very colourful and interactive telnet server.</p>

<p><strong>Why telnet!?</strong></p>

<p>I know, right!? I still ask myself the same question today, but at 
this point, I'm kinda committed. Initially, it all came down to my 
decision <strong>NOT</strong> to code the client side. I looked into it,
 and it just wasn't something I wanted to do. And honestly, it seemed 
too far outside my comfort level with Perl. I feel much more 
comfortable, and interested in, working with server side code, as may be
 true for other Perl dev's out there. That's where <a href="https://www.perl.org/">Perl</a> is quite prolific. Since I was going with <a href="https://en.wikipedia.org/wiki/ANSI_art">ANSI graphics</a>, they are best known these days, for me at least, to be used in telnet/terminal clients and <a href="https://en.wikipedia.org/wiki/Bulletin_board_system">BBS's</a>, which are mainly telnet based now. This being said, it wasn't long searching google before I came across SyncTERM. <a href="https://syncterm.bbsdev.net/">SyncTERM</a>
 is, in my opinion, the best available choice for cross-platform 
rendering of ANSI graphics over telnet. I've tried many different 
clients, on Mac, Windows, and Linux. SyncTERM works the most consistent 
across these platforms, it's been around for a long time and is still 
actively being developed. So telnet it is!</p>

<p><strong>Telnet.... Fork me...</strong></p>

<p>The engine has to be multiplayer. Depending on the specific game 
requirements, this does not necessarily mean players interacting with 
each other, but at least having multiple players connected at the same 
time to the same server. This is a minimum initial requirement. To me, 
this is a great opportunity to work with <a href="http://man.he.net/man2/fork">Fork</a>.
 I really like the idea of creating multiple processes with fork that 
can interact with each other. This is an area I have little experience 
with and a great opportunity to learn.</p>

<p><strong>Have you heard of Perl's CPAN?</strong></p>

<p>If you are a Perl dev, obviously yes. If you code in another language, perhaps you've heard of it. <a href="https://www.cpan.org/">Comprehensive Perl Archive Network</a>,
 or CPAN, is Perl's repository of code modules. If you want to do 
something, chances are someone has already made a module for that. As of
 writing this article, CPAN currently has 208,034 Perl modules written 
by 14,179 authors. It's absolutely amazing!</p>

<p>This is where I found the modules to develop a telnet server. A 
forking telnet server, can you believe it? Fork yah! Okokok.... I'll 
stop making that joke, I promise!</p>

<p><strong>Let's get to coding!</strong></p>

<p>The first step was to get a telnet server that could accept multiple 
simultaneous connections. I read up on how to make a telnet server with 
Perl and from that reading I quickly learned about <a href="https://metacpan.org/pod/IO::Socket::INET">IO::Socket::INET</a>. It wasn't long after I had working code for a telnet server!<br />
</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>use strict;
use warnings;
use IO::Socket::INET;
print "\nBEGIN\n";

print "Setting up listen socket\n";
my $socket = new IO::Socket::INET (
    LocalHost =&gt; '192.168.1.15',
    LocalPort =&gt; '27777',
    Proto =&gt; 'tcp',
    Listen =&gt; SOMAXCONN,
    ReuseAddr =&gt; 1
);

my $player_socket;
my $player_data;

print "Waiting for connection ...\n";
while(1) {

    next unless $player_socket = $socket-&gt;accept();
    print "Incomming Connection!\n";

    my $player_address = $player_socket-&gt;peerhost();
    my $player_port    = $player_socket-&gt;peerport();

    my $response = "Player Connection Info: $player_address : $player_port. ";
    print "$response\n";

    $response .= "Press Any Key To Disconnect...\n";
    $player_socket-&gt;send($response);

    print "Waiting for player to press a key and disconnect...\n";
    while ($player_socket-&gt;connected()) {

        $player_socket-&gt;recv($player_data, 1024);
        if ($player_data) {
            print "Player Disconnecting $player_address : $player_port\n";
            $socket-&gt;close();
            print "Player Disconnected\n";
            last;
        }

    }
    last;
}
print "Good Bye!\n";
exit;
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on">
    </svg></div></div></div><div class="highlight js-code-highlight"><div class="highlight__panel js-actions-panel"><div class="highlight__panel-action js-fullscreen-code-action"><svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on">
</svg>

    

</div>
</div>
</div>



<p>Running this code and connecting with SyncTERM shows:<br />
</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>localhost:~ # perl telnet_server.pl 

BEGIN
Setting up listen socket
Waiting for connection ...
Incomming Connection!
Player Connection Info: 192.168.1.9 : 55414. 
Waiting for player to press a key and disconnect...
Player Disconnecting 192.168.1.9 : 55414
Player Disconnected
Good Bye!

</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on">
    </svg></div></div></div><div class="highlight js-code-highlight"><div class="highlight__panel js-actions-panel"><div class="highlight__panel-action js-fullscreen-code-action"><svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on">
</svg>

    

</div>
</div>
</div>



<p><a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEvJGtrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0yb9l6o49xidryn1xg.png" class="article-body-image-wrapper"><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEvJGtrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0yb9l6o49xidryn1xg.png" alt="Image description" width="880" height="692" /></a></p>

<p>I read my <a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-4---uefi-vs-opensuse-installer.html">Linux OpenSuSE</a> server's man page for <a href="https://man7.org/linux/man-pages/man2/listen.2.html">listen(2)</a>, and the best I can understand is that the value for SOMAXCONN in  <a href="https://perldoc.perl.org/IO::Socket#Listen"><code>Listen =&gt; SOMAXCONN</code></a> will allow me to have up to  4096 connections!? I think this is correct. It says the value can be found in <code>/proc/sys/net/core/somaxconn</code> and doing a <a href="https://man7.org/linux/man-pages/man1/cat.1.html">cat</a> of that file shows 4096.<br />
</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>localhost:~ # cat /proc/sys/net/core/somaxconn 
4096

</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on">
    </svg></div></div></div><div class="highlight js-code-highlight"><div class="highlight__panel js-actions-panel"><div class="highlight__panel-action js-fullscreen-code-action"><svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewbox="0 0 24 24" class="highlight-action crayons-icon highlight-action--fullscreen-on">
</svg>

    

</div>
</div>
</div>



<p><strong>Now we just need to fork!</strong></p>

<p>This process turned out to be a bit more difficult to understand (for
 me) and a few more lines of code then did the telnet portion. I'll pick
 up from here in the next article.</p>

<p>Have you done any telnet programming before? If so, what modules have you found useful? (CPAN or otherwise)</p>

<p>If you have any suggestions or comments please share constructively. 
Also please visit our social media pages for lots of fun videos and 
pictures showing the game engine in action. </p>

<p><a href="https://www.instagram.com/ANSIGameEngine/">ANSI Game Engine on Instagram</a><br />
<a href="https://www.facebook.com/ANSIGameEngine">ANSI Game Engine on Facebook</a></p>

<p><a href="http://blogs.perl.org/users/shawn1/2021/12/developing-a-game-engine-with-perl-part-5---32bit---64bit-perls-storable.html">Prev &lt;&lt; Part 5 - 32bit -&gt; 64bit &amp; Perl's Storable</a><br />
<strong><em>Next &gt;&gt; Coming Soon</em></strong></p>

<p>Cheers!<br />
Shawn</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Developing A Game Engine with Perl: Part 6 - A Colourful Telnet Server</title>
    <link rel="alternate" href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;I'll stop reminding you that...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ansi-game-engine"&gt;
  &lt;/a&gt;
  What is ANSI Game Engine?
&lt;/h2&gt;

&lt;p&gt;Well, at it's core, &lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine&lt;/a&gt; is a very colourful and interactive telnet server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why telnet!?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I know, right!? I still ask myself the same question today, but at this point, I'm kinda committed. Initially, it all came down to my decision &lt;strong&gt;NOT&lt;/strong&gt; to code the client side. I looked into it, and it just wasn't something I wanted to do. And honestly, it seemed too far outside my comfort level with Perl. I feel much more comfortable, and interested in, working with server side code, as may be true for other Perl dev's out there. That's where &lt;a href="https://www.perl.org/"&gt;Perl&lt;/a&gt; is quite prolific. Since I was going with &lt;a href="https://en.wikipedia.org/wiki/ANSI_art"&gt;ANSI graphics&lt;/a&gt;, they are best known these days, for me at least, to be used in telnet/terminal clients and &lt;a href="https://en.wikipedia.org/wiki/Bulletin_board_system"&gt;BBS's&lt;/a&gt;, which are mainly telnet based now. This being said, it wasn't long searching google before I came across SyncTERM. &lt;a href="https://syncterm.bbsdev.net/"&gt;SyncTERM&lt;/a&gt; is, in my opinion, the best available choice for cross-platform rendering of ANSI graphics over telnet. I've tried many different clients, on Mac, Windows, and Linux. SyncTERM works the most consistent across these platforms, it's been around for a long time and is still actively being developed. So telnet it is!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Telnet.... Fork me...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The engine has to be multiplayer. Depending on the specific game requirements, this does not necessarily mean players interacting with each other, but at least having multiple players connected at the same time to the same server. This is a minimum initial requirement. To me, this is a great opportunity to work with &lt;a href="http://man.he.net/man2/fork"&gt;Fork&lt;/a&gt;. I really like the idea of creating multiple processes with fork that can interact with each other. This is an area I have little experience with and a great opportunity to learn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you heard of Perl's CPAN?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a Perl dev, obviously yes. If you code in another language, perhaps you've heard of it. &lt;a href="https://www.cpan.org/"&gt;Comprehensive Perl Archive Network&lt;/a&gt;, or CPAN, is Perl's repository of code modules. If you want to do something, chances are someone has already made a module for that. As of writing this article, CPAN currently has 208,034 Perl modules written by 14,179 authors. It's absolutely amazing!&lt;/p&gt;

&lt;p&gt;This is where I found the modules to develop a telnet server. A forking telnet server, can you believe it? Fork yah! Okokok.... I'll stop making that joke, I promise!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get to coding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first step was to get a telnet server that could accept multiple simultaneous connections. I read up on how to make a telnet server with Perl and from that reading I quickly learned about &lt;a href="https://metacpan.org/pod/IO::Socket::INET"&gt;IO::Socket::INET&lt;/a&gt;. It wasn't long after I had working code for a telnet server!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;
use warnings;
use IO::Socket::INET;
print "\nBEGIN\n";

print "Setting up listen socket\n";
my $socket = new IO::Socket::INET (
    LocalHost =&amp;gt; '192.168.1.15',
    LocalPort =&amp;gt; '27777',
    Proto =&amp;gt; 'tcp',
    Listen =&amp;gt; SOMAXCONN,
    ReuseAddr =&amp;gt; 1
);

my $player_socket;
my $player_data;

print "Waiting for connection ...\n";
while(1) {

    next unless $player_socket = $socket-&amp;gt;accept();
    print "Incomming Connection!\n";

    my $player_address = $player_socket-&amp;gt;peerhost();
    my $player_port    = $player_socket-&amp;gt;peerport();

    my $response = "Player Connection Info: $player_address : $player_port. ";
    print "$response\n";

    $response .= "Press Any Key To Disconnect...\n";
    $player_socket-&amp;gt;send($response);

    print "Waiting for player to press a key and disconnect...\n";
    while ($player_socket-&amp;gt;connected()) {

        $player_socket-&amp;gt;recv($player_data, 1024);
        if ($player_data) {
            print "Player Disconnecting $player_address : $player_port\n";
            $socket-&amp;gt;close();
            print "Player Disconnected\n";
            last;
        }

    }
    last;
}
print "Good Bye!\n";
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code and connecting with SyncTERM shows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~ # perl telnet_server.pl 

BEGIN
Setting up listen socket
Waiting for connection ...
Incomming Connection!
Player Connection Info: 192.168.1.9 : 55414. 
Waiting for player to press a key and disconnect...
Player Disconnecting 192.168.1.9 : 55414
Player Disconnected
Good Bye!

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEvJGtrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0yb9l6o49xidryn1xg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEvJGtrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th0yb9l6o49xidryn1xg.png" alt="Image description" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I read my &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;Linux OpenSuSE&lt;/a&gt; server's man page for &lt;a href="https://man7.org/linux/man-pages/man2/listen.2.html"&gt;listen(2)&lt;/a&gt;, and the best I can understand is that the value for SOMAXCONN in  &lt;a href="https://perldoc.perl.org/IO::Socket#Listen"&gt;&lt;code&gt;Listen =&amp;gt; SOMAXCONN&lt;/code&gt;&lt;/a&gt; will allow me to have up to  4096 connections!? I think this is correct. It says the value can be found in &lt;code&gt;/proc/sys/net/core/somaxconn&lt;/code&gt; and doing a &lt;a href="https://man7.org/linux/man-pages/man1/cat.1.html"&gt;cat&lt;/a&gt; of that file shows 4096.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~ # cat /proc/sys/net/core/somaxconn 
4096

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we just need to fork!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This process turned out to be a bit more difficult to understand (for me) and a few more lines of code then did the telnet portion. I'll pick up from here in the next article.&lt;/p&gt;

&lt;p&gt;Have you done any telnet programming before? If so, what modules have you found useful? (CPAN or otherwise)&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8"&gt;Prev &amp;lt;&amp;lt; Part 5 - 32bit -&amp;gt; 64bit &amp;amp; Perl's Storable&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-7-fork-3acm"&gt;Next &amp;gt;&amp;gt; Part 7 - Fork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</content>
    <author>
      <name>Shawn Holland</name>
    </author>
    <id>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g</id>
    <published>2021-12-02T09:06:57Z</published>
    <updated>2021-12-02T09:06:57Z</updated>
    <category term="perl"/>
    <category term="gamedev"/>
    <category term="linux"/>
    <category term="devjournal"/>
  </entry>
  <entry>
    <title>Merging multiple git repos with their commit history</title>
    <link href="http://domm.plix.at/perl/2021_12_git_merge_repos_with_history.html"/>
    <id>http://domm.plix.at/perl/2021_12_git_merge_repos_with_history.html</id>
    <updated>2021-12-01T12:14:41+00:00</updated>
    <category term="perl"/>
    <summary type="html">Advent of Code has started again and I'm again publishing my solutions to github (and probably also here). In the last two years I created on git repo for each year, but this year I changed my mind ...</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://adventofcode.com/2021"&gt;Advent of Code&lt;/a&gt; has started again and I'm again publishing my solutions to github (and probably also here). In the last two years I created on git repo for each year, but this year I changed my mind and want to have on repo containing a dir for each year.&lt;/p&gt;

&lt;p&gt;Now I could just copy all the files into the &lt;a href="https://github.com/domm/advent_of_code"&gt;new repo&lt;/a&gt;, but that would lose the commit history. Which is unacceptable!&lt;/p&gt;

&lt;h4&gt;The status quo ante&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
├── advent2019
│   ├── 01_1.pl
│   └── 01_2.pl
└── advent2020
    ├── 01_1.pl
    └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;What I want&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent_of_code
    ├── 2019
    │   ├── 01_1.pl
    │   └── 01_2.pl
    └── 2020
        ├── 01_1.pl
        └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know that git allows you to rewrite history and have once munged a repo using &lt;code&gt;git filter-branch&lt;/code&gt; (to completely delete some files and commits). I of course forgot the details, but after a little bit of searching and trial and error I got it working!&lt;/p&gt;

&lt;h4&gt;First, prepare the old repo&lt;/h4&gt;

&lt;p&gt;To prevent merge conflicts later, I first move the code in the old repo from the root dir into a new dir, eg &lt;code&gt;2019&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent2019
    ├── 01_1.pl
    └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent2019
    └─── 2019
        ├── 01_1.pl
        └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found &lt;a href="https://gist.github.com/fabiomaggio/ce7ecd7dffd27b32a45325204288efce"&gt;this gist&lt;/a&gt; very helpful, and adapted it to my needs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd advent2019
mkdir 2019
git filter-branch --tree-filter 'mkdir -p /tmp/ad; mv * /tmp/ad; mkdir 2019; mv /tmp/ad/* 2019/' --tag-name-filter cat --prune-empty -- --all&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uses &lt;code&gt;git filter-branch&lt;/code&gt; to move the old code to a temp dir (&lt;code&gt;mv * /tmp/ad&lt;/code&gt;) and then move it back to the new location (&lt;code&gt;mv /tmp/ad/* 2019/&lt;/code&gt;), using some git magic to keep the history.&lt;/p&gt;

&lt;p&gt;While I was at it, I also removed some of the AdventOfCode input files which I had commited (but which we should not commit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git filter-branch -f --tree-filter 'rm -f 2019/*.data' HEAD&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Second, import the repo&lt;/h4&gt;

&lt;p&gt;Now I can merge the old repo into my new unified repo. This time this &lt;a href="https://stackoverflow.com/a/6004865"&gt;StackOverflow comment&lt;/a&gt; pointed me in the right direction. The basic idea is to add the old repo as a new remote, fetch the commits, and then merge them using &lt;code&gt;--allow-unrelated-histories&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd advent_of_code
git remote add old19 ../advent2019/
git fetch old19
git merge --allow-unrelated-histories old19/master
git remote remove old19&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then push, and we're done and have a nice unified repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/advent_of_code$ tree
.
├── 2019
│   ├── 01_1.pl
│   ├── 01_2.pl
├── 2020
│   ├── 01_1.pl
│   ├── 01_2.pl
│   ├── 01_2_golf.pl
├── 2021
│   ├── 01_1.pl
│   ├── 01_1_golf.pl
│   └── 01_2.pl
└── README.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the history was preserved:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/advent_of_code$ git log 2019/24_1.pl
commit dbaf0bc1df645bda61ec5cf7e623d478a179947e
Author: Thomas Klausner &amp;lt;domm@plix.at&amp;gt;
Date:   Fri Dec 27 10:10:10 2019 +0100

    no need to keep a map around, the rating is unique per map&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Win!&lt;/p&gt;

&lt;p&gt;Next steps: Fix all links pointing to the old repos to point to the new location, and maybe archive / delete the github repos (and/or have them redirect to the new unified repo)&lt;/p&gt;</content>
    <category term="git"/>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>Developing A Game Engine with Perl: Part 5 - 32bit -&gt; 64bit &amp; Perl's Storable</title>
    <link rel="alternate" href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;If you haven't heard already...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuing on with the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;last article&lt;/a&gt; let's talk about changing system architecture and how that can affect Perl code, specifically &lt;a href="https://perldoc.perl.org/Storable"&gt;Storable&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mouse Input Support&lt;/li&gt;
&lt;li&gt;Hardware Failure&lt;/li&gt;
&lt;li&gt;Server Upgrade&lt;/li&gt;
&lt;li&gt;UEFI vs OpenSuSE Installer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;32bit -&amp;gt; 64bit &amp;amp; Perl's Storable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the old server had &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-3-hardware-failure-server-upgrade-on1"&gt;HDD failures&lt;/a&gt; and finally &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;managing to upgrade&lt;/a&gt; to the new server, I eagerly began getting all the services and software installed to test the engine on new hardware. I was quickly meet with an error I have never seen before.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Byte order is not compatible at /usr/lib/perl5/5.34.0/x86_64-linux-thread-multi/Storable.pm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After doing some quick reading, I came to understand that Perl uses architecture specific ways to save content to files when using Storable. Specifically if you use &lt;code&gt;lock_store&lt;/code&gt; and &lt;code&gt;store&lt;/code&gt;. These are part of Perl's core system and what I use throughout the engine for working with the file structure.&lt;/p&gt;

&lt;p&gt;I had to carefully re-read the perldoc's to discover that you can avoid architecture incompatibility by simply using &lt;code&gt;nstore&lt;/code&gt; and &lt;code&gt;lock_nstore&lt;/code&gt; The method you use for retrieving the stored files doesn't matter, only when storing the data into files does it matter.&lt;/p&gt;

&lt;p&gt;I tried to find ways of being able to convert the stored files from 32bit architecture to 64bit, but ultimately the only real option was to use the old server to re-store the files with lock_nstore.&lt;/p&gt;

&lt;p&gt;Luckily the old PC was still working, and I was able to modify the code and re-store all the files. The change and usage was simple:&lt;/p&gt;

&lt;p&gt;I had to change my use statement from:&lt;br&gt;
&lt;code&gt;use Storable qw(lock_store lock_retrieve);&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;use Storable qw(lock_nstore lock_retrieve)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And to re-store I changed my code from this:&lt;br&gt;
&lt;code&gt;lock_store($data_ref, $dir_location);&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;lock_nstore($data_ref, $dir_location);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Have you ever had to write code for architecture compatibility? Or fix code migrated from one architecture to another? What do you prefer for storing data to files in Perl?&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-4-uefi-vs-opensuse-installer-5e1c"&gt;Prev &amp;lt;&amp;lt; Part 4 - UEFI vs OpenSuSE Installer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;Next &amp;gt;&amp;gt; Part 6 - A Colourful Telnet Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</content>
    <author>
      <name>Shawn Holland</name>
    </author>
    <id>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-5-32bit-64bit-perls-storable-5l8</id>
    <published>2021-12-01T03:14:32Z</published>
    <updated>2021-12-01T03:14:32Z</updated>
    <category term="perl"/>
    <category term="gamedev"/>
    <category term="linux"/>
    <category term="devjournal"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/12/01/list-of-new-cpan-distributions-nov-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Mathpix">API-Mathpix</a></td>
<td><a href="https://metacpan.org/author/ERIAM">ERIAM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Use the API of Mathpix</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModulesBundle-Import-DAVECROSS">Acme-CPANModulesBundle-Import-DAVECROSS</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acme::CPANModules::* created from DAVECROSS's posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MarkdownTest">Acme-MarkdownTest</a></td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>0.01</td>
<td>0.02</td>
<td>test module to see how markdown is handled</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Meson">Alien-Meson</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Find or build meson build tool</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Ninja">Alien-Ninja</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Find or build Ninja build tool</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-SWIProlog">Alien-SWIProlog</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Alien package for the SWI-Prolog Prolog interpreter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libgpiod">Alien-libgpiod</a></td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>v0.1</td>
<td>v0.1</td>
<td>Find or build libgpiod (Linux GPIO character device library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AltaPay_Try">AltaPay_Try</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>v1.0.1</td>
<td>1.0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPANChangesUtils">App-CPANChangesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.074</td>
<td>0.074</td>
<td>Parse CPAN Changes file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Images-To-DjVu">App-Images-To-DjVu</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Base class and script for composing DjVu files from images.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-URIInfoUtils">App-URIInfoUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Utilities related to URI::Info</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ansiexpand">App-ansiexpand</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9901</td>
<td>ANSI sequence aware tab expand/unexpand command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-geoCancerDiagnosticDatasetsRetriever">App-geoCancerDiagnosticDatasetsRetriever</a></td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
<td>1</td>
<td>GEO Cancer Diagnostic Datasets Retriever is a bioinformatics tool for cancer diagnostic dataset retrieval from the GEO website.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-renlikewd">App-renlikewd</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>REName a file so it becomes LIKE the current (Working) Directory's name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-timeput">App-timeput</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.078</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-tjoin">App-tjoin</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.061</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-BinarySearch">Bencher-Scenario-BinarySearch</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Benchmark binary searching</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-BinarySearch-File">Bencher-Scenario-BinarySearch-File</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark binary searching sorted lines from a file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-URI-Info">Bencher-Scenarios-URI-Info</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Scenarios to benchmark URI::Info</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Commons-Link">Commons-Link</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.05</td>
<td>TODO.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cookie">Cookie</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Cookie Object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cookies">Cookies</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Cookies API for Server &amp; Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-DBFlow">DBIx-DBFlow</a></td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Database development helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-DBFlow-Runtime">DBIx-DBFlow-Runtime</a></td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Runtime utilities for DBIx::DBFlow</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Spreadsheet">DBIx-Spreadsheet</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Query a spreadsheet with SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ControllerAutoload">Dancer2-Plugin-ControllerAutoload</a></td>
<td><a href="https://metacpan.org/author/GILS">GILS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Autoload controllers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-DefaultValue">Data-Sah-DefaultValue</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Default-value rules for Data::Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-TableData-Rank">Data-TableData-Rank</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Add a rank column to a table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-Adapter-Gpiod">Device-Chip-Adapter-Gpiod</a></td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Device::Chip::Adapter implementation for Linux GPIO character devices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dyn">Dyn</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>dyncall Backed FFI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-Rule-DjVu">File-Find-Rule-DjVu</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Common rules for searching DjVu files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Syslogger">File-Syslogger</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Use POE to tail a file and read new lines into syslog.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-VarOptions">File-Temp-VarOptions</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like File::Temp, but allowing to set options with variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Workflow">Future-Workflow</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>asynchronous workflow management using futures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GitHubDDL">GitHubDDL</a></td>
<td><a href="https://metacpan.org/author/MACOPY">MACOPY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>GitDDL compatibility database migration utility when  hosted on GitHub</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hash-Util-Exists-Tiny">Hash-Util-Exists-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Some hash helper functions related to perl's exists function.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Diagnostic-RemoteHealth">HealthCheck-Diagnostic-RemoteHealth</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Get results from an HTTP HealthCheck</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IURL-XS">IURL-XS</a></td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>parsing URLs with zero-copy and no mallocs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iterator-Breathe">Iterator-Breathe</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0201</td>
<td>Iterate a counter up and back</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-Schema-Modern-Document-OpenAPI">JSON-Schema-Modern-Document-OpenAPI</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.001</td>
<td>0.005</td>
<td>One JSON Schema document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Ryu">Math-Ryu</a></td>
<td><a href="https://metacpan.org/author/SISYPHUS">SISYPHUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>perl interface to the ryu C library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-Features-Set">Module-Features-Set</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Features of modules that generate text tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MojoX-HTTP-Async">MojoX-HTTP-Async</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.08</td>
<td>simple package to execute multiple parallel requests to the same host</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-YamlRoutes">Mojolicious-Plugin-YamlRoutes</a></td>
<td><a href="https://metacpan.org/author/HDELGADO">HDELGADO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Generates routes from a yaml file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-RFC3161-Timestamp">Net-RFC3161-Timestamp</a></td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Utility functions to request RFC3161 timestamps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSDK">PERLSDK</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>v1.0.1</td>
<td>v1.0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PensioAPI">PensioAPI</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>1.0.1</td>
<td>1.0.1</td>
<td>Integrate AltaPay gateway with Perl projects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pensio">Pensio</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>1.0.1</td>
<td>1.0.1</td>
<td>Integrate AltaPay gateway with Perl projects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-ReplyWithMail">RT-Extension-ReplyWithMail</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>RT-Extension-ReplyWithMail Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Iterator">RoleBundle-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Iterator roles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Tree">RoleBundle-TinyCommons-Tree</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.129</td>
<td>0.129</td>
<td>Roles related to object tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SelectPdf">SelectPdf</a></td>
<td><a href="https://metacpan.org/author/SELECTPDF">SELECTPDF</a></td>
<td>v1.2.0</td>
<td>v1.4.0</td>
<td>Get the result of an asynchronous call.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-Kramerius">Task-Kramerius</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Install modules for Kramerius system.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Expander">Test-Expander</a></td>
<td><a href="https://metacpan.org/author/JSF">JSF</a></td>
<td>v1.0.0</td>
<td>v1.0.5</td>
<td>Expansion of test functionalities that appear to be frequently used while testing.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-Object">Test-Mock-Object</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Dead-simple mocking</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-RB-XS">Tree-RB-XS</a></td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>0.00_01</td>
<td>0.05</td>
<td>Red/Black Tree object withthe compatible API to Tree::RB</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-Info">URI-Info</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Extract various information from a URI (URL)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-Router">URI-Router</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>highest performance powerful URI router (URI path to value lookup) for HTTP frameworks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-KeePassHttp">WWW-KeePassHttp</a></td>
<td><a href="https://metacpan.org/author/PETERCJ">PETERCJ</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Interface with KeePass PasswordSafe through the KeePassHttp plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-WsScreenshot">WebService-WsScreenshot</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.001</td>
<td>0.001</td>
<td>API client For ws-screenshot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-YTSearch">WebService-YTSearch</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0302</td>
<td>Search YouTube</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/require-relative">require-relative</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>like require for relative paths</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>62</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>14</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GILS">GILS</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MACOPY">MACOPY</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/ERIAM">ERIAM</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/HDELGADO">HDELGADO</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JSF">JSF</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/PETERCJ">PETERCJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/SISYPHUS">SISYPHUS</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/SELECTPDF">SELECTPDF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Mathpix ERIAM 0.01 0.01 Use the API of Mathpix Acme-CPANModulesBundle-Import-DAVECROSS PERLANCAR 0.001 0.001 Acme::CPANModules::* created from DAVECROSS's posts Acme-MarkdownTest NEILB 0.01 0.02 test module to see how markdown is handled Alien-Meson ZMUGHAL 0.01 0.01 Find or build meson build tool Alien-Ninja ZMUGHAL 0.01 0.02 Find or build Ninja build tool … <a href="https://perlancar.wordpress.com/2021/12/01/list-of-new-cpan-distributions-nov-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1957</id>
    <published>2021-12-01T00:31:10Z</published>
    <updated>2021-12-01T00:31:10Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#540 - 24 Pull Requests</title>
    <link rel="alternate" href="https://perlweekly.com/archive/540.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Did you participate in <strong>Hacktoberfest 2021</strong>?</p>
<p>If not then you have one more chance to participate in the global event <a href="https://24pullrequests.com">24 Pull Requests</a>. Participation is simple, you just have to submit one pull request each day between 1st Dec 2021 and 24th Dec 2021. It is one of my favourite events. I have participated in the event each year, without a break, since 2015. I was introduced to it by <a href="http://blogs.perl.org/users/neilb/2015/11/24-pull-requests.html">Neil Bowers</a>. Last year I was going through rough patch so, unfortunately, I had to skip it. My best performance was in the year 2018 when I contributed <strong>125 pull requests</strong> in the first 24 days of December. If I am not mistaken then the <strong>24 Pull Requests</strong> event is little more relaxed as compare to <strong>Hacktoberfest</strong>. You don't have to submit a pull request every day. Instead, you can submit in bulk one day and then take a break. However, make sure you have submitted at least 24 pull requests by the end of play on 24th December.</p>
<p>Happy Hacking !!!</p>
<p>Do you follow the much-discussed <strong>Perl</strong> project <strong>Corinna</strong>?</p>
<p>The project is run by <strong>Curtis</strong> and his dedicated team of experts. I came across a <a href="https://ovid.github.io/articles/why-is-perl-not-putting-moose-in-the-core.html">blog post</a> by <strong>Curtis</strong> talking about "<strong>Why is Perl not putting Moose in the core?</strong>" There is a bold statement in the post in response to the question "<strong>What’s an Object in Perl?</strong>" and it is "<strong>Perl knows nothing about OOP. It doesn’t know what objects are.</strong>"</p>
<p><strong>Curtis</strong> doesn't say things without a reason. Please read the full blog post for more informations. I am one of the biggest followers of <strong>Curtis</strong> and never miss his posts.</p>
<p>If you remember, I mentioned <strong>Advent Calendars</strong> in the editorial of the weekly newsletter edition <a href="https://www.perlweekly.com/archive/536.html">#536</a>. Ever since then, I have noticed lots of activities in the <strong>Perl</strong> and <strong>Raku</strong> communities about <strong>Advent Calendars</strong>. I am confident this year we are going to have another fun filled <strong>Advent Calendar</strong>.</p>
<p>Last but not least, <a href="https://theweeklychallenge.org">The Weekly Challenge</a> (also known as <strong>Perl Weekly Challenge</strong>) is going to complete <strong>1000 days</strong> on <strong>18th December 2021</strong>. To celebrate the day, the team is running a <strong>FREE T-shirt</strong> campaign. If you are interested in knowing about it then please check out the <a href="https://theweeklychallenge.org/blog/1000-days">blog post</a>.</p>
<p>Stay safe and avoid the new <strong>COVID-19</strong> variant <strong>Omicron</strong>.</p></div>
    </content>
    <id>https://perlweekly.com/archive/540.html</id>
    <published>2021-11-29T10:00:00Z</published>
    <updated>2021-11-29T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Install Perl, editor, Dancer2</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2021-11-29T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-install"/>  <id>https://perlmaven.com/dancer2-install</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>A Binary Addition Simulation / Nth from a Sorted Multiplication: Table The Weekly Challenge 140</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/11/28#pwc140" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two decimal-coded binary numbers, $a and $b. Write a script to simulate the
addition of the given binary numbers.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub add_binary{
    my($x, $y) = @_;
    my $sum = ""; 
    my @a = reverse(split(//, $x));            
    my @b = reverse(split(//, $y));            
    if(@b &gt; @a){
        my @c = @b;
        @b = @a;
        @a = @c;   
    } 
    my $carry = 0; 
    for(my $d = 0; $d &lt;= @a - 1; $d++){ 
        my $d0 = $a[$d]; 
        my $d1 = $b[$d];
        if($d1){
            $sum = "0$sum", $carry = 0 if $d0 == 1 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 1;  
            $sum = "1$sum", $carry = 0 if $d0 == 1 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 0; 
            $sum = "0$sum", $carry = 1 if $d0 == 1 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 0; 
            $sum = "0$sum", $carry = 1 if $d0 == 0 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 1; 
            $sum = "0$sum", $carry = 0 if $d0 == 0 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 0; 
            $sum = "1$sum", $carry = 0 if $d0 == 0 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 1; 
            $sum = "0$sum", $carry = 1 if $d0 == 1 &amp;&amp; $d1 == 0 &amp;&amp; $carry == 1; 
            $sum = "1$sum", $carry = 0 if $d0 == 0 &amp;&amp; $d1 == 1 &amp;&amp; $carry == 0; 
        } 
        else{
            $sum = "0$sum", $carry = 1, next if $d0 == 1 &amp;&amp; $carry == 1;  
            $sum = "1$sum", $carry = 0, next if $d0 == 0 &amp;&amp; $carry == 1;  
            $sum = "0$sum", $carry = 0, next if $d0 == 0 &amp;&amp; $carry == 0;  
            $sum = "1$sum", $carry = 0, next if $d0 == 1 &amp;&amp; $carry == 0;  
        }  
    } 
    $sum = "$carry$sum" if $carry == 1;  
    return $sum; 
}

MAIN:{
    print add_binary(11, 1) . "\n"; 
    print add_binary(101, 1) . "\n"; 
    print add_binary(100, 11) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
100
110
111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have an unusual fondness for Perl's right hand conditional. But that is pretty obvious 
from the way I wrote this, right? &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 3 positive integers, $i, $j and $k. Write a script to print the $kth 
element in the sorted multiplication table of $i and $j.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub nth_from_table{
    my($i, $j, $k) = @_;
    my @table;
    for my $x (1 .. $i){
        for my $y (1 .. $j){
            push @table, $x * $y; 
        }  
    }  
    return (sort {$a &lt;=&gt; $b} @table)[$k - 1];   
} 

MAIN:{
    print nth_from_table(2, 3, 4) . "\n";  
    print nth_from_table(3, 3, 6) . "\n";  
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Full Disclosure: At first I wanted to do this in some convoluted way for fun. After
experimenting with, like, nested &lt;code&gt;map&lt;/code&gt;s for a few minutes I lost all interest in "fun" and
just went with a couple of &lt;code&gt;for&lt;/code&gt; loops!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-140/"&gt;Challenge 140&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc140</id>
    <published>2021-11-28T17:16:00-05:00</published>
    <updated>2021-11-28T17:16:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Tony Cook): October 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl5_tony_cook_oct_2021"/>
  <id>tag:news.perlfoundation.org,2021-11-28:/post/maintaining_perl5_tony_cook_oct_2021</id>
  <published>2021-11-28T17:01:27</published>
  <updated>2021-11-28T17:01:27</updated>
  <summary>
  <![CDATA[
     Approximately 25 tickets were reviewed, and 3 patches were applied.  0.83 #12957 review discussion review  sdbm source, comment  1.27 #18958 look over code  #18958 review code and comment  #18958 comment  1.59 #19020 research should the shell be trapping in this  case? haven’t found anything appropriate, also look at  dash source  #19020 more dash source, comment  2.74 #19121 research and comment 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Approximately 25 tickets were reviewed, and 3 patches were
applied.
```
[Hours]         [Activity]
  0.83          #12957 review discussion (mentioned in #19182), review
                sdbm source, comment
  1.27          #18958 look over code
                #18958 review code and comment
                #18958 comment
  1.59          #19020 research - should the shell be trapping in this
                case?  haven’t found anything appropriate, also look at
                dash source
                #19020 more dash source, comment
  2.74          #19121 research and comment
                #19121 re-work
                #19121 consider alternative for the delimiter, looking
                over code
                #19121 look at a :crlf issue - is it a problem elsewhere
                cpan #133233
  0.30          #19122 apply to blead, perldelta
  1.27          #19124 debugging
  0.30          #19166 review
  0.45          #19171 review and briefly comment
                #19171 review latest changes and apply to blead
  1.22          #19172 review and a couple of brief comments
  0.30          #19174 review discussion, testing, research and comment
  2.42          #19182 review, comments
                #19182 review changes, comment
                #19182 review, testing, brief comment
  0.43          #19184 review, consider if feature regen needs some re-
                work
                #19184 briefly review
  0.60          #19186 review, research and comment
  0.62          #19187 review and approve
  0.63          #19190 review, research, briefly comment
  0.91          #19191 review and apply, also supply patch upstream and
                update customizations
                #19191 comment
  0.43          #19194 review and approve
  2.18          #19197 review, research (who wrote that test? it was me)
                and comment
                #19197 review new commits
  9.56          #19198 debugging and comment
                #19198 debugging, work on a fix, simple testing, comment
                #19198 recheck, testing, try to find good place to add
                regression test, minor perl5db.t re-work
                #19198 minor cleanup and document DebugWrap in perl5db.t,
                write test, test the test with and without the fix,
                testing
                #19198 fix global destruction issue from fix, debug
                another threads only failure and work out a fix
                #19198 polish, documentation, more testing, update PR
  0.92          review coverity reported defects, create PR #19200
  1.42          :utf8 more on re-working fill/readdelim
  0.65          :utf8 more readdelim re-work
  1.58          :utf8 work on re-working fill
  0.17          github notifications</p>

<h1>  1.07          security list: research, testing, comment</h1>

<p>33.86 hours total
```</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2156421276290005616</id>
    <published>2021-11-27T17:56:00.002+01:00</published>
    <updated>2021-11-27T22:26:18.594+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxix) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.051005" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.051005&lt;/strong&gt; on 2021-11-25&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.051001 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-perlbrew-0.93" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.93&lt;/strong&gt; on 2021-11-22&lt;/li&gt;  &lt;li&gt;Votes: 167&lt;/li&gt;  &lt;li&gt;Previous version: 0.92 was 7 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DWHEELER/App-Sqitch-v1.2.0" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Sqitch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Sensible database change management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.2.0&lt;/strong&gt; on 2021-11-20&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: v1.1.0 was 1 year, 6 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DROLSKY/Code-TidyAll-0.80" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Code::TidyAll&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Engine for tidyall, your all-in-one code tidier and validator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.80&lt;/strong&gt; on 2021-11-26&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 0.78 was 1 year, 7 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ANDK/CPAN-2.29" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CPAN&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - query, download and build perl modules from CPAN sites &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.29&lt;/strong&gt; on 2021-11-23&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 2.28 was 1 year, 5 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BINGOS/CPANPLUS-0.9914" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CPANPLUS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Ameliorated interface to the CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9914&lt;/strong&gt; on 2021-11-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.9912 was 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BINGOS/Module-CoreList-5.20211120" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20211120&lt;/strong&gt; on 2021-11-21&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 5.20211020 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.25" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.25&lt;/strong&gt; on 2021-11-22&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.24 was 1 month, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.02" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.02&lt;/strong&gt; on 2021-11-21&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.01 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Object-Pad-0.58" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.58&lt;/strong&gt; on 2021-11-25&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.57 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/VANSTYN/RapidApp-1.3500" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;RapidApp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Turnkey ajaxy webapps &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3500&lt;/strong&gt; on 2021-11-22&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 1.3404 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/ETHER/Try-Tiny-0.31" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Try::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimal try/catch with proper preservation of $@ &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.31&lt;/strong&gt; on 2021-11-23&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 0.30 was 3 years, 11 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2156421276290005616/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/11/ccclxix-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2156421276290005616"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2156421276290005616"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/11/ccclxix-12-great-cpan-modules-released.html" title="(ccclxix) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3609174721092900248</id>
    <published>2021-11-27T17:54:00.001+01:00</published>
    <updated>2021-11-27T17:54:20.961+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcii) metacpan weekly report - DBD::Pg</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 24&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/11/27 16:53:53 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cookie" target="_blank"&gt;Cookie&lt;/a&gt; - Cookie Object with Encryption or Signature&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Spreadsheet" target="_blank"&gt;DBIx::Spreadsheet&lt;/a&gt; - Query a spreadsheet with SQL&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::MintingProfile::AlienBuild" target="_blank"&gt;Dist::Zilla::MintingProfile::AlienBuild&lt;/a&gt; - A minimal Dist::Zilla minting profile for Aliens&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::RENEEB" target="_blank"&gt;Perl::Critic::RENEEB&lt;/a&gt; - A collection of handy Perl::Critic policies&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CleanFragment" target="_blank"&gt;Text::CleanFragment&lt;/a&gt; - clean up text to use as URL fragment or filename&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=261)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::plx" target="_blank"&gt;App::plx&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=72)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=204)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+2=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=251)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Directory::Stylish" target="_blank"&gt;Mojolicious::Plugin::Directory::Stylish&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=385)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE" target="_blank"&gt;POE&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/StreamFinder" target="_blank"&gt;StreamFinder&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Perl::Critic::Progressive" target="_blank"&gt;Test::Perl::Critic::Progressive&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UNIVERSAL::Object" target="_blank"&gt;UNIVERSAL::Object&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML" target="_blank"&gt;YAML&lt;/a&gt; (+1=66)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3609174721092900248/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/11/cdxcii-metacpan-weekly-report-dbdpg.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3609174721092900248"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3609174721092900248"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/11/cdxcii-metacpan-weekly-report-dbdpg.html" title="(cdxcii) metacpan weekly report - DBD::Pg"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#539 - Farewell to David H. Adler</title>
    <link rel="alternate" href="https://perlweekly.com/archive/539.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi</p>
<p>Really sad news: that David H. Adler, known by many as DHA has passed away. I've included a number of links where people who can express themselves way better than I do say goodbye to him.</p>
<p>In other news the ephemeral miniconf took place this week. You can read about it below.</p>
<p>Lastly, The Weekly Challenge celebrates its first 1000 days. Congratulations to Mohammad Anwar, my co-editor of the Perl Weekly for keeping up with this project!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/539.html</id>
    <published>2021-11-22T10:00:00Z</published>
    <updated>2021-11-22T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Jort Sort the First Five Long Primes</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/11/21#pwc139" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of numbers. Write a script to implement JortSort. It should return 
true/false depending if the given list of numbers are already sorted.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub jort_sort{
    for(my $i=0; $i &lt; @_ - 1; $i++){
        return false if $_[$i + 1] &lt; $_[$i];  
    }  
    return true;
}

MAIN:{
    print jort_sort(1, 2, 3, 4, 5) . "\n";
    print jort_sort(1, 3, 2, 4, 5) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Apparently Jort Sort is a joke sort started by somebody in the JavaScript community. I 
didn't find it all that funny, but the code to implement it only took a quick minute.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 5 Long Primes.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use LWP::UserAgent;
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;  
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)]; 
        }  
    }
    return @primes; 
}

sub divide{
    my($n, $d) = @_; 
    my @remainders;
    my $q = (int($n / $d)) . ".";
    my $r = $n % $d; 
    push @remainders, $r; 
    my @a;
    for (0 .. $d){
        $q .= int($r*10 / $d);  
        $r = $r*10 % $d;
        @a = grep { $remainders[$_] == $r } (0 .. @remainders - 1);
        last if(@a); 
        push @remainders, $r; 
    }
    my $r_i = $a[0];
    my $i = index($q, ".");
    my $decimal_part = substr($q, $i+1); 
    return substr($q, 0, $i + 1) . substr($decimal_part, 0, $r_i) . "(" . substr($q, $i + $r_i + 1) . ")";  
}   

sub long_primes_five{
    my @long_primes;
    my @primes = get_primes();
    do{
        my $prime = shift @primes;    
        my $max_repetend = $prime - 1; 
        my $repeats = true if($prime != 2 &amp;&amp; $prime != 5); 
        if($repeats){
            my $x = divide(1, $prime, [], []); 
            $x =~ m/\((\d+)\)/;
            my $repetend = $1;
            push @long_primes, [$prime, $x] if length($repetend) == $prime - 1;   
        }
    }while(@long_primes &lt; 5);
    return @long_primes;
}

MAIN:{
    for my $p (long_primes_five()){
        print $p-&gt;[0] . "\t" . $p-&gt;[1] . "\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
7       0.(142857)
17      0.(0588235294117647)
19      0.(052631578947368421)
23      0.(0434782608695652173913)
29      0.(0344827586206896551724137931)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This second part of the challenge was much more fun! Maybe my favorite part was that it 
largely re-used code from &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/04#pwc106"&gt;challenge 106&lt;/a&gt;
and also &lt;a href="https://adamcrussell.livejournal.com/5175.html"&gt;Challenge 015&lt;/a&gt;. Here we grab a 
list of pre-computed primes and then check each one for the desired property. After we 
find five, as required, we're done.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://jort.technology/"&gt;Jort Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FullReptendPrime.html"&gt;Long Prime&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-139/"&gt;Challenge 139&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc139</id>
    <published>2021-11-21T16:34:00-05:00</published>
    <updated>2021-11-21T16:34:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Perl Tk: Keyboard and Mouse events</title>
  <summary type="html"><![CDATA[<p>
Showing how to create to bind keyboard an mouse events to functions in a Perl Tk based application.
<p>
]]></summary>
  <updated>2021-11-21T09:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-tk-keyboard-and-mouse-events"/>  <id>https://perlmaven.com/perl-tk-keyboard-and-mouse-events</id>
  <content type="html"><![CDATA[<p>
Showing how to create to bind keyboard an mouse events to functions in a Perl Tk based application.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Grants: November 2021 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_nov_2021_votes"/>
  <id>tag:news.perlfoundation.org,2021-11-16:/post/grants_nov_2021_votes</id>
  <published>2021-11-16T20:00:44</published>
  <updated>2021-11-16T20:00:44</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the November 2021 round. One grant request was submitted: Grant Proposal: Optimizations building upon the new Raku dispatch mechanism VOTING RESULTS: Approved. 4 YES votes 0 NO votes, 1 ABSTAIN We accept proposals throughout the year; our next round of review will begin in January. You can submit proposals at any time. If you want to help with funding and increase our budget, 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the November 2021 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_optimizations">Grant Proposal: Optimizations building upon the new Raku dispatch mechanism</a> (USD 12,000)</h4>

<p>VOTING RESULTS: Approved. 4 YES votes (14 points), 0 NO votes, 1 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in January. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#538 - Are you Perl blogger?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/538.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Going back to the editorial of last week's <a href="https://perlweekly.com/archive/537.html">edition</a> of Perl Weekly, it is still there in my head raising many questions. It is a universal fact that Perl is no longer the favourite language among the youths in college these days. I remember when I was first introduced to Perl in 1999, it was the most popular language. Being a Perl fan, I feel it is my responsibility to bring Perl back to the discussion table. One way to do that is to talk about Perl-based projects and share them with the users of other languages. I have noticed that not as many people blog about Perl as they used to in the past. Talking about blogs, I would like to thank <a href="https://theweeklychallenge.org">The Weekly Challenge</a> team for spreading the power of Perl. For the record, in the last 138 weeks, the team have created and shared over 2000 blog posts. I used to blog regularly in the past but nowadays I hardly find time. Having said that, I still wrte a monthly report blog post where I talk about Perl and my other projects. I find making a live video is less time consuming than writing a blog post. I made some and then I stopped that as well, sorry. You can take a look my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a> if you fancy. I came across series of <a href="https://perlmaven.com/beginner-perl-maven-video-course">videos</a> by Gabor Szabo teaching Perl. It is great source for someone new to Perl and explore with live action.</p>
<p>I remember, Dave Cross, wrote a <a href="https://dev.to/davorg/don-t-be-a-perl-programmer-4h2d">blog post</a> talking about something that not many people would speak about. I personally agree with him fully and believe knowing more than one programming languages helps you as a programmer. I can tell from my own experience, I picked up Raku last year while participating the weekly challenge. Whatever little I know about Raku to date, I can tell it has helped me a lot. I use that knowledge to write better Perl programs. Recently, I started writing Python as well - just the basics for now. So the question is, does knowing Raku or Python make me any less of a Perl programmer? I am still a Perl programmer and all of my thought processes still follow Perl's rules. Perl is my first love and will remain so for the rest of my life. Even today, after more than 22 years, I find features that I never knew existed before, especially in the field of regex. I would like to give credit to Abigail for sharing the magic of regex in Perl as part of his weekly contributions.</p>
<p>While talking about blogs, how can I miss those who are doing great service on a regular basis? I would like to thank <a href="https://github.polettix.it/ETOOBUSY">Flavio Poletti</a> for blogging every day for months now. Also there is another name, <a href="https://phoenixtrap.com">Mark Gardner</a>, who writes a weekly blog post. Similarly we have weekly stats by <a href="https://niceperl.blogspot.com">Miguel Prz</a>.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/538.html</id>
    <published>2021-11-15T10:00:00Z</published>
    <updated>2021-11-15T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Perl Tk: The label, button, and entry widgets</title>
  <summary type="html"><![CDATA[]]></summary>
  <updated>2021-11-15T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-tk-menu"/>  <id>https://perlmaven.com/perl-tk-menu</id>
  <content type="html"><![CDATA[]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Volunteers needed for Perl dev room at FOSDEM (online)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem-volunteers-call-for-participation"/>
  <id>tag:news.perlfoundation.org,2021-11-11:/post/fosdem-volunteers-call-for-participation</id>
  <published>2021-11-11T16:20:01</published>
  <updated>2021-11-11T16:20:01</updated>
  <summary>
  <![CDATA[
     FOSDEM will run online on 5-6 February 2022 and is calling for participation. The Marketing Committee would like to run a Perl dev room but need volunteers and speakers to assist. Talks need to be prerecorded and uploaded prior to the conference, which are then streamed to participants with Q&A after each. Before we request the room from FOSDEM and call for speakers, we need volunteers to assist with both 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>FOSDEM will run online on 5-6 February 2022 and is <a href="https://fosdem.org/2022/news/2021-11-02-devroom-cfp/">calling for participation</a>. The Marketing Committee would like to run a Perl dev room (basically a talk track), but need volunteers and speakers to assist.</p>

<p>Talks need to be prerecorded and uploaded prior to the conference, which are then streamed to participants with Q&amp;A after each.</p>

<p>Before we request the room from FOSDEM and call for speakers, we need volunteers to assist with both organizing and supporting speakers.</p>

<p>We need 2-3 people who can meet regularly and spend time planning it, encouraging calls for papers, helping speakers record their talks as needed, supporting the management of our dev room on the day, including the collation of recordings etc.</p>

<p>If you can commit to support, we can submit a proposal for dev room (deadline is 23:59 UTC, Monday 15 November).</p>

<p>Please contact nic@perlfoundation.org by 12 noon UTC, Monday 15 November if you can help. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant update: Persistent Data Structures for Raku, Daniel Sockwell</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/sockwell-raku-persisent-data-structures"/>
  <id>tag:news.perlfoundation.org,2021-11-09:/post/sockwell-raku-persisent-data-structures</id>
  <published>2021-11-09T13:05:05</published>
  <updated>2021-11-09T13:05:05</updated>
  <summary>
  <![CDATA[
     Daniel Sockwell has provided two updates to his Grant: Persistent Data Structures for Raku. The first update was already submitted in October, and not posted due to my own error. Enjoy the thorough description! Raku Persistent Data Structures Grant Report for September 2021 In September, I spent 28 hours on implementing Raku persistent data structures. That's a bit under the 10 hour/week I'd estimated that I'd spend, but I was 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Daniel Sockwell has provided two updates to his <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">Grant: Persistent Data Structures for Raku</a>.</p>

<p>The first update was already submitted in October, and not posted due to my own error. Enjoy the thorough description!</p>

<hr />

<h2>Raku Persistent Data Structures Grant Report for September 2021</h2>

<p>In September, I spent 28 hours on implementing Raku persistent data structures.  That's a bit under
the 10 hour/week I'd estimated that I'd spend, but I was still able to make a good start on the
implementation.</p>

<p>The main reason I didn't spend the full 40 hours on the grant – as well as the explanation for why
you're getting this update now instead of closer to the beginning of the month – is that I decided
to devote a large chunk of my Raku time to two other issues – both of which are directly related to
implementing persistent data structures.  (Though not <em>so</em> related that I'm counting time spent on
them towards the grant.  Which is good, because doing so would mean that I <em>well</em> exceeded my
~40/month budget!)</p>

<p>I'm going to tell you a bit about these two projects and how each relates to Raku persistent data
structures, and then I'll describe the progress I made during the 28 hours I'm actually counting.</p>

<h3>What even is immutability?</h3>

<p>The biggest selling point of persistent data structures is, of course, that they are immutable while
also being fairly cheap to copy.  But to deliver on that promise, it's important to have a very
clear idea of what we mean by "immutability".</p>

<p>I don't mean in some sort of fancy <a href="https://en.wikipedia.org/wiki/Heraclitus">philosophical sense</a>;
I'm asking the very practical question "When we describe the <code>List</code> in <code>my $list = (1, 2, 3)</code> as
immutable, what does that mean?  What different <em>behavior</em> should I expect when I know that the
<code>List</code> is immutable?" (You could say "semantic difference" instead of "different behavior" if you
want to sound a bit more technical.)</p>

<p>Raku has some very clear answers to parts of this question but is also slightly confused (to say
nothing of confusing) on some others.  And, as it turns out, some of the less-clear areas of the
question end up being pretty significant for the sort of immutability that give persistent data
structures so much of their power. </p>

<p>Let's start with an area where Raku is clear: the distinction between immutable <strong>values</strong> and
immutable <strong>bindings</strong>.  This is <a href="https://docs.raku.org/language/containers">well documented</a> (and
isn't what I spent time on; this is still background), but here's a recap:</p>

<h4>Values</h4>

<p>When we describe the list <code>(1, 2, 3)</code>, the string <code>codesections</code>, or the number <code>42</code> as
immutable, we are saying that they are immutable <em>values</em>.  That is, there's no way to take <code>(1, 2,
3)</code> and change the <code>2</code> into a <code>0</code> while still having the same list we started with – we can create a
new list with those values, but that's not at all the same thing.  Contrast that with the <code>Array</code> of
<code>my @a = [1, 2, 3]</code>: here, the code <code>@a[1] = 0</code> literally changes the existing <code>Array</code>.</p>

<p>Strings and numbers in Raku are immutable values in exactly the way <code>List</code>s are (and <code>Array</code>s
aren't).  That is, there's no way to transform a string or a number; all you can do is to return a
modified version of the string or number.  In contrast, C, C++, Rust, and many other languages allow
you to mutate strings in-place; they essentially treat strings as arrays of characters or codepoints
and let you modify that array in exactly the same way Rakoons modify an <code>Array</code>.  (For C's <code>char*</code>
strings, you're literally dealing with character arrays; for other languages that's more of an
(over) simplification).  I'm pretty sure that no programming language is crazy enough <a href="http://rigaux.org/language-study/various/mutability-and-sharing/">to have
mutable numbers</a> (math would get
<em>weird</em>) but I'd love to learn that I'm wrong about that.</p>

<p>Note that I'm discussing the semantics of immutable values that Raku (the language) provides, not
implementation details of how any particular compiler stores those values.  So, while <code>List</code>s and
<code>Str</code>s provide immutable semantics, there's nothing preventing an implementation from storing
different values in a more complex way.  Put differently, when you say <code>my $a = 'foo' x 500; my $b =
$a ~ ' and bar'</code>, you <em>conceptually</em> have two separate and immutable strings, but implementations
are free to let those strings share (or even mutate) some of their backing data.  And, indeed, MoarVM
uses a really amazing system for <a href="https://github.com/MoarVM/MoarVM/blob/master/docs/sts.asciidoc">storing
strings</a> that shares memory in a way
that's not that different from the way the data structures I'm building do.</p>

<h4>Bindings</h4>

<p>Entirely separate from the question of mutable versus immutable values, programming languages can
also constrain the mutability of variable bindings.  That is: once the programmer has defined a
variable as pointing at a particular value, can they later change it to point at a <em>different</em>
value?</p>

<p>One non-Raku example that many programmers may be familiar with is JavaScript's <code>let</code> and <code>const</code>,
especially when used with arrays or objects.  In JavaScript, <code>const</code> enforces immutable bindings –
you can't say <code>const a = [1, 2, 3]; a = [4, 5, 6]</code>.  But it does nothing to make the <em>values</em>
immutable – and, in js, arrays are always mutable.  This means that you can validly write <code>const a =
[1, 2, 3]; a[1] = 99</code> to mutate the value that <code>a</code> points to.  (This distinction, and the lack of
immutable arrays in JavaScript, leads to <a href="https://overreacted.io/on-let-vs-const/">perennial
debates</a> about the advisability of using <code>const</code> in js.)</p>

<p>Raku gives us accesses to the semantics of both mutable and immutable bindings, and lets us combine
either with mutable or immutable values.  Thus, we can write <code>my @a = [1, 2, 3]</code> - mutable binding
to a mutable value.  Or <code>my $l = (1, 2, 3)</code> – an mutable binding to an immutable value (we can't
change the value of the <code>List</code>, but we <em>can</em> make <code>$l</code> point to a different value altogether).  Or
we can write <code>constant @a = [1, 2, 3]</code> – an immutable binding to a mutable value (<code>@a</code> will always
point to that exact <code>Array</code>, but we can freely mutate that <code>Array</code> with code like <code>@a[1] = 99</code>).
Or, finally, we can write <code>constant $l = (1, 2, 3)</code> – an immutable binding to an immutable value
(<code>$l</code> will always point to the same <code>List</code>, and that <code>List</code> will always contain exactly the values
<code>1</code>, <code>2</code>, and <code>3</code>).</p>

<p>This last category – an immutable binding to an immutable value – best fits many peoples intuitions
about what the terms "immutable" or "constant" mean – that variable always gives me the same value,
no matter what.  In addition to being more intuitive, this last category is notable for how much it
can simplify reasoning about code.  There's something very clarifying about knowing the value of a
variable without needing to track whether that value has changed; just like the related idea of
using <a href="https://en.wikipedia.org/wiki/Referential_transparency">referentially transparent</a> functions,
programming with variables that are immutably bound to immutable values can greatly simplify complex
codebases.</p>

<h4>How immutable values and binding fit with persistent data structures</h4>

<p>The distinction between the mutability of values and bindings matters for the data structures I'm
implementing in two ways.</p>

<p>First, because the data structures I'm creating are immutable values, we'll be able to use them to
be in that wonderful forth category – immutable binding to immutable values – if and only if Raku
lets us bind to them immutably.  So it's really important to be clear on what options Raku provides
for immutable bindings.</p>

<p>I've already shown one way that Raku supports immutable bindings: <code>constant $l = (1, 2, 3)</code>.  But
constants are evaluated at compile time and (even though Raku's definition of "compile time" is
pretty expansive) the options for using constants are inherently limited.  So what other options
does Raku provide?</p>

<p>Well, before the beginning of September, I thought that Raku provided three other options for
immutable bindings: so-called <a href="https://docs.raku.org/language/variables#index-entry-_(sigilless_variables)">sigilless
variables</a> (like <code>my
\l = (1, 2, 3)</code>); function parameters that aren't declared as <a href="https://docs.raku.org/type/Signature#index-entry-trait_is_rw"><code>rw</code> or
<code>copy</code></a> (like <code>sub fn($l) {…}</code>); and
lists of variables that are destructured with the <code>:=</code> operator (which share the same semantics as
parameters).  Now, in mid-October, I <strong>still</strong> think that's the case, but I admit that the situation
is more complex than I first thought and, at a minimum, existing compilers don't fully implement
those semantics.</p>

<p>(Note: some people don't like the term "sigilless variable", since the semantics I just described
mean that they don't really vary.  But it's the term the docs use, so I'm going to stick with it for
this post.)</p>

<p>I first realized something odd was going on when comment in this <a href="https://github.com/Raku/doc/issues/3950">docs.raku.org
issue</a> pointed out that, while you can't reassign a
sigilless variable, you can sometimes re-<a href="https://docs.raku.org/language/containers#Binding">bind</a>
it: <code>my Int \x = 2; x := 4</code> changes the value bound to <code>x</code>.  At first I thought that this issue only
applied when certain type constraints were applied, but I soon realized that it applied whenever
any type is mentioned, including <code>Any</code> or <code>Mu</code>.  Moreover, it's not just sigilless variables that
can be rebound – parameters can too: <code>sub f(Any $a) { $a := 42; $a}; f 0</code> returns 42.  In the last
step to make this pervasive, the <code>@</code> and <code>%</code> sigils add implicit type constraints, which means that
any parameter with either of those sigils can be rebound.  (As mentioned, destructuring with <code>:=</code>
shares the semantics of parameter binding, all of that applies there as well.)</p>

<p>Given that sigilless variables and parameters both allowed rebinding, all of the above lead me to
wonder whether Raku is trying to provide immutable bindings at all.  It turns out that there isn't a
<a href="https://github.com/Raku/roast">Roast</a> specification test that's 100% on point.  And, when I <a href="https://stackoverflow.com/questions/69231506/what-are-the-rules-for-re-binding">asked
on StackOverflow</a> I
mixed opinions about whether the current behavior (allowing rebinding) was intentional or a bug.</p>

<p>If Raku does pervasively allow rebinding, that would be pretty bad news for the usefulness of the
data structures I'm implementing.  They'd still have some value – more than enough to be
worthwhile.  But it'd mean that we pretty much can never get to the
immutable-bindings-to-immutable-values promised land that can have such a simplifying effect on
code.</p>

<p>Given that impact, I decided to research the issue pretty thoroughly.  After doing so, I've
concluded that Raku is designed to provide immutable bindings after all, and I produced a <a href="https://github.com/rakudo/rakudo/pull/4536">pull
request</a> that both explains my logic and provides a
patch that gives Raku those semantics.  That PR hasn't been merged yet (I still need to respond to
at least one change request about what error to throw, and I'd like to see if anyone else weighs
in).  But I'm optimistic that it will be and that fixing that bug will make immutable bindings to
immutable values much more practical in Raku.</p>

<h4>What's on the inside</h4>

<p>I mentioned earlier that the values-versus-binding distinction is important for the work I'm doing
in two ways.  The second way it matters is because it gives us the right framework to talk about
"shallow" immutability (also sometimes called <a href="https://stackoverflow.com/questions/69231506/what-are-the-rules-for-re-binding">interior
mutability</a>).</p>

<p>Lets look at a slightly different constant: <code>constant $l = (1, 2, $)</code>.  What can we say about <code>$l</code>?
Well, the variable <code>$l</code> is immutably bound to a <code>List</code>, and the <code>List</code> is comprised of three values,
<code>1</code>, <code>2</code>, and … a <a href="https://docs.raku.org/language/containers#Scalar_containers">scalar</a>.  But a
scalar a container – specifically, a <em>mutable</em> container.  Thus, despite the immutability of <code>$l</code>'s
binding and the immutability of <code>List</code>s, we can still make changes: <code>$l[2] = 99</code> is valid code.</p>

<p>That change is allowed because <code>List</code>s are only <em>shallowly</em> immutable.  Or, to say the same thing in
different words, <code>List</code>s are an immutable type that allows for interior mutability.</p>

<p>One of the goals I mentioned in the <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">initial grant proposal for the persistent data
structures</a>
is to provide deeply immutable data types.  I hope that the discussion so far gives some context to what I
meant by that.  But it's a point I'll return to in a just a minute.</p>

<h3>Meanwhile, in another thread altogether…</h3>

<p>The second related-but-distinct task has occupied a good deal of my time recently has involved
concurrency and parallelism (which are famously <a href="https://go.dev/blog/waza-talk">not the same
thing</a>).  One of the key selling points of immutable data –
especially deeply immutable data – is that it can be more easily shared across threads.  A lot of
the headache of dealing with parallel code (locks, mutexes, atomics, cache misses, deadlocks,
livelocks, etc) come from ways to prevent different threads from modifying data at the same time.
But different threads will never modify (deeply) immutable data at the same time – because <em>nothing</em>
will ever mutate that data at any time.  I'm very optimistic that the data structures I'm working on
will have significant application for anyone writing multithreaded Raku. </p>

<p>So I've been slightly concerned that I hadn't yet written any non-trivial parallel and concurrent
code in Raku.  Not <em>that</em> concerned – I've written quite a bit of concurrent and parallel Rust code
and concurrent JavaScript (JS is single-threaded, so it's inherently non-parallel).  And I'd gotten
to know Raku's concurrency model by watching some excellent
<a href="https://www.youtube.com/watch?v=hGyzsviI48M&amp;t=43s">conference</a>
<a href="https://www.youtube.com/watch?v=l2fSbOPeSQs&amp;t=1184s">talks</a> and by reading the
<a href="https://docs.raku.org/language/concurrency">docs</a>/<a href="https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/">other</a>
<a href="https://stackoverflow.com/questions/65473206/what-concurrency-mechanisms-are-provided-by-raku-and-how-can-they-be-evaluated">resources</a>.
Still, though, I was keeping my eye out for a medium-scale project that would let me confirm my
understanding of Raku's approach to concurrency.</p>

<p>In late September, I found the perfect project.  Someone on the r/rakulang subreddit asked if there
was a good way to <a href="https://www.reddit.com/r/rakulang/comments/pvdpd2/recreate_javascript_bouncing_balls_in_raku/">recreate a JavaScript exercise in
Raku</a>.
That exercise involved rendering balls to an HTML5 canvas in a browser – a task that's pretty
challenging with a version of Raku running on MoarVM.  (It would obviously be much easier using the
JavaScript backend, but that wouldn't currently be my first choice for someone new to Raku.)  So, I
decided to write a simple <a href="https://cro.services/">Cro</a> server that would let someone write Raku code
to display balls on an HTML canvas.</p>

<p>Specifically, I decided on the following architecture: A Cro server that would listen for commands
from the user's Raku code, generate a set of balls to display, and then send a JSON representation
of those balls to any connected clients via WebSockets.  Oh, and then do that again with updated
ball positions 16 milliseconds later – with the goal of maintaining a frame rate of 60 fps.  It's
this last bit would normally be a bit of an odd choice: WebSockets are typically used to communicate
with a remote server, and thus it'd typically be a questionable choice to stream updates 60 times
per second.  But the program I had in mind would run locally, which removes network latency from
consideration.  And, besides, I figured that this design would provide good trial by fire for my
understanding of Raku's concurrency model: if my program can stream balls to dozens of
simultaneously connected clients at 60 fps, I must have a pretty decent understanding of how Raku
handles parallelism and concurrency.</p>

<p>You can see the <a href="https://github.com/codesections/LearnRakuWith">program I ended up with</a> on GitHub.
I'm pretty happy with how it turned out: in not much more than 100 lines of Raku, the program sets
up exactly the architecture described above plus an
<a href="https://en.wikipedia.org/wiki/Erlang_(programming_language)">Erlang</a>-style error recovery strategy
for resetting to a known-good state when user input that doesn't produce valid output.</p>

<p>But getting there took longer than I expected it to and, in the middle, had me seriously questioning
whether I actually understood Raku's concurrency model well enough to be implementing new data
structures that'd fit with it.  One of the first things anyone learns about programming is that "<a href="https://blog.plover.com/2017/11/12/">it
is not a compiler error. It is never a compiler error.</a>"  In
other words, even if some issue <em>seems</em> to be caused by a bug in the compiler/runtime/etc, it's far
more likely to be caused by a bug in your own code.</p>

<p>And when writing that module, I kept running into some crashes that made me think that I'd either
run into the mythical compiler bug or – more likely – was seriously misunderstanding how to write
concurrent code.  After spending quite a bit of time double-checking my code, I determined that, as
expected, I had <em>not</em> run into a compiler bug.  No, I'd run into
<a href="https://github.com/croservices/cro-websocket/issues/36">two</a> of
<a href="https://github.com/MoarVM/MoarVM/issues/1565">them</a>.</p>

<p>In fairness, neither was a <em>compiler</em> bug; they were both issues with the MoarVM runtime.  Moreover,
both were fixed extremely quickly, and the second never even made it into production – I only ran
into it because I was using a pre-release build to try out Rakudo's <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">new dispatch
mechanism</a>.  The
whole point of running pre-release builds is to help catch edge-case bugs like these, and I'm
certainly not complaining – but it turns out that streaming 60 fps to dozens of clients was a good
stress test for the new dispatch system and not just for my understanding of Raku's concurrency
model.</p>

<h3>Lessons for persistent data structures</h3>

<p>Once I realized that I wasn't fundamentally misunderstanding concurrency in Raku, implementing
Learn::Raku::With taught me a couple of lessons with important (though subtle) implication for the
persistent data structures I'm building.</p>

<h4>"Concurrency control" ≠ "concurrency"</h4>

<p>The first lesson I learned is that I'd slightly misunderstood what's going on in code like this
(adapted from <a href="https://docs.raku.org/routine/migrate">an example</a> in the docs):</p>

<p>```raku</p>

<h1>A simple stock ticker for Apple and Google stock</h1>

<p>react {
    whenever $stock-info-for-APPL { say "Apple's stock price is now:  $_ " }
    whenever $stock-info-for-GOOG { say "Google's stock price is now: $_ " }
}
```</p>

<p>My previous (<strong>incorrect</strong>) reading of that example was pretty much just an English version of the
code:</p>

<p>&gt; Whenever we get an update about either Apple or Google's stock, print that update.  We don't know
&gt; when these updates could come, but we want to react to them the instant they do, whether that
&gt; means reacting to the Apple one first, reacting to the Google one first, or reacting to both at
&gt; the same time.</p>

<p>That's <em>so close</em> to correct, but it goes wrong in the very last 7 words: we are guaranteed <strong>not</strong>
to react to both updates at the same time.  This is a consequence of Raku's
<a href="https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/#user-content-supplies-and-concurrency">run-to-completion</a>
semantics: the code inside a <code>whenever</code> block is guaranteed to finish executing (that is, to "run to
completion") before the code in any other <code>whenever</code> block can start.  This wouldn't matter much for
the simple example above, but here are two modified versions in which it would:</p>

<p>```raku</p>

<h1>Lets store our results in a Map instead of printing them</h1>

<p>react {
    my %prices is Map;
    react {
        my Map $prices = Map.new;
        whenever $stock-info-for-APPL { $prices = %(|$prices, :APPL($<em>)) }
        whenever $stock-info-for-GOOG { $prices = %(|$prices, :GOOG($</em>)) }
    }
}
```</p>

<p>Under the incorrect understanding, we could've be in both <code>whenever</code> blocks at the same time and
this would create a race condition – we might lose a price update if two came in at the same time.
However, because the concurrency control Raku provides <em>prevents</em> concurrent access here, this is
actually 100% fine: we'll be in exactly one <code>whenever</code> block at a time.  Raku's semantics protect us
from any race condition.</p>

<p>Here's an example where Raku's semantics would have a less ideal impact on naive code:</p>

<p>```raku</p>

<h1>Now with buy/sell recomendations!</h1>

<p>react {
    whenever $stock-info-for-APPL { 
        say "Apple's stock price is now:  $_ ";
        say "Rating: " ~slow-fn-to-calculte-recomendation('APPL', $<em>);
    }
    whenever $stock-info-for-GOOG { 
        say "Google's stock price is now: $</em> ";
        say "Rating: " ~slow-fn-to-calculte-recomendation('GOOG', $_);
    }
}
```</p>

<p>This code would <em>not</em> behave as the author might hope, due to those same run-to-completion
semantics.  Specifically, while <code>slow-fn-to-calculate-recomendation</code> is running, other updates would
be blocked.  If you don't want this behavior, Raku offers several ways to schedule work outside of
the run-to-completion guarantee of the <code>whenever</code> block; Raku's semantics aren't going to <em>stop</em> you
from doing anything here, but it's important to understand the behavior they provide by default. </p>

<p>(It may be helpful to compare Raku's semantics to JavaScript, which guarantees that <em>every</em> function
will run to completion before any other work begins – a model I've <a href="https://stackoverflow.com/questions/67679309/raku-equivalent-to-javascripts-settimeoutfn-0">contrasted with Raku's
before</a>.)</p>

<p>So, how does all of this impact persistent data structures?  Well, some of the performance
optimizations for persistent data structures involve temporarily suspending the immutability
guarantee when there's provably only one copy of the data (or part of the data).  And whether that's
provably the case or not depends crucially on whether other sections of the program can have
concurrent access to the data.  So being clear on all of the above is pretty essential for safe
implementations of the data structures I'm working on.</p>

<h4>Under pressure</h4>

<p>I mentioned that implementing Learn::Raku::With helped me learn two lessons, but the second was
really a reminder of a Raku concurrency feature that I already knew about/a good example of how
important that feature can be.  The feature I'm talking about is the way Raku manages backpressure.</p>

<p>Raku's high level concurrency tools are carefully designed with backpressure in mind.  Quoting
directly from the <a href="https://6guts.wordpress.com/2017/11/24/a-unified-and-improved-supply-concurrency-model/">6guts blog
post</a> that
I've already linked to:</p>

<p>&gt; Another interesting problem for any system processing asynchronous messages is that of
&gt; backpressure. In short, how do we make a source of messages emit them at a rate no greater than
&gt; that of the processing logic? The general principle with Supply is that the sender of a message
&gt; pays the cost of its processing. So, if I have <code>$source.map(&amp;foo).tap(&amp;bar)</code>, then whatever emits at
&gt; the source pays the cost of the map of that message along with the processing done by the tap callback.</p>

<p>Backpreasure is extremely helpful because it can allow a program to handle arbitrary amounts of
input without requiring a proportionally arbitrary (i.e., infinite) amount of memory.  Of course,
given Raku's commitment to flexibility and programmer control, it shouldn't come as any surprise
that Raku also makes it easy to opt out of this automatic backpreasure when doing so makes sense.</p>

<p>Learn::Raku::With presents a good example of a situation where it makes sense to opt out of Raku's
default backpressure semantics.  As I mentioned above, Learn::Raku::With generates a stream of
frames and transmits those frames to all connected clients.  If we applied backpressure to this
system in the normal way, then transmitting the frames to the clients would exert backpressure on
generating the frames – that is, we'd be guaranteed not to generate frames any faster than we can
transmit them.</p>

<p>This would have some benefits – most notably, we'd never need to buffer generated frames and our
memory use would never grow.  But, in the Learn::Raku::With context, it'd have one very notable flaw
as well: the normal backpreasure system would mean that any time we can't transmit frames to clients
at 60 fps, the actual <em>speed</em> of Learn::Raku::With's balls would get reduced.  This obviously isn't
ideal – while 60 fps is a nice goal to shoot for, 45 fps is an absolutely fine frame rate and it'd
be much better to drop 1 out of 4 frames and to display the balls at normal speed in 45 fps than to
keep every frame but to display the balls in slow motion.</p>

<p>Thus, Learn::Raku::With <a href="https://github.com/codesections/LearnRakuWith/blob/main/lib/HtmlBalls.rakumod#L70-L78">pairs a Supply with a
Channel</a> to
allow it to drop frames instead of generating frames more slowly – but that, of course, means that
it needs to store at least a few frames at least temporarily.</p>

<p>But storing extra frames, in turn, means both that the program will take up more memory and,
crucially, that there will be more work for the garbage collector to do.  And that work will take
some time – time that necessarily cannot be spent transmitting those frames to the client.  But
since the whole reason we need to store those extra frames was that we're generating them faster
than we can ship them off to the client, it's possible for the GC-pause-induced extra delay to
result in <em>more</em> extra frames.  Which can then result in more garbage to collect, and thus more
delay, and thus more frames.</p>

<p>I'm sure you can see where that sort of infinite loop heads and it's certainly not to anywhere
good.  In fact, a previous version of Learn::Raku::With could get itself into exactly that sort of
situation pretty easily, consuming ever-more RAM and operating ever more slowly (I think I measured
it as hitting at least 50 GB).  The current version is much more resilient, but the risk remains.</p>

<p>All of this is relevant to persistent data structures because one of the main benefits of these data
structures is that the power of structural sharing makes copies vastly less expensive – verging on
free, in fact.  This benefit would go a long way towards avoiding the sort of issues I outlined
above.  I'd always known that these inexpensive copies are a key benefit of the persistent data
structures I'm building, but I'd previously focused on this as a way to reduce the memory footprint
of Raku programs.  After building Learn::Raku::With, however, I recognize that structural sharing
also reduces GC pressure and thus improves the speed at which Raku programs can execute – which can
avoid the sort of death spirals described above.  This means that having persistent data structures
will not only make many Raku programs more memory efficient but will also certain of Raku programs
much more feasible to write without spiraling into a need for ever-increasing amounts of RAM.</p>

<h2>Implementation progress</h2>

<p>So, having spent a few thousand words explaining things related to but not directly covered by the
grant, let me say at least a bit about the implementation work itself.  In the nature of
implementation work, it's not nearly as interesting as more exploratory work and I don't have very
much to say – I've very much stuck to the plan in my <a href="https://news.perlfoundation.org/post/grant_proposal_persistent_data_structures_for_raku">grant
proposal</a>.</p>

<p>Specifically, I started by implementing the persistent version of the <code>List</code> (still open to
bikeshedding on the name!).  I have made good progress on implementing a persistent <code>List</code> that with
the structural sharing features described in my proposal but <em>without</em> the bit-shifting indexing
(I'm instead currently using the simplified indexing scheme that involves converting the key to a
different base and calculating the relevant indices manually).  This simplified indexing scheme will
allow me to test the soundness of the list before switching to the bit-shifting index (which will be
key to the performance of the persistent list).</p>

<p>Additionally, I've written a set of tests to confirm the correctness of my implementation so far and
a (much smaller and still preliminary) set of tests that measure the performance of deep copies of
built in <code>List</code>s and <code>Array</code>s, which should provide a nice baseline to compare the persistent
versions against.</p>

<h1>Conclusion</h1>

<p>Over the course of September, I made a good start on implementing persistent data structures for
Raku.  This included significant, though limited, progress on actually implementing the persistent
List and much more time-consuming work on auxiliary projects (not counted as part of my grant hours)
that have given me a much better foundation for the remaining work.  The downside of this auxiliary
work is that it took up considerable time that I might have devoted to the actual implementation,
both in September and in October.  In fact, given the amount of time I've already spent on these
research/side projects in October, it's possible that I won't have much or any grant progress to
report at the end of this month.  Nevertheless, I'm glad I invested the effort into those projects
since I believe both left me significantly better equipped to carry out the remainder of the grant.
I look forward to putting these lessons into practice as I continue to implement persistent data
structures for Raku.</p>

<hr />

<h2>Raku Persistent Data Structures Grant Report for October 2021</h2>

<p>The expectation I mentioned in my September grant report came true in October: I had significantly
less time to devote to work on this grant in October.  This was due in large part to the conceptual
work I previously reported on, which stretched well into October.</p>

<p>Accordingly, I was only able to spend 5 hours on the grant in October; I used that time to continue
work on the persistent List.  Specifically, I nearly completed the basic API (without the
bit-shifting optimizations).  I was also able to add some initial test coverage. Given that
progress, I am now nearing point where I'll be able to share the WIP code publicly.</p>

<p>On the conceptual front (i.e., work that's relevant to the persistent data structures but not
relevant enough that I'm counting it towards the hours funded by this grant), I've also made a fair
bit of progress.  Most significantly, I was able to complete the work to add fully immutable binding
to Rakudo.  Thanks to some helpful feedback from Vadim Belman, I also added significantly more
detailed error messages, which should help explain the nature of these binding to Rakoons who aren't
as used to programming with in an immutable style.  As discussed in my last grant report, being able
to immutably bind values to their names will mean that the persistent data structures implemented
for this grant will be truly immutable – and thereby significantly easier to reason about.  This
work was merged in <a href="https://github.com/rakudo/rakudo/pull/4536">rakudo#4536</a> and should be part of
the 2021.11 Rakudo release.</p>

<p>Additionally, I've been putting some thought into how Raku's notion of <a href="https://docs.raku.org/language/glossary#Value_type">value
types</a> fits with the persistent data structures
I'm implementing.  As I mentioned last month, one of the core motivations behind this grant proposal
is to provide deeply immutable types, so it's clear that the types I'm implementing will be value
types and thus will return a <a href="https://docs.raku.org/type/ValueObjAt">ValueObjAt</a> from their <code>WHICH</code>
method.  But what should the persistent types do when the user adds a non-value type?  I can see
three options:</p>

<ol>
<li>Throw an error/require the user to create a value type to pass in.  This is basically the approach taken by Elizabeth Mattijsen's  <a href="https://modules.raku.org/dist/ValueType:zef:zef:lizmat/">ValueType</a> module.</li>
<li>Recursively copy each non-value type into an equivalent value type when it's added to the persistent type ("copy-on-read").  This is straightforward for some types (an <code>Array</code> becomes a <code>List</code>) but might involve more metaprogramming trickery for others (especially user classes).
<ol>
<li>Store the non-value type if we can prove that no other part of the code has access to it, and only make a copy if we need to hand it out to someone (basically copy-on-write, with some slight tweaks).</li>
</ol></li>
</ol>

<p>Each of these has different pros and cons.  In particular, the first is the easiest to implement, the most verbose, and gives the user the most control over/awareness of the performance costs.  Conversely, the last is the most "magical" and the only one that risks introducing correctness bugs.  Additionally, there could be ways to combine different aspects of these three approaches – for example, one combination of 1. and 2. would be to copy simple/built in types but to throw an error when passed a user type with a mutable field.  I'm currently leaning towards the copy-on-read option #2 as a reasonable middle ground, but it's definitely something I'd be interested in hearing other thoughts on.</p>

<p>November is already off to a good start, and I'm optimistic that I'll be able to make significant
progress on this grant before the end-of-year business (and exciting things like the <a href="https://github.com/Raku/advent/blob/master/raku-advent-2021/authors.md">Raku Advent
Calendar</a>!) start to eat
into my coding time.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#537 - How do you spend your free time?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/537.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi</p>
<p>The Perl Weekly newsletter is more than 10 years old and over those years we have witnessed a huge decline in the number and diversity of posts. There are still a few people who write about Perl regularly, The Weekly Challenge of Mohammad generates many posts, but in general we see fewer and fewer posts.</p>
<p>I wonder, do those people who used to write about Perl write about other technologies or have they just stopped? How come that so few people write about Perl? Are there no new things in Perl? Are there no new problems that one solves in Perl?</p>
<p>I know that writing about stuff is not the same thing as writing the stuff, but as many other people who write or teach will attest, the best way to improve your knowledge is to explain it. to explain it to live audience (at a Meetup) or to write about it in a blog post.</p>
<p>So how do you spend your free time? Do you write more code? Do you try to explain what you wrote, how you wrote and why? Or do you spend your time on some other activities? I, for examples started to read a lot more than I did in the recent years. And sure, I'll even share my recommendations with you. (See below.)</p>
<p>In any case enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/537.html</id>
    <published>2021-11-08T10:00:00Z</published>
    <updated>2021-11-08T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Perl Tk: The label, button, and entry widgets</title>
  <summary type="html"><![CDATA[]]></summary>
  <updated>2021-11-07T23:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-tk-label-button-entry-widgets"/>  <id>https://perlmaven.com/perl-tk-label-button-entry-widgets</id>
  <content type="html"><![CDATA[]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
