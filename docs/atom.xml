<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-12-25T20:39:32Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Day 25: CI for Data::Alias in Perl - including threaded perl</title>
    <link rel="alternate" href="https://dev.to/szabgab/day-25-ci-for-dataalias-in-perl-including-threaded-perl-5feh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> has a never ending 3rd party Perl libraries, many without any CI configured. This time I picked the one called <a href="https://metacpan.org/dist/Data-Alias">Data::Alias</a>.</p>

<p>At first I sent a "standard" configuration of GitHub Actions, but then I noticed 2 things. Some tests were dependent on some extra modules and some tests needed a threaded Perl. Apparently the one that I used in my "standard" configuration isn't. So In addition to the execution of the CI on Ubuntu, macOS and Windows natively, I've also added another job in which we use a perl-based Docker image and run the tests there. In this case one of the tags I used from <a href="https://hub.docker.com/_/perl">Perl on Docker Hub</a> was the <code>5.36-threaded</code>.</p>

<p>I was happy to see that the tests passed on every platform and on every version of Perl I tried.</p>

<p>I sent the <a href="https://github.com/mvduin/perl-Data-Alias/pull/3">pull-request</a></p>

<h2>
  
  
  GitHub Actions
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight yaml"><code><span class="na">name</span><span class="pi">:</span> <span class="s">CI</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">42</span><span class="nv"> </span><span class="s">5</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*'</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">fail-fast</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">runner</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">ubuntu-latest</span><span class="pi">,</span> <span class="nv">macos-latest</span><span class="pi">,</span> <span class="nv">windows-latest</span><span class="pi">]</span>
        <span class="na">perl</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">5.30'</span><span class="pi">,</span> <span class="s1">'</span><span class="s">5.36'</span> <span class="pi">]</span>
        <span class="na">exclude</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">runner</span><span class="pi">:</span> <span class="s">windows-latest</span>
            <span class="na">perl</span><span class="pi">:</span> <span class="s1">'</span><span class="s">5.36'</span>

    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">${{matrix.runner}}</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">OS ${{matrix.runner}} Perl ${{matrix.perl}}</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up perl</span>
      <span class="na">uses</span><span class="pi">:</span> <span class="s">shogo82148/actions-setup-perl@v1</span>
      <span class="na">with</span><span class="pi">:</span>
          <span class="na">perl-version</span><span class="pi">:</span> <span class="s">${{ matrix.perl }}</span>
          <span class="na">distribution</span><span class="pi">:</span> <span class="s">${{ ( startsWith( matrix.runner, 'windows-' ) &amp;&amp; 'strawberry' ) || 'default' }}</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show Perl Version</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">perl -v</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Modules</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">cpanm -v</span>
        <span class="s">cpanm --installdeps --notest .</span>
        <span class="s">cpanm --notest Devel::CallParser Test::Pod::Coverage Test::Pod</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show Errors on Windows</span>
      <span class="na">if</span><span class="pi">:</span>  <span class="s">${{ failure() &amp;&amp; startsWith( matrix.runner, 'windows-')}}</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
         <span class="s">ls -l C:/Users/</span>
         <span class="s">ls -l C:/Users/RUNNER~1/</span>
         <span class="s">cat C:/Users/runneradmin/.cpanm/work/*/build.log</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show Errors on Ubuntu</span>
      <span class="na">if</span><span class="pi">:</span>  <span class="s">${{ failure() &amp;&amp; startsWith( matrix.runner, 'ubuntu-')}}</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
         <span class="s">cat /home/runner/.cpanm/work/*/build.log</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show Errors on OSX</span>
      <span class="na">if</span><span class="pi">:</span>  <span class="s">${{ failure() &amp;&amp; startsWith( matrix.runner, 'macos-')}}</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
         <span class="s">cat  /Users/runner/.cpanm/work/*/build.log</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">AUTHOR_TESTING</span><span class="pi">:</span> <span class="m">1</span>
        <span class="na">RELEASE_TESTING</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">perl Makefile.PL</span>
        <span class="s">make</span>
        <span class="s">make test</span>


  <span class="na">test-in-container</span><span class="pi">:</span>
    <span class="na">strategy</span><span class="pi">:</span>
      <span class="na">fail-fast</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">matrix</span><span class="pi">:</span>
        <span class="na">perl</span><span class="pi">:</span> <span class="pi">[</span> <span class="s1">'</span><span class="s">5.30'</span><span class="pi">,</span> <span class="s1">'</span><span class="s">5.36'</span><span class="pi">,</span> <span class="s1">'</span><span class="s">5.36-threaded'</span> <span class="pi">]</span>
        <span class="c1"># tags from https://hub.docker.com/_/perl</span>

    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">Perl ${{matrix.perl}}</span>
    <span class="na">container</span><span class="pi">:</span> <span class="s">perl:${{matrix.perl}}</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show Perl Version</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">perl -v</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Modules</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">cpanm -v</span>
        <span class="s">cpanm --installdeps --notest .</span>
        <span class="s">cpanm --notest Devel::CallParser Test::Pod::Coverage Test::Pod</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Show Errors on Ubuntu</span>
      <span class="na">if</span><span class="pi">:</span>  <span class="s">${{ failure() }}</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
         <span class="s">cat /home/runner/.cpanm/work/*/build.log</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">AUTHOR_TESTING</span><span class="pi">:</span> <span class="m">1</span>
        <span class="na">RELEASE_TESTING</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">perl Makefile.PL</span>
        <span class="s">make</span>
        <span class="s">make test</span>
</code></pre>

</div>



<h2>
  
  
  Conclusion
</h2>

<p>Sometimes you need more than one job even for stand-alone 3rd-party libraries.</p>

</div>
    </content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/day-25-ci-for-dataalias-in-perl-including-threaded-perl-5feh</id>
    <published>2022-12-25T07:47:00Z</published>
    <updated>2022-12-25T07:47:00Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="ci"/>
    <category term="testing"/>
  </entry>
  <entry>
    <title>How to wrap a camel?</title>
    <link href="http://perladvent.org/2022/2022-12-25.html"/>
    <id>http://perladvent.org/2022/2022-12-25.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h2 id="How-to-wrap-a-camel"&gt;How to wrap a camel?&lt;/h2&gt;

&lt;p&gt;In the elf workshop, elves never knew what to do when they were passed a camel and were instructed to wrap it to put it on Santa&amp;#39;s sleigh. Many times the elves skipped wrapping and loaded camels right onto the sleigh. This practice garnered the North Pole many letters from children around the world being unable to install and use their new camel! &lt;b&gt;&amp;quot;How do I install Perl?&amp;quot;, &amp;quot;cpanm: command not found&amp;quot;, &amp;quot;Permission denied&amp;quot;, &amp;quot;collect2.exe: error: ld returned 1 exit status&amp;quot;, &amp;quot;Can&amp;#39;t locate&amp;quot;&lt;/b&gt; they cried out for help. Some gift recipients even refused to install their camel despite their needs and desires, as they didn&amp;#39;t want to deal with the difficulties of installing Perl. Claus tasked master elf, Artie, to design a fool-proof way of wrapping a camel for enjoyment by children across the world.&lt;/p&gt;

&lt;p&gt;Artie got right to work as they knew from experience that wrapping a camel was not a trivial task. First, Artie attempted to wrap a camel with &lt;a href="https://metacpan.org/module/PAR::Packer"&gt;PAR::Packer&lt;/a&gt;, but discovered that the wrapped camel was unusable when the user&amp;#39;s glibc version or operating system differed from the one Artie used to wrap. Artie knew Santa had high standards and would want a more robust solution, so they continued to do research. Artie stumbled upon the &lt;a href="https://github.com/jart/cosmopolitan"&gt;Cosmopolitan Libc&lt;/a&gt; and &lt;a href="https://justine.lol/ape.html"&gt;Actually Portable Executables&lt;/a&gt;. What if you built a single binary version of Perl that runs on six operating systems and melded your camel to the binary? Then, everyone can use camels! Artie got to work creating &lt;a href="https://computoid.com/posts/Perl-is-Actually-Portable.html"&gt;Actually Portable Perl (APPerl)&lt;/a&gt; with the &lt;a href="https://metacpan.org/module/Perl::Dist::APPerl"&gt;Perl::Dist::APPerl&lt;/a&gt; package for building APPerl and wrapping camels with it.&lt;/p&gt;

&lt;p&gt;Close to Christmas, Artie finally had &lt;a href="https://metacpan.org/module/Perl::Dist::APPerl"&gt;Perl::Dist::APPerl&lt;/a&gt; ready and notified Santa. Santa requested an immediate demonstration to determine if it is a viable way of wrapping camels starting this Christmas season.&lt;/p&gt;

&lt;h3 id="Wrapping-Pure-Perl-camels"&gt;Wrapping Pure Perl camels&lt;/h3&gt;

&lt;p&gt;Artie created some directories to contain the camel project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir -p wrap_camel/src wrap_camel/script
    cd wrap_camel&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie created an example script and saved it to &lt;code&gt;script/cameltype&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;cancel_christmas&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;die&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;$!&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$numhumps&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;How many humps?\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$numhumps&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="readline"&gt;&amp;lt;STDIN&amp;gt;&lt;/span&gt; &lt;span class="operator"&gt;or&lt;/span&gt; &lt;span class="word"&gt;cancel_christmas&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;chomp&lt;/span&gt; &lt;span class="symbol"&gt;$numhumps&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;last&lt;/span&gt; &lt;span class="word"&gt;if&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$numhumps&lt;/span&gt; &lt;span class="operator"&gt;=~&lt;/span&gt; &lt;span class="match"&gt;/^\d+$/&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Your nose ain't too bright, $numhumps is not a number\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;%results&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Dromedary\n&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Bactrian\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;print&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$results&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$numhumps&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="operator"&gt;//&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Maybe a reindeer? Probably not a camel!\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie noted to Santa that Pure Perl scripts can be wrapped with an existing version of APPerl, off the shelf builds of APPerl can be found on the &lt;a href="https://computoid.com/APPerl/#RELEASES"&gt;APPerl webpage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Artie picked &lt;code&gt;perl-small.com&lt;/code&gt; off the shelf and created an APPerl project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    wget -O src/perl.com &amp;#39;https://github.com/G4Vi/Perl-Dist-APPerl/releases/latest/download/perl-small.com&amp;#39;
    chmod +x src/perl.com
    apperlm init --name default_config&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie edited &lt;code&gt;default_config&lt;/code&gt; in the newly created &lt;code&gt;apperl-project.json&lt;/code&gt; to copy in the &lt;code&gt;cameltype&lt;/code&gt; script and set the destination executable name to &lt;code&gt;cameltype.com&lt;/code&gt;, the name is important as &lt;code&gt;argv[0]&lt;/code&gt; is used to determine which script embedded in APPerl to run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;dest&amp;quot; : &amp;quot;cameltype.com&amp;quot;,
    &amp;quot;zip_extra_files&amp;quot; : { &amp;quot;bin&amp;quot; : [&amp;quot;script/cameltype&amp;quot;] },&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie wrapped the camel and demonstrated the &lt;code&gt;cameltype&lt;/code&gt; binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    apperlm build
    ./cameltype.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Santa said, &amp;quot;Ho, ho, ho. Very impressive, Artie! What about the camels with XS modules?&amp;quot;&lt;/p&gt;

&lt;h3 id="Wrapping-camels-with-XS-modules"&gt;Wrapping camels with XS modules&lt;/h3&gt;

&lt;p&gt;Artie said, &amp;quot;Camels with XS modules can also be wrapped into APPerl. However, every XS-wrapping elf needs a Linux build environment.&amp;quot; Santa, a big fan of developing on several platforms, asked, &amp;quot;Why is that required?&amp;quot; Artie replied, &amp;quot;While APPerl binaries are also ZIP files, APPerl binaries are statically linked, so there is no way to add binary modules after compilation. To wrap with XS modules, the Cosmopolitan Libc and Perl must be built from scratch.&amp;quot; Santa was reasonably worried about this and asked Artie to show him once more.&lt;/p&gt;

&lt;p&gt;Artie ran some commands to create a new APPerl project and install build dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    mkdir -p ../wrap_xs_camel/script
    cd ../wrap_xs_camel
    apperlm install-build-deps
    apperlm init --name default_config --base v5.36.0-small-v0.1.0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie created &lt;code&gt;MerryChristmas.xs&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;#define PERL_NO_GET_CONTEXT&lt;br /&gt;#include &amp;quot;EXTERN.h&amp;quot;&lt;br /&gt;#include &amp;quot;perl.h&amp;quot;&lt;br /&gt;#include &amp;quot;XSUB.h&amp;quot;&lt;br /&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br /&gt;&lt;br /&gt;MODULE = MerryChristmas    PACKAGE = MerryChristmas&lt;br /&gt;&lt;br /&gt;void&lt;br /&gt;merry_christmas()&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CODE:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(&amp;quot;Merry Christmas from XS!\n&amp;quot;);&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie created &lt;code&gt;MerryChristmas.pm&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;package&lt;/span&gt; &lt;span class="word"&gt;MerryChristmas&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;our&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="single"&gt;'0.0'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;require&lt;/span&gt; &lt;span class="word"&gt;XSLoader&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;XSLoader::load&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;MerryChristmas&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$VERSION&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie created a &lt;code&gt;script/merrychristmas&lt;/code&gt; to demo the module:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;MerryChristmas&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;MerryChristmas::merry_christmas&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Artie edited &lt;code&gt;default_config&lt;/code&gt; in &lt;code&gt;apperl-project.json&lt;/code&gt; to add the &lt;code&gt;MerryChristmas&lt;/code&gt; module to the Perl repo, copy in the script, and set the destination executable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;quot;dest&amp;quot; : &amp;quot;merrychristmas.com&amp;quot;,
    &amp;quot;perl_repo_files&amp;quot; : { &amp;quot;ext/MerryChristmas&amp;quot; : [&amp;quot;MerryChristmas.pm&amp;quot;, &amp;quot;MerryChristmas.xs&amp;quot;]},
    &amp;quot;+MANIFEST&amp;quot; : [&amp;quot;__perlarchlib__/MerryChristmas.pm&amp;quot;, &amp;quot;bin/merrychristmas&amp;quot;],
    &amp;quot;+perl_onlyextensions&amp;quot; : [&amp;quot;MerryChristmas&amp;quot;],
    &amp;quot;zip_extra_files&amp;quot; : { &amp;quot;bin&amp;quot; : [&amp;quot;script/merrychristmas&amp;quot;] }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Artie checked out the config, configured, built, and tested out the Merry Christmas message contraption:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    apperlm checkout default_config
    apperlm configure
    apperlm build
    ./merrychristmas.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Santa said, &amp;quot;Great work, now we can wrap camels of all shapes and sizes to spread cheer to the world! I&amp;#39;d like to put this into practice immediately&amp;quot;. Artie replied, &amp;quot;Thank you Santa, I&amp;#39;ll get to work teaching all the other elves how to wrap a camel.&amp;quot;&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-25T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Gavin Hayes</name>
    </author>
  </entry>
  <entry>
    <title>Github Action Workflows for Perl Modules - Perl Club</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/github-action-workflows-for-perl-modules-perl-club-kd5" type="text/html"/>
    <content type="html">&lt;p&gt;Github Action workflows for Perl modules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM/tree/master/.github/workflows"&gt;Github Action Workflows for Perl Modules - Perl Club&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although these Github Action workflows was created for the SPVM project of Perl Club, All Perl modules can use these without any changes.&lt;/p&gt;

&lt;h2&gt;
  
  
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Supports Linux Ubuntu latest, Mac latest, Windows Server latest, Windows Server 2019&lt;/li&gt;
&lt;li&gt;Supports 32bit on Linux/Ubuntu&lt;/li&gt;
&lt;li&gt;Supports Perl 5.8.9 on Linux/Ubuntu&lt;/li&gt;
&lt;li&gt;cpanm is downloaded in the workflow.&lt;/li&gt;
&lt;li&gt;Resolves CPAN module dependencies.&lt;/li&gt;
&lt;li&gt;ExtUtils::MakeMaker and make are used.&lt;/li&gt;
&lt;li&gt;Each workflow is portable in all versions of Perl, Linux, Mac, Windows without setting environment variables &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  
  
  Download by Command
&lt;/h2&gt;

&lt;p&gt;This Github Action workflows can be downloaded using commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p .github/workflows

# linux-ubuntu-latest
curl https://raw.githubusercontent.com/yuki-kimoto/SPVM/master/.github/workflows/linux-ubuntu-latest.yml &amp;gt; .github/workflows/linux-ubuntu-latest.yml

# linux-ubuntu-latest-32bit
curl https://raw.githubusercontent.com/yuki-kimoto/SPVM/master/.github/workflows/linux-ubuntu-latest-32bit.yml &amp;gt; .github/workflows/linux-ubuntu-latest-32bit.yml

# linux-ubuntu-latest-perl-5.8.9
curl https://raw.githubusercontent.com/yuki-kimoto/SPVM/master/.github/workflows/linux-ubuntu-latest-perl-5.8.9.yml &amp;gt; .github/workflows/linux-ubuntu-latest-perl-5.8.9.yml

# macos-latest
curl https://raw.githubusercontent.com/yuki-kimoto/SPVM/master/.github/workflows/macos-latest.yml &amp;gt; .github/workflows/macos-latest.yml

# windows-latest
curl https://raw.githubusercontent.com/yuki-kimoto/SPVM/master/.github/workflows/windows-latest.yml &amp;gt; .github/workflows/windows-latest.yml

# windows-2019
curl https://raw.githubusercontent.com/yuki-kimoto/SPVM/master/.github/workflows/windows-2019.yml &amp;gt; .github/workflows/windows-2019.yml

# Show Github Action workflows
ls -l .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Makefile.PL Example
&lt;/h2&gt;

&lt;p&gt;An example of Makefile.PL. This is Makefile.PL that is generated by the spvmdist command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use 5.008_007;
use ExtUtils::MakeMaker;
use strict;
use warnings;
use Config;
use Getopt::Long 'GetOptions';

GetOptions(
  'meta' =&amp;gt; \my $meta,
);

unless ($meta) {
  # Do something such as environment check.
}

WriteMakefile(
  NAME              =&amp;gt; 'Foo',
  VERSION_FROM      =&amp;gt; 'lib/Foo.pm',
  LICENSE           =&amp;gt; 'perl_5',
  ($] &amp;gt;= 5.005 ?     ## Add these new keywords supported since 5.005
    (ABSTRACT_FROM  =&amp;gt; 'lib/Foo.pm',
     AUTHOR         =&amp;gt; 'USER_NAME&amp;lt;USER_MAIL&amp;gt;') : ()),
  test =&amp;gt; {TESTS =&amp;gt; 't/*.t t/*/*.t t/*/*/*.t'},
  clean =&amp;gt; {FILES =&amp;gt; []},
  META_MERGE =&amp;gt; {
    'meta-spec' =&amp;gt; { version =&amp;gt; 2 },
    resources =&amp;gt; {
      repository =&amp;gt; {
        type =&amp;gt; 'git',
        url  =&amp;gt; '',
        web  =&amp;gt; '',
      },
    },
    no_index =&amp;gt; {
      directory =&amp;gt; [],
    }
  },
  NORECURS =&amp;gt; 1,
  CONFIGURE_REQUIRES =&amp;gt; {
  },
  PREREQ_PM         =&amp;gt; {
  },
  TEST_REQUIRES =&amp;gt; {

  },
);

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  How to use this with Module::Build
&lt;/h2&gt;

&lt;p&gt;Please replace ExtUtils::MakeMaker with Module::Build in the workflows.&lt;/p&gt;

&lt;p&gt;And replace build process with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl Build.PL
./Build
./Build disttest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/github-action-workflows-for-perl-modules-perl-club-kd5</id>
    <published>2022-12-24T23:18:35Z</published>
    <updated>2022-12-24T23:18:35Z</updated>
    <category term="perl"/>
    <category term="git"/>
    <category term="gihutb"/>
    <category term="githubaction"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5316392275466531527</id>
    <published>2022-12-24T14:19:00.000+01:00</published>
    <updated>2022-12-24T14:19:57.244+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxiv) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.75' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.75&lt;/strong&gt; on 2022-12-22&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.74 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KUERBIS/App-DBBrowser-2.306' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::DBBrowser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Browse SQLite/MySQL/PostgreSQL databases and their tables interactively. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.306&lt;/strong&gt; on 2022-12-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.304 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.28&lt;/strong&gt; on 2022-12-21&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.27 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GARU/Data-Printer-1.001000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Printer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - colored &amp; full-featured pretty print of Perl data structures and objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.001000&lt;/strong&gt; on 2022-12-22&lt;/li&gt;  &lt;li&gt;Votes: 143&lt;/li&gt;  &lt;li&gt;Previous version: 1.000004 was 1 year, 9 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.62&lt;/strong&gt; on 2022-12-20&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 0.61 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/JavaScript-V8-0.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JavaScript::V8&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the V8 JavaScript engine &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.11&lt;/strong&gt; on 2022-12-19&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.10 was 1 year, 7 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20221220' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20221220&lt;/strong&gt; on 2022-12-20&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.20221120 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.31&lt;/strong&gt; on 2022-12-21&lt;/li&gt;  &lt;li&gt;Votes: 476&lt;/li&gt;  &lt;li&gt;Previous version: 9.30 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.77' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.77&lt;/strong&gt; on 2022-12-19&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 0.75 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.146' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.146&lt;/strong&gt; on 2022-12-22&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: 1.144 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9672' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9672&lt;/strong&gt; on 2022-12-23&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9667 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5316392275466531527/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxiv-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5316392275466531527"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5316392275466531527"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxiv-11-great-cpan-modules-released.html" title="(cdxxiv) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7671922099617852746</id>
    <published>2022-12-24T14:16:00.001+01:00</published>
    <updated>2022-12-24T14:16:22.649+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxvii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 37&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/24 13:15:41 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::TensorFlow::Libtensorflow" target="_blank"&gt;AI::TensorFlow::Libtensorflow&lt;/a&gt; - Bindings for Libtensorflow deep learning library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/constant::more" target="_blank"&gt;constant::more&lt;/a&gt; - Assign values to constants from the command arguments&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Wait" target="_blank"&gt;Net::Wait&lt;/a&gt; - Wait on startup until the specified ports are listening&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Combinatorics" target="_blank"&gt;Algorithm::Combinatorics&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::elsquid" target="_blank"&gt;App::elsquid&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::tcpproxy" target="_blank"&gt;App::tcpproxy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Changes" target="_blank"&gt;CPAN::Changes&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=260)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Kit" target="_blank"&gt;Devel::Kit&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::SHA3" target="_blank"&gt;Digest::SHA3&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dumbbench" target="_blank"&gt;Dumbbench&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus::Lang::Rust" target="_blank"&gt;FFI::Platypus::Lang::Rust&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Proxy" target="_blank"&gt;HTTP::Proxy&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Limper" target="_blank"&gt;Limper&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::BigInt" target="_blank"&gt;Math::BigInt&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Perl" target="_blank"&gt;Modern::Perl&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::JWT" target="_blank"&gt;Mojo::JWT&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Pg" target="_blank"&gt;Mojo::Pg&lt;/a&gt; (+1=70)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Command::Author::generate::cpanfile" target="_blank"&gt;Mojolicious::Command::Author::generate::cpanfile&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Bcrypt" target="_blank"&gt;Mojolicious::Plugin::Bcrypt&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MongoDB" target="_blank"&gt;MongoDB&lt;/a&gt; (+1=87)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Proxy" target="_blank"&gt;Net::Proxy&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSH2" target="_blank"&gt;Net::SSH2&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PathTools" target="_blank"&gt;PathTools&lt;/a&gt; (+1=78)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::API2" target="_blank"&gt;PDF::API2&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Info::Base" target="_blank"&gt;Sys::Info::Base&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=115)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ANSITable" target="_blank"&gt;Text::ANSITable&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::MultiMarkdown" target="_blank"&gt;Text::MultiMarkdown&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Path::Tiny" target="_blank"&gt;Types::Path::Tiny&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O::More" target="_blank"&gt;Util::H2O::More&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7671922099617852746/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7671922099617852746"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7671922099617852746"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxvii-metacpan-weekly-report.html" title="(dxxxvii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5964278036901868651</id>
    <published>2022-12-24T14:12:00.004+01:00</published>
    <updated>2022-12-24T14:12:52.961+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-12-24 13:10:53 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74894907" target="_blank"&gt;Hiding Warnings that Relate to Intentional Code in Perl&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74866081" target="_blank"&gt;Why is the Hashref passed to the Net::Ping constructor, set to an empty hashref after Net::Ping-&amp;gt;new($args)?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74903274" target="_blank"&gt;Perl version changes?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74903735" target="_blank"&gt;perl oneliner print the array and other match in same print statement&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74884968" target="_blank"&gt;Is there a difference betwen qq(&amp;lt;text&amp;gt;) and "&amp;lt;text&amp;gt;" in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5964278036901868651/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5964278036901868651"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5964278036901868651"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxv-stackoverflow-perl-report.html" title="(dlxv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Day 24: CI for perl5-MIME-Types</title>
    <link rel="alternate" href="https://dev.to/szabgab/day-24-ci-for-perl5-mime-types-1nf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>After the heavy-lifting of the previous entry in the Daily CI series this was a very easy task. Looking at <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> I saw <a href="https://metacpan.org/dist/MIME-Types">MIME-Types</a>. That sounded like a simple Perl module and indeed adding CI was straight forward.</p>

<p><a href="https://github.com/markov2/perl5-MIME-Types/pull/14">Pull-request</a> It was already accepted.</p>

<h2>
  
  
  Conclusion
</h2>

<p>There are many projects that are low-hanging fruits where you can add GitHub Actions in a matter of minutes and get the benefits immediately.</p>

</div>
    </content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/day-24-ci-for-perl5-mime-types-1nf</id>
    <published>2022-12-24T07:47:00Z</published>
    <updated>2022-12-24T07:47:00Z</updated>
    <category term="perl"/>
    <category term="ci"/>
    <category term="programming"/>
    <category term="devops"/>
  </entry>
  <entry>
    <title>Weekly Challenge 196</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-196-41j1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-196/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-179/sgreen">My solutions</a></p>

<p>Oh dear. I was about to commit my code for this weeks solution, and realized at that moment I didn't commit and push my code for last week!</p>

<h2>
  
  
  Task 1: Pattern 132
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of integers, <code>@list</code>. Write a script to find out subsequence that respect Pattern 132. Return empty array if none found.</p>

<p>Pattern 132 in a sequence (a[i], a[j], a[k]) such that <code>i &lt; j &lt; k</code> and <code>a[i] &lt; a[k] &lt; a[j]</code>.</p>

<h3>
  
  
  My solution
</h3>

<p>So there are two concerns I have with this task:</p>

<ul>
<li>In the second sentence, there doesn't seem to be a definition of what <code>a</code> actually is. I'm taking an educated guess that <code>a</code> is an alias of <code>@list</code>.</li>
<li>In the examples "if more than one subsequence found then return the first". First is a very subjective term when it comes to returning a list.</li>
</ul>

<p>For this task I used the combinations method from <a href="https://docs.python.org/3.8/library/itertools.html#itertools.combinations">itertools</a> (Python) or <a href="https://metacpan.org/pod/Algorithm::Combinatorics">Algorithm::Combinatorics</a> (Perl) to generate all combinations of positions (not values) from <code>0</code> to one less than the length of the array.</p>

<p>For each iteration, I (numerically) sort the numbers to ensure <code>i &lt; j &lt; k</code>. If <code>a[i] &lt; a[k] &lt; a[j]</code>, then I print the result and exit. If there is no solution, I print <code>()</code>.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 3 1 4 2
<span class="o">(</span>1, 4, 2<span class="o">)</span>

<span class="nv">$ </span>./ch-1.py 1 2 3 4
<span class="o">()</span>

<span class="nv">$ </span>./ch-1.py 1 3 2 4 6 5
<span class="o">(</span>1, 3, 2<span class="o">)</span>

<span class="nv">$ </span>./ch-1.py 1 3 4 2
<span class="o">(</span>1, 3, 2<span class="o">)</span>

</code></pre>

</div>



<h2>
  
  
  Task 2: Range List
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a sorted unique integer array, <code>@array</code>.</p>

<p>Write a script to find all possible Number Range i.e [x, y] represent range all integers from <code>x</code> and <code>y</code> (both inclusive).</p>

<p>Each subsequence of two or more contiguous integers.</p>

<h3>
  
  
  My solution
</h3>

<p>For this task, I iterate over a list (an array in Perl) until it is empty. For each iteration, I pop the first value off the list, and store this as <code>start</code> and <code>end</code>. I have an inner loop that adds one to <code>end</code> if the next value in the array is one more than the current <code>end</code>. If <code>start</code> and <code>end</code> are different, I store this in the <code>solutions</code> list.</p>

<p>Then it's just a mater of print the <code>solutions</code> list, or a message if no subsequences is found.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 1 3 4 5 7
<span class="o">[</span>3,5]

<span class="nv">$ </span>./ch-2.py 1 2 3 6 7 9
<span class="o">[</span>1,3], <span class="o">[</span>6,7]

<span class="nv">$ </span>./ch-2.py 0 1 2 4 5 6 8 9
<span class="o">[</span>0,2], <span class="o">[</span>4,6], <span class="o">[</span>8,9]
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-196-41j1</id>
    <published>2022-12-24T05:12:55Z</published>
    <updated>2022-12-24T05:12:55Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 24, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-24/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Advent Calendar 2022 | Day 23 | Day 24 |  Merry Christmas Finally we reached to the end of Advent Calendar. It was a hectic 24 days. Not an easy task to manage/run the Advent Calendar. I would to take this opportunity to thank each and every contributors. Please accept my apology if I missed anyone. I tried to give equal opportunity to those who blog about their contributions.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-24/</id>
    <published>2022-12-24T00:00:00Z</published>
    <updated>2022-12-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Advent Calendar 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">| 2019 | 2020 | 2021 | 2022 |  Welcome to our 4th Advent Calendar. I promise to present interesting topic every day contributed by esteemed members of Team PWC.                         MON
 TUE
 WED
 THU
 FRI
 SAT
 SUN</div>
    </content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022/</id>
    <published>2022-12-24T00:00:00Z</published>
    <updated>2022-12-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-12-24T00:00:00Z</published>
    <updated>2022-12-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Looking at the Christmas Numbers</title>
    <link href="http://perladvent.org/2022/2022-12-24.html"/>
    <id>http://perladvent.org/2022/2022-12-24.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;All the elves know: it is mainly about spreading joy. But some numbers need to be kept in check - maybe with bar charts.&lt;/p&gt;

&lt;h3 id="Get-some-code"&gt;Get some code&lt;/h3&gt;

&lt;p&gt;Because they is no time for a long coding session during the jolly season, they just grab some example from &lt;a href="https://metacpan.org/module/Chart::Manual::Types"&gt;Chart::Manual::Types&lt;/a&gt;. Every line of it is explained there in detail. Once the code is pasted, they change the first dataset (animal names =&amp;gt; gift recipients) and paste into the following sets (rows) the real numbers. At last axis and legend need to be labeled properly and a first draft is ready:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Chart::Bars&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Chart::Bars&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="words"&gt;qw/ Peter Paul Mary/&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;40&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;80&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;80&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;60&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;50&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;30&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;60&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Christmas Expenses'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;x_label&lt;/span&gt;       &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Recipient'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_label&lt;/span&gt;       &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Amount'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;legend_labels&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="single"&gt;'2020'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'2021'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="single"&gt;'2022'&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;    &lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'true'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;min_val&lt;/span&gt;       &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;precision&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray70'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;misc&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;text&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;x_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;        &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray20'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;png&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;bars1.png&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The values under the Hash-key &lt;code&gt;colors&lt;/code&gt; just gray out the less important parts, so that the chart is more pleasant.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars1.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Finding-Colors"&gt;Finding Colors&lt;/h3&gt;

&lt;p&gt;The only issue now are the dataset colors, which are optimized for contrast (they scream). Intuitive would be to have shades of the same color to signify that neighbouring bars are about the same person, only some numbers are older than others. To achieve that let&amp;#39;s pick some appealing color from the table in the lower half of &lt;a href="https://metacpan.org/module/Graphics::Toolkit::Color::Constant"&gt;Graphics::Toolkit::Color::Constant&lt;/a&gt;. I like &lt;code&gt;&amp;#39;royalblue3&amp;#39;&lt;/code&gt; of the &lt;i&gt;CSS&lt;/i&gt; standard. It also has the advantage of providing a workable gradient (list of shades) for free. So just add:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset0&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'royalblue4'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset1&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'royalblue3'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset2&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'royalblue2'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The only counterintuitive part of this code is to understand that the first &lt;code&gt;add_dataset&lt;/code&gt; only adds X-axis labels and the following &lt;code&gt;add_dataset&lt;/code&gt; is &lt;code&gt;dataset0&lt;/code&gt;.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars2.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Customize-Colors"&gt;Customize Colors&lt;/h3&gt;

&lt;p&gt;Good, but much of the Christmas business reacts to what was last year. How do we highlight a certain dataset with a more red&amp;#39;ish color, while still keeping saturation and lightness in the targeted scheme of the gradient we had before? For that we load the whole toolkit (a direct dependency of &lt;code&gt;Chart&lt;/code&gt;) and import also the helper function &lt;code&gt;color&lt;/code&gt;, to keep it all short and sweet.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Graphics::Toolkit::Color&lt;/span&gt; &lt;span class="single"&gt;'color'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;color&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'royalblue3'&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;Hue&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;-220&lt;/span&gt; &lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Please make sure to have atleast the version 1.03 installed to use that feature.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars3.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Open-the-Color-Factory"&gt;Open the Color Factory&lt;/h3&gt;

&lt;p&gt;Normal people would be good now, but what would a super picky designer, who just came from the &lt;i&gt;New York Fashion Week&lt;/i&gt; say? Maybe something like: how lame - I want a gradient from &lt;i&gt;Glacier Lake&lt;/i&gt; to &lt;i&gt;Harbor Blue&lt;/i&gt;. Alright - let&amp;#39;s check quickly if &lt;a href="https://metacpan.org/module/Graphics::ColorNames::PantoneReport"&gt;Graphics::ColorNames::PantoneReport&lt;/a&gt; is installed by &lt;code&gt;grep&lt;/code&gt; &amp;#39;ing the result of &lt;code&gt;Graphics::ColorNames::all_schemes&lt;/code&gt; and if so, create our own three color gradient with the colors from this summers &lt;i&gt;Pantone Report&lt;/i&gt;. (Other standards like &lt;i&gt;X&lt;/i&gt;, &lt;i&gt;HTML&lt;/i&gt; or &lt;i&gt;VACCC&lt;/i&gt; are available too - just look at &lt;a href="https://metacpan.org/module/Bundle::Graphics::ColorNames"&gt;Bundle::Graphics::ColorNames&lt;/a&gt;).&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@gradient&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;color&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'PantoneReport:Glacier Lake'&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;gradient_to&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'PantoneReport:Harbor Blue'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset0&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$gradient&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset1&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$gradient&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;dataset2&lt;/span&gt;     &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$gradient&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If more datasets are present - just increase the second argument of the method &lt;code&gt;gradient_to&lt;/code&gt;.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars4.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;p&gt;When grouping the values by year instead of recipient, we have to switch X-axis and legend labeling and transpose the data. But also change the colors since they have now to express the difference between people. This does not fit on a linear scale because every human has many different qualities. But the colors still have to go together well to create a harmonious chart. For that task you can create complementary colors, which are maximally different in hue, but same in lightness and saturation (unless the advanced arguments of the method &lt;code&gt;complementary&lt;/code&gt; are used).&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@gradient&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;color&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="single"&gt;'lapisblue'&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;complementary&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;3&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/module/Graphics::Toolkit::Color"&gt;Graphics::Toolkit::Color&lt;/a&gt; still holds some more options, but that was enough to get a taste for whats possible.&lt;/p&gt;

&lt;img src="https://raw.githubusercontent.com/lichtkind/Chart/main/dev/example/advent/bars5.png"    alt="first bar chart"  width="300" height="300"&gt;

&lt;h3 id="Conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With &lt;a href="https://metacpan.org/module/Graphics::Toolkit::Color"&gt;Graphics::Toolkit::Color&lt;/a&gt; you can quickly color you chart after your liking. Check all example code and images &lt;a href="https://github.com/lichtkind/Chart/tree/main/dev/example/advent"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-24T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>lichtkind</name>
    </author>
  </entry>
  <entry>
    <title>SPVM 0.9672 is released</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvm-09672-is-released-3he2" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/SPVM"&gt;SPVM&lt;/a&gt; 0.9672 is released.&lt;/p&gt;

&lt;h2&gt;
  
  
  New Features and Enhancement
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/Changes"&gt;Changes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0.9672 2022-12-24
  [Performance Degration]
    * Degrates the performance of the method call, field access, class variable access, basic type access, class access in precompiled source
      because the ids are cached only at the beginning of the precompiled function, not static memory.
  [Changes]
    * Precompiled methods become reentrant because method IDs, field IDs, class variable IDs, basic type IDs, class IDs are not saved to static variables.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  For Programming Beginners
&lt;/h2&gt;

&lt;h3&gt;
  
  
  What Is SPVM?
&lt;/h3&gt;

&lt;p&gt;SPVM is a static typed programming language that can be installed from Perl/CPAN.&lt;/p&gt;

&lt;h3&gt;
  
  
  How potential dose SPVM have?
&lt;/h3&gt;

&lt;p&gt;Growth is expected in the fields of Bio Tech, AI/ML, Apple/iPhone/iPad Apps, Google/Android Apps, IoT Device, Connected Car, Smart Device, Smart Home, etc.&lt;/p&gt;

&lt;p&gt;This is because SPVM can produce an executable file that supports cross platforms and make easy to calculate arrays and bind C/C++ &lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvm-09672-is-released-3he2</id>
    <published>2022-12-23T22:46:14Z</published>
    <updated>2022-12-23T22:46:14Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
    <category term="beginners"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 23, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-23/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 22 | Day 23 | Day 24 |  The gift is presented by E. Alvarez. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 191&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Lambdas &amp;amp; Printf Task I: Binary String  Ok, another great week and I was glad that it did not require too much effort on my part, as I’ve started participating in AoC, AoCyber, and also doing Gabor Szabo’s 2022 December CI Challenge.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-23/</id>
    <published>2022-12-23T00:00:00Z</published>
    <updated>2022-12-23T00:00:00Z</updated>
  </entry>
  <entry>
    <title>At the Present Factory</title>
    <link href="http://perladvent.org/2022/2022-12-23.html"/>
    <id>http://perladvent.org/2022/2022-12-23.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;Father Christmas is very old-school and so is his Perl code. There are no towering software engineering marvels - just a bunch of wonderful scripts: small, meticulously written, very readable and changeable. And because there are so well organized, his system scales up to billions of cheering children.&lt;/p&gt;

&lt;p&gt;Reporting about such a high volume of numbers has to be graphical - charts are needed. They are getting mass produced by scripts that convert one dataset into one chart of a particular layout and design by a call like:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;perl script.pl data.tsv &amp;gt; chart.png&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This approach allows maximal flexibility since source and target names are set from the outside and the scripts don&amp;#39;t have to be adapted, even if the data comes from a database or a web scraper. But how to write such a converter script?&lt;/p&gt;

&lt;h3 id="Establishing-the-Pipe"&gt;Establishing the Pipe&lt;/h3&gt;

&lt;p&gt;Basic examples can be found under &lt;a href="https://metacpan.org/module/Chart::Manual::Types"&gt;Chart::Manual::Types&lt;/a&gt;. But the code there only uses inline data added by the &lt;code&gt;add_dataset&lt;/code&gt; method. In our case we have to use &lt;code&gt;add_datafile&lt;/code&gt;, which accepts file names or handles and loads an entire table of space or tab separated values (empty rows and perl style comments ignored). Here a short example with only three data rows:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;Peter Paul Mary&lt;br /&gt;30    40   80 &lt;br /&gt;80    60   30 &lt;br /&gt;50    30   60 &lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;You can produce such files with &lt;a href="https://metacpan.org/module/Text::CSV"&gt;Text::CSV&lt;/a&gt; by setting the porperty &lt;code&gt;sep_char&lt;/code&gt; to &lt;code&gt;&amp;#39; &amp;#39;&lt;/code&gt; (&lt;i&gt;0x20&lt;/i&gt;) or &lt;code&gt;&amp;quot;\t&amp;quot;&lt;/code&gt; (&lt;i&gt;0x09&lt;/i&gt;). Or you update to Chart 2.403.9 or later and use pure CSV.&lt;/p&gt;

&lt;p&gt;The names of the first row are of course X-axis-labels, but &lt;code&gt;Chart&lt;/code&gt; takes care of that automatically and recognizes the following three rows as dataset0 .. dataset2. So let&amp;#39;s look at the entire code:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Chart::Lines&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="core"&gt;shift&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Chart::Lines&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;600&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_datafile&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;          &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Latest Numbers !'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;include_zero&lt;/span&gt;   &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'true'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt;   &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'true'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;precision&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;colors&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_grid_lines&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray60'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;misc&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;text&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray55'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;x_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;y_label&lt;/span&gt;      &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray40'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;title&lt;/span&gt;        &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'gray20'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="word"&gt;binmode&lt;/span&gt; &lt;span class="word"&gt;STDOUT&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="word"&gt;STDOUT&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;scalar_png&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The last two code lines put the image binary into the command line, so after&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;perl ./script.pl data.tsv &amp;gt; chart.png&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;.. we get the chart in an image file of our choosing.&lt;/p&gt;

&lt;h3 id="Data-Set-Manipulation"&gt;Data Set Manipulation&lt;/h3&gt;

&lt;p&gt;To take full advantage of this setup, our script should automatically adapt to different data set sizes. For that we have to get hold of the data, transform as needed and put it back in. It is simply a reference to an &lt;i&gt;array of arrays&lt;/i&gt;.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_datafile&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$data&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;get_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;clear_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# data transform&lt;br /&gt;&lt;/span&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="magic"&gt;$_&lt;/span&gt; &lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="word"&gt;for&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This for instance would allow us to create color gradients or wheels of complementary colors of needed size matching the size of the dataset. How this works I already showed in a previous calendar leaf. But to give another practical example - wouldn&amp;#39;t it be nice to have data tables like:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;o     Peter Paul Mary&lt;br /&gt;2020  30    40   80 &lt;br /&gt;2021  80    60   30 &lt;br /&gt;2020  50    30   60 &lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;i&gt;o&lt;/i&gt; symbol or any other placeholder is important because &lt;code&gt;Chart&lt;/code&gt; gets unhappy quickly when rows are of unequal length - even we pull out the first column before drawing. With this little preprocessing the first column of our data table is now appearing in the legend of the chart.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_datafile&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="symbol"&gt;$file&lt;/span&gt; &lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$data&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;get_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;clear_data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;@label&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;map&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="core"&gt;shift&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="magic"&gt;$_&lt;/span&gt; &lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="core"&gt;shift&lt;/span&gt; &lt;span class="symbol"&gt;@label&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_dataset&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt; &lt;span class="magic"&gt;$_&lt;/span&gt; &lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="word"&gt;for&lt;/span&gt; &lt;span class="cast"&gt;@&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$g&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;legend_labels&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;@label&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Voil&amp;agrave;, our chart factory is humming away peacefully.&lt;/p&gt;

&lt;h3 id="Conclusion"&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Little scripts can produce piles of charts that are well labeled and and designer-colored, even if the incoming data sets have various sizes. Check all example code and images &lt;a href="https://github.com/lichtkind/Chart/tree/main/dev/example/advent"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-23T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>lichtkind</name>
    </author>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 196: Pattern 132 and Range List</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2022/12/perl-weekly-challenge-196-pattern-132-and-range-list.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10974</id>
    <published>2022-12-22T22:36:20Z</published>
    <updated>2022-12-22T22:39:07Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 196 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-196/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 25, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Pattern 132</h2>

<p><em>You are given a list of integers, <code>@list</code>.</em></p>

<p><em>Write a script to find out subsequence that respect Pattern 132. Return empty array if none found.</em></p>

<blockquote>
  <p><em>Pattern 132 in a sequence <code>(a[i], a[j], a[k])</code> such that <code>i &lt; j &lt; k</code> and <code>a[i] &lt; a[k] &lt; a[j]</code>.</em></p>
</blockquote>

<p><em>Example 1</em></p>

<pre><code>Input:  @list = (3, 1, 4, 2)
Output: (1, 4, 2) respect the Pattern 132.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1, 2, 3, 4)
Output: () since no susbsequence can be found.
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (1, 3, 2, 4, 6, 5)
Output: (1, 3, 2) if more than one subsequence found then return the first.
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: @list = (1, 3, 4, 2)
Output: (1, 3, 2)
</code></pre>

<h3>Pattern 132 in Raku</h3>

<p>The <code>find_132</code> subroutine is a recursive subroutine which does different things, depending on the number of items in the partial result array passed to it.</p>

<pre><code>sub find_132 (@input, @part-result) {
    # say @input, " - ", @part-result;
    given @part-result.elems {
        when 3 { return @part-result }
        when 2 {
            for 0..@input.end -&gt; $i {
                my $ret = find_132 @input[$i^..@input.end],
                    (@part-result, @input[$i]).flat
                    if @input[$i] &gt; @part-result[0]
                    &amp;&amp; @input[$i] &lt; @part-result[1];
                return $ret if $ret;
            }
        }
        when 1 {
            for 0..@input.end -&gt; $i {
                my $ret =find_132 @input[$i^..@input.end],
                    (@part-result, @input[$i]).flat
                    if @input[$i] &gt; @part-result[0];
                return $ret if $ret;
            }
        }
        when 0 {
            for 0..@input.end -&gt; $i {
                my $ret = find_132(@input[$i^..@input.end],
                    (@input[$i],));
                return $ret if $ret;
            }
        }
    }
}
for &lt;3 1 4 2&gt;, &lt;1 2 3 4&gt;, &lt;1 3 2 4 6 5&gt;, &lt;1 3 4 2&gt; -&gt; @test {
    say @test, "\t=&gt; ", (find_132 @test, ()) // "()";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku  ./pattern-132.raku
(3 1 4 2)       =&gt; (1 4 2)
(1 2 3 4)       =&gt; ()
(1 3 2 4 6 5)   =&gt; (1 3 2)
(1 3 4 2)       =&gt; (1 3 2)
</code></pre>

<p>I&#8217;m afraid I got carried away by my love for recursive solutions. Using a recursive subroutine might in our case be overkill, or over-engineering, especially in view of the fact that we always need three steps, so that these steps can easily be hard-coded in an iterative loop. In the real life, I would probably rewrite it with an iterative approach. In the case of this challenge, I&#8217;ll simply try that option in the Perl implementation.</p>

<h3>Pattern 132 in Perl</h3>

<p>Using a recursive subroutine is useful when there is an unpredictable, or rather variable, number of nested loops, depending on the input data. Here, we know that we essentially need three loops, one for each integer in the output. So, rather than porting to Perl the recursive approach used in Raku, we&#8217;ll try an iterative approach with three nested hard-coded loops, which should presumably be simpler.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub find_132 {
    my @in = @_;
    for my $i (0..$#in) {
        my @out = ($in[$i]);
        for my $j ($i+1..$#in) {
            next unless $in[$j] &gt; $out[0];
            my @out2 = (@out, $in[$j]);
            for my $k ($j+1..$#in) {
                if ($in[$k] &gt; $out2[0] 
                    and $in[$k] &lt; $out2[1]) {
                    return @out2, $in[$k];
                }
            }
        }
    }
    return "()"; # no solution if we've got here
}
for my $test ( [&lt;3 1 4 2&gt;], [&lt;1 2 3 4&gt;], 
               [&lt;1 3 2 4 6 5&gt;], [&lt;1 3 4 2&gt;] ) {
    say "@$test \t=&gt; ", join " ", find_132 @$test;
}
</code></pre>

<p>The <code>find_123</code> subroutine is only is only 17 code lines (versus 30 lines for the recursive version used in the Raku implementation), so this is definitely significantly shorter, and also, I believe, simpler.</p>

<p>This program displays the following output: </p>

<pre><code>$ perl  ./pattern-132.pl
3 1 4 2         =&gt; 1 4 2
1 2 3 4         =&gt; ()
1 3 2 4 6 5     =&gt; 1 3 2
1 3 4 2         =&gt; 1 3 2
</code></pre>

<h2>Task 2: Range List</h2>

<p><em>You are given a sorted unique integer array, <code>@array</code>.</em></p>

<p><em>Write a script to find all possible Number Range i.e <code>[x, y]</code> represent range all integers from x and y (both inclusive).</em></p>

<blockquote>
  <p><em>Each subsequence of two or more contiguous integers</em></p>
</blockquote>

<p><em>Example 1</em></p>

<pre><code>Input: @array = (1,3,4,5,7)
Output: [3,5]
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @array = (1,2,3,6,7,9)
Output: [1,3], [6,7]
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @array = (0,1,2,4,5,6,8,9)
Output: [0,2], [4,6], [8,9]
</code></pre>

<h3>Range List in Raku</h3>

<p>We loop over the input list and keep track of successive ranges.</p>

<pre><code>sub find-ranges (@in) {
    my ($start, $curr);
    my @result;
    $start = $curr = @in[0];
    for 1..@in.end -&gt; $i {
        next if @in[$i] == $start;
        if @in[$i] == $curr + 1 {
            $curr = @in[$i];
        } else {
            push @result, "[$start $curr]" 
                if $curr - $start &gt; 0;
            $start = @in[$i];
            $curr = $start;
        }
    }
    push @result, "[$start $curr]" if $curr &gt; $start;
    return @result.elems &gt; 0 ?? @result !! "[]";
}
for &lt;1 3 4 5 7&gt;, &lt;1 2 3 6 7 9&gt;, &lt;0 1 2 4 5 6 8 9&gt;,
    &lt;1 3 4 6 7 11 12 13&gt;, &lt;1 3 4 5 7 9&gt;, &lt;1 3 5&gt; -&gt; @test {
    printf "%-20s =&gt; %s\n", ~@test, ~find-ranges @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./find-ranges.raku
1 3 4 5 7            =&gt; [3 5]
1 2 3 6 7 9          =&gt; [1 3] [6 7]
0 1 2 4 5 6 8 9      =&gt; [0 2] [4 6] [8 9]
1 3 4 6 7 11 12 13   =&gt; [3 4] [6 7] [11 13]
1 3 4 5 7 9          =&gt; [3 5]
1 3 5                =&gt; []
</code></pre>

<h3>Range List in Perl</h3>

<p>This is a port to Perl of the Raku program just above:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub find_ranges {
    my @in = @_;
    my ($start, $curr);
    my @result;
    $start = $curr = $in[0];
    for my $i (1..$#in) {
        next if $in[$i] == $start;
        if ($in[$i] == $curr + 1) {
            $curr = $in[$i];
        } else {
            push @result, "[$start $curr] " 
                if $curr &gt; $start;
            $start = $in[$i];
            $curr = $start;
        }
    }
    push @result, "[$start $curr]" if $curr &gt; $start;
    return @result &gt; 0 ? @result : "[]";
}
for my $test ([&lt;1 3 4 5 7&gt;], [&lt;1 2 3 6 7 9&gt;], 
    [&lt;0 1 2 4 5 6 8 9&gt;], [&lt;1 3 4 6 7 11 12 13&gt;], 
    [&lt;1 3 4 5 7 9&gt;], [&lt;1 3 5&gt;]) {
    say sprintf("%-25s", "@$test =&gt; "), find_ranges @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./find-ranges.pl
1 3 4 5 7 =&gt;             [3 5]
1 2 3 6 7 9 =&gt;           [1 3] [6 7]
0 1 2 4 5 6 8 9 =&gt;       [0 2] [4 6] [8 9]
1 3 4 6 7 11 12 13 =&gt;    [3 4] [6 7] [11 13]
1 3 4 5 7 9 =&gt;           [3 5]
1 3 5 =&gt;                 []
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 1, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Advent Calendar - December 22, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-22/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 21 | Day 22 | Day 23 |  The gift is presented by Lance Wicks. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 119&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Perl flexibility for the win This week I spent some time on the Weekly Challenge 119 which is always a good opportunity to get some deliberate practice in.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-22/</id>
    <published>2022-12-22T00:00:00Z</published>
    <updated>2022-12-22T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Building the Sleigh While Flying It</title>
    <link href="http://perladvent.org/2022/2022-12-22.html"/>
    <id>http://perladvent.org/2022/2022-12-22.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h2 id="Building-the-Sleigh-While-Flying-It"&gt;Building the Sleigh While Flying It&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;&amp;quot;B, a little help?&amp;quot;&lt;/i&gt; Santa&amp;#39;s voice echoed through the toymaker&amp;#39;s headquarters, its pitch a little higher than usual. Binky the Elf left her station and cracked open the boss&amp;#39;s door. &lt;i&gt;&amp;quot;What&amp;#39;s up, Nick?&amp;quot;&lt;/i&gt; she replied, nonchalantly. Santa was squinting at the monitor in front of him, where several lines of error messages kept flooding the terminal.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&amp;quot;I think there&amp;#39;s something wrong with the reindeers.&amp;quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The famous Christmas Reindeers are, of course, robots. As a lover of all living things, Santa could never bring himself to force animals into such a strenuous journey each year. Besides, how else do you think they can travel that fast?&lt;/p&gt;

&lt;p&gt;Binky sighed and glanced over Santa&amp;#39;s right shoulder. The world population had just surpassed 8 billion, so they had to spend a good part of the year profiling and optimizing the reindeers&amp;#39; code for speed. &lt;i&gt;&amp;quot;I thought you tested it back at All Hallows Eve&amp;quot;&lt;/i&gt;, the elf cried. Santa looked down, his face redder than his coat. &lt;i&gt;&amp;quot;I was going to, but Jack took me trick or treating instead&amp;quot;&lt;/i&gt;, he muttered.&lt;/p&gt;

&lt;p&gt;Binky raised an eyebrow. With that kind of care, it was a Christmas Miracle this code compiled in the first place. Thinking of the kids, she decided not to pursue the argument and instead put her energy into finding and fixing the issue. The error messages were cryptic, at best:&lt;/p&gt;

&lt;pre&gt;
    &lt;code style="display: inline-block;white-space: normal;max-width:95%; word-break:break-all; word-wrap:break-word;"&gt;
    Undefined subroutine &amp;Class::MOP::Class:::after called at /home/santaclaus/.plenv/versions/5.36.0/lib/perl5/site_perl/5.36.0/x86_64-linux/Class/MOP/Method/Wrapped.pm line 57.
    Reindeer::Prancer::_wrapped_dash_away(Reindeer::Prancer=HASH(0x1383a6160)) called at /home/santaclaus/.plenv/versions/5.36.0/lib/perl5/site_perl/5.36.0/x86_64-linux//Class/MOP/Method/Wrapped.pm line 97
    Reindeer::Prancer::dash_away(Reindeer::Prancer=HASH(0x1383a6160)) called at christmas.pl line 1225
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;i&gt;&amp;quot;Huh.&amp;quot;&lt;/i&gt;, the elf frowned. Reindeers were controlled by complex &lt;a href="https://metacpan.org/module/Moose"&gt;Moose&lt;/a&gt; classes, but method modifiers such as &amp;#39;before&amp;#39;, &amp;#39;after&amp;#39; and &amp;#39;around&amp;#39; were pretty standard. It made no sense that &amp;quot;after&amp;quot; was not defined. Line 1225 of christmas.pl, was also pretty straightforward:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="symbol"&gt;$reindeer&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;dash_away&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Binky and Santa spent a little while staring at the source code. Everything looked fine, but the code was still failing. Finally, Binky broke the silence: &lt;i&gt;&amp;quot;Did you try dumping &lt;code&gt;$reindeer&lt;/code&gt; before that call?&amp;quot;&lt;/i&gt; she suggested. &lt;i&gt;&amp;quot;I did, but look!&amp;quot;&lt;/i&gt;, the old man scrolled up the terminal window and pointed at a line that said:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        $VAR1 = bless( {}, &amp;#39;Reindeer::Prancer&amp;#39; );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;i&gt;&amp;quot;It&amp;#39;s just showing the bless() command, an empty hash reference and the class name. How am I supposed to work with that?&amp;quot;&lt;/i&gt; Santa whimpered. &lt;i&gt;&amp;quot;That&amp;#39;s because you&amp;#39;re using Data::Dumper, boss.&amp;quot;&lt;/i&gt; A faint smile crept into Binky&amp;#39;s lips. It wasn&amp;#39;t every day she was able to teach Father Christmas himself something new. She continued. &lt;i&gt;&amp;quot;Data::Dumper is best for serializing. If you want to inspect the data yourself, you should use &lt;a href="https://metacpan.org/module/Data::Printer"&gt;Data::Printer&lt;/a&gt; instead.&amp;quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Santa Claus&amp;#39; eyes widened. &lt;i&gt;&amp;quot;Data::Printer? What kind of sorcery is that?&amp;quot;&lt;/i&gt; The elf signaled him to scooch over so she could reach the keyboard herself. As she typed &lt;code&gt;cpanm Data::Printer&lt;/code&gt;, she said: &lt;i&gt;&amp;quot;It&amp;#39;s a module that dumps variables in a way meant to be read by an actual human trying to debug code. Don&amp;#39;t worry, it&amp;#39;s super light and fast - zero deps and all. See? It&amp;#39;s already installed.&amp;quot;&lt;/i&gt; Then she fired up the editor and replaced the line that said:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$reindeer&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;with:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;DDP&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="word"&gt;p&lt;/span&gt; &lt;span class="symbol"&gt;$reindeer&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;They gave it another go and the result was quite different:&lt;/p&gt;

&lt;pre&gt;
    &lt;code&gt;
    &lt;span style="color:#C792EA"&gt;Reindeer::Prancer&lt;/span&gt;  &lt;span style="color:#66D9EF"&gt;{&lt;/span&gt;
         &lt;span&gt;parents:&lt;/span&gt; &lt;span style="color:#C792EA"&gt;Reindeer&lt;/span&gt;
         &lt;span&gt;roles (1):&lt;/span&gt; &lt;span style="color:#C792EA"&gt;FlyingMagic&lt;/span&gt;
         &lt;span&gt;attributes (2):&lt;/span&gt; &lt;span style="color:#82AAFF"&gt;name&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; sleigh&lt;/span&gt;
         &lt;span&gt;public methods (24):&lt;/span&gt;
             &lt;span style="color:#82AAFF"&gt;dash_away&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; DESTROY&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; meta&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; new&lt;/span&gt;
             &lt;span&gt;Carp:&lt;/span&gt;
                 &lt;span style="color:#82AAFF"&gt;confess&lt;/span&gt;
             &lt;span&gt;Class::MOP::Class:&lt;/span&gt;
                 &lt;span style="color:#82AAFF"&gt;:after&lt;/span&gt;
             &lt;span&gt;FlyingMagic:&lt;/span&gt;
                 &lt;span style="color:#82AAFF"&gt;liftoff&lt;/span&gt;
             &lt;span&gt;Moose:&lt;/span&gt;
                 &lt;span style="color:#82AAFF"&gt;after&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;around&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;augment&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;before&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;extends&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;has&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;inner&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;override&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;super&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;with&lt;/span&gt;
             &lt;span&gt;Moose::Object:&lt;/span&gt;
                 &lt;span style="color:#82AAFF"&gt;BUILDALL&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;BUILDARGS&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;DEMOLISHALL&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;does&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;DOES&lt;/span&gt;, &lt;span style="color:#82AAFF"&gt;dump&lt;/span&gt;
             &lt;span&gt;Scalar::Util:&lt;/span&gt;
                 &lt;span style="color:#82AAFF"&gt;blessed&lt;/span&gt;
         &lt;span&gt;private methods (1):&lt;/span&gt; &lt;span style="color:#82AAFF"&gt;_build_name&lt;/span&gt;
         &lt;span&gt;method modifiers (1):&lt;/span&gt;
             &lt;span&gt;after dash_away&lt;/span&gt; &lt;span style="color:#FF5370"&gt;&amp;lt;undefined coderef&amp;gt;&lt;/span&gt;
         &lt;span&gt;internals: &lt;/span&gt;&lt;span style="color:#66D9EF"&gt;{}&lt;/span&gt;
     &lt;span style="color:#66D9EF"&gt;}&lt;/span&gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The terminal lit up like a Christmas Tree. They could see the full class hierarchy, applied roles, attributes, public and private methods - everything! Santa&amp;#39;s eyes sparkled. &lt;i&gt;&amp;quot;Ho! Ho! Ho! I know what&amp;#39;s wrong.&amp;quot;&lt;/i&gt; He pointed at the line that said &lt;code&gt;after dash_away: &amp;lt;undefined coderef&amp;gt;&lt;/code&gt; in bright red. They searched the source code for &lt;code&gt;&amp;#39;after &amp;quot;dash_away&amp;quot;&amp;#39;&lt;/code&gt; and quickly found the only entry, that read:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;after&lt;/span&gt; &lt;span class="single"&gt;'dash_away'&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;&amp;amp;lifftoff&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;They took another look at the Data::Printer output searching for that method. Santa quickly spotted it coming from the &lt;code&gt;FlyingMagic&lt;/code&gt; role, but it was written differently. &lt;i&gt;&amp;quot;A typo! Someone was naughty on that code review.&amp;quot;&lt;/i&gt; They fixed the typo and ran it again. It worked! One by one the reindeers started whirring. Santa was about to jump on the sleigh for a final test-drive when the elf interrupted the program. &lt;i&gt;&amp;quot;What is it, B?&amp;quot;&lt;/i&gt; the old man asked.&lt;/p&gt;

&lt;p&gt;Binky was staring at the terminal again. &lt;i&gt;&amp;quot;It&amp;#39;s leaking memory. The way things are, the sleigh will crash before you even reach the Atlantic. Hold on.&amp;quot;&lt;/i&gt; The elf added a bunch of &lt;code&gt;p()&lt;/code&gt; statements throughout the code. Santa Claus looked bewildered. &lt;i&gt;&amp;quot;What are you doing? There will be so much stuff in the output we won&amp;#39;t be able to make any of it out!&amp;quot;&lt;/i&gt;, he scoffed.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&amp;quot;Sure we will.&amp;quot;&lt;/i&gt; Binky replied without taking her eyes off the monitor. &lt;i&gt;&amp;quot;We&amp;#39;ll control what prints what on &lt;a href="https://metacpan.org/module/Data::Printer#The-.dataprinter-configuration-file"&gt;the .dataprinter file&lt;/a&gt;&amp;quot;&lt;/i&gt;. She created a new file called &amp;quot;.dataprinter&amp;quot; on the root of the project path, then made it look something like this:&lt;/p&gt;

&lt;pre class="code-listing"&gt;
    &lt;code class="code"&gt;
    &lt;span class="single"&gt;show_refcount&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;1&lt;/span&gt;
    &lt;span class="single"&gt;theme&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;Material&lt;/span&gt;

    &lt;span class="symbol"&gt;[Sleigh::Engine]&lt;/span&gt;
        &lt;span class="single"&gt;class.expand&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;0&lt;/span&gt;
    
    &lt;span class="symbol"&gt;[Toys::Storage::MagicBag]&lt;/span&gt;
        &lt;span class="single"&gt;filters&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;DB&lt;/span&gt;
    
    &lt;span class="symbol"&gt;[Reindeer]&lt;/span&gt;
        &lt;span class="single"&gt;class.stringify&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;0&lt;/span&gt;
        &lt;span class="single"&gt;class.show_wrapped&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;0&lt;/span&gt;
        &lt;span class="single"&gt;class.inherited&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;none&lt;/span&gt;
        &lt;span class="single"&gt;output&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;/var/log/christmas/reindeer.data&lt;/span&gt;
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Binky went on to explain that you could place global settings for Data::Printer at the top of that file, like setting a theme and showing refcounts, then create more specific rules that apply only to certain caller packages. In this case, any &lt;code&gt;p()&lt;/code&gt; statements made inside &lt;code&gt;Sleigh::Engine&lt;/code&gt; would not expand objects, showing only the class name and (as per the global setting) the refcount. On the other hand, calls to &lt;code&gt;p()&lt;/code&gt; inside &lt;code&gt;Toys::Storage::MagicBag&lt;/code&gt; would be subject to all the filters set on &lt;a href="https://metacpan.org/module/Data::Printer::Filters::DB"&gt;Data::Printer::Filters::DB&lt;/a&gt;, useful to see database connection statuses, prepared statements, result sources and sets from DBI, DBIx::Class and more.&lt;/p&gt;

&lt;p&gt;Finally, calls to &lt;code&gt;p()&lt;/code&gt; made inside &lt;code&gt;Reindeer.pm&lt;/code&gt; would not attempt to stringify objects that have a subroutine &lt;code&gt;as_string&lt;/code&gt;, &lt;code&gt;to_string&lt;/code&gt; or similar, nor will they show wrapped method modifiers or methods inherited from parent classes. Even so, that particular output is in a hot codepath and can get pretty big, so instead of printing to STDERR, it will write to the custom &lt;code&gt;/var/log/christmas/reindeer.data&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&amp;quot;We could even put all those settings in a custom profile package and upload it to CPAN or whatever, but right now a .dataprinter file is more than enough.&amp;quot;&lt;/i&gt; They tried running the program again and, sure enough, the output read:&lt;/p&gt;

&lt;pre&gt;
    &lt;code&gt;
    &lt;span style="color:#C792EA"&gt;Sleigh&lt;/span&gt; (refcount: 10)
    &lt;span style="color:#C792EA"&gt;Sleigh&lt;/span&gt; (refcount: 10)
    &lt;span style="color:#C792EA"&gt;Sleigh&lt;/span&gt; (refcount: 10)
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Santa was puzzled. &lt;i&gt;&amp;quot;10 refcounts on the sleigh? We must have a circular reference somewhere. What&amp;#39;s going on on that Reindeer log file?&amp;quot;&lt;/i&gt; Binky opened it, but it looked pretty much the same: several reindeer objects just like before, except this time without the inherited methods but with a refcount next to each data, just like they asked:&lt;/p&gt;

&lt;pre&gt;
    &lt;code&gt;
    &lt;span style="color:#C792EA"&gt;Reindeer::Vixen&lt;/span&gt;  &lt;span style="color:#66D9EF"&gt;{&lt;/span&gt;
         &lt;span&gt;parents:&lt;/span&gt; &lt;span style="color:#C792EA"&gt;Reindeer&lt;/span&gt;
         &lt;span&gt;roles (1):&lt;/span&gt; &lt;span style="color:#C792EA"&gt;FlyingMagic&lt;/span&gt;
         &lt;span&gt;attributes (2):&lt;/span&gt; &lt;span style="color:#82AAFF"&gt;name&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; sleigh&lt;/span&gt;
         &lt;span&gt;public methods (4):&lt;/span&gt;
             &lt;span style="color:#82AAFF"&gt;dash_away&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; DESTROY&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; meta&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; new&lt;/span&gt;
         &lt;span&gt;private methods (1):&lt;/span&gt; &lt;span style="color:#82AAFF"&gt;_build_name&lt;/span&gt;
         &lt;span&gt;internals: &lt;/span&gt;&lt;span style="color:#66D9EF"&gt;{&lt;/span&gt;
             &lt;span style="color:#82AAFF"&gt;sleigh&lt;/span&gt;    &lt;span style="color:#C792EA"&gt;Sleigh&lt;/span&gt; (refcount: 10)
         &lt;span style="color:#66D9EF"&gt;}&lt;/span&gt;
     &lt;span style="color:#66D9EF"&gt;}&lt;/span&gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Santa sighed. &lt;i&gt;&amp;quot;If only that Data::Printer of yours could signal weak references...&amp;quot;&lt;/i&gt; Binky&amp;#39;s eyes widened as she stared at him. &lt;i&gt;&amp;quot;Nick, you&amp;#39;re a genius!&amp;quot;&lt;/i&gt; The old man chuckled. &lt;i&gt;&amp;quot;Me? What did I do?&amp;quot;&lt;/i&gt; The elf went on. &lt;i&gt;&amp;quot;Data::Printer DOES show when it&amp;#39;s looking at a weak ref. The fact that we don&amp;#39;t see it means that Sleigh object right there was NOT weakened.&amp;quot;&lt;/i&gt; They opened the reindeer class in the editor and replaced the line that read:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;has&lt;/span&gt; &lt;span class="single"&gt;'sleigh'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;is&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'rw'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;isa&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Sleigh'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;with:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;has&lt;/span&gt; &lt;span class="single"&gt;'sleigh'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;is&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'rw'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;isa&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Sleigh'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;weak_ref&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;They fired up the program again. The reindeers whirred and clanked for a few seconds, then Rudolph&amp;#39;s nose lit up, signaling the restart was complete and they were all ready to fly. Santa&amp;#39;s heartbeat kicked up a notch as Binky opened the logs to see what it showed:&lt;/p&gt;

&lt;pre&gt;
    &lt;code&gt;
    &lt;span style="color:#C792EA"&gt;Reindeer::Vixen&lt;/span&gt;  &lt;span style="color:#66D9EF"&gt;{&lt;/span&gt;
         &lt;span&gt;parents:&lt;/span&gt; &lt;span style="color:#C792EA"&gt;Reindeer&lt;/span&gt;
         &lt;span&gt;roles (1):&lt;/span&gt; &lt;span style="color:#C792EA"&gt;FlyingMagic&lt;/span&gt;
         &lt;span&gt;attributes (2):&lt;/span&gt; &lt;span style="color:#82AAFF"&gt;name&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; sleigh&lt;/span&gt;
         &lt;span&gt;public methods (4):&lt;/span&gt;
             &lt;span style="color:#82AAFF"&gt;dash_away&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; DESTROY&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; meta&lt;/span&gt;,&lt;span style="color:#82AAFF"&gt; new&lt;/span&gt;
         &lt;span&gt;private methods (1):&lt;/span&gt; &lt;span style="color:#82AAFF"&gt;_build_name&lt;/span&gt;
         &lt;span&gt;internals: &lt;/span&gt;&lt;span style="color:#66D9EF"&gt;{&lt;/span&gt;
             &lt;span style="color:#82AAFF"&gt;sleigh&lt;/span&gt;    &lt;span style="color:#C792EA"&gt;Sleigh&lt;/span&gt; &lt;span style="color:#90B55A"&gt;(weak)&lt;/span&gt;
         &lt;span style="color:#66D9EF"&gt;}&lt;/span&gt;
     &lt;span style="color:#66D9EF"&gt;}&lt;/span&gt;
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The sleigh references were weak and no refcount was showing. &lt;i&gt;&amp;quot;Yes!&amp;quot;&lt;/i&gt; the elf fell back into her chair and breathed a sigh of relief. &lt;i&gt;&amp;quot;Do we remove the &lt;code&gt;p()&lt;/code&gt; statements now that everything is fine?&amp;quot;&lt;/i&gt; asked Santa. &lt;i&gt;&amp;quot;We can, sure - but if you think they&amp;#39;re in good debugging spots you can just add &lt;code&gt;quiet = 1&lt;/code&gt; to each section of the .dataprinter file and any calls to &lt;code&gt;p()&lt;/code&gt; will quickly return not printing anything. We can even add a &lt;code&gt;live_update = 1&lt;/code&gt; and Data::Printer will automatically watch the .dataprinter file and reload it whenever we change it without needing to restart the program.&amp;quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The old man thanked his friend as she rose up to leave. Binky was almost at the door when she turned and realized Santa was still at the computer. &lt;i&gt;&amp;quot;You&amp;#39;re gonna play with the output colors and &lt;a href="https://metacpan.org/module/Data::Printer::Theme"&gt;make a new theme for Data::Printer&lt;/a&gt; now, aren&amp;#39;t you?&amp;quot;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Santa grinned. This was going to be a Merry Christmas after all.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-22T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Breno G. de Oliveira</name>
    </author>
  </entry>
  <entry>
    <title>Lapland Packaging Department - Part 2</title>
    <link href="http://perladvent.org/2022/2022-12-21.html"/>
    <id>http://perladvent.org/2022/2022-12-21.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;After getting to work on his second day, Tonttu quickly downloaded the &lt;a href="https://metacpan.org/module/Carton"&gt;Carton&lt;/a&gt; module&amp;#39;s tarball. This was the chosen module to make the installation and packaging of other modules and projects easier.&lt;/p&gt;

&lt;p&gt;Carton is capable of dependency handling, can download the source tarballs for modules and last but not least, can create a portable package for any project. This package can be copied to any machine and &lt;a href="https://metacpan.org/module/Carton"&gt;Carton&lt;/a&gt; will install all modules automatically, without the need for an internet connection. The nisse started to do some testing and cooked up the following proof of concept for Santa for the first part:&lt;/p&gt;

&lt;p&gt;Tonttu made sure first, that Carton is installed on all servers in the warehouse. He used the manual compilation method he had jotted down the day before.&lt;/p&gt;

&lt;p&gt;After that he wrote the following guide for his busy elf colleagues:&lt;/p&gt;

&lt;h3 id="Task-1.---Preparing-the-distribution"&gt;Task 1. - Preparing the distribution&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;cpanfile&lt;/code&gt; for your project, listing all the used modules (of course only the ones not part of the Perl core, but installed extra). List the minimum required Perl version for your project (if any) in the first line.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;# cpanfile&lt;br /&gt;requires &amp;#39;perl&amp;#39;, &amp;#39;5.20.0&amp;#39;;&lt;br /&gt;requires &amp;#39;Getopt::Long&amp;#39;;&lt;br /&gt;requires &amp;#39;Data::Dumper&amp;#39;;&lt;br /&gt;requires &amp;#39;Log::Log4perl&amp;#39;;&lt;br /&gt;requires &amp;#39;MIME::Lite&amp;#39;;&lt;br /&gt;requires &amp;#39;MIME::Types&amp;#39;;&lt;br /&gt;requires &amp;#39;Mail::Address&amp;#39;;&lt;br /&gt;requires &amp;#39;Net::SCP&amp;#39;;&lt;br /&gt;requires &amp;#39;JSON&amp;#39;;&lt;br /&gt;requires &amp;#39;DBI&amp;#39;;&lt;br /&gt;requires &amp;#39;Excel::Writer::XLSX&amp;#39;;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;As you can see, only a handful of modules are in there, &lt;a href="https://metacpan.org/module/Carton"&gt;Carton&lt;/a&gt; will automatically take care of the dependencies.&lt;/p&gt;

&lt;p&gt;Next step is to &lt;code&gt;carton install&lt;/code&gt; the modules inside the &lt;code&gt;local/&lt;/code&gt; directory.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ carton install&lt;br /&gt;Installing modules using /home/cabox/workspace/projects/test_carton/cpanfile&lt;br /&gt;Successfully installed Archive-Zip-1.68&lt;br /&gt;Successfully installed Excel-Writer-XLSX-1.09&lt;br /&gt;Successfully installed Net-SSH-0.09&lt;br /&gt;Successfully installed String-ShellQuote-1.04&lt;br /&gt;Successfully installed Net-SCP-0.08&lt;br /&gt;5 distributions installed&lt;br /&gt;Complete! Modules were installed into /home/cabox/workspace/projects/test_carton/local&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Notice that after this step a file named &lt;code&gt;cpanfile.snapshot&lt;/code&gt; has been generated, with all the modules and depencencies managed by Carton. As You can see from the below example there are way more modules in this file than in our list in the &lt;code&gt;cpanfile&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;br /&gt;42:&amp;nbsp;&lt;br /&gt;43:&amp;nbsp;&lt;br /&gt;44:&amp;nbsp;&lt;br /&gt;45:&amp;nbsp;&lt;br /&gt;46:&amp;nbsp;&lt;br /&gt;47:&amp;nbsp;&lt;br /&gt;48:&amp;nbsp;&lt;br /&gt;49:&amp;nbsp;&lt;br /&gt;50:&amp;nbsp;&lt;br /&gt;51:&amp;nbsp;&lt;br /&gt;52:&amp;nbsp;&lt;br /&gt;53:&amp;nbsp;&lt;br /&gt;54:&amp;nbsp;&lt;br /&gt;55:&amp;nbsp;&lt;br /&gt;56:&amp;nbsp;&lt;br /&gt;57:&amp;nbsp;&lt;br /&gt;58:&amp;nbsp;&lt;br /&gt;59:&amp;nbsp;&lt;br /&gt;60:&amp;nbsp;&lt;br /&gt;61:&amp;nbsp;&lt;br /&gt;62:&amp;nbsp;&lt;br /&gt;63:&amp;nbsp;&lt;br /&gt;64:&amp;nbsp;&lt;br /&gt;65:&amp;nbsp;&lt;br /&gt;66:&amp;nbsp;&lt;br /&gt;67:&amp;nbsp;&lt;br /&gt;68:&amp;nbsp;&lt;br /&gt;69:&amp;nbsp;&lt;br /&gt;70:&amp;nbsp;&lt;br /&gt;71:&amp;nbsp;&lt;br /&gt;72:&amp;nbsp;&lt;br /&gt;73:&amp;nbsp;&lt;br /&gt;74:&amp;nbsp;&lt;br /&gt;75:&amp;nbsp;&lt;br /&gt;76:&amp;nbsp;&lt;br /&gt;77:&amp;nbsp;&lt;br /&gt;78:&amp;nbsp;&lt;br /&gt;79:&amp;nbsp;&lt;br /&gt;80:&amp;nbsp;&lt;br /&gt;81:&amp;nbsp;&lt;br /&gt;82:&amp;nbsp;&lt;br /&gt;83:&amp;nbsp;&lt;br /&gt;84:&amp;nbsp;&lt;br /&gt;85:&amp;nbsp;&lt;br /&gt;86:&amp;nbsp;&lt;br /&gt;87:&amp;nbsp;&lt;br /&gt;88:&amp;nbsp;&lt;br /&gt;89:&amp;nbsp;&lt;br /&gt;90:&amp;nbsp;&lt;br /&gt;91:&amp;nbsp;&lt;br /&gt;92:&amp;nbsp;&lt;br /&gt;93:&amp;nbsp;&lt;br /&gt;94:&amp;nbsp;&lt;br /&gt;95:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ cat cpanfile.snapshot&lt;br /&gt;# carton snapshot format: version 1.0&lt;br /&gt;DISTRIBUTIONS&lt;br /&gt;&amp;nbsp;&amp;nbsp;Archive-Zip-1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pathname: P/PH/PHRED/Archive-Zip-1.68.tar.gz&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;provides:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::Archive 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::BufferedFileHandle 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::DirectoryMember 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::FileMember 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::Member 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::MemberRead 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::MockFileHandle 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::NewFileMember 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::StringMember 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::Tree 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip::ZipFileMember 1.68&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requirements:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Compress::Raw::Zlib 2.017&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Encode 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtUtils::MakeMaker 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Basename 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Copy 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Find 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Path 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Spec 0.80&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Temp 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IO::File 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IO::Handle 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IO::Seekable 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Time::Local 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;perl 5.006&lt;br /&gt;&amp;nbsp;&amp;nbsp;Excel-Writer-XLSX-1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pathname: J/JM/JMCNAMARA/Excel-Writer-XLSX-1.09.tar.gz&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;provides:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Area 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Bar 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Column 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Doughnut 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Line 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Pie 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Radar 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Scatter 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chart::Stock 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Chartsheet 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Drawing 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Examples 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Format 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::App 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Comments 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::ContentTypes 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Core 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Custom 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Metadata 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Packager 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Relationships 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::SharedStrings 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Styles 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Table 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::Theme 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::VML 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Package::XMLwriter 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Shape 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Utility 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Workbook 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Excel::Writer::XLSX::Worksheet 1.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requirements:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Archive::Zip 1.3&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtUtils::MakeMaker 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;File::Temp 0.19&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IO::File 1.14&lt;br /&gt;&amp;nbsp;&amp;nbsp;Net-SCP-0.08.reprise&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pathname: I/IV/IVAN/Net-SCP-0.08.reprise.tar.gz&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;provides:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Net::SCP 0.08&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requirements:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtUtils::MakeMaker 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IO::Handle 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Net::SSH 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String::ShellQuote 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;Net-SSH-0.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pathname: I/IV/IVAN/Net-SSH-0.09.tar.gz&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;provides:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Net::SSH 0.09&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requirements:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtUtils::MakeMaker 0&lt;br /&gt;&amp;nbsp;&amp;nbsp;String-ShellQuote-1.04&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pathname: R/RO/ROSCH/String-ShellQuote-1.04.tar.gz&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;provides:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String::ShellQuote 1.04&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;requirements:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExtUtils::MakeMaker 0&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Don&amp;#39;t forget to exclude the &lt;code&gt;local/&lt;/code&gt; directory and add the files &lt;code&gt;cpanfile&lt;/code&gt; and &lt;code&gt;cpanfile.snapshot&lt;/code&gt; to your version control system!&lt;/p&gt;

&lt;p&gt;At this point we have a package, which is not really portable. To make it portable, run&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ carton bundle&lt;br /&gt;Bundling modules using /home/cabox/workspace/projects/test_carton/cpanfile&lt;br /&gt;Copying P/PH/PHRED/Archive-Zip-1.68.tar.gz&lt;br /&gt;Copying J/JM/JMCNAMARA/Excel-Writer-XLSX-1.09.tar.gz&lt;br /&gt;Copying I/IV/IVAN/Net-SCP-0.08.reprise.tar.gz&lt;br /&gt;Copying I/IV/IVAN/Net-SSH-0.09.tar.gz&lt;br /&gt;Copying R/RO/ROSCH/String-ShellQuote-1.04.tar.gz&lt;br /&gt;Writing /home/cabox/workspace/projects/test_carton/vendor/cache/modules/02packages.details.txt.gz&lt;br /&gt;Complete! Modules were bundled into /home/cabox/workspace/projects/test_carton/vendor/cache&lt;br /&gt;It will bundle your tar archives into the vendor/ directory.&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Add &lt;code&gt;vendor&lt;/code&gt; to your VCS or don&amp;#39;t, it&amp;#39;s up to you.&lt;/p&gt;

&lt;p&gt;Now we are ready to deploy the package to a different machine.&lt;/p&gt;

&lt;h3 id="Task-2:-Deploying-your-Package-to-the-Remote-Machines"&gt;Task 2: Deploying your Package to the Remote Machines&lt;/h3&gt;

&lt;p&gt;Copy the whole directory to the desired directory on the target systems.&lt;/p&gt;

&lt;p&gt;This is the directory structure you should see (without your own stuff):&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;.&lt;br /&gt;|-- cpanfile&lt;br /&gt;|-- cpanfile.snapshot&lt;br /&gt;|-- ...  #Your stuff here&lt;br /&gt;|-- ...	 #Your stuff here&lt;br /&gt;`-- vendor&lt;br /&gt;&amp;nbsp;`-- cache&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|-- authors&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;`-- modules&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Now it&amp;#39;s time to install the modules using Carton (which has been previously installed by Tonttu):&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;$ carton install --deployment cached&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This will use the module tarballs from the &lt;code&gt;vendor/&lt;/code&gt; directory and create &lt;code&gt;local/&lt;/code&gt; with the installed modules.&lt;/p&gt;

&lt;p&gt;If therea are no errors, you may remove the &lt;code&gt;vendor/&lt;/code&gt; directory (optional).&lt;/p&gt;

&lt;p&gt;Santa reviewed the proof of concept and was proud of Tonttu for doing such a great job.&lt;/p&gt;

&lt;p&gt;After sharing the how-to, all the elves started to use the &lt;a href="https://metacpan.org/module/Carton"&gt;Carton&lt;/a&gt; packaging module and their job got a lot easier.&lt;/p&gt;

&lt;p&gt;Santa was cheerful and satisfied, as the whole Packaging Department could fulfill more children&amp;#39;s wishes much much faster than before.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-21T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Csaba Simándi</name>
    </author>
  </entry>
  <entry>
    <title>Writing a CPAN module that talks to ChatGPT</title>
    <link rel="alternate" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://chat.openai.com/chat">ChatGPT</a> exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)…</p>
<hr/>
<p><em>Write a Perl CPAN module for connecting to a ChatGPT server</em></p>
<p>To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies installed on your system.</p>
<p>To begin, create a new directory for your module and create a file called “ChatGPT.pm” with the following content:</p><pre class="urvanov-syntax-highlighter-plain-tag">package ChatGPT;

use strict;
use warnings;

use Net::WebSocket::Client;
use Net::WebSocket::Server;
use HTTP::Async;

sub new {
  my ($class, %params) = @_;
  my $self = {
    host =&gt; $params{host},
    port =&gt; $params{port},
  };

  bless $self, $class;

  return $self;
}

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect;
  $client-&gt;send_utf8($prompt);

  my $response = $client-&gt;recv;

  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>To use this module in your Perl code, you can create a new ChatGPT object and call the <code>send_prompt</code> method like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use ChatGPT;

my $chatgpt = ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);
my $response = $chatgpt-&gt;send_prompt('What is your name?');
print "Response: $response\n";</pre><p>This will send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080, and print the response to the console.</p>
<p>Note: This is just a basic example of how you can create a Perl CPAN module for connecting to a ChatGPT server. There are many other features and considerations that you may want to add to your module, such as error handling and customization options.</p>
<p>To make your module available on CPAN, you will need to follow the guidelines for creating and distributing CPAN modules, which can be found in the Perl documentation and online resources.</p>
<p><em>Use Moose to create the class</em></p>
<p>To use Moose to create the <code>ChatGPT</code> class, you will need to have Moose installed on your system. You can install Moose by running the following command:</p><pre class="urvanov-syntax-highlighter-plain-tag">cpanm Moose</pre><p>With Moose installed, you can modify the class like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">package ChatGPT;

use Moose;
use Net::WebSocket::Client;
use Net::WebSocket::Server;
use HTTP::Async;

has host =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Str',
  required =&gt; 1,
);

has port =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Int', required =&gt; 1,
);

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect; $client-&gt;send_utf8($prompt);
  my $response = $client-&gt;recv;
  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>In this version of the class, the <code>host</code> and <code>port</code> attributes are defined using Moose’s <code>has</code> keyword. These attributes are required and must be specified when creating a new <code>ChatGPT</code> object. The <code>send_prompt</code> method is unchanged from the previous example.</p>
<p>To create a new <code>ChatGPT</code> object, you can use the <code>new</code> method provided by Moose like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use ChatGPT;

my $chatgpt = ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);

my $response = $chatgpt-&gt;send_prompt('What is your name?');

print "Response: $response\n";</pre><p>This will create a new <code>ChatGPT</code> object with the specified <code>host</code> and <code>port</code> attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.</p>
<p>Note: This is just one way to use Moose to create the <code>ChatGPT</code> class. There are many other features and customization options available in Moose that you may want to consider adding to your class, such as type constraints, default values, and methods.</p>
<p><em>Call the class WebService::ChatGPT</em></p>
<p>To rename the <code>ChatGPT</code> class to <code>WebService::ChatGPT</code>, you will need to update the package name at the top of the file and update the <code>use</code> statements to refer to the new package name.</p>
<p>Here is how you can update the <code>ChatGPT</code> class to use the new package name:</p><pre class="urvanov-syntax-highlighter-plain-tag">package WebService::ChatGPT;

use Moose;
use Net::WebSocket::Client;
use Net::WebSocket::Server;

use HTTP::Async;

has host =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Str',
  required =&gt; 1,
);

has port =&gt; (
  is =&gt; 'ro',
  isa =&gt; 'Int',
  required =&gt; 1,
);

sub send_prompt {
  my ($self, $prompt) = @_;

  my $http = HTTP::Async-&gt;new;
  my $client = Net::WebSocket::Client-&gt;new(
    url =&gt; "ws://$self-&gt;{host}:$self-&gt;{port}"
  );

  $client-&gt;connect; $client-&gt;send_utf8($prompt);
  my $response = $client-&gt;recv;
  $client-&gt;disconnect;

  return $response;
}

1;</pre><p>With these changes, the class is now called <code>WebService::ChatGPT</code> and can be used like this:</p><pre class="urvanov-syntax-highlighter-plain-tag">use WebService::ChatGPT;

my $chatgpt = WebService::ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);

my $response = $chatgpt-&gt;send_prompt('What is your name?');
print "Response: $response\n";</pre><p>This will create a new <code>WebService::ChatGPT</code> object with the specified <code>host</code> and <code>port</code> attributes, and send the text prompt “What is your name?” to the ChatGPT server running on localhost at port 8080. The response will be printed to the console.,/p&gt;</p>
<p>Note: This is just one way to rename the <code>ChatGPT</code> class to <code>WebService::ChatGPT</code>. You may also need to update any other references to the class name in your code and documentation, as well as update the module file name and directory structure to reflect the new package name.</p>
<p><em>Suggest some tests using the standard Perl testing framework</em></p>
<p>Here are some examples of tests that you could write for the <code>WebService::ChatGPT</code> module using the standard Perl testing framework (Test::More):</p><pre class="urvanov-syntax-highlighter-plain-tag">use Test::More;
use WebService::ChatGPT;

# Test creating a new ChatGPT object
my $chatgpt = WebService::ChatGPT-&gt;new(host =&gt; 'localhost', port =&gt; 8080);
isa_ok($chatgpt, 'WebService::ChatGPT', 'Object is a ChatGPT');

# Test sending a prompt and receiving a response
my $response = $chatgpt-&gt;send_prompt('What is your name?');
is($response, 'My name is ChatGPT.', 'Response is correct');

# Test sending an invalid prompt
eval { $chatgpt-&gt;send_prompt('') };
like($@, qr/Invalid prompt/, 'Invalid prompt error is thrown');

done_testing();</pre><p>The first test uses the <code>isa_ok</code> function to check that the object created by the <code>new</code> method is an instance of the <code>WebService::ChatGPT</code> class.</p>
<p>The second test uses the <code>is</code> function to compare the expected response to the actual response returned by the <code>send_prompt</code> method.</p>
<p>The third test uses the <code>eval</code> function to catch any exceptions thrown by the <code>send_prompt</code> method when an invalid prompt is provided, and the <code>like</code> function to check that the exception message matches the expected error message.</p>
<p>These tests can be run using the <code>prove</code> command:</p><pre class="urvanov-syntax-highlighter-plain-tag">prove -l t/chatgpt.t</pre><p/>
<hr/>
<p>I haven’t uploaded it to CPAN yet. Do you think I should?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Writing a CPAN module that talks to ChatGPT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>ChatGPT exposes an API, but there’s no CPAN module for taking advantage of that. Let’s put that right (with help from ChatGPT)… Write a Perl CPAN module for connecting to a ChatGPT server To create a Perl CPAN module for connecting to a ChatGPT server, you will need to have Perl and the necessary dependencies… <a class="more-link" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Continue reading <span class="screen-reader-text">Writing a CPAN module that talks to ChatGPT</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/12/writing-a-cpan-module-that-talks-to-chatgpt/">Writing a CPAN module that talks to ChatGPT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2093</id>
    <published>2022-12-20T16:12:38Z</published>
    <updated>2022-12-20T16:12:38Z</updated>
    <category term="Programming"/>
    <category term="ai"/>
    <category term="chatgpt"/>
    <category term="cpan"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Perl fediverse network</title>
    <link rel="alternate" href="https://blogs.perl.org/users/ryan_voots/2022/12/perl-fediverse-network.html"/>
    <id>tag:blogs.perl.org,2022:/users/ryan_voots//2972.10972</id>
    <published>2022-12-19T02:05:35Z</published>
    <updated>2022-12-20T07:17:39Z</updated>
    <author>
        <name>Ryan Voots</name>
        <uri>https://www.simcop2387.info</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/ryan_voots/">
        <![CDATA[<p>ED: This is also posted on reddit, <a href="https://www.reddit.com/r/perl/comments/zp8d5g/perl_fediverseactivitypub_social_network/">https://www.reddit.com/r/perl/comments/zp8d5g/perl_fediverseactivitypub_social_network/</a> so please check there also</p>

<p>A while back I bought the https://perl.social/ domain without much immediate use for it.  I originally had it redirecting to the perl twitter community.  However with the recent twitter drama going around I started setting up an activitypub based network to take the place of the twitter community in the advent that there was an exodus of Perl programmers from twitter.  That seems to have been happening so I finally kicked into gear to get it ready for use.</p>

<p><a href="https://perl.social/">https://perl.social/</a> should show you the public face of the community, (if it doesn't let me know).  In the upper right you'll find the login button, and can register a new user.  Once registered, like all fediverse things you'll be able to be followed by people as such <code>@username@perl.social</code> and can follow other users on other servers by putting them in the search box at the top and then following them.</p>

<p>I've set it up using Friendica as the backend of the social network, as it offered some features that I felt were important.</p>

<ol>
<li>Moderate resource usage, mastodon tends to be rather heavy to run.</li>
<li>Child/group managed accounts, so say the Perl Steering Committee can have an account that is managed by the people in it rather than there being a fully separate account with it's own password</li>
<li>SAML support, hear me out on this down below</li>
<li>Some other addons that look like they'll be interesting going forward like the twitter plugin to let users post to perl.social and mirror the posts to their old twitter accounts.</li>
<li>Mastodon API support, this should let mastodon clients and some other fediverse clients work with the site too, enabling more things to be done.  We should really develop a Perl client for all this too.</li>
</ol>

<p>On the SAML front, this ended up being a desire when setting up the site because none of the current fediverse systems really seem to provide first class support for MFA and a lot of user management tools that I believed I would need once things were up and running.  I setup Keycloak to be the identity provider for this all since it'll handle all the passwords reasonably securely, can allow for things like github login or other OIDC providers, etc.  This should make running the site a lot less burdensome going forward since users should be able to add WebAuthn, FIDO, TOTP and a few other things to keep their account secure.</p>

<p>It should also let me create a small slightly privileged group that can help do account recovery and other tasks without giving them easy access to reading people's DMs or other private things.</p>

<p>Things left to do:</p>

<p>Create a proper Terms of Service and Code of Conduct.  Long term these will be fairly critical to keeping the site safe to use and helping enforce any community rules that get made.  I'm looking for any kind of advice on how this should be done as it shouldn't just be me making these kinds of decisions.  Right now you can assume that at least the following vague rules exist: "Don't be a jerk in a way that gets me yelled at, Don't do anything illegal, Be excellent to each other" until anything more formal is created.  Once it is, we'll be able to make it show up on everyone's next login so that they can read it and agree or read it and come complain to me.</p>

<p>I've reserved a number of names that have both been requested and ones that I believe would be contentious to have someone registered (perl, psc, p5p, etc.) and if those groups or people are ready to take them over then just message me and we'll get it worked out.</p>

<p>When registering, the email is almost certainly going to go to your spam folder right now.  The fact that we're on a non-standard TLD, and the email is being sent by a VPS, means that the server reputation just doesn't exist and isn't trusted yet.  It should eventually get better once more people mark it all as not spam but I'll also eventually also look into getting it sent by a real provider that won't have those issues, but I'm not going to pay for that until it actually makes sense to do so.</p>

<p>Please check it all out and let me know about any issues you run into, or let me know if you want to help.  I've started getting the infrastructure setup so that I can start letting people help but it wasn't the first priority to getting it all setup.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Good bye PrePAN</title>
    <link rel="alternate" href="https://blogs.perl.org/users/aristotle/2022/12/goodbye-prepan.html"/>
    <id>tag:blogs.perl.org,2022:/users/aristotle//15.10966</id>
    <published>2022-12-05T21:19:09Z</published>
    <updated>2022-12-20T02:36:24Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Reaction" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/aristotle/">
        <![CDATA[<p>The domain was snapped up by a squatter sometime between July and August. 🙁 What a pity, I always enjoyed those conversations.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>TWC 195: Special Speedy Frequency</title>
    <link rel="alternate" href="https://blogs.perl.org/users/bruce_gray/2022/12/twc-195-special-speedy-frequency.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10973</id>
    <published>2022-12-19T03:21:50Z</published>
    <updated>2022-12-19T10:36:45Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which count only what we must.</p>

<p>In Raku, Perl, and C {via Perl's Inline::C} .</p>
]]>
        <![CDATA[<p>(Still editing!)</p>

<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-195/#TASK1">Special Integers</a></h1>

<h2>Task:</h2>

<p>Count the integers that have no repeating digits, between 1 and <code>$n</code>.</p>

<h2>Observations:</h2>

<ul>
<li><p>This is the more time-consuming of the two tasks, in both CPU and programmer time.</p></li>
<li><p>Since the largest number with all-unique digits is 9<em>876</em>543_210, any requested <code>$n</code> higher than that will have the same answer.</p></li>
<li><p>Scanning every integer in the range will scale linearly, and since the largest input in in the 9 billions, we should look for a faster algorithm. The problem relates to combinations of individual digits, irrespective of their order, so something from combinatorics might be fruitful.</p></li>
</ul>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-195/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<p>Using simple one-at-a-time iteration:</p>

<pre><code>use v5.36;
use List::Util qw&lt;uniq&gt;;
sub task1 ( $n ) {
    return 0 + grep { length == uniq split '' } 1..$n;
}
</code></pre>

<p>I also could have said:</p>

<pre><code>return 0 + grep !/(.).*\1/, 1..$n;
</code></pre>

<p>, which would have been faster, but less clear.</p>

<p>Also, for large <code>$n</code>, I observe that about 25% of the total time for <code>perl</code> to return control to my terminal happens <em>after</em> <code>perl</code> outputs the answer. I expect this is due to Perl not optimizing the scalar <code>grep</code> into a "count-only" version of itself, and so a huge list really is allocated and built by <code>grep</code>, which must be <code>DESTROY</code>ed at <code>END</code> time. Recoding as something like <code>/(.).*\1/ or $c++ for 1..$n</code> recovered all that cleanup time.</p>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-195/bruce-gray/perl/ch-1_inline.pl">C</a></h2>

<p>This code takes 2m42s to calculate <code>task1(9_876_543_210)==8_877_690</code> using one-at-a-time iteration. That is nearly 3 minutes, at full <code>C</code> speed; no bouncing between Perl and C is done except at start and end of a calculation.</p>

<pre><code>use v5.36;
use Inline 'C';
# ... Testing code omitted here
__END__
__C__
int is_special(long x) {
    int ds[10];
    memset(ds, 0, 10*sizeof(int));
    while (x) {
        if (ds[x % 10]++)
            return 0;
        x /= 10;
    }
    return 1;
}
int count_special(long in) {
    long x = in &gt; 9876543210 ? 9876543210 : in;
    int  r = 0;
    for ( ; x ; x-- ) {
        if ( is_special(x) )
            r++;
    }
    return r;
}
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-195/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<p>I have two versions that use combinatorics to solve the task. The first rips into the problem in two phases</p>

<p>(Ack! Must finish this explanation soon, but cannot right now.)</p>

<pre><code># https://oeis.org/A073531  Number of n-digit positive integers with all digits distinct.
constant @n-digits-distinct     = 0, 9, |( 9 X* [\*] (9...1) );
constant @n-digits-distinct-sum = [\+] @n-digits-distinct;

sub task1 ( UInt $n --&gt; UInt ) {
    constant MAX = 9_876_543_210;
    return &amp;?ROUTINE(MAX) if $n &gt; MAX;

    # Knuth's "falling powers"; kfp(9,3) == 9*8*7
    sub kfp ($n, $k) { [*] ( ($n-$k) ^.. $n ) }

    my $nc = $n.chars;
    my @totals;

    push @totals, @n-digits-distinct-sum[$nc - 1];

    my SetHash $used;
    for $n.comb».Numeric.kv -&gt; UInt $k, UInt $digit {

        my UInt $combinations_in_rightward_places
            = kfp(9 - $k, $nc - $k - 1);

        my Range $space_below_digit = (     0 + (1 if $k == 0   ))
                                   .. ($digit - (1 if $k &lt; $nc-1));

        my Set $using_for_this_digit = $space_below_digit (-) $used;

        push @totals, $using_for_this_digit.elems
                    * $combinations_in_rightward_places;

        $used{$digit}++;
    }

    return @totals.sum;
}
</code></pre>

<p>This version is simpler to understand, but does not perform as well.
It does the initial optimization to skip over about .log10 places,
then generates all the combinations with the correct leading digit,
filtering on which ones are less than $n.</p>

<pre><code>sub task1_one_big_skip ( UInt $n --&gt; UInt ) {
    constant MAX = 9_876_543_210;
    return &amp;?ROUTINE(MAX) if $n &gt; MAX;

    my @totals;
    my $lead  = $n.substr(0, 1);
    my $core  = $n.chars - 1;

    push @totals, @n-digits-distinct-sum[$core];

    push @totals, +combinations(9,$core) * ([*] 1..$core)
                                         * ($lead - 1);

    my $L3 = 0;
    for (0..9).grep(* != $lead).combinations($core) -&gt; @comb {
        $L3 += +@comb.permutations.grep: { ($lead ~ .join) &lt;= $n };
    }
    push @totals, $L3;

    return @totals.sum;
}
</code></pre>

<hr />

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-195/#TASK2">Most Frequent Even</a></h1>

<h2>Task:</h2>

<p>Given a <code>@list</code> of integers, find the most frequent even numbers in the list,
with smallest of those most frequent as a tie-breaker.
return <code>-1</code> if no even numbers are in the list.</p>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-195/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<pre><code>@ns.grep( * %% 2 ).Bag.max({ .value, -.key }).?key // -1 ;
</code></pre>

<p>Yes, the solution can be expressed in a single, um, <em>expression</em>.</p>

<p>The <code>Bag</code> counts the even numbers, giving a hash of key=original<em>number => value=count</em>of<em>times</em>seen.</p>

<p>The <code>.max</code> method will receive <code>Pair</code> objects from the <code>Bag</code>, and find the maximum of each <code>Pair</code>'s <code>.value</code> (the count), with <em>negative</em> (because we want the <em>lowest</em> in a <code>.max</code>) <code>.key</code> (original number) as tie-breaker.</p>

<p>Now we just need to return the <code>.key</code> of the <code>Pair</code> that <code>.max</code> found, or <code>-1</code> if <code>grep</code> found no even numbers. But wait! <code>.max</code> returns <code>-Inf</code> when given a empty list; we cannot call <code>.key</code> on <code>-Inf</code>.</p>

<p>The <code>.?</code> methodop is the "Safe call operator". It works as <code>.</code>, but if the left-hand side lacks the requested method, it returns <code>Nil</code>, which is just what we need for <code>//</code> to trigger the <code>-1</code> return.</p>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-195/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<pre><code>use v5.36;
use List::Util    qw&lt;min&gt;;
use List::UtilsBy qw&lt;max_by&gt;;

sub task2 (@ns) {
    my %bag;
    $bag{$_}++ for grep { $_ % 2 == 0 } @ns;
    return -1 if not %bag;

    return min max_by { $bag{$_} } keys %bag;
}
</code></pre>

<p>Compared to the Raku code, having <code>%bag</code> as a separate variable does prevent a single-expression solution, but we gain clarity; returning <code>-1</code> happens much sooner in the dataflow, and in a place that is simpler to read.</p>

<p>Also, because we can refer to the count via (less efficient) hash-lookup, and because Perl's <code>max_by</code> <em>does</em> return all the participants in a tie, we can feed in only the keys, so <code>min</code> is operating only on the keys.</p>

<hr />

<blockquote>
  <p>With great pleasure, we announce Bruce Gray <br />
as the next Champion of The Weekly Challenge. <br />
-- <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-194/#HEADLINES">TWC 194</a> Mohammad S Anwar</p>

<p>The thing about me that's so impressive <br />
is how infrequently I mention all of my successes <br />
-- <a href="https://www.youtube.com/watch?v=XzbAEHdy8oU">Video</a> "I'm So Humble" {The <em>only</em> song by The Lonely Island that is Safe For Work}.</p>
</blockquote>
]]>
    </content>
</entry>
  <entry>
    <title>#595 - Happy Hanukkah - Merry Christmas</title>
    <link rel="alternate" href="https://perlweekly.com/archive/595.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Yesterday was the 35th birthday of Perl. Congratulation to Larry Wall!</p>
<p>Today is the 1st day of <a href="https://en.wikipedia.org/wiki/Hanukkah">Hanukkah</a>, commemorating the Maccabean revolt agains the Seleucid (Greek) Empire when the Jews recovered Jerusalem roughly 2200 years ago. When I go for my daily stroll, I often pass by some archeological digging from that era. We lit the first candle yesterday night.</p>
<p>In a few days the Christian world will celebrate Christmas, the birth of Yeshua (commonly known as Jesus) roughtly 164 years later. Both events are celebrated by lights and way too much food.</p>
<p>Two weeks ago I wrote extensively about <a href="https://dev.to/">DEV</a> inviting you to post there and even if you don't feel like writing, at least to support the few of us who post about Perl. A few people followed my call. It is still mostly only Yuki Kimoto posting there, but there were a few posts by others, there were some comments and a few "likes". As for me, I publish about a lot of things, not only Perl and I put most of them in series. I have a steady number or readers and the number of followers is also growing nicely. There are more than 400 already. If you too are interested about the subjects I write about <a href="https://dev.to/szabgab/">follow me on DEV</a>.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/595.html</id>
    <published>2022-12-19T10:00:00Z</published>
    <updated>2022-12-19T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8864789888750170014</id>
    <published>2022-12-18T14:40:00.001+01:00</published>
    <updated>2022-12-18T14:40:36.325+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxiii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.060003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060003&lt;/strong&gt; on 2022-12-14&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.060000 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.57' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.57&lt;/strong&gt; on 2022-12-14&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.56 was 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/File-Slurper-0.014' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Slurper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple, sane and efficient module to slurp a file &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.014&lt;/strong&gt; on 2022-12-16&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.013 was 11 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.078' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.078&lt;/strong&gt; on 2022-12-11&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 2.077 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/List-SomeUtils-0.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;List::SomeUtils&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Provide the stuff missing in List::Util &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.59&lt;/strong&gt; on 2022-12-11&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.58 was 3 years, 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.713' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.713&lt;/strong&gt; on 2022-12-12&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 1.712 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/match-simple-0.011' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;match::simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simplified clone of smartmatch operator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.011&lt;/strong&gt; on 2022-12-13&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.010 was 5 years, 10 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.76' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.76&lt;/strong&gt; on 2022-12-16&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 0.74 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9667' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9667&lt;/strong&gt; on 2022-12-16&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9665 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000141' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000141&lt;/strong&gt; on 2022-12-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000138 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8864789888750170014/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxiii-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8864789888750170014"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8864789888750170014"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxiii-10-great-cpan-modules-released.html" title="(cdxxiii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6916332423210181674</id>
    <published>2022-12-18T14:38:00.002+01:00</published>
    <updated>2022-12-18T14:38:23.334+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxvi) metacpan weekly report - Catalyst::Runtime</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 48&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/18 13:37:52 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Prove::Plugin::PassEnv" target="_blank"&gt;App::Prove::Plugin::PassEnv&lt;/a&gt; - a prove plugin to pass environment variables&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bio::FastParsers" target="_blank"&gt;Bio::FastParsers&lt;/a&gt; - Classes for parsing bioinformatic programs output&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bundle::Camelcade" target="_blank"&gt;Bundle::Camelcade&lt;/a&gt; - Bundle of modules used by Perl5 plugin for IntelliJ IDEs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LibUI" target="_blank"&gt;LibUI&lt;/a&gt; - Simple, Portable, Native GUI Library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/oo_sub" target="_blank"&gt;oo_sub&lt;/a&gt; - Enable OOP for supported Perl functions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Numeric::Whatever" target="_blank"&gt;String::Numeric::Whatever&lt;/a&gt; - It's a test implement to ignore the difference between E&lt;lt gt=""&gt; and cmp &lt;/lt&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::ALRM" target="_blank"&gt;Try::ALRM&lt;/a&gt; - Provides try_once and retry semantics to CORE::alarm, similar to Try::Tiny.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=158)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AWS::Lambda" target="_blank"&gt;AWS::Lambda&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp::Assert" target="_blank"&gt;Carp::Assert&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+2=154)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Meta" target="_blank"&gt;CPAN::Meta&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Reporter" target="_blank"&gt;CPAN::Reporter&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Uploader" target="_blank"&gt;CPAN::Uploader&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dump" target="_blank"&gt;Data::Dump&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=143)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Xslate" target="_blank"&gt;Data::Xslate&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::ICal" target="_blank"&gt;Date::ICal&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+1=89)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=179)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::CBuilder" target="_blank"&gt;ExtUtils::CBuilder&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::Manifest" target="_blank"&gt;ExtUtils::Manifest&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FD" target="_blank"&gt;IO::FD&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::PP" target="_blank"&gt;JSON::PP&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=115)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LaTeXML" target="_blank"&gt;LaTeXML&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Make" target="_blank"&gt;Make&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Load" target="_blank"&gt;Module::Load&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=476)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=325)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=400)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl5i" target="_blank"&gt;perl5i&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Examples" target="_blank"&gt;Perl::Examples&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Random" target="_blank"&gt;String::Random&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Cmd" target="_blank"&gt;Sys::Cmd&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/System::Command" target="_blank"&gt;System::Command&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=180)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Value::Diff" target="_blank"&gt;Value::Diff&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6916332423210181674/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxvi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6916332423210181674"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6916332423210181674"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxvi-metacpan-weekly-report.html" title="(dxxxvi) metacpan weekly report - Catalyst::Runtime"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Especially Frequent Even</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/12/18#pwc195" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n &gt; 0. Write a script to print the count of all 
special integers between 1 and $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use boolean;  
sub is_special{
    my($x) = @_;
    my %h; 
    my @digits = split(//, $x);
    map{ $h{$_} = undef } @digits; 
    return keys %h == @digits; 
}

MAIN:{
    say q// . grep{ is_special($_) } 1 .. $ARGV[0];  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 15
14
$ perl perl/ch-1.pl 35
32
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The definition of a &lt;em&gt;special integer&lt;/em&gt; for this problem is an integer whose digits are 
unique. To determine this specialness we define &lt;code&gt;is_special()&lt;/code&gt; which splits any given
number into an array of digits. Each of the digits are added to a hash as the keys. If any
digits are not unique then they will not be duplicated as a hash key and the test will 
return false.&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;is_special()&lt;/code&gt; is set all we need to do is to map over the given range and count up 
the results! &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of numbers, @list. Write a script to find most frequent even numbers 
in the list. In case you get more than one even numbers then return the smallest even 
integer. For all other case, return -1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub most_frequent_even{
    my @list = @_;
    @list = grep { $_ % 2 == 0 } @list; 
    return -1 if @list == 0;  
    my %frequencies;
    map { $frequencies{$_}++ } @list;
    my @sorted = sort { $frequencies{$b} &lt;=&gt; $frequencies{$a} } @list; 
    return $sorted[0] if $frequencies{$sorted[0]} != $frequencies{$sorted[1]};   
    my @tied = grep { $frequencies{$_} == $frequencies{$sorted[0]} } @list;
    return (sort { $a &lt;=&gt; $b } @tied)[0];       
}

MAIN:{
    my @list;
    @list = (1, 1, 2, 6, 2); 
    say most_frequent_even(@list);    
    @list = (1, 3, 5, 7); 
    say most_frequent_even(@list);    
    @list = (6, 4, 4, 6, 1); 
    say most_frequent_even(@list);    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
-1
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;map and grep really do a lot to make this solution pretty succinct. First grep is used to
extract just the even numbers. Then map is used to count up the frequencies. In the case 
of ties grep is used to identify the numbers with a tied frequency. The tied numbers are 
then sorted with the lowest one being returned, as specified.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-195/"&gt;Challenge 195&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc195</id>
    <published>2022-12-18T00:53:00-05:00</published>
    <updated>2022-12-18T00:53:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>PerlayStation Games Console (Part 1)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/saif/2022/12/perlaystation-games-console.html"/>
    <id>tag:blogs.perl.org,2022:/users/saif//3152.9701</id>
    <published>2022-12-19T18:52:49Z</published>
    <updated>2022-12-18T04:41:24Z</updated>
    <author>
        <name>Saif</name>
        <uri>https://github.com/saiftynet</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/saif/">
        <![CDATA[<h2>Itchy fingers</h2>

<p>A few reddit posts ago I saw an interesting article about maze generation and game written in Perl.  Game development, I fully believe, is key to intellectual engagement, provides amusement to developers and non developers, and highlights the capabilities
of a programming language.  This led to an brief exploration of other Perl arcade/action games; Such games such as <a href="https://github.com/elmex/Construder">construdo</a> and  deliantra show how complex games can be created.  Frozen Bubble is another addictive  Perl classic.  As a non-developer, I find these games only demonstrate the chasm between my lack of coding agility and the cleverness of others. </p>

<h2>It's been done before</h2>

<p><a href="http://sdl.perl.org/">SDL</a> and <a href="http://graphcomp.com/pogl.cgi">OpenGL</a> seem like a way to go. A useful list of gaming libraries are provided by <a href="https://blends.debian.org/games/tasks/perl-dev">Debian Games Perl development packages</a>
and  <a href="http://www.deliantra.net/">deliantra</a> are examples of what can be achieved.
Some interesting frameworks <a href="https://metacpan.org/pod/Games::Quest3D">Quest3</a> are available although many with no recent updates e.g. <a href="https://metacpan.org/pod/release/WOLFMAN/Games-Framework-RCP-0.04_01/lib/Games/Framework/RCP.pm">this one</a>.</p>

<p>But old dogs like  me can't learn new tricks (or even old tricks for that matter), I figured the easy way to bridge this chasm between my capability / capacity to learn and that required to produce a respectable output requires a new framework.  I hear groans all around, but wait, don't touch that dial,...imagine a framework that is simple enough for the newcomer or old timer, complex enough for a  respectable game production, and accessible enough to be installed without needing a snowstorm of dependencies.  Big ask? To have arcade games with moving sprites,  collision detection, gravity, scrolling shooters, platformers, RPGs, and yes all these written in Pure Perl? Easily? Without being familiar with complex external libraries?  Well I tried...I tried using GUIDeFATE ( a GUI designer) drawing sprites in SVG...it is clearly possible...but certainly not accessible.  </p>

<p><img src="https://blogs.perl.org/users/saif/bounce.gif" alt="Animations" title="" /></p>

<p>Most people will have some difficulty installing GUIDeFATE (its current iteration on CPAN is near end-of-life, due shortly to be overhauled into version 0.15).  Furthermore,  I feel firstly that there are several components that I have yet to learn, including event handling, user interactions, etc. Secondly, for the code that is generated to useful and easily used in producing different games it needs to be consistent, and abstract out the complexities of the graphical and user interactions and thirdly that I will need a significant amount of third party help. </p>

<h2>Consolation games</h2>

<p>So, a radical step backwards, and look at game development as an abstractable process, with functions that can be extended to any interface/backend etc.  Let's make console games that look like arcade games...a Perl games console, with games running in a console (i.e. a terminal window).  Terminal games do exist, and some are even written in Perl, but the majority are made using "single use" code, i.e code that one cant borrow to develop one's own ideas easily.  </p>

<p><a href="https://github.com/saiftynet/Term-Graille">Term::Graille</a> is a step in that direction.   You will have encountered it in one of my previous <a href="https://blogs.perl.org/users/saif/2022/07/integrated-inconsistencies.html">blogs</a>. As a platform it includes pseudo-pixel graphics, with multiple graphical operations, and an Interaction module with <a href="https://github.com/saiftynet/Term-Graille/wiki">Menus, Dialog boxes, Selectors etc</a>. Later it will feature an Audio/Speech module, and Sprites.  As a system its goals will be to have <em>minimal dependencies</em>, and key will be <em>simplicity</em>.  Initial applications will be simpler tools that will enable game development that follows...text editors, sprite generators, graphics.  All of these delivered through familiar, intuitive interactions, but all on the terminal window.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>FOSDEM Call for Volunteers! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdemstand"/>
  <id>tag:news.perlfoundation.org,2022-12-16:/post/fosdemstand</id>
  <published>2022-12-16T13:28:59</published>
  <updated>2022-12-16T13:28:59</updated>
  <summary>
  <![CDATA[
     FOSDEM 2023 is in person on February 4th and 5th and TPRF is seeking volunteers to help run the The Perl/Raku Foundation stand. We are looking for people that can share information about Perl/Raku and hand out TPRF provided materials. We will be having a meeting on December 30th at 2pm UTC for interested volunteers! Join the Zoom Meeting with this link: https://us02web.zoom.us/j/86116979877?pwd=a3lWalNVelNTbWFqdUNSOHJ5V1FhQT09  Meeting ID: 861 1697 9877  
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/ed20b87e4006fc60edb450ad8dad59759453cb86/megaphone.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p><a href="https://fosdem.org/2023/">FOSDEM 2023</a> is in person on February 4th and 5th and TPRF is seeking volunteers to help run the The Perl/Raku Foundation stand. We are looking for people that can share information about Perl/Raku and hand out TPRF provided materials. We will be having a meeting on December 30th at 2pm UTC for interested volunteers!  Join the Zoom Meeting with this link:
https://us02web.zoom.us/j/86116979877?pwd=a3lWalNVelNTbWFqdUNSOHJ5V1FhQT09</p>

<p>Meeting ID: 861 1697 9877
 Passcode: 8675309</p>

<p>If you are interested in assisting and cannot make the meeting, please contact hello@perlfoundation.org with your availability, or for more information. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) November 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_november_2022"/>
  <id>tag:news.perlfoundation.org,2022-12-16:/post/maintaining_perl_tonyc_november_2022</id>
  <published>2022-12-16T12:32:35</published>
  <updated>2022-12-16T12:32:35</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/11/01 Tuesday  0.97 github notifications  2.70 #20457 review, testing, research, comments  0.38 #20446 look over latest push, discussion in private on irc  with dmq  4.05 2022/11/02 Wednesday  0.38 review list discussion  0.30 #20271 apply to blead, perldelta  0.47 #20469 review and approve  0.78 #20411 review CI results, minor clean up, make PR 20473,  comment  1.17 #19964 review 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:
```
[Hours]         [Activity]
2022/11/01      Tuesday
 0.97           github notifications
 2.70           #20457 review, testing, research, comments
 0.38           #20446 look over latest push, discussion in private on irc</p>

<h1>                with dmq</h1>

<p> 4.05</p>

<p>2022/11/02      Wednesday
 0.38           review list discussion
 0.30           #20271 apply to blead, perldelta
 0.47           #20469 review and approve
 0.78           #20411 review CI results, minor clean up, make PR 20473,
                comment
 1.17           #19964 review CI results, work on fixes
 0.55           #19964 more fixes, polish, push for CI
 0.70           #20426 testing</p>

<h1> 1.03           #20426 try to find cause</h1>

<p> 5.38</p>

<p>2022/11/03      Thursday
 0.22           #20473 apply to blead, perldelta
 0.58           #20451 review, testing, comments
 1.63           look at removing feature bundle optimization</p>

<h1> 2.25           more remove feature bundle optimization</h1>

<p> 4.68</p>

<p>2022/11/07      Monday
 0.32           #20451 review and approve
 0.92           #20490 work up a patch for Devel::NYTProf
 0.38           #20415 research and comment
 0.32           #20483 review and comment
 2.00           more feature bundle, set default bundle, work on hooking</p>

<h1>                on fetching in magic</h1>

<p> 3.94</p>

<p>2022/11/08      Tuesday
 0.32           github notifications
 0.17           #20483 review updated commit and approve
 0.30           #20474 apply to blead, perldelta updates
 0.67           feature bundle, look into magic handling
 1.65           more look into magic handling, start on an alternate</p>

<h1>                approach</h1>

<p> 3.11</p>

<p>2022/11/09      Wednesday
 0.27           github notifications
 1.23           yet another alternate approach (which should work, but is
                more expensive)
 2.90           more feature bundle, debugging, make a lot of tests fail</p>

<h1>                and consider approaches</h1>

<p> 4.40</p>

<p>2022/11/10      Thursday
 1.15           #20489 testing, review code and documentation, long
                comment
 1.10           #20476 research, work on code</p>

<h1> 2.08           #20476 more code, debugging, testing</h1>

<p> 4.33</p>

<p>2012/11/11      Sunday
 1.07           #20476 minor re-work, testing, push for CI, make PR 20500</p>

<h1> 0.48           look into porting/copyright.t failure on win32, PR #20501</h1>

<p> 1.55</p>

<p>2012/11/14      Wednesday
 0.90           #20496 review, comments
 0.33           #20505 review, briefly comment
 0.47           #20502 follow-up
 0.32           perlsecpolicy and ibb - make PR #20508
 0.03           #20504 start update 32-bit build environment
 0.38           #20502 configure.gnu and extra arguments, PR #20509
 0.60           #20504 work out fix, testing, push for CI
 0.42           #20467 review, research and comment
 0.22           #20415 review and apply to blead</p>

<h1> 0.72           #20503 review code, try to find bugs, testing, comment</h1>

<p> 4.39</p>

<p>2022/11/15      Tuesday
 1.12           add length tests for SvPV(byte|utf8)* macros
 0.25           update svpv_magic.t too, testing, push for CI
 0.52           github notifications</p>

<h1> 1.08           #20513 research, comment</h1>

<p> 2.97</p>

<p>2022/11/16      Wednesday
 0.13           #20496 review and approve
 1.90           #20513 testing, look at warnings, comment on #20410
 0.83           #20410 look at warning fixes</p>

<h1> 1.20           #20410 more work on warning fixes</h1>

<p> 4.06</p>

<p>2022/11/17      Thursday
 0.17           github notifications
 0.15           #20504 review CI results and make PR 20519
 0.15           SvPV variant length tests: review CI results, make PR
                20520
 2.10           #20410 resolve the HEK_KEY() always true warnings, look
                into the array bounds warnings (hello macro hell)
 1.47           #20410 fix the rest, open PR #20522
 2.00           #20506 debugging, comment, work on a fix, testing, push</p>

<h1>                for CI</h1>

<p> 6.04</p>

<p>2022/11/18      Friday</p>

<h1> 0.70           #20410 prevent warning in Devel::PPPort</h1>

<p> 0.70</p>

<p>2022/11/21      Monday
 3.73           #20528 testing, reproduce, debugging, diagnose, testing
 0.33           #20528 make PR #20531
 0.15           #20530 comment
 0.55           #20471 review, research, comment
 0.55           #20022 review, research</p>

<h1> 0.83           #20523 review, research, testing, comment</h1>

<p> 6.14</p>

<p>2022/11/22      Tuesday
 0.18           #20530 follow-up comment
 1.38           #20506 look at CI results, work on fixes, push for CI
 0.45           #20518 research, testing</p>

<h1> 2.02           #20518 research, work on a skip patch and testing</h1>

<p> 4.03</p>

<p>2022/11/23      Wednesday
 0.98           #20518 more testing, commit, push for CI, comment
 0.77           #20536 review and conditionally approve
 0.25           #20532 apply to blead, perldelta
 1.28           #20533 testing, debugging, work on a fix, testing
 1.68           #20533 more fixes, clean up some old code, update
                documentation, testing, push to update other symlink</p>

<h1>                branch</h1>

<p> 4.96</p>

<p>2022/11/24      Thursday
 0.62           github notifications
 1.05           look at builtin::ceil/floor overloading
 0.90           research and follow-up on lto thread</p>

<h1> 0.83           more overloading</h1>

<p> 3.40</p>

<p>2022/11/28      Monday
 0.55           github notifications
 0.43           #20518 make some comment changes suggested by jkeenan and
                open PR 20553
 0.28           #20539 re-word perlport changes
 1.18           #20503 performance testing
 0.23           #20542 review, comment
 0.67           #20512 review
 0.32           #20541 review and approve, research and comment</p>

<h1> 0.98           #20544 review, testing and comment</h1>

<p> 4.64</p>

<p>2022/11/29      Tuesday
 0.17           #20546 review and approve
 0.38           #20545 review and approve
 0.25           #20548 review and approve, notice CI failure, try to
                reproduce and comment
 0.30           #20555 review and approve
 0.23           #20540 review and comment
 0.73           #20395 research, work on a fix
 1.97           #20395 work on a simpler fix, testing, push for CI</p>

<h1> 0.78           more floor/ceil overloading</h1>

<p> 4.81</p>

<p>2022/11/30      Wednesday
 0.08           github notifications
 0.12           #20395 review CI results, make PR 20562
 0.47           #20558 review, research and comment
 0.30           #20561 review and approve
 1.57           more floor/ceil overloading - struggling with test
                failures, debugging</p>

<h1> 1.10           more floor/ceil overloading - debugging</h1>

<p> 3.64</p>

<p>Which I calculate is 81.22 hours.</p>

<p>Approximately 48 tickets were reviewed or worked on, and 5 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): November 2022 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_dave_mitchell_nov_2022"/>
  <id>tag:news.perlfoundation.org,2022-12-16:/post/maintaining_perl_dave_mitchell_nov_2022</id>
  <published>2022-12-16T12:28:00</published>
  <updated>2022-12-16T12:28:00</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during November covered by my TPF perl core maintenance grant. This month I restarted work in earnest on making the stack reference counted. I have reached the point where: Around 250 PP functions have been wrapped this means that the original functions will continue to work in the new regime, albeit more slowly. Each wrapped function can later be individually 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during November covered by my TPF
perl core maintenance grant.</p>

<p>This month I restarted work in earnest on making the stack reference
counted. I have reached the point where:</p>

<p>Around 250 PP functions have been wrapped - this means that the original
functions will continue to work in the new regime, albeit more slowly.
Each wrapped function can later be individually worked on to remove the
wrapper and regain performance.</p>

<p>The remaining 50 or so PP functions were either so trivial that they
didn't need wrapping, or (for most of them) so complex that they needed to
be hand-crafted to work on both a RC and non-RC stack environment. The
ones needing work included most of the pp_enterfoo() and pp_leavefoo()
functions, along with things like map, grep, sort, goto etc. Fixing these
complex functions is what has mostly been consuming my time.</p>

<p>At the moment these functions don't actually do reference counting: all
the new inline functions which push and pop items off the stack etc
currently skip the RC++ or RC-- bit. But I am nearly at the stage where I
will actually turn on ref-counting, at which point I will have the fun of
fixing all the things I blindly changed which it turns out were wrong.</p>

<p>The Programmer's Credo:</p>

<pre><code> We choose to do these things not because they are easy,
 but because we thought they would be easy.
</code></pre>

<p><code>
SUMMARY:
      0:36 diagnose smoke failures in dist/Tie-File/t/29a_upcopy.t
      1:00 fix stderr build noise
     33:53 make stack reference counted
     12:36 process p5p mailbox
      1:20 review OPpEMPTYAVHV_IS_HV
      0:10 review PR #20526
    ------
     49:35 TOTAL (HH::MM)
</code></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#594 - Advent Calendar</title>
    <link rel="alternate" href="https://perlweekly.com/archive/594.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The <strong>Advent Calendar</strong> celebration begins with the start of <strong>December</strong>. For all <strong>Perl</strong> fans, we have <a href="https://perladvent.org/2022">Perl Advent Calendar 2022</a>, thanks to the hard work of <strong>Olaf Alders</strong> and his team. I am sure you have checked out the amazing daily source of fun.</p>
<p>As of today, we have got through <strong>12 days</strong>.</p>
<p><strong>Do you have any favourite so far?</strong></p>
<p>Well I do have mine. To me the best part is the festive flavour in every article. I find it amusing and fun to read the story. I have contributed in the past but never got around to add the spice. I would blame the lack of background knowledge. This year's calendar started with <strong>Toby Inkster</strong> creation <a href="https://perladvent.org/2022/2022-12-01.html">Silent Mite</a>. What a cool way to start the calendar. If you look at closely all the contributions so far, you would notice a fresh air with lots of positive energy. One name stands out very prominently this year is <strong>Thibault DUPONCHELLE</strong>. His first contribution, <a href="https://perladvent.org/2022/2022-12-03.html">Santa is on GitHub</a> was a nice way to begin the journey. Then found a gem from a very dear friend of mine, <strong>Julien Fiegehenn</strong> talking about good old friend <strong>CGI</strong>. In fact, I have seen him presenting the subject <a href="https://perladvent.org/2022/2022-12-04.html">northpole.cgi</a> at the <strong>Perl Conference</strong>. I found another piece of work by <strong>Thibault DUPONCHELLE</strong> about <strong>MongoDB</strong>. I found the <strong>Day 5</strong> contribution <a href="https://perladvent.org/2022/2022-12-05.html">Catching dreams</a> is worth checking, if you want to explore <strong>MongoDB</strong>. If I am not mistaken then few years ago, <strong>Dave Cross</strong> shared his creation <a href="https://metacpan.org/pod/SVG::ChristmasTree">SVG::ChristmasTree</a> in <strong>Perl Advent Calendar</strong>. I was happy to see it part of this year calendar too, not directly though. <strong>Day 8</strong> started with <a href="https://perladvent.org/2022/2022-12-08.html">A Perlmas Tree</a> by <strong>Maximilian Lika</strong>. I found <strong>Day 11</strong> contribution very technical dealing with <strong>signal ALRM</strong>. Not an easy subject to discuss in the <strong>Advent Calendar</strong> in my humble opinion. Thanks <strong>OODLER</strong> for the fine contribution, <a href="https://perladvent.org/2022/2022-12-11.html">Wake up! Time to open presents!</a>.</p>
<p>If you are still looking for more <strong>Advent Calendar</strong> theme fun then I would highly recommend, <a href="https://theweeklychallenge.org/blog/advent-calendar-2022">The Weekly Challenge Advent Calendar</a>. Like in the past, this year also, it has contributions from <strong>Team PWC</strong> hand picked by me. I am sure you would find it interesting.</p>
<p>I am working on something that I would love to be part of this year <strong>Perl Advent Calendar</strong>. Hopefully it would be ready soon. Well I am also working on something similar for <strong>Raku Advent Calendar</strong>. It would be an achievement if I can get both done on time. Please wish me luck.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/594.html</id>
    <published>2022-12-12T10:00:00Z</published>
    <updated>2022-12-12T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>#593 - Perl on DEV.to</title>
    <link rel="alternate" href="https://perlweekly.com/archive/593.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I registered to <a href="https://dev.to/">DEV.to</a> in 2017, more than 5 years ago. Posted a few articles with rather limited success: less than 10 people looked at the articles. Then in 2020 I posted a few more articles. On one of them <a href="https://dev.to/szabgab/tests-are-awesome-3i63">Tests are awesome!</a> I got as many as 300 readers, but the others have not received much love so I did not continue publishing. In 2021 I had another experiment when I published <a href="https://dev.to/szabgab/perl-modules-with-their-own-web-site-2gmo">Perl modules with their own web site</a> on which there were some 600 visitors. Primarily the readers of the Perl Weekly newsletter. I published a few more articles with readers in the low 10s. A few weeks ago I started to publish again. This time several of my articles got above 100 viewers and one, <a href="https://dev.to/szabgab/open-source-development-courses-5d4b">Open Source Development Courses</a> is already above 1100 viewers. I started to get around 600 readers a day. That's already really valuable!</p>
<p>So what happened? There were a couple of changes: 1. There are more people on DEV. 2. I publish a lot more articles that appeal to a wider range of people. 3. There is a sort-of network effect. The more people up-vote and bookmark (the two kinds of reactions on DEV) my articles the more people will see it.</p>
<p>The nice thing about DEV is that I can republish the articles I published elsewhere (e.g. on <a href="https://perlmaven.com/">PerlMaven</a>, on <a href="https://code-maven.com/">Code-Maven</a>, or <a href="https://blogs.perl.org/">blogs.perl.org</a>), and also I can set the canonical URL of each article on DEV to the original one on my blog. That way I get the visitors on DEV as well, but the 'Google juice' the articles receive will flow over to my sites. It seems like a win-win for DEV and authors who have blogs elsewhere. You can even configure DEV to pull your RSS feed and create drafts from your articles published elsewhere. I even started to republish the content of the <a href="https://dev.to/szabgab/perl-weekly-591-less-than-50-use-ci-4966">Perl Weekly</a>.</p>
<p>So here is what I suggest. If you already write about Perl elsewhere, republish those articles on DEV and tag them with <b>perl</b>. If you are primarily a reader of articles, then register on <a href="https://dev.to/">DEV</a> and start up-voting the <a href="https://dev.to/t/perl">Perl-related posts</a> you like. You can even follow a few authors there, get notified when they have new posts, and up-vote those to encourage them to write even more.</p>
<p>Alternatively, you can watch the <a href="https://perl.theplanetarium.org/">Perl Planetarium</a>. It already follows the <b>perl</b> tag on DEV.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/593.html</id>
    <published>2022-12-05T10:00:00Z</published>
    <updated>2022-12-05T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>The Weekly Challenge 193</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/12/03#pwc193" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, $n &gt; 0. Write a script to find all possible binary numbers of 
size $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub binary_numbers_size_n{
    my($n) = @_;
    my @numbers = map {
        sprintf("%0${n}b", $_)
    } 0 .. 2**$n - 1;
    return @numbers;
}

MAIN:{
    say join(", ", binary_numbers_size_n(2));
    say join(", ", binary_numbers_size_n(3));
    say join(", ", binary_numbers_size_n(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
00, 01, 10, 11
000, 001, 010, 011, 100, 101, 110, 111
0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I think it's fair to say that &lt;code&gt;sprintf&lt;/code&gt; is doing most of the work here! For those 
unfamiliar, the format string &lt;code&gt;"%0${n}b"&lt;/code&gt; means &lt;em&gt;print the number as binary of length $n,
left pad with 0s&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of strings of same length, @s. Write a script to find the odd string 
in the given list. Use positional alphabet values starting 
with 0, i.e. a = 0, b = 1, ... z = 25.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub odd_string{
    my(@strings) = @_;
    my %differences;
    for my $string (@strings){
        my $current;
        my $previous;
        my @differences;
        map {
            unless($previous){
                $previous = $_;
            }
            else{
                $current = $_;
                push @differences, ord($current) - ord($previous);
                $previous = $current;
            }        
        } split(//, $string);
        my $key = join(",", @differences);
        my $size_before = keys %differences;
        $differences{$key} = undef;
        my $size_after = keys %differences;
        return $string if $size_before &gt; 0 &amp;&amp; $size_after - $size_before == 1;
    }
    return undef;
}

MAIN:{
    say odd_string(qw/adc wzy abc/);
    say odd_string(qw/aaa bob ccc ddd/);
    say odd_string(qw/aaaa bbbb cccc dddd/) || "no odd string found";
    say odd_string(qw/aaaa bbob cccc dddd/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
abc
bob
no odd string found
bbob
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is one main assumption here and that is that the list of strings is going to be of
length three or more. If the array has length one then can we say that single string is 
"odd" in and of itself? And if we have only two strings and they aren't the same which is 
the the odd one?&lt;/p&gt;

&lt;p&gt;The basic steps of this solution are:&lt;/p&gt;

&lt;p&gt;1) For each string split it into an array of characters.&lt;/p&gt;

&lt;p&gt;2) Compute the differences. This is done in the &lt;code&gt;map&lt;/code&gt;. I'll concede that this is a 
somewhat unusual use of &lt;code&gt;map&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;3) Transform the differences into a single string to be used as a hash key using &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4) If we add this differences based key to the hash and the hash size changes by 
1 (assuming it is a non-empty hash) then we know we have found the unique "odd string" 
which is then returned.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-193/"&gt;Challenge 193&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc193</id>
    <published>2022-12-03T19:04:00-05:00</published>
    <updated>2022-12-03T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AI-TensorFlow-Libtensorflow">AI-TensorFlow-Libtensorflow</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Bindings for Libtensorflow deep learning library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStructuredData">Acme-CPANModules-DiffingStructuredData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules to diff structured data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStuffs">Acme-CPANModules-DiffingStuffs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules/applications to diff various stuffs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RenamingFiles">Acme-CPANModules-RenamingFiles</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of Perl modules (and scripts) to rename multiple files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WrappingText">Acme-CPANModules-WrappingText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules and utilities to wrap text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Font-Uni">Alien-Font-Uni</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.0_1</td>
<td>0.3</td>
<td>provide Unifont trutype file or location</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libui">Alien-libui</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Build and Install libui: A portable GUI library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-psl">Alien-psl</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Discover or download and install psl (Public Suffix List Library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GUI-Cellgraph">App-GUI-Cellgraph</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.01_0</td>
<td>0.02</td>
<td>draw pattern by cellular automaton</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox">App-OpenMbox</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.12</td>
<td>0.12</td>
<td>The methods for email management used in OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ParseCommandLineUtils">App-ParseCommandLineUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for parsing command-line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-StringQueryToRegexpUtils">App-StringQueryToRegexpUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for String::Query::To::Regexp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-TextWrapUtils">App-TextWrapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to text wrapping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Business-PagOnline">Business-PagOnline</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library for Unicredit's PagOnline payment system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Popt">CLI-Popt</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Parse CLI parameters via popt(3)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clearbuilt-Excelerator">Clearbuilt-Excelerator</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2.0000</td>
<td>2.0001</td>
<td>Write XLSX files in a Clearbuilt-standard way</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Complete-Random">Complete-Random</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Complete from a list of random string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-PseudoEnum">DBIx-Class-PseudoEnum</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0002</td>
<td>Schema-based enumerations independent of database</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ViewCache">Dancer2-Plugin-ViewCache</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Create a code for a guest user to use to view a page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-TimeZone-Catalog-Extend">DateTime-TimeZone-Catalog-Extend</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Extend DateTime::TimeZone catalog</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Deprecations-Environmental">Devel-Deprecations-Environmental</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>1.000</td>
<td>deprecations for your code's surroundings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Util-Current">Dist-Util-Current</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Guess the current Perl distribution name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Test-Prereqs-Latest">Dist-Zilla-Plugin-Test-Prereqs-Latest</a></td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Tests your module has up to date dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Experian-IDAutho">Experian-IDAutho</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2.53</td>
<td>2.53</td>
<td>Experian's ID Authenticate service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Food-Ratio">Food-Ratio</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.01</td>
<td>calculate ingredient ratios</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Metrics">Future-AsyncAwait-Metrics</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>report metrics from Future::AsyncAwait to Metrics::Any</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-Marad">Game-Marad</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a board game for two players</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-TileMap">Game-TileMap</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Representation of tile-based two-dimensional rectangular maps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-FIT">Geo-FIT</a></td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1.01</td>
<td>1.03</td>
<td>Decode Garmin FIT files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphics-Layout-Kiwisolver">Graphics-Layout-Kiwisolver</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>API for Kiwisolver constraint solver</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Blitz">HTML-Blitz</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>high-performance, selector-based, content-aware HTML template engine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Macro-Simple">Macro-Simple</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.003</td>
<td>preprocessor-like macros in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Markdown-ODF">Markdown-ODF</a></td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Create ODF documents from Markdown</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-BlackScholesMerton">Math-Business-BlackScholesMerton</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1.25</td>
<td>1.25</td>
<td>Algorithm of Math::Business::BlackScholesMerton for binary and non-binary options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-Lookback">Math-Business-Lookback</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>The Black-Scholes formula for Lookback options.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-WebSocketProxy-Backend-ConsumerGroups">Mojo-WebSocketProxy-Backend-ConsumerGroups</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Class for communication with backend by sending messaging through redis streams.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-HTMX">Mojolicious-Plugin-HTMX</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Mojolicious Plugin for htmx</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Blockchain">Net-Async-Blockchain</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>base for blockchain subscription clients.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-FattureInCloud">Net-FattureInCloud</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library with MINIMAL interface to use FattureInCloud (FIC) API version 2.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenTelemetry-TraceContext-W3C">OpenTelemetry-TraceContext-W3C</a></td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>0.01</td>
<td>0.02</td>
<td>W3C Trace Context implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-List-Rule">Path-List-Rule</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Path::Iterator::Rule on an list of paths</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Perl">Perinci-Sub-XCompletionBundle-Perl</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Riap">Perinci-Sub-XCompletionBundle-Riap</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Riap</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls">Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1.002</td>
<td>1.002</td>
<td>Don't call fully qualified function methods without parens</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Dist-APPerl">Perl-Dist-APPerl</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Actually Portable Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Greylist">Plack-Middleware-Greylist</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.3.0</td>
<td>throttle requests with different rates based on net blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/REFECO-Blockchain-Contract-Solidity-ABI">REFECO-Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>0.002</td>
<td>0.004</td>
<td>Contract ABI utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Runtime-Debugger">Runtime-Debugger</a></td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>0.01</td>
<td>0.10</td>
<td>Debug perl wihle its running.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Numpy">SPVM-Numpy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Numpy is the Python/NumPy porting to Perl/SPVM</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQL-Load">SQL-Load</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>This module is a simple SQL file loader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Simple-Filter-Macro">Simple-Filter-Macro</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.08</td>
<td>Perl extension for creating macro modules that are expanding use declarations inline in Perl code.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Socket-More">Socket-More</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Interface and scoped passive addressing routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Query-To-Regexp">String-Query-To-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Convert query to regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Boolean">Sub-Boolean</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>1.000000</td>
<td>make XS true/false subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Subunit">Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Table-View">Tags-HTML-Table-View</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for table view.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-QRCode-Compact">Term-QRCode-Compact</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>create QR codes for display in the terminal</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Subunit">Test-Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-ULID">Types-ULID</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>ULID type constraints</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Value-Diff">Value-Diff</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>find out the difference between two Perl values</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebSerivce-SendBird">WebSerivce-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-CustomerIO">WebService-Async-CustomerIO</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>unofficial support for the Customer.io service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Onfido">WebService-Async-Onfido</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Webservice to connect to Onfido API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Segment">WebService-Async-Segment</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Unofficial support for the Segment service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-SmartyStreets">WebService-Async-SmartyStreets</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Access SmartyStreet API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-GAMSTOP">WebService-GAMSTOP</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.003</td>
<td>0.003</td>
<td>GAMSTOP API Client Implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/results">results</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.002</td>
<td>why throw exceptions when you can return them?</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>67</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-TensorFlow-Libtensorflow ZMUGHAL 0.0.1 0.0.2 Bindings for Libtensorflow deep learning library Acme-CPANModules-DiffingStructuredData PERLANCAR 0.001 0.001 List of modules to diff structured data Acme-CPANModules-DiffingStuffs PERLANCAR 0.001 0.001 List of modules/applications to diff various stuffs Acme-CPANModules-RenamingFiles PERLANCAR 0.001 0.001 List of Perl modules (and scripts) to rename multiple files Acme-CPANModules-WrappingText PERLANCAR 0.001 0.001 … <a href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2002</id>
    <published>2022-12-01T00:44:15Z</published>
    <updated>2022-12-01T00:44:15Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#592 - Perl Blogging?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/592.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>We all know not many people blog about <strong>Perl</strong> anymore. Are we doing anything to get it back on track? Well, unfortunately again, nothing is happening on that front either.</p>
<p>But, hey, there is still hope and handful of <strong>Perl</strong> fans doing their best. One of them is our chief editor, <strong>Gabor Szabo</strong>. He has been running <a href="https://perlmaven.com">Perl Maven</a> for years now and many of us benefitted from his work. He recently started blogging on <a href="https://dev.to/szabgab">Dev.To</a>. I request all the <strong>Perl</strong> fans to follow him and like blog post. I didn't have the account there before so I decided to create <a href="https://dev.to/manwar">personal account</a>. Although I no longer blog at all but this is going to change soon. Earlier I used to blog on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a> but then I moved to <a href="https://theweeklychallenge.org/blogs">The Weekly Challenge</a> recently.</p>
<p>Talking about blogging, how can I miss one name, <strong>Flavio Poletti</strong>? He has been blogging daily for years now. Feel free to check out his <a href="https://github.polettix.it/ETOOBUSY">work here</a>. Kudos to him for his effort.</p>
<p>I would like to mention another name, <strong>Olaf Alders</strong>, for his hard work in reviving the good old friend, <a href="https://perladvent.org">Perl Advent Calendar</a>. <strong>Julien</strong> has been helping him in the project too. I remember there was a <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">call for papers</a> by him. If you have time and something to share about your favourite <strong>CPAN</strong> module then please do contribute. I have booked one slot for myself for this year <strong>Advent Calendar</strong>. Hopefully, I will submit my article on time.</p>
<p>Last but not the least, I would like to thank all the members of <strong>Team PWC</strong> for creating friendly and positive vibes for years now. As of today, they have published <strong>3000+ blog posts</strong> sharing creative ideas and solutions. If you are interested then please do checkout <a href="https://theweeklychallenge.org/recaps">blog posts</a>.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/592.html</id>
    <published>2022-11-28T10:00:00Z</published>
    <updated>2022-11-28T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Flipping to Redistribute</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/27#pwc192" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find the binary flip.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub int2bits{
    my($n) = @_;
    my @bits;
    while($n){
        my $b = $n &amp; 1;
        unshift @bits, $b;
        $n = $n &gt;&gt; 1;
    }
    return @bits
}

sub binary_flip{
    my($n) = @_;
    my @bits = int2bits($n);
    @bits = map {$_^ 1} @bits;
    return oct(q/0b/ . join(q//, @bits));
}

MAIN:{
    say binary_flip(5);
    say binary_flip(4);
    say binary_flip(6);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
3
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There was once a time when I was positively terrified of bitwise operations. Anything at 
that level seemed a bit like magic. Especially spooky were the bitwise algorithms detailed 
in &lt;a href="https://en.wikipedia.org/wiki/Hacker%27s_Delight"&gt;Hacker's Delight&lt;/a&gt;! Anyway, has time
has gone on I am a bit more confortable with these sorts of things. Especially when, like
this problem, the issues are fairly straightforward.&lt;/p&gt;

&lt;p&gt;The code here does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;converts a given integer into an array of bits via &lt;code&gt;int2bits()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flips the bits using an xor operation (the &lt;code&gt;map&lt;/code&gt; in &lt;code&gt;binary_flip()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;converts the array of flipped bits to the decimal equivalent via &lt;code&gt;oct()&lt;/code&gt; which, despite 
the name, handles any decimal, binary, octal, and hex strings as input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers greater than or equal to zero, @list. Write a script to 
distribute the number so that each members are same. If you succeed then print the total 
moves otherwise print -1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use POSIX;

sub equal_distribution{
    my(@integers) = @_;
    my $moves;
    my $average = unpack("%32I*", pack("I*",  @integers)) / @integers; 
    return -1 unless floor($average) ==  ceil($average);
    {
        map{
            my $i = $_;
            if($integers[$i] &gt; $average &amp;&amp; $integers[$i] &gt; $integers[$i+1]){$integers[$i]--; $integers[$i+1]++; $moves++}
            if($integers[$i] &lt; $average &amp;&amp; $integers[$i] &lt; $integers[$i+1]){$integers[$i]++; $integers[$i+1]--; $moves++}
        } 0 .. @integers - 2;
        redo unless 0 == grep {$average != $_} @integers;
    }
    return $moves;
}

MAIN:{
    say equal_distribution(1, 0, 5);
    say equal_distribution(0, 2, 0);
    say equal_distribution(0, 3, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
-1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules that must be followed are:&lt;/p&gt;

&lt;p&gt;1) You can only move a value of '1' per move&lt;/p&gt;

&lt;p&gt;2) You are only allowed to move a value of '1' to a direct neighbor/adjacent cell.&lt;/p&gt;

&lt;p&gt;First we compute the average of the numbers in the list. Provided that the average is a
non-decimal (confirmed by comparing &lt;code&gt;floor&lt;/code&gt; to &lt;code&gt;ceil&lt;/code&gt;) we know we can compute the 
necessary "distribution".&lt;/p&gt;

&lt;p&gt;The re-distribution itself is handled just by following the rules and continuously looping
until all values in the list are the same. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/functions/oct"&gt;oct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-192/"&gt;Challenge 192&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc192</id>
    <published>2022-11-27T19:04:00-05:00</published>
    <updated>2022-11-27T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
