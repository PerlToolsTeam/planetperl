<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-08-01T16:52:04Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>#575 - Backward compatibility</title>
    <link rel="alternate" href="https://perlweekly.com/archive/575.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>One of the ongoing discussions in the Perl community is the question of backward compatibility. One group of people say it is (one of) the most important traits of Perl that you can run very old code on a very new version of Perl. The other side mostly say that there are very few cases when this is actually needed and the change in the version of Perl is just one aspect of upgrades people need to handle.</p>
<p>Then comes the case, like the introduction of th $00 variable in Perl 5.32 that breaks the code of people who used that variable for their own purposes. This is not the first case where a change in perl (or for that matter in a CPAN module) breaks some working code. Neither will be the last.</p>
<p>So the question isn't IF there can be changes breaking backward compatibility, but how we deal with them? Do the authors give proper warning? Are there tools to find pieces of code that will be impacted? (e.g. a Perl Critic rule). Are there instructions how to fix the code that will be broken?</p>
<p>On the other side of the coin, how can a user - a user of Perl or a CPAN module - ensure that changes in any of the dependencies won't impact their product or service? How can they notice any impact before it reaches the production system? Possibly even before it reaches the development machines forcing the whole team to stop working.</p>
<p>Hint: write and run automated tests!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/575.html</id>
    <published>2022-08-01T10:00:00Z</published>
    <updated>2022-08-01T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>SPVM continues to undergo heavy changes.</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/08/spvm-continues-to-undergo-heavy-changes.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10867</id>
    <published>2022-08-01T04:40:06Z</published>
    <updated>2022-08-01T04:45:26Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>Sorry, SPVM continues to undergo heavy changes.</p>

<p>After building real-world modules and applications, I realized that a lot of changes needed to be made.</p>

<p>You can see what I'm currently working on below.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/Modules.pm#CPAN-Modules">SPVM modules - CPAN modules</a></p>

<blockquote>
JSON - JSON

<p>Math - Math functions</p>

<p>Regex - Regular Expression</p>

<p>Unicode - Unicode Utilities</p>

<p>Base64 - Base 64</p>

<p>Time::Local - Time Reverse Manipulation</p>

<p>SPVM::Errno - Error Number</p>

<p>SPVM::Resource::Re2::V2022_06_01 - Resource of Google RE2 release 2022-06-01.</p>

<p>SPVM::Resource::Zlib::V1_2_11 - zlib v1.2.11 Resource</p>

<p>SPVM::Cwd - get pathname of current working directory</p>

<p>SPVM::IO - File IO, Socket, Select/Polling.</p>

<p>SPVM::Digest::MD5 - SPVM interface to the MD5 Algorithm</p>

<p>SPVM::Digest::SHA - SPVM extension for SHA-1/224/256/384/512<br />
</blockquote></p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Jul 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Tar-Size">Alien-Tar-Size</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libFLAC">Alien-libFLAC</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>find or build and install libFLAC with development dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-SNMP-TrapReceiver">AnyEvent-SNMP-TrapReceiver</a></td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>0.15</td>
<td>0.16</td>
<td>SNMP trap receiver by help of AnyEvent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Changelord">App-Changelord</a></td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>v0.0.1</td>
<td>0.0.2</td>
<td>cli-based changelog manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Git-Perl">App-Git-Perl</a></td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>v0.1.0</td>
<td>v0.1.15</td>
<td>adds custom git command "git perl" to make it easier to monitor latest changes in perl modules, and make you collaborate faster.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-JYJ">App-JYJ</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Convert JSON to YAML to JSON to…</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-KamstrupKemSplit">App-KamstrupKemSplit</a></td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Helper functions for the Kamstrup KEM file splitter application</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-MHFS">App-MHFS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.4.0</td>
<td>v0.4.1</td>
<td>A Media HTTP File Server. Stream your own music and video library via your browser and standard media players.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-diff2vba">App-diff2vba</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.99</td>
<td>generate VBA patch script from diff output</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Util-Shuffle">Array-Util-Shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Shuffle an array</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Author-Daemon-DockerMetaBundle">Author-Daemon-DockerMetaBundle</a></td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
<td>1</td>
<td>A meta bundle that is used in the creation of a docker image.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-PERLANCAR-Tree-Examples">Bencher-Scenario-PERLANCAR-Tree-Examples</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.031</td>
<td>0.031</td>
<td>Benchmark PERLANCAR::Tree::Examples</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-shuffle">Bencher-Scenario-shuffle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark various algorithms &amp; implementation of shuffle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Array-Sample-WeightedRandom">Bencher-Scenarios-Array-Sample-WeightedRandom</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Array::Sample::WeightedRandom</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-ControllerPerContext">CatalystX-ControllerPerContext</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CatalystX-RequestModel">CatalystX-RequestModel</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>Map body and data parameters to a model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Digest-BLAKE3">Digest-BLAKE3</a></td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Perl extension for the BLAKE3 hash function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Authors">Dist-Zilla-Plugin-Authors</a></td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>Build AUTHORS file from Git history</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-PruneAliases">Dist-Zilla-Plugin-PruneAliases</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Prune macOS aliases from your dist</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Earth">Earth</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>FP Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hashest">Hashest</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>v0.3.1</td>
<td>v0.5.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-GIF-Encoder-PP">Image-GIF-Encoder-PP</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Pure perl GIF encoding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-WireGuard">Linux-WireGuard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_90</td>
<td>0.03</td>
<td>WireGuard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Linux-Wireguard">Linux-Wireguard</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Wireguard in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MHFS-XS">MHFS-XS</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.2</td>
<td>XS extension module for Media HTTP File Server, for server side media encoding.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mac-Alias">Mac-Alias</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Read or create macOS alias files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mars">Mars</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.04</td>
<td>OO Framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Abacus">Math-Abacus</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.04</td>
<td>A toy model of Chinese abacus</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Notation-PostfixInfix">Math-Notation-PostfixInfix</a></td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>v2022.035.1</td>
<td>v2022.035.1</td>
<td>Perl extension for Math Postfix and Infix Notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-LibNFS">Net-LibNFS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.02</td>
<td>User-land NFS in Perl via libnfs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-IO-Touchstone">PDL-IO-Touchstone</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Dancer2">Perl-Critic-Dancer2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.4000</td>
<td>0.4100</td>
<td>A collection of handy perlcritic modules for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PlayStation-MemoryCard">PlayStation-MemoryCard</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.2.0</td>
<td>v0.2.0</td>
<td>Utilities for working with PlayStation memory card and save files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-CopySubjectButton">RT-Extension-CopySubjectButton</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>RT-Extension-CopySubjectButton Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regexp-From-String">Regexp-From-String</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Convert '/…/' or 'qr(…)' into Regexp object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Rofi-Script">Rofi-Script</a></td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>0.001</td>
<td>1.221970</td>
<td>perl interface to the rofi menu</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Cwd">SPVM-Cwd</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>get pathname of current working directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-MD5">SPVM-Digest-MD5</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.06</td>
<td>SPVM interface to the MD5 Algorithm</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Digest-SHA">SPVM-Digest-SHA</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>SPVM extension for SHA-1/224/256/384/512</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Errno">SPVM-Errno</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Error Number</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-PSchemas-Re">Sah-PSchemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression (parameterized) schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-Fzf">Search-Fzf</a></td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Ported Fzf using perl. </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Software-Copyright">Software-Copyright</a></td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Copyright class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/StandupGenerator">StandupGenerator</a></td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>0.1</td>
<td>0.5</td>
<td>Package to create and manage daily standup files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Storable-Improved">Storable-Improved</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>Storable improved with core flaws mitigated</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Login-Button">Tags-HTML-Login-Button</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for login button.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-Graille">Term-Graille</a></td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>0.03</td>
<td>0.071</td>
<td>Terminal Graphics using Braille</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-DBIC-Pg">Test-DBIC-Pg</a></td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>0.99_01</td>
<td>0.99_01</td>
<td>Connect to and deploy a DBIx::Class::Schema on Postgres</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-JSON-Type">Test-JSON-Type</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Test JSON data with types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-Bash">Test-More-Bash</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>Write Perl tests in Bash</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-More-YAMLScript">Test-More-YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.5</td>
<td>Write Perl tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-YAFT">Test-YAFT</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.1</td>
<td>Yet another testing framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Try-ALRM">Try-ALRM</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.1</td>
<td>0.6</td>
<td>Provides alarm semantics similar to Try::Catch.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Twitter-ID">Twitter-ID</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Parse the date from a Twitter Snowflake ID</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Type-Library-Compiler">Type-Library-Compiler</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.007</td>
<td>compile a bunch of type constraints into a library with no non-core dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client">UID2-Client</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Perl Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UID2-Client-XS">UID2-Client-XS</a></td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Unified ID 2.0 Client for Perl (binding to the UID2 C++ library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-PackageURL">URI-PackageURL</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.02</td>
<td>Perl extension for Package URL (aka "purl")</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URN-OASIS-SAML2">URN-OASIS-SAML2</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Constants for urn:oasis SAML2 implementations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-Atom">WebFetch-Input-Atom</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from Atom feeds</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Input-RSS">WebFetch-Input-RSS</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>get headlines for WebFetch from RSS feed</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TT">WebFetch-Output-TT</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch via the Perl Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebFetch-Output-TWiki">WebFetch-Output-TWiki</a></td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>0.1.0</td>
<td>0.1.0</td>
<td>save data from WebFetch into a TWiki web site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLScript">YAMLScript</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.16</td>
<td>YAML as a Programming Language</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLTest">YAMLTest</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>0.0.1</td>
<td>0.0.4</td>
<td>Write tests in YAMLScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtin-compat">builtin-compat</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001000</td>
<td>0.001002</td>
<td>Provide builtin functions for older perl versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins">builtins</a></td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>0.000002</td>
<td>0.000005</td>
<td>Install all the new builtins from the builtin namespace</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/builtins-compat">builtins-compat</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.004</td>
<td>install all the new builtins from the builtin namespace (Perl 5.36+), and try our best on older versions of Perl</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>68</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>6</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>5</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/IKLUFT">IKLUFT</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>4</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/JIRO">JIRO</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JTREEVES">JTREEVES</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/NABOJ">NABOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/DCONWAY">DCONWAY</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ABELTJE">ABELTJE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/HOLLIE">HOLLIE</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DDUMONT">DDUMONT</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/YANICK">YANICK</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/JOENIO">JOENIO</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/STEWBEEF">STEWBEEF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/BLGL">BLGL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHRNJICA">NHRNJICA</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CCELSO">CCELSO</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LIYAO">LIYAO</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/SAIFTYNET">SAIFTYNET</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Alien-Tar-Size GAHAYES v0.1.0 v0.2.0 tar LD_PRELOAD hack to compute size of tar file without reading and writing, provided as Alien package Alien-libFLAC GAHAYES v0.1.0 v0.2.0 find or build and install libFLAC with development dependencies AnyEvent-SNMP-TrapReceiver NABOJ 0.15 0.16 SNMP trap receiver by help of AnyEvent App-Changelord YANICK v0.0.1 0.0.2 cli-based … <a href="https://perlancar.wordpress.com/2022/08/01/list-of-new-cpan-distributions-jul-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jul 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1994</id>
    <published>2022-08-01T00:37:54Z</published>
    <updated>2022-08-01T00:37:54Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #170</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-170/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 170 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would be from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-170/</id>
    <published>2022-08-01T00:00:00Z</published>
    <updated>2022-08-01T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 175</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-175/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-175/</id>
    <published>2022-08-01T00:00:00Z</published>
    <updated>2022-08-01T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 176</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-176/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Permuted Multiples 10. TASK #2: Reversible Numbers HEADLINES  Welcome to Week #176 of the weekly challenge.
Today is the first Monday of the month and time to declare our next champion. I declare, Marton Polgar, an expert in Raku as the next champion. As of today, he has contributed 46 solutions in Raku.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-176/</id>
    <published>2022-08-01T00:00:00Z</published>
    <updated>2022-08-01T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-08-01T00:00:00Z</published>
    <updated>2022-08-01T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 175: Last Sunday and Perfect Totient Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-175-last-sunday-and-perfect-totient-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10861</id>
    <published>2022-07-27T14:36:06Z</published>
    <updated>2022-07-31T20:45:56Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 175 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-175/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on July 31, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Last Sunday</h2>

<p><em>Write a script to list Last Sunday of every month in the given year.</em></p>

<p><em>For example, for year 2022, we should get the following:</em></p>

<pre><code>2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h3>Last Sunday in Raku</h3>

<p>In Raku, the <a href="https://docs.raku.org/type/Date#(Dateish">Date class</a><em>method</em>day-of-month) provides all the methods needed to properly manage dates. </p>

<p>The <code>MAIN</code> subroutine takes one parameter, the year that we want to process, and will default to 2022 if no parameter is passed. </p>

<p>First, we compute the last date in the month, find on which day of the week it falls (day of week is an integer between 1 and 7, where 1 stands for Monday and 7 for Sunday).</p>

<p>To get the date in month of the last Sunday in the month, we simply subtract the day of the week from the day in the month, except that this would not work properly when the last day of the month is a Sunday (we would obtain the previous Sunday), so we subtract the week day modulo 7.</p>

<pre><code>sub MAIN (Int $yr = 2022) {
    for ('01'..'09', 10 .. 12).flat -&gt; $month {
        my $month-end = Date.new("$yr-$month-01").last-date-in-month;
        my $week_day = $month-end.day-of-week;
        my $day-in-month = $month-end.day-of-month;
        # Note: Sunday is weekday 7
        my $sunday = $day-in-month - ($week_day % 7);
        say Date.new("$yr-$month-$sunday");
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./last-sunday.raku
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25

~
$ raku ./last-sunday.raku 2023
2023-01-29
2023-02-26
2023-03-26
2023-04-30
2023-05-28
2023-06-25
2023-07-30
2023-08-27
2023-09-24
2023-10-29
2023-11-26
2023-12-31
</code></pre>

<h3>Last Sunday in Perl</h3>

<p>This Perl program essentially follows the same idea as the Raku program above, except that we need to compute manually the last day in the month, which leads us to implement an <code>is_leap</code> subroutine to be sure of the last day of February.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;
use Time::Local;

my $yr = shift // 2022;
my @months = (0, 31, is_leap($yr) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);

for my $month (1..12) {
    my $month_last_day = timegm( 0, 0, 0, $months[$month], $month - 1, $yr - 1900 );
    my $day_in_week = (gmtime $month_last_day)[6];
    my $sunday = $months[$month] - ($day_in_week % 7);
    printf "%04d/%02d/%02d\n", $yr, $month, $sunday;
}

sub is_leap {
    my $yr = shift;
    return 0 if $yr % 4;    # no if not divisible by 4
    return 1 if $yr % 100;  # yes if divisible by 4 but not by 100
    return 0 if $yr % 400;  # no if divisible by 100 and not by 400
    return 1;               # yes if divisibe by 400
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./last-sunday.pl
2022/01/30
2022/02/27
2022/03/27
2022/04/24
2022/05/29
2022/06/26
2022/07/31
2022/08/28
2022/09/25
2022/10/30
2022/11/27
2022/12/25

~
$ perl ./last-sunday.pl 2023
2023/01/29
2023/02/26
2023/03/26
2023/04/30
2023/05/28
2023/06/25
2023/07/30
2023/08/27
2023/09/24
2023/10/29
2023/11/26
2023/12/31
</code></pre>

<h3>Last Sunday in Julia</h3>

<p>The Julia <a href="https://docs.julialang.org/en/v1/stdlib/Dates/">Dates</a> module provides everything we need, including a <code>lastdayofmonth</code> method.</p>

<pre><code>using Dates

function sundays(year, month)
    month_end = Dates.lastdayofmonth(Dates.Date(year, month, 1))
    weekday = Dates.dayofweek(month_end)
    println(month_end - Dates.Day(weekday % 7))
end

year = parse( Int, ARGS[1])
for month in 1:12
    sundays(year, month)
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./last-sunday.jl 2022
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h3>Last Sunday in Python</h3>

<p>Python&#8217;s <code>datetime</code> module doesn&#8217;t have a <code>lastdayofmonth</code> method, but we can use the <code>timedelta(days = 1)</code> method to subtract one day from the first day of the next month. We only need a bit of simple arithmetic to find the next month.</p>

<pre><code>from datetime import date,timedelta
import sys

def lastsundays (y):
  for m in range(1,13):
    if m == 12:
      year = y + 1
      month = 1
    else:
      year = y
      month = m + 1

    mthEnd = date(year, month, 1) - timedelta(days = 1)
    weekDay = mthEnd.weekday()
    lastSun = mthEnd - timedelta(days = (weekDay + 1) % 7)
    print(lastSun)

if len(sys.argv) == 2:
  year = int(sys.argv[1])
else:
  year = 2022

lastsundays(year)
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./last-sunday.py
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h3>Last Sunday in Ruby</h3>

<p>The Ruby <code>date</code> class provides a <code>next_month</code> and a <code>prev_day</code> methods that we can chain to get the last day of the month (<code>lmd</code>) in just one code line. Thus, the Ruby solution is particularly concise.</p>

<pre><code>require 'date'

year = ARGV.shift.to_i.nil? || 2022

for month in 1..12 
    lmd = Date.new(year, month, 1).next_month.prev_day
    weekday = lmd.wday
    puts lmd - (weekday % 7)
end
</code></pre>

<p>Output:</p>

<pre><code>2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

<h2>Task 2: Perfect Totient Numbers</h2>

<p><em>Write a script to generate first 20 Perfect Totient Numbers. Please checkout [wikipedia page](https://en.wikipedia.org/wiki/Perfect_totient_number] for more informations.</em></p>

<p><em>Output:</em></p>

<pre><code>3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
</code></pre>

<p>Wikipedia explains us that, in number theory, Euler&#8217;s totient function counts the positive integers up to a given integer <em>n</em> that are relatively prime to <em>n</em>. In other words, it is the number of integers <em>k</em>  in the range <em>1 ≤ k ≤ n</em> for which the greatest common divisor <em>gcd(n, k)</em> is equal to 1.  For example, there are 4 integers less than 10 that are prime relatively prime to 10: 1, 3, 7, 9. So, the totient of 10 is 4.</p>

<p>A <em>perfect totient number</em> is an integer that is equal to the sum of its iterated totients. That is, we apply the totient function to a number <em>n</em>, apply it again to the resulting totient, and so on, until the number 1 is reached, and add together the resulting sequence of numbers; if the sum equals <em>n</em>, then <em>n</em> is a perfect totient number.</p>

<p>For example, there are six positive integers less than 9 and relatively prime to it (1, 2, 4, 5, 7, 8), so the totient of 9 is 6; there are two numbers less than 6 and relatively prime to it (1, 5), so the totient of 6 is 2; and there is one number less than 2 and relatively prime to it (1), so the totient of 2 is 1; and 9 = 6 + 2 + 1, so 9 is a perfect totient number.</p>

<p>Once we&#8217;ve understood what a perfect totient number, it is quite easy to program a <code>is_perfect_totient</code> function that determines whether an input integer is a perfect totient. We need a <code>gcd</code> function to find out whether an integer is relatively prime to another. Some programming languages provide a built-in <code>gcd</code> function; for other languages, we&#8217;ll need to implement our own <code>gcd</code> function (see for example the Perl implementation below).</p>

<h3>Perfect Totient Numbers in Raku</h3>

<p>Raku has a built-in infix <a href="https://docs.raku.org/routine/gcd">gcd</a> operator. So it is quite easy: in the <code>is-perfect-totient</code> subroutine, we simply compute the totient of the input number <em>n</em> (i.e. count the number positive integers up to <em>n</em> that are relatively prime to <em>n</em>), then iteratively compute the totient of the totient, and so on, until we reach 1. Finally, we compare the sum of all totients to the original input number.</p>

<h4>Raw Unoptimized Version</h4>

<p>This is our first Raku version.</p>

<pre><code># Unoptimized version, don't use it
my $count = 0;
for 2..Inf -&gt; $n {
    print "$n " and $count++ if is-perfect-totient $n;
    last if $count &gt;= 20;
}
say "";
sub is-perfect-totient ($num) {
    my $n = $num;
    my $sum = 0;
    while $n &gt;= 1 {
        $n = (grep { $n gcd $_ == 1 }, 1..^$n).elems;
        $sum += $n;
    }
    return $num == $sum;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./perfect-totient.raku
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>The program becomes quite slow for the last perfect totient values (about 25 seconds to run). I tried some micro-optimizations, but without any significant improvement.</p>

<h4>Caching the Totient Sums (Naive Version)</h4>

<p>If you think about it, the above program computes the sum of the totients many times for the same number. We could store these values to avoid recomputing them. This strategy is called <em>caching</em> (or sometimes <em>memoizing</em>). We use the <code>@tot</code> array as a cache (or memo) to store the totient sums. When we want to compute the totient of a number, we first check if it is in the cache and use this value if such is the case, and we do the computation the hard way (with <code>gcd</code>) only if it is not in the cache.</p>

<p>This could lead to this program:</p>

<pre><code># Naive caching strategy
my $count = 0;
my @tot = 0, 0;
for 2..Inf -&gt; $n {
    print "$n " and $count++ if is-perfect-totient $n;
    last if $count &gt;= 20;
}
say "";
say "Time spent: ", now - INIT now;

sub is-perfect-totient ($num) {
    my $n = $num;
    my $sum = 0;
    while $n &gt;= 1 {
        if (defined @tot[$n]) {
            $sum += @tot[$n];
            last;
        } else {
            $n = (grep { $n gcd $_ == 1 }, 1..^$n).elems;
            $sum += $n;
        }
    }
    @tot[$num] = $sum;
    return $num == $sum;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ ./raku perfect-totient_cached_1.raku
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
Time spent: 15.32900533
</code></pre>

<p>So we are now at 15 seconds. This is a significant improvement (although less than what I hoped).</p>

<h4>Caching the Totient Sums (Improved Version)</h4>

<p>We are testing every integer in ascending order. When we are testing one such new integer we know for sure that we haven&#8217;t computed its totient sum so far and need to compute it, and we also know for sure that we have already done the calculation for its totient number (provided we supply a first value). In other words, we no longer need the <code>while</code> loop, we can just compute the totient for the new input integer, and add to that the totient sum of the totient, which we are guaranteed to have in the cache. This leads to a significant code simplification of the <code>is-perfect-totient</code> subroutine:</p>

<pre><code># Improved caching strategy
my $count = 0;
my @tot = 0, 0;
for 2..Inf -&gt; $n {
    print "$n " and $count++ if is-perfect-totient $n;
    last if $count &gt;= 20;
}
say "";
say "Time spent: ", now - INIT now;

sub is-perfect-totient ($num) {
    my $sum = (grep { $num gcd $_ == 1 }, 1..^$num).elems;
    $sum += @tot[$sum];
    @tot[$num] = $sum;
    return $num == $sum;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./perfect-totient_cached_2.raku
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
Time spent: 12.34103864
</code></pre>

<p>The code simplification has also led to an additional performance improvement of about 20%.</p>

<h3>Perfect Totient Numbers in Perl</h3>

<p>Our Perl implementation is really a port to Perl of the first Raku program above, with the only difference that we need to implement our own <code>gcd</code> subroutine, since two numbers are relatively prime (or coprime) if their greatest common divisor equals 1. For this, our <code>gcd</code> subroutine will use the so-called <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor#Euclidean_algorithm">Euclidean algorithm</a>, which is an improved variant of <a href="https://en.wikipedia.org/wiki/Greatest_common_divisor#Euclid's_algorithm">Euclid&#8217;s original method</a>.</p>

<h4>Raw Unoptimized Version</h4>

<p>This is our first Perl version.</p>

<pre><code># Unoptimized version, don't use it
use strict;
use warnings;
use feature qw/say/;

sub gcd {
    my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
    while ($j) {
        ($i, $j) = ($j, $i % $j);
    }
    return $i;
}
sub is_perfect_totient {
    my $num = shift;
    my $n = $num;
    my $sum = 0;
    while ($n &gt;= 1) {
        $n = scalar grep { gcd( $n, $_) == 1 } 1..$n-1;
        $sum += $n;
    }
    return $num == $sum;
}
my $count = 0;
my $n = 1;
while ($count &lt; 20) {
    print "$n " and $count++ if is_perfect_totient $n;
    $n++;
}
say "";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./perfect-totient.pl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This program is even slower (39 seconds) than the first Raku version (25 seconds), presumably because of the pure Perl implementation of the <code>gcd</code> function. So, we will also use the caching strategy previously tested in Raku</p>

<h4>Caching the Totient Sums</h4>

<p>Here, we will go directly to the improved caching strategy used in the third Raku program because it makes the code simpler (and slightly faster).</p>

<pre><code># Optimized cached version
use strict;
use warnings;
use feature qw/say/;

my @tot = (0, 0);

sub gcd {
    my ($i, $j) = sort { $a &lt;=&gt; $b } @_;
    while ($j) {
        ($i, $j) = ($j, $i % $j);
    }
    return $i;
}

sub is_perfect_totient {
    my $num = shift;
    my $sum = scalar grep { gcd( $num, $_) == 1 } 1..$num-1;
    $sum += $tot[$sum];
    $tot[$num] = $sum;
    return $num == $sum;
}

my $count = 0;
my $n = 1;
while ($count &lt; 20) {
    print "$n " and $count++ if is_perfect_totient $n;
    $n++;
}
say "";
</code></pre>

<p>Output:</p>

<pre><code>$ time perl perfect-totient_cached.pl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    0m20,371s
user    0m20,281s
sys     0m0,046s
</code></pre>

<p>So, our caching program runs almost twice faster than our original Perl program.</p>

<h3>Perfect Totient Numbers in Julia</h3>

<p>This is port to Julia of the Raku program above. Julia has a built-in <a href="https://docs.julialang.org/en/v1/base/math/#Base.gcd">gcd</a> function that we put for good use.</p>

<pre><code>function is_perfect_totient(num)
    n = num
    sum = 0
    while n &gt;= 1
        n = length( filter((x) -&gt; gcd(x, n) == 1, 1:n-1))
        sum += n
    end
    return num == sum
end

count = 0
n = 1
while count &lt; 20 
    if is_perfect_totient(n)
        print("$n ")
        global count += 1
    end
    global n += 1;
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./perfect-totient.jl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This Julia implementation runs much faster (less than 4 seconds) than the Raku and Perl versions. There is probably no urgent need to try to use the caching strategy used for Raku and Perl, but let&#8217;s try. The cached version below runs about twice faster (less than 2 seconds):</p>

<pre><code>cache = zeros(Int64, 1, 10000)

function is_perfect_totient(num)
    tot = length( filter((x) -&gt; gcd(x, n) == 1, 1:n-1))
    sum = tot + cache[tot] 
    cache[num] = sum
    return num == sum
end

count = 0
n = 2
while count &lt; 20 
    if is_perfect_totient(n)
        print("$n ")
        global count += 1
    end
    global n += 1;
end
</code></pre>

<p>From now on, for other guest-languages, we will go directly for the improved cache strategy (faster and simpler code).</p>

<h3>Perfect Totient Numbers in C</h3>

<p>C doesn&#8217;t have a built-in <code>gcd</code> function, so we implement our own. </p>

<pre><code>#include &lt;stdio.h&gt;
#define MAX_VAL 50000

int cache[MAX_VAL];

int gcd(int i, int j) {
    while (j != 0) {
        int temp = i % j;
        i = j;
        j = temp;
    }
    return i;
}

int is_perfect_totient (int num) {
    int tot = 0;
    for (int i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot++;
        }
    }
    int sum = tot + cache[tot];
    cache[num] = sum;
    return num == sum;
}

int main() {
    int j = 1;
    int count = 0;
    while (count &lt; 20) {
        if (is_perfect_totient(j)) {
            printf("%d ", j);
            count++;
        }
        j++;
    }
    printf("%s\n", " "); 
}
</code></pre>

<p>Output:</p>

<pre><code>$ time ./a.exe
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    0m1,441s
user    0m1,374s
sys     0m0,015s
</code></pre>

<h3>Perfect Totient Numbers in bc</h3>

<p>In bc, which is really an arbitrary precision <em>basic calculator</em> with some programming features, we also need to implement our own <code>gcd</code> function.</p>

<pre><code>define gcd (i, j) {
    while(j != 0) {
        k = j
        j = i % j
        i = k
    }
    return i
}

define is_perfect_totient (num) {
    tot = 0
    for (i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot += 1
        }
    }
    sum = tot + cache[tot] 
    cache[num] = sum
    return num == sum
}

j = 1
count = 0
# we only go to 15 (not 20) because bc is very slow
while (count &lt;= 15) {
    if (is_perfect_totient(j)) {
        print j, " "
        count += 1
    }
    j += 1
}
print "\n"
quit
</code></pre>

<p>Since bc is really slow, we display only the first 16 perfect totient numbers:</p>

<pre><code>$ time bc -q perfect-totient.bc
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199

real    0m35,553s
user    0m35,437s
sys     0m0,030s
</code></pre>

<h3>Perfect Totient Numbers in awk</h3>

<pre><code>In awk also we need to implement our own `gcd` function.

function gcd (i, j) {
    while(j != 0) {
        k = j
        j = i % j
        i = k
    }
    return i
}
function is_perfect_totient (num) {
    tot = 0
    for (i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot += 1
        }
    }
    sum = tot + cache[tot] 
    cache[num] = sum
    return num == sum
}
BEGIN {
    j = 1
    count = 0
    while (count &lt; 20) {
        if (is_perfect_totient(j)) {
            printf "%d ", j
            count += 1
        }
        j += 1
    }
    print " "
}
</code></pre>

<p>Output:</p>

<pre><code>$ time awk -f perfect-totient.awk
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 557

real    0m48,899s
user    0m48,656s
sys     0m0,046s
</code></pre>

<h3>Perfect Totient Numbers in D</h3>

<p>D has a built-in <code>gcd</code> function in the <code>std.numeric</code> module.</p>

<pre><code>import std.stdio;
import std.numeric;

int[10000] cache;

bool is_perfect_totient(int num) {
    int tot = 0;
    for (int i = 1; i &lt; num; i++) {
        if (gcd(num, i) == 1) {
            tot++;
        }
    }
    int sum = tot + cache[tot];
    cache[num] = sum;
    return num == sum;
}

void main() {
    int j = 1;
    int count = 0;
    while (count &lt; 20) {
        if (is_perfect_totient(j)) {
            printf("%d ", j);
            count++;
        }
        j++;
    }
    writeln(" "); 
}
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This ran in 1.34 seconds (but not the same hardware, so don&#8217;t compare with other timings).</p>

<h3>Perfect Totient Numbers in Ring</h3>

<pre><code>t_start = clock()
j = 1
count = 0
cache = list(10000)
while count &lt; 14
    if is_perfect_totient(j)
        see "" + j + " "
        count++
    ok
    j++
end
see nl
duration = (clock() - t_start)/clockspersecond()
see "" + duration + nl

func gcd (i, j) 
    while j != 0 
        k = i % j
        i = j
        j = k
    end
    return i

func is_perfect_totient (num)
    tot = 0
    for i = 1 to (num-1)
        if gcd(num, i) = 1
            tot++
        ok
    next
    sum = tot + cache[tot+1] 
    cache[num+1] = sum
    return num = sum
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./perfect-totient.ring
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
207.40
</code></pre>

<p>This program ran in 207.40 seconds, so it isn&#8217;t fast. However, it is possible to compile Ring source code into binary executable files (apparently with an intermediate C file). This should presumably be much faster, but I wasn&#8217;t able to do this so far because of various environment problems.</p>

<h3>Perfect Totient Numbers in Python</h3>

<p>Python has a <code>gcd</code> function in the <code>math</code> module.</p>

<pre><code>import math

cache = [0] * 10000

def is_perfect_totient (n):
    tot = 0
    for i in range(1, n):
        if (math.gcd(n, i) == 1):
            tot += 1
</code></pre>

<p>​        sum = tot + cache[tot]
​        cache[n] = sum
​        return n == sum <br />
​ <br />
    i = 1
​    count = 0
​    while count &lt; 20:
​        if is<em>perfect</em>totient(i):
​            print(i, end = &#8221; &#8220;)
​            count += 1
​        i += 1
​    print(&#8221; &#8220;)</p>

<p>Output:</p>

<pre><code>$ time python3 ./perfect-totient.py
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    0m4,832s
user    0m4,718s
sys     0m0,076s
</code></pre>

<h3>Perfect Totient Numbers in Kotlin</h3>

<p>In Kotlin, we had to implement our own <code>gcd</code> function.</p>

<pre><code>val cache = Array(10000, {i-&gt; 0})

fun gcd (m: Int, n: Int): Int {
    var i = m
    var j = n
    while(j != 0) {
        val k = j
        j = i % j
        i = k
    }
    return i
}

fun is_perfect_totient(n: Int): Boolean {
    var tot = 0
    for (i in 1..n-1) {
        if (gcd(n, i) == 1) {
            tot++
        }
    }
    val sum = tot + cache[tot] 
    cache[n] = sum
    return n == sum
}

fun main() {
    var i = 0
    var count = 0
    while (count &lt;= 20) {
        if (is_perfect_totient(i)) {
            print("$i ")
            count++
        }
        i++
    }
    println(" ")
}
</code></pre>

<p>Output:</p>

<pre><code>0 3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This program ran in 2.5 seconds.</p>

<h3>Perfect Totient Numbers in Rust</h3>

<p>The  Rust<code>num::integer</code> library provides a <code>gcd</code> function. In my humble opinion, Rust is nevertheless a pain in the neck to use because of its ultra-strict type system. As an example, I could not use a simple integer (<code>i32</code>) as an array subscript, because Rust wants a <code>usize</code> type. That&#8217;s why I had to use expressions like <code>CACHE[n as usize]</code>. Similarly, Rust forced me to have my global cache array in uppercase. And, since it is a global variable, I had to wrap accesses to the cache in a <code>unsafe{]</code> block. I personally don&#8217;t think a programming language should get in the way of developers to such an extent. I really wasted quite a bit of time working around this straitjacket.</p>

<pre><code>use num::integer::gcd;

static mut CACHE:[i32;10000] = [0; 10000];

fn is_perfect_totient(n: i32) -&gt; bool {
    let mut  tot = 0;
    for i in 1..n {
        if gcd(n, i) == 1 {
            tot += 1
        }
    }
    unsafe {
        let sum = tot + CACHE[tot as usize];
        CACHE[n as usize] = sum;
        return n == sum;
    }
}    

fn main() {
    let mut i = 1;
    let mut count = 0;
    while count &lt; 20 {
        if is_perfect_totient(i) {
            print!("{} ", i);
            count += 1;
        }
        i += 1;
    }
    println!("{}", " ")
}
</code></pre>

<p>Ouput:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Java</h3>

<p>Java has a <code>gcd</code> function bizarrely sitting in the <code>java.math.BigInteger</code> class. For a program performing heavy number crunching, I did not think it was reasonable to accept the performance penalty associated with big integers. So, I wrote my own <code>gcd</code> function.</p>

<pre><code>public class PerfectTotient {

    static int[] cache = new int[10000];

    public static int gcd(int i, int j) {
        while (j != 0) {
            int temp = i % j;
            i = j;
            j = temp;
        }
        return i;
    }
    public static boolean isPerfectTotient(int n) {
        int tot = 0;
        for (int i = 1; i &lt; n; i++) {
            if (gcd(n, i) == 1) {
                tot++;
            }
        }
        int sum = tot + cache[tot];
        cache[n] = sum;
        return n == sum;
    }

    public static void main(String[] args) {
        int i = 0;
        int count = 0;
        while (count &lt; 20) {
            if (isPerfectTotient(i)) {
                System.out.printf("%d ", i);
                count++;
            }
            i++;
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Ouput:</p>

<pre><code>0 3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>The compiled program ran in 1,23 second (not on the same hardware as most timings in this post).</p>

<h3>Perfect Totient Numbers in Nim</h3>

<p>Nim has a <code>gcd</code> function in its <code>math</code> library.</p>

<pre><code>import math

var cache: array[0..10000, int]

proc is_perfect_totient (n: int): bool =
  var tot = 0
  for i in 1..n-1:
    if (gcd(n, i) == 1):
      tot += 1
  let sum = tot + cache[tot]
  cache[n] = sum
  return sum == n

var i = 1
var count = 0
while count &lt; 20:
  if is_perfect_totient(i):
    stdout.write i, " "
    count += 1
  i += 1
echo ""
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<p>This program ran in 13 seconds.</p>

<h3>Perfect Totient Numbers in Go</h3>

<p>No <code>gcd</code> in plementation in go, so we rolled out our own.</p>

<pre><code>import "fmt"

var cache [10000]int

func gcd(i int, j int) int {
    for j != 0 {
        temp := i % j
        i = j
        j = temp
    }
    return i
}

func is_perfect_totient(n int) bool {
    tot := 0
    for i := 1; i &lt; n; i++ {
        if gcd(n, i) == 1 {
            tot++
        }
    }
    sum := tot + cache[tot]
    cache[n] = sum
    return n == sum
}

func main() {
    i := 0
    count := 0
    for count &lt;= 20 {
        if is_perfect_totient(i) {
            fmt.Printf("%d ", i)
            count++
        }
        i++
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in JavaScript</h3>

<pre><code>var cache = new Array(10000)
cache[0] = 0

function gcd (i, j) {
    while(j != 0) {
        k = j
        j = i % j
        i = k
    }
    return i
}

function is_perfect_totient (n) {
    let tot = 0
    for (var i = 1; i &lt; n; i++) {
          if (gcd(n, i) == 1) {
            tot++
        }
    }
    sum = tot + cache[tot]
    cache[n] = sum
    return n == sum
}

let count = 0
let i = 1
while (count &lt; 20) {
    if (is_perfect_totient(i)) {
        process.stdout.write(i + " ")

        count++
    }
    i++
}
process.stdout.write("\n")
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Dart</h3>

<p>Dart has a <code>gcd</code> method, which we will use.</p>

<pre><code>import "dart:io";

var cache = List&lt;int&gt;.filled(10000, 0, growable: true);

void main() {
    cache[0] = 0;
    var count = 0;
    var i = 1;
    while (count &lt; 20) {
        if (is_perfect_totient(i)) {
            stdout.write("$i ");
            count++;
        }
        i++;
    }
    print(" ");
}

bool is_perfect_totient(n) {
    var tot = 0;
    for (int i = 1; i &lt; n; i++ ) {
       if (i.gcd(n) == 1) {
            tot++;
        }
    }
    int sum = tot + cache[tot];
    cache[n] = sum;
    return n == sum;
}
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Ruby</h3>

<p>Ruby has a <code>gcd</code> mehod, so we&#8217;ll use it.</p>

<pre><code>$cache = Array.new(10000, 0) # global variables require $

def is_perfect_totient(n)
    tot = 0
    for i in 1..(n - 1)
        if n.gcd(i) == 1
            tot += 1
        end
    end
    sum = tot + $cache[tot]
    $cache[n] = sum;
    return sum == n
end

i = 1
count = 0
while count &lt; 20
    if is_perfect_totient(i)
        printf("%d ", i)
        count += 1
    end
    i += 1
end
print("\n")
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Scala</h3>

<p>Scala has a <code>gcd</code> function, but only for big integers (probably because Scala relies on Java, which has the same property). For a program performing heavy number crunching, I did not think it was reasonable to accept the performance penalty associated with big integers. So, I wrote my own <code>gcd</code> function for plain integers.</p>

<pre><code>object PerfectTotient extends App {

  var cache = new Array[Int](10000)

  def gcd(a: Int, b: Int): Int = {
    var (i, j) = (a, b)
    while (j &gt; 0) {
      var t = i
      i = j
      j = t % j
    }
    return i
  }

  def is_perfect_totient(n: Int): Boolean = {
    var tot = 0
    for (i &lt;- 1 to (n - 1)) {
      if (gcd(n, i) == 1) {
        tot += 1
      }
    }
    val sum = tot + cache(tot)
    cache(n) = sum
    return n == sum
  }

  var i = 1
  var count = 0
  while (count &lt; 20) {
    if (is_perfect_totient(i)) {
      count += 1
      printf("%d ", i)
    }
    i += 1
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571
</code></pre>

<h3>Perfect Totient Numbers in Tcl</h3>

<p>Tcl doesn&#8217;t have a built-in <code>gcd</code> function, so I wrote one.</p>

<pre><code>array set cache {}

set cache(0) 0

proc gcd {i j} {
   while {$j != 0} {
      set t [expr {$i % $j}]
      set i $j
      set j $t
   }
   return $i
}

proc is_perfect_totient {n} {
    global cache
    set tot 0
    for {set i 1} {$i &lt; $n} {incr i} {
        if [ expr [gcd $i $n] == 1 ] {
            incr tot
        }
    }
    set sum [expr $tot + $cache($tot)]
    set cache($n) $sum
    return [ expr $n == $sum ? 1 : 0]
}

set i 1
set count 0
while { $count &lt; 20 } {
    if [ is_perfect_totient $i ] {
        puts -nonewline  "${i} "
        incr count
    }
    incr i
}
puts ""
</code></pre>

<p>As a fully interpreted language, Tcl is quite slow, as it can be seen in the following output:</p>

<pre><code>$ time tclsh ./perfect-totient.tcl
3 9 15 27 39 81 111 183 243 255 327 363 471 729 2187 2199 3063 4359 4375 5571

real    1m18,058s
user    1m17,593s
sys     0m0,046s
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on August 7, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Totient numbers on a Sunday</title>
    <link rel="alternate" href="https://dev.to/simongreennet/totient-numbers-on-a-sunday-5fnc" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h1>
  
  
  Weekly Challenge
</h1>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-175/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-175/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Last Sunday
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to list Last Sunday of every month in the given year.</p>

<h3>
  
  
  My solution
</h3>

<p>Date math is hard, although not as hard as date and time calculations. As a quick <a href="https://en.wikipedia.org/wiki/Gregorian_calendar">refresher</a>, the days, months and year as we know it was introduced in October 1582 by Pope Gregory XIII as a modification of, and replacement for, the Julian calendar. Both solutions I've provided have assumed the Georgian Calendar since the beginning of time, and thus will give wrong results for old dates.</p>

<p>In my solution, I use the <a href="https://docs.python.org/3/library/datetime.html#datetime.date">date module</a> from datetime. For the specified year, I calculate the last day of each month (first day of the  month + 1 month - 1 day). I also obtain the day of the week (where Monday is 1 and Sunday is 7). Finally, I substrate the day of the week from the last day to produce the last Sunday. I use <code>% 7</code> so we don't subtract seven days if the last day is a Sunday.</p>

<p>For my Perl solution, I use the <a href="https://metacpan.org/pod/Date::Calc">Date::Calc module</a>. As this has a <code>Days_in_Month</code> function. We can calculate the last day of the month a little easier. Unlike the Python solution, the functions don't result in an object. This has pros and cons.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
</code></pre>

</div>



<h2>
  
  
  Task 2: Perfect Totient Numbers
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 20 <a href="https://en.wikipedia.org/wiki/Perfect_totient_number">Perfect Totient Numbers</a>.</p>

<h3>
  
  
  My solution
</h3>

<p>I may have over engineered this solution. My first attempt took nearly four minutes to run. My final solution took 4½ seconds in Python and 13 seconds in Perl.</p>

<p>This means that I need to go into some detail about my solution. Lets start at the beginning. I define three global variables: <code>primes</code> (list), <code>factors</code> (dict of sets) and <code>totient</code> (dict of integers). These are mainly used for caching results of numbers we already have calculated.</p>

<p>I then have three functions to populate each variable. All of them take a number as an input. The <code>is_prime</code> number will add to the <code>primes</code> list if the number is a prime. This is done by checking if the number is divisible by any already found primes with no remainder. The <code>get_factors</code> function returns a set of prime numbers that make up the number. For example for the number 18, it would return a set of <code>{2, 3}</code> (being 2 × 3 × 3).</p>

<p>The <code>get_totients</code> function will return the number of integers between 1 and the number that have a relative prime of 1 (in other words, the greatest common divisor of that number is 1). As the <code>get_factors</code> function returns sets, we can use the intersection method to see if there is a common prime.</p>

<p>Next, we have the <code>is_ptn</code> function. This calculates the number of relative primes (using the <code>get_totients</code> function) of the number, and does this recursively in a while loop until we reach 1. Finally we compare the total with the original number and return True if they match, or False otherwise.</p>

<p>Finally, we have the <code>main</code> function which is the usual wrapper for this type of challenge. We have a <code>solutions</code> list, and an incrementing while loop that continues until we have 15 numbers.</p>

<p>The Perl code is roughly equivalent. It will use the <a href="https://perldoc.perl.org/functions/state">state</a> function rather than global variables where appropriate, and the none function when comparing two arrays. I suspect this is the main difference in performance between the two sets of code.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571

<span class="nv">$ </span>./ch-2.pl 
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/totient-numbers-on-a-sunday-5fnc</id>
    <published>2022-07-31T12:38:02Z</published>
    <updated>2022-07-31T12:38:02Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Dancer2: Exercise 2 - Multi-Counter, Random redirection</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-31T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-exercise-2"/>  <id>https://perlmaven.com/dancer2-exercise-2</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-381028195871773634</id>
    <published>2022-07-30T21:42:00.000+02:00</published>
    <updated>2022-07-30T21:42:58.744+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdiii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052010&lt;/strong&gt; on 2022-07-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.052008 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Devel-CheckOS-1.94' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::CheckOS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - require that we are running on a particular OS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.94&lt;/strong&gt; on 2022-07-24&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.93 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/HTTP-Tiny-0.082' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A small, simple, correct HTTP/1.1 client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.082&lt;/strong&gt; on 2022-07-25&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 0.080 was 8 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.08&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.05 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.717' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.717&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 7.715 was 9 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.025&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.023 was 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.025&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.023 was 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.025&lt;/strong&gt; on 2022-07-28&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.023 was 5 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9630' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9630&lt;/strong&gt; on 2022-07-29&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9627 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016006&lt;/strong&gt; on 2022-07-25&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016005 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.13&lt;/strong&gt; on 2022-07-29&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.12 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/381028195871773634/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdiii-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/381028195871773634"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/381028195871773634"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdiii-11-great-cpan-modules-released.html" title="(cdiii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4993452395011469961</id>
    <published>2022-07-30T21:40:00.002+02:00</published>
    <updated>2022-07-30T21:40:15.357+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxvii) metacpan weekly report - Storable::Improved</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Storable::Improved"&gt;Storable::Improved&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/07/30 19:39:07 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Statm::Tiny" target="_blank"&gt;Linux::Statm::Tiny&lt;/a&gt; - simple access to Linux /proc/../statm&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Authen::TOTP" target="_blank"&gt;Authen::TOTP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BioPerl" target="_blank"&gt;BioPerl&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Book::Chinese::MasterPerlToday" target="_blank"&gt;Book::Chinese::MasterPerlToday&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::FastMmap" target="_blank"&gt;Cache::FastMmap&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart" target="_blank"&gt;Chart&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Enum" target="_blank"&gt;Data::Enum&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=257)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::InflateColumn::FS" target="_blank"&gt;DBIx::Class::InflateColumn::FS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::UUIDColumns" target="_blank"&gt;DBIx::Class::UUIDColumns&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::CheckOS" target="_blank"&gt;Devel::CheckOS&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LaTeX::Driver" target="_blank"&gt;LaTeX::Driver&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libnet" target="_blank"&gt;libnet&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion::Backend::mysql" target="_blank"&gt;Minion::Backend::mysql&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mite" target="_blank"&gt;Mite&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::mysql" target="_blank"&gt;Mojo::mysql&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::RabbitMQ::Client" target="_blank"&gt;Mojo::RabbitMQ::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Reuse" target="_blank"&gt;PDF::Reuse&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Reuse::Tutorial" target="_blank"&gt;PDF::Reuse::Tutorial&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlsecret" target="_blank"&gt;perlsecret&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RocksDB" target="_blank"&gt;RocksDB&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Safe::Isa" target="_blank"&gt;Safe::Isa&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Translator" target="_blank"&gt;SQL::Translator&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Storable::Improved" target="_blank"&gt;Storable::Improved&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+2=137)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Log::Dispatch" target="_blank"&gt;Test::Log::Dispatch&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CleanFragment" target="_blank"&gt;Text::CleanFragment&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::Router" target="_blank"&gt;URI::Router&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4993452395011469961/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4993452395011469961"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4993452395011469961"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvii-metacpan-weekly-report.html" title="(dxvii) metacpan weekly report - Storable::Improved"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-568805406856213740</id>
    <published>2022-07-30T21:37:00.001+02:00</published>
    <updated>2022-07-30T21:37:22.626+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxlv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-07-30 19:36:39 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73168517" target="_blank"&gt;Perl regex capture groups and reshuffle pattern&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73127046" target="_blank"&gt;Can't install some POE perl module in Strawberry Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73152164" target="_blank"&gt;Replace newline if condition is met in next line in text file with linux command line tools&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73103709" target="_blank"&gt;Calculate the difference between two dates as years-and-days but without months?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73106099" target="_blank"&gt;Perl 5 : assignment of an anonymous arrayref, where the array is still empty = copy-construction?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/568805406856213740/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxlv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/568805406856213740"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/568805406856213740"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxlv-stackoverflow-perl-report.html" title="(dxlv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Sunday Was Perfectly Totient</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/30#pwc175" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to list the last sunday of every month in the given year.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Time::Piece; 

sub last_sunday_month{
    my($month, $year) = @_;
    $month = "0$month" if $month &lt; 10;
    my $sunday;
    my $t = Time::Piece-&gt;strptime("$month", "%m");   
    for my $day (20 .. $t-&gt;month_last_day()){
        $t = Time::Piece-&gt;strptime("$day $month $year", "%d %m %Y");
        $sunday = "$year-$month-$day" if $t-&gt;wday == 1;
    }  
    return $sunday;  
}

sub last_sunday{
    my($year) = @_;
    my @sundays; 
    for my $month (1 .. 12){
        push @sundays, last_sunday_month($month, $year);  
    }
    return @sundays;   
}

MAIN:{
    print join("\n", last_sunday(2022)) . "\n"; 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2022-01-30
2022-02-27
2022-03-27
2022-04-24
2022-05-29
2022-06-26
2022-07-31
2022-08-28
2022-09-25
2022-10-30
2022-11-27
2022-12-25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;When dealing with dates in Perl you have a ton of options, including implementing 
everything on your own. I usually use the &lt;code&gt;Time::Piece&lt;/code&gt; module. Here you can see why I 
find it so convenient. With &lt;code&gt;strptime&lt;/code&gt; you can create a new object from any conceivable
date string, for setting the upper bounds on iterating over the days of a month we can use
&lt;code&gt;month_last_day&lt;/code&gt;, and there are many other convenient functions like this.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first 20 Perfect Totient Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant EPSILON =&gt; 1e-7;   

sub distinct_prime_factors{
    my $x = shift(@_); 
    my %factors;    
    for(my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        $factors{$y} = undef;
        redo;
    }
    return keys %factors;  
}

sub n_perfect_totients{
    my($n) = @_; 
    my $x = 1;
    my @perfect_totients;
    {
        $x++;
        my $totient = $x;
        my @totients;
        map {$totient *= (1 - (1 / $_))} distinct_prime_factors($x);   
        push @totients, $totient; 
        while(abs($totient - 1) &gt; EPSILON){
            map {$totient *= (1 - (1 / $_))} distinct_prime_factors($totient);   
            push @totients, $totient; 
        }  
        push @perfect_totients, $x if unpack("%32I*", pack("I*", @totients)) == $x;
        redo if @perfect_totients &lt; $n;
    }
    return @perfect_totients;
}

MAIN:{
    print join(", ", n_perfect_totients(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3, 9, 15, 27, 39, 81, 111, 183, 243, 255, 327, 363, 471, 729, 2187, 2199, 3063, 4359, 4375, 5571
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code may look deceptively simple. In writing it I ended up hitting a few blockers
that weren't obvious at first. The simplest one was my own misreading of how to compute
totients using prime factors. We must use &lt;em&gt;unique prime factors&lt;/em&gt;. To handle this I 
modified my prime factorization code to use a hash and by returning the keys we can get 
only the unique values. Next, while Perl is usually pretty good about floating point 
issues, in this case it was necessary to implement a standard &lt;em&gt;epsilon comparison&lt;/em&gt; to 
check that the computed totient was equal to 1. &lt;/p&gt;

&lt;p&gt;Actually, maybe I should say that such an &lt;em&gt;epsilon comparison&lt;/em&gt; is &lt;em&gt;always&lt;/em&gt; advised but 
in many cases Perl can let you get away without one. Convenient for simple calculations
but not a best practice!&lt;/p&gt;

&lt;p&gt;For doing serious numerical computing in Perl the best choice is of course to &lt;code&gt;use PDL&lt;/code&gt;!   &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Time::Piece"&gt;Time::Piece&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.planetmath.org/PerfectTotientNumber"&gt;Perfect Totient Number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-175/"&gt;Challenge 175&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc175</id>
    <published>2022-07-30T12:08:00-04:00</published>
    <updated>2022-07-30T12:08:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Numeric Variable Names With Leading Zeroes</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/07/numeric-variable-names-with-leading-zeroes.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10860</id>
    <published>2022-07-26T21:52:03Z</published>
    <updated>2022-07-26T21:54:10Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Over on the p5p mailing list, a user raised the issue that <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2022/07/msg264450.html">use of variable <code>$00</code> is an error starting with Perl 5.32</a>, and asked that this "regression" be fixed.</p>

<p>I have always understood that variables whose names begin with anything but an alphabetic or an underscore are reserved to Perl, and you mess with them at your peril. And this is the gist of the Porters&apos; response to the post. Recent versions of <a href="https://perldoc.perl.org/perlvar.html"><code>perlvar</code></a> say this explicitly, though earlier versions of that document restrict themselves to describing currently-implemented special variables.</p>

<p>For what it's worth, <a href="https://perldoc.perl.org/perl5320delta"><code>perl532delta</code></a> appears <strong>not</strong> to mention this as a new diagnostic.</p>

<p>I wondered how much of this kind of thing was in CPAN, so I whipped up a <code>Perl::Critic</code> policy to try to find them: <a href="https://github.com/trwyant/perl-Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero"><code>Variables::ProhibitNumericNamesWithLeadingZero</code></a>. I then ran this against CPAN as it stood July 23 2022.</p>

<p>The only violation of this policy that I found was in line 1209 of <a href="https://metacpan.org/pod/Net::Elexol::EtherIO24"><code>Net::Elexol::EtherIO24</code></a>. The most recent release of this module (as of this writing) is August 11 2009. The line in violation (in context) is</p>

<pre>
1208    $txt .= sprintf("MAC: %02.2x:%02.2x:02.2x:02.2x:02.2x:02.2x  ".
1209                    "Fw: %02.2x.$02.2x",
1210                    unpack("x$len CCCCCCCC", $cmd));
</pre>

<p>and looks to me very much like a typo for <code>%02.2x</code>. The distribution requires a threaded Perl, and CPAN Testers show failures with <code>Error:  Numeric variables with more than one digit may not start with '0' at Net-Elexol-EtherIO24-0.22-0/blib/lib/Net/Elexol/EtherIO24.pm line 1209.</code> for Perl versions 5.32.1 and above. There are no reports for 5.32.0.</p>

<p>Under the circumstances I can not imagine anyone (other than maybe the original poster on p5p) actually wanting this perlcritic policy published, but I did stick it on GitHub for the curious.</p>
]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 174: Disarium Numbers and Permutation Rankings</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-and-permutation-rankings.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10854</id>
    <published>2022-07-19T22:14:18Z</published>
    <updated>2022-07-26T12:38:01Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 174 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-174/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on July 24, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Disarium Numbers</h2>

<p><em>Write a script to generate first 19 Disarium Numbers.</em></p>

<blockquote>
  <p><em>A disarium number is an integer where the sum of each digit raised to the power of its position in the number, is equal to the number.</em></p>
</blockquote>

<p><em>For example,</em></p>

<pre><code>518 is a disarium number as (5 ** 1) + (1 ** 2) + (8 ** 3) =&gt; 5 + 1 + 512 =&gt; 518
</code></pre>

<p>In Raku and Perl, we&#8217;ll implicitly convert the input number into a string of characters (<code>@digits</code>), split it into an array of characters, and then implicitly convert each character into a digit.  In some other languages such as awk, bc, or C, such implicit conversion don&#8217;t happen or are tedious, and we will use mathematical computations to get the individual digits.</p>

<h3>Disarium Numbers in Raku</h3>

<p>This is quite straight forward. We have a <code>is-disarium</code> subroutine which returns a True value is the described sum is equal to the input value, and False otherwise.  Then we use it to test each subsequent integer from 0 on and print out the number if it is a disarium number. We stop when we reach 19 disarium numbers.</p>

<pre><code>sub is-disarium($num) {
    my @digits = $num.comb;
    my $sum = [+] map { $^b ** ($^a + 1) }, @digits.kv;
    return $num == $sum;
}
my $count = 0;
my $i = 0;
while $count &lt; 19 {
    ++$count and say $i if is-disarium($i);
    $i++;
    # say "i: $i";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
2646798
</code></pre>

<p>This program took 0.4 second to find the first 18 disarium numbers, and then more than 4 minutes to find the 19th one. I have to confess that, for years, I have been too lazy to upgrade my Rakudo installation, which dates from 2019. This time, I decided it was high time to upgrade it and installed version 2022.06 to see what happens.</p>

<p>The good news is that, with this new version, the program ran in about 45 seconds. More than five times faster, that&#8217;s a rather impressive improvement. The bad news, though, is that it&#8217;s  still very slow. The equivalent Perl and Python programs (see below) both took slightly less than 10 seconds, the Julia implementation ran in 3 seconds, and the C program completed in less than half a second. There is definitely a large opportunity for performance improvement. I love Raku, but I must admit that, in terms or performance, it is currently not good at intensive number crunching.</p>

<h3>Disarium Numbers in Perl</h3>

<p>This is a port to Perl of the Raku program just above, with a <code>is_disarium</code> subroutine to find is the input integer is a disarium number.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_disarium {
    my $num = shift;
    my @digits = split '', $num;
    my $i = 1;
    my $sum = 0;
    $sum += $_ for map {  $_ ** $i++ } @digits;
    return $num == $sum;
}
my $i = 0;
my $count = 0;
while ($count &lt; 19) {
    say $i and $count++ if is_disarium $i;
    $i++;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl ./disarium.pl

0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798

real    0m9,781s
user    0m9,625s
sys     0m0,046s
</code></pre>

<h3>Disarium Numbers in Julia</h3>

<p>Julia has the built-in <code>digits</code> function, which produces a list of digits of the input number (in the wrong order for our purpose), and <code>enumerate</code> iterator, which yields a list of indexes and values. These functions make the <code>is_disarium</code> function very simple (it could easily be written in one single code line).</p>

<pre><code>function is_disarium(n)
    s = sum(i ^ p for (p, i) in enumerate(reverse(digits(n))))
    return s == n
end

count = 0
i = 0
while count &lt; 19
    if is_disarium(i)
        println(i)
        global count += 1
    end
    global i += 1
end
</code></pre>

<p>Output:</p>

<pre><code>julia ./disarium.jl
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in awk</h3>

<p>The awk language doesn&#8217;t have the powerful string functions of Raku, Perl, or Julia. In the <code>while</code> loop of the <code>is_disarium</code> function, we use the integer division and modulo operators to get each digit of the input integer in turn. </p>

<pre><code>function is_disarium(num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = int(n/10)
        len--
    }
    return (sum == num)
}

BEGIN {
    count = 0
    i = 0
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d\n", i)
            count++
        }
        i++
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f ./disarium.awk
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in bc</h3>

<p>This program is very similar to the awk program just above, with the same method to access the individual digits.</p>

<pre><code>define is_disarium (num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = n/10
        len -= 1
    }
    return (sum == num)
}

count = 0
i = 0
while (count &lt; 19) {
    if (is_disarium(i)) {
        print i, "\n"
        count += 1
    }
    i += 1
}
quit
</code></pre>

<p>Output:</p>

<pre><code>$ bc  ./disarium.bc
bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'.
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in dc</h3>

<p>The problem can be solved with a dc one-liner (spread over two lines for formatting reasons):</p>

<pre><code>$ dc -e '[10/ll1+sld0&lt;Lx] sL [d10%ll^ls+ss10/ll1-sld0&lt;Dx] sD [lc1+sc
lnp] sP [lisnln0sllLx0ssclnlDxlsln=Pli1+silc18&gt;Ix] sI0si0sclIx'
0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
</code></pre>

<p>Note that I only printed 18 numbers because this is getting really slow.</p>

<p>This is not a golf attempt: I could have removed a few spaces if I had wanted to golf it. </p>

<p>But I must admit dc scripts are not easy to read. This is now a much more readable version of the same solution:</p>

<pre><code># Macro for computing the input number length
[10      # pushes 10 to stack
 /       # divides input by 10 and stores result on stack
 ll      # push length on stack
 1+      # add one to stack (length)
 # p     # prints intermediate length (for debugging)
 sl      # saves length to register l
 d       # duplicates value (number) on top of stack
 0       # pushes 0 to stack
 &lt;Lx     # executes length macro (L) if number &gt; 0
] sL     # end of length macro, store it in L

# is Disarium macro
[d      # duplicates value (number) on top of stack
10      # pushes 10 to stack
%       # pushes (number % 10) to stack
ll      # pushes length to stack
^       # computes (n % 10) ^ len
ls      # pushes sum to stack
+ss     # computes new sum and stores it in s
10/     # integer division number / 10
ll      # pushes length on stack
1-      # subtract 1 froml length
sl      # stores new length in l
d       # duplicates value (number) on top of stack
0       # pushes 0 to stack
&lt;Dx     # executes recursively disarium macro (D) if number &gt; 0
] sD    # stores disarium macro in D

# Printing and counting macro
[lc1+sc # increments disarium number counter
lnp     # print number
]sP # Stores printing macro in P

# Iteration macro
[li sn  # Stores iteration variable in number register
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # inititialize sum to 0
cln     # clear stack and pushes number onto it
# llp   # print the length
lDx     # runs the Disarium macro once
lsln    # pushes sum and number
=P      # runs the printing macro if numbers are equal
li      # loads iteration variable
1+si    # increments iteration variable
lc18    # pushes counter and 18 on stack
&gt;Ix     # runs recursively iteration macro if counter &lt; 18
] sI    # end of iteration macro, stores it in I 

# Main
0si     # Initiate iteration variable
0sc     # Initiate disarium numbers counter
lIx     # running iteration macro the first time
</code></pre>

<p>Output:</p>

<pre><code>$ dc disarium.dc
0
1
2
3
[Lines omitted for brevity]
1306
1676
2427
</code></pre>

<p>Understanding the solution in details would require a lot more explanations than what I can provide here. If you want to understand better how this program works and, more broadly, how the dc syntax works, you are kindly invited to read <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-in-dc.html">this other blog post</a> where I describe the solution in detail.</p>

<h3>Disarium Numbers in C</h3>

<p>The C programming language doesn&#8217;t have a standard exponentiation operator. So I wrote a <code>power</code> function to perform exponentiation of individual digits. There is also no direct way to find the number of digits of an integer. So, I used <code>floor(log10(n)) + 1</code> to find the size of an integer <code>n</code>, except that it would fail for an input of 0, so I used this method only for integers larger than 9.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int power (int base, int exponent) {
    int result = 1;
    for (int i = 1; i &lt;= exponent; i++) {
        result *= base;
    }
    return result;
}

int is_disarium (int num) {
    int n = num;
    int sum = 0;
    int len = n &lt;= 9 ? 1 : floor(log10(n)) + 1;
    while (n &gt; 0) {
        sum += power(n % 10, len);
        n /= 10;
        len--;
    }

    return num == sum;
}

int main() {
    int count = 0;
    int i = 0;
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d\n", i);
            count++;
        }
        i++;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ time ./a.out
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798

real    0m0,475s
user    0m0,280s
sys     0m0,015s
</code></pre>

<h3>Disarium Numbers in Python</h3>

<p>Also using the integer division and modulo operators to get each digit of the input integer.</p>

<pre><code>def is_disarium(num):
    n = num
    size = len(str(n))
    sum = 0
    while n &gt; 0:
        sum += (n % 10) ** size
        n //= 10
        size -= 1
    return sum == num

i = 0
count = 0
while count &lt; 19:
    if is_disarium(i):
        print(i)
        count += 1
    i += 1
</code></pre>

<p>Output:</p>

<pre><code>$ python3 disarium.py
0
1
2
3
[Lines omitted for brevity]
1306
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in Ruby</h3>

<pre><code>def is_disarium(num)
    n = num.to_s
    sum = 0
    for i in 1..(n.length)
        sum += n[i-1].to_i**i
    end
    return sum == num
end

i = 0
count = 0
while count &lt; 19
    if is_disarium(i)
        printf("%d ", i)
        count += 1
    end
    i += 1
end
print("\n")
</code></pre>

<p>From now on, our programs will display the disarium numbers on one line to save space: </p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Kotlin</h3>

<p>Kotlin has a <code>pow</code> function for exponentiation, but it works with <code>Double</code> and <code>Float</code> leading to numerous time-consuming difficulties. I ended up writing my own <code>power</code> functions for integers.</p>

<pre><code>fun power(n: Int, exp: Int): Int {
    return when {
        exp &gt; 1 -&gt; n * power(n, exp-1)
        exp == 1 -&gt; n
        else -&gt; 1
    }
}
fun is_disarium(num: Int): Boolean {
    val n = num.toString()
    var sum = 0
    for (i in 1..n.length) {
        sum += power (n[i-1] - '0', i)
    }
    return sum == num
}
fun main() {
    var i = 0
    var count = 0
    while (count &lt; 19) {
        if (is_disarium(i)) {
            print("$i ")
            count++
        }
        i++
    }
    println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Rust</h3>

<p>I don&#8217;t really like Rust because, in my humble opinion, its type system is really an obstructive straitjacket and gets in the way of doing simple things. Just like in Kotlin, I ended up writing my own <code>power</code> functions for exponentiating integers.</p>

<pre><code>fn power(n: i32, exp: i32) -&gt; i32 {
    let mut result = 1;
    for _i in 0..exp {
        result *= n;
    }
    return result;
}
fn is_disarium(num: i32) -&gt; bool {
    let mut n = num;
    let mut sum = 0;
    let mut i = 1;
    let len = num.to_string().len();
    while n &gt; 0 {
        sum += power(n % 10, len as i32 - i + 1);
        n /= 10;
        i += 1
    }
    return sum == num;
}
fn main() {
    let mut i = 0;
    let mut count = 0;
    while count &lt;= 18 {
        if is_disarium(i) {
            print!("{} ", i);
            count += 1;
        }
        i += 1;
    }
    println!("{}", " ")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Java</h3>

<pre><code>import java.lang.Math;

public class DisariumNumbers {
    public static boolean is_disarium(int num) {
        int n = num;
        int len = Integer.toString(n).length();
        int sum = 0;
        int i = 1;
        while (n &gt; 0) {
            sum += Math.pow(n % 10, len - i + 1);
            n /= 10;
            i ++;
        }
        return sum  == num;
    }

    public static void main(String[] args) {
        int i = 0;
        int count = 0;
        while (count &lt;= 18) {
            if (is_disarium(i)) {
                System.out.printf("%d ", i);
                count++;
            }
            i++;
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Scala</h3>

<pre><code>object Disarium extends App {
  def power(base: Int, exp: Int): Int = {
    var result = 1
    for (i &lt;- 1 to exp) {
      result *= base
    }
    return result
  }
  def is_disarium(num: Int): Boolean = {
    val digits = num.toString.split("")
    var sum = 0
    for (i &lt;- 0 to (digits.size - 1)) {
      sum += power(digits(i).toInt, i + 1)
    }
    return num == sum
  }
  var i = 0
  var count = 0
  while (count &lt; 19) {
    if (is_disarium(i)) {
      count += 1
      printf("%d ", i)
    }
    i += 1
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Ring</h3>

<pre><code>i = 0
count = 0
while count &lt; 19
    if is_disarium(i)
        see "" + i + " "
        count++
    ok
    i++
end    
see nl

func pow (base, exp)
    result = 1
    for i = 0 to exp - 1
        result *= base
    next
    return result

func is_disarium (num)
    n = "" + num
    sum = 0
    for i = 1 to len(n)
        sum += pow (n[i] % 10, i)
    next
    return sum = num
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./disarium.ring
0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Nim</h3>

<pre><code>import strutils
import math

proc is_disarium(num: int): bool =
  let n = intToStr(num)
  var sum = 0
  for i in 0..len(n)-1:
    sum += int((int(n[i])-48) ^ (i+1))
  return sum == num

var i = 0
var count = 0
while count &lt; 19:
  if is_disarium(i):
    stdout.write i, " "
    count += 1
  i += 1
echo ""
</code></pre>

<p>Output:</p>

<p>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798 </p>

<h3>Disarium Numbers in Go</h3>

<pre><code>package main

import (
    "fmt"
    "math"
    "strconv"
)

func is_disarium(num int) bool {
    n := num
    i := 0
    sum := 0
    l := len(strconv.Itoa(n))
    for n &gt; 0 {
        sum += int(math.Pow(float64(n%10), float64(l-i)))
        n /= 10
        i++
    }
    return sum == num
}
func main() {
    i := 0
    count := 0
    for count &lt; 19 {
        if is_disarium(i) {
            fmt.Printf("%d ", i)
            count++
        }
        i++
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Tcl</h3>

<p>I used to be a fan of Tcl some 25 to 30 years ago, not that I really loved Tcl itself, but because it came usually bundled with the Tk graphical toolkit, and I really loved Tk, which made fairly easy the design and implementation of graphical interfaces. But I wasn&#8217;t really impressed at the time by its shell-looking syntax and, often, I wasn&#8217;t quite sure whether I should add a <code>$</code> sign before a variable name or not, or whether I should use <code>[...]</code>, <code>(...)</code>, or <code>{...}</code>. Now, more than a quarter of century later, I have forgotten most if not all the details about the syntax, and I find it quite difficult to use and somewhat awkward (but perhaps it is my own prejudice). Still, I&#8217;m posting this Tcl implementation as a kind of tribute to John Ousterhout, the blessed creator of Tcl-Tk.</p>

<pre><code>proc is_disarium {num} {
    set n num
    set sum 0
    set i 1
    set ch 1
    foreach char [split $num {}] {
        scan $char %d ch
        set sum [ expr ($sum + $ch ** $i)]
        incr i
    }
    return [ expr $num == $sum ? 1 : 0]
}
set i 0
set count 0
while { $count &lt; 19 } {
    if [ is_disarium $i ] {
        puts -nonewline  "${i} "
        incr count
    }
    incr i
}
puts ""
</code></pre>

<p>Output:</p>

<pre><code>$ tclsh ./disarium.tcl
0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in D</h3>

<pre><code>import std.stdio;
import std.math;
import std.conv;

bool is_disarium(int num) {
    int n = num;
    int sum = 0;
    ulong len = to!string(num, 10).length;
    while (n &gt; 0) {
        sum += pow(n % 10, len);
        n /= 10;
        len--;
    }
    return num == sum;
}
void main() {
    int i = 0;
    int count = 0;
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d ", i);
            count++;
        }
        i++;
    }
    writeln(" ");
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Dart</h3>

<pre><code>import "dart:math";
import "dart:io";
void main() {
    var count = 0;
    var i = 0;
    while (count &lt; 19) {
        if (is_disarium(i)) {
            stdout.write("$i ");
            count++;
        }
        i++;
    }
}

bool is_disarium(numb) {
    var n = numb;
    var len = n.toString().length;
    var sum = 0;
    while (n &gt; 0) {
        sum += (pow(n % 10, len)).toInt();
        n = (n / 10).toInt();
        len--;
    }
    return numb == sum;
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in JavaScript</h3>

<pre><code>function is_disarium (num) {
    let n = num
    let len = n.toString().length
    let sum = 0
    while (n &gt; 0) {
        sum += (n % 10) ** len
        n = parseInt(n / 10, 10)
        len--
    }
    return num == sum
}
let count = 0
let i = 1
while (count &lt; 18) {
    if (is_disarium(i)) {
        process.stdout.write(i + " ")
        count++
    }
    i++
}
</code></pre>

<p>Output:</p>

<p>1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798 </p>

<h2>Task 2: Permutation Ranking</h2>

<p><em>You are given a list of integers with no duplicates, e.g. <code>[0, 1, 2]</code>.</em></p>

<p><em>Write two functions, <code>permutation2rank()</code> which will take the list and determine its rank (starting at 0) in the set of possible permutations arranged in lexicographic order, and <code>rank2permutation()</code> which will take the list and a rank number and produce just that permutation.</em></p>

<p><em>Please checkout this <a href="https://tryalgo.org/en/permutations/2016/09/05/permutation-rank">post</a> for more informations and algorithm.</em></p>

<p><em>Given the list <code>[0, 1, 2]</code> the ordered permutations are:</em></p>

<pre><code>0: [0, 1, 2]
1: [0, 2, 1]
2: [1, 0, 2]
3: [1, 2, 0]
4: [2, 0, 1]
5: [2, 1, 0]
</code></pre>

<p><em>and therefore:</em></p>

<pre><code>permutation2rank([1, 0, 2]) = 2

rank2permutation([0, 1, 2], 1) = [0, 2, 1]
</code></pre>

<p>Given that dealing with integers, I do not understand why permutations should be arranged in lexicographic order. I would expect permutation <code>[9, 11]</code> to be before permutation <code>[11, 9]</code>, but lexicographic order would arrange them the other way around: <code>[11, 9], [9, 11]</code>. Well, it doesn&#8217;t really matter and we will use in our tests only single digit integers to avoid bizarre results. I&#8217;ll even use a test with single letters to show that my implementation also works with letters.</p>

<p>The second thing is that since my implementation of <code>permutation2rank</code> creates an ordered array of permutations, we don&#8217;t really need the <code>rank2permutation</code> subroutine to find the permutation with rank <code>n</code>, since I only need to lookup the array. I&#8217;ll create the <code>rank2permutation</code> subroutine nonetheless, just to abide with the specification.</p>

<h3>Permutation Ranking in Raku</h3>

<p>In Raku, the <code>permutations</code> method will create permutations in the proper order provided the input permutation is itself in the right order. So we only need to sort the input permutation at the beginning.</p>

<pre><code>my @permut_str;

sub permutation2rank(@in) {
    # if the input list is sorted, then permutations will be sorted
    # Forcing a lexicographic order (although not really needed here)
    my @sorted = sort { $^a leg $^b }, @in;
    my @permutations = @sorted.permutations;
    @permut_str = map {[join " ", $_]}, @permutations;
    my %ranks = map { $^b =&gt; $^a }, @permut_str.kv;
}
sub rank2permutations ($rank) {
    return @permut_str[$rank];
}

my @tests = (1, 0, 2), (6, 3, 4), &lt;a c d b&gt;;
for @tests -&gt; @test {
    my %ranks = permutation2rank(@test);
    say @permut_str;
    my $test = join " ", @test;
    say "[$test] has rank %ranks{$test}";
    say "Rank %ranks{$test} is ", rank2permutations(%ranks{$test});
    say "Rank {%ranks{$test} - 1} is ", rank2permutations(%ranks{$test} - 1);
    say "";
}
</code></pre>

<p>Note that we are also printing the sorted permutations to enable easy verification of the results.</p>

<p>This program displays the following output:</p>

<pre><code>$ raku ./permute_ranks.raku
[[0 1 2] [0 2 1] [1 0 2] [1 2 0] [2 0 1] [2 1 0]]
[1 0 2] has rank 2
Rank 2 is [1 0 2]
Rank 1 is [0 2 1]

[[3 4 6] [3 6 4] [4 3 6] [4 6 3] [6 3 4] [6 4 3]]
[6 3 4] has rank 4
Rank 4 is [6 3 4]
Rank 3 is [4 6 3]

[[a b c d] [a b d c] [a c b d] [a c d b] [a d b c] [a d c b] [b a c d] [b a d c] [b c a d] [b c d a] [b d a c] [b d c a] [c a b d] [c a d b] [c b a d] [c b d a] [c d a b] [c d b a] [d a b c] [d a c b] [d b a c] [d b c a] [d c a b] [d c b a]]
[a c d b] has rank 3
Rank 3 is [a c d b]
Rank 2 is [a c b d]
</code></pre>

<h3>Permutation Ranking in Perl</h3>

<p>Perl has no built-in function to create permutations, so we implement the recursive <code>permute</code> subroutine to do that. Note that we designed it in such a way as to create the permutations in the right order, provided the input permutation is itself in the proper order.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;

my @permutations;

sub permute {
    my ($done, $left) = @_;
    if (scalar @$left == 0) {
        push @permutations, $done;
        return;
    }
    my @left = @$left;
    permute([ @$done, $left[$_]], [@left[0..$_-1], @left[$_+1..$#left]]) for 0..$#left;
}

sub permutation2rank {
    # if the input list is sorted, then permutations will be sorted
    # This will be in lexicographic order, even for numbers
    my @sorted = sort @_;
    permute([], [@sorted]);
    my @permut_str = map {join " ", @$_} @permutations;
    my $count = 0;
    my %ranks = map { $_ =&gt; $count++ } @permut_str;
}

sub rank2permutations {
    return (map {join " ", @$_} @permutations)[$_[0]];
}

my @tests = ( [1, 0, 2], [6, 3, 4], [&lt;a d c b&gt;]);
for my $test (@tests) {
    @permutations = ();
    my %ranks = permutation2rank (@$test);
    my $test_str = join " ", @$test;
    say "Rank of [$test_str] is: $ranks{$test_str}";
    for my $i (2, 4, 5) {
        say "Rank $i is [", rank2permutations ($i), "]";
    }
    say " ";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./permute_ranks.pl
Rank of [1 0 2] is: 2
Rank 2 is [1 0 2]
Rank 4 is [2 0 1]
Rank 5 is [2 1 0]

Rank of [6 3 4] is: 4
Rank 2 is [4 3 6]
Rank 4 is [6 3 4]
Rank 5 is [6 4 3]

Rank of [a d c b] is: 5
Rank 2 is [a c b d]
Rank 4 is [a d b c]
Rank 5 is [a d c b]
</code></pre>

<h3>Permutation Ranking in Julia</h3>

<p>Note that Julia array subscripts start at 1, not 0. Therefore, the ranks are shifted by 1 compared to other languages and the output differs accordingly. It would be easy to fix that, but I preferred to keep the Julia semantic.</p>

<pre><code># Note: Julia array subscripts start at 1, not 0
using Combinatorics

function permute(in_list)
    return collect(permutations(sort(in_list), length(in_list)))
end

function permutation2rank(perms, input)
    for i in 1:length(perms)
        if perms[i] == input
            return i
        end
    end
end

function rank2permutation(perm_list, index)
    return perm_list[index]
end

perm_in = [3, 1, 2]
perms = permute(perm_in)
println("Permutations: ", perms)
println("Permutation ", perm_in, " -&gt; rank ", permutation2rank(perms, perm_in))
for i in 1:length(perms)
    println("Rank: ", i, " -&gt; permutation ", rank2permutation(perms, i))
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./permute_ranks.jl
Permutations: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
Permutation [3, 1, 2] -&gt; rank 5
Rank: 1 -&gt; permutation [1, 2, 3]
Rank: 2 -&gt; permutation [1, 3, 2]
Rank: 3 -&gt; permutation [2, 1, 3]
Rank: 4 -&gt; permutation [2, 3, 1]
Rank: 5 -&gt; permutation [3, 1, 2]
Rank: 6 -&gt; permutation [3, 2, 1]
</code></pre>

<h3>Permutation Ranking in Python</h3>

<p>Comparing two arrays with the <code>==</code> operator doesn&#8217;t seem to work in Python. There may be a better way to compare arrays, but I decided to stringify the arrays and to compare the resulting strings.</p>

<pre><code>def stringify(input):
  return " ".join(map(str, input))

def permute(input):
  temp = input.copy() # avoid modifying input perm with the sort
  temp.sort()
  return list(itertools.permutations(temp))

def permutation2rank(perms, input):
  perms_str = map(stringify, perms)
  input_str = stringify(input)
  for index, value in enumerate(perms_str):
    if value == input_str:
      return index 

def rank2permutation(permutation, rank):
  return permutation[rank]

perm = [3, 1, 2]
perms = permute(perm)
print("Permutations: ", str(perms))
rank = permutation2rank(perms, perm)
print("Permutation ", perm, " -&gt; rank ", rank)
for i in range(0, len(perms)):
  print("Rank: ", i, " -&gt; permutation ", rank2permutation(perms, i))
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./permute_ranks.py
Permutations:  [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
Permutation  [3, 1, 2]  -&gt; rank  4
Rank:  0  -&gt; permutation  (1, 2, 3)
Rank:  1  -&gt; permutation  (1, 3, 2)
Rank:  2  -&gt; permutation  (2, 1, 3)
Rank:  3  -&gt; permutation  (2, 3, 1)
Rank:  4  -&gt; permutation  (3, 1, 2)
Rank:  5  -&gt; permutation  (3, 2, 1)
</code></pre>

<h3>Permutation Ranking in Ruby</h3>

<pre><code>def permute(in_list)
    return in_list.sort.permutation(in_list.length).to_a
end

def permutation2rank(perms, input)
    for i in 0..perms.length - 1
        if perms[i] == input
            return i
        end
    end
end

def rank2permutation(perms, index)
    return perms[index]
end

perm_in = [3, 1, 2]
perms = permute(perm_in)
puts("Permutations: #{perms} \n")
print("Permutation #{perm_in} -&gt; rank  #{permutation2rank(perms, perm_in)} \n")
for i in 1..perms.length - 1
    print("Rank:  #{i} -&gt; permutation  #{rank2permutation(perms, i)} \n")
end
</code></pre>

<p>Output:</p>

<pre><code>Permutations: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 
Permutation [3, 1, 2] -&gt; rank 4
Rank: 1 -&gt; permutation [1, 3, 2]
Rank: 2 -&gt; permutation [2, 1, 3]
Rank: 3 -&gt; permutation [2, 3, 1]
Rank: 4 -&gt; permutation [3, 1, 2]
Rank: 5 -&gt; permutation [3, 2, 1]
</code></pre>

<h3>Permutation Ranking in Javascript</h3>

<p>JavaScript doesn&#8217;t seem to have a built-in permutation function. The <code>permute</code> function in the program below is derived from <a href="https://stackoverflow.com/questions/9960908/permutations-in-javascript">this Stack Overflow page</a>. I liked it because of its functional style. When I used JavaScript around 2003-04 for Web page development, I did not like too much its somewhat clunky syntax. Taking a fresh look at it nowadays really changes my perception, it appears that the language has really improved in the meantime. I&#8217;ll try to look deeper into it as soon as I get some free time.</p>

<pre><code>function permute(inputArray) {
    let inAry = [...inputArray].sort(); //copy and sort input
    return inAry.reduce(function permute(res, item, key, arr) {
        return res.concat(arr.length &gt; 1 &amp;&amp; arr.slice(0, key)
            .concat(arr.slice(key + 1))
            .reduce(permute, [])
            .map(function (perm) {
                 return [item].concat(perm);
            }) || item);
    }, []);
}

function permutation2rank(perms, in_perm) {
    let input = JSON.stringify(in_perm)
    for (var i = 0; i &lt; perms.length; i++) {  
        // stringify permutations to enable comparison
        if (JSON.stringify(perms[i]) == input) {
            return i
        }
    }
}

function rank2permutation(perm_list, index) {
    return perm_list[index]
}

let perm_in = [3, 1, 2];
let perms = permute(perm_in)
console.log(perms)
let rank = permutation2rank(perms, perm_in)
console.log("Permutation", perm_in, "has rank", rank)
for (var i = 0; i &lt; perms.length; i++) {
    console.log("Rank: ", i, " -&gt; permutation ", rank2permutation(perms, i))
}
</code></pre>

<p>Output:</p>

<pre><code>node /tmp/CUuyiMw4x0.js
[ [ 1, 2, 3 ],
[ 1, 3, 2 ],
[ 2, 1, 3 ],
[ 2, 3, 1 ],
[ 3, 1, 2 ],
[ 3, 2, 1 ] ]
Permutation [ 3, 1, 2 ] has rank 4
Rank:  0  -&gt; permutation  [ 1, 2, 3 ]
Rank:  1  -&gt; permutation  [ 1, 3, 2 ]
Rank:  2  -&gt; permutation  [ 2, 1, 3 ]
Rank:  3  -&gt; permutation  [ 2, 3, 1 ]
Rank:  4  -&gt; permutation  [ 3, 1, 2 ]
Rank:  5  -&gt; permutation  [ 3, 2, 1 ]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on July 31, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 174: Disarium Numbers in dc</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-in-dc.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10859</id>
    <published>2022-07-26T02:48:37Z</published>
    <updated>2022-07-26T03:06:48Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>This blog is an answer to the first task (Disarium Numbers) of the Week 174 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-174/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p>Originally, the Perl Weekly Challenge called for solutions in Perl and Raku (also known as Perl 6 at the time). But, very soon, people started to provide solutions in other &#8220;guest&#8221; languages. See for example <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-and-permutation-rankings.html">my blog post</a> providing solutions to the task described below in about 18 different guest languages.</p>

<p>One of the languages I tried for the first time last week with Sylvester&#8217;s sequence is <em>dc</em>, and it turned out to be much more difficult and challenging than I initially thought. One of the problems is that there is only very limited documentation on this <em>old</em> programming language. So I thought it might be useful to describe in some details how I solved it. I provided detailed explanations <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-173-sylvesters-sequence-in-dc.html">in this other blog post</a>. I&#8217;ll now do the same with the disarium number task of this week, which is a bit more complicated.</p>

<h2>The Disarium Number Task of Perl Weekly Challenge 174</h2>

<p><em>Write a script to generate first 19 Disarium Numbers.</em></p>

<blockquote>
  <p><em>A disarium number is an integer where the sum of each digit raised to the power of its position in the number, is equal to the number.</em></p>
</blockquote>

<p><em>For example,</em></p>

<pre><code>518 is a disarium number as (5 ** 1) + (1 ** 2) + (8 ** 3) =&gt; 5 + 1 + 512 =&gt; 518
</code></pre>

<h2>Disarium Numbers in Some Other Languages</h2>

<p>The <em>dc</em> language is difficult and poorly documented. Before we get to it, I want to illustrate the algorithm I&#8217;ll implement with some other more traditional languages.</p>

<p>You can find solutions to this problem in 17 programming languages in <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-and-permutation-rankings.html">this other blog post</a>. I&#8217;ll show two of them below.</p>

<h3>Disarium Numbers in Raku</h3>

<pre><code>sub is-disarium($num) {
    my @digits = $num.comb;
    my $sum = [+] map { $^b ** ($^a + 1) }, @digits.kv;
    return $num == $sum;
}
my $count = 0;
my $i = 0;
while $count &lt; 19 {
    ++$count and say $i if is-disarium($i);
    $i++;
    # say "i: $i";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in Perl</h3>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_disarium {
    my $num = shift;
    my @digits = split '', $num;
    my $i = 1;
    my $sum = 0;
    $sum += $_ for map {  $_ ** $i++ } @digits;
    return $num == $sum;
}
my $i = 0;
my $count = 0;
while ($count &lt; 19) {
    say $i and $count++ if is_disarium $i;
    $i++;
}
</code></pre>

<p>This Perl program displays the same output as the Raku program above.</p>

<h3>Disarium program in awk</h3>

<p>The dc language doesn&#8217;t have the powerful string functions of Raku, Perl, or Julia. Let me provide here an awk implementation, because awk also doesn&#8217;t have these string functions. In the <code>while</code> loop of the <code>is_disarium</code> function, we use the integer division and modulo operators to get each digit of the input integer in turn. We&#8217;ll have to do something similar in dc. </p>

<pre><code>function is_disarium(num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = int(n/10)
        len--
    }
    return (sum == num)
}

BEGIN {
    count = 0
    i = 0
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d\n", i)
            count++
        }
        i++
    }
}
</code></pre>

<p>This awk program displays the same output as the Raku program above.</p>

<h2>Introducing dc</h2>

<p>According to <a href="https://en.wikipedia.org/wiki/Dc_(computer_program">Wikipedia</a>), dc (desk calculator) is a cross-platform reverse-Polish calculator which supports arbitrary-precision arithmetic. Written by Lorinda Cherry and Robert Morris at Bell Labs, it is one of the oldest Unix utilities, preceding even the invention of the C programming language. dc is docucumented in section 2 of the first ediion of Bell Labs&#8217;s  <a href="https://www.bell-labs.com/usr/dmr/www/man12.pdf">Unix Programmer&#8217;s Manual</a> published on Nov 3, 1971, so dc was probably written in 1970 or latest in 1971. Like other utilities of that vintage, it has a powerful set of features but terse syntax. Traditionally, the bc calculator program (with infix notation) was implemented on top of dc. </p>

<p>dc is the oldest surviving Unix language program. When its home Bell Labs received a PDP-11, dc—written in B—was the first language to run on the new computer, even before an assembler.</p>

<p>It uses reverse Polish notation (RPN) which was also used around the same time by Hewlett-Packard pocket calculators. Actually, the main reason I am interested with dc (despite its awful worse-than-assembler syntax) is that this is essentially the type of language with which I first learned to program back in the mid-1970s with a programmable pocket calculator.</p>

<p>RPN is a postfix notation in which you first specify the operands and then the operator. </p>

<pre><code>$ echo '5 6 + p' | dc
11
</code></pre>

<p>As you can see, we first input the two operands (5 and 6), and then the <code>+</code> operator, and finally the <code>p</code> operator to print out the result of the addition. Prefix your number with an underscore if you want to specify a negative number (e.g. <code>_5</code> for -5)</p>

<p>The spaces are not needed (except between 5 and 6) but improve readability. We could have written it this way:</p>

<pre><code>$ echo '5 6+p' | dc
11
</code></pre>

<p>dc can also be used in interactive mode:</p>

<pre><code>$ dc
5 6
+
p
11
q
</code></pre>

<p>or:</p>

<pre><code>$ dc
5 6 + p q
11
</code></pre>

<p>This can be quite convenient to test chunks of code and we will use that feature.</p>

<p>We can also use the <code>-e</code> (or <code>--expression</code>) command-line option to specify a simple program between single quotes:</p>

<pre><code>$ dc -e '5 6 + p'
11
</code></pre>

<p>dc uses a <em>stack</em> to perform its operations. Stacks are very commonly used data structure in computer science. A stack is a <em>last in / first out</em> data structure. Think of piled-up plates. When you put a clean plate on the stack, you usually put it on top; when you take one out, you also take it from the top. So, the first plate that you take out is the last one that you added. The dc stack implements the same idea: the first piece of data you take out is the last one you added. Adding a new piece of data onto the stack is usually called a <em>push</em> operation, and taking out one piece of data from the stack is called a <em>pop</em> operation.</p>

<p>The various commands above can be understood as follows:</p>

<pre><code>$ dc
5   # push 5 to stack
6   # push 6 to stack
f   # display stack (displays 6 and 5). Useful for debugging
6
5
+   # pop two items from stack, add them and push result to stack
p   # print top item of the stack (prints 11)
11
q   # quit
</code></pre>

<p>Note that the <code>#</code> sign indicates the beginning of a comment (the rest of the line is ignored).</p>

<p>For full details on the dc syntax, please consult the <a href="http://www.gnu.org/software/bc/manual/dc-1.05/html_mono/dc.html">dc GNU manual</a>. We will describe here only the most common commands, those that we are likely to use for our program. The best tutorial I have found on dc is <a href="https://en.wikipedia.org/wiki/Dc_(computer_program">the Wikipedia dc page</a>).</p>

<h3>Printing Commands</h3>

<pre><code>p   Prints the value on the top of the stack, not altering the stack. 
n   Prints the value on the top of the stack, popping it off
f   Prints the entire contents of the stack without altering anything.
</code></pre>

<h3>Stack Control</h3>

<pre><code>c   Clears the stack, rendering it empty
d   duplicate the value on top of the stack
r   Reverses the order of (swaps) the top two values on the stack.
</code></pre>

<h3>Registers</h3>

<p>dc provides at least 256 memory registers, each named by a single character. You can store a number in a register and retrieve it later. </p>

<pre><code>sr  Pops the value off the top of the stack, stores it in register r. 
lr  Copies the value in register r, and pushes it onto the stack.
    This does not alter the contents of r.
</code></pre>

<p>Each register also contains its own stack. The current register value is the top of the register&#8217;s stack. If you want to use a register r as a stack, use <code>Sr</code> (with uppercase S) to push the top of stack value to r, and <code>Lr</code> (with uppercase L) to pop a value from r and push it on the main stack. We will not use the stack features of registers in this blog post.</p>

<h3>Arithmetic</h3>

<pre><code>+   Pops two values off the stack, adds them, and pushes the result.
-   Pops two values, subtracts the first one popped from the second 
    one popped, and pushes the result. 
*   Pops two values, multiplies them, and pushes the result.
/   Pops two values, divides the second one popped from the first 
    one popped, and pushes the result. The number of fraction digits 
    is specified by the precision value. Default is integer division.
%   Pops two values, computes the remainder of the division that 
    the `/` command would do, and pushes that.
^   Pops two values and exponentiates, using the first value popped 
    as the exponent and the second popped as the base.
</code></pre>

<h3>Strings</h3>

<p>dc can operate on strings as well as on numbers. The only things you can do with strings are print them and execute them as macros (which means that the contents of the string are processed as dc commands). </p>

<p>For example, to print twice a string in the interactive mode:</p>

<pre><code>$ dc
[Hello wolrd!]p
Hello wolrd!
p
Hello wolrd
</code></pre>

<p>or:</p>

<pre><code>$ dc
[Hello wolrd!]pp
Hello wolrd!
Hello wolrd!
</code></pre>

<p>Now, let&#8217;s try to write a simple string containing dc statements to increment by 2 the value on the stack, and to run it as a macro (using the <code>x</code> command):</p>

<pre><code>$ dc
20          # pushes 20 to stack
[2 + p] x   # [2 + p] is a string that means "push 2 to stack,
            # add the two top items of the stack and print result.
            # x runs the [2 + p] sting as a macro
22
q
</code></pre>

<p>Both registers and the stack can hold strings, and dc always knows whether any given object is a string or a number.</p>

<pre><code>[ch] Makes a string containing "ch" and pushes it on the stack.
x   Pops the value from the top of the stack and executes it as a macro
&gt;r  Pops two values off the stack and compares them assuming they are 
    numbers, executing the contents of register r as a macro if the 
    original top-of-stack is greater
&lt;r  Similar but invokes the macro if the original top-of-stack is less
=r  Similar but invokes the macro if the original top-of-stack is equal
</code></pre>

<h3>Macros</h3>

<p>Macros are then implemented by allowing registers and stack entries to be strings as well as numbers. A string can be printed, but it can also be executed (i.e. processed as a sequence of dc commands). For instance, we can store a macro to add 3 and then multiply by 2 into register m:</p>

<pre><code>[3 + 2 *] sm
</code></pre>

<p>and then (using the <code>x</code> command which executes the top of the stack) we can use it like this:</p>

<pre><code>3 lm x p
</code></pre>

<p>This displays the following:</p>

<pre><code>$ dc -e '[3 + 2 *] sm 3 lm x p'
12
</code></pre>

<p>For better understanding, this is a detailed account of what&#8217;s going on:</p>

<pre><code>[    # start of macro definition
  3  # push 3 to stack
  +  # pop 2 values off the stack, add them and store result on stack
  2  # push 2 on stack
  *  # pop 2 values off the stack, multiply them, store result on stack
]    # end of macro definition
sm   # store the macro just defined in register m
3    # push 3 on stack
lm   # copy value in register m (the macro) onto the stack
x    # run the macro
p    # print the result (top of the stack)
</code></pre>

<h3>Conditionals and Loops in dc</h3>

<p>The <code>=</code>, <code>&gt;</code>, <code>!&gt;</code>, <code>&lt;</code>, <code>!&lt;</code>, <code>!=</code> conditionals execute the subsequent macro when the two top values of the stack are equal, larger than, not larger than, etc. For example, in:</p>

<pre><code>$ dc -e '[[smaller than]p] sm 6 5 &lt;m'
smaller than
</code></pre>

<p>the macro stored in <code>m</code> runs (and prints &#8220;smaller than&#8221;) because 5 is smaller than 6. The <code>&lt;</code> pops 5 and then 6 from the stack and runs the macro in register <code>m</code> because the first popped value (5) is smaller than the second popped value.</p>

<p>Let&#8217;s look at a simple countdown in <a href="https://wiki.bash-hackers.org/howto/calculate-dc">this page</a> in the Bash Hackers Wiki:</p>

<pre><code>dc &lt;&lt; EOF
[ li       # put our index i on the stack 
  p        # print it, to see what's going on
  1 -      # we decrement the index by one
  si       # store decremented index (i=i-1)
 0 li &gt;L   # if i &gt; 0 then execute recursively L
] sL       # store our macro with the name L
10 si      # let's give to our index the value 10
lLx        # and start our loop
EOF 

10
9
8
[ Lines omitted for brevity]
2
1
</code></pre>

<p>Basically, the macro is called a first time, and then calls itself recursively so long as the condition is satisfied.</p>

<h2>Disarium Numbers in dc</h2>

<p>Remember that we want to write something similar to the <code>is_disarium</code> function of our above-described awk program:</p>

<pre><code>function is_disarium(num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = int(n/10)
        len--
    }
    return (sum == num)
}
</code></pre>

<p>Our program will be composed essentially of four macros calling themselves or each other, and just a few additional code lines to start the whole process.</p>

<h3>The Length Macro</h3>

<p>The above <code>is_disarium</code> function uses the awk built-in <code>length()</code> function. There is no such built-in function in dc. So our first task will be to write our own length macro.</p>

<p>The way this macro will work is that we&#8217;re going to repeatedly divide (integer division) the input number by 10, until we get to 0. At each step through the process, we increment the length (register l) by one.  </p>

<p>The length macro itself is stored in the L register, and the length &#8220;variable&#8221; in register l.</p>

<pre><code>[10      # pushes 10 to stack
 /       # divides input by 10 and stores result on stack
 ll      # pushes length on stack
 1+      # adds one to stack (length)
 # p     # prints intermediate length (for debugging)
 sl      # saves length to register l
 d       # duplicates value (number) on top of stack
 0       # pushes 0 to stack
 &lt;Lx     # executes recursively length macro (L) if number &gt; 0
] sL     # end of macro, stores it in L

889 sn   # stores some input number in n
ln       # pushes number to stack
0sl      # stores 0 in register l (length)
lLx      # runs the macro once to start the loop
llp      # prints length final value
</code></pre>

<p>The last five lines in the code above (after the blank line) are not part of the macro, they are just some code to set up the environment before calling the macro: start with an input number (889 in the above example), initialize the length (register l) to 0, invokes the macro (stored in register L), and prints the length.</p>

<p>With an input number of 889, this program correctly prints out 3.</p>

<h3>The Disarium Macro</h3>

<p>This macro is more or less equivalent to the <code>is_disarium</code> function&#8217;s <code>while</code> loop of the awk program:</p>

<pre><code>while (n &gt; 0) {
    sum += (n % 10) ^ len
    n = int(n/10)
    len--
}
</code></pre>

<p>The disarium macro computes the number modulo 10, then computes the result to the length power, adds the obtained value to the sum so far; it also divides the number by 10 (integer division) and decrements the length by 1. At the end, it calls itself recursively if the resulting number is larger than 0.</p>

<p>The disarium macro is stored in register D. The sum is stored in register s, the length in register l, and the input number in register n.</p>

<pre><code>[d      # duplicates value (number) on top of stack
10      # pushes 10 to stack
%       # pushes (number % 10) to stack
ll      # pushes length to stack
^       # computes (n % 10) ^ len
ls      # pushes sum to stack
+ss     # computes new sum and stores it in s
10/     # integer division number / 10
ll      # pushes length on stack
1-      # subtract 1 froml length
sl      # stores new length in l
d       # duplicates value (number) on top of stack
0       # pushes 0 to stack
&lt;Dx     # executes recursively disarium macro (D) if number &gt; 0
] sD    # stores disarium macro in D

88 sn   # stores number in n
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # initializes sum to 0
cln     # clear stack and pushes number onto it
lDx     # runs the Disarium macro
lsln    # pushes sum and number
f       # display stack (sum and number)
</code></pre>

<p>The 10 last code lines (after the blank line) are not part of the macro, but are needed to make a full dc program that can be tested independently (well you&#8217;ll also need the length macro described above). They initialize the input number to 88, the sum to 0, and the length to 0. Then we run the length macro (stored in L) and the disarium macro. At the end, we push the sum and the input number to the stack and can verify whether they are equal (in which case the input number is a disarium number) or not. With the input value of 88, the program displays:</p>

<pre><code>88
72
0
</code></pre>

<p>The input number (88) and the sum (72 = 8 * 8 + 8) are not equal, so 88 is not a disarium number.</p>

<p>If we change the input number to 89, we get the following output:</p>

<pre><code>89
89
0
</code></pre>

<p>The input number (89) and the sum (89 = 9 * 9  + 8) are  equal, so 89 is a disarium number.</p>

<h3>The Iteration Macro</h3>

<p>We need to iterate over the subsequent integers and, for each of them, call the length macro and then the disarium macro to find out whether it is a disarium number.</p>

<p>The macro stores the current iteration variable into the number register (this is the number we will test), initializes length to 0, runs the length macro, initialize sum to 0 and runs the disarium macro once. Then it pushes sum and number to stack and compares them. If they are equal (input number is a disarium number), it runs the printing macro (see below). Finally, it compares the disarium number with 18, and calls itself recursively if the counter is smaller than 18.</p>

<p>The iteration macro is stored in the I (capital i) register. The sum is stored in register s, the length in register l, the input number in register n, the iteration variable in register i, and the disarium number counter in register c.</p>

<pre><code>[li sn  # Stores iteration variable in number register
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # inititialize sum to 0
cln     # clear stack and pushes number onto it
lDx     # runs the Disarium macro once
lsln    # pushes sum and number
=P      # runs the printing macro if numbers are equal
li      # loads iteration variable
1+si    # increments iteration variable
lc18    # pushes counter and 18 on stack
&gt;Ix     # runs recursively iteration macro if counter &lt; 18
] sI    # end of iteration macro, stores it in I
</code></pre>

<p>We cannot run this macro at this point, because we need a small additional macro, the printing macro.</p>

<h3>The Printing and Counting Macro</h3>

<p>I&#8217;ve previously called it &#8220;printing macro&#8221; for the sake of brevity, but it is really a <em>printing and counting macro</em>. This macro runs only when input number and the computed sum are equal (i.e. when we have a disarium number). In that case, we need to do two things: print out the disarium number and increment by 1 the disarium number counter (so that we know when to stop the iteration macro).</p>

<p>The printing and counting macro is stored in the P register. The disarium number counter is stored in the c register, and the input number in register n.</p>

<pre><code>[lc1+sc # increments disarium number counter
lnp     # print number
]sP     # Stores printing macro in P
</code></pre>

<h3>The Final Disarium Number Program in dc</h3>

<p>We can now put together all the pieces seen so far.</p>

<p>The macros are stored in upper-case letter registers:</p>

<ul>
<li><p>L:  length of input number macro</p></li>
<li><p>D:  Disarium macro</p></li>
<li><p>I:  Iteration macro</p></li>
<li><p>P:  Printing and counting macro</p></li>
</ul>

<p>The “variables” are stored in lower-case letter registers:</p>

<ul>
<li><p>n:  Input number</p></li>
<li><p>c:  Disarium number counter</p></li>
<li><p>l:  Length of input number</p></li>
<li><p>s:  Sum</p></li>
<li><p>i:  Iteration variable</p></li>
</ul>

<p>This is the full dc program:</p>

<pre><code># Macro for computing the input number length
[10      # pushes 10 to stack
 /       # divides input by 10 and stores result on stack
 ll      # push length on stack
 1+      # add one to stack (length)
 sl      # saves length to register l
 d       # duplicates value (number) on top of stack
 0       # pushes 0 to stack
 &lt;Lx     # executes recursively length macro (L) if number &gt; 0
] sL     # end of macro, store it in L

# Disarium macro
[d      # duplicates value (number) on top of stack
10      # pushes 10 to stack
%       # pushes (number % 10) to stack
ll      # pushes length to stack
^       # computes (n % 10) ^ len
ls      # pushes sum to stack
+ss     # computes new sum and stores it in s
10/     # integer division number / 10
ll      # pushes length on stack
1-      # subtract 1 froml length
sl      # stores new length in l
d       # duplicates value (number) on top of stack
0       # pushes 0 to stack
&lt;Dx     # executes recursively disarium macro (D) if number &gt; 0
] sD    # stores disarium macro in D

# Printing and counting macro
[lc1+sc # increments disarium number counter
lnp     # print number
]sP     # Stores printing macro in P

# Iteration macro
[li sn  # Stores iteration variable in number register
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # inititialize sum to 0
cln     # clear stack and pushes number onto it
lDx     # runs the Disarium macro once
lsln    # pushes sum and number
=P      # runs the printing macro if numbers are equal
li      # loads iteration variable
1+si    # increments iteration variable
lc18    # pushes counter and 18 on stack
&gt;Ix     # runs recursively iteration macro counter &lt; 18
] sI    # end of iteration macro, stores it in I

# Main
0si     # Initialize iteration variable
0sc     # Initialize disarium numbers counter
lIx     # running iteration macro the first time
</code></pre>

<p>As you can see, the program consists of the four macros defined previously, plus just 3 code lines (the &#8220;Main&#8221; part) to initialize the iteration variable, initialize the disarium number counter and launch the iteration macro.</p>

<p>This program displays the following output:</p>

<pre><code>$ dc ./disarium.dc
0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
</code></pre>

<p>But, of course, formatting the program with abundant spaces and comments as above is way too easy. Real programmers will prefer this one-liner version (spread over two lines for formatting reasons):</p>

<pre><code>$ dc -e '[10/ll1+sld0&lt;Lx]sL[d10%ll^ls+ss10/ll1-sld0&lt;Dx]sD[lc1+sc
lnp]sP[lisnln0sllLx0ssclnlDxlsln=Pli1+silc18&gt;Ix]sI0si0sclIx'
0
1
2
3
[Lines omitted for brevity
598
1306
1676
2427
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on July 31, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#574 - Perl Community</title>
    <link rel="alternate" href="https://perlweekly.com/archive/574.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The community spirit among Perl fans is always the highlight of any event. I am sure you have experience it too. Little while ago, there was discussion to give new life to <strong>Perl Advent Calendar</strong>. Many volunteers came forward to help the project, like, <strong>Adam Russell</strong>. As we are getting close to the next edition, <strong>Olaf Alders</strong> and <strong>Julien Fiegehenn</strong> came together and kickstarted the project with a big push. I noticed in the recent weeks, lots of activities on <a href="https://github.com/perladvent/Perl-Advent">GitHub repository</a>, thanks to all the volunteers. <strong>Olaf Alders</strong> made an official call for papers in the <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">blog post</a>. I request all <strong>Perl</strong> fans to submit proposal. If you need any help submitting an article, then please do <a href="https://github.com/perladvent/Perl-Advent/blob/main/FAQ-submit.mkdn">checkout the page</a> for guidance. I would encourage first timer to come forward and share their experience with <strong>CPAN</strong> distributions. I am sure, everyone has few favourite distributions or their own creations that they want to talk about and share with the community. There are plenty of help available, if you need, so just give us a shout.</p>
<p>Talking about revival, recently I spoke about <strong>CPAN Weekly</strong>, creation of <strong>Neil Bowers</strong>. I shared my intention of getting it back up. In no time, I got plenty of offer. One of them was <strong>Cheok-Yin Fung</strong>. She even shared the initial draft that I am currently reviewing. Thank you, <strong>Cheok-Yin</strong> for the help. The plan is to launch it on the birthday of <strong>Perl</strong> i.e. 18th Dec. I will share more about it soon. Wish me luck.</p>
<p>Maintaining <strong>CPAN</strong> distribution is a big responsibility. I have seen regular release of <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, thanks to <strong>Julien Fiegehenn</strong> for all the care and love. You can find the details in the <a href="https://twitter.com/simbabque/status/1549670503719153664">Twitter thread</a>. I know it takes a lot of efforts to keep the distribution live and active as I too have the responsibilities of handful of distributions. Having said, credit must be given to all the contributors who provide patches.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/574.html</id>
    <published>2022-07-25T10:00:00Z</published>
    <updated>2022-07-25T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 174</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-174/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-174/</id>
    <published>2022-07-25T00:00:00Z</published>
    <updated>2022-07-25T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Permutations Ranked in Disarray on Mars</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/24#pwc174" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>Write a script to generate the first 19 Disarium Numbers.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use POSIX;

sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        return @disariums if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
}

MAIN:{
    print join(", ", disarium_n(19)) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798
</code></pre>

<h3>Notes</h3>

<p>I gave myself a <em>writing prompt</em> for this exercise: only use map. This turned out to
present a small issue and that is, how do we terminate out of a <code>map</code> early? This comes up
because we do not need to examine all numbers in the large range of <code>0 .. INT_MAX / 100</code>.
Once we find the 19 numbers we require we should just stop looking. <code>last</code> will not work
from within a <code>map</code> it turns out. In this case a <code>return</code> works well. But suppose we did
not want to <code>return</code> out of the subroutine entirely? Well, I have tested it out and it 
turns out that <code>goto</code> will work fine from within a <code>map</code> block as well!</p>

<p>That code would look something like this, where the <code>CONTINUE</code> block would have some more
code for doing whatever else was left to do. </p>

<pre><code class="perl">
sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        goto CONTINUE if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
    CONTINUE:{
        ##
        # more to do before we return
        ##
    }
    return @disariums;
}
</code></pre>

<h2>Part 2</h2>

<p><em>You are given a list of integers with no duplicates, e.g. [0, 1, 2]. Write two functions, 
permutation2rank() which will take the list and determine its rank (starting at 0) in the 
set of possible permutations arranged in lexicographic order, and rank2permutation() which 
will take the list and a rank number and produce just that permutation.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
package PermutationRanking{
    use Mars::Class;
    use List::Permutor;

    attr q/list/;
    attr q/permutations/;
    attr q/permutations_sorted/;
    attr q/permutations_ranked/;

    sub BUILD{
        my $self = shift;
        my @permutations;
        my %permutations_ranked;
        my $permutor = new List::Permutor(@{$self-&gt;list()});
        while(my @set = $permutor-&gt;next()) {
            push @permutations, join(":", @set);
        }
        my @permutations_sorted = sort @permutations;
        my $rank = 0;
        for my $p (@permutations_sorted){
            $permutations_ranked{$p} = $rank;
            $rank++;
        }
        @permutations_sorted = map {[split(/:/, $_)]} @permutations_sorted;
        $self-&gt;permutations_sorted(\@permutations_sorted);
        $self-&gt;permutations_ranked(\%permutations_ranked);
    }

    sub permutation2rank{
        my($self, $list) = @_;
        return $self-&gt;permutations_ranked()-&gt;{join(":", @{$list})};
    }

    sub rank2permutation{
        my($self, $n) = @_;
        return "[" . join(", ", @{$self-&gt;permutations_sorted()-&gt;[$n]}) . "]";
    }
}

package main{
    my $ranker = new PermutationRanking(list =&gt; [0, 1, 2]);
    print "[1, 0, 2] has rank " . $ranker-&gt;permutation2rank([1, 0, 2]) . "\n";
    print "[" . join(", ", @{$ranker-&gt;list()}) . "]"  . " has permutation at rank 1 --&gt; " . $ranker-&gt;rank2permutation(1) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
[1, 0, 2] has rank 2
[0, 1, 2] has permutation at rank 1 --&gt; [0, 2, 1]
</code></pre>

<h3>Notes</h3>

<p>I've been enjoying trying out Al Newkirk's Mars OOP framework. When it comes to Object 
Oriented code in Perl I've usually just gone with the default syntax or <code>Class::Struct</code>.
I am far from a curmudgeon when it comes to OOP though, as I have a lot of experience
using Java and C++. What I like about Mars is that it reminds me of the best parts of
<code>Class::Struct</code> as well as the best parts of how Java does OOP. The code above, by its
nature does not require all the features of Mars as here we don't need much in the way 
of Roles or Interfaces.</p>

<p>Perhaps guided by my desire to try out Mars more I have taken a definitively OOP approach
to this problem. From the problem statement the intent may have been to have two 
independent functions. This code has two methods which depend on the constructor (defined
within <code>sub BUILD</code>) to have populated the internal class variables needed.</p>

<p>There is a small trick here that the sorting is to be by <em>lexicograohic order</em>, which 
conveniently is the default for Perl's default <code>sort</code>. That doesn't really buy us any
algorithmic improvement in performance, in fact it hurts it! Other approaches exist for 
this problem which avoid producing all permutations of the list.</p>

<h2>References</h2>

<p><a href="https://oeis.org/A032799">Disarium Numbers</a></p>

<p><a href="https://metacpan.org/pod/Mars">Mars</a></p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-174/">Challenge 174</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc174</id>
    <published>2022-07-24T19:34:00-04:00</published>
    <updated>2022-07-24T19:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 174</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-174-5ga6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-174/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-174/sgreen">My solution</a></p>

<p>Just doing one task this week. The second one is nothing more than copying and pasting code from the mentioned website, so I cannot see the point. YMMV.</p>

<h2>
  
  
  Task: Disarium Numbers
</h2>

<p>Write a script to generate first 19 Disarium Numbers.</p>

<p>A disarium number is an integer where the sum of each digit raised to the power of its position in the number, is equal to the number.</p>

<h3>
  
  
  My solution
</h3>

<p>This is pretty straight forward. Have a list (array in Perl) called <code>solutions</code>. Keep iterating a <code>number</code> until their are nineteen items in that list. Add the number to the list if the number is disarium.</p>

<p>To determine disarium numbers I loop over each digit using <code>enumerate(str(n))</code>. The enumerate function is roughly equivalent to using the each function over an array in Perl (the first value is the counter, the second value is the digit at that position).</p>

<p>If the sum is the original number, return <code>True</code> otherwise return <code>False</code>.</p>

<p>The Perl code is similar to the Python code. The code to calculate the sum is slightly different.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798

$ ./ch-1.pl 
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-174-5ga6</id>
    <published>2022-07-24T05:13:08Z</published>
    <updated>2022-07-24T05:13:08Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5459349394724045217</id>
    <published>2022-07-23T19:41:00.001+02:00</published>
    <updated>2022-07-23T19:41:36.473+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Catalyst-Runtime-5.90129' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catalyst::Runtime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Catalyst Framework Runtime &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.90129&lt;/strong&gt; on 2022-07-23&lt;/li&gt;  &lt;li&gt;Votes: 150&lt;/li&gt;  &lt;li&gt;Previous version: 5.90128 was 1 year, 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/DBIx-DataModel-3.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::DataModel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - UML-based Object-Relational Mapping (ORM) framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.03&lt;/strong&gt; on 2022-07-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 3.01 was 1 year, 5 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.67&lt;/strong&gt; on 2022-07-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.66 was 1 year, 5 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.04&lt;/strong&gt; on 2022-07-22&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 10 years, 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220720' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220720&lt;/strong&gt; on 2022-07-21&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220620 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/Pithub-0.01037' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01037&lt;/strong&gt; on 2022-07-20&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01036 was 1 year, 5 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/PPI-1.276' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse, Analyze and Manipulate Perl (without perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.276&lt;/strong&gt; on 2022-07-19&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 1.274 was 2 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9627' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9627&lt;/strong&gt; on 2022-07-22&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9623 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/SQL-Abstract-More-1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SQL::Abstract::More&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - extension of SQL::Abstract with more constructs and more flexible API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2022-07-22&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016005&lt;/strong&gt; on 2022-07-23&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.014000 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.12&lt;/strong&gt; on 2022-07-20&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.10 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Zydeco-0.616' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Zydeco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Jazz up your Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.616&lt;/strong&gt; on 2022-07-19&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.615 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5459349394724045217/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdii-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5459349394724045217"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5459349394724045217"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdii-12-great-cpan-modules-released.html" title="(cdii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6672857162011626588</id>
    <published>2022-07-23T19:39:00.001+02:00</published>
    <updated>2022-07-23T19:39:07.596+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxvi) metacpan weekly report - Perl::Critic</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 43&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/07/23 17:38:39 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::IPinfo" target="_blank"&gt;Geo::IPinfo&lt;/a&gt; - The official Perl library for IPinfo.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::PHash" target="_blank"&gt;Image::PHash&lt;/a&gt; - Fast perceptual image hashing (DCT-based pHash)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RT::Extension::ChangeManagement" target="_blank"&gt;RT::Extension::ChangeManagement&lt;/a&gt; - RT-Extension-ChangeManagement Extension&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; - Graphical Display in the terminal using UTF8 Braille characters&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::LevelDB" target="_blank"&gt;Tie::LevelDB&lt;/a&gt; - A Perl Interface to the Google LevelDB NoSQL database&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=267)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=169)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::LRU" target="_blank"&gt;Cache::LRU&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=117)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart" target="_blank"&gt;Chart&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Validate::IP" target="_blank"&gt;Data::Validate::IP&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=257)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=177)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Test::Pod::LinkCheck" target="_blank"&gt;Dist::Zilla::Plugin::Test::Pod::LinkCheck&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::NFSLock" target="_blank"&gt;File::NFSLock&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Filter" target="_blank"&gt;Filter&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Escape" target="_blank"&gt;HTML::Escape&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CookieJar" target="_blank"&gt;HTTP::CookieJar&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=103)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::Imlib2" target="_blank"&gt;Image::Imlib2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lock::File" target="_blank"&gt;Lock::File&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Usage" target="_blank"&gt;Memory::Usage&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=472)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::FretboardDiagram" target="_blank"&gt;Music::FretboardDiagram&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IP" target="_blank"&gt;Net::IP&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IP::XS" target="_blank"&gt;Net::IP::XS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Iterator::Rule" target="_blank"&gt;Path::Iterator::Rule&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+2=121)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=227)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6672857162011626588/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvi-metacpan-weekly-report-perlcritic.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6672857162011626588"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6672857162011626588"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvi-metacpan-weekly-report-perlcritic.html" title="(dxvi) metacpan weekly report - Perl::Critic"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Chris Nandor</title>
  <summary type="html"><![CDATA[<p>
<a href="https://pudge.net/">Chris Nandor (Pudge)</a> is the recipient of the <a href="https://www.perl.org/advocacy/white_camel/">White Came Award</> in <a href="https://www.perl.org/advocacy/white_camel/2000.html">2000</a>.
<p>
As I have not heard much from him in recent years I thought it would be interesting to ask where is he now and what does he do.
<p>
]]></summary>
  <updated>2022-07-21T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/chris-nandor"/>  <id>https://perlmaven.com/chris-nandor</id>
  <content type="html"><![CDATA[<p>
<a href="https://pudge.net/">Chris Nandor (Pudge)</a> is the recipient of the <a href="https://www.perl.org/advocacy/white_camel/">White Came Award</> in <a href="https://www.perl.org/advocacy/white_camel/2000.html">2000</a>.
<p>
As I have not heard much from him in recent years I thought it would be interesting to ask where is he now and what does he do.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Spaß mit ICal-Dateien und Zeitzonen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-07-20-spaa-mit-ical-dateien-und-zeitzonen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wir nutzen das Ticketsystem Znuny) Community Edition Fork") zur Kommunikation mit externen Personen wie zum Beispiel Interessenten und Kunden. Leider werden in Znuny ICal-Dateianhänge nicht als Termin erkannt und dementsprechend auch nicht angezeigt.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-07-20-spaa-mit-ical-dateien-und-zeitzonen</id>
    <published>2022-07-20T10:00:00Z</published>
    <updated>2022-07-20T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Todd Rinaldo Nominated for Board Position</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/todd-rinaldo-nominated-for-board-position"/>
  <id>tag:news.perlfoundation.org,2022-07-19:/post/todd-rinaldo-nominated-for-board-position</id>
  <published>2022-07-19T14:39:50</published>
  <updated>2022-07-19T14:39:50</updated>
  <summary>
  <![CDATA[
     We would like to present Todd Rinaldo as a candidate to join the foundation Board. He has worked with the foundation for many years as a conference organizer and in other capacities. The board will vote on Todd's appointment at the board meeting scheduled for 19th August 2022. Below is Todd's application, answering the questions of why he wants to be a member of the board and what he would 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We would like to present Todd Rinaldo as a candidate to join the foundation Board. He has worked with the foundation for many years as a conference organizer and in other capacities.</p>

<p>The board will vote on Todd's appointment at the board meeting scheduled for 19th August 2022.</p>

<p>Below is Todd's application, answering the questions of why he wants to be a member of the board and what he would like the foundation to work on.</p>

<hr />

<p>I am Todd Rinaldo. I've been programming for 40 years and coding Perl since my first Perl programming class in 1995. I've been a resident of Houston, TX most of my life. I've been an active Perl Monger with Houston.pm since 2006. I'm married with 1 boy. I've been an employee of cPanel for 13 years. Prior to cPanel, I worked for JP Morgan and Century Maintenance Supply before that. This has given me some very helpful perspectives on how things work in a small/medium/large company.</p>

<p>As a boy and now an adult, I have been an active member of The Boy Scouts of America. This is the other organization I've donated a significant amount of time to. The organization taught me to embrace servant leadership. I think that experience more than any has instilled in me a want to give back to the organizations that have helped me. Perl has been a big part of my life, so I certainly want to help where I can.</p>

<p>I do not represent any community. I have been a part of Perl 5 Porters and am now a voting member. My interests also include the improvement of CPAN as well as ongoing maintenance and testing of the existing modules on that platform. I of course have been an active organizer with most YAPC::NAs since 2013.</p>

<p>I'm interested in becoming a board member to offer assistance in the Foundation's mission to help the community. I have no specific agenda. As I understand things, the purpose of the board is to provide support to active projects so they can focus on coding, etc., and not the logistical, financial, and legal details. I'm not sure how much scope the board has outside of this but I am interested to know more.</p>

<p>I hope to help find ways the board can support The Perl and Raku Conference going forward. Potentially this might also include the EU which has stopped holding conferences though it is unclear if this is because of COVID or lack of interest.</p>

<p>I would also like to assure TPF continues to maintain a tight bond with the steering councils of the organizations it supports. I don't have clarity on the level of communication so it's hard to say if there is enough communication already.</p>

<hr />

<p>Please share your thoughts and comments on Todd's candidacy before the board meeting on 19th August 2022.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#573 - Pocket money or serious support?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/573.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Last week Mohammad raised the idea of a GitHub-pages-based central blogging platform for Perl to which Dave Cross added his <a href="https://www.reddit.com/r/perl/comments/vwb2j1/perl_weekly_issue_572_perl_blogger/">comment</a> pointing out a misunderstanding. At first I liked the idea of Mohammad as way of making it easier for people who don't know how to setup a blog, but on a second thought. Setting up a site for blogging on GitHub pages is less than 5 minutes. On GitLab and Codeberg it might take a bit more, but still way less than the whole writing part. If you need help ask Flavio, David, Mohammad, or myself.</p>
<p>A few years ago the Perl community got really enthusiastic by the idea of supporting each other via one of the monthly-support platforms. The problem, as I understood, was, that most people received only some small pocket money that did not make any real impact. So most people thought: Instead of taking home 20-40 USD a month I will use this money to support others. We ended up with a circular support in which no one received any substantial support. If you go over the amounts the <a href="https://perlmaven.com/supporting-perl-creators">Perl related people</a> receive you'll see that most of them only receive a few 10s of USD. For most people living in the economically advanced world that's just pocket money. Manwar is the person closest to some substantial amount, but he still needs more.</p>
<p>This is our challenge now. Can we, as a community, increase his support to reach 500 UK pound? We are already half-way there. If you already support him, please consider increasing the amount so we reach USD 10/supporter! (we are at about USD 5.5). If you are not supporting him yet, do it now:  <a href="https://www.patreon.com/manwar/">Manwar</a></p>
<p>Enjoy your week</p></div>
    </content>
    <id>https://perlweekly.com/archive/573.html</id>
    <published>2022-07-18T10:00:00Z</published>
    <updated>2022-07-18T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Suffering Succotash!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/17#pwc173" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find out if the given number is 
an Esthetic Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_esthetic{
    my($n) = @_;
    my @digits = split(//, $n);
    my $d0 = pop @digits;
    while(@digits){
        my $d1 = pop @digits;
        return false if abs($d1 - $d0) != 1;
        $d0 = $d1;
    }
    return true;
}

MAIN:{
    my $n;
    $n = 5456;
    print "$n is ";
    print "esthetic\n" if is_esthetic($n);
    print "not esthetic\n" if !is_esthetic($n);
    $n = 120; 
    print "$n is ";
    print "esthetic\n" if is_esthetic($n);
    print "not esthetic\n" if !is_esthetic($n);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
5456 is esthetic
120 is not esthetic
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I started to write this solution and then kept coming back to it, considering if there is
a more elegant approach. If there is I could not come up with it on my own over this past 
week! This doesn't seem all that bad, just a bit "mechanical" perhaps?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Break the number into an array of digits
&lt;/li&gt;
&lt;li&gt;Do a pairwise comparison of successive digits by popping them off the array one at a 
time and retaining the most recently popped digit for the next iteration's comparison.
&lt;/li&gt;
&lt;li&gt;If at any point the "different by 1" requirement is not met, return false.
&lt;/li&gt;
&lt;li&gt;If we complete all comparisons without a failure, return true.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 10 members of Sylvester's sequence.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use bigint; 

sub sylvester_n{
    my($n) = @_;
    my @terms = (2, 3);
    my %product_table;
    $product_table{"2,3"} = 6;
    while(@terms &lt; $n){
        my $term_key = join(",", @terms);
        my $term = $product_table{$term_key} + 1;
        push @terms, $term;
        $product_table{"$term_key,$term"} = $term * $product_table{$term_key}; 
    }
    return @terms;
}


MAIN:{
    print join(", ", sylvester_n(10)). "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2, 3, 7, 43, 1807, 3263443, 10650056950807, 113423713055421844361000443, 12864938683278671740537145998360961546653259485195807, 165506647324519964198468195444439180017513152706377497841851388766535868639572406808911988131737645185443
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Much like the first part I considered what might be an optimal way to compute this. Here
the standard &lt;em&gt;recursion and memoization&lt;/em&gt; would be most appropriate, I believe. Just to mix
things up a little I implemented my own memoization like lookup table and computed the 
terms iteratively. Otherwise though, the effect is largely the same in that for each new
term we need not reproduce any previous multiplications.&lt;/p&gt;

&lt;p&gt;These terms get large almost immediately! &lt;code&gt;use bigint&lt;/code&gt; is clearly necessary here. An 
additional optimization would be the use of &lt;code&gt;Tie::Hash&lt;/code&gt; and &lt;code&gt;Tie::Array&lt;/code&gt; to save memory as
we compute larger and larger terms. Since TWC 173.2 only specified 10 terms I left that
unimplemented.&lt;/p&gt;

&lt;p&gt;Finally, I should note that the title of this blog draws from Sylvester the Cat, not 
Sylvester the Mathematician! Sylvester the Cat's famous phrase is "Suffering Succotash!". 
See the link in the references for an example. Not everyone may not be familiar, so see 
the video link below! The comments on that video have some interesting facts about the
phrase and the character.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-173/"&gt;Challenge 173&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkhPuH8G5Hg"&gt;Thufferin' thuccotash!&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc173</id>
    <published>2022-07-17T21:30:00-04:00</published>
    <updated>2022-07-17T21:30:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Dancer2: More route parameters</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-17T09:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-more-route-parameters"/>  <id>https://perlmaven.com/dancer2-more-route-parameters</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Weekly Challenge 173</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-173-1kli" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two pretty straight forward tasks this week. This is good given how challenging my day job has been recently.</p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-173/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-173/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Esthetic Number
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a positive integer, <code>$n</code>.</p>

<p>Write a script to find out if the given number is Esthetic Number. An esthetic number is a positive integer where every adjacent digit differs from its neighbor by 1.</p>

<h2>
  
  
  My solution
</h2>

<p>One of the main difference between Python and Perl (other than the syntax) is variables are typed in Python where they aren't in vanilla Perl (I'm excluding Moose like variables here). This always means there is a little extra work required in Python to get the right solution.</p>

<p>For this challenge, I simply loop from the first character to the second last character. I compare the absolute difference (using the <code>abs</code> function) between that character and the next one. If the difference is not 1, we know the number is not esthetic, and can print <code>0</code> and exit the loop. If we reach the end of the loop, we can print <code>1</code>.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 5456
1

$ ./ch-1.py 120
0
</code></pre>

</div>



<h2>
  
  
  Task 2: Sylvester’s sequence
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 10 members of <a href="https://en.wikipedia.org/wiki/Sylvester%27s_sequence">Sylvester's sequence</a>.</p>

<h2>
  
  
  My solution
</h2>

<p>The big issue with this challenge is that the numbers involved are very large, and most importantly &gt; 2<sup>31</sup>-1. Python will automatically convert an integer into a long and play along nicely.</p>

<p>For the Perl solution, using <a href="https://metacpan.org/pod/Math::BigInt">Math::BigInt</a> will achieve the same outcome.</p>

<p>In my code, I seed the <code>solutions</code> list (array in Perl) with S0 of <code>2</code>. I then have a loop that iterates until there are 10 values in the list. For each iteration, I take the product of the current values, and add one.</p>

<p>In the Python code, I use <code>math</code>s <a href="https://docs.python.org/3/library/math.html#math.prod">prod</a> function, while I list <code>List::Util</code>s <a href="https://metacpan.org/pod/List::Util#product">product</a> function in my Perl code.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 
2
3
7
43
1807
3263443
10650056950807
113423713055421844361000443
12864938683278671740537145998360961546653259485195807
165506647324519964198468195444439180017513152706377497841851388766535868639572406808911988131737645185443
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-173-1kli</id>
    <published>2022-07-14T13:15:42Z</published>
    <updated>2022-07-14T13:15:42Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Grant Proposal: Google TensorFlow API Bindings for Perl (John Napiorkowski)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_tensorflow_jnap_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/grant_proposal_tensorflow_jnap_july_2022</id>
  <published>2022-07-11T20:21:53</published>
  <updated>2022-07-11T20:21:53</updated>
  <summary>
  <![CDATA[
     Name John Napiorkowski Amount Requested: The minimum budget for this project is $8,800 USD Synopsis This grant proposal is for the development of a Perl API to Google TensorFlow, a software library for machine learning and artificial intelligence TensorFlow is generally considered to be the most mature and well-supported ML/AI library, and will benefit the Perl community tremendously. Benefits to the Perl Community Most new software development projects tend to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h2>Name</h2>

<p>John Napiorkowski</p>

<h2>Amount Requested:</h2>

<p>The minimum budget for this project is $8,800 USD</p>

<h2>Synopsis</h2>

<p>This grant proposal is for the development of a Perl API to Google TensorFlow, a software library for machine learning (ML) and artificial intelligence (AI).</p>

<p>TensorFlow is generally considered to be the most mature and well-supported ML/AI library, and will benefit the Perl community tremendously.</p>

<h2>Benefits to the Perl Community</h2>

<p>Most new software development projects tend to incorporate or utilize machine learning in some way.</p>

<p>Most machine learning libraries, including TensorFlow, provide a well-documented Python API with example Python applications.</p>

<p>Thus, due to these (and other) reasons, most new software projects are implemented using Python or some other non-Perl language.</p>

<p>The availability of a fully-featured and up-to-date Perl API for TensorFlow would have far-reaching and long-lasting effects on the Perl community.</p>

<p>To begin with, software developers will be able to much more easily convince corporate management to adopt Perl for new software projects requiring ML/AI.</p>

<p>Secondly, students and teachers alike will be empowered to teach Perl in ML/AI courses at countless high schools, colleges, and universities.</p>

<p>Third, open source Perl developers will have essential new tools for working on brilliant breakthroughs in ML/AI software, to the benefit of all humanity.</p>

<p>Fourth, the overall creation of new Perl ML/AI projects and educational courses will naturally result in the critically-needed creation of new Perl jobs.</p>

<p>Last but not least, new corporate projects using Perl ML/AI will also translate into new corporate funding and sponsorship for Perl non-profits such as TPF.</p>

<h2>Deliverables</h2>

<p>An implementation of Perl API bindings to all applicable symbols in the TensorFlow C API, using FFI::Platypus from CPAN.</p>

<p>A comprehensive Perl test suite with automatically-provable coverage for 100% of the Perl API, using Test2 from CPAN.</p>

<p>A carefully-written and explanatory collection of documentation with coverage for 100% of the Perl API, using normal POD fully compatible with CPAN.</p>

<p>A small collection of user-friendly example Perl applications, using popular TensorFlow components to effectively showcase the Perl API.</p>

<p>A public GitLab repository with all source code and components of the Perl API, including unstable or experimental components.</p>

<p>A public CPAN distribution with all stable source code and components of the Perl API.</p>

<p>A public DockerHub repository with all stable source code and components of the Perl API, along with all dependencies, ready to run out-of-the-box.</p>

<p>The TensorFlow C API does NOT yet support gradients, functions, and control flow operations.  These features will be addressed in future grant proposals.</p>

<p>This grant proposal specifically does NOT include any re-implementation of TensorFlow's Python layer, such as NumPy NDarrays or Keras, which is far beyond the scope of a single grant and will be addressed in future proposals.</p>

<h2>Project Details</h2>

<p>All the technical details of how a TensorFlow API should behave and how to implement it in Perl can be found at the following websites:</p>

<ul>
<li>https://www.tensorflow.org/api_docs</li>
<li>https://github.com/tensorflow/tensorflow</li>
<li>https://github.com/tensorflow/docs/blob/master/site/en/r1/guide/extend/bindings.md</li>
<li>https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h</li>
<li>https://metacpan.org/pod/FFI::Platypus</li>
<li>https://metacpan.org/pod/Test2</li>
</ul>

<h2>Project Schedule</h2>

<p>Total development time is estimated at 60 to 90 days, with the normal disclaimer about the difficulty of predicting software project durations.</p>

<p>During the first work cycle of approximately 30 days, implement the initial Perl API.</p>

<p>During the second work cycle, implement the Perl test suite.</p>

<p>During the third work cycle, write the Perl documentation and implement the Perl example applications.</p>

<p>If a fourth work cycle is required, continue until the public releases on CPAN and DockerHub are complete.</p>

<h2>Completeness Criteria</h2>

<p>This grant is deemed complete when all the above-listed deliverables are reviewed and accepted by the official TPF-assigned grant manager.</p>

<h2>Bio</h2>

<p>I'm a prolific CPAN author, with <a href="https://metacpan.org/author/JJNAPIORK">86 distributions so far</a>.</p>

<p>I've been one of the core maintainers of <a href="https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90126/view/lib/Catalyst.pm">Catalyst</a>, the premier Perl MVC web application framework, for over a decade.</p>

<p>I'm an active and dedicated member of the Perl community, including long-term participation at TPF-sponsored events such as <a href="https://www.youtube.com/c/YAPCNA/search?query=napiorkowski">The Perl Conference</a>.</p>

<p>I live outside of Austin, Texas with my family, pets, and farm animals.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook): June 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_june_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/maintaining_perl_tonyc_june_2022</id>
  <published>2022-07-11T18:35:16</published>
  <updated>2022-07-11T18:35:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/06/01 Wednesday 0.28 comment on Win32 p5p thread 0.60 #18882 review, comment briefly 1.17 review github notifications 1.40 #19668 fail to build perl  get it built, reproduce, work on test 0.17 #19668 finish test, fix, start test run, push for CI 3.62 2022/06/02 Thursday 0.07 #19668 open PR 1.42 review coverity report 351943, diagnose, research, fix,  testing, push change for CI, open PR #19807 0.77 cid 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:
```
[Hours]         [Activity]
2022/06/01      Wednesday
0.28           comment on Win32 p5p thread
0.60           #18882 review, comment briefly
1.17           review github notifications
1.40           #19668 fail to build perl (using tools from strawberry),
                get it built, reproduce, work on test</p>

<h1>0.17           #19668 finish test, fix, start test run, push for CI</h1>

<p>3.62</p>

<p>2022/06/02      Thursday
0.07           #19668 open PR
1.42           review coverity report 351943, diagnose, research, fix,
                testing, push change for CI, open PR #19807
0.77           cid 351946 - diagnose and reject as false positive, review
                some other coverity issues
1.68           more coverity cid 351960 - try to make it crash, review</p>

<h1>                other coverity issues</h1>

<p>3.94</p>

<p>2022/06/03      Friday
1.38           more coverity, upload a simple modelling file (how to
                prevent byte swapping tainting?)
0.20           #19807 review CI results and apply to blead
0.30           #19806 apply to blead, perldelta updates</p>

<h1>0.43           #19791 review, look over Configure, hints/freebsd</h1>

<p>2.31</p>

<p>2022/06/06      Monday
0.17           #19825 review and approve
0.37           #19795 review and comment
0.33           #19797 review and comment
0.40           #19826 try to reproduce, comment
1.68           #19704 work on a fix, testing
1.15           #19704 try to break it, commit, push for CI
0.67           #19826 follow-up</p>

<h1>1.12           #6841/#12227 testing, comments</h1>

<p>5.89</p>

<p>2022/06/07      Tuesday
1.07           #19797 try to test build with clang-cl (and fail)
1.27           review new coverity alerts
0.70           yield true feature discussion: comment, try a simple
                patch, look over referenced true module.</p>

<h1>1.63           #6841 testing, work on a fix, more testing</h1>

<p>4.67</p>

<p>2022/06/08      Wednesday
0.28           #19797 followup
1.05           #19704 re-word commit message
0.62           #6841 more testing, push for CI
0.10           #6841 check CI results, make PR #19833
0.17           #18882 recheck and apply to blead
0.83           #18534 review and briefly comment
0.52           #19829 testing, review Makefile and make PR #19834
0.98           #19791 review Configure and hints, start on a fix (tests</p>

<h1>                are slow on qemu)</h1>

<p>4.55</p>

<p>2022/06/09      Thursday
0.10           #19797 followup - restart failing CI test (looks like a
                timing issue)
0.17           #19833 apply to blead, perldelta
0.48           #19795 review and approve
0.53           #19791 rebase, start a(nother) test Configure
0.20           #19834 review discussion and apply to blead, perldelta
0.67           #19826 try on 21H2, still can’t reproduce
0.17           #19791 slight re-work, start another test run
0.72           look over history of requirement for true from required
                files (goes back to 5.000)
0.37           #19797 check CI results and apply to blead
0.48           #19822 review and approve
0.13           #19820 review (no decision)</p>

<h1>0.47           #19791 make a commit, test on amd64 VM, make PR 19843</h1>

<p>4.49</p>

<p>2022/06/13      Monday
0.83           review github notifications
0.38           #19847 review and approve
1.65           look at floor/ceil overloading, debug an assert, create</p>

<h1>                #19857</h1>

<p>2.86</p>

<p>2022/06/14      Tuesday
0.40           #19854 review and comment
0.40           #19791 comment
0.28           #19837 review and approve
0.20           #19836 review and approve</p>

<h1>1.57           #19846 review, testing</h1>

<p>2.85</p>

<p>2022/06/15      Wednesday
0.18           #14448 research and comment
1.02           #19846 look into PERL_MEM_LOG build issues
1.40           #19846 more look into PERL_MEM_LOG build issues, push for
                CI
0.53           #19861 review and approve
0.22           #19858 review and approve
0.17           #19769 review and approve
0.15           #19755 review, research and comment with suggestion</p>

<h1>0.48           #19851 research and comment</h1>

<p>4.15</p>

<p>2022/06/16      Thursday
0.08           #19864 apply to blead
0.05           #19755  review new changes and apply to blead
0.87           #19846 look at CopSTASHPV problem, testing and comment
1.02           #19848 review, briefly comment
1.12           research implementation of yield true, comment to list</p>

<h1>0.70           #18606 rebase, look over code, testing</h1>

<p>3.84</p>

<p>2022/06/20      Monday
0.38           #19870 try to see why it fails, find out, comment
0.82           #19871 try to see why it fails and comment
0.45           cygwin CI setup re-work - use cygwin setup action
3.32           more cygwin CI setup re-work - more use cygwin setup
                action, try to use standard checkout action but thwarted</p>

<h1>                by safe directories</h1>

<p>4.97</p>

<p>2022/06/21      Tuesday
0.60           #19832 rebase
0.80           cygwin CI setup re-work - retest and make PR #19876
0.27           #19871 review comments and comment
0.22           #19846 review latest and apply to blead</p>

<h1>0.87           #19814 review code and comments, comment</h1>

<p>2.76</p>

<p>2022/06/22      Wednesday
0.77           #12082 research, write up a simple doc change and make PR
                #19881
0.27           #19870 review updated version and comment
0.22           #19857 follow-up
0.23           #19876 apply to blead (also some unrelated #p5p
                discussion)
0.80           #19851 reproduce, work on fixes
0.32           #19851 more, comment</p>

<h1>1.32           #18606 more testing</h1>

<p>3.93</p>

<p>2022/06/23      Thursday
0.10           review github notifications
1.77           #19857 debugging</p>

<h1>2.15           #19857 debugging</h1>

<p>4.02</p>

<p>2022/06/27      Monday
0.25           review github notifications
1.28           #19894 review, research and comment, reproduce on DFBSD
                5.8, start a bisect
1.33           #19894 review bisect results, try to make a short
                reproducer, debugging, comment
0.62           #19867 research and comment
0.77           #19857 find immediate cause of parent link not being set,</p>

<h1>                more to do.</h1>

<p>4.25</p>

<p>2022/06/28      Tuesday
0.42           review github notifications
0.67           #19894 test and make a smoke-me branch
0.20           #19896 review
0.13           #19895 testing and comment</p>

<h1>1.13           #19857 debugging</h1>

<p>2.55</p>

<p>2022/06/29      Wednesday
0.48           #19874 testing, comment
0.97           Karl’s UTF8-API - research and comment</p>

<h1>1.77           #19857 more debugging, think I found the cause</h1>

<p>3.22</p>

<p>2022/06/30      Thursday
2.48           #19894 debugging, create
                https://bugs.dragonflybsd.org/issues/3319 work on a SKIP
                patch, testing, push for smoke-me, comment
0.48           #19903 review, research and comment</p>

<h1>0.60           #19901 review, research and comment</h1>

<p>3.56
```
Which I calculate is 72.43 hours.</p>

<p>Approximately 45 tickets were reviewed or worked on, and 10 patches
were applied.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>TPRC 2022 SOC Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-2022-soc-report"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/tprc-2022-soc-report</id>
  <published>2022-07-11T18:18:01</published>
  <updated>2022-07-11T18:18:01</updated>
  <summary>
  <![CDATA[
     As with past conferences, the TPRC 2022 conference had a Standards of Conduct document all attendees were required to agree to. We believe that it’s important to share the outcome of these policies so that people in our community know that we are enforcing them and what outcomes to expect from violations. This is an anonymized summary of the incidents reported to the SoC Committee and the committee’s response: A 
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/01cc7150e7b9abb6a426ac09728aabe3b2ace91d/logo-square.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>As with past conferences, the TPRC 2022 conference had a Standards of Conduct document all attendees were required to agree to. We believe that it’s important to share the outcome of these policies so that people in our community know that we are enforcing them and what outcomes to expect from violations.</p>

<p>This is an anonymized summary of the incidents reported to the SoC Committee and the committee’s response:</p>

<ul>
<li>A conference attendee made an inappropriate remark to a fellow attendee.  The Standards of Conduct committee spoke with the reported attendee. As this was not the first such incident with the reported attendee, we gave them a final warning. Further violations of the SoC will result in a temporary ban from the conference and other TPF/RF spaces</li>
<li>A group of conference attendees were playing Cards Against Humanity in a shared conference space.  Conference organizers spoke to the group and asked them to move the game to a private space; the attendees chose to end the game.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>#572 - Perl Blogger?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/572.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Are you a <strong>Perl</strong> blogger?</p>
<p>The state of Perl blogging is not hidden from anyone. <strong>Dave Cross</strong> wrote an extensive <a href="https://perlhacks.com/2020/09/blogging-for-perl">blog post</a> explaining not just the issues but also suggestions to get around it.</p>
<p>I proposed an idea on my <a href="https://twitter.com/cpan_author">personal twitter</a> handle and asked for public opinion. As of today, it got <strong>22 likes</strong>. I know, it isn't big number.</p>
<p>By the way, what was the proposal?</p>
<p>The proposal was to setup dedicated domain (https) powered by <strong>GitHub Pages</strong>. The static site would be generated by <strong>Hugo</strong>. It would be open to public to submit blog post as <strong>Markdown</strong> formatted page as pull request. After a quick review, the post would be live.</p>
<p>Sounds simple, isn't it?</p>
<p>The proposal should be familiar to those who have ever wrote an article for <a href="https://www.perl.com">Perl.com</a>. It has the same the process as I mentioned above, I was reminded the same in response to my <strong>Twitter post</strong> by a friend of mine. It makes me sad to see that the last post on the site was published on <strong>25th May 2021</strong>. I came to know about the site for the first time when I found out about the monthly post <strong>"What's new on CPAN"</strong> by <strong>David Farrell</strong>. In the early days of my <strong>CPAN</strong> association, every time I upload a new distribution, I would wait for the article to see if my distribution made it or not. Some of my distributions did appear in the article, just for record. I even did interview series, <strong>The Perl Ambassador</strong> for the site in the year 2020. I had the honour to interview, <a href="https://www.perl.com/article/the-perl-ambassador-gabor-szabo">Gabor Szabo</a>, <a href="https://www.perl.com/article/the-perl-ambassador-curtis-poe">Curtis 'Ovid' Poe</a> and <a href="https://www.perl.com/article/the-perl-ambassador-damian-conway">Damian Conway</a>. What a shame, I couldn't continue even though I had the list of high profile <strong>Perl Ambassadors</strong> to interview.</p>
<p>I have mostly blogged on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a>. I don't consider myself an active blogger, although I used to blog frequently before. I don't feel comfortable now a days blogging on <strong>bpo</strong>, so I decided to blog on <a href="https://theweeklychallenge.org/blogs">Perl Weekly Challenge</a> and cross linked on <strong>bpo</strong>. It is (cross linking) something not approved by many as I understand. I am likely to setup my personal blog site instead, just for <strong>Perl</strong>. I will share the details when it is live. You are all welcome to contribute.</p>
<p>I am up for new ideas and suggestions too. Please do share if you have one.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/572.html</id>
    <published>2022-07-11T10:00:00Z</published>
    <updated>2022-07-11T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Partition the Summary</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/10#pwc172" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive integers, $n and $k. Write a script to find out the Prime 
Partition of the given number. No duplicates are allowed.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use Math::Combinatorics;

sub sieve_atkin{
    my($upper_bound) = @_;
    my @primes = (2, 3, 5);
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub prime_partition{
    my($n, $k) = @_;
    my @partitions;
    my @primes = sieve_atkin($n);
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; $k, data =&gt; [@primes]);
    while(my @combination = $combinations-&gt;next_combination()){
        push @partitions, [@combination] if unpack("%32I*", pack("I*", @combination)) == $n;
    }
    return @partitions;
}

MAIN:{
    my($n, $k);
    $n = 18, $k = 2;
    map{ 
        print "$n = " . join(", ", @{$_}) . "\n"
    } prime_partition($n, $k);
    print"\n\n";
    $n = 19, $k = 3;
    map{ 
        print "$n = " . join(", ", @{$_}) . "\n"
    } prime_partition($n, $k);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
18 = 7, 11
18 = 5, 13


19 = 3, 11, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Only when writing this short blog did I realize there is a far more efficient way of 
doing this!&lt;/p&gt;

&lt;p&gt;Here we see a brute force exhaustion of all possible combinations. This works alright for 
when &lt;code&gt;$n&lt;/code&gt; and &lt;code&gt;$k&lt;/code&gt; are relatively small. For larger values a procedure like this would be
better,&lt;/p&gt;

&lt;pre&gt;
1. Obtain all primes $p &lt; $n
2. Start with $n and compute $m = $n - $p for all $p
3. If $m is prime and $k = 2 DONE
4. Else set $n = $m and repeat, computing a new $m with all $p &lt; $m stopping with the same criteria if $m is prime and $k is satisfied
&lt;/pre&gt;

&lt;p&gt;This procedure would be a natural fit for recursion, if you were in the mood for that sort 
of thing.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of integers. Write a script to compute the five-number summary of 
the given set of integers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub five_number_summary{
    my @numbers = @_;
    my($minimum, $maximum, $first_quartile, $median, $third_quartile);
    my @sorted = sort {$a &lt;=&gt; $b} @numbers;
    $minimum = $sorted[0];
    $maximum = $sorted[@sorted - 1];
    if(@sorted % 2 == 0){
        my $median_0 = $sorted[int(@sorted / 2) - 1];
        my $median_1 = $sorted[int(@sorted / 2)];
        $median = ($median_0 + $median_1) / 2;
        my @lower_half = @sorted[0 .. int(@sorted / 2)];
        my $median_lower_0 = $lower_half[int(@lower_half / 2) - 1];
        my $median_lower_1 = $lower_half[int(@lower_half / 2)];
        $first_quartile = ($median_lower_0 + $median_lower_1) / 2;       
        my @upper_half = @sorted[int(@sorted / 2) .. @sorted];
        my $median_upper_0 = $upper_half[int(@upper_half / 2) - 1];
        my $median_upper_1 = $upper_half[int(@upper_half / 2)];
        $third_quartile = ($median_upper_0 + $median_upper_1) / 2;
    }
    else{
        $median = $sorted[int(@sorted / 2)];
        $first_quartile = [@sorted[0 .. int(@sorted / 2)]]-&gt;[int(@sorted / 2) / 2];
        $third_quartile = [@sorted[int(@sorted / 2) .. @sorted]]-&gt;[(@sorted - int(@sorted / 2)) / 2];
    }
    return {
        minimum =&gt; $minimum, 
        maximum =&gt; $maximum, 
        first_quartile =&gt; $first_quartile, 
        median =&gt; $median, 
        third_quartile =&gt; $third_quartile
    };
}

MAIN:{
    my @numbers;
    my $five_number_summary;
    @numbers = (6, 3, 7, 8, 1, 3, 9);
    print join(", ", @numbers) . "\n";
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
    print "\n\n";
    @numbers = (2, 6, 3, 8, 1, 5, 9, 4);
    print join(", ", @numbers) . "\n";    
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
    print "\n\n";
    @numbers = (1, 2, 2, 3, 4, 6, 6, 7, 7, 7, 8, 11, 12, 15, 15, 15, 17, 17, 18, 20);
    print join(", ", @numbers) . "\n";      
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
6, 3, 7, 8, 1, 3, 9
third_quartile: 8
maximum: 9
minimum: 1
first_quartile: 3
median: 6


2, 6, 3, 8, 1, 5, 9, 4
median: 4.5
first_quartile: 2.5
minimum: 1
maximum: 9
third_quartile: 7


1, 2, 2, 3, 4, 6, 6, 7, 7, 7, 8, 11, 12, 15, 15, 15, 17, 17, 18, 20
maximum: 20
third_quartile: 15
first_quartile: 5
median: 7.5
minimum: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Note that the case of an even or odd number of elements of the list (and sublists) 
requires slightly special handling.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-172/"&gt;Challenge 172&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc172</id>
    <published>2022-07-10T20:39:00-04:00</published>
    <updated>2022-07-10T20:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): June 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl5_core_davem_june_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-10:/post/maintaining_perl5_core_davem_june_2022</id>
  <published>2022-07-10T12:53:09</published>
  <updated>2022-07-10T12:53:09</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during June covered by my TPF perl core maintenance grant. SUMMARY:  0:47 improve docs for internal exception handling  1:46 look into disabling smartmatch/switch.  8:02 make stack reference counted  7:58 process p5p mailbox   18:33 TOTAL The most interesting thing I did was that near the end of the month I started work on "making the 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during June covered by my TPF perl
core maintenance grant.</p>

<p>SUMMARY:
<code>
      0:47 improve docs for internal exception handling (JMPENV etc)
      1:46 look into disabling smartmatch/switch.
      8:02 make stack reference counted
      7:58 process p5p mailbox
    ------
     18:33 TOTAL (HH::MM)
</code></p>

<p>The most interesting thing I did was that near the end of the month I
started work on "making the stack reference counted"; i.e. that when
things are pushed onto the argument stack, their reference count (RC)
should be incremented and, conversely, decremented when popped.</p>

<p>Currently things on the stack aren't RCed, so there is a danger that such
items could be prematurely freed. For example,</p>

<pre><code>@a = (1,2,3);
f(@a);

sub f {
    @a = (); # prematurely frees the elements of @a
    print "($_[0])\n"; # prints an undefined value or random garbage
}
</code></pre>

<p>This issue has been the basis of countless "unfixable" bug reports over
the years, and in particular most fuzzing crash reports turn out to be
caused by this issue.</p>

<p>There is a particular difficulty in fixing this: specifically how do we
get to there from where we are now, because it's rather an all-or-nothing
scenario. Every single pp function in the 30K lines of code in the various
<code>pp*.c</code> files all need to be updated to expect an RCed stack at the same
time. You can't have only half of them updated: the stack is binary, it's
either RCed or it isn't. So having updated only half the pp functions, you
can't compile perl and run the test suite.</p>

<p>My cunning plan for getting round that is to initially redefine all the
<code>Perl_pp_foo()</code> functions to be small wrapper functions around the real
functions. The wrappers are responsible for making a non-RCed copy of the
function's args and calling the real (non-RC aware) function; then on
return, shifting down and bumping the RC of any returned arguments. A
similar thing will be done by <code>pp_entersub()</code> to call XS functions.</p>

<p>This is crude and slow, but in principle allows the changeover to an RCed
stack in a single go. Then at my leisure, I can go through the pp
functions one by one and modify them to be RC-aware and remove the wrapper
functions. Once all the important functions are done (e.g. all the ones in
<code>pp_hot.c</code>) then the new system may be ready for production use. We can
continue using wrapper functions for the slow/rare functions if converting
them would be too much work.</p>

<p>I intend to have a new build define, <code>PERL_RC_STACK</code>, which isn't initially
enabled by default. Unless enabled, perl behaves as usual, with the stack
not being reference counted, the wrapper functions not being defined, etc.
So my work can proceed initially without breaking normal perl. Once the
work is stable and we don't think it will break most of CPAN, then
<code>PERL_RC_STACK</code> will be enabled by default in builds, but can be disabled at
build time if necessary. Eventually the define will be removed
altogether, meaning that various places in the perl core no longer need to
handle both RC and non-RC cases.</p>

<p>This work if fairly risky, in that I may well find along the way that the
problems are unsurmountable and have to abandon it.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Weekly Challenge 172</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-172-1h8i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-172/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-172/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Prime Partition
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given two positive integers, <code>$m</code> and <code>$n</code>.</p>

<p>Write a script to find out the Prime Partition of the given number. No duplicates allowed.</p>

<h3>
  
  
  My solution
</h3>

<p>This is one of those interesting tasks where there are multiple ways to tackle it. And the method really depends on the value of <code>m</code> and (more importantly) <code>n</code>.</p>

<p>I took the quick and easy option, given that the examples provided have small values. In this method, I collect a list of all primes <code>&lt;=m</code> and store it in a list (array in Perl) called <code>primes</code>. I then use itertool's <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations">combinations</a> method to work out all combinations of size <code>n</code>. If I find a combination that sums to the value of <code>m</code>, I print the results and exit. If I don't find one, I also print an appropriate message.</p>

<p>For the Perl version, I use the <a href="https://metacpan.org/pod/Algorithm::Combinatorics">Algorithm::Combinatorics</a> module to perform the same function that Python's itertools provides. This is available as a RPM package in Fedora (the OS my server uses), so seems like a good choice.</p>

<p>Now for a discussion about the case where <code>m</code> and <code>n</code> are larger. The problem with the above method is when <code>n</code> is larger, the number of combinations grows exponentially. This leads to a lot of calculations where the sum is clearly going to be too high or too low.</p>

<p>Take for example trying to find 10 primes of 7920. The 1000th prime number is 7919. As I sorted the list highest to lowest, it means the first gazillion (well not quite, but it is a number with 26 digits in it, 999 × 998 × ... × 991) combinations will always result in a number that is too large. Rather than working through all combinations, we can eliminate ones that clearly won't be valid. For example, if we take the first number as 7829 (the 990th prime), we know that the sum of the remain digits can't be larger than 91.</p>

<p>However, the example clearly sets an expectation that <code>m</code> and <code>n</code> are (relatively speaking) on the smaller side, so the brute force method is good enough.</p>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 18 2
(13, 5)

$ ./ch-1.py 19 3
(11, 5, 3)

</code></pre>

</div>



<h2>
  
  
  Task 2: Five-number Summary
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given an array of integers.</p>

<p>Write a script to compute the <a href="https://en.wikipedia.org/wiki/Five-number_summary">five-number summary</a> of the given set of integers.</p>

<h3>
  
  
  My solution
</h3>

<p>The easy solution would just be use <a href="https://numpy.org/">numpy</a> which supports this out the box, but where is the fun in that? If this was code I needed to use at work, indeed <code>import numpy</code> would be at the top of the script.</p>

<p>This task is pretty straight forward, so no real explanation is needed. Take the integers, sort them from lowest to highest, and find the position at each quartile. If that position is not a single value, then take the two values and half it.</p>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 0 0 1 2 63 61 27 13
0, 0.5, 7.5, 44, 63
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-172-1h8i</id>
    <published>2022-07-10T10:28:53Z</published>
    <updated>2022-07-10T10:28:53Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Task::Date::Holidays bug fix release 0.12</title>
    <link rel="alternate" href="https://dev.to/jonasbn/taskdateholidays-bug-fix-release-012-15jj" type="text/html"/>
    <content type="html">&lt;p&gt;With the &lt;a href="https://dev.to/jonasbn/release-130-of-dateholidays-more-holiday-for-the-french-36o7"&gt;releases 1.31 of Date::Holidays and 0.11 of Task::Date::Holidays&lt;/a&gt; I apparently forgot to test properly, so an issue was not observed. I believe I have accidentally tested &lt;a href="https://metacpan.org/pod/Task::Date::Holidays"&gt;Task::Date::Holidays&lt;/a&gt; 0.11 with &lt;a href="https://metacpan.org/pod/Date::Holidays"&gt;Date::Holidays&lt;/a&gt; 1.30 not 1.31.&lt;/p&gt;

&lt;p&gt;This resulted in a lot of reports on failing tests from CPAN testers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75sgJckw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdh7yc2gnu4tiy181ack.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75sgJckw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdh7yc2gnu4tiy181ack.png" alt="Test matrix for Task::Date::Holidays 0.11" width="880" height="1141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href="http://matrix.cpantesters.org/?dist=Task-Date-Holidays%200.11"&gt;cpantesters.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since it is my holiday I was able to find the time to dig into  the &lt;em&gt;holidays&lt;/em&gt; and Yesterday I found the issue, adjusted the tests and shipped 0.12 and already today the results look much better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5A0C-Loh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxcaklzovw29debvjw9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5A0C-Loh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxcaklzovw29debvjw9h.png" alt="Test matrix for Task::Date::Holidays 0.11" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href="http://matrix.cpantesters.org/?dist=Task-Date-Holidays%200.12"&gt;cpantesters.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One more item on the TODO list ticked off...&lt;/p&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/taskdateholidays-bug-fix-release-012-15jj</id>
    <published>2022-07-09T10:39:51Z</published>
    <updated>2022-07-09T10:39:51Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>#571 - Sponsoring TPF or individuals</title>
    <link rel="alternate" href="https://perlweekly.com/archive/571.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>What if you had a steady income of a few thousand USDs just for doing awesome things for Perl so you can afford to do whatever you want? I bet there would be tons of things you could do. Improving CPAN modules, patching Perl, writing articles, recording videos, encouraging others to write more. etc.</p>
<p>So what if we could support a few people to do just that? How could you be part of it? You could <a href="https://perlfoundation.org/donate">donate to TPF</a>, but for you, as an individual it might be better to support an individual directly. Without the organizational overhead. For this a while ago I put together the list of <a href="https://perlmaven.com/supporting-perl-creators">all the Perl-related people</a>, I knew about at that time, who are accepting donations. They are mostly looking for monthly support instead of a one-time support. In my opinion it is much better to support someone with $10/month than $200 one-time donation. Partially because having a steady income is much better than having the need to raise more funds every few weeks or even every few months. With that said both at Patreon and GitHub Sponsors you can subscribe to a regular donation and then, after the payment you can cancel it. Effectively providing a one-time donation.</p>
<p>I went over the list now. There are 11 people listed on that page with a total of 139 sponsors. (There is probably some overlap the same person sponsoring more than one 'creator'.)</p>
<p>Personally I'd recommend you <a href="https://www.patreon.com/manwar">sponsor the work of Mohammad</a> as he both creates code and generates a lot of publicity for Perl, but if you decide to support someone else from the list that's awesome too. If you find donate to someone who is not in this list yet, and if they agree, feel free to send a PR to add them to the list.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/571.html</id>
    <published>2022-07-04T10:00:00Z</published>
    <updated>2022-07-04T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Route parameters and sending 404 manually</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-04T08:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-route-parameters"/>  <id>https://perlmaven.com/dancer2-route-parameters</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Abundant Composition</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/03#pwc171" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first twenty Abundant Odd Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub proper_divisors{
    my($n) = @_;
    my @divisors;
    for my $x (1 .. $n / 2){
        push @divisors, $x if $n % $x == 0;
    }
    return @divisors;
}

sub n_abundant_odd{
    my($n) = @_; 
    my $x = 0;
    my @odd_abundants;
    {
        push @odd_abundants, $x if $x % 2 == 1 &amp;&amp; unpack("%32I*", pack("I*", proper_divisors($x))) &gt; $x;
        $x++;
        redo if @odd_abundants &lt; $n;
    }
    return @odd_abundants;
}

MAIN:{
    print join(", ", n_abundant_odd(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
945, 1575, 2205, 2835, 3465, 4095, 4725, 5355, 5775, 5985, 6435, 6615, 6825, 7245, 7425, 7875, 8085, 8415, 8505, 8925
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The solution here incorporated a lot of elements from previous weekly challenges. That is 
to say it is quite familiar, I continue to be a fan of &lt;code&gt;redo&lt;/code&gt; as well as the &lt;code&gt;pack/unpack&lt;/code&gt;
method of summing the elements of an array.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Create sub compose($f, $g) which takes in two parameters $f and $g as subroutine refs 
and returns subroutine ref i.e. compose($f, $g)-&gt;($x) = $f-&gt;($g-&gt;($x)).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub f{
    my($x) = @_;
    return $x + $x;
}

sub g{
    my($x) = @_;
    return $x * $x;
}

sub compose{
    my($f, $g) = @_;
    return sub{
        my($x) = @_;
        return $f-&gt;($g-&gt;($x));
    };
}

MAIN:{
    my $h = compose(\&amp;f, \&amp;g);
    print $h-&gt;(7) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
98
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This problem incorporates some interesting concepts, especially from functional 
programming. Treating functions in a &lt;em&gt;first class way&lt;/em&gt;, that is, passing them as 
parameters, manipulating them, dynamically generating new ones are commonly performed in
functional programming languages such as Lisp and ML. Here we can see that Perl can quite
easily do these things as well!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-171/"&gt;Challenge 171&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc171</id>
    <published>2022-07-03T12:39:00-04:00</published>
    <updated>2022-07-03T12:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
