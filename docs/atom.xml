<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-03-29T05:49:57Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>SPVM Document is upgraded. SPVM is a Programming launguage which has Perl-like syntax</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvm-document-is-upgraded-1j6j" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>SPVM Document is upgraded.</p>

<p>Add simple example to top.</p>

<p><a href="https://yuki-kimoto.github.io/spvmdoc-public/">SPVM Document</a></p>

<p>If you know where the new programming language will be announced, can you tell me?</p>

<p>I don't know where to make a good announcement.</p>

<p>Do I need a lot of money and power to get to know in 2021?</p>

<p>Does the Dev community have the opportunity to unveil great products that aren't yet known?</p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/spvm-document-is-upgraded-1j6j</id>
    <published>2021-03-29T05:20:52Z</published>
    <updated>2021-03-29T05:20:52Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
    <title>[Personal Review] Codes from The Weekly Challenge Week 095-105</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/03/personal-review-codes-from-the-weekly-challenge-week-095-105.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10160</id>
    <published>2021-03-29T01:52:58Z</published>
    <updated>2021-03-29T03:40:29Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p><p><i>-------------------------------------<br /></i></p><p>My coding momentum is a bit low.</p>

<p>Reflections on the codes I have written:</p>

<p>#095</p>

<p>Task 1: Palindrome Number<br />
TMTOWTDI. On this seemly and actually simple task, I chose to compare the digit one by one.<br />
</p><p>Task 2: Demo Stack<br />
A bit smell of laziness. I did not provide functions when stack is empty and <tt>pop()</tt> or <tt>min()</tt> is called. </p>

<p>#096</p>

<p>Task 1: Reverse Words<br />
A lesson on extra-white space. Oppositely but as lack of caution as a sin, this morning (GMT+8) I found I have forgotten a newline for my code for #105 Task 1.</p>

<p>Task 2: Edit Distance<br />
That was a standard computer science exercise. I was astounded by reading Mr Abigail's blog on the approach on saving memory space.</p>

<p>#097 </p>

<p>Task 1: Caesar Cipher<br />
Trivial.</p>

<p>Task 2: Binary Substrings<br />
Seems to be weird at the first sight, but much simpler after "fourth" thought.<br />
I wish I would have a head for calm analysis when it comes to a more time-limited situation.</p>

<p>#098</p>

<p>Task 1: Read N-characters<br />
Trivial for Perl long-term user, but I had not known <tt>read</tt> before.</p>

<p>Task 2: Search Insert Position<br />
Put a binary search tree as solution. Actually it was modified from some codes for rosalind.info .</p>

<p>#099</p>

<p>Task 1: Pattern Match<br />
KOed by regex.</p>

<p>Task 2: Unique Subsequence<br />
Quite a loaded task for me. idea-&gt;input(letter by letter);</p>

<p>Output: a procedural script.</p>

<p>#100</p><p>
Task 1: Fun Time<br />
When I was in secondary school, one of my class teachers is a strict English teacher. He said we should say "Good noon Mr Chan" if the class begins at 12:00 nn. Yeah, 12:00 nn.</p>

<p>Task 2: Triangle Sum<br />
Ignoring instructions, people took the fastest way: from bottom to top traversal.</p>

<p>I think I am over-unpredictable on how strict I follow the examples or task instructions.</p>

<p>#101<br />
My laziest week recently.  </p>

<p>Task 1: Pack a Spiral<br />
Back to a few years ago, I read a similar task on a competitive programming guide book. At that time I have no clues. A mark of improvement.</p>

<p>Task 2: origin-containing triangle<br />
But still thanks Mr S. Little introduce some basic computer graphics task.</p>

<p>#102</p><p>
Task 1: Rare Numbers<br />
As said, it is faster to generate the numbers, instead of checking the natural numbers one after one... I let go of my previous experience.</p>

<p>Task 2: Hash-counting String<br />
I used recursion for the task. Mr J. Smith's <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-102/james-smith/perl/ch-2.pl">two elegant lines</a> save the recursion, no wonder he gets the team title of Champion of Feb 2021 soon after he enters the team.</p>

<p>#103</p><p>
Task 1: Chinese Zodiac<br />
Trivial.</p>

<p>Task 2: What’s playing?<br />
I got the "wrong answer" at first. Anyway, I like this task as its nature suggests me getting experience of some of the CPAN modules.</p>

<p>Extra:<br />
Instead of using the <tt>Test::XXXXXX</tt> module, I wrote a short script for test. (Reinventing or whatever, I know there is a book on Perl Testing, I will check it.) This helps me get on the latest #105 -- I undergo time travel again.</p>

<p>Here is my testing script:</p>

<div><tt>
<b>#!/usr/bin/perl</b><br />
<b>use</b>&nbsp;<b>strict</b>;<br />
<b>use</b>&nbsp;<b>warnings</b>;<br />
<font color="#7f7f7f"><i>#&nbsp;Testing&nbsp;script&nbsp;for <br /></i></font></tt></div><div><tt><font color="#7f7f7f"><i>#The&nbsp;Weekly&nbsp;Challenge&nbsp;#103&nbsp;</i>Task<font color="#7f7f7f"><i>&nbsp;1</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<b>my</b>&nbsp;<font color="#0000ff">%data_ret</font>&nbsp;=&nbsp;<br />
&nbsp;&nbsp;&nbsp;(<font color="#00007f">2017</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Fire&nbsp;Rooster</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1938</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Earth&nbsp;Tiger</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1997</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Fire&nbsp;Ox</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1990</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Metal&nbsp;Horse</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1967</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Fire&nbsp;Goat</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;);<br />
<br />
<br />
<b>my</b>&nbsp;<font color="#0000ff">$program</font>&nbsp;=&nbsp;<font color="#ffa500">"</font><font color="#ff0000">perl&nbsp;ch-1.pl</font><font color="#ffa500">"</font>;&nbsp;<font color="#7f7f7f"><i><br /></i></font></font></tt></div><div><font color="#7f7f7f"><tt><font color="#7f7f7f"><i>#MODIFY&nbsp;FOR&nbsp;DIFFERENT&nbsp;USES</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<font color="#7f7f7f"><i>#&nbsp;============================= #</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<b>my</b>&nbsp;<font color="#0000ff">$num_of_success</font>&nbsp;=&nbsp;0;<br />
<br />
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$parameter</font>&nbsp;(<font color="#007f00">keys</font>&nbsp;<font color="#0000ff">%data_ret</font>)&nbsp;{<br />
&nbsp; <b>my</b>&nbsp;<font color="#0000ff">$test_return</font>&nbsp;=&nbsp;<font color="#ffa500">`</font><font color="#0000ff">$program</font><font color="#ff0000">&nbsp;</font><font color="#0000ff">$parameter</font><font color="#ffa500">`</font>;&nbsp;<br />
&nbsp; <font color="#007f00">chomp</font>(<font color="#0000ff">$test_return</font>);<br />
&nbsp; <b>if</b>&nbsp;(<font color="#0000ff">$test_return</font>&nbsp;<font color="#ffa500">eq</font>&nbsp;<font color="#0000ff">$data_ret</font>{<font color="#0000ff">$parameter</font>})&nbsp;{&nbsp;&nbsp;<br />
&nbsp; <font color="#7f7f7f"><i>#CHANGE&nbsp;==&nbsp;INTO&nbsp;"eq"&nbsp;for&nbsp;non-numeric</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;case&nbsp;parameter&nbsp;</font><font color="#0000ff">$parameter</font><font color="#ff0000">:&nbsp;passed&nbsp;</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;</tt></font></div><div><font color="#7f7f7f"><tt><font color="#0000ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $num_of_success</font>++;<br />
&nbsp; }&nbsp;<br />
&nbsp; <b>else</b>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;case&nbsp;parameter&nbsp;</font><font color="#0000ff">$parameter</font><font color="#ff0000">:&nbsp;failed&nbsp;</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
&nbsp; }<br />
}<br />
<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">done&nbsp;</font><font color="#ffa500">"</font>,&nbsp;&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#007f00">keys</font>&nbsp;<font color="#0000ff">%data_ret</font>,&nbsp;<font color="#ffa500">"</font><font color="#ff0000">&nbsp;test&nbsp;case(s);&nbsp;PASS:&nbsp;</font><font color="#0000ff">$num_of_success</font><font color="#ff0000">&nbsp;case(s)&nbsp;.</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
</tt></font></div><font color="#7f7f7f">

</font><br /><div>#104</div><div><br /></div><div>Task 1: FUSC Sequence</div><div>Seems easy? I submitted a seriously bugged script, just fix it after reading others' blog in the afternoon on Monday.</div><div><br />Task 2 NIM Game:<br /></div><div>The winning strategy is well-known if you like math or have read some math expositions for laymen.</div><div><br /></div><div>I enjoy programming for traditional games.</div><div><br /></div><div>#105</div><div><br /></div><div>Task 1: Nth Root</div><div>My interpretation: N is an integer.</div><div><br /></div><div>I think thtat using log with exp throws out the interesting mathematics. My first thought after seeing the task statement is using Newton's method. However, I was afraid of numerical analysis and delayed coding til early morning of the 29th March.<br /></div><div><tt><br /></tt></div><div>I tried two approaches. One is Newton's method, one is basic integer for-loop. Then I compare their results making use of a version of my testing script and apply warnings to users.<br /></div><div><br /></div><pre><tt>$ perl ch-1.pl 10 1048578<br />WARN: Recommend to take the result from Newton's method if two methods dispute
WARN: N is large; probably dispute between two methods 
By lazy method:
4.00
By Newton's method:
4.00<br /><br />$ cat tester_105-ch-1.pl<br />...<br />for (1..100) { <br />    my $temp_N = 2 + int rand(9);<br />    my $temp_k = rand(3000);<br />    $data_ret{"$temp_N $temp_k"} = lazy_method($temp_N, $temp_k);<br />}<br /><br />my $program = "perl ch-1_newton.pl"; #MODIFY FOR DIFFERENT USES<br />...<br /><br />$ perl tester_105-ch-1.pl<br />...<br />test case parameter 10 1708.35583396219: failed <br />got 2.11 , expect: 2.10<br />...<br />done 100 test case(s); PASS: 99 case(s) .<br />
</tt></pre><div><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-105/cheok-yin-fung/perl/ch-1.pl">Full code of ch-1.pl on GitHub</a>. <br /></div><div><tt><br /></tt></div><div>Maybe I need a rest, maybe I need a clearer goal in programming, maybe I should just enjoy the logic challenges. I don't know yet.</div><div><br /></div><div>Anyway, I discover that I had forgotten a newline character after a sleep. A confession here. □<br /></div>]]>
        <![CDATA[<p><br /></p>]]>
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 105: Nth Root and The Name Game</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-105-nth-root-and-the-name-game.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10156</id>
    <published>2021-03-27T03:05:09Z</published>
    <updated>2021-03-29T03:04:55Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 105 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (March 28, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Nth Root</h2>

<p><em>You are given positive numbers <code>$N</code> and <code>$k</code>.</em></p>

<p><em>Write a script to find out the <code>$Nth</code> root of <code>$k</code>. For more information, please take a look at the <a href="https://en.wikipedia.org/wiki/Nth_root#Computing_principal_roots">wiki page</a>.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 5, $k = 248832
Output: 12

Input: $N = 5, $k = 34
Output: 2.02
</code></pre>

<p>The <code>$n</code>th root of the number <code>$k</code>  can usually be expressed as the number ​<code>$k</code> raised to the <code>1/N</code>th power: <code>$k ** (1/$n)</code>, with <code>$n &gt; 0</code>.</p>

<h3>Nth Root in Raku</h3>

<p>We just implement the formula above and compute the first to the tenth root of the input value:</p>

<pre><code>use v6;

my $input = @*ARGS[0] // 248832;
for 1..10 -&gt; $i {
    printf "%2i\t%10.3f\n", $i, $input ** (1/$i);
}
</code></pre>

<p>Running this script with no parameter yields the results for the defgault value:</p>

<pre><code>$ raku root.raku
 1      248832.000
 2         498.831
 3          62.898
 4          22.335
 5          12.000
 6           7.931
 7           5.900
 8           4.726
 9           3.977
10           3.464
</code></pre>

<p>And providing another integer as a command-line parameter displays the following output:</p>

<pre><code>$ raku root.raku 400
 1         400.000
 2          20.000
 3           7.368
 4           4.472
 5           3.314
 6           2.714
 7           2.354
 8           2.115
 9           1.946
10           1.821
</code></pre>

<h3>Nth Root in Perl</h3>

<p>This a direct port to Perl of the above Raku program:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $input = $ARGV[0] // 248832;
for my $i (1..10) {
    printf "%2i\t%10.3f\n", $i, $input ** (1/$i);
}
</code></pre>

<p>Output with the default value:</p>

<pre><code> $ perl root.pl
 1      248832.000
 2         498.831
 3          62.898
 4          22.335
 5          12.000
 6           7.931
 7           5.900
 8           4.726
 9           3.977
10           3.464
</code></pre>

<p>Output with a command-line parameter:</p>

<pre><code>$ perl root.pl 400
 1         400.000
 2          20.000
 3           7.368
 4           4.472
 5           3.314
 6           2.714
 7           2.354
 8           2.115
 9           1.946
10           1.821
</code></pre>

<h3>Nth Root in Scala</h3>

<p>Again, a simple port to Scala:</p>

<pre><code>object root extends App {
  val in: Int = if (args.size == 1) args(0).toInt else 248832
  for (i &lt;- 1 to 10) {
    val root = scala.math.pow(in, (1 / i.toDouble))
    println(f"$i%2d $root%10.3f")
  }
}
</code></pre>

<p>Note the in Scala, a division between two integers yields the Euclidean division (or integer division) so that <code>1 / i</code> would return 0 for all integer values from 2 to 10. That is why the program converts <code>i</code> to a <code>double</code> before performing the division. Replacing 1 by 1.0 would also do the trick.</p>

<p>Output:</p>

<pre><code> 1 248832.000
 2    498.831
 3     62.898
 4     22.335
 5     12.000
 6      7.931
 7      5.900
 8      4.726
 9      3.977
10      3.464
</code></pre>

<h3>Nth Root in Python</h3>

<p>Port of the same program to Python:</p>

<pre><code>#!/usr/bin/python

import sys
input = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 248832
for i in range(1, 11):
    root = input ** (1/i)
    print('{:2d}'.format(i), "   ", root)
</code></pre>

<p>Output with default value::</p>

<pre><code>$ python3 root.py
 1     248832.0                                                                                                         
 2     498.8306325798367                                                                                                
 3     62.89779346101351                                                                                                
 4     22.33451661845039                                                                                                
 5     12.000000000000002                                                                                               
 6     7.930812913000375                                                                                                
 7     5.899887726224536                                                                                                
 8     4.725940818339814                                                                                                
 9     3.976904267210367                                                                                                
10     3.464101615137755
</code></pre>

<p>Please note that my real output is single-spaced. I have no idea why my mark-down file produces double-space rendering here and in two more entries below.</p>

<p>Output with a command-line parameter:</p>

<pre><code>$ python3 root.py 400
 1     400.0
 2     20.0
 3     7.368062997280773
 4     4.47213595499958
 5     3.3144540173399872
 6     2.7144176165949063
 7     2.353546893650252
 8     2.114742526881128
 9     1.9458877175763887
10     1.8205642030260802
</code></pre>

<p>Note that I haven&#8217;t tried to format the roots: either Python is bad at formatting numbers, or I did not understand its formatting system. Note that I&#8217;ll not try very hard to pretty-print the results in the coming guest languages.</p>

<h3>Nth Root in Other Languages</h3>

<p>Some languages don&#8217;t have the <code>**</code> exponentiation operator. In some cases, the exponenciation operator may be <code>^</code>. In others, you might have to use a built-in or an imported <code>pow</code> function. Or possibly to use logarithms (like in <em>bc</em>). Or yet some other construct. Also, in a number of the languages examples below, I did not try to get argument from the command-lin, but preferred to hard code the input value. In some cases, I did not try to pretty-print the results.</p>

<h4>In the C Programming Language</h4>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#define DEFAULT_IN 248832

int main(int argc, char *argv[]) {
    printf("%s\n", argv[1]);
    int in = argc == 2 ? atoi( argv[1]) : DEFAULT_IN;
    for (int i = 1; i &lt;= 10; i++) {
        printf("%2i     %10.3f \n", i, pow (in, 1.0/i));
    };
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ a.out
 1     248832.000                                                                                                       
 2        498.831                                                                                                       
 3         62.898                                                                                                       
 4         22.335                                                                                                       
 5         12.000                                                                                                       
 6          7.931                                                                                                       
 7          5.900                                                                                                       
 8          4.726                                                                                                       
 9          3.977                                                                                                       
10          3.464    

$ a.out 10000
 1      10000.000                                                                                                       
 2        100.000                                                                                                       
 3         21.544                                                                                                       
 4         10.000                                                                                                       
 5          6.310                                                                                                       
 6          4.642                                                                                                       
 7          3.728                                                                                                       
 8          3.162                                                                                                       
 9          2.783                                                                                                       
10          2.512
</code></pre>

<h4>In the D Programming Language</h4>

<p>After C, comes D (just as C came after B, which itself came after BCPL). More seriously, D was designed as a successor to C (although D is object oriented and might better qualified as a successor to C++),same ideas and simular syntax, but supposedly more robust.</p>

<pre><code>import std.stdio;
import std.math;

void main() {
    auto input = 248832;
    for (int i = 1; i &lt;= 8; i++) {
        double root = pow(input, 1.0/i);
        writeln(i, "     ", root);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>1     248832
2     498.831
3     62.8978
4     22.3345
5     12
6     7.93081
7     5.89989
8     4.72594
</code></pre>

<h4>In Awk</h4>

<pre><code># run e.g. as: $ awk -v input=120 -f root.awk
BEGIN {
    for (i = 1; i &lt;= 10; i++) {
        printf "%2i    ¨%10.3f\n", i, input ** (1/i);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -v input=248832 -f root.awk
 1    ¨248832.000
 2    ¨   498.831
 3    ¨    62.898
 4    ¨    22.335
 5    ¨    12.000
 6    ¨     7.931
 7    ¨     5.900
 8    ¨     4.726
 9    ¨     3.977
10    ¨     3.464
</code></pre>

<p>We don&#8217;t really need to store the awk script in a file and can use an awk one-liner:</p>

<pre><code>$ awk -v input=248832 ' BEGIN { for (i = 1; i &lt;= 6; i++) {
                print i, "\t", input ** (1/i); } } '
1        248832
2        498.831
3        62.8978
4        22.3345
5        12
6        7.93081
</code></pre>

<h4>In Bc</h4>

<p>The Unix/Linux <em>bc</em> utility is aimed at performing simple numeric calculations, so it should presumably be ideal for our numeric tasK. However, its name stands for &#8220;basic calculator,&#8221; and it is so basic that it doesn&#8217;t have an exponentiation operator for non-integer exponents. We can work around that issue, though. Using the <code>-l</code> command line option enables a math library that provides the <code>l</code> natural logarithm and <code>e</code> exponential functions. The <em>n</em>th root of <code>k</code> can be computed as the exponential of the logarithm of <code>k</code> divided by <code>n</code>, which is written <code>e(l(k)/n)</code> in the bc syntax. We can run our program as a one-liner:</p>

<pre><code>$ echo  'a = 248832; for(i=1;i&lt;=5;i++) { print i; print "   "; print e(l(a)/i); print "\n"}' | bc -l
1   248831.99999999999999787313
2   498.83063257983666053377
3   62.89779346101351857080
4   22.33451661845039037442
5   11.99999999999999999988
</code></pre>

<p>Of course, using logarithm and exponential reduces somewhat the accuracy.</p>

<h4>In Gembase</h4>

<p>Gembase is a little known proprietary language for database access. You may find some information about it on my <a href="http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-104-fusc-sequence-and-nim-game.html">blog post of last week</a>. It should be quite easy to understand this code once you know that variable names start with a &#8220;sigil&#8221;: <code>#</code>.</p>

<pre><code>PROCEDURE_FORM ROOT (#in)
    if (#in = "")
        #input = 248832
    else
        #input = #in
    end_if
    #i = 1
    while(#i &lt;= 10)
        #root = #input ^ (1.0/#i)
        error /text_only (mask("!-@@", #i) &amp; mask("!-@@@@@@@@@@0.@@@", #root))
        #i = #i + 1
    end_while
END_FORM
</code></pre>

<p>Output:</p>

<pre><code> 1     248832.000
 2        498.831
 3         62.898
 4         22.335
 5         12.000
 6          7.931
 7          5.900
 8          4.726
 9          3.977
10          3.464
</code></pre>

<h4>In Ruby</h4>

<pre><code>$input = 248832
for i in 1 .. 8 do
    root = $input ** (1.0/i)
    puts "#{i}    #{root}"
end
print "\n"
</code></pre>

<p>Output:</p>

<pre><code>1    248832.0
2    498.8306325798367
3    62.89779346101351
4    22.33451661845039
5    12.000000000000002
6    7.930812913000375
7    5.899887726224536
8    4.725940818339814
</code></pre>

<h4>In Dart</h4>

<pre><code>import 'dart:math';

void main() {
  var input = 248832;
  for (int i = 1; i &lt;= 8; i++) {
    var root = pow(input, (1/i));
    print("$i    $root");
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1    248832
2    498.8306325798367
3    62.89779346101351
4    22.33451661845039
5    12.000000000000002
6    7.930812913000375
7    5.899887726224536
8    4.725940818339814
</code></pre>

<h4>In Visual Basic</h4>

<pre><code>Module VBModule
    Sub Main()
        for i as Integer = 1 to 5
            Console.WriteLine(248832 ^ (1/i))
        next
    End Sub
End Module
</code></pre>

<p>Output:</p>

<pre><code>248832                                                                                                                  
498.830632579837                                                                                                        
62.8977934610135                                                                                                        
22.3345166184504                                                                                                        
12
</code></pre>

<h4>In Kotlin</h4>

<pre><code>fun main() {
    val input = 248832;
    for (i in 1..10) {
        val root = "%12.3f".format(Math.pow(input * 1.0, 1.0/i))
        val formatted_i = "%2d".format(i)
        println("$formatted_i  $root")
    }
}
</code></pre>

<p>Output:</p>

<pre><code> 1    248832.000
 2       498.831
 3        62.898
 4        22.335
 5        12.000
 6         7.931
 7         5.900
 8         4.726
 9         3.977
10         3.464
</code></pre>

<h4>In Lua</h4>

<pre><code>input = 248832
for i = 1, 10 do
    print (string.format("%2d  %10.3f", i, input ^ (1/i)))
end
</code></pre>

<p>Output:</p>

<pre><code> 1  248832.000
 2     498.831
 3      62.898
 4      22.335
 5      12.000
 6       7.931
 7       5.900
 8       4.726
 9       3.977
10       3.464
</code></pre>

<h4>In Go</h4>

<pre><code>package main
import (
    "fmt"
    "math"
)
func main() {
    const input = 248832

    for i := 1; i &lt;= 10; i++ {
        fmt.Printf("%2d\t%10.3f\n", i, math.Pow(input, 1.0/float64(i)))
    }
}
</code></pre>

<p>Output:</p>

<pre><code> 1  248832.000
 2     498.831
 3      62.898
 4      22.335
 5      12.000
 6       7.931
 7       5.900
 8       4.726
 9       3.977
10       3.464
</code></pre>

<h4>In Java</h4>

<pre><code>class Main {  
    public static void main(String args[]) { 
        double input = Double.parseDouble(args[0]);
        for (int i = 1; i &lt;= 10; i++) {
            double root = Math.pow(input, 1.0 / i );
            System.out.format("%2d   %10.3f\n", i, root); 
        } 
    }  
}
</code></pre>

<p>Output:</p>

<pre><code> 1   248832.000
 2      498.831
 3       62.898
 4       22.335
 5       12.000
 6        7.931
 7        5.900
 8        4.726
 9        3.977
10        3.464
</code></pre>

<h4>In Nim</h4>

<p>Nim uses Python-like code indentation.</p>

<pre><code>import math

var input = 248832.0
for i in 1..8: 
  var root = pow(input, 1.0 / float(i))
  echo i, "   ", root
</code></pre>

<p>Output:</p>

<pre><code>1   248832.0
2   498.8306325798367
3   62.89779346101351
4   22.33451661845039
5   12.0
6   7.930812913000375
7   5.899887726224536
8   4.725940818339814
</code></pre>

<h4>In Julia</h4>

<pre><code>input = 248832
for i = 1:10
    @printf("%2d  %10.3f\n", i, input ^ (1/i) )
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia root.jl
 1  248832.000
 2     498.831
 3      62.898
 4      22.335
 5      12.000
 6       7.931
 7       5.900
 8       4.726
 9       3.977
10       3.464
</code></pre>

<h4>In Rust</h4>

<pre><code>fn main() {
    let input = 248832f64;
    for i in 1..11 {
        let root = input.powf(1.0/i as f64);
        println!("{:2}   {:10.3}", i,  root);
    }
}
</code></pre>

<p>Output:</p>

<pre><code> 1   248832.000
 2      498.831
 3       62.898
 4       22.335
 5       12.000
 6        7.931
 7        5.900
 8        4.726
 9        3.977
10        3.464
</code></pre>

<h2>Task 2: The Name Game</h2>

<p><em>You are given a <code>$name</code>.</em></p>

<p><em>Write a script to display the lyrics to the Shirley Ellis song The Name Game. Please checkout the <a href="https://en.wikipedia.org/wiki/The_Name_Game">wiki page</a> for more information.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $name = "Katie"
Output:

    Katie, Katie, bo-batie,
    Bonana-fanna fo-fatie
    Fee fi mo-matie
    Katie!
</code></pre>

<p>The Name Game is apparently very well known in the United States, but I haven&#8217;t lived there and the rules are not entirely clear to me, so I&#8217;ll base my programs on my best understanding of those rules.</p>

<h3>The Name Game in Raku</h3>

<p>We&#8217;ll use a <em>here-doc</em> for producing the lyrics of the song, with variable interpolation. So, the only difficulty is to populate these variables with the right values in accordance with rules laid out in the Wikipedia page referred to above.</p>

<pre><code>use v6;

my $name = prompt "Please enter the name: ";
my $vowels = Set.new(&lt;a e i o u&gt;);
my $consonants = Set.new('a'..'z') (-) $vowels;
my ($start, $suffix) = ($0, $1) if $name ~~ /(\w)(\w+)/;

my @y;
if $start.lc (elem) $consonants {
    @y[0] = $start eq 'B' ?? "bo-$suffix" !! "bo-b$suffix";
    @y[1] = $start eq 'F' ?? "fo-$suffix" !! "fo-f$suffix";
    @y[2] = $start eq 'M' ?? "mo-$suffix" !! "mo-m$suffix";
} else {
    @y = "bo-$suffix", "fo-$suffix", "mo-$suffix";
}

say qq:to/END/; 
    $name, $name, @y[0]
    Bonana-fanna @y[1]
    Fee fi @y[2])
    $name!
    END
</code></pre>

<p>Examples of output:</p>

<pre><code>$ ./raku name-game.raku
Please enter the name: Katie
Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie)
Katie!

$ ./raku name-game.raku
Please enter the name: Billy
Billy, Billy, bo-illy
Bonana-fanna fo-filly
Fee fi mo-milly)
Billy!

$ ./raku name-game.raku
Please enter the name: Anna
Anna, Anna, bo-nna
Bonana-fanna fo-nna
Fee fi mo-nna)
Anna!
</code></pre>

<h3>The Name Game in Perl</h3>

<p>This a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

say "Please enter the name: ";
my $name = &lt;STDIN&gt;;
chomp $name;
my %vowels = map { $_ =&gt; 1} qw&lt;a e i o u&gt;;
my ($start, $suffix) = ($1, $2) if $name =~ /(\w)(\w+)/;
my @y;
if (exists $vowels{lc $start}) {
    @y = ("bo-$suffix", "fo-$suffix", "mo-$suffix");
} else {
    $y[0] = $start eq 'B' ? "bo-$suffix" : "bo-b$suffix";
    $y[1] = $start eq 'F' ? "fo-$suffix" : "fo-f$suffix";
    $y[2] = $start eq 'M' ? "mo-$suffix" : "mo-m$suffix";
}
say "\n", &lt;&lt;~EOF;
    $name, $name, $y[0]
    Bonana-fanna $y[1]
    Fee fi $y[2])
    $name!
    EOF
</code></pre>

<p>Examples of output:</p>

<pre><code>$ perl  name-game.pl
Please enter the name:
Katie

Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie)
Katie!

$ perl  name-game.pl
Please enter the name:
Anna

Anna, Anna, bo-nna
Bonana-fanna fo-nna
Fee fi mo-nna)
Anna!

$ perl  name-game.pl
Please enter the name:
Billy

Billy, Billy, bo-illy
Bonana-fanna fo-filly
Fee fi mo-milly)
Billy!
</code></pre>

<h3>The Name Game in Scala</h3>

<pre><code>object nameGame extends App {
  val in: String = if (args.size == 1) args(0) else "Katie"
  val start =  in.substring(0, 1)
  val suffix = in.substring(1)
  val vowels = Map("A" -&gt; 1, "E" -&gt; 1, "I" -&gt; 1, "O" -&gt; 1, "U" -&gt; 1)

  val bosuffix = if (start == 'B' || vowels.contains(start)) 
    s"bo-$suffix"  else s"bo-b$suffix"
  val fosuffix = if (start == 'F' || vowels.contains(start)) 
    s"fo-$suffix"  else s"fo-f$suffix"
  val mosuffix = if (start == 'M' || vowels.contains(start)) 
    s"mo-$suffix" else s"mo-m$suffix"

  println(s"$in, $in, $bosuffix")
  println(s"Bonana-fanna $fosuffix")
  println(s"Fee fi $mosuffix")
  println(s"$in!")
}
</code></pre>

<p>Example output:</p>

<pre><code>Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie
Katie!
</code></pre>

<h3>The Name Game in Python</h3>

<pre><code>import sys
input = sys.argv[1] if len(sys.argv) &gt; 1 else "Katie"
start = input[0]
suffix = input[1:]
vowels = { "A", "E", "I", "O", "U"}

bosuffix = f'bo-{suffix}' if (start == 'B' or start in vowels) else f'bo-b{suffix}'
fosuffix = f'fo-{suffix}' if (start == 'F' or start in vowels) else f'fo-f{suffix}'
mosuffix = f'mo-{suffix}' if (start == 'M' or start in vowels) else f'mo-m{suffix}'

print(f'{input}, {input}, {bosuffix}')
print(f'Bonana-fanna {fosuffix}')
print(f'Fee fi {mosuffix}')
print(f'{input}!')
</code></pre>

<p>Output:</p>

<pre><code>$ python3 name-game.py
Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie
Katie!
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 4, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Data visualization: Creating charts from perl using plotly.js (Chart::Plotly)</title>
    <link rel="alternate" href="https://dev.to/raigaurav/data-visualization-creating-charts-from-perl-using-plotly-js-chart-plotly-3m48" type="text/html"/>
    <content type="html">&lt;p&gt;In my &lt;a href="https://dev.to/raigaurav/data-visualization-creating-charts-using-perl-chart-clicker-1hm"&gt;previous&lt;/a&gt; article, I mentioned I will talking more about &lt;a href="https://metacpan.org/pod/Chart::Plotly"&gt;Chart::Plotly&lt;/a&gt;. Today is that day. So without further ado lets get started.&lt;br&gt;
As mentioned in &lt;a href="https://metacpan.org/pod/Chart::Plotly"&gt;Chart::Plotly&lt;/a&gt; - Chart::Plotly helps you to html/javascript charts from perl data using javascript library &lt;a href="https://plotly.com/javascript/"&gt;plotly.js&lt;/a&gt;. The result is a file that you could see in your favorite browser. Also you can save the image locally and use it as per your need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plotly.js&lt;/strong&gt; is very powerful which offers a lot of feature and wide variety of charts. It is built on top of &lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt; and &lt;a href="https://github.com/stackgl"&gt;stack.gl&lt;/a&gt;. The charts are fully customizable. You can provide all the configurations in declarative format (JSON) and it takes care of the rest. You don't need to be a javascript expert to use this as  all the complexity is taken care of. There are lot of &lt;a href="https://plotly.com/javascript/basic-charts/"&gt;examples&lt;/a&gt; available and plenty of documentation for your help. Also it support statistical and scientific charts.(You can use Chart::Plotly with &lt;a href="https://metacpan.org/pod/PDL"&gt;PDL&lt;/a&gt; too.)&lt;/p&gt;

&lt;p&gt;So lets get started.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-data-config" class="anchor"&gt;
  &lt;/a&gt;
  Creating the data config
&lt;/h1&gt;

&lt;p&gt;We will use the exact same example as in &lt;a href="https://dev.to/raigaurav/data-visualization-creating-charts-using-perl-chart-clicker-1hm"&gt;previous&lt;/a&gt; article and try to create a multi line chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Number of automobiles sold per day by manufacturer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"domainAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"2020-04-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-18"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Date"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rangeAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lines"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"line1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"legendName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Honda"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"line2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"legendName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Toyota"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"line3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"legendName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ford"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"line4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"legendName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Renault"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Numbers of automobiles sold"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the config which contains the data for multi line chart. &lt;br&gt;
&lt;code&gt;domainAxis&lt;/code&gt;(x-axis) is a &lt;strong&gt;date&lt;/strong&gt; axis while &lt;code&gt;rangeAxis&lt;/code&gt;(y-axis) have 4 lines.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#directory-structure" class="anchor"&gt;
  &lt;/a&gt;
  Directory structure
&lt;/h1&gt;

&lt;p&gt;Our directory structure will be simple. input for input data, output for generated chart, lib for perl module.&lt;/p&gt;

&lt;p&gt;┣ 📂input&lt;br&gt;
┃ ┗ 📜input_data.json&lt;br&gt;
┣ 📂lib&lt;br&gt;
┃ ┗ 📜CreateLineCharts.pm&lt;br&gt;
┣ 📂output&lt;br&gt;
┣ 📜multi_line_chart.pl&lt;br&gt;
┗ 📜README.md&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-module" class="anchor"&gt;
  &lt;/a&gt;
  Creating the module
&lt;/h1&gt;

&lt;p&gt;One good thing about this module is- the documentation of plotly.js is rqually applicable here. So even the documentation is little sparse in Chart::Plotly, the documentation in plotly.js comes to rescue and you can use the exact same names and keywords in your perl code without any issue. Also, similar examples are available in python version also on the plotly.js website. So if you understand little bit of any of these 3 languages it is a cakewalk for you in other one.&lt;/p&gt;

&lt;p&gt;So, lets create our module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;CreateLineCharts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# https://plotly.com/javascript/line-charts/&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::&lt;/span&gt;&lt;span class="nv"&gt;Plotly&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;show_plot&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::&lt;/span&gt;&lt;span class="nv"&gt;Image&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::&lt;/span&gt;&lt;span class="nv"&gt;Plot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::Trace::&lt;/span&gt;&lt;span class="nv"&gt;Scatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;generate_line_chart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$chart_out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;domainAxis&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;rangeAxis&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::&lt;/span&gt;&lt;span class="nv"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y_line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$y_axis&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$scatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::Trace::&lt;/span&gt;&lt;span class="nv"&gt;Scatter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;x&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x_axis&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="sr"&gt;y    =&amp;gt; $y_axis-&amp;gt;{lines}-&amp;gt;{$y_line}-&amp;gt;{data},
            name =&amp;gt; $y_axis-&amp;gt;{lines}-&amp;gt;{$y_line}-&amp;gt;{legendName}
         );
        $plot-&amp;gt;add_trace($scatter);
    }

    # Opens the plot or plots in a browser locally
    show_plot($plot);

    # https://metacpan.org/pod/Chart::Plotly::Image#save_image
    save_image(
        file   =&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$chart_out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;# Referring to a local filesystem path&lt;/span&gt;
        &lt;span class="s"&gt;plot&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;width&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;# Sets the image width&lt;/span&gt;
        &lt;span class="s"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    &lt;span class="c1"&gt;# Sets the image height&lt;/span&gt;
        &lt;span class="s"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are just going through each line and creating a &lt;a href="https://metacpan.org/pod/Chart::Plotly::Trace::Scatter"&gt;Chart::Plotly::Trace::Scatter&lt;/a&gt; object and adding it to plot.&lt;br&gt;
There are 2 functions which I would like to point out -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;show_plot&lt;/code&gt; function will open the generated chart in you favorite browser locally.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;save_image&lt;/code&gt; will save the generated file locally in your local filesystem. This will be useful when you want to send this as mail attachment in automated fashion.
You can use anyone of them based on your requirement or both.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#using-the-module" class="anchor"&gt;
  &lt;/a&gt;
  Using the module
&lt;/h1&gt;

&lt;p&gt;Let create our startup script to access this module for creating our chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Cwd&lt;/span&gt; &lt;span class="sx"&gt;qw( abs_path )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;File::&lt;/span&gt;&lt;span class="nv"&gt;Basename&lt;/span&gt; &lt;span class="sx"&gt;qw( dirname )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="p"&gt;"}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="p"&gt;"}&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/lib&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;CreateLineCharts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chart_out_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="p"&gt;"}&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/output/lineChart.png&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;read_json_file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Reading &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to open file &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="s2"&gt; : $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Unable to close file : $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;decode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;read_json_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;SCRIPT_DIR&lt;/span&gt;&lt;span class="p"&gt;"}&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/input/input_data.json&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;CreateLineCharts&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$chart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;generate_line_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$chart_out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data_in_json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are reading the JSON data from input file and calling generate_line_chart of our module with it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#running-the-script" class="anchor"&gt;
  &lt;/a&gt;
  Running the script
&lt;/h1&gt;

&lt;p&gt;Now just run the above script and see the output. Running the script will automatically open your favorite browser with the chart. The output will be generated in 2 places.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the browser
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P132kS0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a949yxwjp3h6k0w5yo4v.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Locally in &lt;code&gt;output&lt;/code&gt; dir
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQKu-s0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viue94m1wn6bt7cp2cr3.png" alt="Alt Text"&gt;
Both are similar chart. Of course, the browser one is dynamic and interactive chart and the local filesystem one is static.
Also there are several other options available when you hover over the chart in browser. You can see them at top right corner(highlighted in yellow).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it. You have your multi line chart with minimal code. There are lot of configuration options available. The default generated chart is already good enough. In case you are interested in more options proceed ahead.&lt;/p&gt;

&lt;p&gt;Bonus - If you noticed the url in your browser, you can see the .html file is created in temp location. Go to that location and try to  open that file in your favorite editor(or you can inspect element and see there).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"1ca037ff-8fd4-11eb-bd22-b212bed9e091"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.plot.ly/plotly-1.52.2.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;Plotly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1ca037ff-8fd4-11eb-bd22-b212bed9e091&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),[{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-18&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Renault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scatter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-18&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scatter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scatter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-18&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]},{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-17&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-18&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scatter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ford&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above template is generated by Chart::Plotly only(Precisly &lt;a href="https://metacpan.org/source/PABLROD/Chart-Plotly-0.041/lib%2FChart%2FPlotly.pm#L70"&gt;here&lt;/a&gt;). The div id gets randomly generated at each time. After that we are using &lt;a href="https://plotly.com/javascript/plotlyjs-function-reference/#plotlyreact"&gt;Plotly.react&lt;/a&gt; to create a plot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-advanced-config-options" class="anchor"&gt;
  &lt;/a&gt;
  Some advanced config options
&lt;/h1&gt;

&lt;p&gt;As I mentioned before plotly.js is powerful and highly configurable. Now lets take a look at those configuration.&lt;br&gt;
In case you are not happy with default config you can change it as per your need. These configuration ranges from styling the plot lines, changing the layout, legend, marker, font, color, text anything you want.&lt;br&gt;
Now lets add these configuration to our module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;CreateLineCharts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# https://plotly.com/javascript/line-charts/&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::&lt;/span&gt;&lt;span class="nv"&gt;Plotly&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;show_plot&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::&lt;/span&gt;&lt;span class="nv"&gt;Image&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::&lt;/span&gt;&lt;span class="nv"&gt;Plot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::Trace::&lt;/span&gt;&lt;span class="nv"&gt;Scatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;HTML::&lt;/span&gt;&lt;span class="nv"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Data::&lt;/span&gt;&lt;span class="nv"&gt;Dumper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;@arguments&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;bless&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_generate_plot_lines&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$x_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$y_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# https://metacpan.org/pod/Chart::Plotly::Trace::Scatter&lt;/span&gt;
    &lt;span class="c1"&gt;# https://plotly.com/javascript/reference/scatter/&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$scatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::Trace::&lt;/span&gt;&lt;span class="nv"&gt;Scatter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;x&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x_line&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="sr"&gt;y    =&amp;gt; $y_line-&amp;gt;{data},
        name =&amp;gt; $y_line-&amp;gt;{legendName},

        # mode =&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;markers&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;                 &lt;span class="c1"&gt;# Add markers at data points instead of line&lt;/span&gt;
        &lt;span class="s"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;symbol&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;diamond&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;            &lt;span class="c1"&gt;# Default - circle&lt;/span&gt;
            &lt;span class="s"&gt;size&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    &lt;span class="c1"&gt;# marker size(in px). Default - 6px&lt;/span&gt;
            &lt;span class="s"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="c1"&gt;# Marker opacity (0-1)&lt;/span&gt;
            &lt;span class="c1"&gt;# color   =&amp;gt; 'red'               # Sets the marker color&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;# text =&amp;gt; $x_line-&amp;gt;{data}            # Extra text you want to show on mouse hover over all the data points.&lt;/span&gt;

        &lt;span class="c1"&gt;# https://metacpan.org/pod/Chart::Plotly::Trace::Scatter::Line&lt;/span&gt;
        &lt;span class="s"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;# width   =&amp;gt; 3,                  # Width of line, Default: 2&lt;/span&gt;
            &lt;span class="c1"&gt;# color   =&amp;gt; '#45b5c6',          # Color of the line&lt;/span&gt;
            &lt;span class="s"&gt;shape&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;spline&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;           &lt;span class="c1"&gt;# Determines the line shape - one of("linear" | "spline" | "hv" | "vh" | "hvh" | "vhv"), Default: "linear"&lt;/span&gt;
            &lt;span class="s"&gt;smoothing&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;# Used only if `shape` is set to "spline", Default: 1&lt;/span&gt;
            &lt;span class="s"&gt;dash&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;            &lt;span class="c1"&gt;# Dash style of line - ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot"). Default: "solid"&lt;/span&gt;
            &lt;span class="s"&gt;simplify&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;# Simplifies lines by removing nearly-collinear points. Default: true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_add_layout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$chart_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$x_axis_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$y_axis_title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$chart_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;# font  =&amp;gt; {                          # Sets the global font&lt;/span&gt;
            &lt;span class="c1"&gt;#     family =&amp;gt; "Open Sans",          # Default font - ""Open Sans", verdana, arial, sans-serif"&lt;/span&gt;
            &lt;span class="c1"&gt;#     size     =&amp;gt; 14                  # default - 12px&lt;/span&gt;
            &lt;span class="c1"&gt;# },&lt;/span&gt;
            &lt;span class="c1"&gt;# https://plotly.com/javascript/legend/&lt;/span&gt;
            &lt;span class="s"&gt;legend&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;# orientation =&amp;gt; "h",             # Sets the orientation of the legend('v' or 'h'). Default - v(vertical)&lt;/span&gt;
                &lt;span class="c1"&gt;# xanchor     =&amp;gt; "left",          # Sets the legend's horizontal position anchor. "left", "center" or "right"&lt;/span&gt;
                &lt;span class="c1"&gt;# yanchor     =&amp;gt; "bottom",        # Sets the legend's vertical position anchor. "top", "middle" or "bottom"&lt;/span&gt;
                &lt;span class="c1"&gt;# x           =&amp;gt; 0,               # number between or equal to -2 and 3&lt;/span&gt;
                &lt;span class="c1"&gt;#                                 # Sets the x position (in normalized coordinates) of the legend.&lt;/span&gt;
                &lt;span class="c1"&gt;#                                 # Defaults to "1.02" for vertical legends and defaults to "0" for horizontal legends.&lt;/span&gt;
                &lt;span class="c1"&gt;# y           =&amp;gt; -0.1,            # number between or equal to -2 and 3&lt;/span&gt;
                &lt;span class="c1"&gt;#                                 # Sets the y position (in normalized coordinates) of the legend.&lt;/span&gt;
                &lt;span class="c1"&gt;#                                 # Defaults to "1" for vertical legends, defaults to "-0.1" for horizontal legends on graphs w/o range sliders and defaults to "1.1" for horizontal legends on graph with one or multiple range sliders.&lt;/span&gt;

                &lt;span class="s"&gt;bgcolor&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;         &lt;span class="c1"&gt;# Sets the legend background color . Defaults to `layout.paper_bgcolor`&lt;/span&gt;
                &lt;span class="s"&gt;bordercolor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;         &lt;span class="c1"&gt;# Sets the color of the border enclosing the legend . Default - #444&lt;/span&gt;
                &lt;span class="s"&gt;borderwidth&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                 &lt;span class="c1"&gt;# Sets the width (in px) of the border enclosing the legend. Default - 0&lt;/span&gt;
                &lt;span class="s"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                         &lt;span class="c1"&gt;# Sets the font used to text the legend items.&lt;/span&gt;
                    &lt;span class="s"&gt;size&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;            &lt;span class="c1"&gt;# Black&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="c1"&gt;# title =&amp;gt; {                      # Sets the title of the legend. Default - ""&lt;/span&gt;
                &lt;span class="c1"&gt;#     text =&amp;gt; "Legend",&lt;/span&gt;
                &lt;span class="c1"&gt;#     font =&amp;gt; {size =&amp;gt; 14, color =&amp;gt; "black"},&lt;/span&gt;
                &lt;span class="c1"&gt;#     side =&amp;gt; "top"               # Location of legend's title with respect to the legend items&lt;/span&gt;
                &lt;span class="c1"&gt;# }&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;

            &lt;span class="c1"&gt;# showlegend =&amp;gt; JSON::false,                # Whether you want to display the legend on not. Default - true&lt;/span&gt;
            &lt;span class="c1"&gt;# https://plotly.com/javascript/axes/&lt;/span&gt;
            &lt;span class="c1"&gt;# https://plotly.com/javascript/tick-formatting/&lt;/span&gt;
            &lt;span class="s"&gt;xaxis&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;title&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x_axis_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;# Text label for x-axis&lt;/span&gt;
                &lt;span class="s"&gt;type&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                      &lt;span class="c1"&gt;# x-axis type&lt;/span&gt;
                &lt;span class="s"&gt;automargin&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;linecolor&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                &lt;span class="c1"&gt;# Sets color of X-axis line&lt;/span&gt;
                &lt;span class="c1"&gt;# titlefont  =&amp;gt; {color =&amp;gt; '#0066ff'},   # Title font formating&lt;/span&gt;
                &lt;span class="c1"&gt;# tickfont   =&amp;gt; {color =&amp;gt; '#0066ff'},&lt;/span&gt;
                &lt;span class="s"&gt;zeroline&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="c1"&gt;# Show zero line or not&lt;/span&gt;
                &lt;span class="s"&gt;zerolinecolor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;             &lt;span class="c1"&gt;# Assign specific color to zero line&lt;/span&gt;
                &lt;span class="s"&gt;zerolinewidth&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

                &lt;span class="c1"&gt;# showgrid =&amp;gt; JSON::false               # Removes X-axis grid lines&lt;/span&gt;
                &lt;span class="c1"&gt;# rangeslider =&amp;gt; { visible =&amp;gt; JSON::false },&lt;/span&gt;
                &lt;span class="c1"&gt;# gridcolor   =&amp;gt; '#bfbfbf',&lt;/span&gt;
                &lt;span class="c1"&gt;# gridwidth   =&amp;gt; 1,&lt;/span&gt;
                &lt;span class="c1"&gt;# tickformat =&amp;gt; "YYYY-MM-DD",           # d3-format specifier. If empty or "" plotly will attempt to guess format&lt;/span&gt;
                &lt;span class="c1"&gt;# dtick       =&amp;gt; 1                      # step in-between ticks&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;yaxis&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;title&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$y_axis_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;tickformat&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"",&lt;/span&gt;                       &lt;span class="c1"&gt;# d3-format specifier. If empty or "" plotly will attempt to guess format.&lt;/span&gt;
                &lt;span class="s"&gt;automargin&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;linecolor&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                &lt;span class="c1"&gt;# Sets color of Y-axis line&lt;/span&gt;
                &lt;span class="c1"&gt;# titlefont  =&amp;gt; {color =&amp;gt; '#0066ff'},&lt;/span&gt;
                &lt;span class="c1"&gt;# tickfont   =&amp;gt; {color =&amp;gt; '#0066ff'},&lt;/span&gt;
                &lt;span class="s"&gt;rangemode&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tozero&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                 &lt;span class="c1"&gt;# Forced to start from zero. Default - "normal"&lt;/span&gt;
                &lt;span class="s"&gt;automargin&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;zeroline&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="c1"&gt;# Show zero line or not&lt;/span&gt;
                &lt;span class="c1"&gt;# showgrid =&amp;gt; JSON::false               # Removes Y-axis grid lines&lt;/span&gt;
                &lt;span class="c1"&gt;# side =&amp;gt; "left",                       # Location of y-axis. "left" or "right"&lt;/span&gt;
                &lt;span class="c1"&gt;# gridcolor =&amp;gt; '#bfbfbf',               # Assign specific color to grid &lt;/span&gt;
                &lt;span class="c1"&gt;# gridwidth =&amp;gt; 1,&lt;/span&gt;
                &lt;span class="c1"&gt;# dtick =&amp;gt; 1                            # step in-between ticks&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;paper_bgcolor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                 &lt;span class="c1"&gt;# Sets the background color of the paper where the graph is drawn. Default - #FFF&lt;/span&gt;
            &lt;span class="s"&gt;plot_bgcolor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                  &lt;span class="c1"&gt;# Sets the background color of the plotting area in-between x and y axes.&lt;/span&gt;
            &lt;span class="s"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                 &lt;span class="c1"&gt;# Default(in px): left(80), right(80), top(100), bottom(80)&lt;/span&gt;
                &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;l&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;r&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;width&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                             &lt;span class="c1"&gt;# Sets the plot's width. Default - 700px&lt;/span&gt;
            &lt;span class="s"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                              &lt;span class="c1"&gt;# Sets the plot's height. Default - 450px&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_add_config&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# https://plotly.com/javascript/configuration-options/&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;scrollZoom&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;# mousewheel or two-finger scroll zooms the plot&lt;/span&gt;
        &lt;span class="s"&gt;editable&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                   &lt;span class="c1"&gt;# In editable mode, users can edit the chart title, axis labels and trace names in the legend&lt;/span&gt;
        &lt;span class="c1"&gt;# staticPlot =&amp;gt; JSON::true,                 # Create a static chart&lt;/span&gt;
        &lt;span class="s"&gt;toImageButtonOptions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                   &lt;span class="c1"&gt;# Customize Download Plot Options&lt;/span&gt;
            &lt;span class="s"&gt;format&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;                      &lt;span class="c1"&gt;# one of png, svg, jpeg, webp. Default - png&lt;/span&gt;
            &lt;span class="s"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multi_line_chart&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;         &lt;span class="c1"&gt;# Default name - newplot&lt;/span&gt;
            &lt;span class="s"&gt;height&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;width&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;scale&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;                           &lt;span class="c1"&gt;# Multiply title/legend/axis/canvas sizes by this factor&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;# displayModeBar =&amp;gt; JSON::true,             # Force The Modebar at top to Always Be Visible.&lt;/span&gt;
                                                    &lt;span class="c1"&gt;# By default, the modebar is only visible while the user is hovering over the chart.&lt;/span&gt;
                                                    &lt;span class="c1"&gt;# Making it 'false' will never Display The Modebar&lt;/span&gt;
        &lt;span class="s"&gt;modeBarButtonsToRemove&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;sendDataToCloud&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt;          &lt;span class="c1"&gt;# Delete some buttons from the modebar&lt;/span&gt;

        &lt;span class="s"&gt;showLink&lt;/span&gt;        &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                          &lt;span class="c1"&gt;# Display the `Edit Chart` Link&lt;/span&gt;
        &lt;span class="s"&gt;plotlyServerURL&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://chart-studio.plotly.com&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;   &lt;span class="c1"&gt;# Here you can directly edit your chart in browser&lt;/span&gt;
        &lt;span class="s"&gt;linkText&lt;/span&gt;        &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Edit chart in chart studio&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;

        &lt;span class="c1"&gt;# locale        =&amp;gt; 'fr',                    # Change the Default Locale.&lt;/span&gt;
                                                    &lt;span class="c1"&gt;# More info - https://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization&lt;/span&gt;
        &lt;span class="s"&gt;displaylogo&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JSON::&lt;/span&gt;&lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;            &lt;span class="c1"&gt;# Hide the Plotly Logo on the Modebar&lt;/span&gt;
        &lt;span class="c1"&gt;# responsive     =&amp;gt; JSON::true,             # Responsive to window size&lt;/span&gt;
        &lt;span class="c1"&gt;# doubleClickDelay =&amp;gt; 1000,                 # maximum delay between two consecutive clicks to be interpreted as a double-click in ms (default 300 ms)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;%config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;generate_line_chart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$chart_out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;domainAxis&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y_axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;rangeAxis&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Chart::Plotly::&lt;/span&gt;&lt;span class="nv"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y_line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$y_axis&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$scatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_generate_plot_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$x_axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$y_axis&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$y_line&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$scatter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_add_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$chart_data&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$x_axis&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$y_axis&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_add_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;div_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_div_id&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;                          &lt;span class="c1"&gt;# Id of the div, in which you want your chart to be embedded&lt;/span&gt;
        &lt;span class="s"&gt;load_plotly_using_script_tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;         &lt;span class="c1"&gt;# Can be : 1 or cdn, embed, module_dist.&lt;/span&gt;
                                                        &lt;span class="c1"&gt;# * By default, it is 1(cdn) meaning it will load plotly.js using cdn link.&lt;/span&gt;
                                                        &lt;span class="c1"&gt;# * 'embed' will take it from the plotly.js that is shipped wth Chart::Plotly and paste it within &amp;lt;script&amp;gt; tag.&lt;/span&gt;
                                                        &lt;span class="c1"&gt;# * 'module_dist' is similar to 'embed' except it will provide the source in &amp;lt;script src="file://"&amp;gt;.&lt;/span&gt;
                                                        &lt;span class="c1"&gt;# Please note that using 'module_dist' will show the actual location of the file on your location machine(e.g. /usr/lib/perl/5.30/site/lib/Chart-Plotly/plotly.js/plotly.min.js).&lt;/span&gt;
                                                        &lt;span class="c1"&gt;# So, beware of this as you will be showing this location in your browser&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Returns the structure suitable to serialize to JSON corresponding to the plot&lt;/span&gt;
    &lt;span class="c1"&gt;# print Dumper($plot-&amp;gt;TO_JSON);&lt;/span&gt;

    &lt;span class="c1"&gt;# Returns the plot serialized in JSON . Not suitable to use in nested structures&lt;/span&gt;
    &lt;span class="c1"&gt;# print Dumper($plot-&amp;gt;to_json_text);&lt;/span&gt;

    &lt;span class="c1"&gt;# Opens the plot or plots in a browser locally.&lt;/span&gt;
    &lt;span class="c1"&gt;# Both are equal. In second statement we are just updating the div id with user defined one and determining how to load plotly.js&lt;/span&gt;
    &lt;span class="nv"&gt;show_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nn"&gt;HTML::Show::&lt;/span&gt;&lt;span class="nv"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# https://metacpan.org/pod/Chart::Plotly::Image#save_image&lt;/span&gt;
    &lt;span class="nv"&gt;save_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;file&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$chart_out_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="c1"&gt;# Referring to a local filesystem path&lt;/span&gt;
        &lt;span class="s"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;png&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;                    &lt;span class="c1"&gt;# Supported formats are png, jpeg, webp, svg, pdf, eps.&lt;/span&gt;
                                            &lt;span class="c1"&gt;# By default it's inferred from the specified file name extension&lt;/span&gt;
        &lt;span class="s"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                         &lt;span class="c1"&gt;# Multiply title/legend/axis/canvas sizes by this factor&lt;/span&gt;
        &lt;span class="s"&gt;plot&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;# width  =&amp;gt; 1024,                   # Sets the image width&lt;/span&gt;
        &lt;span class="c1"&gt;# height =&amp;gt; 768,                    # Sets the image height&lt;/span&gt;
        &lt;span class="s"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know its overwhelming. But, I spend quite a few time just to know what each configuration does. I have added those as comments with do and don't in front or top of those config options.&lt;br&gt;
I have gone through ploty.js doc and tried those in perl version. To my surprise each and every one of them worked in perl world. As I mentioned before the documentation of Chart::Plotly can be improved and this example can help someone working on it for first time.&lt;br&gt;
Also you can look at &lt;a href="https://metacpan.org/source/PABLROD/Chart-Plotly-0.041/examples"&gt;examples&lt;/a&gt; section of Chart::Plotly for more examples of different charts.&lt;/p&gt;

&lt;p&gt;Now, lets run and see the output again. There will be 3 output generated. Two in browser and one in local dir.&lt;br&gt;
Some thing I would like to point.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;show_plot($plot)&lt;/code&gt; - The first output in browser is generated form here.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WGW7IAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iin60otwm6zcssmt8e4d.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;HTML::Show::show($html)&lt;/code&gt; - The second output in browser is generated from here. This statement is similar to first one with only 2 difference. One being the &lt;code&gt;div_id&lt;/code&gt; which we are using as user defined. Second being, how to get plotly.js for generating chart(through cdn or the one shipped with Chart::Plotly etc). Inspect element and check the difference between this and first point, you will understand. Below you can see the 'div' id is user defined and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag contains plotly.js as embeded instead of cdn link.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkyQqCPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99fv8053tyetz1suehkw.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;save_image&lt;/code&gt; - The third chart generated locally is from this function.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYTisYHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvff4gr6c5vlq9k2xajo.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$plot-&amp;gt;TO_JSON&lt;/code&gt; - Returns the structure suitable to serialize to JSON corresponding to the plot. You can dump it to see what is exactly happening inside chart. You will see all the config and set options.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$plot-&amp;gt;config(\%config)&lt;/code&gt; - Extra config for the chart. These are mostly specific to chart which you are seeing in browser. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JSON::false&lt;/code&gt; and &lt;code&gt;JSON::true&lt;/code&gt; - As perl doesn't have boolean, I am using this for setting the config option as false or true depending on the javascript false or true. You can use any other JSON module for similar purpose if you want.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As mentioned, I have only created multi line chart but there are multiple options available each one having there one configuration. You can choose from them.&lt;br&gt;
I hope you got some clarity on how to use this module. So, next time when you got any opportunity to create chart you know what to use.&lt;/p&gt;

&lt;p&gt;The above example is also available at &lt;a href="https://github.com/rai-gaurav/Charts/tree/main/ChartPlotly"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl Onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Plotly logo taken from &lt;a href="https://github.com/plotly/plotly.js/blob/master/README.md"&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gaurav Rai</name>
    </author>
    <id>https://dev.to/raigaurav/data-visualization-creating-charts-from-perl-using-plotly-js-chart-plotly-3m48</id>
    <published>2021-03-28T17:08:01Z</published>
    <updated>2021-03-28T17:08:01Z</updated>
    <category term="perl"/>
    <category term="javascript"/>
    <category term="chart"/>
    <category term="plotly"/>
  </entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/28#pwc105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The examples used here are from the weekly challenge problem statement and demonstrate the working solution.</em></p>
<h2 id="part-1">Part 1</h2>
<p><em>You are given positive numbers $N and $k. Write a script to find out the $Nth root of $k</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
sub nth_root{
    my($n, $k) = @_;
    my $x_i = int(rand(10) + 1); 
    my $r;
    for my $i (0 .. 100){
        $x_i = (1 / $n) * (($n - 1) * $x_i + ($k / $x_i ** ($n - 1)));  
    } 
    return $x_i;  
}

MAIN:{
    my($N, $k);
    $N = 5;
    $k = 248832;
    print nth_root($N, $k) . "\n";
    $N = 5;
    $k = 34;
    print sprintf("%0.2f", nth_root($N, $k)) . "\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
12
2.02
</code></pre>
<h3 id="notes">Notes</h3>
<p>One of my neatest things one can learn in calculus class, I would argue, is Newton’s method for computing square roots. One can read more on this elsewhere but this works by using a recurrence relationship, defined using directives, to compute the zero of a function. If the function is <code>x^n - a</code>, the zero we are computing is the nth root of a.</p>
<p>To start the process any <code>x_0</code> may be chosen. Here we pick an integer from 1 to 10 at random.</p>
<p>You can compute this for as many iterations as you’d like, of course, but here even 100 iterations is much more than enough to properly converge.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given a $name. Write a script to display the lyrics to the Shirley Ellis song The Name Game.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;

sub name_game{
    my($name) = @_;
    my($b, $f, $m); 
    my $first_letter = lc(substr($name, 0, 1));
    my $irregular_v = $first_letter =~ tr/aeiou//d;
    my $irregular_bfm = $first_letter =~ tr/bfm//d;
    unless($irregular_v || $irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
    }   
    elsif($irregular_v){
        $b = "b" . lc($name);
        $f = "f" . lc($name); 
        $m = "m" . lc($name); 
    }
    elsif($irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
        $b = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "b"; 
        $f = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "f"; 
        $m = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "m"; 
    }  
    format NAME_GAME = 
        @*, @*, bo-@* 
        $name, $name, $b 
        Banana-fana fo-@* 
        $f 
        Fee-fi-mo-@*
        $m
        @*!
        $name
.
    
    select(STDOUT);
    $~ = "NAME_GAME";
    write();  
}


MAIN:{
    my($name);
    $name = "Katie";  
    name_game($name); 
    print "\n"; 
    $name = "Adam";  
    name_game($name); 
    print "\n"; 
    $name = "Mary";  
    name_game($name); 
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
        Katie, Katie, bo-batie
        Banana-fana fo-fatie
        Fee-fi-mo-matie
        Katie!

        Adam, Adam, bo-badam
        Banana-fana fo-fadam
        Fee-fi-mo-madam
        Adam!

        Mary, Mary, bo-bary
        Banana-fana fo-fary
        Fee-fi-mo-ary
        Mary!
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My first comment is that I am a terrible singer and have never been able to reliably remember songs with rules like this at all, at any time of my life! Practically speaking that means I may have had to do more research on this part than one might expect. I did find an excellent reference (listed below) which detailed the rules for each case very clearly.</p>
<p>Perhaps the trickiest case in the one in which the name starts with a b, f, or m. For these you need to adjust the one specific <em>rewrite rule</em> which uses that letter. In the example above we see that Mary requires special handling and becomes <em>Fee-fi-mo-ary</em>.</p>
<p>To print the verses out I use a <a href="https://perldoc.perl.org/perlform">Perl Format</a>. Formats are not the most commonly used feature of Perl these days but still have some nice uses such as here where we want to define a simple template for plain text output. Formats can even be used to write to files, but here we just print to the console.</p>
<p>One Format trick which I have not used before is the use of a variable width field. Much of the documentation for Formats has to do with fixed width fields which can be centered, padded left, padded right, involve multiple lines, and so forth. A common case which is not typically well explained is one we need here. Names are of different lengths and may be followed by a comma or an exclamation point. Padding right adds unwanted space before the “,” or “!”. Padding left adds unwanted space before the name. Centering does both! The trick is to use <code>@*</code> for the field specifier in the Format definition. This will allow the value to be substituted in without any padding.</p>
<h2 id="references">References</h2>
<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Challenge 105</a></p>
<p><a href="https://www.planetmath.org/NthRootByNewtonsMethod">nth root by Newton’s method</a></p>
<p><a href="https://thenamegame-generator.com/the-name-game-rules.html">Name Game Rules</a></p>
<p><a href="https://perldoc.perl.org/perlform">Perl Formats</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc105</id>
    <published>2021-03-28T11:28:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>In defence of OOP</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2021/03/in-defence-of-oop.html"/>
    <id>tag:blogs.perl.org,2021:/users/lichtkind//275.10158</id>
    <published>2021-03-28T01:40:08Z</published>
    <updated>2021-03-28T04:39:04Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="OOP" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>During the last years it became fashionable to rag on object oriented programming and a decade ago I would join the choir. Hack, when I started with Perl I despised the bloat and inefficiency of many corporate smelling *coughjava* systems and preached the light weight and foreward thinking way that real hackers travel. In this miniseries I want to write why I changed my tune [part one], the best way (IMO) to use OOP [part two] and why inheritance (incl. roles and templates) and delegation or not helpful features (in contrast to polymorphism) [part three]. Maybe there will be more  about rating Perl OO features and modules.</p>]]>
        <![CDATA[<p>Objects are a tool to create abstraction layer - to do anything. It's easy to get overwhelmed by possibilities or run with preconceived ideas. And the larger the system, the harder it is to make wise choices. I think this is one reason why a lot of OO code sucks. The second is bad coding styles it's not getting taught enough how to find the right abstractions and how to ease the use by proper naming. The third reason is the introduction and teaching of contra-productive features like inheritance and even worse, multiple inheritance.</p>

<p>So why even bother? To make my point lets unwind history a little. Because back in the days a similar discussion ensued about subroutines, which are also a tool to create abstraction layer. </p>

<p>register_customer( $paul ) is much nicer to our intuitive mind than GOTO 230. It frees up mental resources and makes programming easier. And yes there are 0.2% of algorithms that can be written clearer with goto's (inside a subroutine). Were talking here about API design.</p>

<p>The main point is that we are sealing a sub as one unit to be called or not. Rather than jumping with GOTO into the middle of a sub you insert an additional IF statement inside the sub, to have the option to skip a few lines. Old school programmers may yell at you for wasting 5 or 20 bytes. But you gained the peace knowing the sub always starts at line one so when you approach line 20 you know the data is checked and sanitized so only errors might happen you did not thought about yet. If you jump to line 20 with bad data it might be go well for a while and when things go down its hard to find out why. Having a regulated flow of data is the next big win. </p>

<p>And coincidental but not identical with sub : scopes. Create local variables to prevent name collisions and spooky actions at distance. Its a whole class of problems you instantly can stop to worry and it has no down sides, since you don't want to use the local variables anywhere else anyway. (I only miss the feature of functions that cant access anything but their args).</p>

<p>To summarize: scopes - good, routine syntax - helpful and already it is as much about the (regulated state of) data than flow control.<br />
 <br />
Once you get a lot of subs, you prevent name collisions with name spaces (packages), that also give you order so that each sub is in the right place in the hierarchy. But when the namespaces get nested and names becoming longer you start to which for classes, so you can call the method directly on the object - but were not there yet. Also, attribute data is sanitized once, when coming via a setter into the object and can be used over and over without any second check. So you can pass the object into a sub and data can be used without check. This advantage would vanish if you could reach into object internals - but still this is not my main two points.</p>

<p>With the ability to capsule data you can guarantee to oblige to contracts. (I already touched on that.).  Most importantly strict abstraction layer walls will tell you if your abstraction layers are appropriate. You will notice it if there is a need to violate them or if your classes or methods get to big. This are clear signs that code has to be refactored. And if you have to many classes, it is a sign you don't have enough high order classes. OOP can be used in a very functional manner which is often less painful (in larger projects) than being strictly  functional and fighting with monads all the time. But how exactly do that will be content of the next part ....</p>]]>
    </content>
</entry>
  <entry>
    <title>Perl and XML in 2021: A few lessons learned</title>
    <link rel="alternate" href="https://dev.to/mjgardner/perl-and-xml-in-2021-a-few-lessons-learned-5dp8" type="text/html"/>
    <content type="html">&lt;p&gt;It’s been years since I’ve had to hack on anything &lt;a href="https://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt;-related, but a recent project at work has me once again jumping into the waters of generating, parsing, and modifying this 90s-era document format. Most developers these days likely only know of it as part of the curiously-named &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;XMLHTTPRequest&lt;/a&gt; object in web browsers used to retrieve data in &lt;a href="https://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt; format from servers, and as the “X” in &lt;a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29"&gt;AJAX&lt;/a&gt;. But here we are in 2021, and there are still plenty of APIs and documents using XML to get their work done.&lt;/p&gt;

&lt;p&gt;In my particular case, the task is to update the API calls for a new version of &lt;a href="https://www.virtuozzo.com/support/all-products/virtuozzo-automator.html"&gt;Virtuozzo Automator&lt;/a&gt;. Its API is a bit unusual in that it doesn’t use &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol"&gt;HTTP&lt;/a&gt;, but rather relies on opening a &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt;-encrypted socket to the server and exchanging documents delimited with a &lt;a href="https://en.wikipedia.org/wiki/Null_character"&gt;null character&lt;/a&gt;. The previous version of our code is in 1990s-sysadmin-style Perl, with manual &lt;a href="https://perldoc.pl/functions/bless"&gt;&lt;code&gt;bless&lt;/code&gt;&lt;/a&gt;ing of objects and parsing the XML using &lt;a href="https://perldoc.pl/perlre"&gt;regular expressions&lt;/a&gt;. I’ve decided to update it to use the &lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt; object system and a proper XML parser. But which parser and module to use?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selecting-a-parser" class="anchor"&gt;
  &lt;/a&gt;
  Selecting a parser
&lt;/h2&gt;

&lt;p&gt;There are several &lt;a href="https://perlmaven.com/xml"&gt;generic XML modules&lt;/a&gt; for parsing and generating XML on &lt;a href="https://www.cpan.org/"&gt;CPAN&lt;/a&gt;, each with its own advantages and disadvantages. I’d like to say that I did a comprehensive survey of each of them, but this project is pressed for time &lt;em&gt;(aren’t they all?)&lt;/em&gt; and I didn’t want to create too many extra dependencies in our Perl stack. Luckily, &lt;a href="https://metacpan.org/pod/XML::LibXML"&gt;XML::LibXML&lt;/a&gt; is already available, I’ve had some previous experience with it, and it’s a good choice for performant standards-based XML parsing (using either &lt;a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/DOM.pod"&gt;DOM&lt;/a&gt; or &lt;a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/SAX.pod"&gt;SAX&lt;/a&gt;) and generation.&lt;/p&gt;

&lt;p&gt;Given more time and leeway in adding dependencies, I might use something else. If the Virtuozzo API had an &lt;a href="https://en.wikipedia.org/wiki/XML_schema"&gt;XML Schema&lt;/a&gt; or used &lt;a href="https://en.wikipedia.org/wiki/SOAP"&gt;SOAP&lt;/a&gt;, I would consider &lt;a href="https://metacpan.org/pod/XML::Compile"&gt;XML::Compile&lt;/a&gt; as I’ve had some success with that in other projects. But even that uses XML::LibXML under the hood, so I’d still be using that. Your mileage may vary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-xml" class="anchor"&gt;
  &lt;/a&gt;
  Generating XML
&lt;/h2&gt;

&lt;p&gt;Depending on the size and complexity of the XML documents to generate, you might choose to build them up node by node using &lt;a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/Node.pod"&gt;XML::LibXML::Node&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/Element.pod"&gt;XML::LibXML::Element&lt;/a&gt; objects. Most of the messages I’m sending to Virtuozzo Automator are short and have easily-interpolated values, so I’m using &lt;a href="https://perldoc.pl/perlop#%3C%3CEOF"&gt;here-document&lt;/a&gt; islands of XML inside my Perl code. This also has the advantage of being easily validated against the examples in the documentation.&lt;/p&gt;

&lt;p&gt;Where the interpolated values in the messages are a little complicated, I’m using this idiom inside the here-docs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows me to put an arbitrary expression in the … part, which is then put into an anonymous array reference, which is then immediately dereferenced into its string result. It’s a cheap and cheerful way to do minimal templating inside Perl strings without loading a full templating library; I’ve also had success using this technique when generating &lt;a href="https://en.wikipedia.org/wiki/SQL"&gt;SQL&lt;/a&gt; for database queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parser-as-an-object-attribute" class="anchor"&gt;
  &lt;/a&gt;
  Parser as an object attribute
&lt;/h2&gt;

&lt;p&gt;Rather than instantiate a new &lt;a href="https://metacpan.org/pod/XML::LibXML"&gt;XML::LibXML&lt;/a&gt; in every method that needs to parse a document, I created a private attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::API::Virtozzo::&lt;/span&gt;&lt;span class="nv"&gt;Agent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;XML::&lt;/span&gt;&lt;span class="nv"&gt;LibXML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="sx"&gt;qw(InstanceOf)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;_parser&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;InstanceOf&lt;/span&gt;&lt;span class="p"&gt;['&lt;/span&gt;&lt;span class="s1"&gt;XML::LibXML&lt;/span&gt;&lt;span class="p"&gt;'],&lt;/span&gt;
        &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;XML::&lt;/span&gt;&lt;span class="nv"&gt;LibXML&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$send_doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_parser&lt;/span&gt;
          &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;parse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;END_XML&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;END_XML&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boilerplate" class="anchor"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h2&gt;

&lt;p&gt;XML documents can be verbose, with elements that rarely change in every document. In the Virtuozzo API’s case, every document has a &lt;code&gt;&amp;lt;packet&amp;gt;&lt;/code&gt; element containing a &lt;code&gt;version&lt;/code&gt; attribute and an &lt;code&gt;id&lt;/code&gt; attribute to match requests to responses. I wrote a simple function to wrap my documents in this element that pulled the version from a constant and always increased the &lt;code&gt;id&lt;/code&gt; by one every time it’s called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_wrap_packet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$send_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sx"&gt;qq(&amp;lt;packet version="$PACKET_VERSION" id=")&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$send_id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/packet&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I need to add more attributes to the &lt;code&gt;&amp;lt;packet&amp;gt;&lt;/code&gt; element (for instance, namespaces for attributes in enclosed elements, I can always use &lt;a href="https://metacpan.org/pod/distribution/XML-LibXML/lib/XML/LibXML/Element.pod#setAttribute"&gt;XML::LibXML::Element::setAttribute&lt;/a&gt; after parsing the document string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsing-responses-with-xpath" class="anchor"&gt;
  &lt;/a&gt;
  Parsing responses with &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Rather than using brittle regular expressions to extract data from the response, I use the shared parser object from above and then the full power of &lt;a href="https://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;English&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_sampleID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$sample_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;# used to separate documents&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$INPUT_RECORD_SEPARATOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="c1"&gt;# $self-&amp;gt;_sock is the IO::Socket::SSL connection&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$get_doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_parser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;parse_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;_sock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$sample_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$get_doc&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;findvalue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sx"&gt;qq(//ns3:id[following-sibling::ns3:name="$sample_name"])&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$sample_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, even if the order of elements change or more elements are introduced, the XPath patterns will continue to find the right data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-so-far" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion… so far
&lt;/h2&gt;

&lt;p&gt;I’m only about halfway through updating these API calls, and I’ve left out some non-XML-related details such as setting up the TLS socket connection. Hopefully this article has given you a taste of what’s involved in XML processing these days. Please leave me a comment if you have any suggestions or questions.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/perl-and-xml-in-2021-a-few-lessons-learned-5dp8</id>
    <published>2021-03-28T01:26:40Z</published>
    <updated>2021-03-28T01:26:40Z</updated>
    <category term="programming"/>
    <category term="perl"/>
    <category term="work"/>
    <category term="xml"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4523734777886205462</id>
    <published>2021-03-27T18:49:00.000+01:00</published>
    <updated>2021-03-27T18:49:10.026+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxiv) 20 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTROUT/App-opan-0.003003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::opan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A CPAN overlay for darkpan and pinning purposes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.003003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.003002 was 1 year, 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.43 was 11 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9720' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9720&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.9718 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.16&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 4.14 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Markdent-0.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Markdent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An event-based Markdown parser toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.40&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.39 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.12&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.11 was 6 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.21&lt;/strong&gt; on 2021-03-20&lt;/li&gt;  &lt;li&gt;Votes: 82&lt;/li&gt;  &lt;li&gt;Previous version: 10.20 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210320&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.14&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 447&lt;/li&gt;  &lt;li&gt;Previous version: 9.12 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.02&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.00 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.17&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.16 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 280&lt;/li&gt;  &lt;li&gt;Previous version: 2.004004 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.010&lt;/strong&gt; on 2021-03-22&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 2.009 was 3 years, 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.032' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.032&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.029 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.140' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.140&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 111&lt;/li&gt;  &lt;li&gt;Previous version: 1.138 was 1 year, 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.712&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 7.711001 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.42 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BAKERSCOT/String-Util-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;String::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - String processing utility functions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2021-03-26&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.31 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.23&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.21 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4523734777886205462/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html" title="(cccxxxiv) 20 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-159827276407573698</id>
    <published>2021-03-27T18:44:00.003+01:00</published>
    <updated>2021-03-27T18:44:38.493+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlx) metacpan weekly report - Hash::Flatten</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 52&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten"&gt;Hash::Flatten&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/03/27 17:43:05 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache2::SSI" target="_blank"&gt;Apache2::SSI&lt;/a&gt; - Apache2 Server Side Include&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::japerl" target="_blank"&gt;App::japerl&lt;/a&gt; - JPerl-again Perl glocalization scripting environment&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::DifferenceSet::Planar" target="_blank"&gt;Math::DifferenceSet::Planar&lt;/a&gt; - object class for planar difference sets&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; - run Perl script in MBCS encoding (not only CJK ;-)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; - Perl client for Playwright&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch::Cxn::NetCurl" target="_blank"&gt;Search::Elasticsearch::Cxn::NetCurl&lt;/a&gt; - A Cxn implementation which uses libcurl via Net::Curl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Typesense" target="_blank"&gt;Search::Typesense&lt;/a&gt; - Perl interface to Typesense search engine.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=255)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Applify" target="_blank"&gt;Applify&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Osprey" target="_blank"&gt;CLI::Osprey&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::ReverseDependencies" target="_blank"&gt;CPAN::ReverseDependencies&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Firebird" target="_blank"&gt;DBD::Firebird&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Eval::Closure" target="_blank"&gt;Eval::Closure&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GDGraph" target="_blank"&gt;GDGraph&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+3=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Escape" target="_blank"&gt;HTML::Escape&lt;/a&gt; (+2=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+2=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode4e::RoundTrip" target="_blank"&gt;Jacode4e::RoundTrip&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdent" target="_blank"&gt;Markdent&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Open" target="_blank"&gt;Modern::Open&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteFork" target="_blank"&gt;Mojo::IOLoop::ReadWriteFork&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::Log::Log4perl" target="_blank"&gt;MojoX::Log::Log4perl&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=280)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AMQP::RabbitMQ" target="_blank"&gt;Net::AMQP::RabbitMQ&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Kafka" target="_blank"&gt;Net::Kafka&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=372)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter" target="_blank"&gt;Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ph" target="_blank"&gt;ph&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Profiler::NYTProf" target="_blank"&gt;Plack::Middleware::Profiler::NYTProf&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Fork" target="_blank"&gt;Proc::Fork&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply" target="_blank"&gt;Reply&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Clipboard" target="_blank"&gt;Win32::Clipboard&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/159827276407573698/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html" title="(cdlx) metacpan weekly report - Hash::Flatten"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5697688778325796745</id>
    <published>2021-03-27T18:35:00.000+01:00</published>
    <updated>2021-03-27T18:35:34.027+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-03-27 17:32:37 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66812474" target="_blank"&gt;Pass scalar and hash to subroutine in Perl&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66776916" target="_blank"&gt;Get unique elements from HoA values and print&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66766187" target="_blank"&gt;Perl: Fastest match of anything?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66770674" target="_blank"&gt;Perl - How to omit lines from a text file?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66752049" target="_blank"&gt;perl getting 0 instead of output&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66771201" target="_blank"&gt;exempting a piece of perl code from strict pragma&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66829616" target="_blank"&gt;How to send HTTP POST data in multipart/form-data to REST API in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66760565" target="_blank"&gt;Perl Template Toolkit - how to join / concat multiple variables (into one)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66808414" target="_blank"&gt;How can I combine two patterns in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66827633" target="_blank"&gt;Isolating hash values with same key inside an array, inside of an anonymous hash&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5697688778325796745/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlxxxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5697688778325796745"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5697688778325796745"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlxxxiii-stackoverflow-perl-report.html" title="(cdlxxxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>use Sys::Binmode;</title>
    <link rel="alternate" href="https://dev.to/fgasper/use-sys-binmode-4e6o" type="text/html"/>
    <content type="html">&lt;p&gt;Character encoding is an often-misunderstood aspect of Perl. Perl itself has significant bugs in the area. I recently published a CPAN module called &lt;a href="https://metacpan.org/pod/Sys::Binmode"&gt;Sys::Binmode&lt;/a&gt; which fixes most of those. If you write Perl you &lt;em&gt;probably&lt;/em&gt; should use it in all new code.&lt;/p&gt;

&lt;p&gt;I know that’s a “tall” claim, but …&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#check-this-out" class="anchor"&gt;
  &lt;/a&gt;
  Check this out:
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my $foo = "\xff\x{100}";
chop $foo;
print $foo, $/;
exec "echo", $foo;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;em&gt;looks&lt;/em&gt; like it ought to print two identical lines, right? But in fact, it prints:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;�
ÿ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why? To answer that we have to learn a bit of Perl’s internals. Read on!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#background-whats-in-a-string" class="anchor"&gt;
  &lt;/a&gt;
  Background: What’s in a string?
&lt;/h1&gt;

&lt;p&gt;In theory, Perl strings store &lt;em&gt;code points&lt;/em&gt;, nothing more. They don’t store “bytes” or “characters”, but just code points—i.e., unsigned integers. (In that sense, Perl is more like JavaScript than C!)&lt;/p&gt;

&lt;p&gt;That, of course, is just an abstraction: all programming languages use bytes &lt;em&gt;internally&lt;/em&gt; to store strings. How does Perl decide which bytes to use for which code points? As it happens, Perl can do that in either of two formats: a “narrow” format that can store code points 0-255 only, and a “wide” format that can store any arbitrary code point. Which of those formats Perl uses for a given string &lt;em&gt;is up to Perl&lt;/em&gt;; things that aren’t Perl &lt;em&gt;generally&lt;/em&gt; shouldn’t care about it.&lt;/p&gt;

&lt;p&gt;For this abstraction to work, whether Perl stores a given string as “narrow” or “wide” must make no difference to a Perl program. And indeed, if you &lt;code&gt;print $foo&lt;/code&gt; you’ll get the same result regardless of which internal format Perl uses to store &lt;code&gt;$foo&lt;/code&gt;. Same for &lt;code&gt;syswrite&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Most&lt;/em&gt; of Perl’s built-ins, though—e.g., &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, etc.—don’t work this way.&lt;/p&gt;

&lt;p&gt;Look again at our 4-line program above. In line 1 we create a string with 2 code points: 255 and 256. In line 2 we chop off the latter code point, so now &lt;code&gt;$foo&lt;/code&gt; just has 255. In line 3 we print that string and a newline; in line 4 we run &lt;code&gt;echo&lt;/code&gt; to do the same thing. Ideally lines 3 and 4 should achieve the same output. But for you they probably didn’t. Why?&lt;/p&gt;

&lt;p&gt;Let’s rerun that program but this time pipe it to &lt;code&gt;xxd&lt;/code&gt; to see exactly what’s being output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; pbpaste | perl | xxd
00000000: ff0a c3bf 0a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;0a&lt;/code&gt; is just the newline character. So line 3 printed a single byte, 0xff (plus newline), while &lt;code&gt;echo&lt;/code&gt; on line 4 printed 2 bytes—0xc3 0xbf (and a newline). Line 3 is correct: a string that contains code point 255 should output byte 255 (i.e., 0xff). What’s going on with line 4?&lt;/p&gt;

&lt;p&gt;Recall that, of Perl’s internal string-storage formats, only the “wide” one can handle code points above 255. Since &lt;code&gt;$foo&lt;/code&gt; on line 1 contains code point 256, Perl stores that string in “wide” format. Then in line 2 we get rid of code point 256. Now we have just 255. Perl &lt;em&gt;could&lt;/em&gt; thus switch our string to its “narrow” (i.e., 0-255) format, but it happens—as of Perl 5.32, anyway—not to.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; make no difference since those internal storage details are behind Perl’s string abstraction. That’s the case with &lt;code&gt;print&lt;/code&gt;, but &lt;code&gt;exec&lt;/code&gt; misbehaves: it outputs Perl’s raw internal buffer rather than the proper code-point-to-byte conversion that &lt;code&gt;print&lt;/code&gt; uses. Perl, though, doesn’t publicly define the &lt;em&gt;contents&lt;/em&gt; of that internal buffer. Thus we have &lt;a href="https://en.wikipedia.org/wiki/Undefined_behavior"&gt;undefined behaviour&lt;/a&gt;, aka “nasal demons”, built &lt;em&gt;directly&lt;/em&gt; into Perl!&lt;/p&gt;

&lt;p&gt;This is a leak in Perl’s string-storage abstraction, and it’s what Sys::Binmode fixes.&lt;/p&gt;

&lt;p&gt;(Extra credit: remove the &lt;code&gt;\x{100}&lt;/code&gt; and line 2 from our program above, and rerun it. The two lines should now be the same. Why?)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enter-sysbinmode" class="anchor"&gt;
  &lt;/a&gt;
  Enter Sys::Binmode
&lt;/h1&gt;

&lt;p&gt;Sys::Binmode fixes &lt;code&gt;exec&lt;/code&gt; and many other Perl built-ins by force-converting those built-ins’ arguments to Perl’s internal “narrow” string storage format. This fixes the abstraction leak: now, no matter how these strings are stored, Perl gives them to the operating system the same way.&lt;/p&gt;

&lt;p&gt;Try it: do &lt;code&gt;cpan Sys::Binmode&lt;/code&gt;, then rerun our program with &lt;code&gt;perl -MSys::Binmode&lt;/code&gt;. It’ll now print two identical lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-case-nonposix-oses-eg-windows" class="anchor"&gt;
  &lt;/a&gt;
  Special Case: Non-POSIX OSes (e.g., Windows)
&lt;/h2&gt;

&lt;p&gt;Windows programmers may see a problem here: Perl’s “narrow” string storage format can only store bytes, so any time we want to give arbitrary Unicode characters to the operating system—which doesn’t exist for POSIX OSes like Linux—we’re stuck.&lt;/p&gt;

&lt;p&gt;As it happens, though, Perl doesn’t actually &lt;em&gt;use&lt;/em&gt; the Windows APIs that would allow sending arbitrary Unicode characters anyway. If Perl ever changed that Sys::Binmode would need an update, but for now it can work the same way as on POSIX OSes without compromising any functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-in-existing-code" class="anchor"&gt;
  &lt;/a&gt;
  Use in Existing Code?
&lt;/h1&gt;

&lt;p&gt;Note that I say to use Sys::Binmode in &lt;strong&gt;new&lt;/strong&gt; code, not &lt;em&gt;all&lt;/em&gt; code. This is because existing code may actually &lt;em&gt;depend&lt;/em&gt; on Perl’s abstraction leak.&lt;/p&gt;

&lt;p&gt;Look again at &lt;code&gt;exec&lt;/code&gt;’s broken behaviour above. For code point 255 it printed the bytes of Perl’s “wide” storage format, which for that string was 2 bytes: 0xc3 and 0xbf. Notice that that broken behaviour actually made our terminal print something useful: &lt;code&gt;ÿ&lt;/code&gt;. As it happens, those 2 bytes from Perl’s internals are UTF-8 for 255. That’s because Perl’s “wide” internal format is actually just (&lt;a href="https://metacpan.org/pod/Encode#UTF-8-vs.-utf8-vs.-UTF8"&gt;a “lax” variant of&lt;/a&gt;) UTF-8, so anything that outputs Perl’s internals will output UTF-8 if Perl stores the string in “wide” format.&lt;/p&gt;

&lt;p&gt;Ordinarily to output a string in UTF-8 you &lt;em&gt;encode&lt;/em&gt; it thus explicitly, e.g., &lt;code&gt;encode('UTF-8', $str)&lt;/code&gt;. &lt;code&gt;exec&lt;/code&gt; &lt;em&gt;appears&lt;/em&gt; to be automatically &lt;code&gt;encode()&lt;/code&gt;ing for us, but it’s actually just outputting whatever Perl happens to store internally. So if Perl decides to store a string “wide”, it’ll give UTF-8 to &lt;code&gt;exec&lt;/code&gt; … but if Perl decides to store that string “narrow”, then you’ll get something else! We could try to second-guess Perl’s internal decision-making, but that’s dangerous: how Perl decides to store its strings is undocumented and always subject to change.&lt;/p&gt;

&lt;p&gt;Sys::Binmode will suppress that unreliable “auto-encode” behaviour, which forces us to encode our strings properly before giving them to &lt;code&gt;exec&lt;/code&gt; and friends. Of course, that’s what we should have done all along!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I can think of no situation where Sys::Binmode effects any undesirable change to Perl in new code. It surely fixes bugs like in our &lt;code&gt;exec&lt;/code&gt; demo program. Assuming that I’m correct that, for new code, this module &lt;em&gt;only&lt;/em&gt; avoids problems without introducing any, it should be used in all new code.&lt;/p&gt;

&lt;p&gt;Convinced? :-)&lt;/p&gt;

</content>
    <author>
      <name>Felipe Gasper</name>
    </author>
    <id>https://dev.to/fgasper/use-sys-binmode-4e6o</id>
    <published>2021-03-27T10:34:01Z</published>
    <updated>2021-03-27T10:34:01Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Perl weekly challenge 105</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/03/perl-weekly-challenge-105.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10157</id>
    <published>2021-03-27T03:26:28Z</published>
    <updated>2021-03-27T04:01:21Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-105/james-smith/perl">Github</a></p>

<h3>Nth root</h3>
<p>You are given positive numbers $N and $k.</p>
<p>Write a script to find out the $Nth root of $k.</p>

<h4>The solution</h4>

<p>I decided that I would not go the easy way this week and just use the power function <code>**</code> i.e. <code>return $k**(1/$N)</code>.</p>

<p>Instead for integer values of $N, solve this with only using the simple mathematical operators <code>+, /, *, -, &lt;, &gt;</code></p>

<p>To do this we will use a divide and conquer solution, starting at the two ends of the interval we calculate the values of <em>x^N</em>, and then iterate reducing the interval in half - choosing the interval where the value of <em>x^N</em> is less than <em>k</em> at the left hand end & <em>x^N</em> is greater than <em>k</em>.</p>

<p>To do this we store the value of the ends of the interval as <em>l</em> and <em>r</em> respectively and computer the <em>Nth</em> power of each (<em>ln</em> & <em>rn</em>).</p>
<p>We then do the same for the midpoint <em>m = (l+r)/2</em></p>
<p>We replace the left values with the new mid values if <em>m^N > k</em>, and if not replace the right values with the mid values</p>
<p>The interval halves in size each time - so repeat until the gap is small..</p>

<pre><code>sub nth_root {
  my( $n, $k ) = @_;
  sub pow {
    my $res = 1;
    $res *= $_[0] foreach 1..$_[1];
    return $res;
  }
  my $l = 0;
  my $r = '1'.'0'x (1+ int(length(int $k)/$n) );
     $r = $k if $r>$k;
  my $m; # This is the midpoint...
  my($ln,$rn) = (1, pow($r,$n));
  while( $r-$l > 1e-10) {
    my $mn = pow($m = ($r+$l)/2,$n);
    if($mn<$k) {
      ($l,$ln) = ($m,$mn);
      next;
    }
    ($r,$rn) = ($m,$mn);
  }
  return sprintf '%0.8f',$m;
}</code></pre>

<p>You will note a quirky bit of code that defines the initial <em>r</em> - rather than choosing the right hand side of the interval we note that we can guess a better <em>r</em> based purely on the length of the string. e.g. when <em>N = 5</em>, we know that if <em>k &lt; 100_000</em> then the <em>Nth</em> route must be less than 10, if <em>k < 10_000_000_000</em> then the <em>Nth root</em> is less than 100.</p>

<p>We can extrapolate this by dividing the length of the string representation of <em>k</em> by <em>N</em> to get the approximate max value represented by 1 and a number of 0s.</p>

<h3>The name game</h3>
<p>I will leave you to read the description on the challenge itself or the wiki page <a href="https://en.wikipedia.org/wiki/The_Name_Game">https://en.wikipedia.org/wiki/The_Name_Game</a></p>

<p>The simple rule states that if your name starts with a consonant that is stripped and substituted in different places,</p>
<p>There are special rules for b, f, m,</p>
<p>If the word starts with vowels, you strip the vowels and the first consonant</p>
<p>There are also rules defined that you remove the first syllable - but as finding syllables is difficult I will avoid this.</p>

<p>We will use 2 nice features of Perl this week</p>
<ul>
  <li>The one I use quite a lot which is the regex modifier to return the replaced string<br />
 <em>But note $1 etc are defined as when doing a match so you can still use them, in this case we use it to handle the special cases where the letter removed is one of b, f or m.</em></li>
  <li>sprintf - with <code>%1$...</code> substitutions.<br />
<em>Normally we just use <code>%s</code> to specify where to insert each entry in the parameters into the substitution string - but you can specify which parameter goes where by add int n<code$</code> between the % and the definition.<br />
This allows us repeat substitution strings without duplicating them in the list passed in, and/or change the order of the substitution. This is really useful if you have a series of templates you wish to choose from.
</em>
  
<pre><code>
my $TEMPLATE = '%1$s, %1$s, bo-%3$s%2$s
Bonana-fanna fo-%4$s%2$s
Fee fi mo-%5$s%2$s
%1$s!
';
my $REGEX = '^[aeiou]*([bcdfghjklmnpqrstvwxyz])';

<p>print map { the_name_game( $_ ) }<br />
    qw(Katie Lucy James Bob<br />
       Fred Mike Aaron Abel);</p>

<p>sub the_name_game {<br />
  return sprintf $TEMPLATE,<br />
    $_[0], $_[0]=~s{$REGEX}{}ri,<br />
    map { $_ eq lc $1?'':$_ } qw(b f m);<br />
}<br />
</code></pre></p>]]>
        
    </content>
</entry>
  <entry>
    <title>My Job Histroy as Perl Developper</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/my-job-histroy-as-perl-developper-477p" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nv1CRXG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qxifdmsd0u1q8sf6nnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nv1CRXG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qxifdmsd0u1q8sf6nnp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Ooq09fxUDlU"&gt;My Job Histroy as Perl Developper - Perl Fine Channel - Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Job Histroy as Perl Developper&lt;/p&gt;

&lt;p&gt;Start is C language. Phone price calcuration.&lt;/p&gt;

&lt;p&gt;Next, Performance analytics&lt;br&gt;
Apache Access Log&lt;br&gt;
Java App Server Log&lt;br&gt;
Database slow SQL Log&lt;br&gt;
Parse the logs to CSV, and create charts using Excel VBA&lt;/p&gt;

&lt;p&gt;Next, Estate System&lt;br&gt;
Schedule management system of shooting the picture of house.&lt;br&gt;
Estate Searching web system&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/my-job-histroy-as-perl-developper-477p</id>
    <published>2021-03-27T01:41:40Z</published>
    <updated>2021-03-27T01:41:40Z</updated>
    <category term="perl"/>
    <category term="webdev"/>
    <category term="beginners"/>
  </entry>
  <entry>
  <title>LibUV Grant: March 2021 Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-libuv-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-03-26:/post/grant-report-libuv-2021-03</id>
  <published>2021-03-26T14:41:47</published>
  <updated>2021-03-26T14:41:47</updated>
  <summary>
  <![CDATA[
     Paul Evans' LibUV grant is starting to wrap up. He writes: I've been doing some CPAN releases now, most recent trying to fix a few MSWin32 bugs. I think we're in the final bits now of just trying to finish the thing off and actually get it working. It seems to be mostly fine on Linux now at least.  https://metacpan.org/release/PEVANS/UV-1.905-TRIAL 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul Evans' LibUV grant is starting to wrap up. He writes:</p>

<hr />

<p>I've been doing some CPAN releases now, most recent trying to fix a few
MSWin32 bugs. I think we're in the final bits now of just trying to
finish the thing off and actually get it working. It seems to be mostly
fine on Linux now at least.</p>

<p>https://metacpan.org/release/PEVANS/UV-1.905-TRIAL</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Raku CI Integration Bot Grant - Report March 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-raku-ci-bot-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-03-26:/post/grant-raku-ci-bot-2021-03</id>
  <published>2021-03-26T14:33:09</published>
  <updated>2021-03-26T14:33:09</updated>
  <summary>
  <![CDATA[
     It is my pleasure to announce that the Grant Proposal: Raku CI integration bot has been approved, and Patrick has already started work on it. You can read his thoughts on the technical architecture and first progress here. I am looking forward to more great progress from Patrick. 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>It is my pleasure to announce that the <a href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot">Grant Proposal: Raku CI integration bot</a> has been approved, and Patrick has already started work on it.</p>

<p>You can <a href="https://dev.to/patrickbkr/hi-and-an-introduction-to-the-raku-ci-bot-3p3g">read his thoughts on the technical architecture and first progress here</a>.</p>

<p>I am looking forward to more great progress from Patrick.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>unzip using Archive::Any of Perl</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Archive::Any">Archive::Any</a> makes it easy to unzip a file using Perl only.
<p>
]]></summary>
  <updated>2021-03-25T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/unzip"/>  <id>https://perlmaven.com/unzip</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Archive::Any">Archive::Any</a> makes it easy to unzip a file using Perl only.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Subject Verb Object notation; declarative Perl without the framework</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jesse_shy/2021/03/subject-verb-object-notation-declarative-perl-without-the-framework.html"/>
    <id>tag:blogs.perl.org,2021:/users/jesse_shy//1106.10144</id>
    <published>2021-03-23T18:35:28Z</published>
    <updated>2021-03-23T19:22:44Z</updated>
    <author>
        <name>Jesse Shy</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jesse_shy/">
        <![CDATA[<p>If you’ve read Curtis “Ovid” Poe’s articles on the declarative framework for Tau Station <a href="https://dev.to/ovid/writing-declarative-software-375o">Link</a> and <a href="https://ovid.github.io/articles/making-complex-software-simple.html">Link</a>, you are undoubtedly aware of many of the benefits this style of programming can bring. It decouples the “what” from the “how”, encourages discrete functions and prevents the OO trap of “god objects”. The result is software that is easy to test, robust and very flexible. Inserting steps, reording steps etc… are done much easier and more clearly than trying to figure this out in 300 lines of imperative code with four to six level deep if-else chains with for loops mixed in for good fun. However, the framework is tightly coupled to the game in spots and has a few other issues that make it not ready for general use. </p>

<p>One of the features of this framework is the ability to declare the “what”  using subject-verb-object pattern.  So I recently set off on a search to see if this already exists in the Perl ecosystem. I found what I was looking for right in the official Perl docs. <a href="https://perldoc.perl.org/perlobj#Method-Call-Variations">Method Call Variations</a></p>

<p>my $obj = Tree->new();<br />
$obj->Dog::bark();</p>

<p>The docs come with this warning:</p>

<p>“This calls the bark method from class Dog on an object of class Tree, even if the two classes are completely unrelated. Use this with great care.”</p>

<p>Which in my opinion should be removed from the docs and this paradigm promoted as a language feature. Also, <u>Dog</u> does not have to be a class in the OO sense but just a package, so package Dog can contain non OO functions.</p>

<p>The framework also has some keywords, “ASSERT, FAILURE, ALWAYS”. Couple the above with Try Catch to get a similar effect. Giving you code that looks like this:</p>

<p>try {<br />
  $character->Location::is_in($location);<br />
  $character->Wallet::contains($credits);<br />
  $character->Wallet::pay($amount)<br />
} catch {<br />
  …handle error, rollback credit deductions etc…<br />
} finally {<br />
  print $character->credits;<br />
};</p>

<p>Steps can contain other steps, so the Wallet::pay could be a combination of:</p>

<p>$character->Wallet::debit($credits);<br />
$other->Wallet::credit($credits);</p>

<p>Add in your own messaging service to the function classes and a stash or cache system to carry intermediate values through steps; and you are well on your way. Programming like this does require greater discipline. Keeping functions discrete and objects small. Your objects should be little more than smart structs / dataclasses. All computation is done in functions, something a fellow developer called “object shell, functional core”. One of the metrics for if a function was discrete enough turned out to be that most functions did not contain more than about five lines of unique expressions. Once you took out get the args and the “outcome” return. This makes for very easy testing, reording of steps and easily assembled aggregate functions.</p>

<p>And that’s it, declarative programming in perl with SVO (Subject-Verb-Object) pattern. Here is a quickly hacked together - incomplete but working - example:</p>

<p><img alt="Screen Shot 2021-03-23 at 8.29.43 AM.png" src="http://blogs.perl.org/users/jesse_shy/Screen%20Shot%202021-03-23%20at%208.29.43%20AM.png" width="586" height="890" class="mt-image-none" style="" /></p>

<p><img alt="Screen Shot 2021-03-23 at 8.30.12 AM.png" src="http://blogs.perl.org/users/jesse_shy/Screen%20Shot%202021-03-23%20at%208.30.12%20AM.png" width="500" height="466" class="mt-image-none" style="" /></p>

<p><img alt="Screen Shot 2021-03-23 at 8.30.41 AM.png" src="http://blogs.perl.org/users/jesse_shy/Screen%20Shot%202021-03-23%20at%208.30.41%20AM.png" width="776" height="654" class="mt-image-none" style="" /></p>

<p><img alt="Screen Shot 2021-03-23 at 8.31.22 AM.png" src="http://blogs.perl.org/users/jesse_shy/Screen%20Shot%202021-03-23%20at%208.31.22%20AM.png" width="686" height="740" class="mt-image-none" style="" /></p>]]>
        
    </content>
</entry>
  <entry>
  <title>Call for Grants: March 2020 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_march_2020_round"/>
  <id>tag:news.perlfoundation.org,2021-03-23:/post/call_for_grants_march_2020_round</id>
  <published>2021-03-23T18:46:40</published>
  <updated>2021-03-23T18:46:40</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 April 2, 2021, UTC. We will publish the received applications, get community feedback through April 9th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 April 2, 2021, UTC. We will publish the received applications, get community feedback through April 9th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by April 3rd.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Which Version of Perl are you using?</title>
  <summary type="html"><![CDATA[<p>
A non-scientific poll to which 132 answered. Mostly with one, sometimes with 2 responses.
<p>
]]></summary>
  <updated>2021-03-23T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-version-poll-2020-03"/>  <id>https://perlmaven.com/perl-version-poll-2020-03</id>
  <content type="html"><![CDATA[<p>
A non-scientific poll to which 132 answered. Mostly with one, sometimes with 2 responses.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>undef - defined - true -false</title>
  <summary type="html"><![CDATA[<p>
The <a href="/defined">defined</a> function checks if a variable is <a href="/undef">undef</a> or not.
This is different from being evaluated to <a href="/true">true</a> or <a href="/false">false</a>.
<p>
]]></summary>
  <updated>2021-03-23T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/undef-defined-true-false"/>  <id>https://perlmaven.com/undef-defined-true-false</id>
  <content type="html"><![CDATA[<p>
The <a href="/defined">defined</a> function checks if a variable is <a href="/undef">undef</a> or not.
This is different from being evaluated to <a href="/true">true</a> or <a href="/false">false</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>true</title>
  <summary type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to <a href="/false">false</a> or true in boolean context.
<p>
]]></summary>
  <updated>2021-03-23T08:00:02Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/true"/>  <id>https://perlmaven.com/true</id>
  <content type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to <a href="/false">false</a> or true in boolean context.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>false</title>
  <summary type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to false or <a href="/true">true</a> in boolean context.
<p>
]]></summary>
  <updated>2021-03-23T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/false"/>  <id>https://perlmaven.com/false</id>
  <content type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to false or <a href="/true">true</a> in boolean context.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/rb7" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/rb7</id>
    <published>2021-03-22T10:00:41Z</published>
    <updated>2021-03-22T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Guten Tag, Senior Perl Developers! Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/g7r" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">With more than 4 million domains spanning nearly every country around the globe, our client manages over 100,000 retail and corporate clients and 2,300 resellers. The ideal candidate should be confident using Modern Perl, in particular happy with DBIx::Class and Moose/Moo. Experience with any of mod_perl, Net::Server, Ubuntu, MySQL, Elastic Search, and memcached would be advantageous.</div>
    </content>
    <id>https://job.perl.careers/g7r</id>
    <published>2021-03-22T10:00:40Z</published>
    <updated>2021-03-22T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Big Dividends, Bigger Opportunity! Perl role with multiple location options</title>
    <link rel="alternate" href="https://job.perl.careers/3cv" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online trading is big. Big dividends, big excitement, and big barriers for most people. Enter our client, an international financial company who believe online trading should be open and accessible to all. With a brand that enjoys global recognition and the kind of growth that stokes envy in their competitors, they’re looking to add a few good Perl developers to their expansive team.</div>
    </content>
    <id>https://job.perl.careers/3cv</id>
    <published>2021-03-22T10:00:39Z</published>
    <updated>2021-03-22T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Mad Men (and women) of London. Perl in London</title>
    <link rel="alternate" href="https://job.perl.careers/wcm" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The leader in premium native advertising for technology, financial services, and corporate and lifestyle sectors, our client is the power behind the advertising throne for over 200 websites. This dynamic team is looking for a senior Perl programmer with a strong understanding of Go programming language, paradigms, constructs, and idioms.</div>
    </content>
    <id>https://job.perl.careers/wcm</id>
    <published>2021-03-22T10:00:38Z</published>
    <updated>2021-03-22T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Smart Shopper = Smart Saver. Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/u7g" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the largest product and price comparison platforms in German-speaking countries, they share your dedication to finding consumers the best possible deal on electronics, technology, household appliances, and gaming systems. They’re looking for a Perl programmer. They make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/u7g</id>
    <published>2021-03-22T10:00:37Z</published>
    <updated>2021-03-22T10:00:37Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021 </title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-03-22T10:00:36Z</published>
    <updated>2021-03-22T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 14, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-03-22T10:00:35Z</published>
    <updated>2021-03-22T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Short talks: #AprilFools hijinks</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 1, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-03-22T10:00:34Z</published>
    <updated>2021-03-22T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, March 31, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-03-22T10:00:33Z</published>
    <updated>2021-03-22T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, March 25, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-03-22T10:00:32Z</published>
    <updated>2021-03-22T10:00:32Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will take place online between March 24-26 2021. A private ticket will be cheaper (EUR 30). People who register in time and pay the participation fee, will get exclusive extras.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-03-22T10:00:31Z</published>
    <updated>2021-03-22T10:00:31Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/03/cccxxxiii-14-cpan-great-modules.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/03/cdlix-metacpan-weekly-report-gdgraph.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/03/cdlxxxii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-03-22T10:00:30Z</published>
    <updated>2021-03-22T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Live development of a Mojolicious-based web application</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark Gardner and Gabor Szabo will start to develop a course-management application using Mojolicious. You are invited to ask questions, make suggestions, or just watch. Register now!</div>
    </content>
    <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
    <published>2021-03-22T10:00:29Z</published>
    <updated>2021-03-22T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Learning more about (R)?ex today!</title>
    <link rel="alternate" href="https://code-maven.com/elk-with-rex" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The second part of learning Rex with FErkis is scheduled for next Monday. Register now!</div>
    </content>
    <id>https://code-maven.com/elk-with-rex</id>
    <published>2021-03-22T10:00:28Z</published>
    <updated>2021-03-22T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Code Maven courses</title>
    <link rel="alternate" href="https://code-maven.teachable.com/p/perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl courses by Gabor Szabo</div>
    </content>
    <id>https://code-maven.teachable.com/p/perl</id>
    <published>2021-03-22T10:00:27Z</published>
    <updated>2021-03-22T10:00:27Z</updated>
  </entry>
  <entry>
    <title>2021.11 Two Year Itch</title>
    <link rel="alternate" href="https://rakudoweekly.blog/2021/03/15/2021-11-two-year-itch/" type="text/html"/>
    <id>https://rakudoweekly.blog/2021/03/15/2021-11-two-year-itch/</id>
    <published>2021-03-22T10:00:26Z</published>
    <updated>2021-03-22T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Forking, Process ID, Parent Process ID, init</title>
    <link rel="alternate" href="https://perlmaven.com/forking-pid-ppid" type="text/html"/>
    <id>https://perlmaven.com/forking-pid-ppid</id>
    <published>2021-03-22T10:00:25Z</published>
    <updated>2021-03-22T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 104: FUSC NIM</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/03/Perl_Weekly_Challenge_104__FUSC_NIM.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger tried recursion and caching to deal with FUSC sequence in not just Perl and Raku, but also Python, Ruby and Rust.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/03/Perl_Weekly_Challenge_104__FUSC_NIM.html</id>
    <published>2021-03-22T10:00:24Z</published>
    <updated>2021-03-22T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 104: Fusc Sequence and NIM Game</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-104-fusc-sequence-and-nim-game.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laureent is back with a bang and this time you get guest contributions too.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-104-fusc-sequence-and-nim-game.html</id>
    <published>2021-03-22T10:00:23Z</published>
    <updated>2021-03-22T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 104: recursion and picking</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/03/15/PerlWeeklyChallenge104.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca as always shared Raku magic like samewith().</div>
    </content>
    <id>https://fluca1978.github.io/2021/03/15/PerlWeeklyChallenge104.html</id>
    <published>2021-03-22T10:00:22Z</published>
    <updated>2021-03-22T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 104</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/03/perl-weekly-challenge-104.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James spoilt us with different variations of FUSC sequence. Keep it up.</div>
    </content>
    <id>http://blogs.perl.org/users/james_curtis-smith/2021/03/perl-weekly-challenge-104.html</id>
    <published>2021-03-22T10:00:21Z</published>
    <updated>2021-03-22T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Week 104</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2021/03/perl_weekly_challenge_week_104.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome back, Jaldhar. It is always fun to read your blog.</div>
    </content>
    <id>https://www.braincells.com/perl/2021/03/perl_weekly_challenge_week_104.html</id>
    <published>2021-03-22T10:00:20Z</published>
    <updated>2021-03-22T10:00:20Z</updated>
  </entry>
  <entry>
    <title>PWC104 - NIM Game</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/18/pwc104-nim-game/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interactive game by Flavio. Have fun.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/18/pwc104-nim-game/</id>
    <published>2021-03-22T10:00:19Z</published>
    <updated>2021-03-22T10:00:19Z</updated>
  </entry>
  <entry>
    <title>PWC104 - FUSC Sequence</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/17/pwc104-fusc-sequence/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio making good use of the bit operator to get the job done. Interesting.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/17/pwc104-fusc-sequence/</id>
    <published>2021-03-22T10:00:18Z</published>
    <updated>2021-03-22T10:00:18Z</updated>
  </entry>
  <entry>
    <title>FUSCing Tokens: Perl Weekly Challenge 104</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/03/15/fuscing-tokens-perl-weekly-challenge-104.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave is always first with solutions and a blog post. I wonder how he manages to do it so quickly.</div>
    </content>
    <id>https://jacoby.github.io/2021/03/15/fuscing-tokens-perl-weekly-challenge-104.html</id>
    <published>2021-03-22T10:00:17Z</published>
    <updated>2021-03-22T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Nimbly Fuscous with Raku</title>
    <link rel="alternate" href="https://raku-musings.com/nimbly-fuscous.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne has been very creative with his blog post's title. I love the way he discusses his solutions. Must Read.</div>
    </content>
    <id>https://raku-musings.com/nimbly-fuscous.html</id>
    <published>2021-03-22T10:00:16Z</published>
    <updated>2021-03-22T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 104: NIM Game</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/03/21/perl-weekly-challenge-104-nim-game/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's solution to the NIM game became a tutorial for multiple languages. Please check it out yourself.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/03/21/perl-weekly-challenge-104-nim-game/</id>
    <published>2021-03-22T10:00:15Z</published>
    <updated>2021-03-22T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 104: FUSC Sequence</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/03/21/perl-weekly-challenge-104-fusc-sequence/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail pushes the bar so high, it's impossible to catch up. Highly recommended.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/03/21/perl-weekly-challenge-104-fusc-sequence/</id>
    <published>2021-03-22T10:00:14Z</published>
    <updated>2021-03-22T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 104</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-104/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron shared some Raku magic with such ease; reading his code is such fun.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-104/</id>
    <published>2021-03-22T10:00:13Z</published>
    <updated>2021-03-22T10:00:13Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 104</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-104" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "FUSC Sequence" and "The NIM Game" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-104</id>
    <published>2021-03-22T10:00:12Z</published>
    <updated>2021-03-22T10:00:12Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 105</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "nth root" and "The Name Game". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-105</id>
    <published>2021-03-22T10:00:11Z</published>
    <updated>2021-03-22T10:00:11Z</updated>
  </entry>
  <entry>
    <title>February report on Jonathan Worthington's Raku Development Grant</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/jonathan-2021-02" type="text/html"/>
    <id>https://news.perlfoundation.org/post/jonathan-2021-02</id>
    <published>2021-03-22T10:00:10Z</published>
    <updated>2021-03-22T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Test::CLI</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/15/test-cli/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A very interesting find by Flavio that can make testing apps hassle-free.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/15/test-cli/</id>
    <published>2021-03-22T10:00:09Z</published>
    <updated>2021-03-22T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Releasing Perl Modules to CPAN</title>
    <link rel="alternate" href="https://ology.github.io/2021/03/14/releasing-perl-modules-to-cpan/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A very handy blog post for someone thinking of releasing their first module to CPAN.</div>
    </content>
    <id>https://ology.github.io/2021/03/14/releasing-perl-modules-to-cpan/</id>
    <published>2021-03-22T10:00:08Z</published>
    <updated>2021-03-22T10:00:08Z</updated>
  </entry>
  <entry>
    <title>teepee</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/16/teepee/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Quick introduction to teepee.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/16/teepee/</id>
    <published>2021-03-22T10:00:07Z</published>
    <updated>2021-03-22T10:00:07Z</updated>
  </entry>
  <entry>
    <title>The future of mod_perl</title>
    <link rel="alternate" href="http://mail-archives.apache.org/mod_mbox/perl-modperl/202103.mbox/%3CCAND+6xmhzwd7Jn5vjsfadKC26COv15B5bx6kzWZT5CySSnqP4A@mail.gmail.com%3E" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Looks like the Apache project is having serious discussions about the future of mod_perl.</div>
    </content>
    <id>http://mail-archives.apache.org/mod_mbox/perl-modperl/202103.mbox/%3CCAND+6xmhzwd7Jn5vjsfadKC26COv15B5bx6kzWZT5CySSnqP4A@mail.gmail.com%3E</id>
    <published>2021-03-22T10:00:06Z</published>
    <updated>2021-03-22T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Better Perl: Using map and grep</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/03/16/perl_map_grep/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A very interesting discussion about two of the most useful functions in Perl.</div>
    </content>
    <id>https://phoenixtrap.com/2021/03/16/perl_map_grep/</id>
    <published>2021-03-22T10:00:05Z</published>
    <updated>2021-03-22T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Relatively easy ways to catch memory errors</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/03/relatively-easy-ways-to-catch-memory-errors.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Memory management is something that never get talk about frequently. Nice to see it is back on the discussion table.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2021/03/relatively-easy-ways-to-catch-memory-errors.html</id>
    <published>2021-03-22T10:00:04Z</published>
    <updated>2021-03-22T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Dancer2 REST API</title>
    <link rel="alternate" href="https://github.com/manwar/Dancer2-REST-API" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A complete REST API implementation using Dancer2.</div>
    </content>
    <id>https://github.com/manwar/Dancer2-REST-API</id>
    <published>2021-03-22T10:00:03Z</published>
    <updated>2021-03-22T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Dancer2 0.301000 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/03/dancer2-0301000-released.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Happy to see my favourite distribution is being looked after with love.</div>
    </content>
    <id>http://blogs.perl.org/users/jason_a_crome/2021/03/dancer2-0301000-released.html</id>
    <published>2021-03-22T10:00:02Z</published>
    <updated>2021-03-22T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Why Download Perl From ActiveState?</title>
    <link rel="alternate" href="https://www.activestate.com/products/perl/downloads/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-download-message&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">Because with ActiveState, you get a version of the Perl core language and popular third-party modules to use for development purposes. Additionally, the ActiveState Platform makes it possible to:
&lt;li&gt;Share your Perl environment with your team&lt;/li&gt;
&lt;li&gt;Check for threats and license compliance&lt;/li&gt;
&lt;/br&gt;
&lt;a href="https://www.activestate.com/products/perl/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-download-message&amp;utm_campaign=user-acquisition"&gt;Learn more here!&lt;/a&gt;</content>
    <id>https://www.activestate.com/products/perl/downloads/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-download-message&amp;utm_campaign=user-acquisition</id>
    <published>2021-03-22T10:00:01Z</published>
    <updated>2021-03-22T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#504 - Make Perl #1 again ...</title>
    <link rel="alternate" href="http://perlweekly.com/archive/504.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I believe there are countless silent supporters of Perl doing great services to bring back Perl to #1. I became an active member of The Perl Community with the release of my first CPAN module, <a href="https://metacpan.org/release/Test-Excel">Test::Excel</a>, in the year 2010. Believe it or not, there is plenty of support out there, if you are interested to contribute to CPAN. I am telling this from my own experience, Dave Cross, recently contributed to one of my favourite distribution, <a href="https://metacpan.org/release/Map-Tube">Map::Tube</a> and offered to help me sort out an outstanding sticky issue. Thank you Dave for your help, much appreciated.</p>
<p>Nowadays, you will find plenty of support available on social platforms like Facebook and Twitter. I know about 2 very active and vibrant facebook groups Perl centric, <a href="https://www.facebook.com/groups/perlcommunity/">The Perl Community</a> and <a href="https://www.facebook.com/groups/perlprogrammers/">Perl Programmers</a>. Being a moderator of both Facebook groups, I can tell you they are very much loved by everyone. If you are interested in becoming a CPAN contributor then please take a look at my article, <a href="https://www.perl.com/article/how-to-become-cpan-contributor/">How to become CPAN contributor</a>, my first for Perl.com.</p>
<p>If you are active on social platform, you will notice Gabor Szabo contributions regularly. I am sure you must have come across, <a href="https://perlmaven.com/">Perl Maven</a>, a project run by Gabor for many years now. You can find answers to most of your Perl questions there. Even if you ask Google a perl question, it is very likely you will be directed to Perl Maven for an answer.</p>
<p>I have an appeal to all Perl fans out there to help us remove the negative vibe around Perl. One of the many ways you can help us, is by writing about your own Perl experience and how it helps you on a daily basis. You pick and choose the platform you are comfortable with. I have a couple of suggestions, <a href="https://www.perl.com/">perl.com</a> and <a href="https://dev.to/search?q=perl">dev.to</a>. I would like to mention two names that comes to my mind immediately, <a href="https://dev.to/mjgardner">Mark Gardner</a>, who recently got the 8 Week Streak badge from DEV.to for publishing each week consistently for the past eight weeks. And the second name is <a href="https://github.polettix.it/ETOOBUSY/">Flavio Poletti</a> for writing a blog post every day for more than a year without break. They are the real stars in my humble opinion. For regular readers of the Perl Weekly newsletter Flavio is a familiar name as we mention his blogs every week.</p>
<p>I would also like to mention, <a href="https://perlweeklychallenge.org/">The Weekly Challenge (a.k.a Perl Weekly Challenge)</a> for contributing 1400+ blog posts in the last two years discussing Perl and Raku solutions. Well done Team PWC. Keep contributing and spreading the words.</p>
<p>Last but not least haben wir in 2 Tagen einen deutschen Perl-Workshop 2021. Bitte melden Sie sich an, wenn Sie an dem Workshop teilnehmen möchten. <a href="https://act.yapc.eu/gpw2021">[LINK]</a></p>
<p>Enjoy the rest of the newsletter and stay safe.</p></div>
    </content>
    <id>http://perlweekly.com/archive/504.html</id>
    <published>2021-03-22T10:00:00Z</published>
    <updated>2021-03-22T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8921001561469365512</id>
    <published>2021-03-20T20:51:00.000+01:00</published>
    <updated>2021-03-20T20:51:34.061+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxiii) 14 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/App-Cmd-0.333' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - write command line apps with less suffering &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.333&lt;/strong&gt; on 2021-03-14&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 0.332 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.032' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.032&lt;/strong&gt; on 2021-03-18&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.031 was 2 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301001&lt;/strong&gt; on 2021-03-17&lt;/li&gt;  &lt;li&gt;Votes: 122&lt;/li&gt;  &lt;li&gt;Previous version: 0.300005 was 1 month, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Natural&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse informal natural language date/time strings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.12&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.11 was 5 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.43&lt;/strong&gt; on 2021-03-17&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/File-Which-1.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Which&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of the which utility as an API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.24&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.23 was 2 years, 2 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Getopt-Long-Descriptive-0.109' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long::Descriptive&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Getopt::Long, but simpler and more powerful &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.109&lt;/strong&gt; on 2021-03-16&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 0.106 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.20&lt;/strong&gt; on 2021-03-14&lt;/li&gt;  &lt;li&gt;Votes: 82&lt;/li&gt;  &lt;li&gt;Previous version: 10.19 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.11&lt;/strong&gt; on 2021-03-20&lt;/li&gt;  &lt;li&gt;Votes: 447&lt;/li&gt;  &lt;li&gt;Previous version: 9.08 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.16&lt;/strong&gt; on 2021-03-18&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.15 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/MooseX-Getopt-0.75' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MooseX::Getopt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A Moose role for processing command line options &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.75&lt;/strong&gt; on 2021-03-16&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.74 was 2 years, 5 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.024&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.023 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.42&lt;/strong&gt; on 2021-03-17&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.40 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EHUELS/Test-BDD-Cucumber-0.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::BDD::Cucumber&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Feature-complete Cucumber-style testing in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.79&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8921001561469365512/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiii-14-cpan-great-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8921001561469365512"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8921001561469365512"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiii-14-cpan-great-modules.html" title="(cccxxxiii) 14 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6925465418911101600</id>
    <published>2021-03-20T20:48:00.004+01:00</published>
    <updated>2021-03-20T20:48:35.059+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlix) metacpan weekly report - GD::Graph</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 49&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/pod/GD::Graph"&gt;GD::Graph&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/03/20 19:45:51 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::lupapona" target="_blank"&gt;App::lupapona&lt;/a&gt; - a simple static Gemini server&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Avro" target="_blank"&gt;Avro&lt;/a&gt; - the official Perl API for the Apache Avro project's serialization and RPC framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode::Base2N" target="_blank"&gt;Encode::Base2N&lt;/a&gt; - fast base64, base32, base16 encode/decode functions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::GDAL::FFI" target="_blank"&gt;Geo::GDAL::FFI&lt;/a&gt; - A foreign function interface to GDAL&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; - Perl extension to provide some usefull functions with arrays&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RT::BugTracker" target="_blank"&gt;RT::BugTracker&lt;/a&gt; - Adds a UI designed for bug-tracking for developers to RT&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::TypedCodeRef" target="_blank"&gt;Types::TypedCodeRef&lt;/a&gt; - Type constraint for any typed subroutine.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sandy" target="_blank"&gt;App::Sandy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BSD::Resource" target="_blank"&gt;BSD::Resource&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Clicker" target="_blank"&gt;Chart::Clicker&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::GGPlot" target="_blank"&gt;Chart::GGPlot&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::DBI" target="_blank"&gt;Class::DBI&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=122)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::DPath" target="_blank"&gt;Data::DPath&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+2=136)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive" target="_blank"&gt;Data::Recursive&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Natural" target="_blank"&gt;DateTime::Format::Natural&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Pg" target="_blank"&gt;DateTime::Format::Pg&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::IPerl" target="_blank"&gt;Devel::IPerl&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Which" target="_blank"&gt;File::Which&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Firefox::Marionette" target="_blank"&gt;Firefox::Marionette&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FunctionalPerl" target="_blank"&gt;FunctionalPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/GD::Graph" target="_blank"&gt;GD::Graph&lt;/a&gt; (+3=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager" target="_blank"&gt;Imager&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager::File::WEBP" target="_blank"&gt;Imager::File::WEBP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=109)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::relative" target="_blank"&gt;lib::relative&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Handler" target="_blank"&gt;Log::Handler&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MailTools" target="_blank"&gt;MailTools&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=447)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Runner" target="_blank"&gt;Parallel::Runner&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+2=163)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Fork" target="_blank"&gt;Proc::Fork&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Meta" target="_blank"&gt;Sub::Meta&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Quote" target="_blank"&gt;Sub::Quote&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Ago" target="_blank"&gt;Time::Ago&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=85)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6925465418911101600/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlix-metacpan-weekly-report-gdgraph.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6925465418911101600"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6925465418911101600"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlix-metacpan-weekly-report-gdgraph.html" title="(cdlix) metacpan weekly report - GD::Graph"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>February report of the Raku Development Grant of Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-2021-02"/>
  <id>tag:news.perlfoundation.org,2021-03-17:/post/jonathan-2021-02</id>
  <published>2021-03-17T01:51:30</published>
  <updated>2021-03-17T01:51:30</updated>
  <summary>
  <![CDATA[
     Jonathan writes:

My grant work in February continued to focus on the new general dispatch mechanism in MoarVM, and especially resumable dispatch, which I [mentioned in my last report](https://news.perlfoundation.org/post/jonathan-2021-01). 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan writes:
<hr>
My grant work in February continued to focus on the new general dispatch mechanism in MoarVM, and especially resumable dispatch, which I <a href="https://news.perlfoundation.org/post/jonathan-2021-01">mentioned in my last report</a>. </p>

<p>By this point, I have <code>callsame</code>, <code>nextsame</code>, <code>lastcall</code>, and <code>nextcallee</code> working via the new dispatch mechanism in my <code>new-disp</code> Rakudo branch. For now, they work with <code>wrap</code> dispatch (where they call the next wrapper or the original routine), method dispatch (where they go to the next method in the MRO), and the combination of these two. Resumption of a multiple dispatch remains to be implemented. I did, however, implement the case of multiple dispatch where we have a <code>proto</code> sub or method with a body that then chooses when (or whether) to invoke a matching multi candidate; this also uses the dispatch resumption mechanism.</p>

<p>With my arm/wrist gradually healing up, I also finally got around to writing a <a href="https://6guts.wordpress.com/2021/03/15/towards-a-new-general-dispatch-mechanism-in-moarvm/">blog post detailing the new dispatch mechanism</a>, as I'd hoped to last month. Enjoy!</p>

<p><code>
Total time worked: 24 hours 36 minutes
</code></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>The Weekly Challenge 103: Astrology and Audio</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/14#pwc103" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a year $year. Write a script to determine the Chinese Zodiac for the given year $year.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a year $year.
# Write a script to determine the Chinese Zodiac for the given year $year
##
use constant ELEMENTS =&gt; {1 =&gt; q/Wood/, 2 =&gt; q/Fire/, 3 =&gt; q/Earth/, 4 =&gt; q/Metal/, 0 =&gt; q/Water/};
use constant ANIMALS =&gt;  {1 =&gt; q/Rat/, 2 =&gt; q/Ox/, 3 =&gt; q/Tiger/, 4 =&gt; q/Rabbit/, 5 =&gt; q/Dragon/, 6 =&gt; q/Snake/, 7 =&gt; q/Horse/, 8 =&gt; q/Goat/, 9 =&gt; q/Monkey/, 10 =&gt; q/Rooster/, 11 =&gt; q/Dog/, 0 =&gt; q/Pig/}; 

sub chinese_zodiac{
    my($year) = @_;
    return ELEMENTS-&gt;{$year % 5} . " " . ANIMALS-&gt;{($year + 9) % 12};    
} 

MAIN:{
    my($YEAR);
    $YEAR = 2017;
    print chinese_zodiac($YEAR) . "\n";
    $YEAR = 1938;
    print chinese_zodiac($YEAR) . "\n";
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Fire Rooster
Earth Tiger
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;When I first saw the problem statement for this part of the challenge I took a look at the cited Wikipedia article, but it just seemed like a real slog of a read. So I decided to just work backwards from the examples given! Pretty much this seems to boil down to a straightforward modular arithmetic problem. The values are all known and so I hard code then with &lt;code&gt;use constant&lt;/code&gt; and then use them directly.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a program to output which file is currently playing.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub song_times{
    my($file_name) = @_; 
    my %song_times;
    my @song_order;
    my $length = 0; 
    my $index = 0;  
    if(!$file_name){
        while(&lt;DATA&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$index] =  $song; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    else{
        open(FILE, $file_name); 
        while(&lt;FILE&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$song] =  $index; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    return [\%song_times, \@song_order, $length];   
}

sub now_playing{
    my($start_time, $current_time, $file_name) = @_; 
    my($song_times, $song_order, $length_millis);
    $current_time = time() if !$current_time; 
    ($song_times, $song_order, $length_millis) = @{song_times()} if $file_name;   
    ($song_times, $song_order, $length_millis) = @{song_times($file_name)} if !$file_name;   
    my $time_playing = $current_time - $start_time;
    my $cycles = ($time_playing * 1000) / $length_millis;  
    my $current_cycle_millis = ($cycles - int($cycles)) * $length_millis;  
    my $seek_time = 0; 
    for my $song (@{$song_order}){
        $seek_time += $song_times-&gt;{$song};
        if($seek_time &gt; $current_cycle_millis){
            my $position = ($song_times-&gt;{$song} - ($seek_time - $current_cycle_millis)) / 1000; 
            my $hours = int($position/3600);
            my $minutes = int(($position % 3600) / 60);
            my $seconds = int(($position % 3600) % 60);
            $position = sprintf("%02d", $hours) . ":" . sprintf("%02d", $minutes) . ":" . sprintf("%02d", $seconds);    
            return ($song, $position);  
        }   
    }  
}  

MAIN:{
    my($song, $position) =  now_playing(1606134123, 1614591276);   
    print "$song\n$position\n";  
}  

__DATA__
1709363,"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
1723781,"Les Miserables Episode 2: Javert (broadcast date: 1937-07-30)"
1723781,"Les Miserables Episode 3: The Trial (broadcast date: 1937-08-06)"
1678356,"Les Miserables Episode 4: Cosette (broadcast date: 1937-08-13)"
1646043,"Les Miserables Episode 5: The Grave (broadcast date: 1937-08-20)"
1714640,"Les Miserables Episode 6: The Barricade (broadcast date: 1937-08-27)"
1714640,"Les Miserables Episode 7: Conclusion (broadcast date: 1937-09-03)"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
00:10:24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I have to say that I found this deceptively harder to implement than it first appears! I suppose that is always true when working with time.&lt;/p&gt;
&lt;p&gt;In the spirit of good sportsmanship wrote the code to fit the specification given, but then allow for defaults, such as reading from &lt;code&gt;&amp;lt;DATA&amp;gt;&lt;/code&gt; and using the value of &lt;code&gt;time()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way this works here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The file list is read in and the times of the songs and the total length of the whole playlist is saved.&lt;/li&gt;
&lt;li&gt;We find out where in the playlist “cycle” we are.&lt;/li&gt;
&lt;li&gt;Given the time of the cycle we “seek” to the position of the current song.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-103/"&gt;Challenge 103&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Chinese_zodiac"&gt;Chinese Zodiac&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc103</id>
    <published>2021-03-14T16:46:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Why I wrote Net::Google::CivicInformation</title>
    <link rel="alternate" href="https://perl.com/article/why-i-wrote-net-google-civicinformation/" type="text/html"/>
    <content type="html">

&lt;p&gt;Before I became a computer programmer, I tried my hand at being a human programmer, in the form of a wordsmith, as I called myself then. I had various jobs as a writer, editor, translator and journalist, but I met with little success, for two main reasons. In those days you needed a publisher to find your work interesting enough to publish before anyone could read it, and that was a pretty high bar. And in the second place, it was difficult to get the humans to react to the content I wrote (I&amp;rsquo;m still exercised that the movie reviewer would get more letters to the editor than I did after a political exposé that took a month to produce).&lt;/p&gt;

&lt;p&gt;I still remember the moment of awe and inspiration in early 1994 or so, when after acquiring a sparkly new i286 PC at Circuit City, I discovered the World Wide Web and its promise of a world free of publishers and constraining editors. I jumped right in and became one of the first &amp;ldquo;webmasters,&amp;rdquo; which led to a job where I needed to learn Perl. Over a short time I began to thrill more at the construction of the engine to publish the content than at the creating of it. I still had the barrier-free entry point, and as to my second gripe &amp;hellip; well, I found that computers respond much more predictably to my writing than humans ever did.&lt;/p&gt;

&lt;p&gt;Fast forward almost 25 years and lots of things have changed, but I still get an itch scratched by building &amp;ldquo;websites.&amp;rdquo; Of course now they are called REST APIs or webapps or microservices or whatever the newest term is, and I deliver mostly JSON data packets to other computers inside big organizations—it&amp;rsquo;s been 20 years since I used CGI.pm—but I&amp;rsquo;m very blessed to have had a long career in the same field with fast-evolving technologies, supported throughout by Perl and its amazing community of contributors.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;d think maybe that after spending all week building APIs at work I&amp;rsquo;d be sated, but last weekend found me hankering for a new project, something outside work, but using my expertise, and something that could have real value for other people. I also specifically wanted to see if I could provide for the CPAN a library to interface to a useful public API. I&amp;rsquo;ve contributed a handful of insignificant distributions over the years, and found it to be very satisfying and also that it forces me to up my game as far as quality control and attention to detail. Yet I&amp;rsquo;d never found an opportunity to contribute a module in the area I know best.&lt;/p&gt;

&lt;p&gt;Usually all the best ideas are taken, of course, especially when it comes to the CPAN. It seemed there was a client for every API you could think of, but eventually I stumbled upon one that I found to be super-cool, and unsupported in Perl! The &lt;a href="https://developers.google.com/civic-information"&gt;Google Civic Information API&lt;/a&gt; provides extensive contact information for all elected officials from head of state down to county tax collector for any US address.&lt;/p&gt;

&lt;h2 id="silence-betokens-consent"&gt;Silence betokens consent&lt;/h2&gt;

&lt;p&gt;Like many of you, I suppose, I am still somewhat shell-shocked at the sustained assault on democracy and democratic participation that has been going on lately, not to mention that so many elected &amp;ldquo;leaders&amp;rdquo; seem to be insulated from the people. I also considered the COVID pandemic—not just its awful toll and the crass incompetence of the government response, but also how it has made us all much more isolated from each other, and how technologies that bring people together are even more important now that, for example, you can&amp;rsquo;t readily show up with a neighborhood community group to a crowded county board meeting to make your views heard. But silence betokens consent, and if our elected officials don&amp;rsquo;t hear from us they will just continue to do what they do.&lt;/p&gt;

&lt;p&gt;With all that in mind I set to creating a Perl client for the API. The first step was to obtain an auth token, which Google provides to developers for free (with a limit on daily queries). Authentication is extremely simple, so using &lt;a href="https://metacpan.org/pod/HTTP::Tiny"&gt;HTTP::Tiny&lt;/a&gt; I quickly had a client in my module that could connect to the API and make queries. Because elected officials&amp;rsquo; contact information is only one thing the API provides, I made a parent class &lt;a href="https://metacpan.org/pod/Net::Google::CivicInformation"&gt;Net::Google::CivicInformation&lt;/a&gt; and subclass &lt;a href="https://metacpan.org/pod/Net::Google::CivicInformation::Representatives"&gt;Net::Google::CivicInformation::Representatives&lt;/a&gt; handling the representatives-related code. This will allow me or other authors to write sibling subclasses for other endpoints in future.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a portion of the subclass for fetching Representatives data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;package&lt;/span&gt; Net::Google::CivicInformation::Representatives;

&lt;span style="color:#66d9ef"&gt;our&lt;/span&gt; $VERSION &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1.02&amp;#39;&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.10&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Carp &lt;span style="color:#e6db74"&gt;&amp;#39;croak&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Function::Parameters;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; JSON::MaybeXS;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Try::Tiny;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Types::Common::String &lt;span style="color:#e6db74"&gt;&amp;#39;NonEmptyStr&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; URI;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Moo;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; namespace::clean;

extends &lt;span style="color:#e6db74"&gt;&amp;#39;Net::Google::CivicInformation&amp;#39;&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;##&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_build__api_url&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#39;representatives&amp;#39;&lt;/span&gt;}

&lt;span style="color:#75715e"&gt;##&lt;/span&gt;
method representatives_for_address (NonEmptyStr $address) {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $uri &lt;span style="color:#f92672"&gt;=&lt;/span&gt; URI&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;( $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;_api_url );
    $uri&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;query_form( address &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $address, key &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;api_key );

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $call &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;_client&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get( $uri );
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $response;

    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parent class has the &lt;code&gt;api_url&lt;/code&gt; attribute whose coercion prepends the root URL to the value returned by the subclasses&amp;rsquo; builder override. Note the use of &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt; for signatures and &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt; for type validation, which reduce the subroutine boilerplate nicely.&lt;/p&gt;

&lt;p&gt;Most of the work in creating the client distribution was in deciding how to marshal and reformat the extensive JSON data structure returned by Google. The results are organized into &lt;a href="http://docs.opencivicdata.org/en/latest/proposals/0002.html"&gt;Open Civic Data Divisions&lt;/a&gt;, an international standard adopted by Google for its service. An OCD Division ID can be as generic as &lt;code&gt;ocd-division/country:us&lt;/code&gt; or as specific as &lt;code&gt;ocd-division/country:us/state:ny/place:new_york/council_district:36&lt;/code&gt;. Google provides filtering on the data sets but I chose to use a high-level endpoint that returns all levels of officials for a single specific address (although a zip code alone works most of the time as well).&lt;/p&gt;

&lt;p&gt;After a few attempts I had it working in a simple way that was pleasing to me as a consumer of the module, and I documented the arrayref of hashrefs it would return representing the, um, representatives. I wrote some tests and bundled up the distribution and uploaded it to PAUSE.&lt;/p&gt;

&lt;h2 id="setting-up-the-webservice"&gt;Setting up the webservice&lt;/h2&gt;

&lt;p&gt;The next step was to put the new client to use, and a public-facing web app seemed the obvious choice. I&amp;rsquo;ve learned over the years that the majority of people still think of a .com domain as most inviting, and that a readable name is key. I settled on &lt;strong&gt;ContactMyReps&lt;/strong&gt; for the name, registered the &lt;a href="https://contactmyreps.com"&gt;contactmyreps.com&lt;/a&gt; domain, and pointed it at my server. At work I use &lt;a href="https://metacpan.org/pod/Mojolicious"&gt;Mojolicious&lt;/a&gt; but I far prefer &lt;a href="https://metacpan.org/pod/Dancer2"&gt;Dancer2&lt;/a&gt;—it feels much more light weight and flexible and Perlish to me.&lt;/p&gt;

&lt;p&gt;The POST route handler for the lookup query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;post &lt;span style="color:#e6db74"&gt;&amp;#39;/find-by-address&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; params;

    &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( &lt;span style="color:#f92672"&gt;not&lt;/span&gt; $params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address} ) {
        send_error(&lt;span style="color:#e6db74"&gt;&amp;#39;Error: address is required.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;400&lt;/span&gt; );
    }

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $client &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Net::Google::CivicInformation::Representatives&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ( address &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address} );

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $response &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $client&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;representatives_for_address($params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address});

    &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( $response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{error} ) {
        $result{error} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{error};
    }
    &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
        $result{officials} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; decode_utf8(encode_json($response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{officials}));
    }

    &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; template &lt;span style="color:#e6db74"&gt;&amp;#39;find-by-address&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;\&lt;/span&gt;%result;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The backend side of the webapp was done in an hour, and then I set to the presentation. It took a while but I came up with a design that seemed functional and aesthetically acceptable. After testing locally I was ready to deploy, and after creating a new TLS cert and updating the &lt;code&gt;Apache&lt;/code&gt; config, the site was up and running. (The source code is available &lt;a href="https://github.com/1nickt/ContactMyReps"&gt;on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perl.com/images/why_i_wrote_net_google_civicinformation/expanded.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I sent the link to the to a couple of friends to see what they thought, and posted to &lt;a href="http://blogs.perl.org/users/1nickt/2021/02/who-you-gonna-call-perl-client-and-website-for-google-civic-information-api.html"&gt;blogs.perl.org&lt;/a&gt; to get some live testing, and was pleased when other people started using the site.&lt;/p&gt;

&lt;h2 id="wrapping-up"&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Having conceived of and implemented the idea in less than 24 hours, I was pretty exhilarated and on a roll. I decided that if a thing was worth doing, it was worth doing well, so I signed up for a few hundred dollars in Google advertising to promote the site next to relevant search results. I also set up a Buy Me a Coffee account and placed a button on the search results display. It costs about $1.20 to buy a click to the site, so I figure if 10% of the visitors contribute something, they&amp;rsquo;ll pay for the advertising to reach new audiences and the thing will be self-sustaining.&lt;/p&gt;

&lt;p&gt;All in all it was a fun way to spend a winter weekend. The service is online at &lt;a href="https://contactmyreps.com"&gt;https://contactmyreps.com&lt;/a&gt; if you&amp;rsquo;d like to check it out!&lt;/p&gt;
</content>
    <id>https://perl.com/article/why-i-wrote-net-google-civicinformation/</id>
    <published>2021-03-09T19:35:09Z</published>
    <updated>2021-03-09T19:35:09Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 102: Threads and Recursion</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/07#pwc102" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to generate all Rare Numbers of size &lt;code&gt;$N&lt;/code&gt; if any exist.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Thread;
use constant THREAD_COUNT =&gt; 4;

sub rare_number_check{
    my($lower, $upper) = @_;
    my @rares; 
    {
        my $r = $lower;
        my $r1 = reverse($r);  
        if($r &gt; $r1){
            my $rs = sqrt($r + $r1);  
            my $r1s = sqrt($r - $r1);  
            if($rs !~ m/\./ &amp;&amp; $r1s !~ m/\./){
                push @rares, $lower; 
            } 
        } 
        $lower++; 
        redo unless $lower &gt; $upper;
    }  
    return \@rares;
}

sub rare_number{
    my($n) = @_;
    my @rares; 
    my $lower = "1" . 0 x ($n - 1);
    my $upper = "1" . 9 x ($n - 1);
    my $increment = $lower;
    {
        my @threads;
        for(1 .. THREAD_COUNT){
            my $t = Thread-&gt;new(\&amp;rare_number_check, $lower, $upper); 
            push @threads, $t;
            $lower = $upper + 1;
            $upper = $lower + $increment - 1;  
            last if(length($upper) == ($n + 1)); 
        }
        foreach my $t (@threads){
            my $rares = $t-&gt;join();
            push @rares, @{$rares}; 
        }  
        redo unless(length($upper) == ($n + 1)); 
    }
    return \@rares;  
}

MAIN:{
    my($N);
    $N=2;
    my $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
    $N=6;
    $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
    $N=9;
    $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2 digits: 65
6 digits: 621770
9 digits: 281089082
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My approach here is &lt;em&gt;brute force&lt;/em&gt;, but with a slight twist. I parallelize the computations by using &lt;a href="https://perldoc.perl.org/threads"&gt;Threads&lt;/a&gt;. I’ve used Threads in the past, for example in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/18"&gt;Challenge 008&lt;/a&gt; Threads were used to compute Perfect Numbers. The search for Perfect Numbers bears enough similarity to the current problem with Rare Numbers that the code from Challenge 008 will also be similar to this week’s code.&lt;/p&gt;
&lt;p&gt;There are four CPU cores on the system I am running this code on. We can create any number of Threads that we need, of course, but Perl Threads are a special sort of “thread” in that they create new copies of the running interpreter and so consume a bit more memory than the sort of light weight threads you may learn about in C or Java. In the interest of conserving memory, and to avoid having multiple &lt;em&gt;interpreter threads&lt;/em&gt; running on the same core we’ll just create no more than four Threads at a time. &lt;em&gt;Note: Ultimately it is the OS which schedules where things run but, generally speaking, four threads on a four core system will each run on individual cores.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can demonstrate this to ourselves by increasing the number of threads beyond the number of cores and not seeing an improvement in execution time.&lt;/p&gt;
&lt;p&gt;Each Thread will get a slice of the search space. Each slice is of size &lt;code&gt;10 ** ($N - 1)&lt;/code&gt;. Threads run &lt;code&gt;sub rare_number_check&lt;/code&gt; which implements the definition of a Rare Number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I chose to use a bare block with &lt;a href="https://perldoc.perl.org/functions/redo"&gt;redo&lt;/a&gt;. This is purely a matter of style and aesthetics. I’d argue that in this case it is more readable than the equivalent &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops would be.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub rare_number&lt;/code&gt; which generates and co-ordinates the Threads also uses redo for similar reasons.&lt;/li&gt;
&lt;li&gt;Interestingly Perl is clever enough to return a integer with no decimal part in the case of a perfect square! Checking to see if we have a perfect square then becomes a matter of checking to see if the value returned by &lt;a href="https://perldoc.perl.org/functions/sqrt"&gt;sqrt&lt;/a&gt; contains a decimal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to produce hash counting string of that length.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub hash_counting_string{
    my($n) = @_;
    return "" if $n == 0; 
    return "#" if $n == 1; 
    my $h = "$n#";  
    return hash_counting_string($n - length($h)) . $h;  
}

MAIN:{
    print hash_counting_string(1). "\n";
    print hash_counting_string(2). "\n";
    print hash_counting_string(3). "\n";
    print hash_counting_string(10). "\n";
    print hash_counting_string(14). "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
#
2#
#3#
#3#5#7#10#
2#4#6#8#11#14#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is what I consider to be a nice clean recursive implementation. When I first saw Part 2 it seemed a bit more complicated than it would later prove to be. My thought process was along the lines of “I am not sure how I would do this in Perl, and I have no idea of how this would go in Prolog either!” Often times I will rely on the insights gained by doing it in one to aid the implementation of the other. In times like this, with no immediately clear solution, I prefer to start off in Perl, and write it in a way which would allow for reproduction in Prolog. Then, as necessary, remove any vestiges of the solution’s origins by conforming to idiomatic Prolog by ensuring things are done declaratively, logically.&lt;/p&gt;
&lt;p&gt;This is actually a long acknowledged use of Perl: &lt;em&gt;algorithm development.&lt;/em&gt; If you see the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/03/07"&gt;Prolog solution for Part 2&lt;/a&gt; you can detect the obvious origins!&lt;/p&gt;
&lt;p&gt;As far as this solution in Perl, perhaps the main “trick” is that we must account for the length of the numeral. So, for example, “14#” consumes three characters and so the next time through we need to generate the hash count for 11 = 14 - 3.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-102/"&gt;Challenge 102&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc102</id>
    <published>2021-03-07T16:28:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>RakuAST Grant Report for 2021-02</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakuast-grant-report-2021-02"/>
  <id>tag:news.perlfoundation.org,2021-03-02:/post/rakuast-grant-report-2021-02</id>
  <published>2021-03-02T13:10:16</published>
  <updated>2021-03-02T13:10:16</updated>
  <summary>
  <![CDATA[
     Jonathan Worthington writes about his RakuAST progress during February 2021: During February much of my Raku working time was spent on my ongoing dispatcher work. However, I also got back into working on RakuAST. I implemented AST nodes, wrote AST tests, and updated the new RakuAST-based compiler frontend to cover: The `given`, `with`, `without`, and `when` statement modifiers Anonymous variables The `is` trait modifier of note, that means inheritance now 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan Worthington writes about his RakuAST progress during February 2021:</p>

<hr />

<p>During February much of my Raku working time was spent on my ongoing dispatcher work. However, I also got back into working on RakuAST. I implemented AST nodes, wrote AST tests, and updated the new RakuAST-based compiler frontend to cover:</p>

<ul>
<li>The <code>given</code>, <code>with</code>, <code>without</code>, and <code>when</code> statement modifiers (and I believe most of them produce cheaper code than in the current compiler)</li>
<li>Anonymous variables (<code>my $ = 42</code> and similar, but also the use of a lone <code>$</code>, which declares an anonymous state variable)</li>
<li>The <code>is</code> trait modifier (for the cases of traits that are implemented so far); of note, that means inheritance (<code>class Spork is Spoon is Fork {}</code>) now compiles</li>
<li>Basic cases of the reduce meta-op (for example, <code>[+] 1,2,3</code>)</li>
</ul>

<p>I also implemented calculating types by sigil for parameters when compiling those via RakuAST.</p>

<p>From this work, 11 further spectest files now pass in full using the RakuAST-based compiler frontend, bringing the total to 225 passing spectest files.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Feb 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/03/01/list-of-new-cpan-distributions-feb-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-HaveWebsite-0.001">Acme-CPANModules-HaveWebsite</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that have their own website</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Sudoku-0.001">Acme-CPANModules-Sudoku</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sudoku-related modules on CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GSG/Algorithm-Backoff-RetryTimeouts-v1.0.0">Algorithm-Backoff-RetryTimeouts</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>A backoff-style retry algorithm with adjustable timeout support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DONGXU/Alien-LibJQ-0.01">Alien-LibJQ</a></td>
<td><a href="https://metacpan.org/author/DONGXU">DONGXU</a></td>
<td>0.01</td>
<td>Build libjq library (<a href="https://stedolan.github.io/jq/" rel="nofollow">https://stedolan.github.io/jq/</a>)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BDFOY/Antsy-0.901">Antsy</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>0.901</td>
<td>Streaming ANSI escape sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYMKAT/App-FilePacker-0.001">App-FilePacker</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.001</td>
<td>Embed a self-extracting tarball in a Perl module.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-StatisticsUtils-0.001">App-StatisticsUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/CGI-remote_addr-0.03">CGI-remote_addr</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>Enhanced version of CGI.pm's "remote_addr()"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKAJI/CPAN-02Packages-Search-0.001">CPAN-02Packages-Search</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>Search packages in 02packages.details.txt</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Cobol-Compiler-0.1.1">Cobol-Compiler</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>a cobol compiler</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/POLETTIX/Command-Template-0.001">Command-Template</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>A template to build command line arrays, and run them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GSG/DBIx-Class-Helper-ResultSet-MySQLHacks-v1.0.0">DBIx-Class-Helper-ResultSet-MySQLHacks</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>Useful MySQL-specific operations for DBIx::Class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GEEKRUTH/DBIx-Class-Schema-ResultSetNames-1.000">DBIx-Class-Schema-ResultSetNames</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.000</td>
<td>Create resultset accessors from table names</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GSG/DBIx-ParseError-MySQL-v1.0.0">DBIx-ParseError-MySQL</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>Error parser for MySQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GEEKRUTH/Dancer2-Plugin-DBIx-Class-1.000">Dancer2-Plugin-DBIx-Class</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.000</td>
<td>syntactic sugar for DBIx::Class in Dancer2, optionally with DBIx::Class::Schema::ResultSetNames</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Debian-DEP12-0.1.0">Debian-DEP12</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>interface to Debian DEP 12 format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/DuckCurses-0.1.1">DuckCurses</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Duck Tales game using curses library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ECHERNOF/Excel-Grinder-1.0">Excel-Grinder</a></td>
<td><a href="https://metacpan.org/author/ECHERNOF">ECHERNOF</a></td>
<td>1.0</td>
<td>Import/export plain Excel (XLSX) files as simply as possible.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Finance-ID-KSEI-0.000">Finance-ID-KSEI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000</td>
<td>Get information from KSEI (Kustodian Sentral Efek Indonesia) (Indonesian Central Securities Depository)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASOKOLOV/GooCanvas2-CairoTypes-0.001">GooCanvas2-CairoTypes</a></td>
<td><a href="https://metacpan.org/author/ASOKOLOV">ASOKOLOV</a></td>
<td>0.001</td>
<td>Bridge between GooCanvas2 and Cairo types</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ECHERNOF/Google-ISBNNumbers-1.00">Google-ISBNNumbers</a></td>
<td><a href="https://metacpan.org/author/ECHERNOF">ECHERNOF</a></td>
<td>1.00</td>
<td>Retrieve book info by ISBN number</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Graph-Line-0.1.0">Graph-Line</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>Generate line graphs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Gzip-Libdeflate-0.00_01">Gzip-Libdeflate</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Perl interface to libdeflate</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Gzip-Zopfli-0.00_01">Gzip-Zopfli</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ESTRELOW/HTTP-Request-Webpush-0.11">HTTP-Request-Webpush</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>0.11</td>
<td>HTTP Request for web push notifications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Image-PNG-Data-0.00_01">Image-PNG-Data</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>manipulate the image data part of PNGs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TDRUGEON/Iterator-Merger-0.60">Iterator-Merger</a></td>
<td><a href="https://metacpan.org/author/TDRUGEON">TDRUGEON</a></td>
<td>0.60</td>
<td>an iterator to efficiently merge sorted iterators</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEAM/Log-Any-Adapter-Coderef-0.001">Log-Any-Adapter-Coderef</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>Provide stacktrace and other information to generic Log::Any handlers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LDILLEY/Minecraft-ServerStatus-1.0.1">Minecraft-ServerStatus</a></td>
<td><a href="https://metacpan.org/author/LDILLEY">LDILLEY</a></td>
<td>v1.0.1</td>
<td>A Minecraft server status checker</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-Features-0.1.0">Module-Features</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Define features for modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-Features-TextTable-0.001">Module-Features-TextTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Features of modules that generate text tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JBERGER/Mojo-IOLoop-Delay-8.74">Mojo-IOLoop-Delay</a></td>
<td><a href="https://metacpan.org/author/JBERGER">JBERGER</a></td>
<td>8.74</td>
<td>(DISCOURAGED) Promises/A+ and flow-control helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCESANO/Mojo-Response-JSON-Path-0.001">Mojo-Response-JSON-Path</a></td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>0.001</td>
<td>use JSON::Path for searching JSON responses</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCESANO/Mojolicious-Plugin-Minion-Starter-0.001">Mojolicious-Plugin-Minion-Starter</a></td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>0.001</td>
<td>start/stop minion workers with the Mojolicious server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/MooX-Clone-0.01">MooX-Clone</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.01</td>
<td>Make Moo objects clone-able</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VVELOX/Net-Connection-FreeBSD_sockstat-0.0.1">Net-Connection-FreeBSD_sockstat</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>Creates Net::Connection objects using sockstat on FreeBSD.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/Net-Curl-Easier-0.01">Net-Curl-Easier</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Convenience wrapper around Net::Curl::Easy</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TONKIN/Net-Google-CivicInformation-0.01">Net-Google-CivicInformation</a></td>
<td><a href="https://metacpan.org/author/TONKIN">TONKIN</a></td>
<td>0.01</td>
<td>client for the Google Civic Information API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABRAXXA/Net-Silverpeak-Orchestrator-0.001001">Net-Silverpeak-Orchestrator</a></td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>0.001001</td>
<td>Silverpeak Orchestrator REST API client library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DIONYS/Path-Tiny-Archive-Zip-0.001">Path-Tiny-Archive-Zip</a></td>
<td><a href="https://metacpan.org/author/DIONYS">DIONYS</a></td>
<td>0.001</td>
<td>Zip/unzip add-on for file path utility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Perinci-Manual-0.001">Perinci-Manual</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Extra documentation for Perinci</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/Perl-Critic-Policy-ProhibitImplicitImport-0.000001">Perl-Critic-Policy-ProhibitImplicitImport</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Prefer symbol imports to be explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/Promise-AsyncAwait-0.01">Promise-AsyncAwait</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Async/await with promises</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JDEGUEST/Regexp-Common-Apache2-v0.1.0">Regexp-Common-Apache2</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>Apache2 Expressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SRI/SQL-Abstract-Pg-1.0">SQL-Abstract-Pg</a></td>
<td><a href="https://metacpan.org/author/SRI">SRI</a></td>
<td>1.0</td>
<td>PostgreSQL features for SQL::Abstract</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEODESIAN/Selenium-Client-1.0">Selenium-Client</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1.0</td>
<td>Module for communicating with WC3 standard selenium servers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PMB/Sentry-SDK-0.01">Sentry-SDK</a></td>
<td><a href="https://metacpan.org/author/PMB">PMB</a></td>
<td>0.01</td>
<td>Blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/POLETTIX/Test-CLI-0.001">Test-CLI</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>Testing command-line invocations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WYANT/Test-Prereq-Meta-0.000_90">Test-Prereq-Meta</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.000_90</td>
<td>Test distribution prerequisites against meta data.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YLAVOIE/Test2-Plugin-Feature-0.001102-TRIAL">Test2-Plugin-Feature</a></td>
<td><a href="https://metacpan.org/author/YLAVOIE">YLAVOIE</a></td>
<td>0.001102</td>
<td>Plugin to allow testing Pherkin files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YLAVOIE/Test2-Plugin-pgTAP-0.001100-TRIAL">Test2-Plugin-pgTAP</a></td>
<td><a href="https://metacpan.org/author/YLAVOIE">YLAVOIE</a></td>
<td>0.001100</td>
<td>Plugin to allow testing pgTAP files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Text-Match-20201221">Text-Match</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20201221</td>
<td>Match text question against possible answer strings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-More-0.009">Text-Table-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.009</td>
<td>Generate text table with simple interface and many options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-Span-0.001">Text-Table-Span</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Text::Table::Tiny + support for column/row spans</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Trav-Dir-0.00_01">Trav-Dir</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Traverse directories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Bulk-20210226">Tree-Bulk</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210226</td>
<td>Bulk Tree operations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Random-Secure-0.001">UUID-Random-Secure</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Like UUID::Random, but uses Math::Random::Secure for random numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRYPHON/Unit-Duration-1.01">Unit-Duration</a></td>
<td><a href="https://metacpan.org/author/GRYPHON">GRYPHON</a></td>
<td>1.01</td>
<td>Work-time unit duration conversion and canonicalization</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JJNAPIORK/Valiant-0.001001">Valiant</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001001</td>
<td>Validation Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JKUTEJ/Web-PageMeta-0.01">Web-PageMeta</a></td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>0.01</td>
<td>get page open-graph / meta data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOCHSTEN/Web-Solid-Auth-0.1">Web-Solid-Auth</a></td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>0.1</td>
<td>A Perl Sold Web Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-ColorName-X-0.002">WordList-EN-ColorName-X</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Color names from Graphics::ColorNames::X</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ID-ColorName-PERLANCAR-0.002">WordList-ID-ColorName-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of color names in Indonesian</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MARKOV/XML-eXistDB-0.99_1">XML-eXistDB</a></td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>0.99_1</td>
<td>eXistDB interface over XML-RPC</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KFLY/namespace-allclean-0.01">namespace-allclean</a></td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>0.01</td>
<td>Avoid imports all subroutines into your namespace</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/p5-GFX-Enhancer-0.1.10">p5-GFX-Enhancer</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.10</td>
<td>Perl extension for enhancing scanned in images</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PMB/pmbtest-v1.0.0">pmbtest</a></td>
<td><a href="https://metacpan.org/author/PMB">PMB</a></td>
<td>v1.0.0</td>
<td>Blah blah blah</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>67</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>40</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/ECHERNOF">ECHERNOF</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/YLAVOIE">YLAVOIE</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/PMB">PMB</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TDRUGEON">TDRUGEON</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/DIONYS">DIONYS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LDILLEY">LDILLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/TONKIN">TONKIN</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/JBERGER">JBERGER</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/GRYPHON">GRYPHON</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DONGXU">DONGXU</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/SRI">SRI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/ASOKOLOV">ASOKOLOV</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-HaveWebsite PERLANCAR 0.001 Modules that have their own website Acme-CPANModules-Sudoku PERLANCAR 0.001 Sudoku-related modules on CPAN Algorithm-Backoff-RetryTimeouts GSG v1.0.0 A backoff-style retry algorithm with adjustable timeout support Alien-LibJQ DONGXU 0.01 Build libjq library (https://stedolan.github.io/jq/) Antsy BDFOY 0.901 Streaming ANSI escape sequences App-FilePacker SYMKAT 0.001 Embed a self-extracting tarball in a Perl … <a href="https://perlancar.wordpress.com/2021/03/01/list-of-new-cpan-distributions-feb-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Feb 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1937</id>
    <published>2021-03-01T01:22:59Z</published>
    <updated>2021-03-01T01:22:59Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The Hijacking of Perl.com</title>
    <link rel="alternate" href="https://perl.com/article/the-hijacking-of-perl-com/" type="text/html"/>
    <content type="html">

&lt;p&gt;For a week we lost control of the Perl.com domain. Now that the incident
has died down, we can explain some of what happened and how we handled it.
This incident only affected the domain ownership of Perl.com and there was
no other compromise of community resources. This website was still there,
but DNS was handing out different IP numbers.&lt;/p&gt;

&lt;p&gt;First, this wasn&amp;rsquo;t an issue of not renewing the domain. That would have
been a better situation for us because there&amp;rsquo;s a grace period.&lt;/p&gt;

&lt;p&gt;Second, to be very clear, I&amp;rsquo;m just an editor for the website that uses
the Perl.com domain. This means that I&amp;rsquo;m not actually the &amp;ldquo;injured party&amp;rdquo;
in legal terms. Tom Christiansen is the domain registrant, and should
legal matters progress, there&amp;rsquo;s no reason for me, nor anyone else, to
know all of the details. However, I&amp;rsquo;ve talked to many of the people involved
in the process.&lt;/p&gt;

&lt;h2 id="the-incident-response"&gt;The incident response&lt;/h2&gt;

&lt;p&gt;I think we did a pretty good job with the decentralized, volunteer
incident response, so I&amp;rsquo;d like to share part of what we did as I tell
you the story. You may have had the pleasure (or pain) of a formal
response, and there are various things you can do to forego extra
headaches and frustration.&lt;/p&gt;

&lt;p&gt;Early on the morning of January 27, the Perl NOC noticed through normal
monitoring that something was wrong with the domain. Along with that,
people started to report that the website had gone missing. As DNS updated
across the globe, more and more people reported problems. We didn&amp;rsquo;t know
what was happening or why.&lt;/p&gt;

&lt;p&gt;Behind the scenes I started to collect incident information, and I put
out &lt;a href="https://twitter.com/briandfoy_perl/status/1354535622069919748"&gt;a tweet asking for help&lt;/a&gt;.
At this point we didn&amp;rsquo;t know what was going on; we just knew the
effect. It&amp;rsquo;s important during the early stages of a response to verify
what&amp;rsquo;s known and what&amp;rsquo;s rumor, and to separate who knows something and
who&amp;rsquo;s passing around rumors. As with most situations, it&amp;rsquo;s that rumor
group that dominates the conversation and they often have a more
interesting story to tell because they can speculate and fabricate any
narrative they like. Work the problem without speculation—find out
what you actually know and what&amp;rsquo;s just a guess.&lt;/p&gt;

&lt;p&gt;I started a Google doc and invited the relevant people. We started to
fill in the details, classifying everything according with either
green, amber, or red. Green was high confidence information, such as
direct communication with a registrar, amber was likely good but
unverified, and red was just flat out wrong. All information was
tagged with a time and source. The first rule of rumor control is
stating who you heard it from and when. Once this is in the document,
other people know if what they think they know is better or more
recent. And, sometimes the information that we thought was good turns
out to be wrong. In those cases we update the document.&lt;/p&gt;

&lt;p&gt;We also listed things that needed to happen, and various people picked
up what they could address. For example, we started to check other
community resources, so Elaine Ashton looked at the registration for
cpan.org, which had an oddity in its contact info but later turned out
to be fine after she dealt with the registrar on the phone. Robert
Spier, part of the Perl NOC, was able to verify various network
aspects, timelines, and so on. Rik Signes stepped up to set up a
private mailing list on &lt;a href="https://www.topicbox.com"&gt;TopicBox&lt;/a&gt; (he is
the CTO, after all). The trick here is to not do work that someone
else can do for you (and often better than you can). Likewise, if
someone is already doing something, you&amp;rsquo;re wasting your time (and
others&amp;rsquo; time) by redoing or reinventing it. Decentralization is fine,
but someone needs to be the coordinator. In this case that turned out
to be me because I had a lot invested in the Perl.com website, and I
could easily work with Tom because we worked with each
other for a year on &lt;a href="https://www.programmingperl.org"&gt;Programming Perl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My tweet and my reddit comments got the attention of both sides of the
registrar equation, so I was talking to both Network Solutions and Key
Systems very early in the process. We were very fortunate to that Perl
is a known thing and that both Tom Christiansen and I are well-known
within Perl. The first rule to success is to already be successful.
People inside various organizations involved offered us help and
guidance. Other victims were not so fortunate and help for them was
not forthcoming. And, at some point, Perl was probably running those
organizations, so there&amp;rsquo;s some fondness for the good ol&amp;rsquo; days.&lt;/p&gt;

&lt;p&gt;Mostly, I helped both sides get in touch with Tom Christiansen and
helped him manage all the players.  In many incidents, people become
overwhelmed by everything that needs to happen and end up not doing
anything. He needed to work with the registrars, so I took what work I
could off his plate so he could focus on that bit.&lt;/p&gt;

&lt;p&gt;We had learned very quickly that when you use the registered domain
for your email contact, no one can contact you when that domain no
longer handles your mail. Most of that hassle was verifying that
people were who they say they are, but in the domain business,
everyone knows who the real people are—this is what they do every
day. We made sure that we didn&amp;rsquo;t overload them with inquiries from
several different people asking the same question. Coordinating who is
working with whom avoids the N-squared communication issues and lets
people do the work they need to do rather than answer the same questions
repeatedly.&lt;/p&gt;

&lt;p&gt;Once everyone who needed to talk to each other had good contact info,
the process mostly took care of itself. We didn&amp;rsquo;t know that everything
would work out, but as the situation developed we became more
confident that it would. Our confidence, however, isn&amp;rsquo;t reportable
information. You don&amp;rsquo;t announce what you think will happen or what is
promised to happen because often there are delays or hiccups.&lt;/p&gt;

&lt;p&gt;We transitioned to managing public information and sharing what we
could. Our goal was to give people the confidence that they had the
right info. As a techy audience, we often like to have all the
information, but there&amp;rsquo;s very little that anyone actually needs to
know.&lt;/p&gt;

&lt;p&gt;We settled
on having all the updated info in one place, at &lt;a href="https://log.perl.org/2021/01/perlcom-hijacked.html"&gt;The Perl NOC
blog&lt;/a&gt;. Sometimes
we knew things several hours before we published the information
because we did the extra work to directly verify things. People didn&amp;rsquo;t
have to track social media, etc to find out what was going on because
they could remember this one place. We still broadcast updates
all over the place, but always pointed back to the NOC blog. A single
point of reference is very helpful.&lt;/p&gt;

&lt;p&gt;For those in the incident response, we developed a current situation summary
and talking points. These were basically the things that we had verified
that we could disclose without compromising the legal process.&lt;/p&gt;

&lt;p&gt;We also tracked people and stories. Who&amp;rsquo;s who at various companies,
which reporters are writing about the incident, and what discussion
threads are out there. Some people in various discussion threads were
obviously just there for the lulz, while others had good or actionable
details (which often means they are on the inside of the situation).
Again, we used the green / amber / red categories.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t my first rodeo, and I stepped into the role of press
contact. Despite our diligent work to verify everything, many outside
people just made up stuff. That&amp;rsquo;s just how it is and I expected that.
The publishing maxim &amp;ldquo;If your mother says she loves you, get a second
source&amp;rdquo; doesn&amp;rsquo;t apply in the age of Twitter. You don&amp;rsquo;t even need the
first source.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to have one face (mouth?) to represent the diligent
work everyone was doing.  Half the &amp;ldquo;news&amp;rdquo; stories didn&amp;rsquo;t do basic
research, and some of those reporters don&amp;rsquo;t even have contact info
(really, a reporter you can&amp;rsquo;t contact?). A few were able to correct
their stories after talking to me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theregister.com/2021/01/28/perl_hijacking/"&gt;The
Register&lt;/a&gt; had
spot on reporting from the start as did &lt;a href="https://nakedsecurity.sophos.com/2021/01/29/the-mystery-of-the-missing-perl-webite/"&gt;Paul Ducklin at
Sophos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;About a week after the nameservers changed, I had settled into the
idea that it could take several weeks to unravel the hijacking. With
multiple countries involved along with various sets of laws and rules
in effect, things might have a much slower pace than we&amp;rsquo;d like. In the
internet age, tomorrow is basically infinitely far away. David Farrell
floated the idea of renaming the site, and we started using
&lt;em&gt;perldotcom.perl.org&lt;/em&gt; as a temporary domain. Robert was able to set
that up quickly, and we even got some good work out of it as pull
requests from the community found spots where we had hard-coded
various things that we shouldn&amp;rsquo;t have (anyone can send a pull request
for anything about the site!). The GitHub process that David had set
up was key to making all of this work; it&amp;rsquo;s a pleasure to get even the
tiniest pull requests from the community.&lt;/p&gt;

&lt;p&gt;Then, in early February I got some solid (green) back-channel information that
we&amp;rsquo;d get the domain back in a couple of days. I was dubious but it actually
happened! Again, I think we were very fortunate here and that many people
with a soft spot in their hearts for Perl did a lot of good work for
us. All sides understood that Perl.com belonged to Tom and it was a
simple matter of work to resolve it. A relatively unknown domain
name might not fare as well in proving they own it.&lt;/p&gt;

&lt;p&gt;Recovering the domain wasn&amp;rsquo;t the end of the response though. While the
domain was compromised, various security products had blacklisted
Perl.com and some DNS servers had sinkholed it. We figured that would
naturally work itself out, so we didn&amp;rsquo;t immediately celebrate the
return of Perl.com. We wanted it to be back for everyone. And, I think
we&amp;rsquo;re fully back. However, if you have problems with the domain, please
&lt;a href="https://github.com/tpf/perldotcom/issues"&gt;raise an issue&lt;/a&gt; so we at least
know it&amp;rsquo;s not working for part of the internet.&lt;/p&gt;

&lt;h2 id="what-we-think-happened"&gt;What we think happened&lt;/h2&gt;

&lt;p&gt;This part veers into some speculation, and Perl.com wasn&amp;rsquo;t the only victim.
We think that there was a social engineering attack on Network Solutions, including
phony documents and so on. There&amp;rsquo;s no reason for Network Solutions
to reveal anything to me (again, I&amp;rsquo;m not the injured party), but I did talk
to other domain owners involved and this is the basic scheme they reported.&lt;/p&gt;

&lt;p&gt;John Berryhill provided &lt;a href="https://twitter.com/briandfoy_perl/status/1354535622069919748"&gt;some forensic work in Twitter&lt;/a&gt; that showed the
compromise actually happened in September. The domain was transferred
to the BizCN registrar in December, but the nameservers were not changed. The domain was
transferred again in January to another registrar, Key Systems, GmbH. This latency period
avoids immediate detection, and bouncing the domain through a couple
registrars makes the recovery much harder.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perl.com/images/the_hijack_of_perldotcom/step2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Notice the long lag time of the first transfer, though. The domain is
compromised in September but transferred in December. There&amp;rsquo;s a reason for
that: ICANN has a &lt;a href="https://www.icann.org/resources/pages/name-holder-faqs-2017-10-10-en"&gt;60-day rule&lt;/a&gt;.
You can&amp;rsquo;t transfer the domain within 60 days of updating the contact
info. We think part of the attack changed the registration at the same
time as the attackers renewed the domain for a couple more years past its original
expiration in 2029.&lt;/p&gt;

&lt;p&gt;Once transferred to Key Systems in late January, the new, fraudulent registrant listed the domain (along with
others), on Afternic (a domain marketplace). If you had $190,000, you could have bought Perl.com.
This was quickly de-listed after the &lt;a href="https://www.theregister.com/2021/01/28/perl_hijacking/"&gt;The Register made inquiries&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="some-lessons"&gt;Some lessons&lt;/h2&gt;

&lt;p&gt;Obviously this is an embarrassing situation, but it&amp;rsquo;s not an uncommon
story. This domain was registered in the early 90s, Tom Christiansen
was given control of it shortly after that, and basically kept paying the
registration fees. Since it wasn&amp;rsquo;t a nagging problem, the domain was
left as it was. Features such as two-factor authentication probably
would have saved us much of this trouble (although social engineering
attacks tend to route around safeguards).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already mentioned the problem with using the domain in the contacts
for the domain. When there&amp;rsquo;s a problem, the communication channels are
also borked. Have at least one of the contacts go somewhere else.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s essential to communicate with &amp;ldquo;one voice&amp;rdquo; else you risk sowing confusion
with different messages, even if they&amp;rsquo;re saying the same thing. You also want
to project confidence, and competence so that the information you do release
is treated credibly; if different channels are releasing different updates,
the risk of error increases. The Perl Foundation insisted on releasing their
own &lt;a href="https://news.perlfoundation.org/post/perl.com-registry-attack"&gt;update&lt;/a&gt;
instead of using our prepared statement. And even though it was brief, the link
to the Perl NOC blog was broken for several days. Don&amp;rsquo;t take unnecessary risks.&lt;/p&gt;

&lt;p&gt;And, it always helps to have friends and good relationships with the people
who are able to help. The people at Network Solutions and Key Systems were
very helpful in the recovery, as were several other people who keep
the internet working. I wish I could give them direct credit, but I&amp;rsquo;m sure
they&amp;rsquo;d rather do their work quietly.&lt;/p&gt;

&lt;h2 id="where-we-are-now"&gt;Where we are now&lt;/h2&gt;

&lt;p&gt;The Perl.com domain is back in the hands of Tom Christiansen and we&amp;rsquo;re
working on the various security updates so this doesn&amp;rsquo;t happen again. The
website is back to how it was and slightly shinier for the help we received.&lt;/p&gt;

&lt;p&gt;As part of the incident response, The Perl Foundation Infrastructure Working
Group surveyed other important community domains and will work to secure those.
If you are interested in helping with that, get in touch with them.&lt;/p&gt;
</content>
    <id>https://perl.com/article/the-hijacking-of-perl-com/</id>
    <published>2021-02-28T08:59:13Z</published>
    <updated>2021-02-28T08:59:13Z</updated>
  </entry>
</feed>
