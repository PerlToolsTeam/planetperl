<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-03-01T16:49:33Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>I start to write the book "Perl for Beginners to Mastering Perl in a week"</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/03/i-start-to-write-the-book-perl-for-beginners-to-mastering-perl-in-a-week.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10726</id>
    <published>2022-03-01T13:17:27Z</published>
    <updated>2022-03-01T13:25:17Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I start to write the book "Perl for Beginners to Mastering Perl in a week".</p>

<p>I wrote two Japanese books from a years ago.</p>

<p><a href="https://www.amazon.com/Perl-tekisuto-shorino-essensu-Japanese-ebook/dp/B097T6CBR6/ref=sr_1_1?crid=3KZ0GWMVKSMIC&keywords=Perl%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%87%A6%E7%90%86%E3%81%AE%E3%82%A8%E3%83%83%E3%82%BB%E3%83%B3%E3%82%B9&qid=1646122816&sprefix=perl%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E5%87%A6%E7%90%86%E3%81%AE%E3%82%A8%E3%83%83%E3%82%BB%E3%83%B3%E3%82%B9%2Caps%2C187&sr=8-1">Perlテキスト処理のエッセンス</a></p>

<p><a href="https://www.amazon.com/perldeportablenalinuxkanrinyuumon-Japanese-Perl-Club-ebook/dp/B09Q8QV5G5/ref=sr_1_2?crid=1ZKV9VC1ZTVDU&keywords=Linux+%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB+Perl&qid=1646122862&sprefix=linux+%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%96%E3%83%AB+perl%2Caps%2C210&sr=8-2">PerlでポータブルなLinuxファイル管理入門</a></p>

<p>Finally, I decided to write English books.</p>

<p>Recently it becomes easy to publish both e-books and paperbacks.</p>

<p>The title of my first English Perl book is "Perl for Beginners to Mastering Perl in a week".</p>

<p>This book is for Perl beginners to learn Perl quickly.</p>

<p></p>

<p><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title> Release 1.9.13 of Perl distribution Crypt::OpenSSL::X509</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1913-of-perl-distribution-cryptopensslx509-2neo" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>A new release of the Perl distribution <a href="https://metacpan.org/dist/Crypt-OpenSSL-X509">Crypt::OpenSSL::X509</a> have seen the light of day.</p>

<p>The release does as such not offer anything new, but it contains some very important changes from a maintenance perspective.</p>

<p>If you ready up on the list of releases, you can see that several releases have been followed by additional release shortly after due to <em>bad releases</em>.</p>

<p>I can mention:</p>

<ul>
<li>1.9.12 fixing 1.9.11 - upload repair</li>
<li>1.9.10 fixing 1.9.9 - repair to broken <code>MANIFEST</code>
</li>
<li>1.9.7 - repair to broken <code>META.yml</code>
</li>
<li>1.9.5 - totally breaking Linux builds in 1.9.4</li>
<li>1.9.1 fixing 1.9 - version number issue</li>
<li>1.8.11 re-release of 1.8.10 with corrected meta-data</li>
</ul>

<p>This is over a period of 3+ years, but it is not particularly impressive.</p>

<p>There are many reasons, if not to say excuses related to this and I might dig into these in a separate blog post, lets just say I am welcoming the improvements and I hope the will stabilize the release process, so we can focus on the actual distribution, since we have much work to do.</p>

<p>The importanten changes are a migration of the distribution toolchain from Module::Install to Dist::Zilla. I am not the original author of <a href="https://metacpan.org/dist/Crypt-OpenSSL-X509">Crypt::OpenSSL::X509</a>, so I was always reluctant to a change to Dist::Zilla even though it is recommended since Module::Install is deprecated and it does improve the overall tooling.</p>

<p>I did however mention my challenges in my <a href="https://dev.to/jonasbn/release-1911-of-perl-distribution-of-cryptopensslx509-followed-by-1912-5ei1">blog post</a> for releae 1.9.11/1.9.12. And one of the regular contributors Shoichi Kaji provided a PR prosing the migration to Dist::Zilla, he even adopted Dist::Zilla configurations parts from some of my other relases, so I would feel more at home - such magnificent service, thanks <a href="https://github.com/skaji">@skaji</a>.</p>

<p>Another regular contributor Timothy Legge was quick to jump in and review the PR. Additionally he provided some improvements to the macOS CI jobs and we were good to go - thanks <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a>.</p>

<p>Since the migration was quite significant I improved the release process by adopting the oppotunity of making a <em>trial</em> release. A trial release, or development release, is not indexed on CPAN and therefor you do not break down stream distributions relying on your distribution, but it does get picked up by CPAN-testers. The release most certainly did and it actually <a href="http://matrix.cpantesters.org/?dist=Crypt-OpenSSL-X509%201.913-TRIAL">looked good</a>, so 6 days after the trial release was made I made the official release and it is now available on CPAN.</p>

<p>Next steps are improving the build on the *BDSs and support for OpenSSL 3 and I hope the road there will be less painfull for me and others, with more stable releases.</p>

<h2>
  
  
  Change log
</h2>

<h3>
  
  
  1.9.13 Sat Feb 26 00:36:28 CET 2022
</h3>

<ul>
<li><p>The distribution has changed distribution toolchain from Module::Install to Dist::Zilla, thanks to @skaji for PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/96">#96</a> and thanks to <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a> for the review of the proposed changes</p></li>
<li><p>The macOS CI jobs have been improved with PRs <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/98">#98</a> and <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/99">#99</a> from <a class="mentioned-user" href="https://dev.to/timlegge">@timlegge</a></p></li>
</ul>

<h3>
  
  
  1.9.13-TRIAL Sun Feb 20 21:31:44 CET 2022
</h3>

<ul>
<li><p>Release leading up to 1.9.13, see that release for details</p></li>
<li><p>This is a TRIAL release, in order to get some feedback from CPAN-testers prior to making a proper public release, since the changes to the build system has been quite significant. Additional trial releases might follow, based on findings and feedback</p></li>
</ul>

</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/jonasbn/release-1913-of-perl-distribution-cryptopensslx509-2neo</id>
    <published>2022-02-28T20:49:39Z</published>
    <updated>2022-02-28T20:49:39Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>#553 - Looking for a copy-editor for the Perl Weekly</title>
    <link rel="alternate" href="https://perlweekly.com/archive/553.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Two weeks ago some people asked me not to include politics in the Perl weekly so I won't add my opinion on the murderous Russian dictator, but I would like to wish the best to all the people and their families I met while I was at the Perl conference in Kyiv, Ukraine 10 years ago.</p>
<p>Since Dave Cross got fed up with our broken English and started to copy-edit the Perl Weekly we became a bit spoiled by having him. Unfortunately (to us) he got himself busy with some real work and won't be able to allocate the time for copy-editing the Perl Weekly. So now we are looking for a volunteer to do it. Basically every Monday, sometimes during the European morning hours (we don't have a fixed timing), we push out a version to our <a href="https://github.com/szabgab/perlweekly">GitHub repo</a> and to the <a href="https://perlweekly.com/">web-site</a>. Then I'd send an email to the copy-editor who checks the most recent version and sends a Pull-Request on GitHub with the fixes. Once I get the PR, I merge it, regenerate the HTML and send out the newsletter. If you would be interested to volunteer, please get in touch with me so I know whom to notify.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/553.html</id>
    <published>2022-02-28T10:00:00Z</published>
    <updated>2022-02-28T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Finding the Factorials and Factorions That Are Left</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/02/27#pwc153" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to determine the first ten members of the Left Factorials sequence.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use POSIX;
use constant UPPER_BOUND =&gt; INT_MAX/1000;

sub left_factorials_sieve{
    my($n) = @_;
    my @sieve = (0 .. UPPER_BOUND);
    my $x = 2;
    {
        my @sieve_indices = grep { $_ &lt;= $x || $_ % $x == 0 } 0 .. @sieve - 1; 
        @sieve = map{ $sieve[$_] } @sieve_indices;
        $x++;
        redo if $x &lt;= $n;
    }
    return @sieve[1 .. @sieve - 1];
}

MAIN:{
    print join(", ", left_factorials_sieve(10)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The problem statement for this refers to a On-Line Encyclopedia of Integer Sequences 
entry. That OEIS entry mentions some interesting facts about the sequence, including the
sieve technique used here. Officially the sequence seems to start with &lt;code&gt;0&lt;/code&gt; but since the
example shows it starting with &lt;code&gt;1&lt;/code&gt; here the initial &lt;code&gt;0&lt;/code&gt; element is removed.&lt;/p&gt;

&lt;p&gt;There is nothing special about the choice of &lt;code&gt;UPPER_BOUND&lt;/code&gt; it is just an arbitrarily large
number which fits the purpose. I chose the number via trial and error, but it seems there 
is a straightforward provable upper bound &lt;code&gt;U&lt;/code&gt; required to get a sequence of required 
sequence length &lt;code&gt;N&lt;/code&gt;. If this were a math text then I as the author would be compelled to
leave a frustrating note that finding the upper bound is &lt;em&gt;left as an exercise for the 
reader&lt;/em&gt;. Ha!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to figure out if the given integer is a factorion.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;

sub factorial{
    my($n) = @_;
    return 1 if $n == 1;
    $n * factorial($n - 1);
}

sub is_factorion{
    my($n) = @_;
    return boolean($n == unpack("%32I*", pack("I*", map {factorial($_)} split(//, $n))));
}

MAIN:{
    print is_factorion(145) . "\n";
    print is_factorion(123) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;In this solution I tried to optimize for the least amount of code. Not quite a &lt;em&gt;golfed&lt;/em&gt; 
solution, but compact, to be sure. The digits are obtained via &lt;code&gt;split&lt;/code&gt;, passed to our
totally boring recursive &lt;code&gt;factorial()&lt;/code&gt; function, the sum of the resulting factorials taken
using &lt;code&gt;pack&lt;/code&gt;, and then that sum compared to &lt;code&gt;$n&lt;/code&gt;. For convenience in stringifying the 
output &lt;code&gt;boolean()&lt;/code&gt; is used.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-153/"&gt;Challenge 153&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://oeis.org/A003422"&gt;Left Factorial Sequence&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/LeftFactorial.html"&gt;Left Factorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Factorion.html"&gt;Factorion&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc153</id>
    <published>2022-02-27T19:55:00-05:00</published>
    <updated>2022-02-27T19:55:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 153: Left Factorials and Factorions</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/02/perl-weekly-challenge-153-left-factorials-and-factorions.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10709</id>
    <published>2022-02-23T03:55:59Z</published>
    <updated>2022-02-27T23:42:47Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 153 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-153/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on February 27, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Left Factorials</h2>

<p><em>Write a script to compute Left Factorials of 1 to 10. Please refer <a href="http://oeis.org/A003422">OEIS A003422</a> for more information.</em></p>

<p><em>Expected Output:</em></p>

<pre><code>1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114
</code></pre>

<p>The task specification unfortunately lacks a precise definition of left factorials. Looking at <a href="http://oeis.org/A003422">OEIS A003422</a>, I found we could use the following recursive definition:</p>

<pre><code>a(0) = 0
a(1) = 1
a(n) = n*a(n - 1) - (n - 1)*a(n - 2)
</code></pre>

<p>After I did some of the implementations below, I found another definition making more sense of left factorials (a.k.a. factorial sums). Left factorial of the integer n is the sum of the factorials of the integers from 0 to n - 1. Left factorial is commonly denoted by a prefixed exclamation mark. So we have:</p>

<p><img alt="left_factorial.jpg" src="http://blogs.perl.org/users/laurent_r/left_factorial.jpg" width="132" height="80" class="mt-image-none" style="" /></p>

<p>with ! 0 = 0.</p>

<h3>Left Factorials in Raku</h3>

<p>The implementation can easily be derived from the recursive definition above, except that I prefer an iterative implementation (well, it could probably be argued it is sort of a <em>cached</em> recursive approach, even though there is no recursive subroutine call):</p>

<pre><code>my @a = 0, 1, 2;
for 3..10 -&gt; $n {
    @a[$n] = $n * @a[$n -1] - ($n - 1) * @a[$n - 2];
}
say @a[1..10];
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./left_fact.raku
(1 2 4 10 34 154 874 5914 46234 409114)
</code></pre>

<p>In Raku, we can also use <a href="https://docs.raku.org/language/variables#index-entry-_(sigilless_variables">sigilless variables</a>) to make the code look more like a math formula:</p>

<pre><code>my @a = 0, 1;
for 2..10 -&gt; \n {
    @a[n] = n * @a[n -1] - (n - 1) * @a[n - 2];
}
say @a[1..10];
</code></pre>

<p>This new version displays the same output.</p>

<p>As mentioned before, the above implementations were done before I found about the second (summation of factorials) formula. Raku has <a href="https://docs.raku.org/language/operators#index-entry-[+]_(reduction_metaoperators">reduction metaoperators</a>) making it easy to implement factorials and summations. This can lead to this concise Raku one-liner using two triangular reduction operators:</p>

<pre><code>$ raku -e 'say (|[\+] 1, (|[\*] 1..*))[0..9]'
(1 2 4 10 34 154 874 5914 46234 409114)
</code></pre>

<p>In addition, we could also define a prefix <code>!</code> operator, but this has the drawback of redefining the standard negation prefix operator <code>!</code>. This does work, but it&#8217;s probably not very wise to do so.</p>

<h3>Left Factorials in Perl</h3>

<p>Again, the implementation can easily be derived from the recursive definition provided above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @a = (0, 1);
for my $n (2..10) {
    $a[$n] = $n * $a[$n -1] - ($n - 1) * $a[$n - 2];
}
say "@a[1..10]";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./left_fact.pl
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h3>Left Factorials in Other Languages</h3>

<h4>In Julia</h4>

<p>Using the recursive definition of left factorials:</p>

<pre><code>a = [1, 2] # Julia arrays start with index 1

for n in 3:10
    push!(a, n * a[n - 1] - (n - 1) * a[n - 2])
end
println(a)
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./left_fact.jl
[1, 2, 4, 10, 34, 154, 874, 5914, 46234, 409114]
</code></pre>

<h4>In Ring</h4>

<p>Here, we use the summation of factorials definition. For each iteration in the <code>for</code> loop, we multiply <code>fact</code> by the loop variable to obtain the new factorial, and we add the new factorial to the <code>sum</code> variable. For some strange reason, <code>see left_fact + " "'</code> doesn&#8217;t output a space after the variable value, where as <code>see " " + left_fact</code> does what we want. To me, it looks like a small bug in the language, but I may be missing something.</p>

<pre><code>left_fact = 1
fact = 1
for i = 1 to 10
    see " " + left_fact 
    fact *= i
    left_fact += fact  
next
see " " + nl
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./left_fact.ring
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Python</h4>

<p>Again using the summation of factorials definition. </p>

<pre><code>fact = 1
left_fact = 1

for n in range (1, 11):
    print(left_fact)
    fact = fact * n
    left_fact = left_fact + fact
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./left_fact.py
1
2
4
10
34
154
874
5914
46234
409114
</code></pre>

<p>Note that I didn&#8217;t remember how to how to output data without a new line in Python, and I was too lazy to spend time to find out. This is proverbially left as an exercise to the reader, as this output fits the specification bill. </p>

<h4>In Awk</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>BEGIN {
    left_fact = 1
    fact = 1
    for (i = 1; i &lt;= 10; i++) {
        printf "%d ", left_fact
        fact *= i
        left_fact += fact  
    }
    printf "\n"
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f left_fact.awk
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In C</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>#include &lt;stdio.h&gt;

int main () {
    int sum = 1;
    int fact = 1;
    for (int i = 1; i &lt;= 10; i++) {
        printf("%d ", sum);
        fact *= i;
        sum += fact;
    }
    printf ("\n");
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./test-left
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Bc</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>sum = 1
fact = 1

for (n = 1; n &lt;= 10; n ++) {
    print sum, " "
    fact = fact * n
    sum = sum + fact
}
</code></pre>

<p>Output:</p>

<pre><code>$ bc left_fact.bc
bc 1.06.95
Copyright (...)
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Tcl</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>set left_fact 1
set fact 1
puts -nonewline $left_fact

for {set i 1} {$i &lt;= 10} {incr i} {
    puts -nonewline "${left_fact} "
    set fact [expr $fact * $i]
    set left_fact [expr $left_fact + $fact]

}
puts ""
</code></pre>

<p>Output:</p>

<pre><code>$ tclsh ./left_fact.tcl
11 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In R</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>left_fact &lt;- 1
fact &lt;- 1

for (i in 1:10) {
    cat(left_fact, '')
    fact &lt;- fact * i
    left_fact &lt;- left_fact + fact
}
cat("\n")
</code></pre>

<p>Output:</p>

<pre><code>$ Rscript left_fact.r
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Pascal</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>Program leftfact;

var
    fact, left_fact: longint;
    i: integer;

begin
    left_fact := 1;
    fact := 1;
    for i := 1 to 10 do begin
        write(left_fact, ' ');
        fact := fact * i;
        left_fact := left_fact + fact;
    end;
    writeln('');
end.
</code></pre>

<p>Output:</p>

<pre><code>$ ./left_fact
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Rust</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fn main() {
    let mut fact = 1;
    let mut left_fact = 1;
    for n in 1..11 {
        println!("{}", left_fact);
        fact = fact * n;
        left_fact = left_fact + fact;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./left_fact
1
2
4
10
34
154
874
5914
46234
409114
</code></pre>

<h4>In Go</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>package main

import "fmt"

func main() {
    left_fact := 1
    fact := 1
    for i := 1; i &lt;= 10; i++ {
        fmt.Printf("%d ", left_fact)
        fact *= i
        left_fact += fact
    }
    fmt.Printf("\n")
}
</code></pre>

<p>Output:</p>

<pre><code>1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Scala</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>object fact_left extends App {
  var fact = 1
  var left_fact = 1
  for (n &lt;- 1 to 10) {
    println(left_fact)
      fact *= n
    left_fact += fact
  }
}
</code></pre>

<p>Output:
    1
    2
    4
    10
    34
    154
    874
    5914
    46234
    409114</p>

<h4>In Ruby</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fact = 1
left_fact = 1
for n in 1..10 
    printf "%d ", left_fact
    fact *= n
    left_fact += fact
end
printf "\n"
</code></pre>

<p>Output:</p>

<pre><code>ruby left_fact.rb
1 2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h4>In Lua</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fact = 1
left_fact = 1
for n = 1, 10 do
    print(left_fact)
    fact = fact * n
    left_fact = left_fact + fact
end
</code></pre>

<p>Output:</p>

<pre><code>$ lua left_fact.lua
1
2
4
10
34
154
874
5914
46234
409114
</code></pre>

<h4>In Kotlin</h4>

<p>Using the summation of factorials definition. </p>

<pre><code>fun main() {
    var fact = 1
    var left_fact = 1
    for (i in 1..9) {
        fact *= i
        left_fact += fact
        print("$left_fact ")
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./left_fact.kexe
2 4 10 34 154 874 5914 46234 409114
</code></pre>

<h2>Task 2: Factorions</h2>

<p><em>You are given an integer, <code>$n</code>.</em></p>

<p><em>Write a script to figure out if the given integer is factorion.</em></p>

<blockquote>
  <p><em>A factorion is a natural number that equals the sum of the factorials of its digits.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $n = 145
Output: 1

    Since 1! + 4! + 5! =&gt; 1 + 24 + 120 = 145
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $n = 123
Output: 0

    Since 1! + 2! + 3! =&gt; 1 + 2 + 6 &lt;&gt; 123
</code></pre>

<p>We will slightly deviate from the task specification and write a subroutine that checks whether an integer is a factorion, and write a program to find all factorions in a given range. </p>

<h3>Factorions in Raku</h3>

<p>Here again, we use twice the <a href="https://docs.raku.org/language/operators#index-entry-[+]_(reduction_metaoperators">reduction metaoperators</a>), one (<code>[*] 1..$_</code>) to compute the factorial of a digit, and one (<code>[+]</code>) to sum up the digit factorials. </p>

<pre><code>sub is_factorion (Int $in) {
    my $sum = [+] map { [*] 1..$_ }, $in.comb;
    return $sum == $in;
}
say $_ if is_factorion $_ for 1..50000;
</code></pre>

<p>We chose here an upper limit of 50,000 because it is known and proven that there are only 4 factorions in the decimal system, all smaller than 50,000. This solution is concise and elegant and the <code>is_factorion</code> subroutine could easily be boiled down to a single code line:</p>

<pre><code>sub is_factorion (Int $in) {
    return $in == [+] map { [*] 1..$_ }, $in.comb;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time raku ./factorion.raku
1
2
145
40585

real    0m13,079s
user    0m0,015s
sys     0m0,030s
</code></pre>

<p>Note that I timed the execution because I felt it was a bit slow. The reason for that slowness is that we&#8217;re computing the factorial of each digit a very large number of times. It is significantly more efficient to cache the factorials of each digit, for example by storing in an array (<code>@fact</code>) the precomputed factorials of digits 0 to 9.</p>

<pre><code>my @fact = map { [*] 1..$_ }, 0..9;
sub is_factorion (Int $in) {
    my $sum = [+] map { @fact[$_] }, $in.comb;
    return $sum == $in;
}
say $_ if is_factorion $_ for 1..50000;
</code></pre>

<p>This modified program displays the following output and timings:</p>

<pre><code>$ time raku ./factorion.raku
1
2
145
40585

real    0m1,553s
user    0m0,000s
sys     0m0,015s
</code></pre>

<p>So caching the digit factorials made the program about 8.5 times faster.</p>

<h3>Factorions in Perl</h3>

<p>In Perl, we implemented directly the cached version with a <code>@digit_fact</code> array:</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub fact {
    my $i = shift;
    my $prod = 1;
    $prod *= $_ for 2..$i;
    return $prod;
}

my @digit_fact = map {fact $_} 0..9;

sub is_factorion {
    my $in = shift;
    my $sum = 0;
    $sum += $_ for map { $digit_fact[$_] } split //, $in;
    return $sum == $in;
    #say $sum;
}
for (1..50000) {
    say $_ if is_factorion($_)
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl ./factorion.pl
1
2
145
40585

real    0m0,182s
user    0m0,140s
sys     0m0,015s
</code></pre>

<h3>Factorions in Other Languages</h3>

<h4>In Julia</h4>

<pre><code>fact = map(x -&gt; factorial(x), Vector(0:9))

function is_factorion(num)
    sum = 0
    start_num = num
    for n in 1:length(string(num))
        sum += fact[num % 10 + 1] # Julia arrays start at 1
        num = num ÷ 10
    end
    return sum == start_num
end

for i in 1:50000
    if is_factorion(i)
        println(i)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./factorion.jl
1
2
145
40585
</code></pre>

<h4>In Ring</h4>

<p>In Ring, list index starts at 1. That makes index management a bit complicated in this case, because we need to store the factorial of 0. So factorial 0 is stored at index 1, and all the others are shifted by 1. It’s not a problem, but it makes the code look a bit unnatural.</p>

<pre><code>fact = [1, 1]
for k = 2 to 9
    add (fact, k * fact[k]) # list indices start at 1
next
# see fact + nl
for n = 1 to 50000
    if is_factorion(fact, n)
        see n + nl
    ok
next

func is_factorion fact, input
    sum = 0
    n = "" + input
    for i = 1 to len(n)
        digit = n[i]
        sum += fact[1 + digit]
    next
    return input = sum
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./factorion.ring
1
2
145
40585
</code></pre>

<h4>In Python</h4>

<pre><code>fact = [1] * 10
for n in range (1, 10):
    fact[n] = n * fact[n - 1]

def is_factorion (input):
    sum = 0
    n = str(input)
    for i in range (0, len(n)):
        sum = sum + fact[int(n[i])]

    return input == sum

for n in range(1, 50000):
    if is_factorion(n):
        print(n)
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./factorion.py
1
2
145
40585
</code></pre>

<h4>In C</h4>

<pre><code>#include &lt;stdio.h&gt;

char is_factorion(int fact[], int num) {
    int sum = 0;
    int n = num;
    while (n &gt; 0) {
        sum += fact[n % 10];
        n /= 10;
    }
    return num == sum;
}

int main() {
    int fact[10];
    fact[0] = 1;
    for (int i = 1; i &lt;= 9; i++) {
        fact[i] = i * fact[i - 1];
    }

    for (int n = 1; n &lt; 50000; n++) {
        if (is_factorion(fact, n)) {
            printf("%d ", n);
        }
    }
    printf("\n");
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./factorion 1 2 145 40585
</code></pre>

<h4>In Awk</h4>

<pre><code>function populate_fact() {
    fact[0] = 1
    for (n = 1; n &lt;= 9; n++) {
        fact[n] = n * fact[n - 1]
    }
}
function is_factorion(num) {
    sum = 0
    start_num = num
    for (n = 0; n &lt; length(start_num); n++) {
        sum += fact[num % 10]
        num = int(num / 10)
    }
    return sum == start_num
 }
BEGIN {
    populate_fact()
    for (i = 1; i &lt;= 50000; i++) {
        if (is_factorion(i)) {
            print i
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f factorion.awk
1
2
145
40585
</code></pre>

<h4>In Bc</h4>

<pre><code>fact[0] = 1
for (n = 1; n &lt;= 9; n++) {
    fact[n] = n * fact[n - 1]
}
for (n = 1; n &lt;= 50000; n++) {
    sum = 0
    i = n
    while (i &gt; 0) {
        sum += fact[i % 10]
        i /= 10
    }
    if (sum == n) {
        print n, " "
    }
}
halt
</code></pre>

<p>Output:</p>

<pre><code>$ bc  factorion.bc
bc 1.06.95
Copyright (...)
1 2 145 40585
</code></pre>

<h4>In Scala</h4>

<pre><code>object factorion extends App {
  def is_factorion(fact: Array[Int], num: Int): Boolean = {
    var sum = 0
    var i = num
    while (i &gt; 0) {
      sum += fact(i % 10)
      i /= 10
    }
    return num == sum
  }

  val fact = new Array[Int](12)
  fact(0) = 1
  for (n &lt;- 1 to 9) {
    fact(n) = n * fact(n - 1)
  }

  for (j &lt;- 1 to 50000) {
    if (is_factorion(fact, j)) {
      println(j)
    }
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1
2
145
40585
</code></pre>

<h4>In Lua</h4>

<pre><code>function is_factorion(fact, num)
    sum = 0
    i = num
    while i &gt; 0 do
        sum = sum + fact[ 1 + i % 10]
        i = math.floor(i / 10)
    end
    return num == sum
end

fact = {1}
for n = 1, 10 do
    table.insert(fact, n * fact[n])
end
for j = 1, 50000 do
    if is_factorion(fact, j) then
        print(j)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>$ lua factorion.lua
1
2
145
40585
</code></pre>

<h4>In Kotlin</h4>

<pre><code>fun main() {
    var fact = mutableListOf&lt;Int&gt;()
    fact.add(1)
    for (n in 1..9) {
        fact.add(n * fact[n-1])
    }
    for (num in 1..50000) {
        var i = num
        var sum = 0
        while (i &gt; 0) {
            sum += fact[i % 10]
            i /= 10
        }
        if (num == sum) print ("$num ")
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./factorion.kexe
1 2 145 40585
</code></pre>

<h4>In Ruby</h4>

<pre><code>def is_factorion(fact, num)
    sum = 0
    i = num
    while i &gt; 0
        i, d = i.divmod(10)
        sum += fact[d]
    end
    return num == sum
end

fact = [1]
for n in 1..10
    fact.push(n * fact[n - 1])
end
for j in 1..50000
    if is_factorion(fact, j)
        printf "%d ", j
    end
end
printf("\n")
</code></pre>

<p>Output:</p>

<pre><code>$ ruby factorion.rb
1 2 145 40585
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on March 6, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5956476339167670765</id>
    <published>2022-02-26T15:35:00.000+01:00</published>
    <updated>2022-02-26T15:35:21.198+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxxi) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.45&lt;/strong&gt; on 2022-02-26&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 10 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.878' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.878&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 89&lt;/li&gt;  &lt;li&gt;Previous version: 1.876 was 2 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.876' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.876&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.875 was 2 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220220' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220220&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220120 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-Redis-3.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Redis&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Redis driver based on Mojo::IOLoop &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.29&lt;/strong&gt; on 2022-02-23&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 3.27 was 3 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Package-Stash-0.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Package::Stash&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Routines for manipulating stashes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.40&lt;/strong&gt; on 2022-02-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.39 was 1 year, 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.076' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.076&lt;/strong&gt; on 2022-02-25&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.075 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.023&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.022 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.023&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.022 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.023' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.023&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.022 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9507' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9507&lt;/strong&gt; on 2022-02-24&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9505 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.27&lt;/strong&gt; on 2022-02-20&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 0.26 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302189' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302189&lt;/strong&gt; on 2022-02-25&lt;/li&gt;  &lt;li&gt;Votes: 173&lt;/li&gt;  &lt;li&gt;Previous version: 1.302188 was 4 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5956476339167670765/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxxi-13-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5956476339167670765"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5956476339167670765"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxxi-13-great-cpan-modules-released.html" title="(ccclxxxi) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8972096758362802475</id>
    <published>2022-02-26T15:32:00.000+01:00</published>
    <updated>2022-02-26T15:32:26.352+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-02-26 14:31:25 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71212667" target="_blank"&gt;Unit-testing a .pl Perl file&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71189620" target="_blank"&gt;How can I read user input using Term::ReadLine without having the newline character printed out?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71189457" target="_blank"&gt;How to use in and out bind variables with executemany in cx_Oracle in Python&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71208147" target="_blank"&gt;How to execute the command in another bash prompt in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71270102" target="_blank"&gt;Perl Simple heads or tails game&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8972096758362802475/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8972096758362802475"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8972096758362802475"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxiii-stackoverflow-perl-report.html" title="(dxxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Common causes and fixes for HTTP 500 Error in Perl CGI scripts</title>
  <summary type="html"><![CDATA[<p>
One of the nasty things that can happen in a Perl CGI environment is to get a 500 HTTP error. It is nasty as it is hard to know what is the problem and how to solve it.
<p>
The first step is to look at the error log of your web server, if you can. If you can't well, best would be to change hosting to one that will give you access to the error
log.
<p>
On this page you'll find some of the most common cases and their solutions.
<p>
]]></summary>
  <updated>2022-02-25T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/http-500-error"/>  <id>https://perlmaven.com/http-500-error</id>
  <content type="html"><![CDATA[<p>
One of the nasty things that can happen in a Perl CGI environment is to get a 500 HTTP error. It is nasty as it is hard to know what is the problem and how to solve it.
<p>
The first step is to look at the error log of your web server, if you can. If you can't well, best would be to change hosting to one that will give you access to the error
log.
<p>
On this page you'll find some of the most common cases and their solutions.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>My Favorite Modules: Devel::NYTProf</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-develnytprof.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10719</id>
    <published>2022-02-25T03:37:22Z</published>
    <updated>2022-02-25T03:40:52Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p><cite>'It is a capital mistake to theorize before one has data.' -- Sherlock Holmes, "A Scandal in Bohemia"</cite></p>

<p>The mental excursion that led to this blog post started with a report from Olaf Alders that my <a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter">Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter</a> was generating a false positive on variables used only as defaults in subroutine signatures. After the first cut at fixing this I thought a regression test was in order. I did this by running both unpatched and patched versions of the policy against my <a href="https://metacpan.org/dist/CPAN-Mini">Mini CPAN</a>, and then <code>diff</code> on the outputs.</p>

<p>This has always taken the better part of a day to run, and given that it had to expand all the distributions first and then run a fairly brute-force policy against anything it found, I accepted this as the price of conscientiousness.</p>

<p>But then I noticed, quite by chance, that running the patched policy against the <a href="https://metacpan.org/dist/Number-Phone-FR">Number-Phone-FR</a> distribution appeared to hang. Investigation failed to turn up any reason for the modifications to do this, and when I ran the unpatched code against that distribution it also appeared to hang. I knew it eventually completed, though, since the full Mini CPAN scan using unpatched code eventually completed.</p>

<p>I fairly quickly isolated the slowness to the analysis of one file: <code>lib/Number/Phone/FR/Full.pm</code>. This was only 46 lines long, but contained 182615 characters, most of them in one monster regular expression.</p>

<p>This immediately made me suspect <a href="https://metacpan.org/pod/PPIx::Regexp">PPIx::Regexp</a>, since I have great faith in my own ability to write bugs. This finds siblings the same way PPI does, which involves traversing an array rather than holding weak links. So I started looking into an optimization that tracked the number of each kind of token in the parse, since the monster regular expression contained no interpolations. I was about to start implementing when I thought, "Maybe I should actually profile this code."</p>

<p>It was a good thing I did, because <a href="https://metacpan.org/pod/Devel::NYTProf">Devel::NYTProf</a> told a very different story. According to it, the majority of the time was spent on one statement in <a href="https://metacpan.org/pod/Text::Tabs">Text::Tabs</a>' <code>expand()</code> method, which <code>PPIx::Regexp</code>'s tokenizer was using in its computation of logical column positions.</p>

<p>For the curious, that statement was <code>$offs = () = /\PM/g;</code>. Now, I do not have huge amounts of Unicode-Fu, but I understand this to be counting all the characters in the topic variable which are not explicitly zero-width. The profiler said that statement consumed 2825 seconds for 161163 executions.</p>

<p>Since <a href="https://metacpan.org/dist/PPI">PPI</a>, which underpins any Perl Critic policy, did not appear to have this problem, I looked at how it calculated column positions, and found a simple analysis of tab characters and their positions. This is technically less correct than <code>Text::Tabs</code>, but for the sake of expediency I chose consistency over strict correctness. Using the patched <code>PPIx::Regexp</code>, the patched Perl Critic policy analyzed the problem module in 500 seconds, as compared to 4000 seconds for the unpatched <code>PPIx::Regexp</code>.</p>

<p>The moral: Because I took a couple seconds to actually think, and a couple minutes to install <a href="https://metacpan.org/pod/Devel::NYTProf">Devel::NYTProf</a>, I saved several hours developing an optimization that did not address the actual problem. I do not count the hour or so running the profiler (it was not significantly longer than the time to run the un-profiled code) because that did not require my actual attention.</p>

<p><cite>The actual timings were done on a 2.3 GHz Dual-Core Intel i5 running macOS 12.2.1 Monterey. No effort was made to control other loads on the system, and the timings were not replicated enough to be statistically valid. But, hey, cutting execution time by 7/8 looks like a win to me.</cite></p>

<p>Previous entries in this series:</p>

<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"><code>diagnostics</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-modules-termreadlineperl.html"><code>Term::ReadLine::Perl</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html"><code>re</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Finding unused variables in your Perl code</title>
    <link rel="alternate" href="http://blogs.perl.org/users/olaf_alders/2022/02/finding-unused-variables-in-your-perl-code.html"/>
    <id>tag:blogs.perl.org,2022:/users/olaf_alders//280.10712</id>
    <published>2022-02-23T21:14:14Z</published>
    <updated>2022-02-23T21:15:02Z</updated>
    <author>
        <name>Olaf Alders</name>
        <uri>http://www.wundercounter.com</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/olaf_alders/">
        <![CDATA[<p>I've put together a brief overview of some of the ways to automate finding unused variables in your Perl code:</p>

<p><a href="https://www.olafalders.com/2022/02/22/finding-unused-perl-variables/">https://www.olafalders.com/2022/02/22/finding-unused-perl-variables/</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>The progress of the SPVM language 2022</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/02/the-progress-of-the-spvm-module-2022.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10710</id>
    <published>2022-02-23T04:13:10Z</published>
    <updated>2022-02-23T04:20:32Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>Hi, I write the progress of the SPVM module 2022.</p>

<p>SPVM is a programming language that is build on top of the Perl ecosystem and provides fast calculation and array operation to Perl.</p>

<p>SPVM can be transpiled to C language, and it can be compiled to shared libraries and executable files.</p>

<p>SPVM can call C/C++/Cuda libraries by writing pure C/C++/Cuda language without XS.</p>

<p>I wrote SPVM from 2016. I finally implement the all features that I think they are needed for modern applications.</p>

<p>Next, I need to do many tests of SPVM module by creating modules and applications.</p>

<h2>Documentations</h2>

<p>The following are the official documentations of SPVM.</p>

<p><a href="https://metacpan.org/pod/SPVM">SPVM</a></p>

<h3>Tutorial</h3>

<p>SPVM Tutorial.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/Tutorial.pm">Tutorial</a></p>

<h3>Language Specification</h3>

<p>SPVM Language Specification.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/LanguageSpecification.pm">Language Specification</a></p>

<h3>Standard Functions</h3>

<p>SPVM Standard Functions</p>

<p><a href="https://metacpan.org/pod/SPVM::Fn">Standard Functions</a></p>

<h3>Standard Modules</h3>

<p>SPVM Standard Modules.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/Modules.pm">Standard Modules</a></p>

<h3>Performance Benchmark</h3>

<p>SPVM Performance Benchmark.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/Benchmark.pm">Benchmark</a></p>

<h3>Exchange API</h3>

<p>SPVM Exchange API converts Perl data structures to SPVM data structures, and vice versa.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/ExchangeAPI.pm">ExchangeAPI</a></p>

<h3>Native API</h3>

<p>SPVM Native API is C API used in SPVM native method.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/NativeAPI.pm">NativeAPI</a></p>

<h3>Generate Execution File</h3>

<p>spvmcc is a compiler to compile SPVM source codes to a execution file. The execution file can be run by itself.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/script/spvmcc">spvmcc</a></p>

<h3>Generate SPVM Modules</h3>

<p>spvmgenlib is the command to generate SPVM native modules.</p>

<p><a href="https://metacpan.org/dist/SPVM/view/script/spvmgenlib">spvmgenlib</a></p>

<h2>Modules and Applications that is being tested</h2>

<p>The following are the modules and applications that is being tested.</p>

<h3>SPVM::Math</h3>

<p>C99 math functions.</p>

<p><a href="https://metacpan.org/pod/SPVM::Math">SPVM::Math</a></p>

<h3>SPVM::JSON</h3>

<p>JSON.</p>

<p><a href="https://metacpan.org/pod/SPVM::JSON">SPVM::JSON</a></p>

<h3>SPVM::Resource::Zlib</h3>

<p>zlib library of C language. This is reusable from other modules.</p>

<p><a href="https://github.com/yuki-kimoto/Perl-SPVM-Resource-Zlib">SPVM::Resource::Zlib</a></p>

<h3>SPVM::Resource::Libpng</h3>

<p>libpng library of C language. This is reusable from other modules and resolve zlib dependency cleanly.</p>

<p><a href="https://github.com/yuki-kimoto/Perl-SPVM-Resource-Libpng">SPVM::Resource::Libpng</a></p>

<h3>SPVM::IO::File</h3>

<p>File utilities.</p>

<p><a href="https://github.com/yuki-kimoto/SPVM-IO-File">SPVM::IO::File</a></p>

<h3>Socket, select, HTTP, Base64</h3>

<p>Tests of Socket, select, HTTP, Base64</p>

<p><a href="https://github.com/yuki-kimoto/SPVM-Webkit/tree/master/lib/SPVM/Webkit">Tests of Socket, select, HTTP, Base64</a></p>

<h3>Deep Learning</h3>

<p>I wrote the basic of MNIST Deep Learning using SPVM.</p>

<p><a href="https://en.deeplearning.perlzemi.com/blog/20210510142804.html">MNIST Deep Learning using SPVM</a></p>

<h3>Windows Application</h3>

<p>Build Windows Application using Direct2D and UTF-8. Current SPVM can output windows executable file using spvmcc command.</p>

<pre>
spvmcc -o cotton -c cotton.config -I lib/SPVM Cotton::Browser::Win
</pre>

<p><a href="https://github.com/yuki-kimoto/cotton">cotton</a></p>

<h2>Modules and Applications that will be tested</h2>

<h3>Modules</h3>

<p>Web Framework</p>

<p>SpreadSheet like Excel</p>

<p>Charts for data science</p>

<h3>Applications</h3>

<p>Windows applications</p>

<p>Android applications</p>

<p>iphone applications/ipad applications</p>

<p>As my first experimentation, I want to create gaming application for education.</p>

<h3>Summary</h3>

<p>I want to keep backword compatible of SPVM as possible, but when doing tests of modern libraries and applications, some adjustment will be needed.</p>

<p>I will try to make the adjustment reasonable as possible.</p>

<p>Well stable SPVM 1.0 will be released after finishing many testing of libraries and application.<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>and or AND and ElasticSearch, or: Case matters</title>
    <link href="http://domm.plix.at/perl/2022_02_and_or_and.html"/>
    <id>http://domm.plix.at/perl/2022_02_and_or_and.html</id>
    <updated>2022-02-22T18:58:47+00:00</updated>
    <category term="perl"/>
    <summary type="html">Today I spend a few hours hunting a weird bug. I got a report that people entering data for the Steiermärkische Landesbibliothek where not able to find duplicate entries when adding new books. In ...</summary>
    <content type="html">&lt;p&gt;Today I spend a few hours hunting a weird bug. I got a report that people entering data for the &lt;a href="https://katalog.landesbibliothek.steiermark.at/"&gt;Steiermärkische Landesbibliothek&lt;/a&gt; where not able to find duplicate entries when adding new books. In theory, &lt;a href="https://koha-community.org/"&gt;Koha&lt;/a&gt; should search through all the already existing data and present the user with a dialog if they maybe want to reuse the existing entry, if one is found:&lt;/p&gt;

&lt;p&gt;&lt;a href="../perl/2022_02_and_or_and_images/and_or_and_001.jpg"&gt;&lt;img src="../perl/2022_02_and_or_and_images/and_or_and_001.jpg" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works when an &lt;span class="caps"&gt;ISBN &lt;/span&gt;was entered, but not when "only" title, author and some other data was available. To make things a bit more complicated, we're using the not-default ElasticSearch backend, as opposed to the old-school Zebra&lt;sup class="footnote"&gt;&lt;a href="#fn0"&gt;0&lt;/a&gt;&lt;/sup&gt; index for searching.&lt;/p&gt;

&lt;p&gt;So I dug through the source code, adds some strategic &lt;code&gt;Data::Dumper&lt;/code&gt; statements to get the actual query sent to ElasticSearch, and then played a bit with that query, sending it directly to ElasticSearch via &lt;code&gt;curl&lt;/code&gt;. The best way to do this (IMO) is to store the query into a file, and use &lt;code&gt;-d filename&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:9200/biblios/_search?pretty -X GET -H 'Content-Type: application/json' -d query.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's the &lt;code&gt;query.json&lt;/code&gt; (that was not returning any results)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;query&amp;quot;: {
    &amp;quot;query_string&amp;quot;: {
      &amp;quot;query&amp;quot;: &amp;quot;(author:'Schwartz, Randal J' and title:'Einführung in Perl')&amp;quot;,
      &amp;quot;default_operator&amp;quot;:&amp;quot;AND&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;cross_fields&amp;quot;,
      &amp;quot;analyze_wildcard&amp;quot;: true, &amp;quot;fuzziness&amp;quot;: &amp;quot;auto&amp;quot;, &amp;quot;lenient&amp;quot;: true
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this search is using the simple &lt;code&gt;query_string&lt;/code&gt; search, where you pass a semi-complex query as a string instead of composing a very deeply nested data structure&lt;sup class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(author:'Schwartz, Randal J' and title:'Einführung in Perl')&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some fiddling and testing I found that removing &lt;code&gt;&amp;quot;default_operator&amp;quot;:&amp;quot;AND&amp;quot;&lt;/code&gt; yields results (but not very good results..)&lt;/p&gt;

&lt;p&gt;So I took my problem to the Koha &lt;span class="caps"&gt;IRC &lt;/span&gt;channel, where kidclamp provided the needed clue after some back and forth:&lt;/p&gt;

&lt;h4&gt;Case matters&lt;/h4&gt;

&lt;p&gt;When using the &lt;code&gt;simple_query&lt;/code&gt;, ElasticSearch interprets the string &lt;code&gt;&amp;quot;AND&amp;quot;&lt;/code&gt; as a boolean operator linking the literal values in the query. But it interprets the string &lt;code&gt;&amp;quot;and&amp;quot;&lt;/code&gt; as a literal value!&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;foo AND bar&amp;quot;&lt;/code&gt; finds documents that contain &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;foo and bar&amp;quot;&lt;/code&gt; finds documents that contain &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;In the latter case, ElasticSearch checks &lt;code&gt;default_operator&lt;/code&gt;, which in our case was set to &lt;code&gt;AND&lt;/code&gt;, thus only finding documents that contained the string &lt;code&gt;&amp;quot;and&amp;quot;&lt;/code&gt; in addition to what we're actually searching for&lt;/li&gt;
&lt;li&gt;Removing &lt;code&gt;default_operator&lt;/code&gt; let ElasticSearch fall back to the default, &lt;code&gt;OR&lt;/code&gt;, so we now found stuff, but very crappy stuff (anything with &lt;code&gt;&amp;quot;and&amp;quot;&lt;/code&gt; in &lt;strong&gt;any&lt;/strong&gt; field, not only in title or author)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these results were really usable!&lt;/p&gt;

&lt;p&gt;So the real fix was to patch Koha to use an uppercase &lt;code&gt;AND&lt;/code&gt; to construct this query. See &lt;a href="https://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=30153"&gt;Koha Bug #30153&lt;/a&gt; for the gory details&lt;sup class="footnote"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Thanks to kidclamp for helping my locate the problem and to the Koha devs for quickly applying and testing my patch!&lt;/p&gt;

&lt;h4&gt;Footnotes&lt;/h4&gt;

&lt;p class="footnote" id="fn0"&gt;&lt;sup&gt;0&lt;/sup&gt; Don't ask!&lt;/p&gt;

&lt;p class="footnote" id="fn1"&gt;&lt;sup&gt;1&lt;/sup&gt; I used to joke that ElasticSearch devs get paid by the tab indentation needed to express a search query&lt;/p&gt;

&lt;p class="footnote" id="fn2"&gt;&lt;sup&gt;2&lt;/sup&gt; Or not so gory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-        my $op = 'and';
+        my $op = 'AND';&lt;/code&gt;&lt;/pre&gt;</content>
    <category term="Koha"/>
    <category term="ElasticSearch"/>
  </entry>
  <entry>
    <title>#552 - Outreachy and TPF</title>
    <link rel="alternate" href="https://perlweekly.com/archive/552.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;Welcome to my personal 98th and overall 552nd edition of the Perl Weekly newsletter. I can't wait for the day when I reach the 3-digits number.&lt;/p&gt;
&lt;p&gt;Today, I would like to talk about the Outreachy program and its association with TPF. Few days ago, I came across a Facebook post by a friend of mine sharing the news TPF (The Perl Foundation) is looking mentor and project for the year 2022. Please check out the official &lt;a href="https://news.perlfoundation.org/post/outreachy-2022"&gt;announcement&lt;/a&gt;. I have been following the work done as part of the Outreachy program. In the past, it has supported &lt;a href="https://world.openfoodfacts.org/"&gt;Open Food Facts&lt;/a&gt;, a very popular Perl based project. To be honest, I find the application process to submit project idea is not smooth. It would be a big help if &lt;a href="https://theweeklychallenge.org"&gt;The Weekly Challenge (Perl &amp; Raku)&lt;/a&gt; get the support too. As some of you associated with the project knows it is currently built using Hugo and hosted on &lt;a href="https://github.com/manwar/theweeklychallenge"&gt;Github&lt;/a&gt;. I have been planning to get it over to pure Perl template web based solution e.g. Dancer2 and hosted by real hosting service e.g Digital Ocean. As we grow bigger with times, I find it hard to manage the contributions on GitHub. It takes longer now to process comparatively. If it ever get approved, I can offer to be a mentor to the selected candidate.&lt;/p&gt;
&lt;p&gt;There was a good news shared last week about Perl warning i.e. "signatures are experimental" is going to disappear for ever with the next major release. I always wanted to have this feature in my Perl. I can't wait for the next release to use it. Do you want to know more about it? Please &lt;a href="https://github.com/Perl/perl5/pull/19424"&gt;checkout here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Do you need help with Perl related queries?&lt;/p&gt;
&lt;p&gt;I highly recommend, the two Facebook groups (members only), &lt;a href="https://www.facebook.com/groups/perlcommunity"&gt;The Perl Community&lt;/a&gt; (run and managed by Curtis Poe) and &lt;a href="https://www.facebook.com/groups/perlprogrammers"&gt;Perl Programmers&lt;/a&gt; (run and managed by Will Braswell).&lt;/p&gt;
&lt;p&gt;For parents of school going kids in England, welcome to the daily routine after a week long break. I know it is tough, specially if you have to cover two different schools in the morning rush. Enjoy the rest of the newsletter&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/552.html</id>
    <published>2022-02-21T10:00:00Z</published>
    <updated>2022-02-21T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5146971702396319142</id>
    <published>2022-02-19T15:07:00.000+01:00</published>
    <updated>2022-02-19T15:07:22.215+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxx) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/App-Staticperl-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Staticperl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - perl, libc, 100 modules, all in one standalone 500kb file &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 years, 3 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Carmel-v0.1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Carmel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN Artifact Repository Manager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.1.39&lt;/strong&gt; on 2022-02-13&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v0.1.38 was 3 years, 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Code-TidyAll-0.81' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Code::TidyAll&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Engine for tidyall, your all-in-one code tidier and validator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.81&lt;/strong&gt; on 2022-02-17&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 0.80 was 2 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TURNSTEP/DBD-Pg-3.15.1' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI PostgreSQL interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15.1&lt;/strong&gt; on 2022-02-14&lt;/li&gt;  &lt;li&gt;Votes: 87&lt;/li&gt;  &lt;li&gt;Previous version: 3.15.0 was 8 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Dist-Milla-v1.0.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Milla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution builder, Opinionated but Unobtrusive &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.0.21&lt;/strong&gt; on 2022-02-13&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: v1.0.20 was 3 years, 9 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Getopt-Long-Complete-0.316' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long::Complete&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A drop-in replacement for Getopt::Long, with shell tab completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.316&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.315 was 1 year, 7 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.50&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.49 was 9 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.075&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.074 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20220217' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20220217&lt;/strong&gt; on 2022-02-15&lt;/li&gt;  &lt;li&gt;Votes: 123&lt;/li&gt;  &lt;li&gt;Previous version: 20211029 was 3 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.61&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 158&lt;/li&gt;  &lt;li&gt;Previous version: 1.60 was 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.022&lt;/strong&gt; on 2022-02-19&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.019 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9505' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9505&lt;/strong&gt; on 2022-02-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9503 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.608' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.608&lt;/strong&gt; on 2022-02-14&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.607 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5146971702396319142/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxx-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5146971702396319142"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5146971702396319142"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxx-16-great-cpan-modules-released.html" title="(ccclxxx) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5789931256339380794</id>
    <published>2022-02-19T15:03:00.003+01:00</published>
    <updated>2022-02-19T15:03:39.700+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-02-19 14:03:11 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71115578" target="_blank"&gt;Match a float and multiply by 100&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71131916" target="_blank"&gt;Perl Regex Query - filter the contents inside the file which are older than 18 months&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71167693" target="_blank"&gt;How can I overwrite file after replace the word?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71147634" target="_blank"&gt;I have a problem trying to put single quotes around a text&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/71113863" target="_blank"&gt;perl compilation: 'Too many levels of symbolic links'&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5789931256339380794/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5789931256339380794"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5789931256339380794"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxxii-stackoverflow-perl-report.html" title="(dxxii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Triangles and rectangles</title>
    <link rel="alternate" href="https://dev.to/simongreennet/triangles-and-rectangles-45p8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 152
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-152/">The challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-152/sgreen">My solution</a></p>

<h2>
  
  
  TASK #1 › Triangle Sum Path
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a triangle array.</p>

<p>Write a script to find the minimum sum path from top to bottom.</p>

<h3>
  
  
  My solution
</h3>

<p>This one appear to be quick and easy. Take the input and using the <a href="https://docs.python.org/3.8/library/json.html">json</a> module (<a href="https://metacpan.org/pod/JSON">JSON</a> in Perl) turn it into an array of arrays. Then sum up the lowest number in each row, and display the result.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py "[ [1], [5,3], [2,3,4], [7,1,0,2], [6,4,5,2,8] ]"
8

$ ./ch-1.py "[ [5], [2,3], [4,1,5], [0,1,2,3], [7,2,4,1,9] ]"
9
</code></pre>

</div>



<h2>
  
  
  TASK #2 › Rectangle Area
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given coordinates bottom-left and top-right corner of two rectangles in a 2D plane.</p>

<p>Write a script to find the total area covered by the two rectangles.</p>

<h3>
  
  
  My solution
</h3>

<p>Originally I thought this challenge was impossible, as two intersecting rectangles could have any shape intersecting it. But then realized from the examples that we were only talking about rectangles that aren't tilted.</p>

<p>For this task, I create a class (package in Perl) to represent a rectangle. It makes sure that <code>x1</code> and <code>y1</code> represents the bottom left and <code>x2</code> and <code>y2</code> represents the top right. It also has an <code>area</code> method that returns the area of the rectangle.</p>

<p>With that part done, the rest of the code works like this:</p>

<ol>
<li>Take the first eight things that look like an integer from the command line.</li>
<li>Create <code>rect1</code> with the first four numbers.</li>
<li>Create <code>rect2</code> with the next four numbers.</li>
<li>Set <code>area</code> to be the area of the two rectangles, ignoring any overlap.</li>
<li>Calculate the overlap. The bottom left will be the maximum of <code>x1</code> and <code>y1</code> of the two rectangles. The top right will be the minimum of <code>x2</code> and <code>y2</code>.</li>
<li>If there is an overlap (<code>x1 &lt; x2</code> and <code>y1 &lt; y2</code>), create another rectangle object and subtract its area from step 4.</li>
<li>Print the number.</li>
</ol>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py "(-1,0), (2,2) (0,-1), (4,4)"
22

$ ./ch-2.py "(-3,-1), (1,3) (-1,-3), (2,2)"
25
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/simongreennet/triangles-and-rectangles-45p8</id>
    <published>2022-02-19T10:59:57Z</published>
    <updated>2022-02-19T10:59:57Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>RakuAST Grant 2022-01 update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/2022-02-raku-ast-grant"/>
  <id>tag:news.perlfoundation.org,2022-02-16:/post/2022-02-raku-ast-grant</id>
  <published>2022-02-16T12:32:39</published>
  <updated>2022-02-16T12:32:39</updated>
  <summary>
  <![CDATA[
     After a bit of a pause, Jonathan Worthington has continued his work on the RakuAST grant. Find his progress report below. In addion, you might want to check out this really cool post about embedding BASIC in Raku based on the RakuAST branch. Things have moved slowly on the RakuAST work of late, between me needing more of a breather that I imagined after the new dispatch mechanism work, along 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>After a bit of a pause, Jonathan Worthington has continued his work on the RakuAST grant. Find his progress report below.</p>

<p>In addion, you might want to check out this <a href="https://www.reddit.com/r/rakulang/comments/siypcz/raku_is_going_basic/">really cool post about embedding BASIC in Raku based on the RakuAST branch</a>.</p>

<hr />

<p>Things have moved slowly on the RakuAST work of late, between me needing more of a breather that I imagined after the new dispatch mechanism work, along with a demanding work assignment. In January, I managed to get a few small bits of progress, however:</p>

<ul>
<li>Compile literal radix numbers; these do not get a node type, but just become a <code>RakuAST::IntLiteral</code> or <code>RakuAST::RatLiteral</code>, since they are just another syntax for writing those</li>
<li>Add RakuAST nodes for the non-literal forms of radix numbers</li>
<li>More lazily check for undeclared variables in the RakuAST-based compiler, such that we don't give bogus errors in string interpolations</li>
<li>Align the compile-time and runtime semantics of quotewords (the current compiler uses different code-paths for them, and using a single one showed up a discrepancy)</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>5 cool Perl/Raku or Programming links</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/5-cool-perlraku-or-programming-links-55oh" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h4>
  
  
  1. <a href="https://youtu.be/FQXjLG0DjPo">Nice testimonial about Perl</a>
</h4>

<h4>
  
  
  2. <a href="https://benhoyt.com/writings/go-version-performance/">Go perf from version 1.2 to 1.18</a>
</h4>

<h4>
  
  
  3. <a href="https://blog.yboulkaid.com/2022/01/10/ode-to-ruby.html">An ode to ruby</a>
</h4>

<h4>
  
  
  4. <a href="https://hpi.de/fileadmin/user_upload/fachgebiete/naumann/projekte/RDBMSGenealogy/RDBMS_Genealogy_V6.pdf">RDBMS genealogy</a>
</h4>

<h4>
  
  
  5. <a href="http://pragmaticperl.com/interviews-book/pragmaticperl-interviews-a4.pdf">Pragmatic Perl interviews</a>
</h4>

<p>I wish you a pleasant reading! 😁</p>

</div>
    </content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/thibaultduponchelle/5-cool-perlraku-or-programming-links-55oh</id>
    <published>2022-02-16T10:43:37Z</published>
    <updated>2022-02-16T10:43:37Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="mysql"/>
    <category term="go"/>
  </entry>
  <entry>
    <title>#551 - Nothing to do with Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/551.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Two weeks ago I wrote about Wordle and that it has 'Nothing to do with Perl'. Within a few hours Saif Ahmed proved me wrong and <a href="https://www.reddit.com/r/perl/comments/siuqy9/nothing_to_do_with_perl/">posted</a> an implementation of Wordle in Perl. That's the spirit!</p>
<p>On a totally different topic, but still nothing to do with Perl: I just saw someone I know from the Perl community posting yet another disgusting accusation against Israel. As people more clever than me said: 'In the Middle Ages, Jews were accused of killing Christ. In the nineteenth and early twentieth century they were accused of ruining the nations where they lived. Today they are accused of apartheid, genocide, and having concentration camps'. Some people always find ways to blame the Jews for the crimes that are considered the worst by the contemporary civilization. Why am I writing about this, you ask? Because it hurts me a lot. You can't do much about it, but I hope that whenever you hear or see something horrific thing that Israel is accused of, you will double and triple-check it before you accept it as truth, 'like' it, or 'share' it. I hope you'll remember that an awful lot of misinformation is spread by people. Both by people who have an agenda against Jews and people who fall for true-looking lies.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/551.html</id>
    <published>2022-02-14T10:00:00Z</published>
    <updated>2022-02-14T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Outreachy participation - looking for mentors</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy-2022"/>
  <id>tag:news.perlfoundation.org,2022-02-13:/post/outreachy-2022</id>
  <published>2022-02-13T13:24:02</published>
  <updated>2022-02-13T13:24:02</updated>
  <summary>
  <![CDATA[
     Last year The Perl Foundation participated in Outreachy May to August internships and it was successfully completed. We are looking to participate again this year. At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the Mentor description and contact me at makoto@perlfoundation.org. Note that mentors are expected to spend 5-10 hours per 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Last year The Perl Foundation participated in <a href="https://www.outreachy.org/">Outreachy</a> May to August internships and <a href="https://news.perlfoundation.org/post/outreachy2021-complete">it was successfully completed</a>. We are looking to participate again this year.</p>

<p>At this stage we are looking for mentors and project ideas from the Perl and Raku community. If you are interested in becoming a mentor, please read the <a href="https://www.outreachy.org/mentor/#mentor">Mentor description</a> and contact me at makoto@perlfoundation.org. Note that mentors are expected to spend 5-10 hours per week during the program period.</p>

<p>We also have a Perl/Raku Outreachy discussion forum at <a href="https://groups.google.com/forum/#!forum/perl-foundation-outreach">Google Groups</a>.</p>

<p>Outreachy, formerly The Outreach Program for Women, was started by the GNOME Foundation in 2006 to encourage women to participate in the GNOME project. Since inception the project has grown to include many Free and Open Source organisations, including The Perl Foundation, and now the program has been rebranded and extended to encourage the participation of other underrepresented groups.</p>

<p>Outreachy explicitly invites applicants from around the world who are women (cis and trans), trans men, and genderqueer people. Additionally, they explicitly invite residents and nationals of the United States of any gender who are Black/African American, Hispanic/Latino, American Indian, Alaska Native, Native Hawaiian, or Pacific Islander. Anyone who faces systemic bias or discrimination in the technology industry of their country is invited to apply.  </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Dancer2: Testing Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-13T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world-testing"/>  <id>https://perlmaven.com/dancer2-hello-world-testing</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-199753803360436326</id>
    <published>2022-02-12T22:24:00.000+01:00</published>
    <updated>2022-02-12T22:24:32.675+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxix) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.027&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 0.025 was 6 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Daemon-6.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Daemon&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple http server class &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.13&lt;/strong&gt; on 2022-02-09&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 6.12 was 1 year, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OAuth2-2.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OAuth2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Auth against OAuth2 APIs including OpenID Connect &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.02&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was 3 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.074&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.072 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-4.019' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.019&lt;/strong&gt; on 2022-02-07&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 4.018 was 1 year, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9503' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9503&lt;/strong&gt; on 2022-02-08&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9501 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/199753803360436326/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxix-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/199753803360436326"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/199753803360436326"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxix-8-great-cpan-modules-released.html" title="(ccclxxix) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>100 Languages Speedrun: Episode 87: Sidef</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-87-sidef-164d" type="text/html"/>
    <content type="html">&lt;p&gt;Sidef is a prototype programming language, describing itself as inspired by Ruby, Raku, and Julia.&lt;/p&gt;

&lt;h3&gt;
  
  
  Installation on OSX
&lt;/h3&gt;

&lt;p&gt;It's not that easy to run Sidef. It runs on Perl 5 platform and you can install it through CPAN, but you'll run into serious problems.&lt;/p&gt;

&lt;p&gt;Perl version bundled with OSX is not really recommended, so I used brew version. Unfortunately if we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install perl
$ cpan Sidef
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will install &lt;code&gt;sidef&lt;/code&gt; in &lt;code&gt;~/.cpan/build/Sidef-3.99-0/bin/sidef&lt;/code&gt;, but it's hardcoded to use system Perl.&lt;/p&gt;

&lt;p&gt;So I needed two additional steps. Symlink &lt;code&gt;~/.cpan/build/Sidef-3.99-0/bin/sidef&lt;/code&gt; to some place in &lt;code&gt;$PATH&lt;/code&gt; like &lt;code&gt;ln -s ~/.cpan/build/Sidef-3.99-0/bin/sidef ~/bin/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And edit &lt;code&gt;sidef&lt;/code&gt; program to change its first line from &lt;code&gt;#!/usr/bin/perl&lt;/code&gt; to &lt;code&gt;#!/usr/bin/env perl&lt;/code&gt; so it will use the proper version, not the outdated one from OSX.&lt;/p&gt;

&lt;p&gt;After all these steps, we're ready to go.&lt;/p&gt;

&lt;p&gt;This is definitely something Sidef should just handle better. Oh and there's no VSCode syntax highlighting for Sidef. Often even very rarely used language have some.&lt;/p&gt;

&lt;h3&gt;
  
  
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;Hello, World is completely unsurprising. No ugly semicolons here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

say "Hello, World!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.sf
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;Sidef indeed looks like something between Ruby, Raku, and Julia.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

(1..100).each { |n|
  if (n % 15 == 0) {
    say "FizzBuzz"
  } elsif (n % 5 == 0) {
    say "Buzz"
  } elsif (n % 3 == 0) {
    say "Fizz"
  } else {
    say n
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;range &lt;code&gt;1..100&lt;/code&gt; goes from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;there are no &lt;code&gt;...&lt;/code&gt; ranges&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{|args| ...}&lt;/code&gt; blocks look like Ruby, but they're not used quite in the same way&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt;  &lt;code&gt;elsif&lt;/code&gt; &lt;code&gt;else&lt;/code&gt; requires &lt;code&gt;()&lt;/code&gt;s and &lt;code&gt;{}&lt;/code&gt;s&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Blocks
&lt;/h3&gt;

&lt;p&gt;Ruby blocks have special place in the language, and block argument is a separate thing from normal arguments. Not so in Sidef.&lt;/p&gt;

&lt;p&gt;Sidef has very high level of syntax flexibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

func twice(f) {
  say "Running it twice:"
  f()
  f()
}

var hi = { say "Hi!" }
twice(hi)
twice({ say "Hello!" })
twice { say "This does not work!" }

say ""
say "Iteration:"
{ |i| say "Block got: #{i}" }.each(10..12)
{ |i| say "Block got: #{i}" } &amp;lt;&amp;lt; 13..14
for 15..16 { |i| say "Block got: #{i}" }
(17..18).each { |i| say "Block got: #{i}" }
{ |i| say "Block got: #{i+19}" } * 2
2.times { |i| say "Block got: #{i+21}" }

say ""
say "Single argument:"
60 |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; :inc |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; {|i| i + 2} |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; {_+3} |&amp;gt; { |i| say "Block got: #{i}" }
60 |&amp;gt; (:add, 4) |&amp;gt; { |i| say "Block got: #{i}" }
{ |i| say "Block got: #{i}" }(69)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./blocks.sf
Running it twice:
Hi!
Hi!
Running it twice:
Hello!
Hello!

Iteration:
Block got: 10
Block got: 11
Block got: 12
Block got: 13
Block got: 14
Block got: 15
Block got: 16
Block got: 17
Block got: 18
Block got: 19
Block got: 20
Block got: 21
Block got: 22

Single argument:
Block got: 60
Block got: 61
Block got: 62
Block got: 63
Block got: 64
Block got: 69
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything here works except for Ruby-style &lt;code&gt;twice { say "This does not work!" }&lt;/code&gt; which does literally nothing, and I'm not sure why.&lt;/p&gt;

&lt;p&gt;There are some debugging tools like &lt;code&gt;-c compile the code into a Perl program&lt;/code&gt; and &lt;code&gt;-D dump the syntax tree of a program&lt;/code&gt;, but the result is not really human readable.&lt;/p&gt;

&lt;p&gt;I thought &lt;code&gt;-k keep track of potential unsafe parser interpretations&lt;/code&gt; might say something about it, but that also doesn't say anything.&lt;/p&gt;

&lt;p&gt;Having high degree of syntax flexibility is not that important for normal programming, but it's great for DSLs as it makes it easier for DSLs to pick something that works for them.&lt;/p&gt;

&lt;p&gt;Especially the &lt;code&gt;|&amp;gt;&lt;/code&gt; code is very cute.&lt;/p&gt;

&lt;h3&gt;
  
  
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;Sidef supports &lt;code&gt;is cached&lt;/code&gt; for memoization for free, which is a common enough use case that I don't know why more languages don't do this. There are also ways to clear the cache.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

func fib(n) is cached {
  return 1 if (n &amp;lt;= 2)
  fib(n - 1) + fib(n - 2)
}

(1..100).each {|n|
  say "fib(#{n}) = #{fib(n)}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib.sf
fib(1) = 1
fib(2) = 1
fib(3) = 2
...
fib(98) = 135301852344706746049
fib(99) = 218922995834555169026
fib(100) = 354224848179261915075
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Operator Precedence
&lt;/h3&gt;

&lt;p&gt;Sidef tries to be too cute with precedence rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

say(2+3*4+5)
say(2 + 3 * 4 + 5)
say(2 + 3*4 + 5)
say(2+3 * 4+5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prints 4 different results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./math.sf
29
25
19
45
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sidef just doesn't have operator precedence, and instead tries to use spacing to determine what happens, in some completely insane way.&lt;/p&gt;

&lt;p&gt;Not following standard operator precedence is the worst idea. Smalltalk tried that, and it killed the language. Every Smalltalk successor had to do all the painful things to unwind this stupid idea. And Smalltalk at least had simple consistent rules - operators always applies left to right. Sidef does something insane:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;without spaces, operators apply right to left (&lt;code&gt;2+3*4+5&lt;/code&gt; is &lt;code&gt;2+(3*(4+5))&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;with spaces, operators apply left to right (&lt;code&gt;2 + 3 * 4 + 5&lt;/code&gt; is &lt;code&gt;((2+3)*4)+5&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;with some spaces, operators apply left to right when there are spaces, and have extra parentheses in un-spaced group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This disqualifies the language.&lt;/p&gt;

&lt;h3&gt;
  
  
  Wordle
&lt;/h3&gt;

&lt;p&gt;Here's a Wordle game in Sidef:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env sidef

var words = File.new("wordle-answers-alphabetical.txt").read.split
var word = words.rand
var guess = ""

while (guess != word) {
  print "Guess: "
  guess = STDIN.readline
  if (guess.size != 5) {
    say "Only 5 letter words allowed"
    next
  }
  {|i|
    if (word[i] == guess[i]) {
      print "🟩"
    } elsif (word.include(guess[i])) {
      print "🟨"
    } else {
      print "🟥"
    }
  } * 5
  print "\n"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It didn't go too bad:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./wordle.sf
Guess: trial
🟥🟥🟥🟨🟥
Guess: maybe
🟥🟨🟥🟥🟩
Guess: snake
🟨🟥🟩🟥🟩
Guess: chase
🟥🟩🟩🟩🟩
Guess: phase
🟩🟩🟩🟩🟩
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Should you use Sidef?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;I support fun experiments, but Sidef has the absolute worst way of doing something as simple as adding numbers, making it pretty much unusable for anything.&lt;/p&gt;

&lt;p&gt;An even bigger problem is what when you write some code, Sidef decides what it means, and half the time it will decide that you meant something else than you did. There's no error messages, no documentation, no syntax debugging tools, the code will just do whatever it feels like. Sometimes code does something else. Very often the code just doesn't do anything, and that's a lot more baffling.&lt;/p&gt;

&lt;p&gt;I think to make Sidef usable for even casual play it would need at least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fix operator precedence&lt;/li&gt;
&lt;li&gt;have way better error messages&lt;/li&gt;
&lt;li&gt;have some kind of "print how it parsed" option, that adds a lot of &lt;code&gt;()&lt;/code&gt;s and such to tell you what the hell Sidef thinks you just did&lt;/li&gt;
&lt;li&gt;working OSX package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these issues fixed, maybe Sidef could become something I could recommend playing with for a weekend or two. In its current state, just no.&lt;/p&gt;

&lt;h3&gt;
  
  
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-87-sidef"&gt;Code for the Sidef episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-87-sidef-164d</id>
    <published>2022-02-12T14:14:55Z</published>
    <updated>2022-02-12T14:14:55Z</updated>
    <category term="sidef"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>100 Languages Speedrun: Episode 84: Lingua Romana Perligata</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-84-lingua-romana-perligata-276l" type="text/html"/>
    <content type="html">&lt;p&gt;Lingua Romana Perligata is basically Perl in Latin.&lt;/p&gt;

&lt;p&gt;You think Perl has too much punctuation? It's all gone. Instead you'll need to deal with word endings.&lt;/p&gt;

&lt;p&gt;To enjoy Lingua Romana Perligata you need to install it with &lt;code&gt;cpan Lingua::Romana::Perligata&lt;/code&gt; and put appropriate annotation at start of the program. It will run as normal Perl from that point on.&lt;/p&gt;

&lt;p&gt;Just a forewarning if you want to try - a lot of examples from documentation just plain don't work.&lt;/p&gt;

&lt;h3&gt;
  
  
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Lingua::Romana::&lt;/span&gt;&lt;span class="nv"&gt;Perligata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;adnota&lt;/span&gt; &lt;span class="nv"&gt;Salve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Mundus&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Lingua&lt;/span&gt; &lt;span class="nv"&gt;Romana&lt;/span&gt; &lt;span class="nv"&gt;Perligana&lt;/span&gt;

&lt;span class="nv"&gt;dictum&lt;/span&gt; &lt;span class="nv"&gt;sic&lt;/span&gt; &lt;span class="nv"&gt;Salve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Mundus&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;cis&lt;/span&gt; &lt;span class="nv"&gt;tum&lt;/span&gt; &lt;span class="nv"&gt;novumversum&lt;/span&gt; &lt;span class="nv"&gt;egresso&lt;/span&gt; &lt;span class="nv"&gt;scribe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.latin
Salve, Mundus!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'm using &lt;code&gt;brew&lt;/code&gt; version of Perl instead of the one bundled with OSX, so &lt;code&gt;#!/usr/bin/env perl&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;use Lingua::Romana::Perligata;&lt;/code&gt; starts the Lingua Romana Perligata mode - we can pass some flags here to enable grammar debugging, and we'll definitely need that at some point&lt;/li&gt;
&lt;li&gt;there's no punctuation except &lt;code&gt;.&lt;/code&gt; at end of sentences&lt;/li&gt;
&lt;li&gt;comments start with &lt;code&gt;adnota&lt;/code&gt; and go until end of the line&lt;/li&gt;
&lt;li&gt;there's no quotes, there are a few other ways to create strings instead; documentation suggests &lt;code&gt;X inquementum&lt;/code&gt; but that seems to work very unreliably depending on what's &lt;code&gt;X&lt;/code&gt; exactly, which is one of many bugs in the language&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dictum sic ... cis&lt;/code&gt; seems to work a lot better for creating quoted strings&lt;/li&gt;
&lt;li&gt;there's no string interpolation, we'll need to concatenate&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;egresso scribe&lt;/code&gt; means "write to standard output"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tum&lt;/code&gt; means "and then"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;novumversum&lt;/code&gt; means "newline"&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;dictum sic Salve, Mundus! cis tum novumversum egresso scribe&lt;/code&gt; means "write to standard output the string &lt;code&gt;Salve, Mundus!&lt;/code&gt; and then a newline"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Loop
&lt;/h3&gt;

&lt;p&gt;Let's print numbers &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;. Sorry, I meant &lt;code&gt;I&lt;/code&gt; to &lt;code&gt;X&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meis listis unum tum decem conscribementa da.

per quisque in listis fac
  sic
    hoc comementum tum novumversum egresso scribe
  cis.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./loop.latin
I
II
III
IV
V
VI
VII
VIII
IX
X
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;meis listis&lt;/code&gt; is &lt;code&gt;my @list&lt;/code&gt; and declares a local plural variable - we'd say &lt;code&gt;meo varo&lt;/code&gt; for &lt;code&gt;my $var&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;da&lt;/code&gt; means "is"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unum tum decem conscribementa&lt;/code&gt; means &lt;code&gt;1..10&lt;/code&gt; - you can also use &lt;code&gt;I tum X conscribementa&lt;/code&gt; with Roman numerals&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;per quisque in listis fac&lt;/code&gt; means &lt;code&gt;for each(@list)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sic ... cis&lt;/code&gt; is a block of code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;egresso scribe&lt;/code&gt; means "write to standard output"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hoc&lt;/code&gt; is &lt;code&gt;$_&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;comementum&lt;/code&gt; (beautify) converts the number to Roman numeral form&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tum novumversum&lt;/code&gt; means "and then newline"&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;hoc comementum tum novumversum egresso scribe&lt;/code&gt; means "write to standard output &lt;code&gt;$_&lt;/code&gt; converted to Roman numeral and then a newline"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Greetings
&lt;/h3&gt;

&lt;p&gt;Let's greet a specific person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meo nomo vestibulo perlegementum da.

nomo morde.

dictum sic Salve, cis tum lacunam tum nomum tum novumversum egresso scribe.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./greetings.latin
Marcus
Salve, Marcus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;meo nomo ... da&lt;/code&gt; means &lt;code&gt;my $name = ...&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vestibulo&lt;/code&gt; (entrance) means &lt;code&gt;STDIN&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vestibulo perlegementum&lt;/code&gt; means "read line from STDIN"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  FizzBuzz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meis listis I tum C conscribementa da.

per quisque in listis fac
  sic
    fizzo hoc tum III recidementum da.
    buzzo hoc tum V recidementum da.

    si non fizzum fac sic Fizz egresso scribe cis.

    si non buzzum fac sic Buzz egresso scribe cis.

    si fizzum atque buzzum fac sic hoc comementum egresso scribe cis.

    novumversum egresso scribe.
  cis.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does the FizzBuzz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./fizzbuzz.latin
I
II
Fizz
IV
Buzz
Fizz
VII
VIII
Fizz
Buzz
XI
Fizz
XIII
XIV
FizzBuzz
XVI
XVII
Fizz
XIX
Buzz
...
Fizz
XCVII
XCVIII
Fizz
Buzz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;meis listis I tum C conscribementa da&lt;/code&gt; - &lt;code&gt;my @list = (1..100)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;per quisque in listis fac sic ... cis&lt;/code&gt; - &lt;code&gt;for each (@list) { ... }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;recidementum&lt;/code&gt; means "modulo"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fizzo hoc tum III recidementum da&lt;/code&gt; - &lt;code&gt;$fizz = $_ % 3&lt;/code&gt; (these are maybe not the best names, as Fizz should be printed if &lt;code&gt;$fizz&lt;/code&gt; is zero, that is false; and same for &lt;code&gt;$buzz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;buzzo hoc tum V recidementum da&lt;/code&gt; - &lt;code&gt;$buzz = $_ % 5&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si non fizzum fac sic Fizz egresso scribe cis&lt;/code&gt; - &lt;code&gt;if (not $fizz) { print "Fizz" }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si non buzzum fac sic Buzz egresso scribe cis&lt;/code&gt; - &lt;code&gt;if (not $buzz) { print "Buzz" }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;atque&lt;/code&gt; means &lt;code&gt;and&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si fizzum atque buzzum fac sic hoc comementum egresso scribe cis&lt;/code&gt; - &lt;code&gt;if ($fizz and $buzz) { print Roman($_) }&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if you remove &lt;code&gt;comementum&lt;/code&gt; it will print ASCII numbers instead of Roman numerals, so you'll get exact match for the traditional FizzBuzz&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;novumversum egresso scribe.&lt;/code&gt; - print a newline&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Fibbonacci
&lt;/h3&gt;

&lt;p&gt;All right, one more thing, let's define Fibbonacci function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fibonere
sic
  meis numero haec da.

  si numerum tum tres praestantiam fac sic redde unum cis.

  meo xo numerum tum I demementum fibonementum da.
  meo yo numerum tum II demementum fibonementum da.

  redde xum tum yum addementum.
cis.

meis listis unum tum XX conscribementa da.

per quisque in listis fac
  sic
    meo fibo hoc fibonementum da.
    fibum egresso scribe.
    novumversum egresso scribe.
  cis.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./fib.latin
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we define the function with &lt;code&gt;fibonere sic ... cis&lt;/code&gt; - it knows that's function definition by the ending&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;meis numero haec da&lt;/code&gt; means &lt;code&gt;my ($number) = @_&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the far more grammatical &lt;code&gt;meo numero haec da&lt;/code&gt; would translate to &lt;code&gt;my $number = @_&lt;/code&gt; and that means "number of arguments" not "first argument", not like anything here is proper Latin anyway&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redde&lt;/code&gt; means &lt;code&gt;return&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;praestantiam&lt;/code&gt; means less than&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;si numerum tum tres praestantiam fac sic redde unum cis&lt;/code&gt; means "if $number is less than 3, return 1"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;meo xo numerum tum I demementum fibonementum da&lt;/code&gt; means &lt;code&gt;$x = fib($number - 1)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;meo yo numerum tum II demementum fibonementum da&lt;/code&gt; means &lt;code&gt;$y = fib($number - 2)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redde xum tum yum addementum&lt;/code&gt; means &lt;code&gt;return $x + $y&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  
  
  Should you use Lingua Romana Perligata?
&lt;/h3&gt;

&lt;p&gt;It's a joke language obviously, but it's not a very well executed joke. Rules are unclear (even if you know some Latin), there are too few examples, many of the examples in documentation don't even work, or break if you do a trivial change. If you use the wrong ending (or one that's correct in real Latin), you get terrible error message, or the program just happily doing something else like treating it as uninitialized variable. I don't find it particularly fun.&lt;/p&gt;

&lt;p&gt;I wanted to try it out due to its notoriety in the Perl world, but I wouldn't really recommend it. I had a lot more fun with languages like Asciidots or Whenever.&lt;/p&gt;

&lt;p&gt;Another thing - this might look like Latin to someone who doesn't know any Latin, but it's mostly gibberish not following either proper lexicon or proper grammar. It's impressive that it got that far to Latin-like, but it's still not all that close.&lt;/p&gt;

&lt;h3&gt;
  
  
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-84-lingua-romana-perligata"&gt;Code for the Lingua Romana Perligata episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>
      </name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-84-lingua-romana-perligata-276l</id>
    <published>2022-02-10T19:45:23Z</published>
    <updated>2022-02-10T19:45:23Z</updated>
    <category term="perl"/>
    <category term="latin"/>
  </entry>
  <entry>
  <title>Grants: January 2022 Votes</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grants_january_2022_votes"/>
  <id>tag:news.perlfoundation.org,2022-02-10:/post/grants_january_2022_votes</id>
  <published>2022-02-10T17:09:16</published>
  <updated>2022-02-10T17:09:16</updated>
  <summary>
  <![CDATA[
     The Grants Committee has concluded voting on the January 2022 round. One grant request was submitted: Grant Proposal: Optree Optimsiations for Performance Gains VOTING RESULTS: Approved. 7 YES votes 0 NO votes, 0 ABSTAIN We accept proposals throughout the year; our next round of review will begin in March. You can submit proposals at any time. If you want to help with funding and increase our budget, please visit our 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee has concluded voting on the January 2022 round. One grant request was submitted:</p>

<h4><a href="https://news.perlfoundation.org/post/grant_proposal_optree_optimisation_paul_evans">Grant Proposal: Optree Optimsiations for Performance Gains</a> (USD 3,980)</h4>

<p>VOTING RESULTS: Approved. 7 YES votes (32 points), 0 NO votes, 0 ABSTAIN</p>

<p>We accept proposals throughout the year; our next round of review will begin in March. You can <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">submit proposals</a> at any time.</p>

<p>If you want to help with funding and increase our budget, please visit our <a href="https://www.perlfoundation.org/make-a-donation.html">donations page</a>. We sincerely appreciate all the donors which make the grant program possible. If you donate, please take advantage of your employers' matching donation program.</p>

<p>As always, thanks to our <a href="https://www.perlfoundation.org/our-donors.html">donors</a>, both large and small, who support this program to give back to the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#550 - Perl &amp; Unicode</title>
    <link rel="alternate" href="https://perlweekly.com/archive/550.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Are you a Unicode fan?</p>
<p>Personally, I am not. The reason is that I still struggle to get my head around it. During my early days of learning, I never got the opportunity to work with Unicode. So far, I have never had to deal extensively with Unicode characters. There is so much information available on the internet. I remember, a long time ago, I was dealing with the well-known warning <strong>Wide character in print</strong>. After a quick search, I came across this <a href="https://stackoverflow.com/questions/15210532/use-of-use-utf8-gives-me-wide-character-in-print">explanation</a> by <strong>Dave Cross</strong>. I have kept it bookmark for future reference. I know am repeating myself here as I remember talking about in an <a href="https://perlweekly.com/archive/498.html">earlier weekly newsletter</a>. It is worth sharing with readers again and again.</p>
<p>However, there is another reason why I am talking about it today. Let me share gem of an <a href="https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7">article</a> by <strong>David Cantrell</strong>. The article gives us very deeps knowledge about Unicode, specially for a Perl developer. It has cleared most of my doubts, so a big thanks to <strong>David</strong> for such a great article. It also introduced me to a new word, <strong>Mojibake</strong>. A friend of mine on Facebook, suggested a CPAN module, <a href="https://metacpan.org/pod/Test::Mojibake">Test::Mojibake</a> which is very handy. I wish there was dedicated book on Perl and Unicode. Having said that, I found this <a href="https://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8">Wikibook</a> on the subject, you may want to explore it.</p>
<p>I came across a <a href="https://www.youtube.com/watch?v=MijmeoH9LT4">YouTube video</a> that explains Unicode in terms that any lay-person can easily understand. I loved it the way it is explained in a casual way. The guy in the video makes it so simple.</p>
<p>Let's talk about regexes in Perl.</p>
<p>I am sure you have used regexes in Perl at some point in your career. A few days ago, I found out a clever use of regexes shared by Abigail. The use of //g in list context. It completely blew me away. Later someone pointed me to the official Perl <a href="https://perldoc.perl.org/perlre#Repeated-Patterns-Matching-a-Zero-length-Substring">documentation</a> talking about it. If you are curious to know more about it then I would suggest you take a look at his <a href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-150-1.html">blog post</a>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/550.html</id>
    <published>2022-02-07T10:00:00Z</published>
    <updated>2022-02-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-07T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world"/>  <id>https://perlmaven.com/dancer2-hello-world</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Fibonacci Words That Yearn to Be Squarefree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/02/06#pwc150" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two strings having the same number of digits, $a and $b. Write a script to 
generate Fibonacci Words by concatenation of the previous two strings. Print the 51st &lt;br /&gt;
of the first term having at least 51 digits.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub _fibonacci_words_51{
    my($accumulated) = @_;
    my $i = @{$accumulated} - 1;
    my $next = $accumulated-&gt;[$i - 1] . $accumulated-&gt;[$i];
    return substr($next, 51 - 1, 1) if length($next) &gt;= 51;
    push @{$accumulated}, $next;
    _fibonacci_words_51($accumulated);
}

sub fibonacci_words{
    my($u, $v) = @_;
    return _fibonacci_words_51([$u, $v]);
}

MAIN:{
    print fibonacci_words(q[1234], q[5678]) . "\n";    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Fibonacci sequences are often an introductory example of recursion. This solution keeps 
with that recursive tradition. &lt;code&gt;sub _fibonacci_words_51&lt;/code&gt; takes a single argument, an array 
reference which stores the sequence terms. At each recursive step the next term is 
computed and checked for the terminating condition.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate all square-free integers &amp;lt;= 500.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant LIMIT =&gt; 500;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub square_free{
    my @square_free;
    for my $x (1 .. LIMIT){
        my @factors = prime_factor($x);
        my @a;
        map {$a[$_]++} @factors;
        @a = grep {$_ &amp;&amp; $_ &gt; 1} @a;
        push @square_free, $x if !@a;
    }
    return @square_free;
}

main:{
    print join(", ", square_free()) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 46, 47, 51, 53, 55, 57, 58, 59, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 77, 78, 79, 82, 83, 85, 86, 87, 89, 91, 93, 94, 95, 97, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 122, 123, 127, 129, 130, 131, 133, 134, 137, 138, 139, 141, 142, 143, 145, 146, 149, 151, 154, 155, 157, 158, 159, 161, 163, 165, 166, 167, 170, 173, 174, 177, 178, 179, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 205, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 241, 246, 247, 249, 251, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 267, 269, 271, 273, 274, 277, 278, 281, 282, 283, 285, 286, 287, 290, 291, 293, 295, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 313, 314, 317, 318, 319, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 337, 339, 341, 345, 346, 347, 349, 353, 354, 355, 357, 358, 359, 362, 365, 366, 367, 370, 371, 373, 374, 377, 379, 381, 382, 383, 385, 386, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 409, 410, 411, 413, 415, 417, 418, 419, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 449, 451, 453, 454, 455, 457, 458, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 478, 479, 481, 482, 483, 485, 487, 489, 491, 493, 494, 497, 498, 499
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution makes use of &lt;code&gt;sub prime_factor&lt;/code&gt; which frequently comes in handy in these
challenges. Beyond getting the prime factors the only other requirement is to determine
that none are repeated. This is done by a counting array, created with a &lt;code&gt;map&lt;/code&gt; and then
checked with &lt;code&gt;grep&lt;/code&gt; for any entries greater than 1. If such an entry exists then we know
that there was a duplicate prime factor and that number is not square free.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/"&gt;Challenge 150&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Squarefree.html"&gt;Squarefree Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc150</id>
    <published>2022-02-06T17:00:00-05:00</published>
    <updated>2022-02-06T17:00:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jan 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/02/04/list-of-new-cpan-distributions-jan-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Interop-Ruby">Acme-CPANModules-Interop-Ruby</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules/applications that help interoperate with the Ruby world</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-KitchenSinks">Acme-CPANModules-KitchenSinks</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Kitchen sink libraries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Signature-Arity">Acme-Signature-Arity</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.003</td>
<td>find out how a piece of code expects to be called</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-Graphs-TransitiveClosure-Tiny">Algorithm-Graphs-TransitiveClosure-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>1.00</td>
<td>Calculate the transitive closure.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Amazon-SecretsManager">Amazon-SecretsManager</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>AWS Secrets Manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DesktopOpenUtils">App-DesktopOpenUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Utilities related to Desktop::Open</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-jq">App-Greple-jq</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.02</td>
<td>0.05</td>
<td>greple module for jq frontend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PerlReleaseUtils">App-PerlReleaseUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Collection of utilities related to Perl distribution releases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sizecheck">App-sizecheck</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.061</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-wsgetmail">App-wsgetmail</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>0.05</td>
<td>0.05</td>
<td>Fetch mail from the cloud using webservices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-BagIt-Fast">Archive-BagIt-Fast</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.090</td>
<td>0.090</td>
<td>A module to use IO::AIO to get better performance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-BagIt-Plugin-SHA256">Archive-BagIt-Plugin-SHA256</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>0.003</td>
<td>The role to load the sha256 plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Audit-Log">Audit-Log</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>0.001</td>
<td>0.003</td>
<td>auditd log parser with no external dependencies, using no perl features past 5.12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CBI-Wrapper">CBI-Wrapper</a></td>
<td><a href="https://metacpan.org/author/RESSAM">RESSAM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Handle the Italian CBI fixed length file format.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDS">CDS</a></td>
<td><a href="https://metacpan.org/author/LOCHMATT">LOCHMATT</a></td>
<td>0.22</td>
<td>0.24</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-CL">CWB-CL</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.33</td>
<td>v3.4.33</td>
<td>Perl interface to the low-level C API of the IMS Open Corpus Workbench</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-CQI">CWB-CQI</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.0.0</td>
<td>v3.0.0</td>
<td>launch private CQPserver on local machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-Web">CWB-Web</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.0</td>
<td>v3.4.1</td>
<td>A simple shared cache for CQP query results</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB">CWB</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.0</td>
<td>v3.4.0</td>
<td>Perl toolbox for the IMS Corpus Workbench</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Callable">Callable</a></td>
<td><a href="https://metacpan.org/author/ALTOMRU">ALTOMRU</a></td>
<td>0.01</td>
<td>0.02</td>
<td>make different things callable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Console-ProgressBar">Console-ProgressBar</a></td>
<td><a href="https://metacpan.org/author/OAUVERLOT">OAUVERLOT</a></td>
<td>1.01</td>
<td>1.01</td>
<td>A simple progress bar for Perl console applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Cipher-Vigenere">Crypt-Cipher-Vigenere</a></td>
<td><a href="https://metacpan.org/author/BOREKL">BOREKL</a></td>
<td>0.01</td>
<td>0.03</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Digest-Scrypt">Crypt-Digest-Scrypt</a></td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Scrypt key derivation function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-PK-ECC-Schnorr">Crypt-PK-ECC-Schnorr</a></td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Public key cryptography based on EC with Schnorr signatures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-CryptPassphrase">Dancer2-Plugin-CryptPassphrase</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Crupt::Passphrase plugin for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Gimei">Data-Gimei</a></td>
<td><a href="https://metacpan.org/author/YOUPONG">YOUPONG</a></td>
<td>v0.0.4</td>
<td>v0.0.4</td>
<td>a Perl port of Ruby's gimei.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PERLSRVDE">Dist-Zilla-PERLSRVDE</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>The plugin bundle we use at Perl-Services.de</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Data-Sah">Dist-Zilla-Plugin-Data-Sah</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.005</td>
<td>0.005</td>
<td>Plugin for building Data-Sah and Data-Sah-* distributions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Upload-OrePAN2">Dist-Zilla-Plugin-Upload-OrePAN2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.0001</td>
<td>0.0001</td>
<td>Dist::Zilla release plugin to inject into a local OrePAN2 repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-GEEKRUTH">Dist-Zilla-PluginBundle-Author-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0100</td>
<td>1.0200</td>
<td>Be like GeekRuthie when you build your dists</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-GEEKRUTH">Dist-Zilla-PluginBundle-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Be like GeekRuthie when you build your dists</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-GitLab">Dist-Zilla-PluginBundle-GitLab</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0</td>
<td>1.0002</td>
<td>Access GitLab functionality to maintain distros from Dist::Zilla</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Excel-ValueWriter-XLSX">Excel-ValueWriter-XLSX</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>0.1</td>
<td>0.2</td>
<td>generating data-only Excel workbooks in XLSX format, fast</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Form-Tiny-Plugin-Diva">Form-Tiny-Plugin-Diva</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Form::Diva integration for Form::Tiny</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Git-Critic">Git-Critic</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.1</td>
<td>0.4</td>
<td>Only run Perl::Critic on lines changed in the current branch</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Object">HTML-Object</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>HTML Parser, Modifier and Query Interface</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Koha-Contrib-ValueBuilder-RepeatableAutocomplete">Koha-Contrib-ValueBuilder-RepeatableAutocomplete</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>1.000</td>
<td>1.003</td>
<td>Repeatable autcomplete value-builder for Koha</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HEX">Lang-HEX</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HEX-Export">Lang-HEX-Export</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL">Lang-HL</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.03</td>
<td>5.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL-Export">Lang-HL-Export</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.16</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-ACL-Attachments">Mail-Exim-ACL-Attachments</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.001</td>
<td>Reject email attachments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-ACL-Geolocation">Mail-Exim-ACL-Geolocation</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.001</td>
<td>Map IP addresses to country codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Netdata">Mojo-Netdata</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>0.03</td>
<td><a href="https://netdata.cloud" rel="nofollow">https://netdata.cloud</a> plugin for Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Command-coverage">Mojolicious-Command-coverage</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Start you mojo app in coverage mode</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Geolocation-MMDB">Mojolicious-Plugin-Geolocation-MMDB</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Look up location information by IP address</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Connector">Net-Connector</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-DNS-Resolver-Unbound">Net-DNS-Resolver-Unbound</a></td>
<td><a href="https://metacpan.org/author/RWF">RWF</a></td>
<td>1.01</td>
<td>1.05</td>
<td>Unbound resolver base for Net::DNS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Fortinet-FortiManager">Net-Fortinet-FortiManager</a></td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>0.001000</td>
<td>0.002000</td>
<td>Fortinet FortiManager REST API client library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-SMPP-SSL">Net-SMPP-SSL</a></td>
<td><a href="https://metacpan.org/author/SSTUEHRM">SSTUEHRM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>SSL support for Net::SMTP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-mbedTLS">Net-mbedTLS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.01_01</td>
<td>mbedTLS in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-Util">Path-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000001</td>
<td>0.000002</td>
<td>Path functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-PreferredModules">Perl-Critic-Policy-PreferredModules</a></td>
<td><a href="https://metacpan.org/author/ATOOMIC">ATOOMIC</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Custom package recommendations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl5-Dist-Backcompat">Perl5-Dist-Backcompat</a></td>
<td><a href="https://metacpan.org/author/JKEENAN">JKEENAN</a></td>
<td>0.01</td>
<td>0.06</td>
<td>Will changes to dist/ build on older perls?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Auth-SSO-OIDC">Plack-Auth-SSO-OIDC</a></td>
<td><a href="https://metacpan.org/author/NJFRANCK">NJFRANCK</a></td>
<td>0.01</td>
<td>0.01</td>
<td>implementation of OpenID Connect for Plack::Auth::SSO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Podman">Podman</a></td>
<td><a href="https://metacpan.org/author/TSCHAEFER">TSCHAEFER</a></td>
<td>20220129.0</td>
<td>20220203.0</td>
<td>Library of bindings to use the RESTful API of Podman.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regex-Object">Regex-Object</a></td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1.00</td>
<td>1.24</td>
<td>Solves problems with global Regex variables side effects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Set-IntSpan-Util">Set-IntSpan-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to integer spans</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sodium-FFI">Sodium-FFI</a></td>
<td><a href="https://metacpan.org/author/CAPOEIRAB">CAPOEIRAB</a></td>
<td>0.001</td>
<td>0.001</td>
<td>FFI implementation of libsodium</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Speech-Recognition-Vosk">Speech-Recognition-Vosk</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>offline voice recognition using the Vosk toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Eertree">String-Eertree</a></td>
<td><a href="https://metacpan.org/author/CHOROBA">CHOROBA</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Build the palindromic tree aka Eertree for a string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-BeLike-GEEKRUTH">Task-BeLike-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.0001</td>
<td>1.0000</td>
<td>TIMTOWTDI, but this works for GeekRuthie</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Hyphen-PT">Text-Hyphen-PT</a></td>
<td><a href="https://metacpan.org/author/LEOLCA">LEOLCA</a></td>
<td>1.02</td>
<td>1.03</td>
<td>determine hyphenation positions in portuguese words</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Venus">Venus</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.03</td>
<td>OO Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/uSAC-MIME">uSAC-MIME</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1</td>
<td>v0.2</td>
<td>MIME Type database with concise lookups</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>65</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>45</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/RESSAM">RESSAM</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/TSCHAEFER">TSCHAEFER</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/YOUPONG">YOUPONG</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/JKEENAN">JKEENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/ATOOMIC">ATOOMIC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NJFRANCK">NJFRANCK</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/BOREKL">BOREKL</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/OAUVERLOT">OAUVERLOT</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RWF">RWF</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/LOCHMATT">LOCHMATT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ALTOMRU">ALTOMRU</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CHOROBA">CHOROBA</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LEOLCA">LEOLCA</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/SSTUEHRM">SSTUEHRM</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/CAPOEIRAB">CAPOEIRAB</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-Interop-Ruby PERLANCAR 0.001 0.001 Modules/applications that help interoperate with the Ruby world Acme-CPANModules-KitchenSinks PERLANCAR 0.001 0.001 Kitchen sink libraries Acme-Signature-Arity TEAM 0.001 0.003 find out how a piece of code expects to be called Algorithm-Graphs-TransitiveClosure-Tiny AAHAZRED 0.01 1.00 Calculate the transitive closure. Amazon-SecretsManager BIGFOOT v1.0.0 v1.0.0 AWS Secrets Manager App-DesktopOpenUtils … <a href="https://perlancar.wordpress.com/2022/02/04/list-of-new-cpan-distributions-jan-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jan 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1982</id>
    <published>2022-02-03T23:49:26Z</published>
    <updated>2022-02-03T23:49:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
