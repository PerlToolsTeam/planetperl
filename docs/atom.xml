<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-09-23T00:57:57Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Electron Adventures: Episode 60: Notebook Perl Engine</title>
    <link rel="alternate" href="https://dev.to/taw/electron-adventures-episode-60-notebook-perl-engine-10gi" type="text/html"/>
    <content type="html">&lt;p&gt;We did Ruby, we did Python, time for a classic language you probably aren't seeing much of these days - Perl.&lt;/p&gt;

&lt;p&gt;But this isn't just a Perl episode. As doing decent session isolation on Perl side would be quite difficult (and to be honest, even our Ruby/Python versions only did fairly limited isolation), we're flipping how things work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;previously we had one language server instance, and multiple sessions there&lt;/li&gt;
&lt;li&gt;now we'll create a new language server instance for every session.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-perllanguageserver-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;perl_language_server&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;eval_and_capture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;*STDOUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;*STDERR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="bp"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="bp"&gt;STDERR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="p"&gt;"",&lt;/span&gt; &lt;span class="s"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vg"&gt;$@&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;eval_and_capture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$body&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$result&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="nv"&gt;flush&lt;/span&gt; &lt;span class="bp"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was all surprisingly simple.&lt;/p&gt;

&lt;p&gt;Perl's &lt;code&gt;eval&lt;/code&gt; already catches exceptions by deafult, to the very intuitively named &lt;code&gt;$@&lt;/code&gt; variable, so we don't need to do any kind of &lt;code&gt;try/catch&lt;/code&gt;. It's actually not a bad default.&lt;/p&gt;

&lt;p&gt;If you do &lt;code&gt;local *STDOUT&lt;/code&gt; in a block, and reopen &lt;code&gt;STDOUT&lt;/code&gt;, Perl will automatically restore it when it exits the block. This &lt;code&gt;local&lt;/code&gt; trick works for a lot of things like variables, parts of variables, process &lt;code&gt;ENV&lt;/code&gt;, and so on, and it's one of the very powerful things in Perl that no other language even tried to copy.&lt;/p&gt;

&lt;p&gt;Opening to a reference to a scalar (&lt;code&gt;\$output&lt;/code&gt;) redirects output to that scalar. It's that &lt;code&gt;\&lt;/code&gt; character that makes it redirect to &lt;code&gt;$output&lt;/code&gt; instead of treating it as a file name.&lt;/p&gt;

&lt;p&gt;And like in other language servers, we need to &lt;code&gt;flush&lt;/code&gt; the output, so the buffering doesn't get it our way.&lt;/p&gt;

&lt;p&gt;The code doesn't do any session management - everything you do will be in its main scope.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srcpreloadjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/preload.js&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;child_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child_process&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lineReader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;promise-readline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;contextBridge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;languageServers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startLanguageServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child_process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./perl_language_server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pipe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pipe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inherit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lineReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;languageServers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;languageServers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;startLanguageServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stdout&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;languageServers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;contextBridge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exposeInMainWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;runCode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The necessary change is tiny. Instead of single &lt;code&gt;languageServer&lt;/code&gt; variable, it's now a dictionary of connections, keyed by session id.&lt;/p&gt;

&lt;p&gt;We definitely could add some logic for closing processes we no longer use, and error handling, but it's fine for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;I wrote the usual Fibonacci code, and then &lt;a href="https://codegolf.stackexchange.com/a/1876"&gt;searched the Internet for the most idiomatic Perl Hello World&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's the result if we press "Run All" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ILo3MyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41u2fkzkwkk578nz8po2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ILo3MyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41u2fkzkwkk578nz8po2.png" alt="Episode 60 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next episode we'll start a new project.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-60-notebook-perl-engine"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/electron-adventures-episode-60-notebook-perl-engine-10gi</id>
    <published>2021-09-22T14:56:27Z</published>
    <updated>2021-09-22T14:56:27Z</updated>
    <category term="javascript"/>
    <category term="react"/>
    <category term="electron"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>CPAN installation as a test, with GitHub workflow</title>
    <link rel="alternate" href="https://dev.to/gugod/cpan-installation-as-a-test-with-github-workflow-3gm6" type="text/html"/>
    <content type="html">&lt;p&gt;If I made a distribution Foo and uploaded it to CPAN, I'd expect that it is install-able via various CPAN clients such as &lt;code&gt;cpan&lt;/code&gt;, &lt;code&gt;cpanm&lt;/code&gt;, &lt;code&gt;cpm&lt;/code&gt;, that is, from a fresh perl installation, these commands should be successful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cpan Foo
cpanm Foo
cpm install -g Foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's a bit non-obvious is that this requires a chain of conventions to be satisfied in order to happen smoothly... distribution Foo needs to properly ship with build procedure / installer and &lt;code&gt;MEAT.json&lt;/code&gt;, in which all dependencies are correctly declared.&lt;/p&gt;

&lt;p&gt;But that is not enough, even if I correctly authored all the meta-data in distribution Foo, if there is even a single miss in any other dependencies in Foo's dependency tree, the installation would fail.&lt;/p&gt;

&lt;p&gt;For that reason, I thought it might be worth it to test the installation process during development, at least make a CI workflow that tries to install everything. The successful of such test would just be whether the installation is successfully finished or not. Conventionally the exit status (&lt;code&gt;$?&lt;/code&gt;) reflects that.&lt;/p&gt;

&lt;p&gt;Here's something I came up with. It is a GitHub workflow that first build a distribution, a &lt;code&gt;.tar.gz&lt;/code&gt; file, then try to install that file with &lt;code&gt;cpanm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Installation Test

on:
  push:
    branches:
      - fun

jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v2
      - name: Setup Perl environment
        uses: shogo82148/actions-setup-perl@v1
      - name: Install Authoring Dependencies
        run: cpanm -n App::ModuleBuildTiny &amp;amp;&amp;amp; cpanm -q -n --no-man-pages --installdeps .
      - name: Generate dist
        run: mbtiny dist
      - name: Display what is generated
        run: |-
          echo *.tar.gz
          tar tvzf *.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: dist-for-installation-test
          path: '*.tar.gz'
          retention-days: 1
  install:
    runs-on: 'ubuntu-latest'
    needs: build
    container:
      image: perl:5.34
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist-for-installation-test
      - name: Display the downloaded files
        run: ls -R
      - name: Install in a perl:5.34 container (--notest)
        run: cpanm --notest *.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a lot of instructions but what matters is the final one &lt;code&gt;cpanm --notest *.tar.gz&lt;/code&gt;. This would install whatever was built and all its dependencies, without running module tests`, and if even that failed, that means some meta data is missing and the distribution would not be install-able even if it is uploaded to CPAN.&lt;/p&gt;

&lt;p&gt;Of course that just &lt;code&gt;cpanm&lt;/code&gt;, I could also add &lt;code&gt;cpan&lt;/code&gt; and &lt;code&gt;cpm&lt;/code&gt; there to verify whether there is a difference between all these CPAN clients. Also, I could setup a matrix run so it runs on all perl versions.&lt;/p&gt;

&lt;p&gt;This workflow is currently used in &lt;a href="https://github.com/gugod/Perl-Critic-TooMuchCode"&gt;Perl-Critic-TooMuchCode&lt;/a&gt;, with a few runs already finished &lt;a href="https://github.com/gugod/Perl-Critic-TooMuchCode/actions/workflows/installation-test.yml"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The workflow contains two jobs, &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt;. &lt;code&gt;install&lt;/code&gt; needs &lt;code&gt;build&lt;/code&gt; so it is always executed after successful &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; job runs on the default &lt;code&gt;ubuntu-latest&lt;/code&gt; machine, but the &lt;code&gt;install&lt;/code&gt; job runs in a container instance with presumably a different version of perl, and also without a clone of current repo. With this setup I can simulate the installation process on a fresh machine.&lt;/p&gt;

&lt;p&gt;To share the distribution &lt;code&gt;.tar.gz&lt;/code&gt; file across different jobs, the only way I can fin is by uploading the file to the "artifact" storage -- basically an external storage. This probably cost me something if a lot of files are accumulated. I changed the &lt;code&gt;retention&lt;/code&gt; period to 1 day because I don't plan to download this anyway.&lt;/p&gt;

&lt;p&gt;On the other hand, it could be part of doing the actual CPAN release. Maybe with some modification the workflow would build a new version with new version number, and I would just have to download the artifact then re-upload to CPAN. This would save the setup of preparing authoring tools. It could be a useful scenario for teaching new developers to upload something to CPAN.&lt;/p&gt;

&lt;p&gt;The installation process also download a lot of stuffs from cpan.org and cost some bandwidth on the way. It's best not to do so on every commits or on a branch with frequent pushes. Definitely suitable pre-release though.&lt;/p&gt;

&lt;p&gt;Most likely, this idea of "Installation as a test" isn't new, and it is a bit convenient to have it checked in CI.&lt;/p&gt;




&lt;p&gt;Originally posted on &lt;a href="https://gugod.org/2021/09/en-cpan-installation-as-a-test-with-github-workflow/"&gt;gugod's blog -- CPAN installation as a test, with GitHub workflow&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Kang-min Liu</name>
    </author>
    <id>https://dev.to/gugod/cpan-installation-as-a-test-with-github-workflow-3gm6</id>
    <published>2021-09-22T00:48:05Z</published>
    <updated>2021-09-22T00:48:05Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="installation"/>
    <category term="testing"/>
  </entry>
  <entry>
    <title>Everyone’s a (Perl) critic, and you can be too!</title>
    <link rel="alternate" href="https://dev.to/mjgardner/everyone-s-a-perl-critic-and-you-can-be-too-11f4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The <a href="http://perlcritic.com/"><code>perlcritic</code></a> tool is often your first defense against “awkward, hard to read, error-prone, or unconventional constructs in your code,” per its <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#DESCRIPTION">description</a>. It’s part of a class of programs historically known as <a href="https://en.wikipedia.org/wiki/Lint_(software)">linters</a>, so-called because like a clothes dryer machine’s lint trap, they “detect small errors with big effects.” (Another such linter is <a href="http://perltidy.sourceforge.net/"><code>perltidy</code></a>, which I’ve <a href="https://phoenixtrap.com/tag/perltidy/">referenced</a> in the past.)</p>

<p>You can use <code>perlcritic</code> <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic">at the command line</a>, <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#EDITOR-INTEGRATION">integrated with your editor</a>, as a <a href="https://git-scm.com/docs/githooks#_pre_commit"><code>git</code> pre-commit hook</a>, or (my preference) as <a href="https://metacpan.org/pod/Test::Perl::Critic">part of your author tests</a>. It’s driven by <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#THE-POLICIES">policies</a>, individual modules that check your code against a particular recommendation, many of them from <a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/">Damian Conway’s <em>Perl Best Practices</em></a> (2005). Those policies, in turn, are enabled by <a href="https://metacpan.org/pod/PPI">PPI</a>, a library that transforms Perl code into documents that can be programmatically examined and manipulated much like the <a href="https://en.wikipedia.org/wiki/Document_Object_Model">Document Object Model (DOM)</a> is used to programmatically access web pages.</p>

<p><code>perlcritic</code> enables the following policies by default unless you <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#CONFIGURATION">customize its configuration</a> or install more. These are just the “gentle” (<a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#-severity-N">severity</a> level 5) policies, so consider them the bare minimum in detecting bad practices. The <a href="https://metacpan.org/dist/Perl-Critic/view/lib/Perl/Critic/PolicySummary.pod">full set of included policies</a> goes much deeper, ratcheting up the severity to “stern,” “harsh,” “cruel,” and “brutal.” They’re further organized according to <a href="https://metacpan.org/pod/Perl::Critic#POLICY-THEMES">themes</a> so that you might selectively review your code against issues like security, maintenance, complexity, and bug prevention.</p>

<ul>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitSleepViaSelect">BuiltinFunctions::ProhibitSleepViaSelect</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitStringyEval">BuiltinFunctions::ProhibitStringyEval</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireGlobFunction">BuiltinFunctions::RequireGlobFunction</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::ClassHierarchies::ProhibitOneArgBless">ClassHierarchies::ProhibitOneArgBless</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitMutatingListFunctions">ControlStructures::ProhibitMutatingListFunctions</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitBarewordFileHandles">InputOutput::ProhibitBarewordFileHandles</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitInteractiveTest">InputOutput::ProhibitInteractiveTest</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitTwoArgOpen">InputOutput::ProhibitTwoArgOpen</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireEncodingWithUTF8Layer">InputOutput::RequireEncodingWithUTF8Layer</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitEvilModules">Modules::ProhibitEvilModules</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireBarewordIncludes">Modules::RequireBarewordIncludes</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireFilenameMatchesPackage">Modules::RequireFilenameMatchesPackage</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef">Subroutines::ProhibitExplicitReturnUndef</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitNestedSubs">Subroutines::ProhibitNestedSubs</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitReturnSort">Subroutines::ProhibitReturnSort</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitSubroutinePrototypes">Subroutines::ProhibitSubroutinePrototypes</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::ProhibitNoStrict">TestingAndDebugging::ProhibitNoStrict</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireUseStrict">TestingAndDebugging::RequireUseStrict</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitLeadingZeros">ValuesAndExpressions::ProhibitLeadingZeros</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitConditionalDeclarations">Variables::ProhibitConditionalDeclarations</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::RequireLexicalLoopIterators">Variables::RequireLexicalLoopIterators</a></li>
</ul>

<p>My favorite above is probably <a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitEvilModules">ProhibitEvilModules</a>. Aside from the colorful name, a development team can use it to steer people towards an organization’s favored solutions rather than “deprecated, buggy, unsupported, or insecure” ones. By default, it prohibits <a href="https://metacpan.org/pod/Class::ISA">Class::ISA</a>, <a href="https://metacpan.org/pod/Pod::Plainer">Pod::Plainer</a>, <a href="https://metacpan.org/pod/Shell">Shell</a>, and <a href="https://metacpan.org/pod/Switch">Switch</a>, but you should curate and configure a list within your team.</p>

<p>Speaking of working within a team, although <code>perlcritic</code> is meant to be a vital tool to ensure good practices, it’s no substitute for manual <a href="https://en.wikipedia.org/wiki/Code_review">peer code review</a>. Those reviews can lead to the creation or adoption of new automated policies to save time and settle arguments, but such work should be done collaboratively after achieving some kind of consensus. This is true whether you’re a team of employees working on proprietary software or a group of volunteers developing open source.</p>

<p>Of course, reasonable people can and do disagree over any of the included policies, but as a reasonable person, you should have <em>good</em> reasons to disagree before you either configure <code>perlcritic</code> appropriately or selectively and knowingly <a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#BENDING-THE-RULES">bend the rules</a> where required. Other CPAN authors have even provided their own additions to <code>perlcritic</code>, so it’s worth <a href="https://metacpan.org/search?q=Perl%3A%3ACritic%3A%3APolicy%3A%3A">searching CPAN under “Perl::Critic::Policy::”</a> for more examples. In particular, <a href="https://metacpan.org/pod/Perl::Critic::Community">these community-inspired policies</a> group a number of recommendations from <a href="https://perldoc.perl.org/perlcommunity#IRC">Perl developers on Internet Relay Chat (IRC)</a>.</p>

<p>Personally, although I adhere to my employer’s standardized configuration when testing and reviewing code, I like to run <code>perlcritic</code> on the “brutal” setting before committing my own. What do you prefer? Let me know in the comments below.</p>




<p><em>Cover image: <a href="https://www.flickr.com/photos/56278705@N05/7859287174">“Everyone’s a critic — graifitti under Mancunian Way in Manchester”</a> by <a href="https://www.flickr.com/photos/56278705@N05">Alex Pepperhill</a> is licensed under <a href="https://creativecommons.org/licenses/by-nd/2.0/?ref=ccsearch&amp;atype=rich">CC BY-ND 2.0</a></em></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/everyone-s-a-perl-critic-and-you-can-be-too-11f4</id>
    <published>2021-09-21T14:00:00Z</published>
    <updated>2021-09-21T14:00:00Z</updated>
    <category term="perl"/>
    <category term="perlcritic"/>
    <category term="cpan"/>
    <category term="lint"/>
  </entry>
  <entry>
    <title>SPVM 0.9014 Release - add class, method, static keyword, omit SPVM:: namespace</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/09/spvm-09014-release---add-class-method-static-keyword-omit-spvm-namespace.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10423</id>
    <published>2021-09-21T09:55:38Z</published>
    <updated>2021-09-21T10:05:59Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>I release SPVM 0.9014. Latest releases have some big changes.</p>

<p> add class, method, static keyword, omit SPVM:: namespace, and remove sub, self, keyword.</p>

<p><b>Before</b></p>

<pre>
# lib/SPVM/Point.spvm
package SPVM::Point {
  has x : int;
  has y : int;

<p>  sub new : SPVM::Point () {<br />
    return new SPVM::Point;<br />
  }<br />
  <br />
  sub clear : void ($self : self) {<br />
    $self->{x} = 0;<br />
    $self->{y} = 0;<br />
  }<br />
}<br />
</pre></p>

<p><b>After</b></p>

<pre>
# lib/SPVM/Point.spvm
class Point {
  has x : int;
  has y : int;

<p>  static method new : Point () {<br />
    return new Point;<br />
  }<br />
  <br />
  method clear : void () {<br />
    $self->{x} = 0;<br />
    $self->{y} = 0;<br />
  }<br />
}<br />
</pre></p>

<p><br />
I imagine Moo, hash references, Mojo::Base, Object::Pad, Cor, etc. when choosing SPVM syntax.</p>

<p><br />
<a href="https://github.com/yuki-kimoto/SPVM/blob/master/solo/SPVM/TestCase.spvm">See SPVM more Examples</a><br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>CPAN Release of TooMuchCode 0.17</title>
    <link rel="alternate" href="https://dev.to/gugod/cpan-release-of-toomuchcode-0-17-3e6m" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/dist/Perl-Critic-TooMuchCode"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; is a set of policy addons that generally checks for dead code or redundant code.&lt;/p&gt;

&lt;p&gt;I feel grateful that this small project starts to draw some attention and endorsement and now it is receiving pull-requests from the Perl/CPAN community.&lt;/p&gt;

&lt;p&gt;In version 0.17 we improved the policy ProhibitDuplicateLiteral and now it we can whitelist strings and numbers in configurations. If you somehow really need to use number 42 and "forty two" literally in the code many times, you list them in &lt;code&gt;.perlcriticrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[TooMuchCode::ProhibitDuplicateLiteral]
whitelist = "forty two" 42
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to &lt;a href="https://github.com/ferki"&gt;@ferki&lt;/a&gt; from project &lt;a href="https://www.rexify.org/"&gt;Rex&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;Rex is an automation framework, or remote-execution framework. In a sense, similar to Ansible. It's a simple way of telling machine what to do, with some code named Rexfile -- a task manifest. which is also perl code. Within which you'd repeat some strings literally such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;service 'apache2',  ensure =&amp;gt; 'started';
service 'mysql',    ensure =&amp;gt; 'started';
service 'memcached, ensure =&amp;gt; 'started';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... and that is OK. Because those manifests should be direct instead of indirect/abstract with the use of variables / constants to just hold the string &lt;code&gt;'started'&lt;/code&gt;. Doing such is an unnecessary level of indirection since the purpose of task manifests is to tell machine what to do and if human readers needs to read twice before they can understand what it really means, the is a problem.&lt;/p&gt;

&lt;p&gt;Well, apparently in the context of coding Rexfile, some repetition are allowed. In general, perhaps repetition are OK in any DSL code. DSL itself already reduce some repetition by hiding the details and DSL keywords tends to be high-level constructs that are designed to be easily understandable for human readers. Repetition of DSL keywords almost never leads to be unreadable or "bad small".&lt;/p&gt;

&lt;p&gt;I might have repeated the word "repetition" too many times.&lt;/p&gt;




&lt;p&gt;Originally posted at: &lt;a href="https://gugod.org/2021/09/cpan-release-of-toomuchcode-0.17/"&gt;gugod's blog -- CPAN Release of TooMuchCode 0.17&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Kang-min Liu</name>
    </author>
    <id>https://dev.to/gugod/cpan-release-of-toomuchcode-0-17-3e6m</id>
    <published>2021-09-20T23:05:15Z</published>
    <updated>2021-09-20T23:05:15Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Weekly Challenge 131</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-131-1fl1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-131/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-131/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-consecutive-arrays">
  </a>
  TASK #1 › Consecutive Arrays
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>Submitted by: Mark Anderson</p>

<p>You are given a sorted list of unique positive integers.</p>

<p>Write a script to return list of arrays where the arrays are consecutive integers.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This is pretty straight forward, so doesn't need much explanation. Even though the task says the list is ordered and unique, I do this anyway. You never know what input someone will provide!</p>

<p>I seed the <code>@output</code> array with the first number. Then then work through each number removing it from the array. If that number is one more than the last number in the last array of <code>@output</code>, I add the value to the existing row. If it is not, this means it is a new sequence, so add a new row to the array.</p>

<p>I then use map to display the result in the requested format.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code> ./ch-1.pl 1 2 3 6 7 8 9
([1, 2, 3], [6, 7, 8, 9])

$ ./ch-1.pl 11 12 14 17 18 19
([11, 12], [14], [17, 18, 19])

$ ./ch-1.pl 2 4 6 8
([2], [4], [6], [8])

$ ./ch-1.pl 1 2 3 4 5
([1, 2, 3, 4, 5])
</code></pre>

</div>



<h2>
  <a href="#task-2-find-pairs">
  </a>
  TASK #2 › Find Pairs
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>Submitted by: Yary</p>

<p>You are given a string of delimiter pairs and a string to search.</p>

<p>Write a script to return two strings, the first with any characters matching the “opening character” set, the second with any matching the “closing character” set.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>There would be a couple of way to tackle this, and my choice is based largely on the output in the examples. For this I take the first string (the delimiter parts) and work on it two characters at a time adding them to the <code>$open</code> and <code>$close</code> string. If the character is not an alphanumeric character, I escape it with a back quote. <a href="https://perldoc.perl.org/perlre">perlre</a> states "Unlike some other regular expression languages, there are no backslashed symbols that aren't alphanumeric. So anything that looks like <code>\\</code>, <code>\(</code>, <code>\)</code>, <code>\[</code>, <code>\]</code>, <code>\{</code>, or <code>\}</code> is always interpreted as a literal character, not a metacharacter"</p>

<p>I then use this regexp string (wrapped in <code>[^</code> and <code>]</code>) to remove the characters that don't match the pattern and display the results.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>

$ ./ch-2.pl '""[]()' '"I like (parens) and the Apple ][+" they said.'
"(["
")]"

$ ./ch-2.pl '**//&lt;&gt;' '/* This is a comment (in some languages) */ &lt;could be a tag&gt;'
/**/&lt;
/**/&gt;
</code></pre>

</div>

</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-131-1fl1</id>
    <published>2021-09-20T12:30:26Z</published>
    <updated>2021-09-20T12:30:26Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>#530 - Outreachy 2021</title>
    <link rel="alternate" href="https://perlweekly.com/archive/530.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>If you remember, I mentioned the Outreachy program in the editorial of the weekly newsletter edition <a href="https://perlweekly.com/archive/522.html">#522</a>. It has finally come to an end as Rosheen Naeem successfully completed the internship as reported by the TPF in a <a href="https://news.perlfoundation.org/post/outreachy2021-complete">blog post</a>. Congratulations Rosheen.</p>
<p>The Perl Foundation is looking for mentors and project ideas for the next Outreachy rounds. If you have Perl or Raku project ideas, please get in touch with TPF.</p>
<p>Many years ago, I was approached for help by the Open Food Facts team as they found out about my distribution, <a href="https://metacpan.org/dist/Food-ECodes">Food::ECodes</a>. Unfortunately it didn't work out as I was too busy with my other pet projects. I hope one day I can contribute to <a href="https://github.com/openfoodfacts/openfoodfacts-server">Open Food Facts</a>. I remember I had trouble setting up a local development environment for my contributions. I haven't had a chance to see if there has been any improvements in this area to help newcomers to contribute.</p>
<p>I request Perl fans to come forward and help the cool fun project Open Food Facts.</p>
<p>Enjoy the rest of the newsletter and stay safe.</p></div>
    </content>
    <id>https://perlweekly.com/archive/530.html</id>
    <published>2021-09-20T10:00:00Z</published>
    <updated>2021-09-20T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>These Binary Trees are Odd</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/09/19#pwc130" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of positive integers, such that all the numbers appear even number 
of times except one number. Write a script to find that integer.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub find_odd_occurring{
    my %counts;
    for my $x (@_){
        $counts{$x}++;
    }
    for my $x (keys %counts){
        return $x if $counts{$x} % 2 != 0;
    }
}

MAIN:{
    print find_odd_occurring(2, 5, 4, 4, 5, 5, 2) . "\n";
    print find_odd_occurring(1, 2, 3, 4, 3, 2, 1, 4, 4) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
5
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I spent some time thinking if this could be done without two passes over the numbers. I 
do not think that is possible, since we have no limits on the off or even occurrences.
For example, we could short circuit the checking if we knew that there might on be, say,
three occurrences of the odd number. But here we have no such limitations and so we must 
tally all numbers in the list and then check to see which has an odd number of 
occurrences.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a tree. Write a script to find out if the given tree is Binary Search Tree 
(BST).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Tree130{
    use boolean;      
    use Class::Struct; 

    use constant LEFT =&gt; 0;
    use constant RIGHT =&gt; 1;

    package Node{
        use boolean;  
        use Class::Struct; 
        struct(
            value =&gt; q/$/,
            left =&gt; q/Node/,
            right =&gt; q/Node/
        );  
        true; 
    }  

    struct(
        root =&gt; q/Node/,
        nodes =&gt; q/@/
    );   

    sub print_tree{ 
        my($self) = @_;   
        my $left_child = $self-&gt;root()-&gt;left();
        my $right_child = $self-&gt;root()-&gt;right();
        print $self-&gt;root()-&gt;value() . " -&gt; " . $left_child-&gt;value() . "\n" if $left_child;
        print $self-&gt;root()-&gt;value() . " -&gt; " . $right_child-&gt;value() . "\n" if $right_child;
        print_tree_r($left_child);
        print_tree_r($right_child);
    }  

    sub print_tree_r{ 
        my($node) = @_;   
        my $left_child = $node-&gt;left();
        my $right_child = $node-&gt;right();
        print $node-&gt;value() . " -&gt; " . $left_child-&gt;value() . "\n" if $left_child;
        print $node-&gt;value() . " -&gt; " . $right_child-&gt;value() . "\n" if $right_child;
        print_tree_r($left_child) if $left_child;
        print_tree_r($right_child) if $right_child;
    } 

    sub min_tree_value{
        my($node) = @_; 
        my $left_child = $node-&gt;left();
        my $right_child = $node-&gt;right();
        return $node-&gt;value() if !$left_child &amp;&amp; !$right_child;
        return [sort {$a &lt;=&gt; $b} ($node-&gt;value(), min_tree_value($left_child), min_tree_value($right_child))]-&gt;[0];
    }

    sub max_tree_value{
        my($node) = @_;   
        my $left_child = $node-&gt;left();
        my $right_child = $node-&gt;right();
        return $node-&gt;value() if !$left_child &amp;&amp; !$right_child;
        return [sort {$a &lt;=&gt; $b} ($node-&gt;value(), max_tree_value($left_child), max_tree_value($right_child))]-&gt;[2];
    }

    sub is_bst{
        my($self, $node) = @_;
        return true if !$node;
        my $left_child = $node-&gt;left();
        my $right_child = $node-&gt;right();
        return false if $left_child &amp;&amp; $node-&gt;value &lt; max_tree_value($left_child);    
        return false if $right_child &amp;&amp; $node-&gt;value &gt; min_tree_value($right_child);   
        return false if !$self-&gt;is_bst($left_child) || !$self-&gt;is_bst($right_child);
        return true;    
    }

    sub insert{
        my($self, $source, $target, $left_right) = @_;   
        if(!$self-&gt;root()){      
            $self-&gt;root(new Node(value =&gt; $source));   
            push @{$self-&gt;nodes()},  $self-&gt;root();      
        }   
        my $source_node = [grep {$_-&gt;value() == $source} @{$self-&gt;nodes()}]-&gt;[0];
        my $target_node = new Node(value =&gt; $target);
        if($source_node){
            $source_node-&gt;left($target_node) if $left_right == LEFT;
            $source_node-&gt;right($target_node) if $left_right == RIGHT;
            push @{$self-&gt;nodes()}, $target_node;
        }
    }  
    true; 
}

package main{
    use constant LEFT =&gt; 0;
    use constant RIGHT =&gt; 1;

    my $tree = new Tree130(); 
    $tree-&gt;insert(8, 5, LEFT); 
    $tree-&gt;insert(8, 9, RIGHT); 
    $tree-&gt;insert(5, 4, LEFT); 
    $tree-&gt;insert(5, 6, RIGHT); 
    print $tree-&gt;is_bst($tree-&gt;root()) . "\n";
    $tree = new Tree130(); 
    $tree-&gt;insert(5, 4, LEFT); 
    $tree-&gt;insert(5, 7, RIGHT); 
    $tree-&gt;insert(4, 3, LEFT); 
    $tree-&gt;insert(4, 6, RIGHT); 
    print $tree-&gt;is_bst($tree-&gt;root()) . "\n";
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;All my code, for the time being at least, has converged on a pretty standard approach 
using Class::Struct. I have done this enough recently where I've convinced myself this is
the best for several reasons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This allows for object oriented construction of the data structure with almost the
minimum overhead
&lt;/li&gt;
&lt;li&gt;While providing for some OO structure, other than generating default accessor methods
there is not too much done behind the scenes. Organizing the code this way does not feel
like "cheating" in that there is any reliance on the OO framework, since it is so minimal.
&lt;/li&gt;
&lt;li&gt;Many classic texts on data structures use C and that languages &lt;code&gt;struct&lt;/code&gt; ability. Some
superficial resemblance to that code is helpful in translating examples from the 
literature to Perl. 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first issue to deal with this part of the challenge is to construct a Binary Tree, but
not do any sort of balancing when performing insertions into the tree. To do this I made
a simple insert function which takes a source and target node and a third parameter which 
dictates whether the target is to be the left or right child of the source. In this way
we can easily construct a broken binary tree.&lt;/p&gt;

&lt;p&gt;Actually verifying whether the tree is a proper BST follows fairly directly from the 
definition of a Binary Tree. For each node, including the root, we check to see if the 
largest value to the left is smaller as well as the minimum value to the right being 
larger.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-130/"&gt;Challenge 130&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Class::Struct"&gt;Class::Struct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/binary-tree-intro"&gt;Binary Trees&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc130</id>
    <published>2021-09-19T12:37:00-04:00</published>
    <updated>2021-09-19T12:37:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7237952639300586001</id>
    <published>2021-09-18T23:03:00.000+02:00</published>
    <updated>2021-09-18T23:03:22.168+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclix) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NICS/Catmandu-1.2016' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catmandu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a data toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.2016&lt;/strong&gt; on 2021-09-17&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.2015 was 7 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9724' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9724&lt;/strong&gt; on 2021-09-13&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9723 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.24&lt;/strong&gt; on 2021-09-16&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.23 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.06&lt;/strong&gt; on 2021-09-14&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.05 was 2 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SSIMMS/PDF-API2-2.042' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create, modify, and examine PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.042&lt;/strong&gt; on 2021-09-16&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.041 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.62&lt;/strong&gt; on 2021-09-13&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.612 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VANSTYN/RapidApp-1.3404' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;RapidApp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Turnkey ajaxy webapps &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3404&lt;/strong&gt; on 2021-09-17&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 1.3402 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.59&lt;/strong&gt; on 2021-09-12&lt;/li&gt;  &lt;li&gt;Votes: 156&lt;/li&gt;  &lt;li&gt;Previous version: 1.56 was 5 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9013&lt;/strong&gt; on 2021-09-18&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9012 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHLOMIF/String-Random-0.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;String::Random&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl module to generate random strings based on a pattern &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.32&lt;/strong&gt; on 2021-09-14&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.31 was 10 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test-Simple-1.302187' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.302187&lt;/strong&gt; on 2021-09-17&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 1.302186 was 1 month, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7237952639300586001/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclix-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7237952639300586001"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7237952639300586001"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclix-11-great-cpan-modules-released.html" title="(ccclix) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7607089192034442685</id>
    <published>2021-09-18T22:59:00.002+02:00</published>
    <updated>2021-09-18T22:59:11.439+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-09-18 20:51:39 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69194271" target="_blank"&gt;Perl optimization: inlining a function changed the results&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69164299" target="_blank"&gt;Why my micro-API does not have response body?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69213132" target="_blank"&gt;How to search and replace a word on multiple occurrence&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69149571" target="_blank"&gt;perl - Hash::Merge duplicates same list within hashes instead of putting them once&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69209476" target="_blank"&gt;Perl - how to create dynamic multi level hash using array of elements as keys&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69224128" target="_blank"&gt;Error while using SSH command in shell script&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69197146" target="_blank"&gt;running gam command inside perl script&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69226416" target="_blank"&gt;in Perl, how to assign the print function to a variable?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69226857" target="_blank"&gt;In Perl, how to create a "mixed-encoding" string (or a raw sequence of bytes) in a scalar?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69147588" target="_blank"&gt;perl to modify clipboard before pasting&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7607089192034442685/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/dv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7607089192034442685"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7607089192034442685"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/dv-stackoverflow-perl-report.html" title="(dv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Next steps of research study launched - interviewees wanted</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/next-steps-for-research-study"/>
  <id>tag:news.perlfoundation.org,2021-09-17:/post/next-steps-for-research-study</id>
  <published>2021-09-17T09:07:42</published>
  <updated>2021-09-17T09:07:42</updated>
  <summary>
  <![CDATA[
     Dr. Ann Barcomb, an assistant professor at the University of Calgary, is conducting a study on practices for managing episodic, or occasional, contributors to the Perl/Raku project, in collaboration with The Perl Foundation. Following on from the survey she launched earlier in the year, she would like to interview community managers/leaders or those who have an overview of the participation of numerous contributors. The interview will look at your experiences 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Dr. Ann Barcomb, an assistant professor at the University of Calgary, is conducting a study on practices for managing episodic, or occasional, contributors to the Perl/Raku project, in collaboration with The Perl Foundation. Following on from <a href="https://news.perlfoundation.org/post/annbarcombstudylaunch">the survey she launched earlier in the year</a>, she would like to interview community managers/leaders or those who have an overview of the participation of numerous contributors.</p>

<p>The interview will look at your experiences working with episodic contributors, and episodic contributions, in the Perl/Raku community. Additionally, she will ask if there is any difference between the current state and what you would like to see, in terms of episodic participation. </p>

<p>If you agree to be interviewed, quotations from the interview may be included in reports/papers, although not attributed directly to you. You have the option of having your name included in a list of participants, if you would like to receive recognition for your effort.</p>

<p>The results of the interviews will be delivered as part of a report to TPF, along with recommendations on practices (derived from previous research) which might be applied to improve the management of episodic participation. Subsequent research will involve working with interested community managers who participated in interviews, in order to implement the practices described in the proposal.</p>

<p>Please let me know if you are willing to be interviewed, and if you have any interest in the subsequent research. I really hope that this research will be relevant, and provide benefit to the Perl/Raku community, in addition to furthering understanding of practices for managing episodic participation in free/libre/open source software communities.</p>

<p>The University of Calgary Conjoint Faculties Research Ethics Board has approved this study (REB20-2135).</p>

<p>Read the full invitation to take part. <a href="_ra-rel-mnt_/simplecas/fetch_content/365ad3aa7bd432024d3140e3f5ac382b05c73622/InterviewRecruitment.pdf">InterviewRecruitment.pdf</a></p>

<p>If you are interested in taking part please use this link to schedule an interview at a convenient time. https://calendly.com/aadharsh-hariharan/tpf-research-interview</p>

<p>Interview consent is here: <a href="_ra-rel-mnt_/simplecas/fetch_content/95f7adccd745833b3525d8229736f66b7215b47e/InterviewConsent.pdf">InterviewConsent.pdf</a></p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 130: Odd Number and Binary Search Tree</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/09/perl-weekly-challenge-130-odd-number-and-binary-search-tree.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10422</id>
    <published>2021-09-16T21:58:12Z</published>
    <updated>2021-09-16T22:01:25Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 130 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-130/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on September 19, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Odd Number</h2>

<p><em>You are given an array of positive integers, such that all the numbers appear even number of times except one number.</em></p>

<p><em>Write a script to find that integer.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @N = (2, 5, 4, 4, 5, 5, 2)
Output: 5 as it appears 3 times in the array where as all other numbers 2 and 4 appears exactly twice.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @N = (1, 2, 3, 4, 3, 2, 1, 4, 4)
Output: 4
</code></pre>

<p>Even though I have duly noted that the task specification states that only one number appears an odd number of time, I&#8217;ll expand slightly the task to find all the integers appearing an odd number of times, in the event that there is more than one.</p>

<h3>Odd Number in Raku</h3>

<p>In Raku, a <a href="https://docs.raku.org/type/Bag">Bag</a> is a built-in immutable collection of distinct elements in no particular order that each have an integer weight assigned to them signifying how many copies of that element are considered &#8220;in the bag&#8221;. This is the perfect data structure to implement an histogram from a list of input values: just converting the input list into a bag, i.e. a list of unique  key-values with the value being the frequency of the key. We then just need to filter out keys whose values are even to obtain the desired result.</p>

<pre><code>my $bag = (2, 5, 4, 4, 5, 5, 2).Bag;
say grep { $bag{$_} % 2 }, $bag.keys;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>raku ./odd_number.raku
(5)
</code></pre>

<p>Adding a 2 to the input list will make the 2-count odd:</p>

<pre><code>$ raku ./odd_number.raku
(5 2)
</code></pre>

<h3>Odd Number in Perl</h3>

<p>Perl doesn&#8217;t have a built-in <code>Bag</code> type, but it is almost as easy to implement an histogram using a hash. The algorithm is otherwise essentially the same:</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;

my %histo;
$histo{$_}++ for (2, 5, 4, 4, 5, 5, 2);
say join " ", grep { $histo{$_} % 2 } keys %histo;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl odd_number.pl
5
</code></pre>

<p>Adding a 2 to the input list will make the 2-count odd:</p>

<pre><code>$ perl odd_number.pl
2 5
</code></pre>

<h2>Task 2: Binary Search Tree</h2>

<p><em>You are given a tree.</em></p>

<p><em>Write a script to find out if the given tree is Binary Search Tree (BST).</em></p>

<p><em>According to <a href="https://en.wikipedia.org/wiki/Binary_search_tree">Wikipedia</a>, the definition of BST:</em></p>

<blockquote>
  <p>A binary search tree is a rooted binary tree, whose internal nodes each store a key (and optionally, an associated value), and each has two distinguished sub-trees, commonly denoted left and right. The tree additionally satisfies the binary search property: the key in each node is greater than or equal to any key stored in the left sub-tree, and less than or equal to any key stored in the right sub-tree. The leaves (final nodes) of the tree contain no key and have no structure to distinguish them from one another.</p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input:
        8
       / \
      5   9
     / \
    4   6

Output: 1 as the given tree is a BST.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
        5
       / \
      4   7
     / \
    3   6

Output: 0 as the given tree is a not BST.
</code></pre>

<p>We&#8217;ll implement the binary tree as a nested hash of hashes, in which the keys are <code>val</code> (the current node value), <code>lc</code> (left child node), and <code>rc</code> (right child node).</p>

<h3>Binary Search Tree in Raku</h3>

<p>we implement a recursive <code>dft</code> (depth-first traversal) subroutine to explore the tree. We return 0 when any value is larger than any previous value, except that a right child is larger than its immediate parent node.</p>

<pre><code>use v6;

sub dft (%t, $min) {
    my $value = %t&lt;val&gt;;
    my $new-min = $value &lt; $min ?? $value !! $min ;
    # say "$max $min $value $new-max $new-min";    
    if %t&lt;lc&gt;:exists {
        # say "%t&lt;lc&gt;&lt;val&gt; $min";
        return 0 if %t&lt;lc&gt;&lt;val&gt; &gt; $value;
        return 0 if %t&lt;lc&gt;&lt;val&gt; &gt; $min;
        return 0 unless dft %t&lt;lc&gt;, $new-min;
    }
    if %t&lt;rc&gt;:exists {
        # say "%t&lt;rc&gt;&lt;val&gt; $min";
        return 0 if %t&lt;rc&gt;&lt;val&gt; &lt; $value;
        return 0 if %t&lt;rc&gt;&lt;val&gt; &gt; $min;
        return 0 unless dft %t&lt;rc&gt;, $new-min;
    }
    return 1;
}
my %tree1 = (
    val =&gt; 8, 
    lc =&gt; { val =&gt; 5, 
            lc =&gt; {val =&gt; 4}, 
            rc =&gt; {val =&gt; 6}
          },
    rc =&gt; {val =&gt; 9}
);
#       8
#      / \
#     5   9
#    / \
#   4   6
say (dft %tree1, Inf), "\n";

my %tree2 = (val =&gt; 5, 
    lc =&gt; { val =&gt; 4, 
            lc =&gt; {val =&gt; 3}, 
            rc =&gt; {val =&gt; 6}
           },
    rc =&gt; {val =&gt; 7});
#       5
#      / \
#     4   7
#    / \
#   3   6
say dft %tree2, Inf;
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ raku ./bst.raku
1

0
</code></pre>

<h3>Binary Search Tree in Perl</h3>

<p>We also use a recursive <code>dft</code> (depth-first traversal) subroutine, with the same rules as above.</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;

sub dft {
    my ($t, $min) = @_;
    my $value = $t-&gt;{val};
    my $new_min = $value &lt; $min ? $value : $min ;
    # say " $min $value $new_min";    
    if (exists $t-&gt;{lc}) {
        # say "%t&lt;lc&gt;&lt;val&gt; $min";
        return 0 if $t-&gt;{lc}{val} &gt; $value;
        return 0 if $t-&gt;{lc}{val} &gt; $min;
        return 0 unless dft($t-&gt;{lc}, $new_min);
    }
    if (exists $t-&gt;{rc}) {
        # say "%t&lt;rc&gt;&lt;val&gt; $max $min";
        return 0 if $t-&gt;{rc}{val} &lt; $value;
        return 0 if $t-&gt;{rc}{val} &gt; $min;
        return 0 unless dft($t-&gt;{rc}, $new_min);
    }
    return 1;
}
my %tree1 = (
    val =&gt; 8, 
    lc =&gt; { val =&gt; 5, 
            lc =&gt; {val =&gt; 4}, 
            rc =&gt; {val =&gt; 6}
          },
    rc =&gt; {val =&gt; 9}
);
#       8
#      / \
#     5   9
#    / \
#   4   6
say "tree1: ", dft(\%tree1, 1e9), "\n";

my %tree2 = (val =&gt; 5, 
    lc =&gt; { val =&gt; 4, 
            lc =&gt; {val =&gt; 3}, 
            rc =&gt; {val =&gt; 6}
           },
    rc =&gt; {val =&gt; 7});
#       5
#      / \
#     4   7
#    / \
#   3   6
say "tree2: ", dft \%tree2, 1e9;
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl  bst.pl
tree1: 1

tree2: 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on September 26, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Monthly Report - August</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/09/monthly-report---august-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10420</id>
    <published>2021-09-16T04:31:39Z</published>
    <updated>2021-09-16T04:46:12Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmothlyreport" label="perl mothly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-08.jpg"/></p>

<p><strong>Finally enjoying again ...</strong></p>

<p>Ever since I joined <a href="https://www.oleeo.com/">Oleeo</a>, I keep talking about it in every monthly report.</p>

<p><strong>Why?</strong></p>

<p>Well, right from day one, I have been getting to work on something I never worked on before. To be honest with you, I was expecting to fight with good old <strong>CGI</strong> ridden code mostly. I find myself lucky to have such a great supporting team. Right now I am playing with <strong>Elastic Search</strong> and I am enjoying it. Thanks to <strong>CPAN</strong> for such a cool library, <a href="https://metacpan.org/pod/Search::Elasticsearch">Search::Elasticsearch</a>.</p>

<p>Did you notice last <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html">monthly report</a> was published on <strong>22nd Aug</strong>? </p>

<p>I have never been so late ever since I started the series of monthly report.</p>

<p>You must be thinking, why bother with monthly report? Who cares what I do?</p>

<p>I agree, nobody cares. But I still do it every month since <strong>Nov 2018</strong>, my first <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/11/monthly-report---october.html">monthly report</a> was published on <strong>2nd Nov 2018</strong>. In two months time, I would complete <strong>3 years</strong> of monthly reporting. Honestly speaking, I didn't realise it until now.</p>

<p>Going back to the original question, <strong>why?</strong> </p>

<p>Well, I do it to keep myself self-motivated and keep track of my pet projects. This time, at least I am not as late as last time. So there is a improvement, little bit though. I am getting the monthly report out on <strong>16th</strong> as compared to <strong>22nd</strong> last month. Hopefully in the near future, I would be back on track.</p>

<p>I am so much involved in learning new things these days, I hardly find time to do any <strong>YouTube</strong> videos. For the first time, I didn't do any Live Coding YouTube videos last month. In fact, I have even not participated in the weekly challenge in the month of <strong>August</strong>. I promise to get back on track soon.</p>

<p>I would like to talk about my involvement with <strong>Pull Request Club</strong>. During the peak of my game with Pull Request, I used to spend at least <strong>2-4 hours</strong> every day looking for low hanging issues to fix. Ever since the weekly challenge started, I hardly find any time for the pull requests. Although I have never missed a monthly assignment for <strong>Pull Request Club</strong>, I am not happy with my contributions. Most of my contributions are limited to documentation and nothing ground breaking. I am grateful to everyone who have accepted my small contributions so far. It brings smile on my face every time.</p>

<p>In all of these drama, I am unable to give due attention to the book I am currently working on. At least, I have not dumped the idea. It is still very much alive. I should get back on track asap.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>3 Pull Requests</strong> submitted in the month of <strong>August 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-08.png"/></p>

<p><strong>2365 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-08.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>686 commits</strong> recorded in the month of <strong>August 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-08.png"/></p>

<p>Overall <strong>6156 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-08.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>August 2021</strong>:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-124">Challenge #124</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-125">Challenge #125</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-126">Challenge #126</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-127">Challenge #127</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-128">Challenge #128</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-123">RECAP Challenge #123</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-124">RECAP Challenge #124</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-125">RECAP Challenge #125</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-126">RECAP Challenge #126</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-127">RECAP Challenge #127</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>Last month, none created. However, there are plenty of videos available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <strong>Flavio Poletti</strong> as the Champion of <strong>The Weekly Challenge</strong>. Please checkout the <a href="https://theweeklychallenge.org/blog/meet-the-champion-2021-07">interview</a> with him.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://theweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/ARGV::OrDATA">ARGV::OrDATA</a> by <strong>E. Choroba</strong>. I submitted <a href="https://github.com/choroba/argv-ordata/pull/2">one</a> Pull Request and it has been kindly accepted and merged.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-08.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-08.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html">Monthly Report - July</a></li>.</p>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/524.html">Issue #524</a> and <a href="http://perlweekly.com/archive/526.html">Issue #526</a>.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>August 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-08.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Board update September 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/foundation-board-update-september-2021"/>
  <id>tag:news.perlfoundation.org,2021-09-16:/post/foundation-board-update-september-2021</id>
  <published>2021-09-16T04:06:10</published>
  <updated>2021-09-16T04:06:10</updated>
  <summary>
  <![CDATA[
     Board update There have been many changes at the Foundation over the last year including a number of changes to our Board. Welcome At our last formal meeting in August, we welcomed Daniel Sockwell to the Board of Directors. Daniel has worked with the Foundation over the last year by serving on the Legal/Commercial Committee and by participating in the monthly community meetings. In his responses to questions during nomination, 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h1>Board update</h1>

<p>There have been many changes at the Foundation over the last year including a number of changes to our Board. </p>

<h2>Welcome</h2>

<p>At our last formal meeting in August, we welcomed Daniel Sockwell (Codesections) to the Board of Directors.</p>

<p>Daniel has worked with the Foundation over the last year by serving on the Legal/Commercial Committee and by participating in the monthly community meetings. In his <a href="https://news.perlfoundation.org/post/daniel_sockwell_board_candidate">responses to questions during nomination</a>, Daniel expressed a desire to bring Raku Steering Council representation to the Board and "to help [the Board] and the RSC/the Raku community more broadly better work together" so that Perl and Raku can support one another and avoid the "risk [of] getting in each other's way".</p>

<p>I am pleased to welcome Daniel on to the Board. Daniel brings additional capability and capacity to the team as well as a positive vision as to how Perl and Raku can co-exist, which I am confident is beneficial to all involved.</p>

<h2>Farewell</h2>

<p>During my time on the Board, I have had the pleasure of working with an experienced team, who warmly welcomed me to the Foundation and have all  been generous with their time and support.</p>

<p>After many years of valued service across key roles, the following people have now retired from the Board:</p>

<ul>
<li>Jim Brandt (Former president)</li>
<li>Dan Wright (Former treasurer)</li>
<li>Allison Randal</li>
<li>Curtis Poe</li>
<li>Rik Signes</li>
<li>Nat Torkington</li>
</ul>

<p>Each has been invited to join the Advisory Board which is much less demanding whilst enabling us all to stay connected. More information on the developing <a href="https://www.perlfoundation.org/advisory_board.html">Advisory Board is available here</a>.</p>

<p>Details of <a href="https://www.perlfoundation.org/the-board.html">the current Board of Directors is here</a>.</p>

<p>I, and the Board members, would like to thank all past members for the commitment they made to the Board, we will miss their contributions and look forward to further conversation through the Advisory Board.</p>

<h2>Board nominations</h2>

<p>During the next few months, we will be seeking nominations for two additional Board members. If you know someone who might be willing to invest a few days per month, and can offer skills and experience that would be useful to the Foundation, then ask if they would consider being nominated to join the Board. </p>

<p>Ideally, they would already be known to the Board, are active in an open source community and they must demonstrate professional and positive characteristics.</p>

<p>The Board aims to represent the communities that it serves - we currently lack diversity, so please encourage nominations for those who do not feel represented at the Foundation.</p>

<p>Further details of what would make an ideal candidate and how to nominate will be posted in due course.</p>

<p>Stuart Mackintosh, President</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>My Favorite Warnings: redundant and missing</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10419</id>
    <published>2021-09-15T18:10:19Z</published>
    <updated>2021-09-15T18:12:24Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>The <a href="https://perldoc.perl.org/perldiag#Redundant-argument-in-%25s"><code>redundant</code></a> and <a href="https://perldoc.perl.org/perldiag#Missing-argument-in-%25s"><code>missing</code></a> warnings were added in Perl 5.22 to cover the case where a call to the <a href="http://perldoc.perl.org/perlfunc.html#printf"><code>printf</code></a> or <a href="http://perldoc.perl.org/perlfunc.html#sprintf"><code>sprintf</code></a> had more (<code>redundant</code>) or fewer (<code>missing</code>) arguments than the format calls for. The documentation says that they may be extended to other built-ins (<code>pack</code> and <code>unpack</code> being named specifically) but as of Perl 5.34.0 only the printf() built-ins are covered.</p>

<p>I have (<strong>very</strong> occasionally) found myself writing a subroutine taking a printf-style format and some arguments, and letting the format specify which (if any) of the arguments actually appear in the output. If I just throw all the arguments after the format into the printf(), one of these warnings is very likely to be thrown, starting with 5.22, since <code>use warnings;</code> enables them by default.</p>

<p>Getting such code to work silently under versions of Perl both before and after the warnings were introduced puzzled me for a bit. Eventially I realized the solution was another pragma: <a href="https://metacpan.org/pod/if"><code>if</code></a>, which has been in core since Perl 5.6.2. To wit:</p>

<pre>
sub my_printf {
    no if "$]" >= 5.022, qw{ warnings redundant missing };
    return printf @_;
}
</pre>

<p><i>This is the second entry in a desultory series of blogs on the <a href="http://perldoc.perl.org/warnings.html">warnings</a> pragma.</i></p>]]>
        
    </content>
</entry>
  <entry>
  <title>Raku Dispatch and Compiler Improvements: Grant Report Jonathan Worthington</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/jonathan-raku-dispatch-and-compiler-improvements-1"/>
  <id>tag:news.perlfoundation.org,2021-09-14:/post/jonathan-raku-dispatch-and-compiler-improvements-1</id>
  <published>2021-09-14T02:37:51</published>
  <updated>2021-09-14T02:37:51</updated>
  <summary>
  <![CDATA[
     Jonathan reports a lot of progress on his grant. We would like to thank the sponsors and Jonathan for his work. Here is his report: Raku Dispatch and Compiler Improvements Grant Update Since the approval of my grant in late June, I have been making a lot of progress with it. The grant allowed me to dedicate the vast majority of my working time in July and August to Raku 
   ]]>
  </summary>
  <author>
    <name>Matthias Bloch</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jonathan reports a lot of progress on his grant. We would like to thank the sponsors and Jonathan for his work.</p>

<p>Here is his report:</p>

<hr />

<h1>Raku Dispatch and Compiler Improvements Grant Update</h1>

<p>Since the <a href="https://news.perlfoundation.org/post/grants_may_2021_votes">approval</a>
of my <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">grant</a>
in late June, I have been making a lot of progress with it. The grant allowed
me to dedicate the vast majority of my working time in July and August to Raku
(although I was away for 2 weeks of August on vacation). This report covers
the work done between grant approval up to the end of August.</p>

<p>The key goal of the grant is to bring my work on a new generalized dispatch
mechanism to the point where it can be merged and delivered to Raku users.
In summary, the new dispatch mechanism:</p>

<ul>
<li>Delivers greatly improved performance for a number of constructs that
are very slow in Rakudo/MoarVM today, including deferral with <code>callsame</code>
and other such functions (thus also aiding code using <code>wrap</code>), multiple
dispatch involving <code>where</code> clauses or named arguments, method calls on
roles that are punned into classes, invocation of objects that implement
<code>CALL-ME</code>, and others.</li>
<li>Replaces many special-case performance mechanisms with a single, general,
programmable one. This simplifies MoarVM internally, while simultaneously
allowing it to do more optimization.</li>
</ul>

<p>Far more details can be found in the presentation I gave about this work at
The Raku Conference 2021 (<a href="https://jnthn.net/papers/2021-trc-dispatch.pdf">slides</a>,
<a href="https://www.youtube.com/watch?v=yRFyGDVHl0E">video</a>).</p>

<p>At the point the grant got underway, the new dispatch mechanism was looking
promising, but still some distance from being ready to ship. The work so far
under this grant has decisively changed that, the expectation being that it
will be merged shortly after the September monthly releases (of Rakudo and
MoarVM) and thus be delivered to Raku users in the October releases.</p>

<p>Key tasks performed under the grant up to the end of August are as follows:</p>

<ul>
<li>Switch all method and subroutine dispatches in both NQP and Raku over to
using the new dispatch mechanism, taking care of cross-language calls
(for example, where the compiler calls bits of Raku code at <code>BEGIN</code> time)</li>
<li>Switch over all implicit calls emitted during compilation to use the new
dispatch mechanism also</li>
<li>Switch the regex compiler over to emitting its calls using the new dispatch
mechanism</li>
<li>Replace the boolification mechanism and complex <code>if</code>/<code>unless</code> object ops,
which previously involved an opaque chunk of C code, over to the new
dispatch mechanism; this eliminated a bunch of code in the optimizer too</li>
<li>Replace NQP's stringification and numification - which also involved a
bunch of custom logic in MoarVM - with a dispatcher</li>
<li>Bring the implementation of Raku multiple dispatch using the new dispatch
mechanism to completion, including handling of required named arguments,
typed exceptions on dispatch failure, <code>Junction</code> failover, <code>Proxy</code> args,
dispatch based on argument unpacking, and <code>nextcallee</code> support in complex
dispatch cases</li>
<li>Add support for <code>callwith</code> to the method, wrap, and multiple dispatchers</li>
<li>Various fixes to <code>lastcall</code> handling</li>
<li>Switch NQP's multiple dispatch over to the new dispatcher</li>
<li>Implement support for <code>CALL-ME</code>, which can be handled far more efficiently
using the new dispatch mechanism (current Rakudo has an intermediate
invocation that leads to slurping and re-flattening arguments, which in turn
frustrates optimization; with the new dispatcher, the <code>CALL-ME</code> body can even
be a candidate for inlining)</li>
<li>Handle coercions using the new dispatch mechanism, again with some
performance wins</li>
<li>Replace the <code>findmethod</code>, <code>tryfindmethod</code>, and <code>can</code> ops with a dispatcher
based solution; while the use of <code>nqp::ops</code> in modules is discouraged, these
are among the more common ones, so retaining the API compatibility is good
for the module ecosystem</li>
<li>Implement a dispatcher-based solution for <code>istype</code>: if the answer cannot be
given by the type cache, then a dispatcher is now used for the fallback. This
opens the door to a range of future optimizations.</li>
<li>Implement sink handling in Raku using a dispatcher, which in turn allows us
to avoid a huge number of method calls in the common no-op situation, by
instead using a type guard and mapping it directly to <code>Nil</code></li>
<li>Eliminate lots of superseded mechanisms in MoarVM: the multiple dispatch
cache, smart coercion ops, the method cache, the legacy argument capture
data structure, the invocation protocol mechanism, and the legacy calling
conventions</li>
<li>Replace a number of Rakudo extension ops with dispatcher-based solutions
(these are C extensions to MoarVM, which we are seeking to fully eliminate;
while this is not a goal for the new dispatcher work, we are now down to
around 10 of them, putting it in reach in the near future; this is of some
end user interest as it is currently a blocker for making a single executable
that bundles MoarVM, Rakudo, and a program)</li>
<li>Reinstate type statistics collection when using the new dispatcher, so the
type specializer can start to do its optimization work again</li>
<li>Start translating dispatch programs built at callsites into sequences of
ops, including guards. This means that, in specialized code, we can very
often avoid interpreting dispatch programs, and instead have JITted guard
sequences (with the guards potentially being eliminated), and also exposes
dispatches resulting in bytecode invocation for further optimization</li>
<li>Reinstate specialization linking for bytecode invocations (this is where
one piece of specialized code can directly call a specialized form of the
caller without additional type checks); this is restricted so far to
calls that don't have potential resumptions, so doesn't yet work for method
or multi calls, for example</li>
<li>Resinstate inlining, with the same restrictions as for specialization
linking</li>
<li>Reinstate OSR (On Stack Replacement, used to switch hot loops into their
optimized form when it is available)</li>
<li>Design and implement a solution for better handling of megamorphic method
callsites, and make use of it in the NQP method dispatcher</li>
</ul>

<p>A few other improvements were made not directly related to the new dispatch
mechanism, but because the opportunity for improvement was spotted during
performance analysis:</p>

<ul>
<li>Rework how action methods are invoked, such that most such invocations are
monomorphic rather than all going through a megamorphic site; this should
allow simple action methods to even be inlined in the future</li>
<li>Make specializer statistics cleanup much cheaper, meaning the specializer
thread can spend more time doing useful work</li>
</ul>

<p>The total time worked up to the end of August on the grant is <strong>144 hours
42 minutes</strong>, meaning that 55 hours and 18 minutes remain.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#529 - KöMaL for the math enthusiasts</title>
    <link rel="alternate" href="https://perlweekly.com/archive/529.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>A long long time ago, when I was in high school, I participated in the annual competition of <a href="https://www.komal.hu/">KöMaL, the Mathematical and Physical Journal for High Schools</a>. (Look for the little UK flag for the English version). Back then we sent in the solution by snail-mail and we only had to write our name to be identified. However people with very common names were asked to include a 3-digit number between their names. There was no verification that two people with the exact same name did not pick the same number, but the chances were slim. Because my name is way too common in Hungary I picked the number 529 because it is 23^2. Funnily, if you squint it also resembles the initials of my name: SzG</p>
<p>Anyway, if you or your kids like math, informatics, or physics, I'd recommend it!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/529.html</id>
    <published>2021-09-13T10:00:00Z</published>
    <updated>2021-09-13T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>How to show UTF-8 at the Windows command prompt </title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2021/09/how-to-show-utf-8-at-the-windows-command-prompt.html"/>
    <id>tag:blogs.perl.org,2021:/users/yuki_kimoto//2020.10417</id>
    <published>2021-09-13T06:17:40Z</published>
    <updated>2021-09-13T06:20:16Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>If you windows Perl user, It is good to know How to show UTF-8 at the Windows command prompt .</p>

<p><a href="https://perlzemi.com/blog/20210903122616.html">How to show UTF-8 at the Windows command prompt </a></p>

<p>One liner is yet buggy, however UTF-8 showing is good in Windows command prompt.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Two Exercises in Fundamental Data Structures</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/09/12#pwc129" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a tree and a node of the given tree. Write a script to find out the 
distance of the given node from the root.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Tree129{
    use boolean;  
    use Tie::RefHash;
    use Class::Struct; 

    package Node{
        use boolean;  
        use Class::Struct; 
        struct(
            value =&gt; q/$/,
        );  
        true; 
    }  

    package Edge{
        use boolean;  
        use Class::Struct; 
        struct(
            weight =&gt; q/$/,
            source =&gt; q/Node/,
            target =&gt; q/Node/
        );  
        true; 
    }  

    struct(
        root =&gt; q/Node/,
        edges =&gt; q/%/
    );   

    sub print_tree{ 
        my($self) = @_;   
        for my $edge_source (keys %{$self-&gt;edges()}){
            for my $target (@{$self-&gt;edges()-&gt;{$edge_source}}){
                print $edge_source-&gt;value() . "-&gt;" . $target-&gt;value() . "\n";
            }
        }
    }  

    sub distance{
        my($self, $target) = @_;
        my $distance = 0;
        return $distance if($self-&gt;root()-&gt;value() == $target);
        my @nodes = @{$self-&gt;edges()-&gt;{$self-&gt;root()}};
        my @edge_sources = keys %{$self-&gt;edges()};
        do{
            $distance++;
            return $distance if((grep {$_-&gt;value() == $target} @nodes) &gt; 0);
            my @child_nodes;
            for my $node (@nodes){
                my @k = grep {$_-&gt;value() == $node-&gt;value()} @edge_sources;
                push @child_nodes, @{$self-&gt;edges()-&gt;{$k[0]}} if $k[0] &amp;&amp; $self-&gt;edges()-&gt;{$k[0]};
            }
            @nodes = @child_nodes;
        }while(@nodes);
        return -1;
    }

    sub insert{
        my($self, $source, $target) = @_;   
        if(!$self-&gt;root()){      
            $self-&gt;root(new Node(value =&gt; $source));  
            tie %{$self-&gt;edges()}, "Tie::RefHash";
            $self-&gt;edges($self-&gt;root() =&gt; [new Node(value =&gt; $target)]);          
        }   
        else{
            my $found = false;
            for my $edge_source (keys %{$self-&gt;edges()}){
                if($edge_source-&gt;value() == $source){
                    push @{$self-&gt;edges()-&gt;{$edge_source}}, new Node(value =&gt; $target);
                    $found = true;
                }
            }
            if(!$found){
                $self-&gt;edges()-&gt;{new Node(value =&gt; $source)} = [new Node(value =&gt; $target)];
            }
        }
    }  
    true; 
}

package main{
    my $tree = new Tree129(); 
    $tree-&gt;insert(1, 2); 
    $tree-&gt;insert(1, 3); 
    $tree-&gt;insert(3, 4); 
    $tree-&gt;insert(4, 5); 
    $tree-&gt;insert(4, 6); 
    print $tree-&gt;distance(6) . "\n";
    print $tree-&gt;distance(5) . "\n";
    print $tree-&gt;distance(2) . "\n";
    print $tree-&gt;distance(4) . "\n";
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
3
3
1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;In the past, for this sort of problem, I would separate out the Tree package into 
its own file . Here I decided to keep everything in one file, but still divide everything
into the proper packages.&lt;/p&gt;

&lt;p&gt;While creating a Tree package from scratch was fun, getting that data structure correct
is just half the battle. Still need to solve the problem! To that end we need to start at
the root of the tree and then descend and count how many levels down the node is found, if
it exists. If not return -1.&lt;/p&gt;

&lt;p&gt;One issue is that to store the edges I use a hash with Nodes as keys. To use a Node 
instance as a key we need to use Tie::RefHash. There is a slight trick here though, to 
properly retrieve the value we need to access the keys using &lt;code&gt;keys&lt;/code&gt;. Here I store the keys 
in an array and &lt;code&gt;grep&lt;/code&gt; for a match. A slightly awkward requirement, but the work around is
easy enough.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two linked list having single digit positive numbers. Write a script to add
the two linked list and create a new linked representing the sum of the two linked list 
numbers. The two linked lists may or may not have the same number of elements.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList129{
    use boolean;
    use Class::Struct;

    package Node{
        use boolean;
        use Class::Struct;
        struct(
            value =&gt; q/$/,
            previous =&gt; q/Node/,
            next =&gt; q/Node/
        );
        true;
    }

    struct(
        head =&gt; q/Node/,
        tail =&gt; q/Node/,
        length =&gt; q/$/
    );

    sub stringify{
        my($self) = @_;
        my $s = $self-&gt;head()-&gt;value();
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;value();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;value() if $next-&gt;value();
        $s .= "\n"; 
        return $s;
    }

    sub stringify_reverse{
        my($self) = @_;
        my $s = $self-&gt;tail()-&gt;value();
        my $previous = $self-&gt;tail()-&gt;previous();
        while($previous &amp;&amp; $previous-&gt;previous()){
            $s .= " -&gt; " if $s; 
            $s = $s . $previous-&gt;value();
            $previous = $previous-&gt;previous();
        }
        $s = $s . " -&gt; " . $self-&gt;head()-&gt;value();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $value) = @_;
        if(!$self-&gt;head()){
            $self-&gt;head(new Node(value =&gt; $value, previous =&gt; undef, next =&gt; undef));
            $self-&gt;tail($self-&gt;head());
            $self-&gt;length(1);
        }
        else{
            my $current = $self-&gt;head();
            my $inserted = false;
            do{
                if(!$current-&gt;next()){
                    $current-&gt;next(new Node(value =&gt; $value, previous =&gt; $current, next =&gt; undef));
                    $inserted = true; 
                }
                $current = $current-&gt;next();
            }while(!$inserted);
            $self-&gt;tail($current);
            $self-&gt;length($self-&gt;length() + 1);
        }
        return $value;
    }

    sub add{
        my($self, $list) = @_;
        my $shortest = [sort {$a &lt;=&gt; $b} ($self-&gt;length(), $list-&gt;length())]-&gt;[0];
        my($x, $y) = ($self-&gt;tail(), $list-&gt;tail());
        my $sum = new LinkedList129();
        my $carry = 0;
        do{
            my $z;
            if($x &amp;&amp; $x-&gt;value() &amp;&amp; $y &amp;&amp; $y-&gt;value()){
                $z = $x-&gt;value() + $y-&gt;value() + $carry;
                ($x, $y) = ($x-&gt;previous(), $y-&gt;previous());
            }
            elsif($x &amp;&amp; $x-&gt;value() &amp;&amp; !$y){
                $z = $x-&gt;value() + $carry;
                ($x, $y) = ($x-&gt;previous(), undef);
            }
            elsif(!$x-&gt;value() &amp;&amp; $y-&gt;value()){
                $z = $y-&gt;value() + $carry;
                ($x, $y) = (undef, $y-&gt;previous());
            }
            if(length($z) == 2){
                $carry = 1;
                $sum-&gt;insert(int(substr($z, 1, 1)));
            }
            else{
                $carry = 0;
                $sum-&gt;insert($z);
            }

        }while($x || $y);
        return $sum;
    }
    true;
}

package main{
    my $l0 = new LinkedList129();
    $l0-&gt;insert(1);
    $l0-&gt;insert(2);
    $l0-&gt;insert(3);
    $l0-&gt;insert(4);
    $l0-&gt;insert(5);
    my $l1 = new LinkedList129();
    $l1-&gt;insert(6);
    $l1-&gt;insert(5);
    $l1-&gt;insert(5);
    my $sum = $l0-&gt;add($l1);
    print "    " . $l0-&gt;stringify();
    print "+\n";
    print "              " . $l1-&gt;stringify();
    print "---" x ($l0-&gt;length() * 2) . "\n";  
    print "    " . $sum-&gt;stringify_reverse();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
    1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5
+
              6 -&gt; 5 -&gt; 5
------------------------------
    1 -&gt; 3 -&gt; 0 -&gt; 0 -&gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My opinion on LinkedList problems may not be shared by the majority of Team PWC. I love
Linked List problems! &lt;/p&gt;

&lt;p&gt;Similar to the first part of Challenge 129 Class::Struct is used to create the data 
structure central tot he problem. This LinkedList implementation just has an &lt;code&gt;insert()&lt;/code&gt;
and two &lt;code&gt;stringify&lt;/code&gt; functions, along with the required &lt;code&gt;add()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem asks to sum two linked lists of single digit numbers. The &lt;code&gt;add()&lt;/code&gt; function
works in the same way that one would manually add the numbers. The sum of the two lists
is represented as a new Linked List, but to represent it properly it is output in reverse.
That should be fine for the purposes of this challenge. Other options are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function for inserting at the end of the list, insert at each addition step
&lt;/li&gt;
&lt;li&gt;holding the sum in an array and when &lt;code&gt;add()&lt;/code&gt; is finished with all list elements use the
existing &lt;code&gt;insert()&lt;/code&gt; and create a LinkedList instance to return by &lt;code&gt;shift&lt;/code&gt;ing off the 
array.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-129/"&gt;Challenge 129&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Class::Struct"&gt;Class::Struct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/Tie::RefHash"&gt;Tie::RefHash&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc129</id>
    <published>2021-09-12T23:53:00-04:00</published>
    <updated>2021-09-12T23:53:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5262678631760837780</id>
    <published>2021-09-11T16:10:00.000+02:00</published>
    <updated>2021-09-11T16:10:57.565+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclviii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049005&lt;/strong&gt; on 2021-09-09&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049004 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AAR/DBIx-Lite-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::Lite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Chained and minimal ORM &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2021-09-07&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 2 years, 8 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.23&lt;/strong&gt; on 2021-09-11&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.21 was 4 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.26&lt;/strong&gt; on 2021-09-08&lt;/li&gt;  &lt;li&gt;Votes: 68&lt;/li&gt;  &lt;li&gt;Previous version: 4.25 was 6 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/FAYLAND/Net-GitHub-1.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::GitHub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface for github.com &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.02&lt;/strong&gt; on 2021-09-08&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.01 was 1 year, 4 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Iterator-Rule-1.015' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Iterator::Rule&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Iterative, recursive file finder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.015&lt;/strong&gt; on 2021-09-09&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.014 was 3 years, 2 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.63' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.63&lt;/strong&gt; on 2021-09-10&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 1.62 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JWB/Proc-ProcessTable-0.612' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::ProcessTable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension to access the unix process table &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.612&lt;/strong&gt; on 2021-09-08&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.611 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9012' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9012&lt;/strong&gt; on 2021-09-10&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9011 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GFRANKS/Test-MockModule-v0.177.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::MockModule&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Override subroutines in a module for unit testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.177.0&lt;/strong&gt; on 2021-09-07&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v0.176.0 was 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.077' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.077&lt;/strong&gt; on 2021-09-06&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.076 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5262678631760837780/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclviii-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5262678631760837780"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5262678631760837780"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclviii-11-great-cpan-modules-released.html" title="(ccclviii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6106121584978385693</id>
    <published>2021-09-11T16:07:00.002+02:00</published>
    <updated>2021-09-11T16:07:37.489+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiv) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 38&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/09/11 14:07:22 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Generate" target="_blank"&gt;JSON::Schema::Generate&lt;/a&gt; - Generate JSON Schemas from data!&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Modern" target="_blank"&gt;JSON::Schema::Modern&lt;/a&gt; - Validate data against a schema&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::SchemaValidator" target="_blank"&gt;JSON::SchemaValidator&lt;/a&gt; - JSON Schema Validator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSONSchema::Validator" target="_blank"&gt;JSONSchema::Validator&lt;/a&gt; - Validator for JSON Schema Draft4/Draft6/Draft7 and OpenAPI Specification 3.0&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::POP3" target="_blank"&gt;Mail::POP3&lt;/a&gt; - A POP3 stand-alone forking daemon or inetd server&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::Equ" target="_blank"&gt;Syntax::Operator::Equ&lt;/a&gt; - equality operators that distinguish undef&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Mojo::Role::Log" target="_blank"&gt;Test::Mojo::Role::Log&lt;/a&gt; - Testing Mojo Log messages&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::XS" target="_blank"&gt;URI::XS&lt;/a&gt; - fast URI framework, compatible with classic URI.pm, with C++ interface&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sdif" target="_blank"&gt;App::sdif&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp" target="_blank"&gt;Carp&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Method::Modifiers" target="_blank"&gt;Class::Method::Modifiers&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::mysql" target="_blank"&gt;DBD::mysql&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::StrictMode" target="_blank"&gt;Devel::StrictMode&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus" target="_blank"&gt;FFI::Platypus&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk2" target="_blank"&gt;Gtk2&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk2::TrayIcon" target="_blank"&gt;Gtk2::TrayIcon&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3" target="_blank"&gt;Gtk3&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Packer" target="_blank"&gt;HTML::Packer&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=101)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::All" target="_blank"&gt;IO::All&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema" target="_blank"&gt;JSON::Schema&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::AsType" target="_blank"&gt;JSON::Schema::AsType&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Schema::Tiny" target="_blank"&gt;JSON::Schema::Tiny&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Validator" target="_blank"&gt;JSON::Validator&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AccessLog" target="_blank"&gt;Mojolicious::Plugin::AccessLog&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AssetPack" target="_blank"&gt;Mojolicious::Plugin::AssetPack&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IMAP::Simple" target="_blank"&gt;Net::IMAP::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::WebSocket::Server" target="_blank"&gt;Net::WebSocket::Server&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::ProcessTable" target="_blank"&gt;Proc::ProcessTable&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=64)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Bind" target="_blank"&gt;SQL::Bind&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::UI" target="_blank"&gt;Term::UI&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UV" target="_blank"&gt;UV&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Machine" target="_blank"&gt;Web::Machine&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Simple" target="_blank"&gt;Web::Simple&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML" target="_blank"&gt;YAML&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6106121584978385693/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/cdlxxxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6106121584978385693"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6106121584978385693"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/cdlxxxiv-metacpan-weekly-report.html" title="(cdlxxxiv) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Outreachy Perl internship 2021 successful completion</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreachy2021-complete"/>
  <id>tag:news.perlfoundation.org,2021-09-11:/post/outreachy2021-complete</id>
  <published>2021-09-11T10:24:43</published>
  <updated>2021-09-11T10:24:43</updated>
  <summary>
  <![CDATA[
     I am pleased to announce that the Outreachy internship concluded successfully again in 2021. As previously announced, The Perl Foundation accepted Rosheen Naeem as an intern for 2021 to work on Open Food Facts. Stéphane Gigandet provided mentorship for her during the entire program. I would like to congratulate both for the successful program completion and express gratitude for their hard work. Rosheen reported that she completed the following during 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Outreachy" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce that the Outreachy internship concluded successfully again in 2021.</p>

<p>As previously <a href="https://news.perlfoundation.org/post/outreachy2021-intro">announced</a>, The Perl Foundation accepted Rosheen Naeem as an intern for 2021 to work on Open Food Facts. Stéphane Gigandet provided mentorship for her during the entire program. I would like to congratulate both for the successful program completion and express gratitude for their hard work.</p>

<p>Rosheen reported that she completed the following during the internship:
* Worked on templatization of Perl scripts.
* Added template files for Perl functions and modules.
* Refactored the OpenFoodFacts Perl modules and functions. 
* Added Developer guide for the developers and newcomers.
* Updated the docker development documentation and added the producer’s platform section. 
* Worked on UI of few files.
* Worked on issues of OpenFoodFacts.
* Added Perl Pod documentation.
* Added new products and ingredients.
* Fixed the directory structure.</p>

<p>Rosheen also wrote about her experience in her <a href="https://roshnaeem.medium.com/">blog articles</a>.</p>

<p>Stéphane says:</p>

<p>"We were very fortunate and happy to get Rosheen’s help this summer to improve the Perl code quality of Open Food Facts. Thanks to Rosheen, we made a lot of progress to better structure our code and document it, and to separate business from display logic thanks to templatization with Template::Toolkit. Those improvements are very useful to make our codebase friendlier for new contributors and much more pleasant to work with!"</p>

<p><em>*Open Food Facts *</em></p>

<p><a href="https://world.openfoodfacts.org">Open Food Facts</a> is a Wikipedia for food products, a free, nonprofit, collaborative and open project to gather photos and data for millions of food products from around the world.</p>

<p><a href="https://github.com/openfoodfacts/openfoodfacts-server">Open Food Facts is written in Perl</a>, and the project is looking for Perl developers to extend the impact of free and open food information: internationalizing and improving algorithms to “understand” ingredients list, analyzing the healthiness and environmental friendliness of food products and computing their Nutri-Score and Eco-Score, and much more!</p>

<p>Stéphane also gave a talk about Open Food Facts at the Perl and Raku Conference 2021 (<a href="https://www.youtube.com/watch?v=imugl2dSdnU">video</a>). </p>

<p><strong>Outreachy</strong></p>

<p>Outreachy, formerly The Outreach Program for Women, was started by the GNOME Foundation in 2006 to encourage women to participate in the GNOME project. Since inception the project has grown to include many Free and Open Source organisations, including The Perl Foundation, and now the program has been rebranded and extended to encourage the participation of other underrepresented groups.</p>

<p>Outreachy explicitly invites applicants from around the world who are women (cis and trans), trans men, and genderqueer people. Additionally, they explicitly invite residents and nationals of the United States of any gender who are Black/African American, Hispanic/Latino, American Indian, Alaska Native, Native Hawaiian, or Pacific Islander. Anyone who faces systemic bias or discrimination in the technology industry of their country is invited to apply.</p>

<p><strong>Looking ahead</strong></p>

<p>The Perl Foundation is looking for mentors and project ideas for the next Outreachy rounds. If you have Perl or Raku project ideas, please contact makoto@perlfoundation.org. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#528 - Legacy Code</title>
    <link rel="alternate" href="https://perlweekly.com/archive/528.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How old is the Perl code that you work on currently?</p>
<p>Curtis wrote an interesting <a href="https://ovid.github.io/articles/a-simple-way-to-fix-legacy-code.html">blog post</a> talking about dealing with legacy code.</p>
<p>After a long time, I got the opportunity to work with good old CGI. It reminds me of my early learning days. Talking about CGI, I came across fun <a href="https://www.oasys.net/posts/migrating-a-perl-cgi-to-aws-lambda">blog post</a> talking about Migrating a Perl CGI application to AWS Lambda.</p>
<p>Please do share anything interesting you are trying using Perl. I am currently working on Elastic Search using Perl. As always CPAN provides great support e.g. <a href="https://metacpan.org/pod/Search::Elasticsearch">Search::Elasticsearch</a>.</p>
<p>What else changed in your routine?</p>
<p>For me, the school run is back. How about you?</p>
<p>Enjoy the rest of the newsletter. Hopefully next week we will have more perl blog posts.</p></div>
    </content>
    <id>https://perlweekly.com/archive/528.html</id>
    <published>2021-09-06T10:00:00Z</published>
    <updated>2021-09-06T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A Platform for Every Departing Sub-Matrix</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/09/05#pwc128" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given m x n binary matrix having 0 or 1. Write a script to find out maximum 
sub-matrix having only 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Tree::Suffix; 

sub maximum_sub_matrix{
    my @matrix = @_;
    my @sub_matrix;

    my %indices;  
    my @indices_maximum;
    my $indices_previous = "";
    my $indices_current = "";
    my $tree = new Tree::Suffix(); 
    for my $i (0 .. @matrix - 1){
        $indices_current = "";
        for my $j (0 .. @{$matrix[0]} - 1){
            $indices_current .= $j if $matrix[$i][$j] == 0;  
            $indices_current .= "x" if $matrix[$i][$j] == 1;  
        }
        $tree-&gt;insert($indices_current);  
        for my $n (2 .. @{$matrix[0]}){
            for my $s ($tree-&gt;longest_common_substrings(1, $n)){
                if(!$indices{$s}){
                    $indices{$s} = [$i - 1, $i];  
                }
                else{ 
                    push @{$indices{$s}}, $i - 1, $i; 
                } 
            }
        }
        $tree-&gt;remove($indices_previous) if $indices_previous; 
        $indices_previous = $indices_current; 
    } 
    for my $s (keys %indices){
        my $max_area = -1; 
        my @indices = sort {$a &lt;=&gt; $b} do {my %seen; grep { !$seen{$_}++} @{$indices{$s}}};  
        unless($indices[0] &lt; 0){
            my $area = 0;
            my $count = 0; 
            for(my $i = 0; $i &lt;=  @indices - 1; $i++){ 
                $count++; 
                $area += length($s) if $i == 0;
                $area += length($s) if $i &gt; 0 &amp;&amp; $indices[$i] == $indices[$i - 1] + 1;   
                do{$area = 0; $count = 0} if $i &gt; 0 &amp;&amp; $indices[$i] != $indices[$i - 1] + 1;  
            }
            if($area &gt;= $max_area){
                $max_area = $area; 
                push @indices_maximum, [$s, $count];      
            } 
        } 
    } 
    for (0 .. $indices_maximum[0][1] - 1){
        push @sub_matrix, [(0) x length($indices_maximum[0][0])];  
    }  
    return @sub_matrix; 
}

MAIN:{
    my @sub_matrix = maximum_sub_matrix(
        [1, 0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0]
    );
    for my $row (@sub_matrix){
        print "[" . join(" ", @{$row}) . "]\n"; 
    }  
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
[0 0]
[0 0]
[0 0]
$ perl perl/ch-1.pl
[0 0 0]
[0 0 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;At first this seemed like a very similar Dynamic Programming style approach like the one
used in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/06/20#pwc117"&gt;Challenge 117&lt;/a&gt; would
be suitable. The idea being to start with the top row and the track in a hash all the
different possible submatrices that arise as we work downwards in the matrix. While this
is definitely a DP problem tracking the possible submatrices in this way is completely
inefficient! Unlike the problem of Challenge 117 in which the possible paths descending
the triangle are all completely known and predictable, here a lot of extra work needs to 
be done. &lt;/p&gt;

&lt;p&gt;In order to determine overlap between the zeroes in successive rows of the matrix the rows
are converted to strings and then the common substrings are computed using Tree::Suffix.
Because we are looking for any possible overlap we need to repeat the common substring
search for different lengths. The process to do this is a bit cumbersome, but it does
work! So, at least the solution I had in mind ended up working but it's all so convoluted.
Clearly more elegant solutions exist. One positive feature here though is that multiple
maximum sized submatrices can be identified. In the example output you can see that two
solutions exist, both with an "area" of six. Here which one gets shown is just based on
the random ordering of the keys in &lt;code&gt;%indices&lt;/code&gt;, but determining all solutions could be
easily done. Since this was not part of the original challenge it was left undone.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of intervals. Write a script to determine conflicts between the 
intervals.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Date::Parse;
use Heap::MinMax;

sub number_platforms{
    my($arrivals, $departures) = @_;
    my $platforms = 0; 
    my $heap = new Heap::MinMax();
    $heap-&gt;insert(str2time(shift @{$departures}));  
    for my $i (0 .. @{$departures}){
        $platforms++ if str2time($arrivals-&gt;[$i]) &lt; $heap-&gt;min();  
        $heap-&gt;pop_min() if str2time($arrivals-&gt;[$i]) &gt;= $heap-&gt;min();  
        $heap-&gt;insert(str2time($departures-&gt;[$i]));  
    }    
    return $platforms; 
}

MAIN:{
    print number_platforms(
        ["11:20", "14:30"],
        ["11:50", "15:00"]
    ) . "\n"; 
    print number_platforms(
        ["10:20", "11:00", "11:10", "12:20", "16:20", "19:00"],
        ["10:30", "13:20", "12:40", "12:50", "20:20", "21:20"],
    ) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First, all times have to be converted to something numeric and so Date::Parse's &lt;code&gt;str2time&lt;/code&gt;
is used to convert the times to Unix epoch timestamps.&lt;/p&gt;

&lt;p&gt;Heaps are not usually something I commonly use, even for these challenge problems they
never seem to be convenient. Here though is a pretty standard use of a Heap! Here the use
of a Heap allows for easy access to the next departure time. If a train arrives before
the next departure, increase the number of platforms. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-128/"&gt;Challenge 128&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Date::Parse"&gt;Date::Parse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Heap::MinMax"&gt;Heap::MinMax&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Tree::Suffix"&gt;Tree::Suffix&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc128</id>
    <published>2021-09-05T23:59:00-04:00</published>
    <updated>2021-09-05T23:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6252804818034577771</id>
    <published>2021-09-04T22:43:00.000+02:00</published>
    <updated>2021-09-04T22:43:06.159+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclvii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049004&lt;/strong&gt; on 2021-09-03&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049001 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9723' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9723&lt;/strong&gt; on 2021-09-01&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9722 was 1 month, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.52&lt;/strong&gt; on 2021-09-03&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.51 was 1 month, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/IO-1.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl core IO modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.48&lt;/strong&gt; on 2021-09-01&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 7 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.23&lt;/strong&gt; on 2021-08-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.22 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.02&lt;/strong&gt; on 2021-08-28&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.01 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VANSTYN/RapidApp-1.3402' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;RapidApp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Turnkey ajaxy webapps &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3402&lt;/strong&gt; on 2021-08-31&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 1.3401 was 7 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9011' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9011&lt;/strong&gt; on 2021-08-31&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9010 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NWCLARK/Storable-3.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Storable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - persistence for Perl data structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.25&lt;/strong&gt; on 2021-08-30&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 3.15 was 2 years, 4 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.7.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.7.0&lt;/strong&gt; on 2021-09-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.5.0 was 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSCHOUT/Text-Template-1.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::Template&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Expand template text with embedded Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.60&lt;/strong&gt; on 2021-09-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 1.59 was 1 year, 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2021-08-29&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.67 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6252804818034577771/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclvii-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6252804818034577771"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6252804818034577771"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/09/ccclvii-12-great-cpan-modules-released.html" title="(ccclvii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Raku Foundation DBA and Trademark Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/raku-foundation-and-tm-update"/>
  <id>tag:news.perlfoundation.org,2021-09-02:/post/raku-foundation-and-tm-update</id>
  <published>2021-09-02T13:37:02</published>
  <updated>2021-09-02T13:37:02</updated>
  <summary>
  <![CDATA[
      Since 2012, Yet Another Society has also been officially known by its less confusing alias: The Perl Foundation.  Now, it has a new alias: The Raku Foundation.  Like the TPF alias, this new name is a dba – it doesn't change any of the realities of how YAS (aka TPF, aka TRF) is organized, governed, or structured.  Pretty much the only legal effect is to allow YAS to cash checks made out to "The Raku Foundation" in the same way it can cash ones made out to "The Perl Foundation".
   ]]>
  </summary>
  <author>
    <name>Daniel Sockwell</name>
  </author>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>A new alias</h2>

<p>Since 2012, Yet Another Society has also been officially known by a less confusing name: The Perl Foundation.  Now it has another alias: The Raku Foundation.  Like the TPF alias, this new name is a <a href="https://en.wikipedia.org/wiki/Trade_name">dba</a> – it doesn't change any of the realities of how YAS (aka TPF, aka TRF) is organized, governed, or structured.  Pretty much the only <em>legal</em> effect is to allow YAS to cash checks made out to "the Raku Foundation" in the same way it can cash ones made out to "The Perl Foundation".</p>

<p>In the short term, we're hopeful that this will make the sponsorship committee's job easier – the rich history connecting Perl and Raku is important to those of us in the communities, but we shouldn't need to explain that history to someone who just wants to fund Perl or Raku grants.  In the slightly longer term, I'm hopeful that having the two aliases will make it easier for the Perl and Raku communities to define ourselves as the separate (though philosophically aligned) languages that we are.  Perl and Raku share deep ties,but address different use cases, and having the "Raku Foundation" alias should help lay the groundwork for separating those use cases as we present ourself to a wider audience.</p>

<h2>Raku trademark rights secured</h2>

<p>The YAS legal committee hasn't just been involved in securing the dba; we've also been working to register "Raku" as a trademark.  Well, I say "we", but the vast majority of the credit should go to Nige Hamilton, who shepherded the effort through to completion.  I'm therefore happy to announce that we have now secured the Raku trademark in the United States, the United Kingdom, and the European Union.</p>

<p>Trademark rights are mostly something we hope never to need to use.  They would help us deal with situations such as someone claiming to represent Raku despite flouting our <a href="https://github.com/Raku/Raku-Steering-Council/blob/main/papers/code_of_conduct.md">Code of Conduct</a> or someone trying to sell a counterfeit "Raku".  I very much doubt anything like that will happen, but trademark rights are like backups – it's far better to have them and not need them than to need them and not have them.</p>

<h2>Laying foundations</h2>

<p>It's an exciting time for Raku – our first independent conference just concluded, the new dispatch system (and all the performance improvements that entails) just around the corner, and the Raku AST system and all the superpowers it will unlock (real macros!) not too much further behind.  In the midst of these technical and community milestones, it would be easy to neglect some of the more administrative/legal tasks.  But those tasks are vital, and neglecting them would be a mistake.  So a sincere thanks to Nige and all of the TPF volunteers for all the work they do to support the Perl and Raku communities.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Aug 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/09/01/list-of-new-cpan-distributions-aug-2021/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AI-Perceptron-Simple"&gt;AI-Perceptron-Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ELLEDNERA"&gt;ELLEDNERA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;A Newbie Friendly Module to Create, Train, Validate and Test Perceptrons / Neurons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-RtMidi"&gt;Alien-RtMidi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBARRETT"&gt;JBARRETT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Install RtMidi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-libvterm"&gt;Alien-libvterm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Alien wrapping for libvterm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-BPOMUtils"&gt;App-BPOMUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;List food types in BPOM processed food division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-DataDirUtils"&gt;App-DataDirUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;CLI utilities related to datadirs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-FileModifyUtils"&gt;App-FileModifyUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Utilities related to modifying files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-MineralUtils"&gt;App-MineralUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;Utilities related to minerals (and mineral supplements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-RouterColorizer"&gt;App-RouterColorizer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMASLAK"&gt;JMASLAK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.212300&lt;/td&gt;
&lt;td&gt;1.212302&lt;/td&gt;
&lt;td&gt;Colorize router CLI output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Tac_n"&gt;App-Tac_n&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.2&lt;/td&gt;
&lt;td&gt;tac with line numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-TaggedDirUtils"&gt;App-TaggedDirUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;CLI utilities related to tagged directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-TypecastTemplates"&gt;App-TypecastTemplates&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAMAWE"&gt;MAMAWE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.2.0&lt;/td&gt;
&lt;td&gt;v0.3.0&lt;/td&gt;
&lt;td&gt;Format records with different templates.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-achart"&gt;App-achart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;A program to print ASCII charts in the terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-grep-email"&gt;App-grep-email&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Print lines having email address(es) (optionally of certain criteria) in them&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bio-Epithelium"&gt;Bio-Epithelium&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;v0.1.4&lt;/td&gt;
&lt;td&gt;Perl extension for Biology &amp;#8211; CS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CPANPLUS-Dist-Debora"&gt;CPANPLUS-Dist-Debora&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VOEGELAS"&gt;VOEGELAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;Create Debian or RPM packages from Perl modules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CeeJay"&gt;CeeJay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CEEJAY"&gt;CEEJAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.3&lt;/td&gt;
&lt;td&gt;0.0.4&lt;/td&gt;
&lt;td&gt;All about me. Cee Jay&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Config-XrmDatabase"&gt;Config-XrmDatabase&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Pure Perl X Resource Manager Database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Crypt-SPAKE2Plus"&gt;Crypt-SPAKE2Plus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABBYPAN"&gt;ABBYPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;SPAKE2+ protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBI-Migration"&gt;DBI-Migration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;An easy way to start using migrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBI-Schema-Migration"&gt;DBI-Schema-Migration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;An easy way to start using migrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBIx-Schema-Migration"&gt;DBIx-Schema-Migration&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.01&lt;/td&gt;
&lt;td&gt;An easy way to start using migrations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DNS-NIOS"&gt;DNS-NIOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SSMN"&gt;SSMN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Perl binding for NIOS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Sah-Coerce-perl-To_array-From_str-csv_row"&gt;Data-Sah-Coerce-perl-To_array-From_str-csv_row&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Coerce a single CSV row to array of scalars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-ArchiveTar"&gt;Dist-Zilla-Plugin-ArchiveTar&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Create dist archives using  Archive::Tar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-Docker"&gt;Dist-Zilla-Plugin-Docker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MSCHOUT"&gt;MSCHOUT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Build docker image and upload to a docker repository&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-Libarchive"&gt;Dist-Zilla-Plugin-Libarchive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Create dist archives using Archive::Libarchive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dist-Zilla-Plugin-Module-Features"&gt;Dist-Zilla-Plugin-Module-Features&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Plugin to use when building Module::Features::* distribution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/End-Eval"&gt;End-Eval&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Take code from import arguments, then eval it in END block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/End-Eval-Env"&gt;End-Eval-Env&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Take code from environment variable(s), then eval it in END block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/End-Eval-FirstArg"&gt;End-Eval-FirstArg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Take code from first command-line argument, then eval it in END block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Feature-Compat-Defer"&gt;Feature-Compat-Defer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;make defer syntax available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/File-TreeCreate"&gt;File-TreeCreate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;recursively create a directory tree.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Future-IO-Impl-Tickit"&gt;Future-IO-Impl-Tickit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;implement Future::IO with Tickit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GFX-Enhancer"&gt;GFX-Enhancer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.14&lt;/td&gt;
&lt;td&gt;v0.1.17&lt;/td&gt;
&lt;td&gt;Perl extension for enhancing scanned in images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Grizzly"&gt;Grizzly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NOBUNAGA"&gt;NOBUNAGA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Grizzly &amp;#8211; A command-line interface for looking up stock quote.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTTP-Tiny-Plugin-NewestFirefox"&gt;HTTP-Tiny-Plugin-NewestFirefox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Set User-Agent to newest Firefox&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Healthchecks"&gt;Healthchecks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LDIDRY"&gt;LDIDRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;interact with Healthchecks API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Lingua-Poetry-Haiku-Finder"&gt;Lingua-Poetry-Haiku-Finder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;find poetry in the least poetic places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Markdown-Compiler"&gt;Markdown-Compiler&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SYMKAT"&gt;SYMKAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Perl Markdown Compiler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Markdown-Parser"&gt;Markdown-Parser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Markdown Parser Only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mock-Data"&gt;Mock-Data&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NERDVANA"&gt;NERDVANA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.00_001&lt;/td&gt;
&lt;td&gt;0.00_001&lt;/td&gt;
&lt;td&gt;Extensible toolkit for generating mock data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Module-Abstract"&gt;Module-Abstract&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Extract the abstract of a locally installed Perl module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-DOM-Role-Restrict"&gt;Mojo-DOM-Role-Restrict&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;The great new Mojo::DOM::Role::Restrict!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojolicious-Plugin-LinkedContent-v9"&gt;Mojolicious-Plugin-LinkedContent-v9&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EBRUNI"&gt;EBRUNI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;manage linked css and js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Music-Beets-Info"&gt;Music-Beets-Info&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;Import data from Beets database into a perl data structure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-Dimona"&gt;Net-Dimona&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GARU"&gt;GARU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;acesso r&amp;Atilde;&amp;iexcl;pido &amp;Atilde;&amp;nbsp; API de print-on-demand da Dimona.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-SNMP-Mixin-ArubaCX-Dot1qFdb"&gt;Net-SNMP-Mixin-ArubaCX-Dot1qFdb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GAISSMAI"&gt;GAISSMAI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;mixin class for ArubaCX switch forwarding databases&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-SNMP-Mixin-ArubaCX-VlanStatic"&gt;Net-SNMP-Mixin-ArubaCX-VlanStatic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GAISSMAI"&gt;GAISSMAI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;mixin class for ArubaCX static vlan info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Number-Pad"&gt;Number-Pad&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Pad numbers so the decimal point (or &amp;quot;E&amp;quot; if in exponential notation) align&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Object-Pad-ClassAttr-Struct"&gt;Object-Pad-ClassAttr-Struct&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;declare an Object::Pad class to be struct-like&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Object-Pad-SlotAttr-Isa"&gt;Object-Pad-SlotAttr-Isa&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;apply class type constraints to Object::Pad slots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Object-Pad-SlotAttr-LazyInit"&gt;Object-Pad-SlotAttr-LazyInit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;lazily initialise Object::Pad slots at first read&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pod-Reader"&gt;Pod-Reader&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MONSIEURP"&gt;MONSIEURP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;1.020&lt;/td&gt;
&lt;td&gt;curses TUI to read Perl POD from.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pod-Weaver-Plugin-Module-Features"&gt;Pod-Weaver-Plugin-Module-Features&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Plugin to use when building distribution that has feature definer or featurer declarer modules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RT-Extension-ShareSearchLink"&gt;RT-Extension-ShareSearchLink&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJWOOD"&gt;AJWOOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;RT-Extension-ShareSearchLink Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Redis-OpenTracing"&gt;Redis-OpenTracing&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VANHOESEL"&gt;VANHOESEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.4&lt;/td&gt;
&lt;td&gt;Wrap Redis inside OpenTracing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Regexp-Pattern-Email"&gt;Regexp-Pattern-Email&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Regexp patterns related to email&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Setup-File-Line"&gt;Setup-File-Line&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Insert/delete a line in a file (with undo support)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Syntax-Operator-Divides"&gt;Syntax-Operator-Divides&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;an infix operator for division test&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Syntax-Operator-Equ"&gt;Syntax-Operator-Equ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;equality operators that distinguish undef&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Template-Plugin-AutoDate"&gt;Template-Plugin-AutoDate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NERDVANA"&gt;NERDVANA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.90&lt;/td&gt;
&lt;td&gt;Enhance Template Toolkit with easy access to DateTime and DateTime::Format::Flexible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tickit-Widget-Entry-Plugin-Completion"&gt;Tickit-Widget-Entry-Plugin-Completion&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;add word-completion logic to a Tickit::Widget::Entry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tie-Array-IntSpan"&gt;Tie-Array-IntSpan&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Tied-array interface for Array::IntSpan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Unisyn-Parse"&gt;Unisyn-Parse&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20210720&lt;/td&gt;
&lt;td&gt;20210830&lt;/td&gt;
&lt;td&gt;Parse a Unisyn expression.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/oCLI"&gt;oCLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SYMKAT"&gt;SYMKAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Opinionated Command Line Interface&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;65&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;32&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SYMKAT"&gt;SYMKAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GAISSMAI"&gt;GAISSMAI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NERDVANA"&gt;NERDVANA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MONSIEURP"&gt;MONSIEURP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CEEJAY"&gt;CEEJAY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ELLEDNERA"&gt;ELLEDNERA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LDIDRY"&gt;LDIDRY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VANHOESEL"&gt;VANHOESEL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EBRUNI"&gt;EBRUNI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JBARRETT"&gt;JBARRETT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMASLAK"&gt;JMASLAK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NOBUNAGA"&gt;NOBUNAGA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MSCHOUT"&gt;MSCHOUT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABBYPAN"&gt;ABBYPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/AJWOOD"&gt;AJWOOD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PRBRENAN"&gt;PRBRENAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VOEGELAS"&gt;VOEGELAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MAMAWE"&gt;MAMAWE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SSMN"&gt;SSMN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WOLDRICH"&gt;WOLDRICH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GARU"&gt;GARU&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-Perceptron-Simple ELLEDNERA 1.00 1.02 A Newbie Friendly Module to Create, Train, Validate and Test Perceptrons / Neurons Alien-RtMidi JBARRETT 0.01 0.02 Install RtMidi Alien-libvterm PEVANS 0.01 0.01 Alien wrapping for libvterm App-BPOMUtils PERLANCAR 0.001 0.002 List food types in BPOM processed food division App-DataDirUtils PERLANCAR 0.001 0.003 CLI utilities related … <a href="https://perlancar.wordpress.com/2021/09/01/list-of-new-cpan-distributions-aug-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Aug 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1951</id>
    <published>2021-09-01T04:27:00Z</published>
    <updated>2021-09-01T04:27:00Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#527 - New school-year?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/527.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The number of posts has been really low in the last couple of weeks. I really hope that with the new school-year in the northern hemisphere, we'll see an uptick in Perl-related content.</p>
<p>Other:</p>
<p>I just saw a Tweet explaining why the person does not wear a mask. He writes because he is vaccinated he isn't likely to be infected and <b>he accepts the risks</b>. Well, I really try to avoid arguing with strangers on the Internet so I did not write to him, but basically he said that <b>he accepts the risk of endangering others</b>.</p>
<p>In reality he spread two types of viruses. Potentially he spreads the Covid19 virus and for sure he spreads the idea that not caring for others is acceptable. For one, people who are unsure about the masks, seeing him without a mask will more likely stop wearing masks too.</p>
<p>Get vaccinated if you can and wear a mask when among people!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/527.html</id>
    <published>2021-08-30T10:00:00Z</published>
    <updated>2021-08-30T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Conflicting Lists and Intervals</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/08/29#pwc127" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two sets with unique numbers. Write a script to figure out if they are 
disjoint.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub disjoint{
    my($list1, $list2) = @_;
    my @a = map { my $n = $_; grep  $n == $_ , @{$list2} }  @{$list1};
    return boolean(@a == 0);#boolean() used for better stringification
}

MAIN:{
    my(@S1, @S2);
    @S1 = (1, 2, 5, 3, 4);
    @S2 = (4, 6, 7, 8, 9);
    print disjoint(\@S1, \@S2) . "\n";
    @S1 = (1, 3, 5, 7, 9);
    @S2 = (0, 2, 4, 6, 8);
    print disjoint(\@S1, \@S2) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I cannot think of a way of determining conflicts between these two lists which is all that
more efficient than comparing them in this way. Sorting helps a little in some cases but 
if the overlapping element(s) are at the end of the sorted list you need to traverse the 
entire list anyway. Sorting would help the average case and since we need only find one 
overlapping element and then stop looking this would have some noticeable effect in the 
case of very large lists. But then I'd have to write a for-loop in order to break out of
the loop early and instead I wanted to experiment with this &lt;code&gt;grep&lt;/code&gt; inside a &lt;code&gt;map&lt;/code&gt;
construct! This worked without too much hassle, the only consideration really being to 
assign map's list value alias &lt;code&gt;$_&lt;/code&gt; to a variable so as to not conflict with grep's &lt;code&gt;$_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The use of &lt;code&gt;boolean()&lt;/code&gt; is just to make sure that a 1 or 0 is printed as the final result.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of intervals. Write a script to determine conflicts between the 
intervals.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub conflicts{
    my @intervals = @_;
    my @conflicts;
    @intervals = sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] } @intervals;
    {
        my $interval = pop @intervals;
        my($i, $j) = @{$interval};
        for $interval (@intervals){
            my($m, $n) = @{$interval};
            do { unshift @conflicts, [$i, $j]; last } if $i &gt;= $m &amp;&amp; $i &lt;= $n;
        }
        redo if @intervals;
    }
    return @conflicts;
}

MAIN:{
    my(@Intervals);
    @Intervals = ([1, 4], [3, 5], [6, 8], [12, 13], [3, 20]);
    map { print "[" . join(", ", @{$_}) . "] " } conflicts(@Intervals);
    print "\n";
    @Intervals = ([3, 4], [5, 7], [6, 9], [10, 12], [13, 15]);
    map { print "[" . join(", ", @{$_}) . "] " } conflicts(@Intervals);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
[3, 5] [3, 20]
[6, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The examples given in the problem statement are with the &lt;code&gt;[minimum, maximum]&lt;/code&gt; intervals 
sorted by the maximum value. This makes the problem a bit easier since then we need only
check to see, when working down the sorted list, if the minimum is in one of the other
intervals.&lt;/p&gt;

&lt;p&gt;Since it isn't totally clear if this is something that should be assumed for all inputs
I added a sort in &lt;code&gt;conflicts()&lt;/code&gt; to ensure this is the case.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-127/"&gt;Challenge 127&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25818.html"&gt;C++ solution for Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/25919.html"&gt;C++ solution for Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/DisjointSets.html"&gt;Disjoint Sets&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc127</id>
    <published>2021-08-29T17:18:00-04:00</published>
    <updated>2021-08-29T17:18:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#526 - Politics in Programming?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/526.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>I came across a blog post by Curtis titled <a href="https://ovid.github.io/blog/politics-in-programming.html">Politics in Programming</a>. As is always the case, it touched on sensitive topics. You may or may not agree with his point of view but it is worth a read, IMHO.</p>
<p>Let me confess, ever since Cor was renamed to Corinna, I always double check whether there is a double "r" or a double "n" in the name. I get it wrong all the time. Joking apart, I am very happy that Corinna is being discussed on so many different public platforms, a BIG thanks to Curtis and his team.</p>
<p>There was another topic discussed on Facebook, "Data structures in Perl". It brought back some good old memories of when I was first introduced to Perl. I came from a C background, so you would assume the transition would have been smooth. That wasn't the case for me. I had a hard time getting my head around "references" in Perl. Once I passed that hurdle, the next disaster was waiting for me, i.e. "regex". I had no clue about it before. It took me a while to get hold of it. Even after 22 years of working with Perl, I still find regex magic that I have never seen before, thanks to Abigail contributions to <a href="https://github.com/manwar/perlweeklychallenge-club">the weekly challenge</a>. The next big thing I dealt with after regex was "network programming". The best book to understand the subject is <a href="https://www.oreilly.com/library/view/network-programming-with/0201615711/">Network Programming with Perl</a> by Lincoln D. Stein, imho.</p>
<p>Did you notice, I didn't mention OO in Perl yet?</p>
<p>It is only because I got the opportunity to actually use OO programming very late in my career. The first book that I read on the subject was <a href="https://www.manning.com/books/object-oriented-perl">Object Oriented Perl</a> by Damian Conway. It was the first book by Damian that I read and I completely fell in love with it. Of course, how can I miss the next one by Damian, <a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/">Perl Best Practices</a>. I am happy to see Damian giving a thumbs up to the Corinna project headed by Curtis in his recent blog post, <a href="http://blogs.perl.org/users/damian_conway/2021/08/a-dream-realized.html">A dream realized</a>. About the future of OO in core Perl, I am not too worried as it is in safe hands now.</p>
<p>A fellow member of Team PWC, Adam Russell, started a Discord server for the purposes of discussing more academic Computer Science type topics, as they relate to Perl. If you are keen to join then please follow the <a href="https://discord.gg/Ng9nrdDg">invitation</a>.</p>
<p>School holidays are coming to an end soon, at least in the UK, so enjoy it while it lasts. Don't forget to keep a safe distance and use a mask in public places. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/526.html</id>
    <published>2021-08-23T10:00:00Z</published>
    <updated>2021-08-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
</feed>
