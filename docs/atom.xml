<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-04-30T04:39:19Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76133522</id>
        <re:rank scheme="https://stackoverflow.com">1</re:rank>
        <title type="text">How to replicate use/import literal argument handling for a subroutine?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
        <author>
            <name>drclaw</name>
            <uri>https://stackoverflow.com/users/6794384</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76133522/how-to-replicate-use-import-literal-argument-handling-for-a-subroutine"/>
        <published>2023-04-28T22:00:24Z</published>
        <updated>2023-04-29T22:29:23Z</updated>
        <summary type="html">
            &lt;p&gt;The behaviour I'm after is documented in Perldoc for &lt;code&gt;Exporter&lt;/code&gt;. It lists three cases for importing based on not only the number of arguments but if arguments were specified at all:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;use YourModule;&lt;/p&gt;
&lt;p&gt;This imports all the symbols from YourModule's @EXPORT into the namespace of the use statement.&lt;/p&gt;
&lt;p&gt;use YourModule ();&lt;/p&gt;
&lt;p&gt;import any symbols.&lt;/p&gt;
&lt;p&gt;use YourModule qw(...);&lt;/p&gt;
&lt;p&gt;This imports only the symbols listed by the caller into their
namespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How do I write a sub which knows if literal arguments are specified AND if so how many?&lt;/p&gt;
&lt;p&gt;This is easy to do with variables as a reference to an array can be used and dereferenced in the sub, or if &lt;code&gt;undef&lt;/code&gt; considered as no arguments provided:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sub my_sub(){

  if(@_ and ref $arg eq &amp;quot;ARRAY&amp;quot;){
    # Argument provided and is an array
    # Count them, could be zero
    my $arg=shift;
    my $count=$arg-&amp;gt;@*;
    
  }
  else{
    # No argument or not an array ref
  }
  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However it’s the literal values I want to work with and I can’t get to work as the &lt;code&gt;Exporter&lt;/code&gt; description above. I’ve played with the prototype &lt;code&gt;;+@&lt;/code&gt; which sort of works. However a literal list passed in is only available in scalar context and has to be within a extra level of &lt;code&gt;()&lt;/code&gt;. This gives &lt;code&gt;undef&lt;/code&gt; for an empty list, but also only gives the last element in the list to the subroutine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sub test :prototype(;+@){
 say $_ for @_
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling as &lt;code&gt;test()&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; prints nothing, indicated that the &lt;code&gt;@_&lt;/code&gt; is empty.&lt;/p&gt;
&lt;p&gt;Calling as &lt;code&gt;test(())&lt;/code&gt; prints an empty line, indicated an undef value.&lt;/p&gt;
&lt;p&gt;Calling as &lt;code&gt;test((10,12,13))&lt;/code&gt; prints 13 only. Scalar context on list?&lt;/p&gt;
&lt;p&gt;Calling as &lt;code&gt;test(1,2,3)&lt;/code&gt; or &lt;code&gt;test 1,2,3&lt;/code&gt; prints the numbers one to a line.&lt;/p&gt;
&lt;p&gt;How can I tell if the subroutine is called with no literal arguments &lt;code&gt;test&lt;/code&gt; and literal (possibly empty list) &lt;code&gt;test ()&lt;/code&gt; and also handle normal &lt;code&gt;test ('arg',...)&lt;/code&gt; and still have access the arguments?&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <author>
      <name>/u/niceperl</name>
      <uri>https://www.reddit.com/user/niceperl</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/niceperl"&gt; /u/niceperl &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxlii-21-great-cpan-modules-released.html"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/1334rb6/cdxlii_21_great_cpan_modules_released_last_week/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_1334rb6</id>
    <link href="https://www.reddit.com/r/perl/comments/1334rb6/cdxlii_21_great_cpan_modules_released_last_week/"/>
    <updated>2023-04-29T19:41:10+00:00</updated>
    <published>2023-04-29T19:41:10+00:00</published>
    <title>(cdxlii) 21 great CPAN modules released last week</title>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-228646925335539339</id>
    <published>2023-04-29T21:40:00.003+02:00</published>
    <updated>2023-04-29T21:40:37.729+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlii) 21 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.061001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.061001&lt;/strong&gt; on 2023-04-27, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.061000 was 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/OLIVER"&gt;OLIVER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ANDK/CPAN-2.35" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CPAN&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - query, download and build perl modules from CPAN sites
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.35&lt;/strong&gt; on 2023-04-27, with 38 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.34 was 1 year, 10 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ANDK"&gt;ANDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/MIK/CryptX-0.078" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.078&lt;/strong&gt; on 2023-04-28, with 49 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.077 was 8 months, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/MIK"&gt;MIK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/PJCJ/Devel-Cover-1.39" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Devel::Cover&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Code coverage metrics for Perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2023-04-28, with 100 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.38 was 10 months, 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/PJCJ"&gt;PJCJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/MIKIHOSHI/Devel-Cover-Report-Coveralls-0.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Devel::Cover::Report::Coveralls&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - coveralls backend for Devel::Cover
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.32&lt;/strong&gt; on 2023-04-25, with 18 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.31 was 1 year, 2 months, 25 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/MIKIHOSHI"&gt;MIKIHOSHI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/SIMBABQUE/libwww-perl-6.69" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;6.69&lt;/strong&gt; on 2023-04-29, with 162 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 6.68 was 2 months, 2 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/LEONT/Module-Build-0.4234" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build and install Perl modules
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.4234&lt;/strong&gt; on 2023-04-28, with 45 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.4232 was 4 months, 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/LEONT/Module-Build-Tiny-0.044" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Build::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny replacement for Module::Build
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.044&lt;/strong&gt; on 2023-04-28, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.043 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/BINGOS/Module-CoreList-5.20230423" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230423&lt;/strong&gt; on 2023-04-23, with 42 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230420 was 3 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ETHER/Module-Install-1.21" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Install&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Standalone, extensible Perl module installer
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2023-04-28, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.19 was 5 years, 4 months, 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ETHER/Module-Metadata-1.000038" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Metadata&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Gather package and POD information from perl module files
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.000038&lt;/strong&gt; on 2023-04-28, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.000037 was 3 years, 7 months, 21 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/release/SHAY/perl-5.36.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- The Perl 5 language interpreter
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.036001&lt;/strong&gt; on 2023-04-23, with 407 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.36.0 was 10 months, 26 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SHAY"&gt;SHAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/RJBS/Perl-PrereqScanner-1.100" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Perl::PrereqScanner&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a tool to scan your Perl code for its prerequisites
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.100&lt;/strong&gt; on 2023-04-27, with 22 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.025 was 3 months, 26 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/RJBS"&gt;RJBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.971008" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.971008&lt;/strong&gt; on 2023-04-27, with 29 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.971002 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ETHER/Sub-Name-0.27" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Sub::Name&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - (Re)name a sub
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.27&lt;/strong&gt; on 2023-04-29, with 29 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.26 was 3 years, 6 months, 24 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/KUERBIS/Term-Choose-1.761" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.761&lt;/strong&gt; on 2023-04-28, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.760 was 22 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KUERBIS"&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/EXODIST/Test-Simple-1.302195" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.302195&lt;/strong&gt; on 2023-04-28, with 184 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.302194 was 1 month, 14 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/EXODIST/Test2-Harness-1.000152" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.000152&lt;/strong&gt; on 2023-04-29, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.000151 was 1 month, 21 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/EXODIST/Test2-Suite-0.000155" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.000155&lt;/strong&gt; on 2023-04-28, with 41 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.000150 was 1 month, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/SIMBABQUE/URI-5.18" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative)
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.18&lt;/strong&gt; on 2023-04-29, with 108 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.17 was 5 months, 27 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.17" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.17&lt;/strong&gt; on 2023-04-27, with 96 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.16 was 2 months, 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/228646925335539339/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxlii-21-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/228646925335539339"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/228646925335539339"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxlii-21-great-cpan-modules-released.html" title="(cdxlii) 21 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-530349129339638376</id>
    <published>2023-04-29T21:35:00.000+02:00</published>
    <updated>2023-04-29T21:35:09.773+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dliv) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 95&lt;/p&gt;
&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/29 19:33:29 GMT&lt;/p&gt;&lt;br/&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AsciiDB::TagFile" target="_blank"&gt;AsciiDB::TagFile&lt;/a&gt; - Tie class for a simple ASCII database&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Closure::Attributes" target="_blank"&gt;autobox::Closure::Attributes&lt;/a&gt; - closures are objects are closures&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Ceph::Rados" target="_blank"&gt;Ceph::Rados&lt;/a&gt; - Perl wrapper to librados.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Simple" target="_blank"&gt;Class::Simple&lt;/a&gt; - Simple Object-Oriented Base Class&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/EV::Hiredis" target="_blank"&gt;EV::Hiredis&lt;/a&gt; - Asynchronous redis client using hiredis and EV&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Cluster" target="_blank"&gt;Exporter::Cluster&lt;/a&gt; - Extension for easy multiple module imports.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::NoWork" target="_blank"&gt;Exporter::NoWork&lt;/a&gt; - an easier way to export functions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Extension" target="_blank"&gt;File::Extension&lt;/a&gt; - Lookup file extensions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::MagicPP" target="_blank"&gt;File::MagicPP&lt;/a&gt; - &lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Hadoop::HDFS::Command" target="_blank"&gt;Hadoop::HDFS::Command&lt;/a&gt; - Wrappers for various hadoop hdfs cli commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::LinkParser" target="_blank"&gt;Lingua::LinkParser&lt;/a&gt; - Perl module implementing the Link Grammar Parser by Sleator, Temperley and Lafferty at CMU.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Macro::Simple" target="_blank"&gt;Macro::Simple&lt;/a&gt; - preprocessor-like macros in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MCDB_File" target="_blank"&gt;MCDB_File&lt;/a&gt; - Perl extension for access to mcdb constant databases &lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ModsPragma" target="_blank"&gt;ModsPragma&lt;/a&gt; - easy one-stop module shopping&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Noid" target="_blank"&gt;Noid&lt;/a&gt; - nice opaque identifier generator commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Repository::Simple" target="_blank"&gt;Repository::Simple&lt;/a&gt; - Simple heirarchical repository for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/rig" target="_blank"&gt;rig&lt;/a&gt; - Bundle up your favorite modules and imports into one call&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Secret::Simple" target="_blank"&gt;Secret::Simple&lt;/a&gt; - Secure secrets in configurations and code&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SHA256" target="_blank"&gt;SHA256&lt;/a&gt; - a module that implements the NIST SHA-256 hash&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Spreadsheet::Perl" target="_blank"&gt;Spreadsheet::Perl&lt;/a&gt; - Pure Perl implementation of a spreadsheet engine&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Contract" target="_blank"&gt;Sub::Contract&lt;/a&gt; - Pragmatic contract programming for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::VisualPrintf" target="_blank"&gt;Text::VisualPrintf&lt;/a&gt; - printf family functions to handle Non-ASCII characters&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Alias" target="_blank"&gt;Tie::Alias&lt;/a&gt; - create aliases in pure perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Comma" target="_blank"&gt;Tie::Comma&lt;/a&gt; - A simple and easy way to format numbers with commas, using a tied hash.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Coupler" target="_blank"&gt;Tie::Coupler&lt;/a&gt; - Tie based implementation of coupled scalars&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::Array::CustomStorage" target="_blank"&gt;Tie::Hash::Array::CustomStorage&lt;/a&gt; - Tie array and value storage&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::OffsetArray" target="_blank"&gt;Tie::OffsetArray&lt;/a&gt; - Tie one array to another, with index offset&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Subset" target="_blank"&gt;Tie::Subset&lt;/a&gt; - Tie an array or hash to a subset of another array or hash, respectively&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::SymlinkTree" target="_blank"&gt;Tie::SymlinkTree&lt;/a&gt; - fast searches through complex perl structures/ties&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Util" target="_blank"&gt;Tie::Util&lt;/a&gt; - Utility functions for fiddling with tied variables&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Value::Object" target="_blank"&gt;Value::Object&lt;/a&gt; - Base class for minimal Value Object classes&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=274)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=65)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Nopaste" target="_blank"&gt;App::Nopaste&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Utils" target="_blank"&gt;Array::Utils&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Attean" target="_blank"&gt;Attean&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox" target="_blank"&gt;autobox&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Base64" target="_blank"&gt;autobox::Base64&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Core" target="_blank"&gt;autobox::Core&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Junctions" target="_blank"&gt;autobox::Junctions&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Transform" target="_blank"&gt;autobox::Transform&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autodie" target="_blank"&gt;autodie&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=99)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=120)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Alias" target="_blank"&gt;Data::Alias&lt;/a&gt; (+1=17)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Domain" target="_blank"&gt;Data::Domain&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Simple" target="_blank"&gt;Date::Simple&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=284)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Doit" target="_blank"&gt;Doit&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dot" target="_blank"&gt;Dot&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus" target="_blank"&gt;FFI::Platypus&lt;/a&gt; (+1=59)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ExtAttr" target="_blank"&gt;File::ExtAttr&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin::libs" target="_blank"&gt;FindBin::libs&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Lambda" target="_blank"&gt;IO::Lambda&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lazy" target="_blank"&gt;lazy&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::xi" target="_blank"&gt;lib::xi&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/match::simple" target="_blank"&gt;match::simple&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mem" target="_blank"&gt;mem&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Method::Signatures" target="_blank"&gt;Method::Signatures&lt;/a&gt; (+1=39)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=61)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Load" target="_blank"&gt;Module::Load&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SMTP::Client" target="_blank"&gt;Mojo::SMTP::Client&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=325)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace::autoclean" target="_blank"&gt;namespace::autoclean&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::::RabbitMQ" target="_blank"&gt;Net::::RabbitMQ&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Hadoop::WebHDFS" target="_blank"&gt;Net::Hadoop::WebHDFS&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Subnet" target="_blank"&gt;Net::Subnet&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/NetAddr::IP" target="_blank"&gt;NetAddr::IP&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/P" target="_blank"&gt;P&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=177)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=407)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/POD2::RU" target="_blank"&gt;POD2::RU&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply" target="_blank"&gt;Reply&lt;/a&gt; (+1=59)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=24)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Autobox" target="_blank"&gt;Shell::Autobox&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Simple::Accessor" target="_blank"&gt;Simple::Accessor&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=43)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Junction" target="_blank"&gt;Syntax::Keyword::Junction&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/System::Sub" target="_blank"&gt;System::Sub&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=184)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Levenshtein::Flexible" target="_blank"&gt;Text::Levenshtein::Flexible&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ParseWords" target="_blank"&gt;Text::ParseWords&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::SaveLater" target="_blank"&gt;Tie::SaveLater&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Simple" target="_blank"&gt;Tie::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=55)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Var::Pairs" target="_blank"&gt;Var::Pairs&lt;/a&gt; (+1=11)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Want" target="_blank"&gt;Want&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=96)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/XXX" target="_blank"&gt;XXX&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/530349129339638376/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/530349129339638376"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/530349129339638376"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliv-metacpan-weekly-report.html" title="(dliv) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76030174</id>
        <re:rank scheme="https://stackoverflow.com">-1</re:rank>
        <title type="text">How to enable error messages from `prove`?</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="perl-prove"/>
        <author>
            <name>Eugen Konkov</name>
            <uri>https://stackoverflow.com/users/4632019</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76030174/how-to-enable-error-messages-from-prove"/>
        <published>2023-04-16T20:30:32Z</published>
        <updated>2023-04-29T14:15:56Z</updated>
        <summary type="html">
            &lt;p&gt;This is the simple perl test which has syntax errors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo 'foo+' &amp;gt; t1.t
$ perl t1.t
syntax error at t1.t line 1, at EOF
Execution of t1.t aborted due to compilation errors.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is there a way to provide some option to &lt;code&gt;prove&lt;/code&gt; utility to see that error message? Currently if I run that test with prove I can not understand what is wrong with it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ prove -v t1.t
Dubious, test returned 255 (wstat 65280, 0xff00)
No subtests run 

Test Summary Report
-------------------
t1.t (Wstat: 65280 Tests: 0 Failed: 0)
  Non-zero exit status: 255
  Parse errors: No plan found in TAP output
Files=1, Tests=0,  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
Result: FAIL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case &lt;code&gt;t1.t&lt;/code&gt; test is much complex (I can not pastebin its code) and I can run it directly with &lt;code&gt;perl&lt;/code&gt; without any problem, but I can not run it by &lt;code&gt;prove&lt;/code&gt;. Because of errors like above. So I am trying to find a way to see actual reason of failing test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPD&lt;/strong&gt;&lt;br /&gt;
Detailed debug information: &lt;a href="https://pastebin.com/gqMbdTb8" rel="nofollow noreferrer"&gt;https://pastebin.com/gqMbdTb8&lt;/a&gt;&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/53175c6044c7d25c802103a5b633716908e9ad91</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/53175c6044c7d25c802103a5b633716908e9ad91"/>
    <title>
        replace "define\t" with "define " in most "normal" core files.
    </title>
    <updated>2023-04-29T07:09:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;replace &amp;quot;define\t&amp;quot; with &amp;quot;define &amp;quot; in most &amp;quot;normal&amp;quot; core files.

The main exceptions being dist/, ext/, and Configure related
files, which will be updated in a subsequent commit. Files in the cpan/
directory are also omitted as they are not owned by the core.

&amp;#39;#define&amp;#39; has seven characters, so following it with a \t makes it look
like &amp;#39;#define &amp;#39; when it is not, which then frustrates attempts to find
where a given define is. If you *know* then you do a

    git grep -P &amp;#39;define\s+WHATEVER&amp;#39;

but if don&amp;#39;t or you forget, you can get very confused trying to find
where a given define is located. This fixes all such cases so they
actually are &amp;#39;define WHATEVER&amp;#39; instead.

If this patch is getting in your way with blame analysis then view it
with the -w option to blame.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/638721ede9195d09472125f1734858156081a25e</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/638721ede9195d09472125f1734858156081a25e"/>
    <title>
        ext/SDBM_File/ - replace "define\t" with "define "
    </title>
    <updated>2023-04-29T07:09:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;ext/SDBM_File/ - replace &amp;quot;define\t&amp;quot; with &amp;quot;define &amp;quot;

&amp;quot;#define\t&amp;quot; is annoying as it is it 8 spaces wide, so it looks like
&amp;quot;#define &amp;quot;, yet will not be found in a grep for &amp;quot;define foo&amp;quot; as the
space is actually a tab.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/03fadc172637749a774ce276b5499e8da3f64935</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/03fadc172637749a774ce276b5499e8da3f64935"/>
    <title>
        ext/File-Glob/ - replace "define\t" with "define "
    </title>
    <updated>2023-04-29T07:09:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;ext/File-Glob/ - replace &amp;quot;define\t&amp;quot; with &amp;quot;define &amp;quot;

&amp;quot;#define\t&amp;quot; is annoying as it is it 8 spaces wide, so it looks like
&amp;quot;#define &amp;quot;, yet will not be found in a grep for &amp;quot;define foo&amp;quot; as the
space is actually a tab.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/23c413edce303b9cc12de4ea1e38de3ae1002e86</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/23c413edce303b9cc12de4ea1e38de3ae1002e86"/>
    <title>
        dist/IO: replace "define\t" with "define "
    </title>
    <updated>2023-04-29T07:09:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;dist/IO: replace &amp;quot;define\t&amp;quot; with &amp;quot;define &amp;quot;

This cleans up the defines in dist/IO/poll.h.

&amp;quot;#define\t&amp;quot; is annoying as it is it 8 spaces wide, so it looks like
&amp;quot;#define &amp;quot;, yet will not be found in a grep for &amp;quot;define foo&amp;quot; as the
space is actually a tab.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/10d289386985ea7b716daa1fabfaff86e354107f</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/10d289386985ea7b716daa1fabfaff86e354107f"/>
    <title>
        Replace "define\t" with "define " in Configure/metaconfig related files
    </title>
    <updated>2023-04-29T07:09:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106183?s=30&amp;v=4"/>
    <author>
      <name>demerphq</name>
      <uri>https://github.com/demerphq</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Replace &amp;quot;define\t&amp;quot; with &amp;quot;define &amp;quot; in Configure/metaconfig related files

This is broken out so it is easier for Tux to find and merge with
metaconfig.

View this patch with -w and you will see &amp;quot;no changes&amp;quot; except for
config_h.SH and Porting/config_h.pl both which needed to be changed to
ensure that they produce output that doesn&amp;#39;t replicate the problem.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>Why Perl?</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/29/why-perl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I found an interesting article: <a href="https://two-wrongs.com/why-perl">Why Perl?</a>.</p>
</blockquote>

<p>And it seems that I should not have been able to find it, as its publication
date is <code class="language-plaintext highlighter-rouge">2023-05-26</code>, i.e. slightly less than four weeks from now.</p>

<p>The case for using <a href="https://www.perl.org/">Perl</a> (i.e. rapid prototyping of solutions that
usually exceed their expected time span) is surely compelling. There seems
to be a comment with the usual trope about readability, but as of 2023 I
think that the burden of proof is on the critics’ side, not <a href="https://www.perl.org/">Perl</a>’s.</p>

<p>Anyway. As for me, I use <a href="https://www.perl.org/">Perl</a> because it’s lovely, quick, general and
reasonably reasonable. Plus it’s very fun, which is key for an amateur.</p>

<p>The whole blog seems very interesting too, so I’ll surely be looking at more
posts. You might want to do that too… <em>future me</em>.</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/29/why-perl/</id>
    <published>2023-04-29T06:00:00+02:00</published>
    <updated>2023-04-29T06:00:00+02:00</updated>
    <category term="perl"/>
    <category term="raku"/>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76131754</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">splitting xml based on 3 tags</title>
            <category scheme="https://stackoverflow.com/tags" term="xml"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="split"/>
        <author>
            <name>vijayakumar ponnusamy</name>
            <uri>https://stackoverflow.com/users/10793662</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76131754/splitting-xml-based-on-3-tags"/>
        <published>2023-04-28T17:01:20Z</published>
        <updated>2023-04-28T21:18:20Z</updated>
        <summary type="html">
            &lt;p&gt;I have a  single xml file which contains multiple lines.. i want to split the xml based on GroupName,subGroupName,class&lt;/p&gt;
&lt;p&gt;i have a perl code which will split based on GroupName. can you provide the command to split based on GroupName,subGroupName,class&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while (my $line = &amp;lt;INPUT&amp;gt;){

    $line=~ m'&amp;lt;GroupName&amp;gt;([\W\w]*?)&amp;lt;/GroupName&amp;gt;';
    
    my $groupid=$1;

    if (defined($groupid)){

        $groupid=~s/^\s+|\s+$//g;
    
        my $output=$groupid.$env_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inputfile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP1&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP1&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP2&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;VV&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP3&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;VV&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP4&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP4&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB2&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB2&amp;lt;/subGroupName&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;
&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB2&amp;lt;/subGroupName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;p&gt;File 1- GROUP1_SUB1_CLASS1.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP1&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt; &amp;lt;GroupName&amp;gt;GROUP1&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;File 2- GROUP2_VV_VV.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP2&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;VV&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;File 3- GROUP3_VV_VV.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP3&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;VV&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;File 4- GROUP4_SUB1_VV.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP4&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;File 5- GROUP4_SUB2_VV.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP4&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB2&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;VV&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;File 6- GROUP5_SUB1_CLASS1.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB1&amp;lt;/subGroupName&amp;gt;&amp;lt;class&amp;gt;CLASS1&amp;lt;/class&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;File 7- GROUP5_SUB2.xml&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB2&amp;lt;/subGroupName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;GroupName&amp;gt;GROUP5&amp;lt;/GroupName&amp;gt;&amp;lt;subGroupName&amp;gt;SUB2&amp;lt;/subGroupName&amp;gt;&lt;/code&gt;&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76123132</id>
        <re:rank scheme="https://stackoverflow.com">-2</re:rank>
        <title type="text">Need a working Perl example of RSA enciphering a short text that is deciphered by Java 11 using java.security [closed]</title>
            <category scheme="https://stackoverflow.com/tags" term="java"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="java-11"/>
            <category scheme="https://stackoverflow.com/tags" term="public-key-encryption"/>
            <category scheme="https://stackoverflow.com/tags" term="java.security"/>
        <author>
            <name>lembark</name>
            <uri>https://stackoverflow.com/users/19353654</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76123132/need-a-working-perl-example-of-rsa-enciphering-a-short-text-that-is-deciphered-b"/>
        <published>2023-04-27T17:24:08Z</published>
        <updated>2023-04-28T20:45:35Z</updated>
        <summary type="html">
            &lt;p&gt;I have the very specific problem of attempting to encipher a string for validation to a web service that uses Java 11 using Perl.&lt;/p&gt;
&lt;p&gt;I've been provided a public key and told that the Java 11 configuration is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cipher.getInstance(&amp;quot;RSA/ECB/PKCS1Padding&amp;quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a sample message and hex output of the ciphertext along with a public key. Using Crypto::PK::RSA to encipher the known plaintext I have been unable to match the output from Java.&lt;/p&gt;
&lt;p&gt;I've tested the Perl module and have been able to successfully encipher and decipher random strings, so I believe the Perl module is working properly for RSA so the issue is in one of the algorithms.&lt;/p&gt;
&lt;p&gt;The Crypto::PK::RSA is using PKCS1 1.5 where the Java code is using 2.2:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html" rel="nofollow noreferrer"&gt;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The padding scheme described in PKCS #1 v2.2, used with the RSA algorithm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Q: Anyone have a working example of Perl code using any available CPAN module to exchange ciphertext with Java 11 java.security using the RSA encryption using Crypto::PK:RSA (or any CPAN module)?&lt;/p&gt;
&lt;p&gt;The CryptX module uses LibTomCrypt &lt;a href="https://www.libtom.net/LibTomCrypt/" rel="nofollow noreferrer"&gt;https://www.libtom.net/LibTomCrypt/&lt;/a&gt;; if anyone has experience making that work with Java-11 I could work that into Inline::C and deal with it that way.&lt;/p&gt;
&lt;p&gt;Trying the available options in C::P::RSA I've had no success (the oeap was unlikely to work but worth trying, H* and h* account for differences in endian-ness when hexifying the string):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Non-matchnig: H*, v1.5
# Non-matchnig: h*, v1.5
# Non-matchnig: H*, oaep
# Non-matchnig: h*, oaep
# Non-matchnig: H*, oaep SHA1
# Non-matchnig: h*, oaep SHA1
# Non-matchnig: H*, oaep SHA256
# Non-matchnig: h*, oaep SHA256
# Non-matchnig: H*, oaep SHA512
# Non-matchnig: h*, oaep SHA512
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thank you&lt;/p&gt;
&lt;pre class="lang-perl prettyprint-override"&gt;&lt;code&gt;
# this works using openssh-generated keys or ones generated by Crypt::PK:RSA 
# I cannot release the public key or test strings as examples, however. 

package RSA::Testy;
use v5.34;
use FindBin::libs;
use FindBin::libs qw( base=config export=config_d scalar );

use Test::More;
use Crypt::PK::RSA;

chomp( my $input    =    qx{cat $config_d/java.input} );
chomp( my $expect   = uc qx{cat $config_d/java.hex}   ); 

my $madness = 'Crypt::PK::RSA';
my $method  = 'encrypt';

SKIP:
{
    use_ok $madness
    or skip &amp;quot;'$madness' is useless&amp;quot;, 1;

    can_ok $madness, $method
    or skip &amp;quot;No '$method' in your $madness&amp;quot;, 1;

    my $pub
    = eval
    {
        $madness-&amp;gt;new( '$config_d/java-key.pub' );
    }
    or skip &amp;quot;Failed creating pub: $@&amp;quot;;

    my $test_encrypt
    = sub
    {
        # close over $pub, $input, $expect.

        my $cipher  = $pub-&amp;gt;encrypt( $input, @_ );

        for my $pack ( qw( H* h* ) )
        {
            my $found   = uc unpack &amp;quot;$pack*&amp;quot; =&amp;gt; $cipher;

            $found eq $expect
            and return 1;

            diag &amp;quot;Non-matchnig: $pack, @$_&amp;quot;;
        }
    };

    for
    (
        [ qw( v1.5          ) ]
      , [ qw( oaep          ) ]
      , [ qw( oaep SHA1     ) ]
      , [ qw( oaep SHA256   ) ]
      , [ qw( oaep SHA512   ) ]
    )
    {
        eval
        {
            $test_encrypt-&amp;gt;( @$_ )
        }
        and do
        {
            diag &amp;quot;Matching with pad:\n&amp;quot;, explain $_;
            pass 'Matching arguments.';
        };

        diag &amp;quot;Failed test:\n$@&amp;quot; if $@;
    }
};

done_testing
__END__
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry>
    <title>PWC 214 (1) Rank Score, (2) Collect Points, (3) ..., (4) Profit!</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-214-1-rank-score-2-collect-points-3-4-profit-4adh" type="text/html"/>
    <content type="html">&lt;p&gt;Another week, another weekly challenge. For week 214, we get to practice indirection, and an opportunity for recursion.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1:  Rank Score
&lt;/h2&gt;

&lt;p&gt;Task 1, &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/#TASK1"&gt;Rank Score&lt;/a&gt; is to assign medals to players in a contest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are given a list of scores (&amp;gt;=1).

Write a script to rank each score in descending order.
First three will get medals i.e. G (Gold), S (Silver) 
and B (Bronze). Rest will just get the ranking number.

Using the standard model of giving equal scores equal rank,
then advancing that number of ranks.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also given an example so that we can infer how to treat ties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: @scores = (2,5,2,1,7,5,1)
Output: (4,S,4,6,G,S,6)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to preserve the order of the players in the &lt;code&gt;@scores&lt;/code&gt; array.  We're going to need the information that the highest score (gold) is in position 5, the next two (silver) are in positions 1 and 6, and so on.&lt;/p&gt;

&lt;p&gt;It is a cliche that all problems in computer science are solved by adding a level of indirection, and that is true here. The first indirection is that we want to sort not the scores themselves, but the indexes of the scores.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;$#scores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the condition for sorting will be a comparison of the scores at that index. The sort is in descending order, so that the index of the highest score (gold) will be at the front of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;@scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;@scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#scores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking a simpler example, let's look at &lt;code&gt;@scores = (1,2,4,3,5)&lt;/code&gt;.  Our sort will give us a mapping between the index in &lt;code&gt;@scores&lt;/code&gt; and the assignment of the rank:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;@score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;span class="nv"&gt;@position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#GOAL: @ranked = ( 5   4   S   B   G )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells us that the gold medal winner is at &lt;code&gt;@position[0]&lt;/code&gt;, which is index 4 in &lt;code&gt;@score&lt;/code&gt;.  Therefore, we will assign 'G' to position 4 in the ranked score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@ranked&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;@position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;G&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have to keep track of gold, silver, and bronze as well as checking for ties, a lot of convoluted logic is going to emerge. Time for another indirection. Let's set up the possible ranks in advance.  The rankings will be 1 to the size of &lt;code&gt;@score&lt;/code&gt;, except that the first three places will be 'G', 'S', and 'B'.  Let's also set up a cursor in this ranking list, which will start at gold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sx"&gt;qw(G S B)&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will iterate over the &lt;code&gt;@position&lt;/code&gt; array.  If we find a tie, we don't move &lt;code&gt;$r&lt;/code&gt;; but if the subsequent score is different, then we can update the &lt;code&gt;$r&lt;/code&gt; cursor to jump ahead in &lt;code&gt;@rank&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The first position is always gold.&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$ranked&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$place&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$rank&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#position&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Lower score, so advance rank&lt;/span&gt;
        &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$ranked&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$rank&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete code is in &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-214/bob-lied/perl/ch-1.pl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 2: Collect Points
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/#TASK2"&gt;The second task&lt;/a&gt; is a classic problem of searching for an optimal answer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are given a list of numbers.
You will perform a series of removal operations.
For each operation, you remove from the list N (one or more)
equal and consecutive numbers, and add to your score N × N.
Determine the maximum possible score.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are given a few examples to expound on the idea&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1: Input: @numbers = (2,4,3,3,3,4,5,4,2) Output: 23
   We see three 3's next to each other so let us remove
   that first and collect 3 x 3 points.
   So now the list is (2,4,4,5,4,2).
   Let us now remove 5 so that all 4's can be next to each
   other and collect 1 x 1 point.
   So now the list is (2,4,4,4,2).
   Time to remove three 4's and collect 3 x 3 points.
   Now the list is (2,2).
   Finally remove both 2's and collect 2 x 2 points.
   So the total points collected is 9 + 1 + 9 + 4 =&amp;gt; 23.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a naturally recursive problem. At each step, we remove a span of equal numbers, then repeat the same logic with a smaller list of numbers, while accruing a total score.&lt;/p&gt;

&lt;p&gt;Recursion can sometimes be problematic.  We need to be certain that the recursion will terminate, and that the recursion will not go so deep that it runs out of memory.  We're safe here. Since each step removes at least one number from the list, we will eventually terminate when the list is down to one or zero members. How deep will the recursion go?  The worst case is that all N numbers in the list are unique, so that we have to repeat the process N times.  For lists in the dozens to hundreds, probably even thousands, that recursion should be safe.&lt;/p&gt;

&lt;p&gt;So, onward.  First of all, we need to be able to find spans of numbers that are the same, so that we can remove them from the list.  Let's represent a span as a pair of (position, length).&lt;br&gt;
Then we can write a subroutine that gives us a list of such pairs for any array of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Return pairs of [offset, length] for each span of equal values in list&lt;/span&gt;
  &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;findSpan&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$beg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="c1"&gt;#* &amp;amp;&amp;amp; $list-&amp;gt;[$end+1] == $list-&amp;gt;[$end] )&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nv"&gt;$end&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nv"&gt;$len&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$beg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="nv"&gt;$beg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our function dispatches a couple of trivial cases first, and then makes one pass over the list, extending the span while the values remain the same, and starting a new span when the value changes.  The return value will be a reference to an array, where each element of the array is a reference to a (position, length) pair.  For example, for the list &lt;code&gt;(1,2,2,2,2,1)&lt;/code&gt;, the set of spans would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [0][1][2][3][4][5]&lt;/span&gt;
&lt;span class="c1"&gt;#  1  2  2  2  2  1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# position 0, length 1 (1)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# position 1, length 4 (2,2,2,2)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# position 5, length 1 (1)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that function available to us, the logic of collection will be simpler.  For each span, calculate the score of the span (which is just the length squared), then remove it and recursively call the same routine again.  That will find spans in the smaller list, and then try to remove each of those in turn.&lt;/p&gt;

&lt;p&gt;The recursive collect subroutine needs to have a base case that terminates the recursion.  That happens when the list is empty, or has just one element left.  We can also slightly optimize and also stop the recursion when there are only two elements left, since that score is easy to calculate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_collect&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;scoreSoFar&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can find the set of spans that might be removed, and try each one in turn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$spanList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;findSpan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bestScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$span&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@$spanList&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$beg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$span&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;# Remove the span from the list and recurse&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nb"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$beg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;_collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$bestScore&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$bestScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$bestScore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;splice&lt;/code&gt; function is very handy here, because it does the list manipulation for us.  We have to be careful to operate on a copy of the list, however, since &lt;code&gt;splice&lt;/code&gt; will change the array, and we need it intact for the next iteration.&lt;/p&gt;

&lt;p&gt;The other tricky bit in the algorithm is accumulating the score. We pass the score into each recursive call, effectively stacking it up and returning it up the stack when we finally reach the empty list.  At each level in the recursion, we save only the best score from each possible span removal.&lt;/p&gt;

&lt;p&gt;A slightly harder problem would be to record the sequence of moves that achieves the best score.  That would use a similar technique, building a stack of moves that are passed to each recursive call through a reference to an array.  The best move at each level would be added to the stack.&lt;/p&gt;

&lt;p&gt;The code for Task 2 is in in &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-214/bob-lied/perl/ch-2.pl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-214-1-rank-score-2-collect-points-3-4-profit-4adh</id>
    <published>2023-04-28T20:05:19Z</published>
    <updated>2023-04-28T20:05:19Z</updated>
    <category term="perl"/>
    <category term="pwc"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #214 - Rank Score</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/04/perl-weekly-challenge-214---rank-score.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11083</id>
    <published>2023-04-28T17:50:20Z</published>
    <updated>2023-04-28T18:09:26Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perlscoreperlweeklychallenge" label="#perl #score #perlweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>Just one weekly challenge entry this week, because I am lacking in time and have no idea how to efficiently solve the second challenge.</p>

<p>So here goes:</p>

<h4>Rank Score</h4>

<p>First, the code:</p>

<pre><code>#!/usr/bin/perl

use strict;
use v5.24;

my @sorted = reverse sort @ARGV;
my %hash;
my @table = ('G', 'S', 'B');
my $curr;

foreach (@sorted) {
    if ($curr &lt;= 2) {
        $hash{$_} //= $table[$curr];
    } else {
        $hash{$_} //= $curr + 1;
    }
    $curr++;
}

say $hash{$_} for @ARGV;
</code></pre>

<p>At first, I thought this challenge was something totally different, I don't know why, but it still turned out quite simply. We want to keep the output in the same order as the input, so we obviously can't just sort and replace the inputs. The easiest way is then to use each score as the key of a hash, where the value is the rank. Since all equal scores will be equally ranked, this sorts the scores from highest to lowest and iteratively assigns ranks. For any duplicates, the index counter continues counting but the defined-or ranks that entry in the hash as the first appropriate rank. For the first 3 ranks, the table of podium winners is used.</p>

<p>That's all for this week! As usual, if you have any comments by all means post them. I'll look forward to seeing the other solutions to challenge 2.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76131298</id>
        <re:rank scheme="https://stackoverflow.com">-1</re:rank>
        <title type="text">I'm not being able to use TransDecoder because of URI::Escape module, but it's already installed</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="uri"/>
            <category scheme="https://stackoverflow.com/tags" term="bioinformatics"/>
        <author>
            <name>vini8cs</name>
            <uri>https://stackoverflow.com/users/14695894</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76131298/im-not-being-able-to-use-transdecoder-because-of-uriescape-module-but-its-a"/>
        <published>2023-04-28T15:55:52Z</published>
        <updated>2023-04-28T17:41:11Z</updated>
        <summary type="html">
            &lt;p&gt;I'm trying to use TransDecoder, but I'm getting this error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TransDecoder.LongOrfs -h&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can't locate URI/Escape.pm in @INC (you may need to install the URI::Escape module) (@INC contains: /opt/anaconda3/opt/transdecoder/PerlLib /opt/anaconda3/lib/site_perl/5.34.0/x86_64-linux-thread-multi /opt/anaconda3/lib/site_perl/5.34.0 /opt/anaconda3/lib/5.34.0/x86_64-linux-thread-multi /opt/anaconda3/lib/5.34.0 .) at /opt/anaconda3/opt/transdecoder/PerlLib/Gene_obj.pm line 15.
BEGIN failed--compilation aborted at /opt/anaconda3/opt/transdecoder/PerlLib/Gene_obj.pm line 15.
Compilation failed in require at /opt/anaconda3/bin/TransDecoder.LongOrfs line 64.
BEGIN failed--compilation aborted at /opt/anaconda3/bin/TransDecoder.LongOrfs line 64.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But URI::Escape is already installed!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo cpanm install URI::Escape&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;install is up to date. (0.01)
URI::Escape is up to date. (5.17)&lt;/p&gt;
&lt;p&gt;It would be expected to work perfectly after installing the dependencies, but unfortunately, it is not working as expected. I even tried to reboot the server, but it didn't make any difference.&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title>Perl Weekly Challenge #214 - Rank Score</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-214-rank-score-3n2m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Just one weekly challenge entry this week, because I am lacking in time and have no idea how to efficiently solve the second challenge.</p>

<p>So here goes:</p>

<h4>
  
  
  Rank Score
</h4>

<p>First, the code:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.24;

my @sorted = reverse sort @ARGV;
my %hash;
my @table = ('G', 'S', 'B');
my $curr;

foreach (@sorted) {
    if ($curr &lt;= 2) {
        $hash{$_} //= $table[$curr];
    } else {
        $hash{$_} //= $curr + 1;
    }
    $curr++;
}

say $hash{$_} for @ARGV;
</code></pre>

</div>

<p>At first, I thought this challenge was something totally different, I don't know why, but it still turned out quite simply. We want to keep the output in the same order as the input, so we obviously can't just sort and replace the inputs. The easiest way is then to use each score as the key of a hash, where the value is the rank. Since all equal scores will be equally ranked, this sorts the scores from highest to lowest and iteratively assigns ranks. For any duplicates, the index counter continues counting but the defined-or ranks that entry in the hash as the first appropriate rank. For the first 3 ranks, the table of podium winners is used.</p>

<p>That's all for this week! As usual, if you have any comments by all means post them. I'll look forward to seeing the other solutions to challenge 2.</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-214-rank-score-3n2m</id>
    <published>2023-04-28T13:08:33Z</published>
    <updated>2023-04-28T13:08:33Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Env::Dot</title>
    <link rel="alternate" href="https://dev.to/mikkoi/envdot-aej" type="text/html"/>
    <content type="html">&lt;h1&gt;
  
  
  Env::Dot
&lt;/h1&gt;

&lt;p&gt;In the category of "scratching my itch".&lt;/p&gt;

&lt;h2&gt;
  
  
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  
  
  In Perl:
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Env::Dot;
print $ENV{'VAR_DEFINED_IN_DOTENV_FILE'};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  
  
  On Command Line:
&lt;/h3&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo 'VAR="Good value"'&amp;gt;&amp;gt; .env
envdot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;VAR='Good value'; export VAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  
  
  Background
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An app’s config is everything that is likely to vary between deploys (staging, production, developer environments, etc).&lt;br&gt;
&lt;a href="https://12factor.net/config"&gt;The Twelve-Factor App&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Storing the often changing parts of configuration in environment variables is one of the principles of &lt;a href="https://12factor.net/config"&gt;The Twelve-Factor App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From this principle follows the need to store those environment variables and their values in an easily accessible way. Hence, every developer maintains his or her own project specific &lt;code&gt;.env&lt;/code&gt; files next to the project files in the same directory where they are used, for instance, when running locally or testing locally.&lt;/p&gt;
&lt;h2&gt;
  
  
  Yet Another Dotenv Solution
&lt;/h2&gt;

&lt;p&gt;As if we didn't have these enough already...&lt;/p&gt;

&lt;p&gt;What is different with this one, except the name &lt;a href="https://metacpan.org/pod/Env::Dot"&gt;Env::Dot&lt;/a&gt;?&lt;/p&gt;
&lt;h3&gt;
  
  
  Flexibility in input
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.env&lt;/code&gt; files come in two formats: &lt;em&gt;Shell compatible&lt;/em&gt; and
&lt;em&gt;Docker combatible&lt;/em&gt;. &lt;code&gt;Env::Dot&lt;/code&gt; supports both.&lt;/li&gt;
&lt;li&gt;If no &lt;code&gt;.env&lt;/code&gt; file is present, then do nothing.&lt;/li&gt;
&lt;li&gt;If your &lt;code&gt;.env&lt;/code&gt; file is located in another path,
not the current working directory,
you can use the environment variable
&lt;code&gt;DOTENV_FILEPATHS&lt;/code&gt; to tell where your dotenv file is located.
You can specify several file paths; just separate
them by &lt;code&gt;:&lt;/code&gt;. &lt;code&gt;Dot::Env&lt;/code&gt; will load all the files in the order
you specify them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  
  
  Flexibility in output
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Just use &lt;code&gt;Env::Dot&lt;/code&gt; in your program and your &lt;code&gt;%ENV&lt;/code&gt; will grow
with the variables defined in &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;There is also a command line executable, &lt;code&gt;envdot&lt;/code&gt;,
to read the &lt;code&gt;.env&lt;/code&gt; file and write out commands to create
the environment variables.&lt;/li&gt;
&lt;li&gt;Command &lt;code&gt;envdot&lt;/code&gt; can write the env vars in &lt;code&gt;sh&lt;/code&gt; (sh/Bash/Zsh),
&lt;code&gt;csh&lt;/code&gt; (C shell/tcsh) and &lt;code&gt;fish&lt;/code&gt; (Fish) shell formats.&lt;/li&gt;
&lt;li&gt;Command &lt;code&gt;envdot&lt;/code&gt; will by default also export variables but you can prevent this if you don't
want the variables to be present in subshells and programs. This would
make the variables only local to your current shell.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  
  
  Existing Environment Takes Precedence
&lt;/h3&gt;

&lt;p&gt;Existing environment variables always take precedence to dotenv variables!&lt;/p&gt;

&lt;p&gt;A dotenv variable (variable from a file) does not overwrite an existing environment variable. This is by design because a dotenv file is to augment the environment, not to replace it.&lt;/p&gt;

&lt;p&gt;This means that you can override a variable in &lt;code&gt;.env&lt;/code&gt; file by creating its counterpart in the environment. For instance:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unset VAR
echo "VAR='Good value'" &amp;gt;&amp;gt; .env
perl -e 'use Env::Dot; print "VAR:$ENV{VAR}\n";'
# VAR:Good value
VAR='Better value'; export VAR
perl -e 'use Env::Dot; print "VAR:$ENV{VAR}\n";'
# VAR:Better value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  
  
  DotEnv File Meta Commands
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;file:&lt;/code&gt; commands affect all rows following its use.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;var:&lt;/code&gt; commands affect only the subsequent variable definition. If there is another &lt;strong&gt;envdot&lt;/strong&gt; command, the second overwrites the first and default values are applied again.&lt;/p&gt;
&lt;h4&gt;
  
  
  &lt;code&gt;file:type&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Changes how &lt;code&gt;Env::Dot&lt;/code&gt; reads lines below from this commands. Default is:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# envdot (file:type=shell)
VAR="value"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Other possible value of &lt;code&gt;file:type&lt;/code&gt; is &lt;code&gt;plain&lt;/code&gt;. Docker is using these kinds of &lt;code&gt;.env&lt;/code&gt; files. Variable name is followed by &lt;code&gt;=&lt;/code&gt; and value is the rest of the row before linefeed.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# envdot (file:type=plain)
VAR=My var value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  
  
  &lt;code&gt;var:allow_interpolate&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;By default, when writing variable definitions for the shell,&lt;br&gt;
every variable is treated as static and surrounded with single quotation marks (') in Unix shell which means shell will read the variable content as is. By setting this to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;, you allow shell to interpolate. &lt;strong&gt;This meta command is only useful when running &lt;code&gt;envdot&lt;/code&gt; command to create variable definitions for &lt;code&gt;eval&lt;/code&gt; command to read.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# envdot (var:allow_interpolate)
DYNAMIC_VAR="$(pwd)/${ANOTHER_VAR}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  
  
  &lt;code&gt;envdot&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;envdot&lt;/code&gt; is a shell command which translates the dotenv files into shell commands. The file &lt;code&gt;.env&lt;/code&gt; is of course the default input.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;envdot
# VAR='Good value'; export VAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It has the following parameters:&lt;/p&gt;

&lt;h4&gt;
  
  
  --export, --no-export
&lt;/h4&gt;

&lt;p&gt;Write commands to set variables for local shell or for exporting&lt;br&gt;
them. You usually want to export the variables to all subsequent&lt;br&gt;
programs and subshells, i.e. make them into &lt;em&gt;environment&lt;br&gt;
variables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Default: export&lt;/p&gt;

&lt;h4&gt;
  
  
  -s, --shell
&lt;/h4&gt;

&lt;p&gt;Which shell (family) are you using? Supported: sh, csh, fish.&lt;/p&gt;

&lt;h4&gt;
  
  
  -e, --dotenv
&lt;/h4&gt;

&lt;p&gt;Path to .env file.&lt;/p&gt;

&lt;p&gt;Default: current directory .env&lt;/p&gt;

&lt;h2&gt;
  
  
  Installation
&lt;/h2&gt;

&lt;p&gt;If you need to use the &lt;code&gt;envdot&lt;/code&gt; command in a restricted environment, such as a docker image build, there is a &lt;a href="https://metacpan.org/pod/fatpack"&gt;FatPacked&lt;/a&gt; executable ready. Usable when using &lt;a href="https://metacpan.org/pod/Env::Dot"&gt;CPAN&lt;/a&gt; is overkill.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -LSs -o envdot https://raw.githubusercontent.com/mikkoi/envdot/master/envdot.self-contained
chmod +x ./envdot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Or you can do this in a &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;RUN curl -LSs -o /usr/local/bin/envdot \
    https://raw.githubusercontent.com/mikkoi/env-dot/master/envdot.self-contained
RUN chmod +x /usr/local/bin/envdot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There is no extra dependencies outside Perl's standard distribution, so &lt;code&gt;envdot&lt;/code&gt; is as lean as it can be. And Perl, of course, is present in every more or less standard Linux distribution.&lt;/p&gt;

</content>
    <author>
      <name>Mikko Koivunalho</name>
    </author>
    <id>https://dev.to/mikkoi/envdot-aej</id>
    <published>2023-04-28T08:58:06Z</published>
    <updated>2023-04-28T08:58:06Z</updated>
    <category term="perl"/>
    <category term="dotenv"/>
    <category term="cli"/>
    <category term="docker"/>
  </entry>
  <entry>
    <author>
      <name>/u/davorg</name>
      <uri>https://www.reddit.com/user/davorg</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Inspired by the mention in &lt;a href="https://perlweekly.com/archive/613.html"&gt;this week&amp;#39;s Perl Weekly&lt;/a&gt;, I&amp;#39;ve been doing some minor hacking on CPAN Dashboard. A lot of it is behind-the-scenes stuff, but I&amp;#39;ve added a data file for each author who uses the system. For example, mine is at &lt;a href="https://cpandashboard.com/DAVECROSS/data.json"&gt;https://cpandashboard.com/DAVECROSS/data.json&lt;/a&gt;. Not sure if it&amp;#39;ll be useful for anyone but, hey, more data is always good, right?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/davorg"&gt; /u/davorg &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/131m000/improvements_to_cpan_dashboard/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/131m000/improvements_to_cpan_dashboard/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_131m000</id>
    <link href="https://www.reddit.com/r/perl/comments/131m000/improvements_to_cpan_dashboard/"/>
    <updated>2023-04-28T08:49:16+00:00</updated>
    <published>2023-04-28T08:49:16+00:00</published>
    <title>Improvements to CPAN Dashboard</title>
  </entry>
  <entry>
    <title>PWC214 - Collect Points</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/28/pwc214-collect-points/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/">#214</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of numbers.</p>

  <p>You will perform a series of removal operations. For each operation, you
remove from the list N (one or more) equal and consecutive numbers, and
add to your score N × N.</p>

  <p>Determine the maximum possible score.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (2,4,3,3,3,4,5,4,2)
Output: 23

We see three 3's next to each other so let us remove that first and collect 3 x 3 points.
So now the list is (2,4,4,5,4,2).
Let us now remove 5 so that all 4's can be next to each other and collect 1 x 1 point.
So now the list is (2,4,4,4,2).
Time to remove three 4's and collect 3 x 3 points.
Now the list is (2,2).
Finally remove both 2's and collect 2 x 2 points.
So the total points collected is 9 + 1 + 9 + 4 =&gt; 23.
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (1,2,2,2,2,1)
Output: 20

Remove four 2's first and collect 4 x 4 points.
Now the list is (1,1).
Finally remove the two 1's and collect 2 x 2 points.
So the total points collected is 16 + 4 =&gt; 20.
</code></pre></div>  </div>

  <p><strong>Example 3:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (1)
Output: 1
</code></pre></div>  </div>

  <p><strong>Example 4:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (2,2,2,1,1,2,2,2)
Output: 40

Remove two 1's = 2 x 2 points.
Now the list is (2,2,2,2,2,2).
Then reomove six 2's = 6 x 6 points.
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>No questions in particular, except maybe if there are possible assumptions
about the length of the inputs. I mean, for short inputs, a brute-forceish
solution is definitely viable…</p>

<h1 id="the-solution">The solution</h1>

<p>First of all, we’ll transform the inputs in pairs of value and counts. We
will keep them in an array with values in even positions (starting at 0) and
counts in odd positions. Don’t ask.</p>

<p>Then we will operate on these slots. Those whose value occur only once can
be eliminated at any time, so the sooner the better. Those occurring
multiple times… will require some search, and we’ll look for them all
because <em>time is running!</em></p>

<p><a href="https://www.perl.org/">Perl</a>:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>
<span class="k">use</span> <span class="nv">Memoize</span> <span class="p">'</span><span class="s1">memoize</span><span class="p">';</span>
<span class="k">use</span> <span class="nn">Data::</span><span class="nv">Dumper</span><span class="p">;</span>

<span class="nv">say</span> <span class="nv">collect_points</span><span class="p">(</span><span class="nv">@ARGV</span> <span class="p">?</span> <span class="nv">@ARGV</span> <span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>

<span class="k">sub </span><span class="nf">collect_points</span> <span class="p">(@numbers) {</span>
   <span class="k">return</span> <span class="mi">0</span> <span class="k">unless</span> <span class="nv">@numbers</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">@slots</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$#numbers</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$numbers</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$numbers</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="p">{</span>
         <span class="nv">$slots</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
         <span class="nb">push</span> <span class="nv">@slots</span><span class="p">,</span> <span class="nv">$numbers</span><span class="p">[</span><span class="nv">$i</span><span class="p">],</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">collect_points_wh</span><span class="p">(</span><span class="nv">@slots</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">remove_slot</span> <span class="p">($i, @slots) {</span>
   <span class="nb">splice</span><span class="p">(</span><span class="nv">@slots</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

   <span class="c1"># check for merge</span>
   <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@slots</span> <span class="o">&amp;&amp;</span> <span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="p">{</span>
      <span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
      <span class="nb">splice</span><span class="p">(</span><span class="nv">@slots</span><span class="p">,</span> <span class="nv">$i</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="k">return</span> <span class="nv">@slots</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">collect_points_wh</span> <span class="p">(@slots) {</span>
   <span class="k">my</span> <span class="nv">$score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

   <span class="k">while</span> <span class="p">('</span><span class="s1">necessary</span><span class="p">')</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">%count_for</span><span class="p">;</span>

      <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@slots</span><span class="p">)</span> <span class="p">{</span>
         <span class="p">(</span><span class="nv">$count_for</span><span class="p">{</span><span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span><span class="p">]}</span> <span class="sr">//</span><span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
         <span class="nv">$i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">my</span> <span class="nv">%is_single</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="vg">$_</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
         <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$count_for</span><span class="p">{</span><span class="vg">$_</span><span class="p">}</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">%count_for</span><span class="p">;</span>
      <span class="k">last</span> <span class="k">unless</span> <span class="nb">scalar</span> <span class="nb">keys</span> <span class="nv">%is_single</span><span class="p">;</span>

      <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@slots</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="nv">$is_single</span><span class="p">{</span><span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span><span class="p">]})</span> <span class="p">{</span>
            <span class="nv">$score</span> <span class="o">+=</span> <span class="nv">$slots</span><span class="p">[</span><span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">**</span> <span class="mi">2</span><span class="p">;</span>
            <span class="nv">@slots</span> <span class="o">=</span> <span class="nv">remove_slot</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">@slots</span><span class="p">);</span>
         <span class="p">}</span>
         <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
         <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">}</span>

   <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$best_sub_score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">while</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">@slots</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">@sub_slots</span> <span class="o">=</span> <span class="nv">remove_slot</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">@slots</span><span class="p">);</span>
      <span class="k">my</span> <span class="nv">$sub_score</span> <span class="o">=</span> <span class="nv">collect_points_wh</span><span class="p">(</span><span class="nv">@sub_slots</span><span class="p">);</span>
      <span class="nv">$best_sub_score</span> <span class="o">=</span> <span class="nv">$sub_score</span> <span class="k">if</span> <span class="nv">$best_sub_score</span> <span class="o">&lt;</span> <span class="nv">$sub_score</span><span class="p">;</span>
      <span class="nv">$i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="nv">$score</span> <span class="o">+=</span> <span class="nv">$best_sub_score</span><span class="p">;</span>
   <span class="k">return</span> <span class="nv">$score</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://raku.org/">Raku</a>:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) { put collect-points(@args) }

sub collect-points (@numbers) {
   return 0 unless @numbers;
   my @slots = @numbers[0], 1;
   for 1 ..^ @numbers -&gt; $i {
      if @numbers[$i - 1] == @numbers[$i] {
         @slots[*-1]++;
      }
      else {
         @slots.push: @numbers[$i], 1;
      }
   }
   return collect-points-wh(@slots);
}

sub collect-points-wh (@slots) {
   my $score = 0;

   loop {
      my %count-for;

      my $i = 0;
      while $i &lt; @slots {
         (%count-for{@slots[$i]} //= 0)++;
         $i += 2;
      }

      my %is-single = %count-for.keys.grep({ %count-for{$_} == 1 })
         .map({ $_ =&gt; True });
      last unless %is-single.elems;

      $i = 0;
      while $i &lt; @slots {
         if %is-single{@slots[$i]} {
            $score += @slots[$i + 1] ** 2;
            @slots = remove-slot($i, @slots);
         }
         else {
            $i += 2;
         }
      }
   }

   my $i = 0;
   my $best-sub-score = 0;
   while $i &lt; @slots {
      my @sub-slots = remove-slot($i, @slots);
      my $sub-score = collect-points-wh(@sub-slots);
      $best-sub-score = $sub-score if $best-sub-score &lt; $sub-score;
      $i += 2;
   }

   $score += $best-sub-score;
   return $score;
}

sub remove-slot ($i, @slots is copy) {
   @slots.splice($i, 2);
   if $i &gt; 0 &amp;&amp; $i &lt; @slots &amp;&amp; @slots[$i - 2] == @slots[$i] {
      @slots[$i - 1] += @slots[$i + 1];
      @slots.splice($i, 2);
   }
   return @slots;
}
</code></pre>

<p>Well… enough for today, I’m pretty late so I’ll better hurry up!</p>

<p>Cheers and… stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/28/pwc214-collect-points/</id>
    <published>2023-04-28T06:00:00+02:00</published>
    <updated>2023-04-28T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>SPVM::Digest::MD5 - MD5</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvmdigestmd5-md5-4m4p" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The Digest::MD5 class of <a href="https://metacpan.org/pod/SPVM">SPVM</a> has methods for MD5.</p>

<h2>
  
  
  Document
</h2>

<p><a href="https://metacpan.org/pod/SPVM::Digest::MD5">SPVM::Digest::MD5 - CPAN</a></p>

<h2>
  
  
  Repository
</h2>

<p><a href="https://github.com/yuki-kimoto/SPVM-Digest-MD5">SPVM::Digest::MD5 - Github</a></p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvmdigestmd5-md5-4m4p</id>
    <published>2023-04-28T03:28:36Z</published>
    <updated>2023-04-28T03:28:36Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
    <author>
      <name>/u/iamalnewkirk</name>
      <uri>https://www.reddit.com/user/iamalnewkirk</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://metacpan.org/release/AWNCORP/Venus-2.55"&gt;New in Venus release 2.55&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implement Venus#date&lt;/p&gt; &lt;p&gt;Easily include date/time operations in scripts.&lt;/p&gt; &lt;p&gt;&lt;a href="https://metacpan.org/release/AWNCORP/Venus-2.55/view/lib/Venus.pm#date"&gt;See more&lt;/a&gt;&lt;/p&gt; &lt;p&gt;``` package main;&lt;/p&gt; &lt;p&gt;use Venus &amp;#39;date&amp;#39;;&lt;/p&gt; &lt;p&gt;my $date = date &amp;#39;string&amp;#39;;&lt;/p&gt; &lt;h1&gt;&amp;#39;0000-00-00T00:00:00Z&amp;#39;&lt;/h1&gt; &lt;p&gt;```&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implement Venus#match&lt;/p&gt; &lt;p&gt;Perform sophisticated matching operations, e.g. switch/case statements.&lt;/p&gt; &lt;p&gt;&lt;a href="https://metacpan.org/release/AWNCORP/Venus-2.55/view/lib/Venus.pm#match"&gt;See more&lt;/a&gt;&lt;/p&gt; &lt;p&gt;``` package main;&lt;/p&gt; &lt;p&gt;use Venus &amp;#39;match&amp;#39;;&lt;/p&gt; &lt;p&gt;my $match = match 5, sub {{ 1 =&amp;gt; &amp;#39;one&amp;#39;, 2 =&amp;gt; &amp;#39;two&amp;#39;, 5 =&amp;gt; &amp;#39;five&amp;#39;, }};&lt;/p&gt; &lt;h1&gt;&amp;#39;five&amp;#39;&lt;/h1&gt; &lt;p&gt;```&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Feature:&lt;/strong&gt; Implement Venus#gather&lt;/p&gt; &lt;p&gt;Perform sophisticated gathering operations, e.g. gather/take statements.&lt;/p&gt; &lt;p&gt;&lt;a href="https://metacpan.org/release/AWNCORP/Venus-2.55/view/lib/Venus.pm#gather"&gt;See more&lt;/a&gt;&lt;/p&gt; &lt;p&gt;``` package main;&lt;/p&gt; &lt;p&gt;use Venus &amp;#39;gather&amp;#39;;&lt;/p&gt; &lt;p&gt;my $gather = gather [&amp;#39;a&amp;#39;..&amp;#39;d&amp;#39;], sub {{ a =&amp;gt; 1, b =&amp;gt; 2, c =&amp;gt; 3, }};&lt;/p&gt; &lt;h1&gt;[1..3]&lt;/h1&gt; &lt;p&gt;```&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/iamalnewkirk"&gt; /u/iamalnewkirk &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/130yclw/new_in_venus_255/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/130yclw/new_in_venus_255/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_130yclw</id>
    <link href="https://www.reddit.com/r/perl/comments/130yclw/new_in_venus_255/"/>
    <updated>2023-04-27T17:27:54+00:00</updated>
    <published>2023-04-27T17:27:54+00:00</published>
    <title>New in Venus 2.55</title>
  </entry>
  <entry>
    <title>PWC214 - Rank Score</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/27/pwc214-rank-score/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/">#214</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of scores (&gt;=1).</p>

  <p>Write a script to rank each score in descending order. First three will
get medals i.e. G (Gold), S (Silver) and B (Bronze). Rest will just get
the ranking number.</p>

  <blockquote>
    <p>Using the standard model of giving equal scores equal rank, then
advancing that number of ranks.</p>
  </blockquote>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @scores = (1,2,4,3,5)
Output: (5,4,S,B,G)

Score 1 is the 5th rank.
Score 2 is the 4th rank.
Score 4 is the 2nd rank i.e. Silver (S).
Score 3 is the 3rd rank i.e. Bronze (B).
Score 5 is the 1st rank i.e. Gold (G).
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @scores = (8,5,6,7,4)
Output: (G,4,B,S,5)

Score 8 is the 1st rank i.e. Gold (G).
Score 4 is the 4th rank.
Score 6 is the 3rd rank i.e. Bronze (B).
Score 7 is the 2nd rank i.e. Silver (S).
Score 4 is the 5th rank.
</code></pre></div>  </div>

  <p><strong>Example 3</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @list = (3,5,4,2)
Output: (B,G,S,4)
</code></pre></div>  </div>

  <p><strong>Example 4</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @scores = (2,5,2,1,7,5,1)
Output: (4,S,4,6,G,S,6)
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>Uhm… I guess I’m a bit too tired for questions 🙄</p>

<h1 id="the-solution">The solution</h1>

<p>Scores must be sorted in descending order to be ranked, but we have to
assign ranks to their original positions. One way to do this is to record
these positions beforehand, associated to the scores.</p>

<p>Then it will be a matter of sweeping the pairs and assign scores
accordingly, putting them in place.</p>

<p><a href="https://raku.org/">Raku</a>:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@scores) { say rank-score(@scores) }

sub rank-score (@scores) {
   state @lower = &lt;X G S B&gt;;
   my @retval = 0 xx @scores;
   my $n = 0;
   my @pairs = (@scores Z (0 ... *)).sort({ $^a[0] &lt;=&gt; $^b[0] }).reverse;
   for ^@pairs -&gt; $i {
      my ($v, $k) = @pairs[$i].Slip;
      $n = $i + 1 if $i == 0 || @pairs[$i - 1][0] &gt; $v;
      @retval[$k] = $n &lt; 4 ?? @lower[$n] !! $n;
   }
   return @retval;
}
</code></pre>

<p><a href="https://www.perl.org/">Perl</a>:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">@rs</span> <span class="o">=</span> <span class="nv">rank_score</span><span class="p">(</span><span class="nv">@ARGV</span> <span class="p">?</span> <span class="nv">@ARGV</span> <span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
<span class="nv">say</span> <span class="p">'</span><span class="s1">(</span><span class="p">',</span> <span class="nb">join</span><span class="p">('</span><span class="s1">,</span><span class="p">',</span> <span class="nv">@rs</span><span class="p">),</span> <span class="p">'</span><span class="s1">)</span><span class="p">';</span>

<span class="k">sub </span><span class="nf">rank_score</span> <span class="p">(@scores) {</span>
   <span class="nv">state</span> <span class="nv">$lower</span> <span class="o">=</span> <span class="p">[</span> <span class="sx">qw&lt; X G S B &gt;</span> <span class="p">];</span>
   <span class="k">my</span> <span class="nv">@retval</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">@scores</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">@pairs</span> <span class="o">=</span> <span class="nb">reverse</span> <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">}</span>
      <span class="nb">map</span> <span class="p">{</span> <span class="p">[</span><span class="nv">$scores</span><span class="p">[</span><span class="vg">$_</span><span class="p">],</span> <span class="vg">$_</span><span class="p">]</span> <span class="p">}</span>
      <span class="mi">0</span> <span class="o">..</span> <span class="nv">$#scores</span><span class="p">;</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span><span class="mi">0</span> <span class="o">..</span> <span class="nv">$#pairs</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">my</span> <span class="p">(</span><span class="nv">$v</span><span class="p">,</span> <span class="nv">$k</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$pairs</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">-&gt;</span><span class="nv">@*</span><span class="p">;</span>
      <span class="nv">$n</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">if</span> <span class="nv">$i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$pairs</span><span class="p">[</span><span class="nv">$i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nv">$v</span><span class="p">;</span>
      <span class="nv">$retval</span><span class="p">[</span><span class="nv">$k</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$n</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="p">?</span> <span class="nv">$lower</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$n</span><span class="p">]</span> <span class="p">:</span> <span class="nv">$n</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">@retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Stay safe and within <em>ranks</em>!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/27/pwc214-rank-score/</id>
    <published>2023-04-27T06:00:00+02:00</published>
    <updated>2023-04-27T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>Dot Your Environment</title>
    <link rel="alternate" href="https://blogs.perl.org/users/mikko_koivunalho/2023/04/assert-your-environment.html"/>
    <id>tag:blogs.perl.org,2023:/users/mikko_koivunalho//2432.11082</id>
    <published>2023-04-25T23:55:01Z</published>
    <updated>2023-04-27T00:22:43Z</updated>
    <author>
        <name>Mikko Koivunalho</name>
        <uri>https://metacpan.org/author/MIKKOI</uri>
    </author>
    <category term="Introduce-Package" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="environment_checking" label="environment_checking" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/mikko_koivunalho/">
        <![CDATA[<h1>Env::Dot</h1>

<p>In the category of &#8220;scratching my itch&#8221;.</p>

<h2>Background</h2>

<blockquote>
  <p>An app’s config is everything that is likely to vary between deploys (staging, production, developer environments, etc).
<a href="https://12factor.net/config">The Twelve-Factor App</a></p>
</blockquote>

<p>Storing the often changing parts of configuration in environment variables is
one of the principles of <a href="https://12factor.net/config">The Twelve-Factor App</a>.</p>

<p>From this principle follows the need to store those environment variables and their values
in an easily accessible way. Hence, every developer maintains his or her own
project specific <code>.env</code> files next to the project files in the same directory
where they are used, for instance, when running locally or testing locally.</p>

<h2>Yet Another Dotenv Solution</h2>

<p>As if we didn&#8217;t have these enough already&#8230;</p>

<p>What is different with this one, except the name <a href="https://metacpan.org/pod/Env::Dot">Env::Dot</a>?</p>

<h3>Flexibility in input</h3>

<ul>
<li><code>.env</code> files come in two formats: <em>Shell compatible</em> and
<em>Docker combatible</em>. <code>Env::Dot</code> supports both.</li>
<li>If no <code>.env</code> file is present, then do nothing.</li>
<li>If your <code>.env</code> file is located in another path,
not the current working directory,
you can use the environment variable
<code>DOTENV_FILEPATHS</code> to tell where your dotenv file is located.
You can specify several file paths; just separate
them by <code>:</code>. <code>Dot::Env</code> will load all the files in the order
you specify them.</li>
</ul>

<h3>Flexibility in output</h3>

<ul>
<li>Just use <code>Env::Dot</code> in your program and your <code>%ENV</code> will grow
with the variables defined in <code>.env</code> file.</li>
<li>There is also a command line executable, <code>envdot</code>,
to read the <code>.env</code> file and write out commands to create
the environment variables.</li>
<li>Command <code>envdot</code> can write the env vars in <code>sh</code> (sh/Bash/Zsh),
<code>csh</code> (C shell/tcsh) and <code>fish</code> (Fish) shell formats.</li>
<li>Command <code>envdot</code> will by default also export variables but you can prevent this if you don&#8217;t
want the variables to be present in subshells and programs. This would
make the variables only local to your current shell.</li>
</ul>

<h3>Existing Environment Takes Precedence</h3>

<p>Existing environment variables always take precedence to dotenv variables!</p>

<p>A dotenv variable (variable from a file) does not overwrite
an existing environment variable. This is by design because
a dotenv file is to augment the environment, not to replace it.</p>

<p>This means that you can override a variable in <code>.env</code> file by creating
its counterpart in the environment. For instance:</p>

<pre><code>unset VAR
echo "VAR='Good value'" &gt;&gt; .env
perl -e 'use Env::Dot; print "VAR:$ENV{VAR}\n";'
# VAR:Good value
VAR='Better value'; export VAR
perl -e 'use Env::Dot; print "VAR:$ENV{VAR}\n";'
# VAR:Better value
</code></pre>

<h3>DotEnv File Meta Commands</h3>

<p>The <code>file:</code> commands affect all rows following its use.</p>

<p>The <code>var:</code> commands affect only the subsequent variable definition.
If there is another <strong>envdot</strong> command, the second overwrites the first
and default values are applied again.</p>

<h4><code>file:type</code></h4>

<p>Changes how <code>Env::Dot</code> reads lines below from this commands. Default is:</p>

<pre><code># envdot (file:type=shell)
VAR="value"
</code></pre>

<p>Other possible value of <code>file:type</code> is <code>plain</code>.
Docker is using these kinds of <code>.env</code> files.
Variable name is followed by <code>=</code> and value is the rest
of the row before linefeed.</p>

<pre><code># envdot (file:type=plain)
VAR=My var value
</code></pre>

<h4><code>var:allow_interpolate</code></h4>

<p>By default, when writing variable definitions for the shell,
every variable is treated as static and surrounded with
single quotation marks (&#8216;) in Unix shell which means
shell will read the variable content as is.
By setting this to <code>1</code> or <code>true</code>, you allow shell
to interpolate.
<strong>This meta command is only useful when running <code>envdot</code> command
to create variable definitions for <code>eval</code> command to read.</strong></p>

<pre><code># envdot (var:allow_interpolate)
DYNAMIC_VAR="$(pwd)/${ANOTHER_VAR}"
</code></pre>

<h3>Usage</h3>

<pre><code>use Env::Dot;
print $ENV{'VAR_DEFINED_IN_DOTENV_FILE'};
</code></pre>

<h3><code>envdot</code></h3>

<p><code>envdot</code> is a shell command which translates the dotenv files into shell commands. The file <code>.env</code> is of course the default input.</p>

<pre><code>envdot
# VAR='Good value'; export VAR
</code></pre>

<p>It has the following parameters:</p>

<h4>&#8212;export, &#8212;no-export</h4>

<p>Write commands to set variables for local shell or for exporting
them. You usually want to export the variables to all subsequent
programs and subshells, i.e. make them into <em>environment
variables</em>.</p>

<p>Default: export</p>

<h4>-s, &#8212;shell</h4>

<p>Which shell (family) are you using? Supported: sh, csh, fish.</p>

<h4>-e, &#8212;dotenv</h4>

<p>Path to .env file.</p>

<p>Default: current directory .env</p>

<h2>Installation</h2>

<p>If you need to use the <code>envdot</code> command in a restricted environment,
such as a docker image build,
there is a <a href="https://metacpan.org/pod/fatpack">FatPacked</a> executable ready.
Usable when using <a href="https://metacpan.org/pod/Env::Dot">CPAN</a> is overkill.</p>

<pre><code>curl -LSs -o envdot https://raw.githubusercontent.com/mikkoi/env-dot/master/envdot.self-contained
chmod +x ./envdot
</code></pre>

<p>Or you can do this in a <code>Dockerfile</code>:</p>

<pre><code>RUN curl -LSs -o /usr/local/bin/envdot \
    https://raw.githubusercontent.com/mikkoi/env-dot/master/envdot.self-contained
RUN chmod +x /usr/local/bin/envdot
</code></pre>

<p>There is no extra dependencies outside Perl&#8217;s standard distribution, so <code>envdot</code>
is as lean as it can be. And Perl, of course, is present in every more or less standard
Linux distribution.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Grant Application-PerlGPT</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perlgpt"/>
  <id>tag:news.perlfoundation.org,2023-04-26:/post/perlgpt</id>
  <published>2023-04-26T14:44:28</published>
  <updated>2023-04-26T14:44:28</updated>
  <summary>
  <![CDATA[
     Grant application for an AI that speaks in Perl
   ]]>
  </summary>
  <author>
    <name>Saif Ahmed</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/3c57300b73a107443c2f16ddff3a108e63c40701/PerlGPT.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p><img src="_ra-rel-mnt_/simplecas/fetch_content/3c57300b73a107443c2f16ddff3a108e63c40701/PerlGPT.png" style="max-width:30%;" /></p>

<p>We have another grant application from <a href="https://metacpan.org/author/JJNAPIORK">John Napiorkowski</a> you may recall being involved in getting Perl Bindings for Tensor Flow, and the inimitable <a href="https://metacpan.org/author/WBRASWELL">Will Braswell</a> also involved in TF Perl, amongst many other projects integral to Perl and RPerl.    This time they have paired up to create an AI that speaks in Perl: Perl-GPT.</p>

<p><strong>Applicants</strong>
John Napiorkowski &amp; Will Braswell </p>

<p><strong>Amount Requested:</strong></p>

<p>The budget for this project is $8,800 USD</p>

<p><strong>Synopsis</strong></p>

<p>This grant proposal is for <em>phase 1</em> only of the development of PerlGPT, a large language model (LLM) comparable to ChatGPT 3.5/4.0 or Stanford Alpaca, and trained on Perl-related content only.</p>

<p>PerlGPT will be based on Meta's LLaMa language models, with all new components implemented in Perl where possible and released as 100% free-and-open-source software (FOSS), unlike ChatGPT and other proprietary LLM systems.</p>

<p>Phase 1 consists of training a 7B input language model using Perl-related request/response pairs curated from Perl Monks, Stack Overflow, GitLab, GitHub, and other public Perl-specific data sources.  Phase 1 will deliver an LLM capable of generating pure-Perl source code in collaboration with a Perl programmer.</p>

<p>Optionally, MetaCPAN may be upgraded to include a live running instance of the phase 1 PerlGPT LLM.  In addition to the traditional keyword search query producing a list of CPAN distributions, PerlGPT will enable MetaCPAN to also accept free-form search queries and plain-English written questions, which then spawns a new interactive chat session with specific Perl module suggestions and custom source code examples.</p>

<p>Each phase includes additional request/response training pairs encompassing the modern best practices related to that phase's specific tasks.</p>

<ul>
<li>Phase 1     7B model; train on Perl; generate new CPAN dists</li>
<li>Phase 2    13B model; train on XS, C, C++, FFI::Platypus; generate new optimized CPAN dists</li>
<li>Phase 3    33B model; train on software development; generate refactored existing CPAN dists</li>
<li>Phase 4    65B model; train on computer science &amp; Perl internals; generate refactored interpreter, new language features</li>
</ul>

<p><strong>Benefits to the Perl Community</strong></p>

<p>Benefits for each of the 4 project phases are listed below; please be aware this grant proposal is for phase 1 development ONLY.</p>

<p><em>Phase 1</em> implements PerlGPT v1.0 and benefits the Perl community by enabling the creation of new pure-Perl libraries and applications on CPAN.  PerlGPT v1.0 is trained on pure-Perl source code examples and high-quality POD documentation from CPAN, GitLab, GitHub, and Bitbucket.  All versions of PerlGPT are further trained on plain-English technical discussions pertaining to their respective feature set, gathered from Perl Monks and Stack Overflow.  For example, a programmer may want to create a new Perl API for some 3rd party web platform such as the Amazon cloud.  The programmer can write a plain-English description of their desired API features and functionality for accessing the Amazon cloud.  They can also specify design decisions such as whether or not to utilize an MVC framework like Catalyst or Mojolicious, and they can even start stubbing out some Perl classes and subroutines with comments included where source code should be added.  PerlGPT v1.0 will work with the programmer to iteratively implement their desired Amazon cloud API in pure Perl, including a full-coverage test suite and POD documentation, etc.  Once the API is working well enough for public release, the PerlGPT v1.0 LLM can even help the programmer execute the correct Dist::Zilla commands to build and upload the software to CPAN.  Finally, many new independent Perl projects can be created with access to the Amazon cloud, thanks to the Perl API created and uploaded to CPAN with the help of PerlGPT v1.0!  The same benefits apply to any other non-Amazon API which somebody may want to create in Perl, or to any pure-Perl library or application that a programmer can think up.  The sky is the limit!  PerlGPT v1.0 dramatically increases the effectiveness and efficiency of creating new pure-Perl software.</p>

<p>Optionally, MetaCPAN may be upgraded to PerlGPT v1.0, which will benefit the Perl community by allowing anyone on the Internet to utilize the power of interactively generating Perl source code as described above.  PerlGPT v1.0 is trained on CPAN's high-quality POD, as described above.  For example, a user with little or no previous Perl experience may visit MetaCPAN and type a query asking ""how can I swap all the rows and columns in an Excel spreadsheet?""  The MetaCPAN website launches an interactive chat session, where the PerlGPT LLM starts out by selecting one of the most popular and stable CPAN distributions for Excel spreadsheet manipulation, and quickly writes a well-commented prototype application as the user watches in real time.  PerlGPT also provides a plain-English explanation of the generated source code, and continues to chat with the user if they have any further questions or requests to change the source code in any way.  PerlGPT offers to run the custom Perl source code via the user's platform of choice, including PerlBanjo, WebPerl, or Perl on a cloud system such as Amazon.  PerlGPT also offers to help the user download and install their own local copy of Perl, if they so choose.  In the matter of just a few short minutes, a new Perl user has succeeded in implementing their first custom Perl application and solving their own real-world problem!  This use of PerlGPT on MetaCPAN can serve as both a recruiting tool for new-to-Perl developers, as well as a retention tool for experienced Perl developers who want to leverage the power of CPAN to the fullest extent possible.</p>

<p><em>Phase 2</em> implements PerlGPT v2.0 and will benefit the Perl community by enabling the creation of new optimized Perl libraries and applications on CPAN.  PerlGPT v2.0 is trained on source code and documentation related to XS, C, C++, and FFI::Platypus.  For example, a programmer may want to create a Perl video game, however pure Perl is not fast or efficient enough for the shading and texturing subroutines to run during gameplay.  Similar to the work flow of PerlGPT v1.0, the programmer writes a plain-English description of exactly how they want the video game to be implemented, including use of specific graphical libraries, etc.  After the entire project is written and running slowly in pure Perl, then the programmer and PerlGPT v2.0 can work together to determine the specific shading and texturing subroutines which need to be rewritten into XS and/or C or C++.  The programmer instructs the PerlGPT v2.0 LLM if there are any design preferences such as whether or not to use FFI::Platypus, etc.  PerlGPT generates the new performance-optimized shading and texturing subroutines as directed, and runs the already-existing test suite to ensure the optimized code is functionally equivalent to the un-optimized pure-Perl code.  Once the optimized code is working as desired, the video game can be released onto CPAN as with PerlGPT v1.0.  The same benefits apply to any Perl project which values performance optimization, such as scientific algorithms, machine learning, video rendering, etc.</p>

<p><em>Phase 3</em> implements PerlGPT v3.0 and will benefit the Perl community by enabling the refactoring and upgrading of already-existing CPAN distributions based on software engineering principles and modern best practices.  PerlGPT v3.0 is trained on educational texts related to software development principles and modern Perl best practices.  For example, a programmer may want to upgrade one of their existing CPAN distributions to utilize the Amazon cloud API described in phase 1 above.  In order to achieve this, several outdated or obsolete Perl software components will need to be either removed or substantially rewritten.  Similar to the work flows of PerlGPT v1.0 and v2.0, the programmer writes a plain-English description of precisely how they want their code to be upgraded, starting with the desired new behavior of which Amazon cloud features should be utilized in what ways.  The programmer goes on to specify which Amazon cloud API calls should be utilized in which subroutines, wherever possible, to assist PerlGPT v3.0 in most effectively achieving the upgrade and refactor goals.  They can even add comments into their existing Perl source code, directing PerlGPT v3.0 to focus on certain software components or design strategies.  PerlGPT generates the requested upgrades, including all appropriate changes to the existing test suite to reflect the new Amazon cloud features.  The upgraded test suite is executed, to ensure both the new features and the remaining old features are all working correctly.  Once the upgraded code is working as desired, the new Amazon-enabled Perl distribution can be released onto CPAN.  The same benefits apply to any Perl project in need of refactoring or upgrading, such as converting old Perl code to use the new Corinna object-oriented framework, or adopting somebody else's abandoned CPAN distribution and fixing a back-log of bug reports.</p>

<p><em>Phase 4</em> implements PerlGPT v4.0 and will benefit the Perl community by enabling the Perl Steering Council (PSC) and the Perl 5 Porters (P5P) to introduce major new features and upgrades into the Perl interpreter itself.  PerlGPT v4.0 is trained on Perl internals documentation, P5P technical discussions, and the Perl interpreter's own source code, written in C89 and C macros.  For example, the PSC may request a P5P developer to refactor the Perl interpreter's threading subsystem and thereby introduce new Perl language features pertaining to parallel and asynchronous programming.  PSC requests these changes to be made without breaking the Perl interpreter's long-venerated backward compatibility with already-existing Perl software.  In order to achieve this, several other subsystems of the Perl interpreter will be affected, and will need to be upgraded accordingly.  Similar to the work flows of PerlGPTv3.0 and earlier, the P5P developer writes a plain-English description of the new desired threading behavior, along with source code samples showing the new threading keywords or other syntax.  The programmer can also add comments into the Perl interpreter source code, indicating refactoring design decisions or stubbing out new threading behaviors.  PerlGPT v4.0 generates the requested upgrades to the Perl interpreter, including modifications to both the normal C source code as well as the C macro source code.  PerlGPT v4.0 also adds new tests to the Perl interpreter test suite.  PerlGPT does not modify existing tests, in order to maintain backward compatibility with previous versions of the Perl interpreter and already-existing Perl software.  The upgraded test suite is executed, to ensure the new threading features work correctly and all previously-existing Perl features are unchanged.  Once complete, the new Perl interpreter may be released as a testing version or prototype for PSC and P5P to review, and eventually released as a stable Perl version.  The same benefits apply to any change or upgrade to the Perl interpreter, such as expanding the new Corinna OO framework, upgrading 'use constant' to allow arrays &amp; hashes, or adding native exceptions.</p>

<p><strong>Deliverables</strong></p>

<ol>
<li>An implementation of the PerlGPT v1.0 large language model based on the LLaMa language model, configured and built using Dist::Zilla.</li>
<li>A comprehensive Perl test suite with automatically-provable coverage for 100% of the PerlGPT v1.0 LLM, using Test2 from CPAN.</li>
<li>A carefully-written and explanatory collection of documentation with coverage for 100% of the PerlGPT v1.0 LLM, using normal POD fully compatible with CPAN.</li>
<li>A small collection of user-friendly example Perl applications, using PerlGPT v1.0 LLM components to effectively showcase this project.</li>
<li>A public GitLab repository with all source code and components of the PerlGPT v1.0 LLM, including unstable or experimental components.</li>
<li>A public CPAN distribution with all stable source code and components of the PerlGPT v1.0 LLM.</li>
<li>A public DockerHub (or equivalent) repository with all stable source code and components of the PerlGPT v1.0 LLM, along with all dependencies, ready to run out-of-the-box.</li>
</ol>

<p>The PerlGPT v1.0 LLM does NOT yet support anything other than pure Perl source code.  These features will be addressed in future grant proposals.</p>

<p>This grant proposal specifically does NOT include PerlGPT phase 2 or beyond, such as XS or C or Perl internals, which is far beyond the scope of a single grant and will be addressed in future proposals.</p>

<p><strong>Project Details</strong></p>

<p>We will generate the PerlGPT language model by training a LLaMa foundational language model.  This training will be done using a combination of both manually-curated and automatically-selected request/response pairs, collected from public websites and data sources.  We will not utilize any proprietary data or request/response training sets taken from other proprietary language models, such as OpenAI's ChatGPT, etc.</p>

<p>Most of the technical details of how to train the PerlGPT language model can be found in the following papers:</p>

<p><a href="https://arxiv.org/pdf/2203.02155.pdf">Training Language Models to Follow Instructions with Human Feedback, 3-4-2022</a></p>

<p><a href="https://arxiv.org/pdf/2304.05128.pdf">Teaching Large Language Models to Self-Debug, 4-11-2023</a></p>

<p><a href="https://arxiv.org/pdf/2302.13971.pdf">LLaMA: Open and Efficient Foundation Language Models, 2-27-2023</a></p>

<p><strong>Project Schedule</strong></p>

<p>Total development time is estimated at 3 to 6 month, with the normal disclaimer about the difficulty of predicting software project durations.</p>

<p>During the first work cycle of approximately 1 to 2 months, curate and implement the initial PerlGPT v1.0 training data set.</p>

<p>During the second work cycle, run the LLM training procedure and implement the Perl test suite.</p>

<p>During the third work cycle, write the Perl documentation and implement the Perl example applications.</p>

<p>If a fourth work cycle is required, continue until the public releases on CPAN and DockerHub are complete.</p>

<p><strong>Completeness Criteria</strong></p>

<p>This grant is deemed complete when all the above-listed deliverables are reviewed and accepted by the official TPF-assigned grant manager.</p>

<p><strong>Bio</strong></p>

<p>We are both professional CPAN authors (  <a href="https://metacpan.org/author/JJNAPIORK">John Napiorkowski</a> and <a href="https://metacpan.org/author/WBRASWELL">Will Braswell</a> )  , with a current total of 106 CPAN distributions between the two of us.</p>

    ]]>
  </content>
</entry>
  <entry>
    <author>
      <name>/u/Corporatizm</name>
      <uri>https://www.reddit.com/user/Corporatizm</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;On a fresh Debian 11 VM install, running &lt;code&gt;cpan install XML::LibXSLT&lt;/code&gt; seems to fail at &lt;code&gt;running pkg-config libxslt... failed&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Installing &lt;code&gt;pkg-config&lt;/code&gt; with &lt;code&gt;apt&lt;/code&gt; doesn&amp;#39;t change the output.&lt;/p&gt; &lt;p&gt;Any ideas, hints ?&lt;/p&gt; &lt;p&gt;&lt;strong&gt;EDIT : In the end the solution in my case has been using the packets available through apt, instead of cpan, so, in my case :&lt;/strong&gt; &lt;code&gt;apt install libxml-libxslt-perl&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Output of &lt;code&gt;cpan install XML::LibXSLT&lt;/code&gt; below :&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Loading internal logger. Log::Log4perl recommended for better logging Reading &amp;#39;/root/.cpan/Metadata&amp;#39; Database was generated on Wed, 26 Apr 2023 10:17:02 GMT Running install for module &amp;#39;XML::LibXSLT&amp;#39; Checksum for /root/.cpan/sources/authors/id/S/SH/SHLOMIF/XML-LibXSLT-2.002001.tar.gz ok &amp;#39;YAML&amp;#39; not installed, will not store persistent state Configuring S/SH/SHLOMIF/XML-LibXSLT-2.002001.tar.gz with Makefile.PL running pkg-config libxslt... failed using fallback values for LIBS and INC options: LIBS=&amp;#39; -L/usr/local/lib -L/usr/lib -lxslt -lxml2 -lz -lm&amp;#39; INC=&amp;#39; -I/usr/local/include -I/usr/include&amp;#39; If this is wrong, Re-run as: $ /usr/bin/perl Makefile.PL LIBS=&amp;#39;-L/path/to/lib&amp;#39; INC=&amp;#39;-I/path/to/include&amp;#39; looking for -lxslt... no libxslt not found Try setting LIBS and INC values on the command line Or get libxslt and libxml2 from http://www.libxml.org/ If you install via RPMs, make sure you also install the -devel RPMs, as this is where the headers (.h files) are. No &amp;#39;Makefile&amp;#39; created SHLOMIF/XML-LibXSLT-2.002001.tar.gz /usr/bin/perl Makefile.PL INSTALLDIRS=site -- NOT OK &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/Corporatizm"&gt; /u/Corporatizm &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12zfrvj/new_to_perl_trying_to_use_cpan/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12zfrvj/new_to_perl_trying_to_use_cpan/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12zfrvj</id>
    <link href="https://www.reddit.com/r/perl/comments/12zfrvj/new_to_perl_trying_to_use_cpan/"/>
    <updated>2023-04-26T12:18:58+00:00</updated>
    <published>2023-04-26T12:18:58+00:00</published>
    <title>New to Perl, trying to use CPAN</title>
  </entry>
  <entry>
  <title>Grant Application to Develop a Modern IDE for Perl 5  </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tree-sitter"/>
  <id>tag:news.perlfoundation.org,2023-04-26:/post/tree-sitter</id>
  <published>2023-04-26T11:22:28</published>
  <updated>2023-04-26T11:22:28</updated>
  <summary>
  <![CDATA[
     Grant Applcation from Ganesan  Arjuna Maharaja to hep develope a "Modern IDE for Perl 5"
   ]]>
  </summary>
  <author>
    <name>Saif Ahmed</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/9c68111fffb1a046635a39ce992973f9ed90ed1b/treesitter.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p><img src="_ra-rel-mnt_/simplecas/fetch_content/9c68111fffb1a046635a39ce992973f9ed90ed1b/treesitter.png" style="max-width:30%;" /></p>

<p>We have received a Grant Applcation from <a href="https://github.com/ganezdragon">Ganesan Arjuna Maharaja</a> to help develop a "Modern IDE for Perl 5". This is for work he has been doing for a couple of years, and he already has 28 stars on Github.</p>

<p>The application is outlined below</p>

<p><strong>Applicant</strong>: Ganesan Arjuna Maharaja</p>

<p><strong>Amount requested</strong> : $10,000USD (Please provide an advance if possible for the work that I have already done. It was a huge first step for me)</p>

<p><strong>Project</strong>
A modern Perl IDE   Perl Core Development   A modern better IDE for perl, that  ues LSP (Language Server Protocol), which enables it to be used across modern IDEs like vscode, atom, and even legacies like vim, neovim etc. This would internally require a parser, for which tree-sitter-perl is needed (which is also developed by me)    Tree sitter (https://tree-sitter.github.io/tree-sitter/) would be able to parse perl, which would mean Perl  could be understood by other languages such as Javascript, which enables online IDEs, online syntax highlighting, and so on. The applications are limitless.</p>

<p><strong>Deliverables</strong>
There are two tools which require support from the foundation
1. tree-sitter-perl - (https://github.com/ganezdragon/tree-sitter-perl)
2. Perl IDE (for vscode, atom, neovim etc) - (https://github.com/ganezdragon/perl-language-server)</p>

<p><em>Tree sitter</em> is a wonderful tool that could provide you with a parser for any language and could run on most popular languages via binds (like Javascript, Rust, C etc).</p>

<p>Using this tool, I have also generated the grammar for perl 5. This could be found in the github provided above. It is already used by few users from neovim, so I'm continuing to support it.</p>

<p>List of deliverables for this tool:
1. grammar for perl 5
2. parser that could run on Javascript , Rust, C etc
3. Binding will be used directly on neovim to provide LSP features.
4. a npm package, that will be used in the next vs code extension. (it can be used in other places as well)</p>

<p><em>Perl IDE</em>
I'm aiming to provide the lsp first to vscode, however, developers could easily import it to their favorite IDEs which supports LSP like atom, neovim, etc. And since vscode is among the popular IDEs it will reach  a wide number of developers, which would make their lives easier coding with Perl.</p>

<p>Its currently very beta, providing only syntax check. It uses webAssembly to run on any machine.</p>

<p>List of deliverables for this tool:
1. a full IDE environment for perl that could run on any machine, with no other Perl libraries as dependencies to be installed.</p>

<p>Links:
- the parser - https://github.com/ganezdragon/tree-sitter-perl
- the IDE / the language server - https://github.com/ganezdragon/perl-language-server
- the beta extension - https://marketplace.visualstudio.com/items?itemName=ganezdragon.perl-language-server</p>

<p>I have completed 70% overall, in which "the parser" is the heavy one which does all of parsing, and has most of the logic. I even currently have few   neovim users who use this tree-sitter (https://tree-sitter.github.io/tree-sitter/) for their syntax highlighting, and error highlighting. If you aren't familiar with tree-sitter, it is a great tool :)</p>

<p><strong>Advantages over others:</strong>
There is an existing extension here - https://marketplace.visualstudio.com/items?itemName=3Drichterger.perl, but that needs a lot of installation, and version compatibilities, and it can't be ported to other editors like atom  or neovim. But, this tree-sitter based implementation is very much portable :) . It can be installed in any machine  in which nodeJS is running or can be installed. (or vscode)</p>

<p><strong>Timeline</strong> ~1 year for production ready vscode extension</p>

<p><strong>Bio</strong>
Hi, let me introduce myself. I'm Ganesan Arjuna Maharaja. I'm a full time developer at athenahealth, and working on this personal project on my leisure time. I have been busy lately with my personal work (recently got married), but I'm planning to get back into this work.</p>

<p>I have been working on perl for ~8 years now and would love to contribute back to the community. I personally feel Perl can be hard to read, but I have a lot of respect for Perl, for its nifty features, so I would like future developers to onboard to it with ease. And what better way, than having a full fledged JS parser and a IDE :)</p>

    ]]>
  </content>
</entry>
  <entry>
    <author>
      <name>/u/pmz</name>
      <uri>https://www.reddit.com/user/pmz</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;When we say that Perl code is executed by the Perl VM/Interpreter we mean that at the backend the bytecode gets converted to machine code that is then executed by the CPU, or that the intepreter calls directly CPU instructions without emitting machine code?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/pmz"&gt; /u/pmz &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12zd1n6/perl_bytecode_interpretation/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/12zd1n6/perl_bytecode_interpretation/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_12zd1n6</id>
    <link href="https://www.reddit.com/r/perl/comments/12zd1n6/perl_bytecode_interpretation/"/>
    <updated>2023-04-26T10:17:36+00:00</updated>
    <published>2023-04-26T10:17:36+00:00</published>
    <title>Perl bytecode interpretation</title>
  </entry>
  <entry>
    <title>LaTeX in Alpine Linux</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/26/latex-in-alpine/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>My first moves with <a href="https://www.latex-project.org/">LaTeX</a> in Linux.</p>
</blockquote>

<p>A few notes, future me!</p>

<p>With Alpine Linux in Docker:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --rm -itv "$PWD:/mnt" alpine:3.16
</code></pre></div></div>

<p>Let’s get started: I need to use a specific TrueType font, so it seems that
<code class="language-plaintext highlighter-rouge">xelatex</code> is needed. I hope to find out what this is at some time!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apk update
apk add texlive-xetex
</code></pre></div></div>

<p>Installing the font(s) means copying the files in a specific directory and
indexing them. We’ll do a test using <a href="https://www.theleagueofmoveabletype.com/league-spartan">LeagueSpartan</a>, an open font:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p /usr/local/share/fonts
wget https://github.com/theleagueof/league-spartan/releases/download/2.220/LeagueSpartan-2.220.zip
unzip LeagueSpartan-2.220.zip
cp LeagueSpartan-2.220/static/TTF/* /usr/local/share/fonts/
fc-cache -fv
</code></pre></div></div>

<p>I’ll also need to place some pieces of text in specific positions using
package <a href="https://ctan.org/pkg/textpos">textpos</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /mnt
wget https://mirrors.ctan.org/macros/latex/contrib/textpos.zip
unzip textpos.zip
cd textpos
tex textpos.ins
cp textpos.sty ..
cd ..
</code></pre></div></div>

<p>At this point we can run an example, <a href="https://gist.github.com/Michael0x2a/e46e12a66b7dc604db5e">adapted from here</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\documentclass{article}
    % General document formatting
    \usepackage[margin=0.7in]{geometry}
    \usepackage[parfill]{parskip}
    \usepackage[utf8]{inputenc}

    % Related to math
    \usepackage{amsmath,amssymb,amsfonts,amsthm}

    \usepackage{fontspec}
    \setmainfont{LeagueSpartan-Regular}

    \usepackage[absolute,overlay]{textpos}

\begin{document}

Name, date, Exercise X

\section*{Part a}

Put your answer to part a here

\section*{Part b}

etc

\begin{textblock*}{10cm}(15cm,16cm) % {block width} (coords) 
   Your text here
\end{textblock*}

\end{document}
</code></pre></div></div>

<p>Now:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xelatex example.tex
</code></pre></div></div>

<p>and enjoy the generated PDF file.</p>

<p>Hope this helps!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/26/latex-in-alpine/</id>
    <published>2023-04-26T06:00:00+02:00</published>
    <updated>2023-04-26T06:00:00+02:00</updated>
    <category term="latex"/>
    <category term="alpine"/>
    <category term="linux"/>
  </entry>
  <entry>
    <title>SPVM::MIME::QuotedPrint - Quoted-Printable encoding/decoding</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvmmimequotedprint-quoted-printable-encodingdecoding-26l8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The MIME::QuotedPrint  class of <a href="https://metacpan.org/pod/SPVM">SPVM</a> has methods for Quoted-Printable encoding/decoding.</p>

<h2>
  
  
  Document
</h2>

<p><a href="https://metacpan.org/pod/SPVM::MIME::QuotedPrint">SPVM::MIME::QuotedPrint - CPAN</a></p>

<h2>
  
  
  Repository
</h2>

<p><a href="https://github.com/yuki-kimoto/SPVM-MIME-Base64">SPVM::MIME::Base64 - Github</a></p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvmmimequotedprint-quoted-printable-encodingdecoding-26l8</id>
    <published>2023-04-26T00:26:42Z</published>
    <updated>2023-04-26T00:26:42Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
    <title>I'll probably resume LaTeX</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/04/25/will-probably-resume-latex/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>I’ll probably take a look at <a href="https://www.latex-project.org/">LaTeX</a> after some years.</p>
</blockquote>

<p>I’m pretty happy with how <a href="https://metacpan.org/pod/PDF::Collage">PDF::Collage</a> is behaving where I’m using it,
although I sometimes need to tweak the text in the basic templates a bit.</p>

<p>At this point, I have to go back to the document preparation system that I
used to generate the PDF templates in the first place (it’s a popular and
closed source document editor), do the tweaking and so forth, just to end up
thinking that I could have just as well produced the final PDF directly from
there. I mean, the final result I was aiming to.</p>

<p>So, of course, my brain went into yet-another-loop where I think that it
should be different, probably SVG would work better, what do I really know,
how can it be that I can’t just use HTML with some specific CSS aimed at
printing, etc. etc. only to find out that I don’t know <em>anything</em> about the
topic and I will probably not know about it for the rest of my life.</p>

<p>When these loops go full circle, I usually also think about <a href="https://www.latex-project.org/">LaTeX</a>, of
course. I’m probably <em>just</em> scared about the amount of time that would take
me to arrive to the <em>almost perfect</em> template, but at that point my worries
would probably be solved. And I would have something very easy to tweak from
my beloved command line.</p>

<p>Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/04/25/will-probably-resume-latex/</id>
    <published>2023-04-25T06:00:00+02:00</published>
    <updated>2023-04-25T06:00:00+02:00</updated>
    <category term="latex"/>
    <category term="pdf"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #213 - The Simple and the Hard</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/04/perl-weekly-challenge-213---the-simple-and-the-hard.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11081</id>
    <published>2023-04-23T07:45:17Z</published>
    <updated>2023-04-23T08:08:23Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="sortdijkstrarouteschatgptai" label="#sort #dijkstra #routes #chatgpt #ai" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>Hey everybody, back this week with a couple really interesting weekly challenge tasks. The first one is extremely simple, like one-liner simple, and the second one is quite complex and nearly 90 lines long.</p>

<h4>Challenge #1 - Fun Sort</h4>

<p>This was fun, it's in the name. This challenge took me about 5 minutes. Sort the input, split into even and odd arrays and put them together to print out. Pretty self-explanatory.</p>

<pre><code>#!/usr/bin/perl
use strict;
use v5.24;

my (@even, @odd);
$_ % 2 ? push @odd, $_ : push @even, $_ for sort @ARGV;
say @even, @odd;
</code></pre>

<h4>Challenge #2 - Not Fun Dijkstra</h4>

<p>I still don't know how Dijkstra came up with his algorithm after 20 minutes of thinking and it took me hours to understand it, but I'm glad he did. I had never heard of Dijkstra's algorithm, so originally I had no idea how to solve this challenge. To give me a starting point, I asked ChatGPT what it thought, and it said "Use Dijkstra's algorithm" and gave me an implementation to play with. As before, I wrote this code by hand, but it helped me a lot with the algorithmic design. Also, the AI seemed to fail badly when I asked it for additional error-checking if there was no route, so I designed and wrote that part entirely on my own.</p>

<p>If you haven't checked out the ways AI can assist your workflow and productivity, I highly recommend it. There are valid concerns about it, obviously, and I would never recommend copying and pasting code from it without understanding what it's doing, but it can help you understand a complex algorithm and how you would implement it.</p>

<p>Essentially, the theory behind Dijkstra's algorithm is not to traverse recursively, but to always follow whatever the shortest untraveled route attached to the source is. If you're always following whatever the shortest route is, the first route that reaches the destination will be the shortest route to the destination. Then you maintain a list of arrows (a hash of each node in our case) pointing backwards to the source node along that shortest route.</p>

<p>Here's the code:</p>

<pre><code>#!/usr/bin/perl

use strict;
use v5.24;
use List::Util 'min';

my @routes = ([1, 2, 6], [5, 6, 7]);
my $source = 1;
my $destination = 7;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1, 2, 3], [4, 5, 6]);
$source = 2;
$destination = 5;

print_dijkstra(\@routes, $source, $destination);

@routes = ([1,2,3], [4,5,6], [3,8,9], [7,8]);
$source = 1;
$destination = 7;

print_dijkstra(\@routes, $source, $destination);

sub print_dijkstra {
    my $result = dijkstra(@_);
    if ($result == -1) {
        say -1;
    } else {
        my @route = @{$result};
        for (@route) {
            $_ != $route[$#route] ? print "$_, " : print "$_\n"
        }
    }
}

sub dijkstra {
    my ($routeref, $source, $destination) = @_;
    my @routes = @{$routeref};

    my %adjacency;
    for my $route (@routes) {
        my @nodes = @$route;
        for my $i (0 .. $#nodes - 1) {
            push @{$adjacency{$nodes[$i]}}, $nodes[$i + 1];
            push @{$adjacency{$nodes[$i + 1]}}, $nodes[$i];
        }
    }

    my %distance;
    my %visited;
    my %previous;
    $distance{$source} = 0;

    my %new_visits;
    while (keys %visited != keys %adjacency) {
        my $node = min(grep {!defined $visited{$_}} keys %distance);
        $visited{$node} = 1;

        for my $adjacent (@{$adjacency{$node}}) {
            my $total_distance = $distance{$node} + 1;
            if (!defined $distance{$adjacent} || $total_distance &lt; $distance{$adjacent}) {
                $distance{$adjacent} = $total_distance;
                $previous{$adjacent} = $node;
            }
        }

        if (%visited == %new_visits &amp;&amp; !$visited{$destination}) {
            return -1;
        } elsif ($visited{$destination}) {
            last;
        }
        %new_visits = %visited;
    }

    my @route;
    my $node = $destination;
    while ($node != $source) {
        unshift @route, $node;
        $node = $previous{$node};
    }
    unshift @route, $source;

    return \@route;
}
</code></pre>

<p>The first iteration through, the second example ended up in an endless loop because it kept trying to reach the separate set of nodes and couldn't. Because of that, I had to write the no route code properly, which essentially checks whether we're making any progress through the route or not. If not and we've reached a dead-end, we return a -1 and leave. However, the third example shows that we also need to handle the case where there are nodes that can't be reached but we have visited the destination, so that's included in the no route code.</p>

<h4>Conclusion</h4>

<p>This week we had a very simple challenge and a tough one. I had fun with the first one (albeit briefly) and I learned a lot from the second one, including the power of AI. It's a very powerful tool to have on hand. Have a good week and if I have time next week I'll see you then with the next challenge!</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8746119144817944657</id>
    <published>2023-04-22T21:56:00.000+02:00</published>
    <updated>2023-04-22T21:56:56.827+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxli) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002003&lt;/strong&gt; on 2023-04-19, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002002 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Module-Build-Tiny-0.043' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::Build::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny replacement for Module::Build
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.043&lt;/strong&gt; on 2023-04-19, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.039 was 8 years, 6 months, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230420' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230420&lt;/strong&gt; on 2023-04-20, with 42 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230320 was 30 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAREKR/Pod-Parser-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Parser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Modules for parsing/translating POD format documents
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2023-04-22, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.65 was 11 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAREKR'&gt;MAREKR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 62 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 23 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 22 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.971002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.971002&lt;/strong&gt; on 2023-04-22, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9705 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v9.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;v9.2.0&lt;/strong&gt; on 2023-04-17, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: v9.0.0 was 3 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DANBERR'&gt;DANBERR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-22, with 20 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/CORION'&gt;CORION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8746119144817944657/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html" title="(cdxli) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7735320647946670040</id>
    <published>2023-04-22T21:52:00.001+02:00</published>
    <updated>2023-04-22T21:52:55.784+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dliii) metacpan weekly report - Getopt::Long &amp; Dash</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 75&lt;/p&gt;
&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Getopt::Long"&gt;Getopt::Long&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&amp;amp;&lt;b&gt; &lt;a href="https://metacpan.org/module/Dash"&gt;Dash&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/22 19:49:48 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Modify" target="_blank"&gt;Env::Modify&lt;/a&gt; - affect Perl %ENV from subshell&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/POE::Component::Win32::Service" target="_blank"&gt;POE::Component::Win32::Service&lt;/a&gt; - A POE component that provides non-blocking access to Win32::Service.
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Rest::Client::Builder" target="_blank"&gt;Rest::Client::Builder&lt;/a&gt; - Base class to build simple object-oriented REST clients&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::GetEnv" target="_blank"&gt;Shell::GetEnv&lt;/a&gt; - extract the environment from a shell after executing commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadPassword::Win32" target="_blank"&gt;Term::ReadPassword::Win32&lt;/a&gt; - Asking the user for a password (for Win32)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Win32::PEPM" target="_blank"&gt;Acme::Win32::PEPM&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=159)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=43)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Devel" target="_blank"&gt;Catalyst::Devel&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+2=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Perl::Releases" target="_blank"&gt;CPAN::Perl::Releases&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Curses::UI" target="_blank"&gt;Curses::UI&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+3=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Util" target="_blank"&gt;Data::Util&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::HMAC" target="_blank"&gt;Digest::HMAC&lt;/a&gt; (+1=11)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env" target="_blank"&gt;Env&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Event" target="_blank"&gt;Event&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Fennec" target="_blank"&gt;Fennec&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Rule" target="_blank"&gt;File::Find::Rule&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Forks::Super" target="_blank"&gt;Forks::Super&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Frost" target="_blank"&gt;Frost&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Gepok" target="_blank"&gt;Gepok&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::App" target="_blank"&gt;Getopt::App&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+3=117)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Mini" target="_blank"&gt;Getopt::Mini&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Message" target="_blank"&gt;HTTP::Message&lt;/a&gt; (+1=63)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Request::FromCurl" target="_blank"&gt;HTTP::Request::FromCurl&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::CPP" target="_blank"&gt;Inline::CPP&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jmx4perl" target="_blank"&gt;jmx4perl&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::projectroot" target="_blank"&gt;lib::projectroot&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=162)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=102)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=97)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::LvalueAttribute" target="_blank"&gt;MooX::LvalueAttribute&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Fastly" target="_blank"&gt;Net::Fastly&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/OrePAN2" target="_blank"&gt;OrePAN2&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=39)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Piper" target="_blank"&gt;Piper&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=57)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sepia" target="_blank"&gt;Sepia&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ProgressBar" target="_blank"&gt;String::ProgressBar&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tangram" target="_blank"&gt;Tangram&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::File" target="_blank"&gt;Test::File&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=183)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ANSITable" target="_blank"&gt;Text::ANSITable&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/TUWF" target="_blank"&gt;TUWF&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::API" target="_blank"&gt;Twitter::API&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32" target="_blank"&gt;Win32&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Daemon" target="_blank"&gt;Win32::Daemon&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Exe" target="_blank"&gt;Win32::Exe&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Mechanize::NotepadPlusPlus" target="_blank"&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::OLE" target="_blank"&gt;Win32::OLE&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Packer" target="_blank"&gt;Win32::Packer&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Pipe" target="_blank"&gt;Win32::Pipe&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::ShellQuote" target="_blank"&gt;Win32::ShellQuote&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7735320647946670040/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html" title="(dliii) metacpan weekly report - Getopt::Long &amp; Dash"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8619909316773646777</id>
    <published>2023-04-22T21:48:00.000+02:00</published>
    <updated>2023-04-22T21:48:13.429+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;
Build date: 2023-04-22 19:47:15 GMT&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76030424" target="_blank"&gt;How do I quote the special character + and a one-letter-plus-two-digit string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76027200" target="_blank"&gt;How can I refer to blessed block of code using reference to the object?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76052075" target="_blank"&gt;Difference between calling named anonymous function and regular subroutine&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76048997" target="_blank"&gt;Replace next line after match in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76060678" target="_blank"&gt;Perl - Unexpected behavior: Iterating thru an array "foreach $r (@a)" if iterator $r is changed via regex - the array elements themselves are changed&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8619909316773646777/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html" title="(dlxxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title> This week in PSC (104)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-104.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11080</id>
    <published>2023-04-21T21:09:01Z</published>
    <updated>2023-04-21T21:09:57Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>All three of us met, having skipped last week.</p>

<p>There wasn't much to talk about because code freeze ahead of 5.38 is in
effect, so there isn't much going on.</p>

<ul>
<li><p>We talked further about the upcoming deprecations scheduled for
5.38.0 (smartmatch, tick-as-package-separator), and concluded that
we remain committed to keeping them deprecated on the current
schedule.</p></li>
<li><p>Next week's meeting will be in person in the French city of Lyon.</p></li>
</ul>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 213: Fun Sort</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/04/perl-weekly-challenge-213-fun-sort.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11078</id>
    <published>2023-04-18T00:02:02Z</published>
    <updated>2023-04-18T00:06:19Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 213 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-213/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on April 23, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Fun Sort</h2>

<p><em>You are given a list of positive integers.</em></p>

<p><em>Write a script to sort the all even integers first then all odds in ascending order.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @list = (1,2,3,4,5,6)
Output: (2,4,6,1,3,5)
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1,2)
Output: (2,1)
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (1)
Output: (1)
</code></pre>

<h3>Fun Sort in Raku</h3>

<p>In theory, this task should ideally use a special comparison subroutine to be used with <code>sort</code> that leads to the desired sorting order. </p>

<p>It is, however, simpler to separate even and odd numbers into two lists (for example using <code>grep</code>), sort the lists and then reassemble the lists in the proper order.</p>

<pre><code>sub fun-sort (@in) {
    return (@in.grep({$_ %% 2}).sort, 
            @in.grep({$_ % 2}).sort).flat;
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say fun-sort @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<p>For the fun of it, or perhaps for the sake of trying to be pedantic <code>;-)</code> , let&#8217;s see how we can do the same using a special comparison subroutine. Note that <code>Less</code> and <code>More</code> (and also <code>Same</code>) are special values provided by the <a href="https://docs.raku.org/type/Order.html">Order</a> <code>enum</code> and are respectively equal to -1 and 1 (and 0). When the <code>fun-cmp</code> subroutine returns <code>Less</code> (i.e. -1), then the <code>sort</code> routine knows that the first parameter (<code>$a</code> in this case) should be ordered before the second one (<code>$b</code>). Conversely, the first parameter should be ordered after the second one if the comparison subroutine returns <code>More</code>. When both parameters are even, or both are odd, we just use the <code>&lt;=&gt;</code> numeric comparison operator (which also returns <code>Less</code>, <code>More</code>, or <code>Same</code> to the <code>sort</code> function).</p>

<pre><code>sub fun-cmp ($a, $b) { 
    if $a %% 2 {
        return $a &lt;=&gt; $b if $b %% 2;
        return Less;
    } else {
        return $a &lt;=&gt; $b unless $b %% 2;
        return More;
  }
}

for &lt;1 2 3 4 5 6&gt;, &lt;1 2&gt;, (1,),
     1..15, (1..15).reverse -&gt; @test {
    say sort &amp;fun-cmp, @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./fun-sort2.raku
(2 4 6 1 3 5)
(2 1)
(1)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
(2 4 6 8 10 12 14 1 3 5 7 9 11 13 15)
</code></pre>

<h3>Fun Sort in Perl</h3>

<p>This is a port to Perl of the first Raku program above, splitting the input into two lists (even and odd numbers), sorting them separately and reassembling the sorted sub-lists at the end.</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    return (sort { $a &lt;=&gt; $b } grep { $_ % 2 == 0 } @_),
           (sort { $a &lt;=&gt; $b } grep { $_ % 2 != 0 } @_);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./fun-sort.pl
2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Note that we could also first sort the input and then split the result into even and odd numbers and finally rearrange them:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_sort {
    my @sorted = sort { $a &lt;=&gt; $b } @_;
    return (grep { $_ % 2 == 0 } @sorted), 
           (grep { $_ % 2 != 0 } @sorted);
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", fun_sort @$test;
}
</code></pre>

<p>This program displays the same output as before:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<p>Finally, just as in Raku, we can also be pedantic in Perl and write a special comparison subroutine:</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub fun_cmp { 
    if ($a % 2 == 0) {
        return $a &lt;=&gt; $b unless $b % 2;
        return -1;
    } else {
        return $a &lt;=&gt; $b if $b % 2;
        return 1;
  }
}

for my $test ([&lt;1 2 3 4 5 6&gt;], [(1, 2)], [(1)],
    [1..15], [reverse (1..15)]) {
    say join " ", sort { fun_cmp } @$test;
}
</code></pre>

<p>This program displays again the same output:</p>

<pre><code>2 4 6 1 3 5
2 1
1
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
2 4 6 8 10 12 14 1 3 5 7 9 11 13 15
</code></pre>

<h2>Task 2: Shortest Route</h2>

<p>This second task will be handled later, if I find the time.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on April 30, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>A Simple Guide to Extract GPS Information from GoPro Photos and Videos</title>
    <link rel="alternate" href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1727/1*zNI5ysYb953nYHc4HfHWaA.png" width="1727"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Many people have a consumer grade camera like GoPro, these cameras are nice and resistant to create action videos and shots in the water&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>John R. Ballesteros</name>
    </author>
    <id>https://medium.com/p/cf6edf6dc601</id>
    <published>2023-04-16T22:20:32Z</published>
    <updated>2023-04-16T22:24:38.457000Z</updated>
    <category term="gps"/>
    <category term="gis"/>
    <category term="gopro"/>
    <category term="geotag"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Technical Log of Open Source Contribution: Quine in Perl</title>
    <link rel="alternate" href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Overview:</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Gustavo Higuera Mayoral</name>
    </author>
    <id>https://medium.com/p/6d9b5c47bae1</id>
    <published>2023-04-12T05:20:35Z</published>
    <updated>2023-04-12T05:20:35.691000Z</updated>
    <category term="quine"/>
    <category term="open-source"/>
    <category term="perl"/>
    <category term="contribution"/>
  </entry>
  <entry>
    <title>The Top 3 Worst Programming Languages in March 2023</title>
    <link rel="alternate" href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1384/1*H05geM04SX-7-TDYG2PKrQ.png" width="1384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Are you an outdated programming loser? If so&amp;#x200A;&amp;#x2014;&amp;#x200A;this article is for you!&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>TechTrendTracker</name>
    </author>
    <id>https://medium.com/p/7ce6936bea62</id>
    <published>2023-04-06T23:02:15Z</published>
    <updated>2023-04-06T23:02:15.233000Z</updated>
    <category term="software-development"/>
    <category term="programming"/>
    <category term="technology"/>
    <category term="perl"/>
    <category term="python"/>
  </entry>
  <entry>
  <title>TPRC Paper Call Extended! </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/papercallextended"/>
  <id>tag:news.perlfoundation.org,2023-04-03:/post/papercallextended</id>
  <published>2023-04-03T20:37:48</published>
  <updated>2023-04-03T20:37:48</updated>
  <summary>
  <![CDATA[
     Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and got a chance to talk with Daria and Tumer, who will be our hosts in July. The reception featured a variety of food, and it was all delicious. We're a few papers short for the conference, so the **Call For Papers has been re-opened briefly get those papers in by Friday, April 7 at 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/b58a8f7ad4543e38b72997447c25432307b09af6/toronto tile.PNG" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Alex Beamish, our TPRC 2023 event coordinator, visited the Doubletree last week for a reception, and  got a chance to talk with Daria and Tumer, who will be our hosts in July. <p>
The reception featured a variety of food, and it was all delicious.<p>
We're a few papers short for the conference, so the <strong>Call For Papers has been re-opened briefly -- get those papers in by Friday, April 7 at 2359UTC (8pm Eastern).</strong><p>
If you'd like to stay longer at the Doubletree in Toronto than the conference rates run for, call the hotel and speak with <strong>Susan Song</strong> -- she'll fix you up.<p>
You can also email Susan at -- <strong>doubletree@tprc.to</strong>. <p>
The standard room at the hotel has a single king bed, but there are some rooms available with two queens -- same deal, call or write to Susan.<p>
Finally, Ovid's announced the title for his keynote talk -- <strong>Coming Soon!</strong> <p>We think it's an awesome title.<p>
<strong>Get those papers in, sign up for the conference, book a room and make your travel plans soon!</strong> <p>
Now less than 100 days away!<p>
If you're travelling the the conference from outside Canada (<em>this probably includes most of you</em>), check here to find out what requirements there are for a visa: https://www.cic.gc.ca/english/visit/visas.asp</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Building Planets with Perlanet and GitHub</title>
    <link rel="alternate" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><blockquote>
<p class="quoteText">Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.</p>
<p style="text-align: right;"><em>Douglas Adams – The Hitchhiker’s Guide to the Galaxy</em></p>
</blockquote>
<p>I don’t still wear a digital watch, but I do like other things that are almost as unhip. In particular, I pine for the time about twenty years ago when web feeds looked like they were about to take over the world. Everyone had their favourite feed reader (I still miss Google Reader) and pretty much any useful web site would produce one or more web feeds that you could subscribe to and follow through your feed reader. For a few years, it was almost unthinkable to produce a web site without publishing a feed which included the changes to the site’s content.</p>
<p>Then, at some point, that changed. It wasn’t that web feeds vanished overnight. They still exist for many sites. But they are no longer ubiquitous. You can’t guarantee they’ll exist for every site you’re interested in. I remember people saying that social media would replace them. I was never convinced by that argument but, interestingly, one of the first times I noticed them vanishing was when Twitter removed their web feed of a user’s posts. They wanted people to use their AP instead (so I wrote <a href="https://github.com/davorg/twitter-json2atom">twitter-json2atom</a> that turned their API’s JSON into an Atom feed – I suspect it no longer works). Honestly, I think the main reason for the fall in popularity of web feeds was that people wanted you to read their content on their web sites where the interesting content was surrounded by uninteresting adverts.</p>
<p>But, as I said, not all web feeds vanished. There are still plenty of them out there (often, I expect because the sites’ owners don’t realise they’re there or don’t know how to turn them off). And that means the web feed-driven technologies of the early 2000s can still be useful.</p>
<p>One such piece of technology is the feed aggregator. I remember these being very popular. You would create a web site and configure it with a list of web feeds that you were interested in. The site would be driven by a piece of software that every few hours would poll the web feeds in the configuration and use the information it found to create a) a web page made up of information from the feeds and b) another feed that contained all of the information from the source feeds. The most popular software for building these sites was called Planet Planet and was written in Python (it seems to have vanished sometime in the last twenty years, otherwise I would link to it). When I wrote a Perl version, I called it (for reasons I now regret) <a href="https://metacpan.org/pod/Perlanet">Perlanet</a>.</p>
<p>I still use Perlanet to build planet sites. And they’re all listed at <a href="https://theplanetarium.org/">The Planetarium</a>. Recently, I’ve started hosting all my planets on <a href="https://pages.github.com/">GitHub Pages</a>, using <a href="https://github.com/features/actions">GitHub Actions</a> to rebuild the sites periodically. I thought that maybe other people might be old-skool like me and might want to build their own planets – so in the rest of this post I’ll explain how to do that, using <a href="https://perl.theplanetarium.org/">Planet Perl</a> as an example.</p>
<p>The first thing you’ll need is a GitHub account and a repo to store the code for your planet. I’m going to assume you know how to set those up (in the interest of keeping this tutorial short). You only actually need two files to create a planet – a config file and a template for the web site.</p>
<p>Here’s part of the config for Planet Perl:</p><pre class="urvanov-syntax-highlighter-plain-tag">title: Planet Perl
description: There's More Than One Way To Aggregate It
url: https://perl.theplanetarium.org/
author:
  name: Dave Cross
  email: dave@theplanetarium.org
  twitter: davorg
entries: 75
entries_per_feed: 5
opml_file: docs/opml.xml
page:
  file: docs/index.html
  template: index.tt
feed:
  file: docs/atom.xml
  format: Atom
google_ga: G-HD966GMRYP
cutoff_duration:
  months: 1
feeds:
  - feed: https://www.perl.com/article/index.xml
    title: perl.com
    web: https://perl.com/
  - feed: https://news.perlfoundation.org/atom.xml
    title: Perl Foundation News
    web: https://news.perlfoundation.org/</pre><p>I’ve tried to make it self-explanatory. At the top, there are various config options for the output (the web page and the aggregated feed) and, below, are details of the feeds that you want to aggregate. Let’s look at the output options first.</p>
<ul>
<li>title and description: these are both strings that you can include on the web page that is created. They’re also used in the aggregate feed that is produced</li>
<li>url: this is where the web page will be available on the web</li>
<li>author: this contains details of the person publishing the aggregated site and feed. The Twitter handle is optional</li>
<li>entries: is the maximum number of entries that your output will contain in total</li>
<li>entries_per_feed: is the maximum number of entries that you will use from each of your feeds. This is to stop your output being swamped with entries from a particularly busy feed. This can be omitted, in which case there will be no limit</li>
<li>opml_file: OPML stands for “Outline Processor Markup File”. It used to be trendy to publish an OPML file which is a machine-readable data file which contains a list of the feeds that you are aggregating. These days, no-one cares. If you omit this setting, the file won’t be created.</li>
<li>page: this contains details of the web page you create. The template is the name of a template file that is used to create the HTML page (more on that below) and file is where the output page is written. If you keep the value used in my example, then things will work well with GitHub Pages as we’ll see later</li>
<li>feed: this contains details of the aggregate feed we create. You can choose a format (Atom or RSS) and the filename. Again, the default filename will work well with GitHub Pages</li>
<li>google_ga: if this value exists, then it will be used as the Google Analytics identifier for the web page that is created</li>
<li>cutoff_duration: this is another way to control which entries are used in your output feed. Any entries that were published longer ago than this period of time will be ignored</li>
</ul>
<p>Then we have the section of the config file that defines the feeds that we are going to aggregate. Each feed has three data items:</p>
<ul>
<li>feed: the URL of the feed</li>
<li>title: a string to use to describe the feed</li>
<li>web: the URL of the feed’s original web page</li>
</ul>
<p>And that’s all you need for the config file. Create that, put it in a file called “perlanetrc” and add it to your repo.</p>
<p>The other file you need is the template for the HTML page. This is usually called “index.tt”. <a href="https://github.com/davorg/planetperl/blob/master/index.tt">The one I use for Planet Perl</a> is rather complicated (there are all sorts of Javascript tricks in it). <a href="https://github.com/davorg/planetdavorg/blob/main/index.tt">The one I use for Planet Davorg</a> is far simpler – and should work well with the config file above. I suggest going with that initially and editing it once you’ve got everything else working.</p>
<p>I said those are the only two files you need. And that’s true. But the site you create will be rather ugly. My default web page uses <a href="https://getbootstrap.com/">Bootstrap</a> for CSS, but you’ll probably want to add your own CSS to tweak the way it looks – along with, perhaps, some Javascript and some images. All of the files that you need to make your site work should be added to the /docs directory in your repo.</p>
<p>Having got to this stage, we can test your web site. Well, we’ll need to install Perlanet first. There are two ways to do this. You can either install it from CPAN along with all of its (many) dependencies – using “cpan Perlanet” or there’s <a href="https://hub.docker.com/r/davorg/perl-perlanet">a Docker image</a> that you can use. Either way, once you have the software installed, running it is as simple as running “perlanet”. That will trundle along for a while and, when it has finished, you’ll find new files called “index.html” and “atom.xml” in the /docs directory. My favourite way to test the output locally is to use <a href="https://metacpan.org/dist/App-HTTPThis">App::HTTPThis</a>. Having installed this program, you can just run “http_this docs” from the repo’s main directory and then visit http://localhost:7007/index.html to see the site that was produced (or http://localhost:7007/atom.xml to see the feed.</p>
<p>You now have a system to build your new planet. You could run that on a server that’s connected to the internet and set up a cronjob to regenerate the file every few hours. And that’s how I used to run all of my planets. But, recently, I’ve moved to running them on GitHub Pages instead. And that’s what we’ll look at next.</p>
<p>There are two parts to this. We need to configure our repo to have a GitHub Pages site associated with it and we also need to configure GitHub Actions to rebuild the site every few hours. Let’s take those two in turn.</p>
<p>Turning on GitHub Pages is simple enough. Just go to the “Pages” section in your repo’s settings. Choose “GitHub Actions” as the deployment source and tick the box marked “Enforce HTTPS”. Later on, you can look at setting up a custom domain for your site but, for now, let’s stick with the default URL which will be https://&lt;github_username&gt;.github.io/&lt;repo_name&gt;. Nothing will appear yet, as we need to set up GitHub Actions next.</p>
<p>Setting up a GitHub Action workflow is as simple as adding a YAML file to the /.github/workflows directory in your repo. You’ll obviously have to create that directory first. Here’s the workflow definition for Planet Perl (it’s in a file called “buildsite.yml”, but that name isn’t important).</p><pre class="urvanov-syntax-highlighter-plain-tag">name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '37 */4 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: davorg/perl-perlanet:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create pages
      run: |
        mkdir -p docs
        perlanet &gt; perlanet.log 2&gt;&amp;1
    - name: Commit new page
      if: github.repository == 'davorg/planetperl'
      run: |
        git config --global --add safe.directory /__w/planetperl/planetperl
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
    - name: Archive perlanet logs
      uses: actions/upload-artifact@v3
      with:
        name: perlanet.log
        path: ./perlanet.log
        retention-days: 3

    - name: Update pages artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: docs/

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2</pre><p>The first section of the file defines the events that will trigger this workflow. I have defined three triggers:</p>
<ol>
<li>Pushing a commit. I could be cleverer here and only work when certain files are changed (for example, the config or the index.tt)</li>
<li>On a schedule. My example runs at 37 minutes past the hour every four hours (so at 04:37, 08:37, etc.)</li>
<li>Manually. The “workflow_dispatch” trigger adds a button to the repo’s “Actions” page on GitHub allowing you to run the workflow manually, whenever you want</li>
</ol>
<p>Following that, we define the jobs that need to be run and the steps that make up those jobs. We have two jobs – one that builds the new version of the site and one that deploys that new site to GitHub Pages. Remember how I mentioned earlier that there is a Perlanet container on the Docker Hub? Well, you’ll see that the build job runs on that container. This is because pulling a container from the Docker Hub is faster than using a standard Ubuntu container and installing Perlanet.</p>
<p>The steps in these jobs should be pretty self-explanatory. Basically, we check out the repo, run “perlanet” to build the site and then deploy the contents of the /docs directory to the GitHub Pages server.</p>
<p>Once you’ve created this file and added it to your repo, you’ll see details of this workflow on the “Actions” tab in your repo. And whenever you push a change or when a scheduled run takes place (or you press the manual run button) you’ll see logs for the run and (hopefully) your web site will update to contain the latest data.</p>
<p>I reckon you can get a new planet up and running in about half an hour. Oh, and if you label your repo with the topic “perlanet”, then it will automatically be added to The Planetarium.</p>
<p>So, what are you waiting for? What planet would you like to build?</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital… <a class="more-link" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Continue reading <span class="screen-reader-text">Building Planets with Perlanet and GitHub</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2023/04/building-planets-with-perlanet-and-github/">Building Planets with Perlanet and GitHub</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2104</id>
    <published>2023-04-02T17:54:37Z</published>
    <updated>2023-04-02T17:54:37Z</updated>
    <category term="Programming"/>
    <category term="atom"/>
    <category term="perlanet"/>
    <category term="planet"/>
    <category term="rss"/>
    <category term="web feed"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Mar 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MyFirstModule-BDFOY">Acme-MyFirstModule-BDFOY</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>The great new Acme::MyFirstModule::BDFOY!</td>
<td>2023-03-09T00:24:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AnyEvent-MPV">AnyEvent-MPV</a></td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>remote control mpv (<a href="https://mpv.io" rel="nofollow">https://mpv.io</a>)</td>
<td>2023-03-19T23:26:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-03-27T13:24:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CveClient">App-CveClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for CVE.org</td>
<td>2023-03-27T11:25:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ENumberUtils">App-ENumberUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to E Numbers (European Union Food Additive codes)</td>
<td>2023-03-01T07:18:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Filite-Client">App-Filite-Client</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>command-line client for Filite servers</td>
<td>2023-03-23T18:18:27</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FireDiamondUtils">App-FireDiamondUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to fire diamond (NFPA 704 standard)</td>
<td>2023-03-29T00:33:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ModuleReleaseSelectUtils">App-ModuleReleaseSelectUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Utilities related to Module::Release::Select</td>
<td>2023-03-09T10:50:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-NetkitGui">App-NetkitGui</a></td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>A GUI for Netkit labs.</td>
<td>2023-03-11T16:54:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Sakisafe">App-Sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T21:29:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-JSON">App-Test-DWG-LibreDWG-JSON</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG file by LibreDWG JSON conversions.</td>
<td>2023-03-29T23:55:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Yabsm">App-Yabsm</a></td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>a btrfs snapshot and backup management system</td>
<td>2023-03-21T16:42:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-chars2code">App-chars2code</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>UTF8の文字列を1行ずつ読み取り、各文字をU+(16進数)の形式などに変換して、1行ずつ出力する。</td>
<td>2023-03-21T07:07:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-cmdout2git">App-cmdout2git</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>コマンドの出力結果を、Gitのレポジトリの中のファイルに保管する。</td>
<td>2023-03-10T10:02:08</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirdir">App-dirdir</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>「何階層潜った所から最大何階層下までディレクトリを持つディレクトリが何個存在するか」を行列状に示す。</td>
<td>2023-03-21T14:25:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ggdrv">App-ggdrv</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td/>
<td>2023-03-16T02:44:38</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-lasttouch">App-lasttouch</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>指定ディレクトリのファイル全て(直下のみでない)に対して、最後に変更された順で網羅的に表示する。</td>
<td>2023-03-25T15:02:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Scalar-Util-Numeric">Bencher-Scenario-Scalar-Util-Numeric</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Scalar::Util::Numeric vs Scalar::Util::Numeric::PP</td>
<td>2023-03-05T00:05:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-ShellQuote-Any">Bencher-Scenario-ShellQuote-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark cross-platform shell quoting</td>
<td>2023-03-12T00:05:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-BySpec">Bencher-Scenario-Sort-BySpec</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::BySpec (e.g. against Sort::ByExample, etc)</td>
<td>2023-03-19T00:05:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-HashKeys">Bencher-Scenario-Sort-HashKeys</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::HashKeys</td>
<td>2023-03-26T00:05:57</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAPE-Utils">CAPE-Utils</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>A helpful library for with CAPE.</td>
<td>2023-03-11T17:09:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-HSM">Crypt-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A PKCS11 implementation</td>
<td>2023-03-28T13:18:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Linux">Crypt-Passphrase-Linux</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>An linux crypt encoder for Crypt::Passphrase</td>
<td>2023-03-07T22:54:25</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Yescrypt">Crypt-Passphrase-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A yescrypt encoder for Crypt::Passphrase</td>
<td>2023-03-12T16:03:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Yescrypt">Crypt-Yescrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A Perl interface to the yescrypt password hash</td>
<td>2023-03-12T14:58:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Oracle-UpgradeUtf8">DBIx-Oracle-UpgradeUtf8</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>automatically upgrade Perl strings to utf8 before sending them to DBD::Oracle</td>
<td>2023-03-06T15:50:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Date">Data-Sah-ValueBundle-Date</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to dates (and times)</td>
<td>2023-03-30T01:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-ValueBundle-Path">Data-Sah-ValueBundle-Path</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Default value rules related to paths</td>
<td>2023-03-30T15:02:48</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-GPIB">Device-GPIB</a></td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>Perl extension to access a variety of generic and specific GPIB devices, via a number of supported GPIB interfaces.</td>
<td>2023-03-30T04:18:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Parallel">HealthCheck-Parallel</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>A HealthCheck that uses parallelization for running checks</td>
<td>2023-03-28T15:42:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Image-ThumbHash">Image-ThumbHash</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>A very compact representation of an image placeholder</td>
<td>2023-03-24T18:22:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JIP-Mock">JIP-Mock</a></td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td/>
<td>2023-03-30T17:47:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode">Jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-03-13T11:36:45</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Jacode4e">Jacode4e</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Converts Character Encodings for Enterprise in Japan</td>
<td>2023-03-22T00:44:07</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Khonsu">Khonsu</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>The great new Khonsu!</td>
<td>2023-03-04T11:54:01</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/List-Insertion">List-Insertion</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>Binary search a list for insertion point</td>
<td>2023-03-26T12:06:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Tar">Mojo-Tar</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>Stream your (ustar) tar files</td>
<td>2023-03-14T09:34:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Debugbar">Mojolicious-Plugin-Debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td/>
<td>2023-03-27T13:03:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-DirectoryServer">Mojolicious-Plugin-DirectoryServer</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>Serve static files from document root with directory index</td>
<td>2023-03-06T23:13:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-Rijksmuseum-Object">Museum-Rijksmuseum-Object</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>Access the Rijksmuseum object metadata API</td>
<td>2023-03-04T04:17:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-TePapa">Museum-TePapa</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>an interface to the Te Papa museum API</td>
<td>2023-03-11T16:22:30</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MQTT-Simple-One_Shot_Loader">Net-MQTT-Simple-One_Shot_Loader</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl package to add one_shot method to Net::MQTT::Simple</td>
<td>2023-03-23T00:20:54</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ODF-lpOD_Helper">ODF-lpOD_Helper</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>ease-of-use wrapper for ODF::lpOD</td>
<td>2023-03-14T06:46:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PDL-OpenCV">PDL-OpenCV</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>PDL bindings for OpenCV $descrip_label \n=head1 SYNOPSIS \n use PDL::OpenCV$last; \n=cut \nuse strict; use warnings; use PDL::OpenCV; # get constants EOPM pp_addhdr(qq{#include "opencv_wrapper.h"\n#include "wraplocal.h"\n}); my @flist = genpp_readfile('funclist.pl'); my @topfuncs = grep $_-&gt;[0] eq '', @flist; my %class2func2suffix; if (@topfuncs) { pp_bless("PDL::OpenCV$last"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF genpp(maybe_suffix \%class2func2suffix, @$_) for @topfuncs; } else { pp_addpm("=pod\n\nNone.\n\n=cut\n\n"); } for my $c (@classes) { pp_bless(my $fullclass = "PDL::OpenCV::$c"); pp_addxs(&lt;&lt;EOF); # work around PP bug MODULE = ${main::PDLMOD} PACKAGE = ${main::PDLOBJ} EOF my $doc = $class2doc{$c} // ''; $doc = text_trim doxy2pdlpod(doxyparse($doc)) if $doc; pp_addpm(&lt;&lt;EOD);</td>
<td>2023-03-26T06:02:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Parse-FireDiamond">Parse-FireDiamond</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Parse Fire Diamond (NFPA 704) notation</td>
<td>2023-03-29T00:33:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PerlX-ScopeFunction">PerlX-ScopeFunction</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>– new keywords for creating scopes.</td>
<td>2023-03-09T14:53:31</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Process-SubProcess">Process-SubProcess</a></td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>Library to manage Sub Processes as Objects</td>
<td>2023-03-29T07:15:49</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-DynamicWebPath">RT-Extension-DynamicWebPath</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>RT-Extension-DynamicWebPath Extension</td>
<td>2023-03-01T15:06:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Search-ElasticDirect">Search-ElasticDirect</a></td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>An interface to ElasticSearch API, version independent</td>
<td>2023-03-20T11:48:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tk-ColorEntry">Tk-ColorEntry</a></td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>Entry widget with a Tk::PopColor widget attached.</td>
<td>2023-03-21T20:25:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tuple-Munge">Tuple-Munge</a></td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>manipulate Perl's tuple object representations</td>
<td>2023-03-29T16:11:37</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Validate-CodiceFiscale">Validate-CodiceFiscale</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>Validate an Italian "Codice Fiscale"</td>
<td>2023-03-18T20:30:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Video-NRK-Cache">Video-NRK-Cache</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>Cache NRK Video on Demand broadcasts for offline viewing</td>
<td>2023-03-06T17:59:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Virani">Virani</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>PCAP retrieval for a FPC setup writing to PCAP files.</td>
<td>2023-03-14T18:28:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-PiHole">WWW-PiHole</a></td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>Perl interface to Pi-hole</td>
<td>2023-03-04T20:43:43</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Weather-Astro7Timer">Weather-Astro7Timer</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>Simple client for the 7Timer.info Weather Forecast service</td>
<td>2023-03-27T00:43:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Web-PerlDistSite">Web-PerlDistSite</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>generate fairly flashy websites for CPAN distributions</td>
<td>2023-03-29T20:49:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Tuya-IoT-API">WebService-Tuya-IoT-API</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>Perl library to access the Tuya IoT API</td>
<td>2023-03-08T15:20:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/cve-client">cve-client</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td/>
<td>2023-03-27T09:50:29</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mojo-debugbar">mojo-debugbar</a></td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>A nice Debugbar that helps developers using Mojolicious framework</td>
<td>2023-03-27T12:59:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/pica-data">pica-data</a></td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>PICA record processing</td>
<td>2023-03-15T12:15:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/sakisafe">sakisafe</a></td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>Simple file uploader using Mojolicious</td>
<td>2023-03-13T14:43:54</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>63</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>37</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/QORG">QORG</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CRLCU">CRLCU</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/HANJE">HANJE</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/RWP">RWP</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/VOJ">VOJ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/NHUBBARD">NHUBBARD</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/ZEFRAM">ZEFRAM</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/BODOLFO">BODOLFO</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/MIKEM">MIKEM</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/MLEHMANN">MLEHMANN</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/VLADIMIRZ">VLADIMIRZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MPOURASG">MPOURASG</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/RHYSADAMS">RHYSADAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-MyFirstModule-BDFOY BDFOY The great new Acme::MyFirstModule::BDFOY! 2023-03-09T00:24:03 AnyEvent-MPV MLEHMANN remote control mpv (https://mpv.io) 2023-03-19T23:26:17 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-03-27T13:24:41 App-CveClient LANODAN CLI-based client / toolbox for CVE.org 2023-03-27T11:25:17 App-ENumberUtils PERLANCAR Utilities related to E Numbers (European Union Food Additive codes) 2023-03-01T07:18:12 App-Filite-Client TOBYINK command-line client for … <a href="https://perlancar.wordpress.com/2023/04/01/list-of-new-cpan-distributions-mar-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Mar 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2055</id>
    <published>2023-04-01T02:59:19Z</published>
    <updated>2023-04-01T02:59:19Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
