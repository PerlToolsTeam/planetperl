<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-12-04T12:47:29Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The odd binary string</title>
    <link rel="alternate" href="https://dev.to/simongreennet/the-odd-binary-string-p64" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 193
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-193/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-193/sgreen">My solutions</a></p>

<p>Two relatively straight forward tasks this week, so not as much commentary as usual.</p>

<h2>
  
  
  Task 1: Binary String
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given an integer, <code>$n</code> &gt; 0.</p>

<p>Write a script to find all possible binary numbers of size <code>$n</code>.</p>

<h3>
  
  
  My solution
</h3>

<p>Thankfully both Python and Perl provide easy methods to convert a (base 10) integer into a binary number with leading zeros. For the integer <code>x</code> with <code>y</code> leading zeros, we can use <code>format(x, '0yb')</code> in Python, and <code>sprintf('%0yb', x)</code> in Perl.</p>

<p>With that out of the way, we know that all binary numbers can be converted from the integers between 0 and 2<sup>n</sup>-1 (inclusive).</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 2
00, 01, 10, 11

<span class="nv">$ </span>./ch-1.py 3
000, 001, 010, 011, 100, 101, 110, 111
</code></pre>

</div>



<h2>
  
  
  Task 2: Odd String
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of strings of same length, <code>@s</code>.</p>

<p>Write a script to find the odd string in the given list. Use positional value of alphabet starting with <code>0</code>, i.e. <code>a = 0, b = 1, ... z = 25</code>.</p>

<p>Find the difference array for each string as shown in the example. Then pick the odd one out.</p>

<h3>
  
  
  My solution
</h3>

<p>This task can be broken into three sub tasks:</p>

<ol>
<li>Create a dict (hash in Perl) called <code>letter_map</code> that maps the letters of the alphabet to integers, where <code>letter_map['a']</code> is 0, and <code>letter_map['z']</code> is 25.</li>
<li>Convert each word into a space separated values of differences. So <code>adc</code> is converted to <code>3 -1</code>. With this information I have an <code>occurrences</code> dict where the key is the converted string and the value is a list of words that match that pattern.</li>
<li>Calculate an array <code>unique_words</code> of values in <code>occurrences</code> that only have one value. If there is only one unique word, I display that. If not, I display an error.</li>
</ol>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py adc wzy abc
abc

<span class="nv">$ </span>./ch-2.py aaa bob ccc ddd
bob
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/the-odd-binary-string-p64</id>
    <published>2022-12-04T10:12:02Z</published>
    <updated>2022-12-04T10:12:02Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1808027491351841833</id>
    <published>2022-12-04T08:55:00.000+01:00</published>
    <updated>2022-12-04T08:55:16.047+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxi) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.74&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.73 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.27&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.25 was 1 year, 6 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.90&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 6.89 was 3 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DDICK/Firefox-Marionette-1.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Firefox::Marionette&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Automate the Firefox browser with the Marionette protocol &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.33&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 3 years, 4 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.882' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.882&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 1.881 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.879' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.879&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.878 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.013&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 2.010 was 1 year, 8 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.8007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8007&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8006 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 0.71 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.057' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.057&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.056 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.144&lt;/strong&gt; on 2022-12-01&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 0.142 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.142' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.142&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 125&lt;/li&gt;  &lt;li&gt;Previous version: 1.140 was 1 year, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.67&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.66 was 3 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9664' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9664&lt;/strong&gt; on 2022-11-30&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9662 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAYASHI/Term-ReadLine-Gnu-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::ReadLine::Gnu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for the GNU Readline/History Library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.44 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000136' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000136&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000133 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1808027491351841833/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxi-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1808027491351841833"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1808027491351841833"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxi-16-great-cpan-modules-released.html" title="(cdxxi) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1836666147745065918</id>
    <published>2022-12-04T08:51:00.001+01:00</published>
    <updated>2022-12-04T08:51:11.510+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxiv) metacpan weekly report - Perl::Dist::APPerl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 56&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/04 07:50:38 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FD" target="_blank"&gt;IO::FD&lt;/a&gt; - Faster accept, socket, listen with file descriptors, not handles&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tee" target="_blank"&gt;IO::Tee&lt;/a&gt; - Multiplex output to multiple output handles&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/KCP" target="_blank"&gt;KCP&lt;/a&gt; - Perl extension for skywind3000/kcp&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Joystick" target="_blank"&gt;Linux::Joystick&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Logging::Simple" target="_blank"&gt;Logging::Simple&lt;/a&gt; - Simple debug logging by number, with customizable labels and formatting&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/results" target="_blank"&gt;results&lt;/a&gt; - why throw exceptions when you can return them?&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::RunAlone" target="_blank"&gt;Role::RunAlone&lt;/a&gt; - prevent multiple instances of a script from running&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM::Numpy" target="_blank"&gt;SPVM::Numpy&lt;/a&gt; - Numpy is the Python/NumPy porting to Perl/SPVM&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Plugin::Cache" target="_blank"&gt;Template::Plugin::Cache&lt;/a&gt; - cache output of templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Terminal::Identify" target="_blank"&gt;Terminal::Identify&lt;/a&gt; - Perl extension for recognising the terminal emulator in use.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=62)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CSVUtils" target="_blank"&gt;App::CSVUtils&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::grindperl" target="_blank"&gt;App::grindperl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/bareword::filehandles" target="_blank"&gt;bareword::filehandles&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=76)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Run" target="_blank"&gt;Dist::Zilla::Plugin::Run&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Sender" target="_blank"&gt;Email::Sender&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Simple" target="_blank"&gt;Email::Simple&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::ParseXS" target="_blank"&gt;ExtUtils::ParseXS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Ordered" target="_blank"&gt;Hash::Ordered&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/indirect" target="_blank"&gt;indirect&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::ger" target="_blank"&gt;Log::ger&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Metrics::Any" target="_blank"&gt;Metrics::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=292)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Getopt" target="_blank"&gt;MooseX::Getopt&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/multidimensional" target="_blank"&gt;multidimensional&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IMAP::Simple" target="_blank"&gt;Net::IMAP::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Server" target="_blank"&gt;Net::Server&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Bangs" target="_blank"&gt;Perl::Critic::Bangs&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Pulp" target="_blank"&gt;Perl::Critic::Pulp&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlfaq" target="_blank"&gt;perlfaq&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Greylist" target="_blank"&gt;Plack::Middleware::Greylist&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Tree" target="_blank"&gt;Pod::Tree&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/strictures" target="_blank"&gt;strictures&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tee" target="_blank"&gt;Tee&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Harness" target="_blank"&gt;Test::Harness&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=107)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Vlc::Engine" target="_blank"&gt;Vlc::Engine&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML::PrettyPrint" target="_blank"&gt;XML::LibXML::PrettyPrint&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1836666147745065918/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1836666147745065918"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1836666147745065918"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxiv-metacpan-weekly-report.html" title="(dxxxiv) metacpan weekly report - Perl::Dist::APPerl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3522052913337568571</id>
    <published>2022-12-04T08:49:00.001+01:00</published>
    <updated>2022-12-04T08:49:43.275+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-12-04 07:49:14 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74591219" target="_blank"&gt;Hash key is storing only the last element of loop&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74669892" target="_blank"&gt;Is there a way to reformat w/ zero-fill a regex match group?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74645362" target="_blank"&gt;perl code to search and replace a pattern&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74597981" target="_blank"&gt;XMPP connection fails using perl client and ejabberd/ecs container&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74629067" target="_blank"&gt;Why is my last line is always output twice?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3522052913337568571/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3522052913337568571"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3522052913337568571"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxii-stackoverflow-perl-report.html" title="(dlxii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>The Weekly Challenge 193</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/12/03#pwc193" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, $n &gt; 0. Write a script to find all possible binary numbers of 
size $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub binary_numbers_size_n{
    my($n) = @_;
    my @numbers = map {
        sprintf("%0${n}b", $_)
    } 0 .. 2**$n - 1;
    return @numbers;
}

MAIN:{
    say join(", ", binary_numbers_size_n(2));
    say join(", ", binary_numbers_size_n(3));
    say join(", ", binary_numbers_size_n(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
00, 01, 10, 11
000, 001, 010, 011, 100, 101, 110, 111
0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I think it's fair to say that &lt;code&gt;sprintf&lt;/code&gt; is doing most of the work here! For those 
unfamiliar, the format string &lt;code&gt;"%0${n}b"&lt;/code&gt; means &lt;em&gt;print the number as binary of length $n,
left pad with 0s&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of strings of same length, @s. Write a script to find the odd string 
in the given list. Use positional alphabet values starting 
with 0, i.e. a = 0, b = 1, ... z = 25.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub odd_string{
    my(@strings) = @_;
    my %differences;
    for my $string (@strings){
        my $current;
        my $previous;
        my @differences;
        map {
            unless($previous){
                $previous = $_;
            }
            else{
                $current = $_;
                push @differences, ord($current) - ord($previous);
                $previous = $current;
            }        
        } split(//, $string);
        my $key = join(",", @differences);
        my $size_before = keys %differences;
        $differences{$key} = undef;
        my $size_after = keys %differences;
        return $string if $size_before &gt; 0 &amp;&amp; $size_after - $size_before == 1;
    }
    return undef;
}

MAIN:{
    say odd_string(qw/adc wzy abc/);
    say odd_string(qw/aaa bob ccc ddd/);
    say odd_string(qw/aaaa bbbb cccc dddd/) || "no odd string found";
    say odd_string(qw/aaaa bbob cccc dddd/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
abc
bob
no odd string found
bbob
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is one main assumption here and that is that the list of strings is going to be of
length three or more. If the array has length one then can we say that single string is 
"odd" in and of itself? And if we have only two strings and they aren't the same which is 
the the odd one?&lt;/p&gt;

&lt;p&gt;The basic steps of this solution are:&lt;/p&gt;

&lt;p&gt;1) For each string split it into an array of characters.&lt;/p&gt;

&lt;p&gt;2) Compute the differences. This is done in the &lt;code&gt;map&lt;/code&gt;. I'll concede that this is a 
somewhat unusual use of &lt;code&gt;map&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;3) Transform the differences into a single string to be used as a hash key using &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4) If we add this differences based key to the hash and the hash size changes by 
1 (assuming it is a non-empty hash) then we know we have found the unique "odd string" 
which is then returned.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-193/"&gt;Challenge 193&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc193</id>
    <published>2022-12-03T19:04:00-05:00</published>
    <updated>2022-12-03T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 4, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-04/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 3 | Day 4 |  The gift is presented by Alexander Pankoff. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 160&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Task #1: Four Is Magic You are given a positive number, $n &amp;lt; 10.
Write a script to generate english text sequence starting with the English cardinal representation of the given number, the word is and then the English cardinal representation of the count of characters that made up the first word, followed by a comma.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-04/</id>
    <published>2022-12-04T00:00:00Z</published>
    <updated>2022-12-04T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Advent Calendar 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">| 2019 | 2020 | 2021 | 2022 |  Welcome to our 4th Advent Calendar. I promise to present interesting topic every day contributed by esteemed members of Team PWC.                         MON
 TUE
 WED
 THU
 FRI
 SAT
 SUN</div>
    </content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022/</id>
    <published>2022-12-04T00:00:00Z</published>
    <updated>2022-12-04T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-12-04T00:00:00Z</published>
    <updated>2022-12-04T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Perl outlook for next year is favorable</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/the-perl-outlook-for-next-year-is-favorable-2ja9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The Perl outlook for next year is favorable for me.</p>

<p>AI, machine learning and IoT need more and more C/C++ for calculation in low level layer.</p>

<p>SPVM is a Perl module that is created by me. This module ease the binding C/C++/CUDA.</p>

<p>And Perl is good at text processing on Linux that is not good at for C/C++.</p>

<p>The combination of Perl and C/C++ is very good because they complement each other perfectly.</p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/the-perl-outlook-for-next-year-is-favorable-2ja9</id>
    <published>2022-12-03T23:41:26Z</published>
    <updated>2022-12-03T23:41:26Z</updated>
    <category term="perl"/>
    <category term="c"/>
    <category term="cpp"/>
    <category term="linux"/>
  </entry>
  <entry>
    <title>SPVM::Resource::SocketUtil 0.01 is released on Perl/CPAN</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvmresourcesocketutil-001-is-released-on-perlcpan-4ji9" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/SPVM::Resource::SocketUtil"&gt;SPVM::Resource::SocketUtil&lt;/a&gt; 0.01 is released on Perl/CPAN.&lt;/p&gt;

&lt;p&gt;This module is a &lt;a href="https://metacpan.org/pod/SPVM::Document::Resource"&gt;resource&lt;/a&gt; module for socket utilities.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  #include "spvm_socket_util.h"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  int32_t spvm_socket_errno (void);

  void* spvm_socket_strerror_string (SPVM_ENV* env, SPVM_VALUE* 

  const char* spvm_socket_strerror(SPVM_ENV* env, SPVM_VALUE* 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  New Features and Enhancement
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM-Resource-SocketUtil/blob/master/Changes"&gt;Changes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0.01 2022-12-04
  [Changes]
    * First release.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvmresourcesocketutil-001-is-released-on-perlcpan-4ji9</id>
    <published>2022-12-03T23:28:00Z</published>
    <updated>2022-12-03T23:28:00Z</updated>
    <category term="spvm"/>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="socket"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 3, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-03/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 2 | Day 3 | Day 4 |  The gift is presented by Colin Crain. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 191&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Task #2: Cute List You are given an integer, 0 &amp;lt; $n &amp;lt;= 15.
Write a script to find the number of orderings of numbers that form a cute list.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-03/</id>
    <published>2022-12-03T00:00:00Z</published>
    <updated>2022-12-03T00:00:00Z</updated>
  </entry>
  <entry>
    <title>SPVM::IO 0.14 is released on Perl/CPAN</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvmio-014-is-released-on-perlcpan-2n57" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/SPVM::IO"&gt;SPVM::IO&lt;/a&gt; 0.14 is released on Perl/CPAN.&lt;/p&gt;

&lt;h2&gt;
  
  
  New Features and Enhancement
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yuki-kimoto/SPVM-IO/blob/master/Changes"&gt;Changes&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0.14 2022-12-03
  [Prerequrement Changes]
    * SPVM::IO needs SPVM 0.9664+.
    * SPVM::IO needs SPVM::Sys 0.28+.
  [Incompatible Document Changes]
    * Removed the is_io_handlable method in the IO::Handle class in the doc.
      This was removed in the past.
  [Document Improvement]
    * Added the doc of the IO::Handle.
    * Added the doc of the IO::Handle::Interface.
  [Incompatible Changes]
    * Removed the autoflush method in the IO::File class.
    * Removed the get_autoflush in the IO::Handle class.
    * Changed the definitions of the following fields in the IO::Handle class.
      [Before]
      has autoflush : wo byte;
      [After]
      has autoflush : rw byte;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/spvmio-014-is-released-on-perlcpan-2n57</id>
    <published>2022-12-02T23:14:41Z</published>
    <updated>2022-12-02T23:14:41Z</updated>
    <category term="spvm"/>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title> This Week in PSC (089)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2022/12/this-week-in-psc-089.html"/>
    <id>tag:blogs.perl.org,2022:/users/psc//4112.10961</id>
    <published>2022-12-02T21:49:51Z</published>
    <updated>2022-12-02T21:54:21Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>Back to the full three of us. Not much needed looking at this week.</p>

<ul>
<li>Posted the smartmatch deprecation message to p5p@; will post it to blogs etc.. after a round of responses.
<li>Sent off a reminder that we're looking for help or a project manager on getting SSL support out of the box.
<li>Reviewed the RFC tracker and found some that are ready to implement but not nobody has started; they are nearing their expiry time. These are:
<ul>
<li><tt>${^ENGLISH_NAME}</tt> aliases for punctuation variables
<li>Optional chaining
<li>Drop support for <tt>'</tt> as package name separator
<li>Template Strings (<tt>qt</tt>)
</ul>
</ul>]]>
        
    </content>
</entry>
  <entry>
    <title>Advent Calendar - December 2, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-02/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 1 | Day 2 | Day 3 |  The gift is presented by James Smith. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 193&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Task #1: Binary String You are given an integer, $n &amp;gt; 0. Write a script to find all possible binary numbers of size $n.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-02/</id>
    <published>2022-12-02T00:00:00Z</published>
    <updated>2022-12-02T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Making GitHub CI work with Perl 5.8.</title>
    <link rel="alternate" href="https://blogs.perl.org/users/tom_wyant/2022/12/making-github-ci-work-with-perl-58.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10960</id>
    <published>2022-12-01T18:48:01Z</published>
    <updated>2022-12-01T18:52:07Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>A while back. I got a pull request from Gabor Szabo adding a GitHub action to one of my distributions. I have been working with this, but have not (so far) blogged about it because, quite frankly, I am still not sure I know what I am doing.</p>

<p>One of my personal desires was to test my distributions on the oldest practicable Perl for each available architecture. For Unix (i.e. Linux and macOS) this is 5.8.8, provided the distribution itself supports that. A couple days ago, though, I pushed a modification to one of my distributions and had the 5.8.8 tests blow up.</p>

<p>The problem turned out to be that <a href="https://metacpan.org/pod/Module::Build">Module::Build</a>, for reasons I have not investigated, has <a href="https://metacpan.org/pod/Pod::Man">Pod::Man</a> as a dependency. The current version of <code>Module::Build</code> requires <code>Pod::Man</code> version 2.17, but according to <a href="https://perldoc.perl.org/corelist">corelist</a> Perl 5.8.8 comes with <code>Pod::Man</code> version 1.37, so <code>cpanm</code> wants to upgrade it.</p>

<p>The problem with this is that as of version 5.0 released November 25 2022, the <a href="https://metacpan.org/dist/podlators">podlators</a> distribution, which supplies <code>Pod::Man</code>, requires Perl 5.10. So under 5.8.8, <code>cpanm --with-configure --notest --installdeps .</code> dies trying to install <code>podlators</code>.</p>

<p>The solution I came up with was to pre-emptively install <code>RRA/podlators-4.14.tar.gz</code> under Perl 5.8.8. The implementation was in two parts: define an environment variable that recorded whether we were running under Perl 5.10, and define a job step conditioned on that variable to install <code>podlators 4.14</code> if we were using an earlier Perl.</p>

<p>Under GitHub Actions you can define environment variables by appending their definitions to the file whose path is in environment variable <code>GITHUB_ENV</code>. After struggling with PowerShell for the Windows runners, I decided to do that step in Perl. The core of the Perl script is:</p>

<pre>
defined $ENV{GITHUB_ENV}
    and $ENV{GITHUB_ENV} ne ''
    or die "Environment variable GITHUB_ENV undefined or empty\n";
open my $fh, '&gt;&gt;:encoding(utf-8)', $ENV{GITHUB_ENV}
    or die "Can not open $ENV{GITHUB_ENV}: $!\n";

<p>my $home = File::HomeDir-&gt;my_home();<br />
my $is_5_10 = "$]" &gt;= 5.010 ? 1 : '';<br />
my $is_windows = {<br />
    MSWin32	=&gt; 1,<br />
    dos		=&gt; 1,<br />
}-&gt;{$^O} || '';<br />
my $is_unix = $is_windows ? '' : 1;</p>

<p>print $fh &lt;&lt;"EOD";<br />
MY_HOME=$home<br />
MY_IS_UNIX=$is_unix<br />
MY_IS_WINDOWS=$is_windows<br />
MY_PERL_IS_5_10=$is_5_10<br />
EOD<br />
</pre></p>

<p>Next I had to run this from the YAML file that defined the workflow, and act on the created value. This was done using two steps:</p>

<pre>
    - name: Customize environment
      run: |
        cpanm -v
        cpanm File::HomeDir
        perl .github/workflows/environment.PL
</pre>

<p>and</p>

<pre>
    - name: Install old podlators distro if on old Perl
      if: "! env.MY_PERL_IS_5_10"
      run: cpanm RRA/podlators-4.14.tar.gz
</pre>

<p>The entirety of both the GitHub Actions file <code>ci.yml</code> and the Perl script <code>environment.PL</code> can be found in <a href="https://github.com/trwyant/perl-Astro-Coord-ECI/tree/master/.github/workflows">the GitHub repository for Astro::Coord::ECI</a>. Other, and probably better, implementations can be imagined.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Day 2: Add GitHub Action CI to the Net-Async-Redis-XS Perl module</title>
    <link rel="alternate" href="https://dev.to/szabgab/day-2-add-github-action-ci-to-the-net-async-redis-xs-perl-module-9oo" type="text/html"/>
    <content type="html">&lt;p&gt;For the second day of the &lt;a href="https://dev.to/szabgab/the-2022-december-ci-challenge-5dof"&gt;2022 December CI Challenge&lt;/a&gt; I wanted to have a Perl module. Partially because I have working on adding CI to Perl modules for a while.&lt;/p&gt;

&lt;p&gt;I looked at &lt;a href="https://cpan-digger.perlmaven.com/"&gt;CPAN Digger&lt;/a&gt; where some Perl script collects and analyses the most recent uploads to CPAN, the central web site of of the Perl packages and &lt;a href="https://metacpan.org/"&gt;MetaCPAN&lt;/a&gt; is the user-friendly place to view the content of all the packages.&lt;/p&gt;

&lt;p&gt;When I looked at CPAN::Digger the first package that had a link to its GitHub repository but did not have CI&lt;br&gt;
was the &lt;a href="https://metacpan.org/dist/Net-Async-Redis-XS"&gt;Net-Async-Redis-XS&lt;/a&gt; distribution.&lt;/p&gt;

&lt;p&gt;I thought that could be a nice challenge as it will probably require having Redis installed on the CI server.&lt;/p&gt;
&lt;h2&gt;
  
  
  Background work - preparations
&lt;/h2&gt;

&lt;p&gt;Before I could start working on this project I wanted to create an example GitHub Action configuration where we have a Redis server and it is being access by &lt;code&gt;curl&lt;/code&gt;. I wasted a lot of time on this and thought I should try to do something simpler that I can experiment with on my own computer and I don't need to send it to GitHub and wait for it do run my code.&lt;/p&gt;

&lt;p&gt;So I started to work on a Docker Compose configuration where I had two containers. One is a Redis service and the other one is a simple client. Here to I failed to use &lt;code&gt;curl&lt;/code&gt; as the client. However, I could make it work using the official Redis client called &lt;strong&gt;redis-cli&lt;/strong&gt;. I added the example to my &lt;a href="https://code-maven.com/slides/docker/docker-compose-redis-server-and-client"&gt;Docker slides&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once I managed to create the Docker Compose configuration, creating the one running on GitHub Actions was easier. You can find my example in &lt;a href="https://github.com/szabgab/github-actions-redis/"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I 08 2-3 hours on the preparations, but I also created the examples so people will be able to base their work on these examples.&lt;/p&gt;
&lt;h2&gt;
  
  
  Creating the GitHub Action using Redis
&lt;/h2&gt;

&lt;p&gt;Once I had the Redis configuration the work on the Perl module was not that hard. I made a few typos and missed the fact that the repository has a &lt;code&gt;Makefile.PL&lt;/code&gt; so at first I tried to use &lt;code&gt;Dist::Zilla&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also had to include the installation of a few Perl modules in the GitHub Action configuration. I am not sure why is that.&lt;br&gt;
Are they really missing from the list of dependencies of the module? If yes, how does it even get installed by users?&lt;br&gt;
Did I miss a step that would have installed them?&lt;/p&gt;

&lt;p&gt;I'll leave the discussion about this for later, after the initial version of the CI is enabled.&lt;/p&gt;
&lt;h2&gt;
  
  
  Supported versions of Redis and Perl
&lt;/h2&gt;

&lt;p&gt;I added 3 versions of Redis to the matrix and tried a number of versions of Perl, but it worked only with Perl 5.36.&lt;/p&gt;

&lt;p&gt;Also I only tried this inside a Linux-based Docker container. Not on Windows and not on Mac OSX. I don't know if the module&lt;br&gt;
is even intended to support those platforms.&lt;/p&gt;
&lt;h2&gt;
  
  
  Adding a test
&lt;/h2&gt;

&lt;p&gt;After sending the Pull-reques I went for a long walk. That helped me realize that I never told the tests what is the hostname of the Redis servers. So I guess the tests of the module never actually tried to access the server.&lt;/p&gt;

&lt;p&gt;When I got back in-front of the computer I looked at the tests and indeed they were very shallow never trying to execute any&lt;br&gt;
operation that would need a server. So I created one, basically copying the example in the documentation of the module and put it in the &lt;code&gt;t&lt;/code&gt; directory where it belongs. The test will received the name of the Redis host via an environment variable called &lt;code&gt;REDIS_HOST&lt;/code&gt;. If this variable is not set these tests will be skipped. You can see the test-file called &lt;code&gt;t/set_get.t&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use strict;
use warnings;

use Test::More;
use Future::AsyncAwait;
use IO::Async::Loop;
use Net::Async::Redis::XS;

my $key = 'some-key';
my $value = 'some-value';

my $host = $ENV{REDIS_HOST};

plan skip_all =&amp;gt; 'Set REDIS_HOST to run this test' if not $host;

my $loop = IO::Async::Loop-&amp;gt;new;
$loop-&amp;gt;add(my $redis = Net::Async::Redis::XS-&amp;gt;new);
$redis-&amp;gt;configure(host =&amp;gt; $host);
await $redis-&amp;gt;connect;
await $redis-&amp;gt;set($key, $value);
my $result = await $redis-&amp;gt;get($key);
is $result, $value;

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've also update the GitHub Action configuration file so it will set the &lt;code&gt;REDIS_HOST&lt;/code&gt; environment variable to &lt;code&gt;redis&lt;/code&gt;, the name of &lt;strong&gt;redis service&lt;/strong&gt; that was included in the configuration file.&lt;/p&gt;

&lt;h2&gt;
  
  
  GitHub Actions configuration file
&lt;/h2&gt;

&lt;p&gt;I've included here the configuration file for future reference as the one in the project, if it even gets accepted, will probably change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;42&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;fail-fast&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Perl 5.30, 5.32., 5.34 all failed with all 3 versions of Redis&lt;/span&gt;
        &lt;span class="na"&gt;perl&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5.36'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;6.0'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;7.0'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;latest'&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;#redis: ['latest']&lt;/span&gt;

    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:${{matrix.redis}}&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Perl ${{matrix.perl}} Redis ${{matrix.redis}}&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;perl:${{matrix.perl}}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v3&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Perl Version&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;perl -v&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Modules&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cpanm --installdeps .&lt;/span&gt;
        &lt;span class="s"&gt;cpanm Test::Fatal&lt;/span&gt;
        &lt;span class="s"&gt;cpanm Net::Async::Redis&lt;/span&gt;
        &lt;span class="s"&gt;cpanm Test::MemoryGrowth&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Show Errors on Ubuntu&lt;/span&gt;
      &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;${{ failure() &amp;amp;&amp;amp; matrix.runner == 'ubuntu-latest' }}&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
         &lt;span class="s"&gt;cat /home/runner/.cpanm/work/*/build.log&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;AUTHOR_TESTING&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="na"&gt;RELEASE_TESTING&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="na"&gt;REDIS_HOST&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;perl Makefile.PL&lt;/span&gt;
        &lt;span class="s"&gt;make&lt;/span&gt;
        &lt;span class="s"&gt;make test&lt;/span&gt;
        &lt;span class="s"&gt;prove -b xt/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  
  
  Pull-Request
&lt;/h2&gt;

&lt;p&gt;I sent the &lt;a href="https://github.com/team-at-cpan/Net-Async-Redis-XS/pull/1"&gt;Pull-Request&lt;/a&gt;. Let's see if it gets commented on or accepted.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/day-2-add-github-action-ci-to-the-net-async-redis-xs-perl-module-9oo</id>
    <published>2022-12-01T12:39:00Z</published>
    <updated>2022-12-01T12:39:00Z</updated>
    <category term="testing"/>
    <category term="opensource"/>
    <category term="programming"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AI-TensorFlow-Libtensorflow">AI-TensorFlow-Libtensorflow</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Bindings for Libtensorflow deep learning library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStructuredData">Acme-CPANModules-DiffingStructuredData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules to diff structured data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStuffs">Acme-CPANModules-DiffingStuffs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules/applications to diff various stuffs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RenamingFiles">Acme-CPANModules-RenamingFiles</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of Perl modules (and scripts) to rename multiple files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WrappingText">Acme-CPANModules-WrappingText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules and utilities to wrap text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Font-Uni">Alien-Font-Uni</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.0_1</td>
<td>0.3</td>
<td>provide Unifont trutype file or location</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libui">Alien-libui</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Build and Install libui: A portable GUI library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-psl">Alien-psl</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Discover or download and install psl (Public Suffix List Library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GUI-Cellgraph">App-GUI-Cellgraph</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.01_0</td>
<td>0.02</td>
<td>draw pattern by cellular automaton</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox">App-OpenMbox</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.12</td>
<td>0.12</td>
<td>The methods for email management used in OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ParseCommandLineUtils">App-ParseCommandLineUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for parsing command-line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-StringQueryToRegexpUtils">App-StringQueryToRegexpUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for String::Query::To::Regexp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-TextWrapUtils">App-TextWrapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to text wrapping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Business-PagOnline">Business-PagOnline</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library for Unicredit's PagOnline payment system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Popt">CLI-Popt</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Parse CLI parameters via popt(3)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clearbuilt-Excelerator">Clearbuilt-Excelerator</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2.0000</td>
<td>2.0001</td>
<td>Write XLSX files in a Clearbuilt-standard way</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Complete-Random">Complete-Random</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Complete from a list of random string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-PseudoEnum">DBIx-Class-PseudoEnum</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0002</td>
<td>Schema-based enumerations independent of database</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ViewCache">Dancer2-Plugin-ViewCache</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Create a code for a guest user to use to view a page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-TimeZone-Catalog-Extend">DateTime-TimeZone-Catalog-Extend</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Extend DateTime::TimeZone catalog</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Deprecations-Environmental">Devel-Deprecations-Environmental</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>1.000</td>
<td>deprecations for your code's surroundings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Util-Current">Dist-Util-Current</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Guess the current Perl distribution name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Test-Prereqs-Latest">Dist-Zilla-Plugin-Test-Prereqs-Latest</a></td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Tests your module has up to date dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Experian-IDAutho">Experian-IDAutho</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2.53</td>
<td>2.53</td>
<td>Experian's ID Authenticate service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Food-Ratio">Food-Ratio</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.01</td>
<td>calculate ingredient ratios</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Metrics">Future-AsyncAwait-Metrics</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>report metrics from Future::AsyncAwait to Metrics::Any</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-Marad">Game-Marad</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a board game for two players</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-TileMap">Game-TileMap</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Representation of tile-based two-dimensional rectangular maps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-FIT">Geo-FIT</a></td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1.01</td>
<td>1.03</td>
<td>Decode Garmin FIT files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphics-Layout-Kiwisolver">Graphics-Layout-Kiwisolver</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>API for Kiwisolver constraint solver</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Blitz">HTML-Blitz</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>high-performance, selector-based, content-aware HTML template engine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Macro-Simple">Macro-Simple</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.003</td>
<td>preprocessor-like macros in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Markdown-ODF">Markdown-ODF</a></td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Create ODF documents from Markdown</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-BlackScholesMerton">Math-Business-BlackScholesMerton</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1.25</td>
<td>1.25</td>
<td>Algorithm of Math::Business::BlackScholesMerton for binary and non-binary options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-Lookback">Math-Business-Lookback</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>The Black-Scholes formula for Lookback options.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-WebSocketProxy-Backend-ConsumerGroups">Mojo-WebSocketProxy-Backend-ConsumerGroups</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Class for communication with backend by sending messaging through redis streams.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-HTMX">Mojolicious-Plugin-HTMX</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Mojolicious Plugin for htmx</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Blockchain">Net-Async-Blockchain</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>base for blockchain subscription clients.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-FattureInCloud">Net-FattureInCloud</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library with MINIMAL interface to use FattureInCloud (FIC) API version 2.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenTelemetry-TraceContext-W3C">OpenTelemetry-TraceContext-W3C</a></td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>0.01</td>
<td>0.02</td>
<td>W3C Trace Context implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-List-Rule">Path-List-Rule</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Path::Iterator::Rule on an list of paths</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Perl">Perinci-Sub-XCompletionBundle-Perl</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Riap">Perinci-Sub-XCompletionBundle-Riap</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Riap</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls">Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1.002</td>
<td>1.002</td>
<td>Don't call fully qualified function methods without parens</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Dist-APPerl">Perl-Dist-APPerl</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Actually Portable Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Greylist">Plack-Middleware-Greylist</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.3.0</td>
<td>throttle requests with different rates based on net blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/REFECO-Blockchain-Contract-Solidity-ABI">REFECO-Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>0.002</td>
<td>0.004</td>
<td>Contract ABI utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Runtime-Debugger">Runtime-Debugger</a></td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>0.01</td>
<td>0.10</td>
<td>Debug perl wihle its running.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Numpy">SPVM-Numpy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Numpy is the Python/NumPy porting to Perl/SPVM</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQL-Load">SQL-Load</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>This module is a simple SQL file loader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Simple-Filter-Macro">Simple-Filter-Macro</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.08</td>
<td>Perl extension for creating macro modules that are expanding use declarations inline in Perl code.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Socket-More">Socket-More</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Interface and scoped passive addressing routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Query-To-Regexp">String-Query-To-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Convert query to regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Boolean">Sub-Boolean</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>1.000000</td>
<td>make XS true/false subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Subunit">Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Table-View">Tags-HTML-Table-View</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for table view.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-QRCode-Compact">Term-QRCode-Compact</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>create QR codes for display in the terminal</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Subunit">Test-Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-ULID">Types-ULID</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>ULID type constraints</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Value-Diff">Value-Diff</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>find out the difference between two Perl values</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebSerivce-SendBird">WebSerivce-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-CustomerIO">WebService-Async-CustomerIO</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>unofficial support for the Customer.io service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Onfido">WebService-Async-Onfido</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Webservice to connect to Onfido API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Segment">WebService-Async-Segment</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Unofficial support for the Segment service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-SmartyStreets">WebService-Async-SmartyStreets</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Access SmartyStreet API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-GAMSTOP">WebService-GAMSTOP</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.003</td>
<td>0.003</td>
<td>GAMSTOP API Client Implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/results">results</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.002</td>
<td>why throw exceptions when you can return them?</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>67</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-TensorFlow-Libtensorflow ZMUGHAL 0.0.1 0.0.2 Bindings for Libtensorflow deep learning library Acme-CPANModules-DiffingStructuredData PERLANCAR 0.001 0.001 List of modules to diff structured data Acme-CPANModules-DiffingStuffs PERLANCAR 0.001 0.001 List of modules/applications to diff various stuffs Acme-CPANModules-RenamingFiles PERLANCAR 0.001 0.001 List of Perl modules (and scripts) to rename multiple files Acme-CPANModules-WrappingText PERLANCAR 0.001 0.001 … <a href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2002</id>
    <published>2022-12-01T00:44:15Z</published>
    <updated>2022-12-01T00:44:15Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>German Perl/Raku Workshop 2023 Call for Papers</title>
    <link rel="alternate" href="https://blogs.perl.org/users/max_maischein/2022/11/german-perlraku-workshop-2023-call-for-papers.html"/>
    <id>tag:blogs.perl.org,2022:/users/max_maischein//227.10959</id>
    <published>2022-11-30T22:42:25Z</published>
    <updated>2022-11-30T22:43:41Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>The <a href="https://act.yapc.eu/gpw2023/">German Perl/Raku Workshop</a> takes place from February 27 to March 1st 2023 in Frankfurt/Main, Germany.</p>

<p>We are looking for your contribution in the form a talk (20 minutes or 40 minutes), a lighting talk (5 minutes) or a workshop (2-4 hours). Please submit your proposals using this online form.</p>

<p>The theme in 2023 is Perl Futures - of course the two developments of Perl, Raku and Perl as well as the reference to the financial metropolis Frankfurt am Main. Presentations with these emphases are especially sought after, but all contributions on Perl, Raku and software development in general are welcome. </p>

<p><a href="https://act.yapc.eu/gpw2023/cfp.html">Read the complete Call for Papers</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 193:  Binary String and Odd String</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2022/11/perl-weekly-challenge-193-binary-string-and-odd-string.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10957</id>
    <published>2022-11-29T23:21:30Z</published>
    <updated>2022-11-30T15:14:03Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 193 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-193/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 4, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Binary String</h2>

<p><em>You are given an integer, <code>$n &gt; 0</code>.</em></p>

<p><em>Write a script to find all possible binary numbers of size <code>$n</code>.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $n = 2
Output: 00, 11, 01, 10
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $n = 3
Output: 000, 001, 010, 100, 111, 110, 101, 011
</code></pre>

<p>For this task, all we need to do is to print all the integers between 0 and <code>(2 ** $n) -1</code>, and to display the output in binary format.</p>

<h3>Binary String in Raku</h3>

<p>This is so simple that we&#8217;ll do it in a Raku one-liner. We could use the built-in <a href="https://docs.raku.org/routine/base">base</a> method to convert the input integer into a binary string, or the built-in <a href="https://docs.raku.org/routine/fmt">fmt</a> routine. However, since we want to be concise for a one-liner, we&#8217;ll simply use the built-in <a href="https://docs.raku.org/routine/printf">printf</a> function, with a <code>b</code> directive to obtain an unsigned binary integer format.</p>

<pre><code>$ raku -e 'sub MAIN ($n) { printf "%03b ", $_ for 0..2**$n-1; }' 3
000 001 010 011 100 101 110 111
~
$ raku -e 'sub MAIN ($n) { printf "%04b ", $_ for 0..2**$n-1; }' 4
0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
</code></pre>

<p>We can slightly improve this one-liner by using the parameter passed to it in the formatting string, so that we don&#8217;t need to change the formatting string depending on the input parameter:</p>

<pre><code>$ raku -e 'sub MAIN ($c) {printf "%.*b ", $c, $_ for 0..2**$c-1;}' 3
000 001 010 011 100 101 110 111
</code></pre>

<h3>Binary String in Perl</h3>

<p>Here again, we&#8217;ll make a one-liner and use the <code>printf</code> function. Compared to the first Raku implementation, we use the input number in the formatting string, so that we don&#8217;t need to change the formatting string for different input integers.</p>

<pre><code>$ perl -e 'my $c = shift; printf "%0${c}b ", $_ for 0..(2**$c) - 1' 3
000 001 010 011 100 101 110 111
~
$ perl -e 'my $c = shift; printf "%0${c}b ", $_ for 0..(2**$c) - 1' 4
0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111
</code></pre>

<h2>Task 2: Odd String</h2>

<p><em>You are given a list of strings of same length, <code>@s</code>.</em></p>

<p><em>Write a script to find the odd string in the given list. Use positional value of alphabet starting with 0, i.e. a = 0, b = 1, &#8230; z = 25.</em></p>

<p><em>> Find the difference array for each string as shown in the example. Then pick the odd one out.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @s = ("adc", "wzy", "abc")
Output: "abc"

Difference array for "adc" =&gt; [ d - a, c - d ]
                           =&gt; [ 3 - 0, 2 - 3 ]
                           =&gt; [ 3, -1 ]

Difference array for "wzy" =&gt; [ z - w, y - z ]
                           =&gt; [ 25 - 22, 24 - 25 ]
                           =&gt; [ 3, -1 ]

Difference array for "abc" =&gt; [ b - a, c - b ]
                           =&gt; [ 1 - 0, 2 - 1 ]
                           =&gt; [ 1, 1 ]

The difference array for "abc" is the odd one.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @s = ("aaa", "bob", "ccc", "ddd")
Output: "bob"

Difference array for "aaa" =&gt; [ a - a, a - a ]
                           =&gt; [ 0 - 0, 0 - 0 ]
                           =&gt; [ 0, 0 ]

Difference array for "bob" =&gt; [ o - b, b - o ]
                           =&gt; [ 14 - 1, 1 - 14 ]
                           =&gt; [ 13, -13 ]

Difference array for "ccc" =&gt; [ c - c, c - c ]
                           =&gt; [ 2 - 2, 2 - 2 ]
                           =&gt; [ 0, 0 ]

Difference array for "ddd" =&gt; [ d - d, d - d ]
                           =&gt; [ 3 - 3, 3 - 3 ]
                           =&gt; [ 0, 0 ]

The difference array for "bob" is the odd one.
</code></pre>

<p>The difference array is an array containing the distances between the successive letter. The task description suggests that we use &#8220;positional value of alphabet starting with 0, i.e. a = 0, b = 1, &#8230; z = 25.&#8221; This can easily be done, but, since we compute only differences between letters, we could use any other positional arrangement, including ASCII. I&#8217;ll use the task description suggestion for Raku and ASCII values in Perl.</p>

<p>I did not understand at first what the <strong>odd</strong> difference array is supposed to be. Judging from the examples, it appears that several input strings will produce the same difference array (for example, &#8216;abc&#8217; and &#8216;bcd&#8217; will both produce the same <code>(1, 1)</code> array), and one (or possibly some) will produce unique difference arrays. And we&#8217;re supposed to find that (or those) unique array(s).</p>

<p>I&#8217;ll build a hash to store, for each difference array, the corresponding strings. Then I&#8217;ll loop over the hash keys and display those for which there is only one string in the value.</p>

<h3>Odd String in Raku</h3>

<p>The <code>diff-array</code> subroutine computes the difference array for the input string. <code>%transco</code> is a hash containing the mapping between letters and integers. For each string in the input list, we store in the <code>result</code> hash the difference array as a key, and the list of strings as a value. We then display the <code>result</code> pairs for which the value has only one string.</p>

<pre><code>my %transco = ("a".."z" Z 0..25).flat; # a =&gt; 0, b =&gt; 1 ...

sub diff-array ($str) {
    my @diff;
    for 1..^$str.chars -&gt; $i {
        push @diff, 
            %transco{substr($str, $i, 1)} 
            - %transco{substr($str, $i-1, 1)};
    }
    return @diff;
}

for &lt;adc wzy abc&gt;, &lt;aaa bob ccc ddd&gt; -&gt; @test {
    my %result;
    for @test -&gt; $st {
        push %result, (diff-array $st) =&gt; $st;
    }
    # say %result;
    for %result.keys -&gt; $k {
        say @test, " -&gt; ", %result{$k} if %result{$k}.elems == 1;
    }
}
</code></pre>

<p>This program display the following output:</p>

<pre><code>$ raku ./odd-string.raku
(adc wzy abc) -&gt; abc
(aaa bob ccc ddd) -&gt; bob
</code></pre>

<h3>Odd String in Perl</h3>

<p>This is a port to Perl of the Raku program above, except that, as mentioned earlier, we use the ASCII values (the built-in <code>ord</code> function) to compute the difference arrays. We obtain a hash of arrays and pick the hash items for which here is only one string.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;
use Data::Dumper;

sub diff_array  {
    my $str = shift;
    my @diff;
    for my $i (1.. length($str) - 1) {
        push @diff, 
            ord(substr($str, $i, 1)) 
            - ord(substr($str, $i-1, 1));
    }
    return "@diff";
}

for my $test ([&lt;adc wzy abc&gt;], [&lt;aaa bob ccc ddd&gt;]) {
    my %result;
    for my $st (@$test) {
        push @{$result{diff_array $st}}, $st;
    }
    # say Dumper \%result;
    for my $k (keys %result) {
        say "@$test -&gt; ", @{$result{$k}} if scalar @{$result{$k}} == 1;
    }
}
</code></pre>

<p>This program display the following output:</p>

<pre><code>$ perl  ./odd-string.pl
adc wzy abc -&gt; abc
aaa bob ccc ddd -&gt; bob
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on December 11, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>New feature: HTTPS support</title>
    <link rel="alternate" href="https://blogs.perl.org/users/meta/2022/11/https-support.html"/>
    <id>tag:blogs.perl.org,2022:/users/meta//1290.10958</id>
    <published>2022-11-30T04:30:03Z</published>
    <updated>2022-11-30T04:34:33Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/meta/">
        <![CDATA[<p>The site is now served over HTTPS.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#592 - Perl Blogging?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/592.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>We all know not many people blog about <strong>Perl</strong> anymore. Are we doing anything to get it back on track? Well, unfortunately again, nothing is happening on that front either.</p>
<p>But, hey, there is still hope and handful of <strong>Perl</strong> fans doing their best. One of them is our chief editor, <strong>Gabor Szabo</strong>. He has been running <a href="https://perlmaven.com">Perl Maven</a> for years now and many of us benefitted from his work. He recently started blogging on <a href="https://dev.to/szabgab">Dev.To</a>. I request all the <strong>Perl</strong> fans to follow him and like blog post. I didn't have the account there before so I decided to create <a href="https://dev.to/manwar">personal account</a>. Although I no longer blog at all but this is going to change soon. Earlier I used to blog on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a> but then I moved to <a href="https://theweeklychallenge.org/blogs">The Weekly Challenge</a> recently.</p>
<p>Talking about blogging, how can I miss one name, <strong>Flavio Poletti</strong>? He has been blogging daily for years now. Feel free to check out his <a href="https://github.polettix.it/ETOOBUSY">work here</a>. Kudos to him for his effort.</p>
<p>I would like to mention another name, <strong>Olaf Alders</strong>, for his hard work in reviving the good old friend, <a href="https://perladvent.org">Perl Advent Calendar</a>. <strong>Julien</strong> has been helping him in the project too. I remember there was a <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">call for papers</a> by him. If you have time and something to share about your favourite <strong>CPAN</strong> module then please do contribute. I have booked one slot for myself for this year <strong>Advent Calendar</strong>. Hopefully, I will submit my article on time.</p>
<p>Last but not the least, I would like to thank all the members of <strong>Team PWC</strong> for creating friendly and positive vibes for years now. As of today, they have published <strong>3000+ blog posts</strong> sharing creative ideas and solutions. If you are interested then please do checkout <a href="https://theweeklychallenge.org/recaps">blog posts</a>.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/592.html</id>
    <published>2022-11-28T10:00:00Z</published>
    <updated>2022-11-28T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Flipping to Redistribute</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/27#pwc192" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find the binary flip.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub int2bits{
    my($n) = @_;
    my @bits;
    while($n){
        my $b = $n &amp; 1;
        unshift @bits, $b;
        $n = $n &gt;&gt; 1;
    }
    return @bits
}

sub binary_flip{
    my($n) = @_;
    my @bits = int2bits($n);
    @bits = map {$_^ 1} @bits;
    return oct(q/0b/ . join(q//, @bits));
}

MAIN:{
    say binary_flip(5);
    say binary_flip(4);
    say binary_flip(6);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
3
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There was once a time when I was positively terrified of bitwise operations. Anything at 
that level seemed a bit like magic. Especially spooky were the bitwise algorithms detailed 
in &lt;a href="https://en.wikipedia.org/wiki/Hacker%27s_Delight"&gt;Hacker's Delight&lt;/a&gt;! Anyway, has time
has gone on I am a bit more confortable with these sorts of things. Especially when, like
this problem, the issues are fairly straightforward.&lt;/p&gt;

&lt;p&gt;The code here does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;converts a given integer into an array of bits via &lt;code&gt;int2bits()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flips the bits using an xor operation (the &lt;code&gt;map&lt;/code&gt; in &lt;code&gt;binary_flip()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;converts the array of flipped bits to the decimal equivalent via &lt;code&gt;oct()&lt;/code&gt; which, despite 
the name, handles any decimal, binary, octal, and hex strings as input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers greater than or equal to zero, @list. Write a script to 
distribute the number so that each members are same. If you succeed then print the total 
moves otherwise print -1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use POSIX;

sub equal_distribution{
    my(@integers) = @_;
    my $moves;
    my $average = unpack("%32I*", pack("I*",  @integers)) / @integers; 
    return -1 unless floor($average) ==  ceil($average);
    {
        map{
            my $i = $_;
            if($integers[$i] &gt; $average &amp;&amp; $integers[$i] &gt; $integers[$i+1]){$integers[$i]--; $integers[$i+1]++; $moves++}
            if($integers[$i] &lt; $average &amp;&amp; $integers[$i] &lt; $integers[$i+1]){$integers[$i]++; $integers[$i+1]--; $moves++}
        } 0 .. @integers - 2;
        redo unless 0 == grep {$average != $_} @integers;
    }
    return $moves;
}

MAIN:{
    say equal_distribution(1, 0, 5);
    say equal_distribution(0, 2, 0);
    say equal_distribution(0, 3, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
-1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules that must be followed are:&lt;/p&gt;

&lt;p&gt;1) You can only move a value of '1' per move&lt;/p&gt;

&lt;p&gt;2) You are only allowed to move a value of '1' to a direct neighbor/adjacent cell.&lt;/p&gt;

&lt;p&gt;First we compute the average of the numbers in the list. Provided that the average is a
non-decimal (confirmed by comparing &lt;code&gt;floor&lt;/code&gt; to &lt;code&gt;ceil&lt;/code&gt;) we know we can compute the 
necessary "distribution".&lt;/p&gt;

&lt;p&gt;The re-distribution itself is handled just by following the rules and continuously looping
until all values in the list are the same. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/functions/oct"&gt;oct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-192/"&gt;Challenge 192&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc192</id>
    <published>2022-11-27T19:04:00-05:00</published>
    <updated>2022-11-27T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5865870121676179842</id>
    <published>2022-11-27T08:58:00.000+01:00</published>
    <updated>2022-11-27T08:58:20.762+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxx) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.73&lt;/strong&gt; on 2022-11-20&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.72 was 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.059001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.059001&lt;/strong&gt; on 2022-11-26&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.058003 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VEESH/DBIx-Class-Schema-Loader-0.07051' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::Class::Schema::Loader&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a DBIx::Class::Schema based on a database &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.07051&lt;/strong&gt; on 2022-11-23&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 0.07049 was 4 years, 8 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.029&lt;/strong&gt; on 2022-11-25&lt;/li&gt;  &lt;li&gt;Votes: 178&lt;/li&gt;  &lt;li&gt;Previous version: 6.028 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.006000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.006000&lt;/strong&gt; on 2022-11-21&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.004004 was 1 month, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2022-11-21&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 0.59 was 1 month, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.077' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.077&lt;/strong&gt; on 2022-11-21&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 2.076 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.711' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.711&lt;/strong&gt; on 2022-11-22&lt;/li&gt;  &lt;li&gt;Votes: 60&lt;/li&gt;  &lt;li&gt;Previous version: 1.710 was 1 year, 3 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20221120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20221120&lt;/strong&gt; on 2022-11-20&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 5.20221020 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.30&lt;/strong&gt; on 2022-11-23&lt;/li&gt;  &lt;li&gt;Votes: 475&lt;/li&gt;  &lt;li&gt;Previous version: 9.29 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RRA/podlators-5.00' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Man&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Convert POD data to various other formats &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.00&lt;/strong&gt; on 2022-11-25&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 4.14 was 2 years, 10 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5865870121676179842/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/cdxx-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5865870121676179842"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5865870121676179842"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/cdxx-11-great-cpan-modules-released.html" title="(cdxx) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5441187044714009814</id>
    <published>2022-11-27T08:56:00.001+01:00</published>
    <updated>2022-11-27T08:56:14.709+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxiii) metacpan weekly report - Perl::Critic</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 42&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/11/27 07:55:57 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Async::Microservice" target="_blank"&gt;Async::Microservice&lt;/a&gt; - Async HTTP Microservice Moose Role&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Bluetooth" target="_blank"&gt;Net::Bluetooth&lt;/a&gt; - Perl Bluetooth Interface&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::List::Rule" target="_blank"&gt;Path::List::Rule&lt;/a&gt; - Path::Iterator::Rule on an list of paths&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Permute::Named::Iter" target="_blank"&gt;Permute::Named::Iter&lt;/a&gt; - Permute multiple-valued key-value pairs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Runtime::Debugger" target="_blank"&gt;Runtime::Debugger&lt;/a&gt; - Easy to use REPL with existing lexicals support.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Handlers" target="_blank"&gt;Attribute::Handlers&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::XSConstructor" target="_blank"&gt;Class::XSConstructor&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Cmp" target="_blank"&gt;Data::Cmp&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=181)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Device::BCM2835" target="_blank"&gt;Device::BCM2835&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dir::Self" target="_blank"&gt;Dir::Self&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Grinder" target="_blank"&gt;Excel::Grinder&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Faker" target="_blank"&gt;Faker&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ReadBackwards" target="_blank"&gt;File::ReadBackwards&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Rsync" target="_blank"&gt;File::Rsync&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::RsyncP" target="_blank"&gt;File::RsyncP&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Parameters" target="_blank"&gt;Function::Parameters&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Diff" target="_blank"&gt;Hash::Diff&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=113)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kephra" target="_blank"&gt;Kephra&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MediaWiki::API" target="_blank"&gt;MediaWiki::API&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=475)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=324)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Types" target="_blank"&gt;MooseX::Types&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Types::Structured" target="_blank"&gt;MooseX::Types::Structured&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::XSConstructor" target="_blank"&gt;MooX::XSConstructor&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/NewFangle" target="_blank"&gt;NewFangle&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PadWalker" target="_blank"&gt;PadWalker&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+2=124)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=229)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/podlators" target="_blank"&gt;podlators&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sietima" target="_blank"&gt;Sietima&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markup" target="_blank"&gt;Text::Markup&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::API" target="_blank"&gt;Web::API&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::YouTube::Download" target="_blank"&gt;WWW::YouTube::Download&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5441187044714009814/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/dxxxiii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5441187044714009814"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5441187044714009814"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/dxxxiii-metacpan-weekly-report.html" title="(dxxxiii) metacpan weekly report - Perl::Critic"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Raku Advent Calendar submission deadline approaching!</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakuadvent"/>
  <id>tag:news.perlfoundation.org,2022-11-24:/post/rakuadvent</id>
  <published>2022-11-24T13:36:27</published>
  <updated>2022-11-24T13:36:27</updated>
  <summary>
  <![CDATA[
     The Christmas season is almost here, and that means a fresh batch of Raku Advent Calendar posts. Every year since 2009, the Raku community has hosted an annual Advent event, in the spirit of Perl and other projects, consisting of daily articles starting on the 1st of December and ending on the 25th. The Raku community has had so many great posts and, hopefully, this year will live up to 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Christmas season is almost here, and that means a fresh batch of
Raku Advent Calendar posts.  Every year since 2009, the Raku community
has hosted an annual Advent event, in the spirit of Perl and other
projects, consisting of daily articles starting on the 1st of December and ending
on the 25th.  The Raku community has had so many great posts and, hopefully, this year will live up to that same high standard.</p>

<p>But, to do that, Raku needs your help: If you'd like to write a post,
please <strong>sign up on the Raku Advent Calendar <a href="https://github.com/Raku/advent/blob/master/raku-advent-2022/authors.md">GitHub
repo</a></strong>.
  The deadline for post submission is December 1st (next week!).  However,
if you would like to post but cannot meet that deadline, please sign up
anyway and reach out about when you can submit a post – it's likely that we can make the timing work.</p>

<p>Let’s all write some great posts and have a Merry Raku Advent indeed!</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) October 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_october_2022"/>
  <id>tag:news.perlfoundation.org,2022-11-23:/post/maintaining_perl_tonyc_october_2022</id>
  <published>2022-11-23T09:01:16</published>
  <updated>2022-11-23T09:01:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/10/01 Saturday  0.12 github notifications  0.22 #20355 comment  0.13 #20362 ask for more info  0.47 2022/10/03 Monday  1.05 #20207 LogFile::Read, Nagios::Cmd patches  0.23 #20207 Log::Procmail patch  0.05 #20346 Text::PerlPP look at test report and comment  1.33 2022/10/06 Thursday  0.07 github notifications  0.67 #20355 long comment  1.03 #20362 review new info, research and comment  0.80 #20026 research 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/10/01      Saturday
 0.12           github notifications
 0.22           #20355 comment</p>

<h1> 0.13           #20362 ask for more info</h1>

<p> 0.47</p>

<p>2022/10/03      Monday
 1.05           #20207 LogFile::Read, Nagios::Cmd patches
 0.23           #20207 Log::Procmail patch</p>

<h1> 0.05           #20346 Text::PerlPP - look at test report and comment</h1>

<p> 1.33</p>

<p>2022/10/06      Thursday
 0.07           github notifications
 0.67           #20355 long comment
 1.03           #20362 review new info, research and comment
 0.80           #20026 research and comment
 0.18           #20356 review and approve
 0.30           #20290 review testing (was going to merge, but) comment on
                test noise
 0.23           #20367 review and approve</p>

<h1> 0.30           #20309 review and comment</h1>

<p> 3.58</p>

<p>2022/10/10      Monday
 0.23           #20290 review updates and apply to blead, perldelta
 0.23           #20372 testing, comment
 0.70           #20370 review and approve
 0.17           #20380 review and approve
 2.00           #20362 re-work test-dist-modules (based on Bram’s PR)
 2.83           #20362 fix, restart, not using system perl, add missing
                file for threads, threads-shared, debugging, move file
                data to <strong>DATA</strong>, testing</p>

<h1> 0.05           #20362 fixes and push  for more CI</h1>

<p> 6.21</p>

<p>2022/10/11      Tuesday
 1.72           #20362 clean up commits, add more logging, testing
 3.28           #20362 look into failures, fix build issue with threads,
                threads-shared, fix probing bug on darwin, try fix for
                emulation not happening (macos system perl doesn’t -</p>

<h1>                DPERL_DARWIN)</h1>

<p> 5.00</p>

<p>2022/10/12      Wednesday
 0.75           #20372 research and comment (and some #p5p discussion)
 2.98           #20362 look into EU:PXS failure and update EU::CBuilder,
                commit clean up, polish</p>

<h1> 1.78           #20362 more polish, final test, post PR #20385</h1>

<p> 5.51</p>

<p>2022/10/13      Thursday
 0.08           #20304 review and approve
 0.68           github notifications
 0.28           #20362 changes to avoid conflict with #20304
 0.30           #20388 review, research and comment briefly
 0.52           #20390 review and comment
 0.30           #20387 review, research and approve</p>

<h1> 1.75           #20346 testing, debugging</h1>

<p> 3.91</p>

<p>2022/10/17      Monday
 0.35           #20362/#20385 follow-up on PR comments
 0.13           #20403 review and approve
 0.35           #20388 review and comment
 0.40           #20402 review and approve
 0.50           #20404 review, research and approve
 0.33           #20393 review and comment
 0.60           #20351 apply to blead, perldelta
 1.45           look into blead test failure (Test::More related?), cannot
                reproduce</p>

<h1> 0.35           look over RFC discussions</h1>

<p> 4.46</p>

<p>2022/10/18      Tuesday
 0.30           github notifications
 0.40           #20199 apply to blead, perldelta and open related #20408
 0.47           #20397 review and approve
 0.38           #20408 comment</p>

<h1> 1.97           #19964 re-work, testing</h1>

<p> 3.52</p>

<p>2022/10/19      Wednesday
 0.92           #19964 fixes, testing, push for CI
 0.13           github notifications
 0.68           #20409 why hasn’t this been an issue before - testing,
                only in miniperl, comment
 0.20           rfc pr #30 review and comments
 0.43           #20399 research
 0.43           #19964 look into test failures</p>

<h1> 0.95           #20412 review, research and comment</h1>

<p> 3.74</p>

<p>2022/10/20      Thursday
 1.70           #20411 reproduce, debugging
 2.83           #20411 look into why the save stack is getting so large,
                try some fixes, look into supplied solution, work on</p>

<h1>                better solution, testing</h1>

<p> 4.53</p>

<p>2022/10/24      Monday
 0.38           github notifications
 0.85           rfc #17 review and comments
 0.13           #20417 review and approve
 0.65           #20398 review
 0.10           #20398 more review and comment
 0.08           #20429 review and approve
 0.18           #20428 review and comment
 0.03           #20424 review and approve with comment
 0.67           #20415 review and approve
 0.57           #20385 rebase, testing and apply manually to blead
 0.42           #20363 recheck, issues with blead, fix B::Op_private</p>

<h1>                version, investigate other problems</h1>

<p> 4.06</p>

<p>2022/10/25      Tuesday
 0.33           github notifications
 0.22           #20427 review and comment
 0.58           look into dist-modules macos failures, make PR 20436
 0.35           rfc #17 look at changes
 0.57           #20434 review and comment</p>

<h1> 0.50           #20435 review and comments</h1>

<p> 2.55</p>

<p>2022/10/26      Wednesday
 1.37           #20440 review, testing, long comment
 0.65           #20427 follow-up, some #p5p discussion
 0.03           #20435 briefly comment
 0.68           #20365 review
 1.03           #20365 try to track down issue, more testing, comments
 0.80           #20346 look over still failing modules, retest
                Mojolicioous::Plugin::RenderCGI and comment
 0.33           #20427 discussion, review patch and approve</p>

<h1> 0.12           #20440 approve modified PR</h1>

<p> 5.01</p>

<p>2022/10/27      Thursday
 2.53           #20365 alt branch review, testing, comments at
                https://github.com/Perl/perl5/commit/d6b8be71272aafbbaa17b
                b27be4ac484f8726651</p>

<h1> 1.43           #20411 try to make patch crash</h1>

<p> 3.96</p>

<p>2022/10/28      Friday</p>

<h1> 0.85           #20446 review updates, testing, comments</h1>

<p> 0.85</p>

<p>2022/10/31      Monday
 1.88           #19814 review, performance testing, comment
 1.30           #20446 review updates, minor comments
 0.58           #20457 review, comments
 0.32           #20459 comment
 0.37           #20460 review discussion and comment
 0.22           #20378 review, research and comment
 0.25           #20451 review and comment
 0.62           #20411 polish, testing, push for CI</p>

<h1> 0.87           security list - research, comment</h1>

<p> 6.41</p>

<p>Which I calculate is 65.1 hours.</p>

<p>Approximately 51 tickets were reviewed or worked on, and 4 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Read dates from Excel file using Perl</title>
  <summary type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></summary>
  <updated>2022-11-23T05:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/read-dates-from-excel"/>  <id>https://perlmaven.com/read-dates-from-excel</id>
  <content type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#591 - Less than 50% use CI</title>
    <link rel="alternate" href="https://perlweekly.com/archive/591.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>One of the best things about programming is that you can get almost immediate feedback from your work. The compiler tells you immediately if your code has syntax errors. Your tests can tell you within minutes if your code does what you expected on your computer. Your CI system can tell you within another few minutes if your code works on various other environments.</p>
<p>In the Perl community writing test became the norm. You rarely find any Open Source Perl code without tests. People write test even for code that only they use. Even for code they consider 'toys'. Yet with CI we are still far from it. On our <a href="https://perlweekly.com/metacpan.html">stats page</a> you can see that 12% are missing their link to VCS (some of those do have VCS they are just missing the link), but 45-60% (depending on the week) of CPAN releases have no CI configured.</p>
<p>From experience I know that corporations are way behind the curve in terms of test writing. So I can only imagine how few use Continuous Integration. There is a lot of work to be done.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/591.html</id>
    <published>2022-11-21T10:00:00Z</published>
    <updated>2022-11-21T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Twice Largest Once Cute </title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/20#pwc191" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given list of integers, @list. Write a script to find out whether the largest 
item in the list is at least twice as large as each of the other items.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub twice_largest{
    my(@list_integers) = @_;
    my @sorted_integers = sort {$a &lt;=&gt; $b} @list_integers;
    for my $i (@sorted_integers[0 .. @sorted_integers - 1]){
        unless($sorted_integers[@sorted_integers - 1] == $i){
            return -1 unless $sorted_integers[@sorted_integers - 1] &gt;= 2 * $i; 
        }
    }
    return 1;
}

MAIN:{
    say twice_largest(1, 2, 3, 4);
    say twice_largest(1, 2, 0, 5);
    say twice_largest(2, 6, 3, 1);
    say twice_largest(4, 5, 2, 3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
-1
1
1
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;For Part 1 I at first couldn't see how to avoid a basic O(n^2) nested for loop. After I 
took a nap I think the best approach is what I have here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sort the list O(n log n)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;get the max element from the sorted list O(1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iterate over the sorted list, stop and return false if at any point an element times 
two is not less then max. return true if all elements (other than $max itself) pass the 
test. O(n)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So total worst case dominated by the sort O(n log n). &lt;/p&gt;

&lt;p&gt;(And the nap was required because I was on an overnight camping trip with my son's Cub 
Scout pack the previous day and barely slept at all!)&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, 0 &amp;lt; $n &amp;lt;= 15. Write a script to find the number of orderings 
of numbers that form a cute list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Hash::MultiKey;

sub cute_list{
    my($n) = @_;
    my %cute;
    tie %cute, "Hash::MultiKey";
    for my $i (1 .. $n){
        $cute{[$i]} = undef;
    }
    my $i = 1;
    {
        $i++;
        my %cute_temp;
        tie %cute_temp, "Hash::MultiKey";
        for my $j (1 .. $n){
            for my $cute (keys %cute){
                if(0 == grep {$j == $_} @{$cute}){
                    if(0 == $j % $i || 0 == $i % $j){
                        $cute_temp{[@{$cute}, $j]} = undef;
                    }    
                }
            }
        }
        %cute = %cute_temp;
        untie %cute_temp;
        redo unless $i == $n;
    }
    return keys %cute;
}

MAIN:{
    say cute_list(2) . q//;
    say cute_list(3) . q//;
    say cute_list(5) . q//;
    say cute_list(10) . q//;
    say cute_list(11) . q//;
    say cute_list(15) . q//;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
3
10
700
750
24679
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution with a dynamic programming style approach seems to work pretty well. 
cute(11) runs in less than a second (perl 5.34.0, M1 Mac Mini 2020) which is pretty good
compared to some other reported run times that have been posted to social media this week.&lt;/p&gt;

&lt;p&gt;Some may notice that the solution here bears a striking resemblance to the one for 
&lt;a href="http://rabbitfarm.com/cgi-bin/blosxom/2021/06/20"&gt;TWC 117&lt;/a&gt;! The logic there was a bit 
more complicated, since multiple paths could be chosen. The overall idea is the same 
though: as we grow the possible lists we are able to branch and create new lists (paths).&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-191/"&gt;Challenge 191&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc191</id>
    <published>2022-11-20T21:50:00-05:00</published>
    <updated>2022-11-20T21:50:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#590 - Perl &amp; Corinna</title>
    <link rel="alternate" href="https://perlweekly.com/archive/590.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Congratulation to all England cricket team fans for the T20I world cup trophy. You played like a champion in the final. Although you beat us (India) in the semi final, still I am very happy for you.</p>
<p><strong>Did you hear any update about Corinna recently?</strong></p>
<p>We used to get regular update earlier and I really enjoyed the discussion about the Corinna. Last week <strong>Curtis</strong> shared a <a href="https://twitter.com/OvidPerl/status/1590247361384792065">tweet</a> where he mentioned that code example has been added to <a href="https://github.com/Ovid/Cor/blob/master/README.md">README.md</a>. I am sure you are going to love it. Thank you <strong>Curtis</strong> and the entire team of <strong>Corinna</strong> for all the hard work. We are waiting for it patiently.</p>
<p>There was one more <a href="https://twitter.com/OvidPerl/status/1591119906510077963">tweet</a> by <strong>Curtis</strong> that made my day about the proposed feature of <strong>Perl v5.38</strong> where you no longer need to end module with true value. In my career of <strong>23 years</strong>, I have come across many creative ways to return true values in the module. I welcome this change and thanks the entire team.</p>
<p>I am keeping the editorial short this week as I am running short of time. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/590.html</id>
    <published>2022-11-14T10:00:00Z</published>
    <updated>2022-11-14T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Capital Detection Decode</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/13#pwc190" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a string with alphabetic characters only: A..Z and a..z. Write a script to 
find out if the usage of Capital is appropriate if it satisfies at least one of the 
rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use boolean;

sub capital_detection{
    {my($s) = @_; return true if length($s) == $s =~ tr/A-Z//d;}
    {my($s) = @_; return true if length($s) == $s =~ tr/a-z//d;}
    {
        my($s) = @_; 
        $s =~ m/(^.{1})(.*)$/;
        my $first_letter = $1;
        my $rest_letters = $2;
        return true if $first_letter =~ tr/A-Z//d == 1 &amp;&amp;
                       length($rest_letters) == $rest_letters =~ tr/a-z//d;
    }
    return false;
}

MAIN:{
    say capital_detection(q/Perl/);
    say capital_detection(q/TPF/);
    say capital_detection(q/PyThon/);
    say capital_detection(q/raku/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules to be satisfied are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) Only first letter is capital and all others are small.

2) Every letter is small.

3) Every letter is capital.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did a bit of experimenting with &lt;code&gt;tr&lt;/code&gt; this week. Somewhat relatedly I also reminded 
myself of &lt;em&gt;scope&lt;/em&gt; issues in Perl. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tr&lt;/code&gt; function has a nice feature where it returns the number of characters changed, or
as was the case here, deleted. Here we delete all upper or lower case letters and if the
number of letters deleted is equal to original length we know that the original contained
all upper/lower case letters as required by the rules. One catch is that &lt;code&gt;tr&lt;/code&gt; when used 
this way alters the original string. One way around that would be to use temporary 
variables. Another option is to contain each of these rules checks in their own block!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an encoded string consisting of a sequence $s of numeric characters: 0..9. 
Write a script to find the all valid different decodings in sorted order.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use AI::Prolog;
use Hash::MultiKey;

my $prolog_code;
sub init_prolog{
    $prolog_code = do{
        local $/;
        &amp;lt;DATA&amp;gt;;
    };
}

sub decoded_list{
    my($s) = @_;
    my $prolog = $prolog_code;
    my @alphabet = qw/A B C D E F G H I J K L M N O P Q R S T U V W X Y Z/;
    my @encoded;
    my @decoded;
    my $length = length($s);
    $prolog =~ s/_LENGTH_/$length/g;
    $prolog = AI::Prolog-&gt;new($prolog); 
    $prolog-&gt;query("sum(Digits).");
    my %h;
    tie %h, "Hash::MultiKey";
    while(my $result = $prolog-&gt;results){
        $h{$result-&gt;[1]} = undef;
    }
    for my $pattern (keys %h){
        my $index = 0;
        my $encoded = [];
        for my $i (@{$pattern}){
            push @{$encoded}, substr($s, $index, $i);
            $index += $i;
        }
        push @encoded, $encoded if 0 == grep { $_ &gt; 26 } @{$encoded};
    }
    @decoded = sort { $a cmp $b } map { join("", map { $alphabet[$_ - 1] } @{$_}) } @encoded;
}

MAIN:{
    init_prolog;
    say join(", ", decoded_list(11));
    say join(", ", decoded_list(1115));
    say join(", ", decoded_list(127));
}

__DATA__
member(X,[X|_]).
member(X,[_|T]) :- member(X,T).

digits([1, 2]).

sum(Digits):-
    sum([], Digits, 0).

sum(Digits, Digits, _LENGTH_). 

sum(Partial, Digits, Sum):-   
    Sum &lt; _LENGTH_, 
    digits(L),
    member(X,L),
    S is Sum + X,
    sum([X | Partial], Digits, S). 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
AA, K
AAAE, AAO, AKE, KAE, KO
ABG, LG
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is an element of this task which reminded me of a much older problem presented back
in &lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-075/"&gt;TWC 075&lt;/a&gt;. In brief,
the question was how many ways could coins be used in combination to form a target sum. My 
&lt;a href="https://adamcrussell.livejournal.com/17614.html"&gt;solution&lt;/a&gt; used a mix of Prolog and Perl
since Prolog is especially well suited for elegant solutions to these sorts of 
combinatorial problems.&lt;/p&gt;

&lt;p&gt;I recognized that this week we have a similar problem in how we may separate the given
encoded string into different possible chunks for decoding. Here we know that no chunk
may have value greater than 26 and so we can only choose one or two digits at a time. How 
many ways we can make these one or two digit chunks is the exact same problem, somewhat in 
hiding, as in TWC 075!&lt;/p&gt;

&lt;p&gt;I re-use almost the exact same Prolog code as used previously. This is used to identify 
the different combinations of digits for all possible chunks. Once that is done we need 
only map the chunks to letters and &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perl.plover.com/FAQs/Namespaces.html"&gt;Scoping in Perl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-190/"&gt;Challenge 190&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc190</id>
    <published>2022-11-13T21:12:00-05:00</published>
    <updated>2022-11-13T21:12:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#589 - GitHub Actions for Perl modules</title>
    <link rel="alternate" href="https://perlweekly.com/archive/589.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Winter has arrived to us as well. After many months, yesterday was the first day I had to put on long trousers and socks. Tomorrow we might even get some rain. Anyway...</p>
<p>It is still a bit surprising to me that only about 50% of the distributions recently uploaded to CPAN have any CI configured. Look at the <a href="https://perlweekly.com/metacpan.html">stats</a> and look at the <a href="https://cpan-digger.perlmaven.com/">detailed report</a>. Clearly we, in the Perl community, have been spoiled by the excellent work of the <a href="http://cpantesters.org/">CPAN Testers</a> and thus people feel less need to enable GitHub Actions. On the other hand by enabling GitHub Actions they could reduce the load from the (very few) CPAN testers. They could get feedback much faster. In some ways they could do even do more diverse testing.</p>
<p>I just saw the <a href="https://github.com/FGasper/perl-github-action-tips">Tips for testing Perl modules via GitHub</a> of Felipe Gaspar. There are some excellent suggestions on how to test your module on some special versions of perl and on other platforms such as Cygwin, FreeBSD, OpenBSD. Just to name a few. I'd like to also reiterate my offer. If you'd like to get help adding GitHub Actions to your project, open an issue on your GitHub project and tag me (@szabgab) so I'll be notified. I'll be happy to help and maybe even create a <a href="https://perlmaven.com/os">blog post and record a video</a> about your module. I keep a <a href="https://perlmaven.com/ci-for-cpan-modules">journal</a> of the recent PRs I sent with some comments and links.</p>
<p>The Perl community embraced automated tests. Every Perl module comes with lots of tests. Let's now embrace Continuous Integration that runs on every push and executes these test to get very quick feedback!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/589.html</id>
    <published>2022-11-07T10:00:00Z</published>
    <updated>2022-11-07T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>To a Greater Degree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/06#pwc189" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of characters (a..z) and a target character. Write a script to 
find out the smallest character in the given array lexicographically greater than the 
target character.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub greatest_character{
    my($characters, $target) = @_;
    return [sort {$a cmp $b} grep {$_ gt $target} @{$characters}]-&gt;[0] || $target;
}

MAIN:{
    say greatest_character([qw/e m u g/], q/b/);
    say greatest_character([qw/d c e f/], q/a/);
    say greatest_character([qw/j a r/],   q/o/);
    say greatest_character([qw/d c a f/], q/a/);
    say greatest_character([qw/t g a l/], q/v/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
e
c
r
c
v
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Practically a one liner! Here we use &lt;code&gt;grep&lt;/code&gt; to filter out all the characters greater than 
the target. The results are then sorted and we return the first one. If all that yields no
result, say there are no characters greater than the target, the just return the target.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of 2 or more non-negative integers. Write a script to find out the 
smallest slice, i.e. contiguous subarray of the original array, having the degree of the 
given array.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub array_degree{
    my(@integers) = @_;
    my @counts;
    map { $counts[$_]++ } @integers;
    @counts = grep {defined} @counts;
    return [sort {$b &lt;=&gt; $a} @counts]-&gt;[0];
}

sub least_slice_degree{
    my(@integers) = @_;
    my @minimum_length_slice;
    my $minimum_length = @integers;
    my $array_degree = array_degree(@integers);
    for my $i (0 .. @integers - 1){
        for my $j ($i + 1 .. @integers - 1){
            if(array_degree(@integers[$i .. $j]) == $array_degree &amp;&amp; @integers[$i .. $j] &lt; $minimum_length){
                @minimum_length_slice = @integers[$i .. $j];
                $minimum_length = @minimum_length_slice;
            }
        }
    }
    return @minimum_length_slice;
}

MAIN:{
    say "(" . join(", ", least_slice_degree(1, 3, 3, 2)) . ")";
    say "(" . join(", ", least_slice_degree(1, 2, 1)) . ")";
    say "(" . join(", ", least_slice_degree(1, 3, 2, 1, 2)) . ")";
    say "(" . join(", ", least_slice_degree(1, 1 ,2 ,3, 2)) . ")";
    say "(" . join(", ", least_slice_degree(2, 1, 2, 1, 1)) . ")";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
(3, 3)
(1, 2, 1)
(2, 1, 2)
(1, 1)
(1, 2, 1, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I view this problem in two main pieces:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Compute the degree of any given array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate all contiguous slices of the given array and looking for a match on the 
criteria.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, with that in mind we perform (1) in &lt;code&gt;sub array_degree&lt;/code&gt; and then think of how we might 
best compute all those contiguous slices. Here we use a nested &lt;code&gt;for&lt;/code&gt; loop. Since we also
need to check to see if any of the computed slices have an array degree equal to the 
starting array we just do that inside the nested loop as well. This way we don't need to 
use any extra storage. Instead we just track the minimum length slice with matching array
degree. Once the loops exit we return that minimum length slice.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-189/"&gt;Challenge 189&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc189</id>
    <published>2022-11-06T18:58:00-05:00</published>
    <updated>2022-11-06T18:58:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Separate release branch for App::Puppet::Environment::Updater</title>
  <summary type="html"><![CDATA[<p>
The <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> provides a list of recently uploaded Perl modules and indicates,
among several other things, if they have some kind of a Continuous Integration configured. That's how I arrived to
<a href="https://metacpan.org/pod/App::Puppet::Environment::Updater">App::Puppet::Environment::Updater</a> and it took me quite some time
till I noticed that it has GitHub Action configured, but not in the default branch.
<p>
]]></summary>
  <updated>2022-11-06T11:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/separate-release-branch-for-app-puppet-environment-updater"/>  <id>https://perlmaven.com/separate-release-branch-for-app-puppet-environment-updater</id>
  <content type="html"><![CDATA[<p>
The <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> provides a list of recently uploaded Perl modules and indicates,
among several other things, if they have some kind of a Continuous Integration configured. That's how I arrived to
<a href="https://metacpan.org/pod/App::Puppet::Environment::Updater">App::Puppet::Environment::Updater</a> and it took me quite some time
till I noticed that it has GitHub Action configured, but not in the default branch.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>TPRF to support FOSDEM Participation</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem"/>
  <id>tag:news.perlfoundation.org,2022-11-04:/post/fosdem</id>
  <published>2022-11-04T18:59:25</published>
  <updated>2022-11-04T18:59:25</updated>
  <summary>
  <![CDATA[
     One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. To apply for a mini grant please send a completed 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. To apply for a mini grant please send a completed <a href="https://docs.google.com/document/d/1y2Aj7bByeuLJ2V3y0SPFKO0W_xlUVerfYl0ROhlOnjI/copy">application</a> to  fosdem2023-grants@perlfoundation.org. </p>

<p>Please note that grants will be awarded only to those applicants whose talks are selected for FOSDEM. TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences. </p>

    ]]>
  </content>
</entry>
</feed>
