<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-01-15T10:30:03Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl weekly challenge 95</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-95.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10051</id>

    <published>2021-01-15T14:27:56Z</published>
    <updated>2021-01-15T14:44:15Z</updated>

    <summary>Palindromic numbers You are given a number $N. Write a script to figure out if the given number is Palindrome. Print 1 if true otherwise 0. There is an easy solution to this - to use "reverse" in string context...</summary>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<h3>Palindromic numbers</h3>

<p>You are given a number <code>$N</code>. Write a script to figure out if the given number is Palindrome. Print 1 if true otherwise 0.</p>

<p>There is an easy solution to this - to use "reverse" in string context to reverse the number and comparing the two strings:</p>

<pre><code>
sub is_palindrome_rev {
  return ( $_[0] eq reverse $_[0]) ? 1 : 0;
}
</code></pre>

<p>But this just seems a touch too easy - so let's see if we can find an alternative solution. Something that will potentially work in any base - not just base 10!</p>

<pre><code>
sub is_palindrome_array {
  my($n,$radix) = @_;
  $radix||=10;
  return 0 if $n < 0;
  my @digits  = $n%$radix;
  push @digits, $n%$radix while $n = int ($n/$radix);
  while( @digits>1 ) {
    return 0 if shift @digits != pop @digits;
  }
  return 1;
}
</code></pre>
<ul>
  <li>Bail out if the number is negative;</li>
  <li>Chop the number of digits (in our "base").
  <ul><li>Push the number (module the radix) onto an array of digits, repeatedly dividing by the radix until we have nothing left.</li><li>Technically this returns the digits in the reverse order (push is more efficient than unshift), but as we are interested in palindromes that isn't an issue.</li></ul>
  </li>
 <li>Then we work through the array and seeing if the first and last digits are the same {if the array has only 1 entry then the first and the last digits are the same!}. Use pop/shift to return the numbers and take them from the array...</li>
</ul>

<h3>Stack</h3>

<p>This is a simple case of creating a Stack object - basic OO coding. As this is a stack though we don't need to use a hashref as we would normally use - we can just bless an arrayref</p>

<p>Just a few notes on this one - mainly about good practice</p>

<ul>
<li>We wish to use the standard names push/pop for the stack - but these are built-ins for clarity in the code we use CORE::push & CORE::pop to make certain we are using the built-in push and pop commands</li>
<li>Care needs to be taken as we may have an empty stack when making calls so should check for this in cases such as pop/min/top...</li>
</ul>

<p>You can see my code on github at:</p>
<ul><li>https://github.com/drbaggy/perlweeklychallenge-club/tree/master/challenge-095/james-smith/</li></ul>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 95: Palindrome Numbers and Demo Stack</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-95-palindrome-numbers-and-demo-stack.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10049</id>

    <published>2021-01-15T04:35:19Z</published>
    <updated>2021-01-15T04:36:49Z</updated>

    <summary>These are some answers to the Week 95 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a few of days (January 17, 2021). This blog post offers some solutions...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 95 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-095/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days (January 17, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Palindrome Numbers</h2>

<p><em>You are given a number <code>$N</code>.</em></p>

<p><em>Write a script to figure out if the given number is Palindrome. Print 1 if true otherwise 0.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: 1221
Output: 1
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: -101
Output: 0, since -101 and 101- are not the same.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: 90
Output: 0
</code></pre>

<p>A palindrome is a word, number, phrase, or other sequence of characters which reads the same backward as forward, like &#8220;noon&#8221;, &#8220;madam&#8221;, or &#8220;redivider&#8221;.</p>

<h2>Palindrome Numbers in Raku</h2>

<p>This is fairly simple. We just compare the input with its reversed version:</p>

<pre><code>use v6;

my $num = @*ARGS[0] // 1221;
say "$num: ", +($num eq $num.flip);
</code></pre>

<p>Note that the <code>+</code> sign in the second code line is aimed at <em>numifying</em> the value of the Boolean expression <code>$num eq $num.flip</code> (<code>False</code> or <code>True</code>) into 0 or 1.</p>

<p>This is the output with a few input values:</p>

<pre><code>$ raku palindrome.raku
1221: 1

$ raku palindrome.raku 7337
7337: 1

$ raku palindrome.raku 8765
8765: 0

$ raku palindrome.raku -1221
-1221: 0
</code></pre>

<p>This is so simple that we can also do it as a one-liner script:</p>

<pre><code>$ raku -e 'my $n = @*ARGS[0]; say "$n: ", +($n eq $n.flip);' 7337
7337: 1
</code></pre>

<h2>Palindrome Numbers in Perl</h2>

<p>Again, we just compare the input with its reversed version:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $num = shift // 1221;
say "$num: ", $num eq (reverse $num) ? 1 : 0;
</code></pre>

<p>This is the output with a few input values:</p>

<pre><code>$ perl palindrome.pl
1221: 1

$ perl palindrome.pl 7337
7337: 1

$ perl palindrome.pl 5678
5678: 0

$ perl palindrome.pl -101
-101: 0
</code></pre>

<p>We can also do a Perl one-liner:</p>

<pre><code>$ perl -E '$n = shift; say "$n: ", $n eq (reverse $n) ? 1 : 0;' 1221
1221: 1
</code></pre>

<h2>Palindrome Numbers in Scala</h2>

<p>The Scala version uses essentially the same idea:</p>

<pre><code>object Main {
  def main(args: Array[String]): Unit = {
    val num = args(0).toString
    if (num == num.reverse) {
      println(1)
    } else {
      println(0)
    }
  }
}
</code></pre>

<p>This Scala program produces the same results as the above Raku and Perl programs.</p>

<h2>Task 2: Demo Stack</h2>

<p><em>Write a script to demonstrate Stack operations like below:</em></p>

<pre><code>push($n) - add $n to the stack
pop() - remove the top element
top() - get the top element
min() - return the minimum element
</code></pre>

<p><em>Example:</em></p>

<pre><code>my $stack = Stack-&gt;new;
$stack-&gt;push(2);
$stack-&gt;push(-1);
$stack-&gt;push(0);
$stack-&gt;pop;       # removes 0
print $stack-&gt;top; # prints -1
$stack-&gt;push(0);
print $stack-&gt;min; # prints -1
</code></pre>

<p>There are already <code>push</code> and <code>pop</code> built-in functions in both Raku and Perl, so we will give our stack operations different names. The stack will be implemented as a simple array with the relevant stack operations.</p>

<h3>Demo Stack in Raku</h3>

<h4>Functional Implementation</h4>

<p>Implementing a stack is typical of a job for object-oriented programming. However, I will start with a more functional approach (as I prefer that). The <code>push</code> and <code>pop</code> stack operations are renamed <code>put-in-stack</code> and <code>take-from-stack</code>:</p>

<pre><code>use v6;

sub put-in-stack (@stack, *@new-items) {
    push @stack, |@new-items;
}
sub take-from-stack (@stack where @stack.elems &gt; 0) {
    return pop @stack;
}
sub top (@stack where @stack.elems &gt; 0) {
    return @stack.tail;
}
sub minimum (@stack where @stack.elems &gt; 0) {
    return @stack.min;
}
my @a-stack = 1..5;
say @a-stack;
put-in-stack @a-stack, 6..8;
say @a-stack;
say "Min: ", minimum @a-stack; 
say "Top: ", top @a-stack;
say "Take: ", take-from-stack @a-stack;
say @a-stack;
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ raku stack_oo.raku
[1 2 3 4 5]
[1 2 3 4 5 6 7 8]
Min: 1
Top: 8
Take: 8
[1 2 3 4 5 6 7]
</code></pre>

<h4>Object-Oriented Implementation</h4>

<p>If you prefer an object-oriented version, it could look like this:</p>

<pre><code>use v6;

class Stack {
    has @.stack is rw;
    method is-empty {
        @!stack.elems &gt; 0 ?? False !! True;
    }
    method put-in-stack (*@new-items) {
        push @!stack, |@new-items;
    }
    method take-from-stack {
        return pop @!stack;
    }
    method top {
        return @!stack.tail;
    }
    method minimum {
        return @!stack.min;
    }
}
my $a-stack = Stack.new( stack =&gt; 1..5);
say $a-stack.stack;
$a-stack.put-in-stack: 6..8;
say $a-stack.stack;
say "Min: ", $a-stack.minimum; 
say "Top: ", $a-stack.top;
say "Take: ", $a-stack.take-from-stack ;
say $a-stack.stack;
</code></pre>

<p>The code using the <code>Stack</code> class should really check that the stack is not empty (with the <code>is-empty</code> method) before calling the <code>take-from-stack</code>, <code>top</code>, or <code>minimum</code> methods to avoid an unhandled exception, and we may in that case raise an ad-hoc exception or print an error message or do something else, but since we have no specification on what to do in such a case, this is left as an exercise to the reader.</p>

<p>Output:</p>

<pre><code>$ raku  stack_oo.raku
[1 2 3 4 5]
[1 2 3 4 5 6 7 8]
Min: 1
Top: 8
Take: 8
[1 2 3 4 5 6 7]
</code></pre>

<h3>Demo Stack in Perl</h3>

<p>In Perl, we will implement only the functional version:</p>

<pre><code>#!/usr/bin/perl
use strict;
use warnings;
use feature qw/say/;

sub is_empty {
    my $stack = shift;
    return @$stack &gt; 0 ? 0 : 1;
}

sub put_in_stack {
    my ($stack, @new_items) = @_;
    push @$stack, @new_items;
}
sub take_from_stack  {
    my $stack = shift;
    return undef if is_empty $stack;
    return pop @$stack;
}
sub top {
    my $stack = shift;
    return undef if is_empty $stack;
    return $stack-&gt;[-1];
}
sub minimum {  # assuming stack of numeric values
    my $stack = shift;
    return undef if is_empty $stack;
    my $min = $stack-&gt;[0];
    for my $item (@$stack) {
        $min = $item if $item &lt; $min;
    }
    return $min;
}
my $a_stack = [1..5];
say "@$a_stack";
put_in_stack $a_stack, 6..8;
say "@$a_stack";
say "Min: ", minimum $a_stack; 
say "Top: ", top $a_stack;
say "Take: ", take_from_stack $a_stack;
say "@$a_stack";
</code></pre>

<p>This displays the following output:</p>

<pre><code>$ perl stack.pl
1 2 3 4 5
1 2 3 4 5 6 7 8
Min: 1
Top: 8
Take: 8
1 2 3 4 5 6 7
</code></pre>

<h3>Demo Stack in Scala</h3>

<p>Being a beginner in Scala, I don&#8217;t yet master passing function parameters by value or by reference. So I&#8217;ll make my stack a global variable to enable in-place modification. You don&#8217;t need to tell me it&#8217;s bad, I know. At this point, I&#8217;m only trying to make a program that works properly, I&#8217;ll hopefully implement better practices and write more idiomatic Scala code in a few months from now.</p>

<pre><code>object stack extends App {
  var stack = Array(1, 2, 3, 4, 5)
  print_stack("Original stack") 
  push(Array(6, 7, 8))
  print_stack("Pushed stack")
  val popped = pop
  println(s"Popped: $popped")
  print_stack("Popped stack")
  val topped = top
  println(s"Top: $topped")
  val minimum = min
  println(s"Min: $minimum")
  def print_stack(caption: String) : Unit = {
    print(s"$caption: "); println( stack.mkString(" "))
  }
  def push(newItems: Array[Int]): Unit = {
    stack ++= newItems
  }
  def pop: Int = {
    val lastItem = stack.last
    stack = stack.dropRight(1)
    return lastItem
  }
  def top: Int = {
    return stack.last
  }
  def min: Int = {
    var min = stack(0);
    for (i &lt;- 1 to (stack.length - 1)) {
      if (stack(i) &lt; min) min = stack(i)
    }
    return min
  }
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>Original stack: 1 2 3 4 5
Pushed stack: 1 2 3 4 5 6 7 8
Popped: 8
Popped stack: 1 2 3 4 5 6 7
Top: 7
Min: 1
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, January 17, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Raku Course January 2021 Grant Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakucourse1"/>
  <id>tag:news.perlfoundation.org,2021-01-13:/post/rakucourse1</id>
  <published>2021-01-13T18:47:14</published>
  <updated>2021-01-13T18:47:14</updated>
  <summary>
  <![CDATA[
     This is a monthly report by Andrew Shitov on his grant for the Raku course. Andrew is happy to report that the first part of the Raku course is completed and published. The course is available at course.raku.org. The grant was approved a year and a half ago right before the PerlCon conference in Rīga. Andrew was the organiser of the event and had to postpone the course due to 
   ]]>
  </summary>
  <author>
    <name>Nicolas R.</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 6 Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/e898ebea91575ac57d21a0e17a96d77c343740ae/camelia-logo.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>This is a monthly report by Andrew Shitov on his grant for the Raku course.</p>

<p>Andrew is happy to report that the first part of the Raku course is completed and published. 
The course is available at <a href="https://course.raku.org">course.raku.org</a>.</p>

<p>The grant was approved a year and a half ago right before the PerlCon conference in Rīga. 
Andrew was the organiser of the event and had to postpone the course due to high load.
Also note that during the conference, it was proposed to rename Perl 6 which also lead to some confusion and wait before working on the grant.</p>

<p>After months, the name was settled, the distinction between Perl and Raku became clearer, and, more importantly, external resourses and services, e.g., <a href="http://rosettacode.org/wiki/Category:Raku">Rosettacode</a> and <a href="https://glot.io/new/raku">glot.io</a> started using the new name. </p>

<p>It's now a perfect timing to start working on the course Andrew dreamed about a couple of years ago.
Andrew started the main work in the middle of November 2020, and by the beginning of January 2021, he had the first part ready.</p>

<p>The current plan includes five parts:</p>

<ol>
<li>Raku essentials</li>
<li>Advanced Raku subjects</li>
<li>Object-oriented programming in Raku</li>
<li>Regexes and grammars</li>
<li>Functional, concurrent, and reactive programming</li>
</ol>

<p>It differs a bit from the original plan published in the grant proposal. While the material stays the same, Andrew decided to split it differently. Initially, he was going to go through all the topics one after another. Now, the first sections reveal the basics of some topics, and we will return to the same topics on the next level in the second part.</p>

<p>For example, in the first part, Andrew only talk about the basic data types: <code>Int</code>, <code>Rat</code>, <code>Num</code>, <code>Str</code>, <code>Range</code>, <code>Array</code>, <code>List</code>, and <code>Hash</code> and basic usage of them. The rest, including other types (e.g., <code>Date</code> or <code>DateTime</code>) and the methods such as <code>@array.rotate</code> or <code>%hash.kv</code> is delayed until the second part.</p>

<p>Contrary, functions were a subject of the second part initially, but they are now discussed in the first part. So, we now have Part 1 “<a href="https://course.raku.org/essentials/">Raku essentials</a>” and Part 2 “Advanced Raku topics”. This shuffling allowed Andrew to create a liner flow in such a way that the reader can start writing real programs already after they finish the first part of the course.</p>

<p>It is quite a tricky task to organise the material without backward links. In the ideal course, any topic may only be based on the previously explained information. A couple of the most challenging cases were ranges and typed variables. They both causes a few chicken-and-egg loops.</p>

<p>During the work on the first part, Andrew also prepared a ‘framework’ that <a href="https://github.com/ash/raku-course/blob/master/_includes/menu.html">generates</a> <a href="https://github.com/ash/raku-course/blob/master/_includes/nav.html">the navigation</a> <a href="https://github.com/ash/raku-course/blob/master/_includes/toc.html">through</a> the site and helps with <a href="https://github.com/ash/raku-course/blob/master/_includes/quiz.html">quiz automation</a>. </p>

<p>It is hosted as GitHub Pages and uses <a href="https://jekyllrb.com">Jekyll</a> and <a href="https://shopify.github.io/liquid/">Liquid</a> for generating static pages, and a couple of Raku programs to automate the process of <a href="https://github.com/ash/raku-course/blob/master/new-exercise-template.raku">adding new exercises</a> and <a href="https://github.com/ash/raku-course/blob/master/highlight.raku">highlighting code snippets</a>. 
Syntax highlighting is done with <a href="https://pygments.org">Pygments</a>.</p>

<p>Returning the to course itself, it includes pages of a few different types:</p>

<ul>
<li>The theory that covers the current topic</li>
<li>Interactive quizzes that accomplish the theory of the topic and/or the section</li>
<li>Exercises for the material of the whole section</li>
<li>Answers to the exercises</li>
</ul>

<p>The quizzes were not part of the grant proposal, but Andrew think they help making a better user experience. All the quizzes have answers and comments. All the exercises are solved and published with the comments to explain the solution, or even to highlight some theoretical aspects.</p>

<p>The first part covers 91 topics and includes 73 quizzes and 65 exercises (with 70 solutions :-). There are about 330 pages in total. The sources are kept in a GitHub repository <a href="https://github.com/ash/raku-course">github.com/ash/raku-course</a>, so people can send pull requiest, etc.</p>

<p>At this point, the first part is fully ready. Andrew could adjust and update that first part if the following parts require additional information about the topics covered in Part 1.</p>

<p>On behalf of the Perl Foundation, I want to thanks Andew to provide  to the community such a great online resource to learn raku online.
If you missed it, have a look at the online course at <a href="https://course.raku.org">course.raku.org</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>A Static Archive of rt.cpan.org</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/lee_j/2021/01/a-static-archive-of-rtcpanorg.html"/>
    <id>tag:blogs.perl.org,2021:/users/lee_j//645.10045</id>

    <published>2021-01-13T12:59:27Z</published>
    <updated>2021-01-13T13:06:11Z</updated>

    <summary>I have created a static archive of rt.cpan.org - it is avaliable at https://rt-cpan.github.io/. This is now what will be the official static archive once rt.cpan.org is sunset. The static archive is a git repo, hosted using github pages. The...</summary>
    <author>
        <name>Lee J</name>
        <uri>http://leejo.github.io</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lee_j/">
        <![CDATA[<p>I have created a static archive of rt.cpan.org - it is avaliable at <a href="https://rt-cpan.github.io/">https://rt-cpan.github.io/</a>. This is now what will be the official static archive once <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">rt.cpan.org is sunset</a>.</p>

<p>The static archive is a git repo, hosted using github pages. The repo can be found at <a href="https://github.com/rt-cpan/rt-cpan.github.io">https://github.com/rt-cpan/rt-cpan.github.io</a> and it has a README that explains how the archive is/was built and URL structure.</p>

<p>The archive is generally complete, it will be updated one more time before the end of February this year. If you discover any issues then please raise an issue using the github link above. If you need to search the archive then you can do that using the gihub link above also, or git clone it and use the command line.</p>

<p>Happy New Year!</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Refactoring code snippet</title>
  <summary type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></summary>
  <updated>2021-01-13T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/refactoring-code-snippet"/>  <id>https://perlmaven.com/refactoring-code-snippet</id>
  <content type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>FOSDEM 2021 - guidance for speakers</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem_2021_speaker_guidance"/>
  <id>tag:news.perlfoundation.org,2021-01-13:/post/fosdem_2021_speaker_guidance</id>
  <published>2021-01-13T03:28:32</published>
  <updated>2021-01-13T03:28:32</updated>
  <summary>
  <![CDATA[
     Speaking at FOSDEM? Here’s what you need to know Thank you to all speakers who have put themselves forward to speak at this year’s FOSDEM. As it’s a virtual event, all talks need to be pre-recorded by the speakers. This is the first time FOSDEM has operated in this way so please be aware that there may be some bumps along the way everyone is working this out as they 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h1>Speaking at FOSDEM? Here’s what you need to know</h1>

<p>Thank you to all speakers who have put themselves forward to speak at this year’s FOSDEM. </p>

<p>As it’s a virtual event, all talks need to be pre-recorded by the speakers. This is the first time FOSDEM has operated in this way so please be aware that there may be some bumps along the way - everyone is working this out as they go!</p>

<p>On the day your presentation is aired, you will be required to join an online Matrix chatroom with delegates as they ask questions during your talk - further details below. Afterwards, you will also be able to answer questions in a live video conference room. </p>

<p>To make sure you, and anyone listening or asking questions, get the best out of this event, here are some guidance notes to support your planning.</p>

<h2>Deadlines</h2>

<p>All pre-recorded talks are expected to be uploaded by 17th January 2021 to Pentabarf - the upload link should be available by the time you read this, if you don't have it, contact your devroom organiser. After this date, there is one week scheduled for you to review and if necessary, to re-upload to fix problems. </p>

<p><strong>Please do not plan to run right up against these deadlines</strong> - you and FOSDEM need the contingency for things that genuinely go wrong. </p>

<p><strong>After the 31st January it is absolutely too late to make any further changes.</strong></p>

<h2>Recording your talk</h2>

<p>You can use any tool that you prefer to record your presentation. Open Broadcast Studio (OBS) is a powerful tool and recommended by many speakers. Some useful documents here:</p>

<ul>
<li><a href="https://dev.to/erikaheidi/how-to-use-obs-studio-to-record-or-stream-live-presentations-474j">How to Use OBS Studio to Record or Stream Live Presentations</a></li>
<li><a href="https://peertube.xwiki.com/videos/watch/c5cf50e3-2277-440a-b339-34874acd00b3">FOSDEM 2021 : How to configure OBS to record your talk</a></li>
</ul>

<p>Another option is to deliver your presentation through a video conferencing platform to a colleague who can then record the session. Either use the built-in recording of the conferencing platform or ask your colleague to remotely record the presentation. </p>

<p>For example, you could use Jitsi to present your talk to a colleague, with picture-in-picture mode so that the speaker is in the corner of the slides, and, on Linux, use Simple Screen Recorder (SSR) to capture the talk in the appropriate format.</p>

<p>Please bear in mind these tips for a good quality presentation:</p>

<ul>
<li>Test your recording process first to make sure both video and sound are captured in the recording</li>
<li>Make sure the video fits comfortably into your time slot - FOSDEM is on a strict time schedule and you will be cut short if you over-run</li>
<li>Don’t overload your slides. Make sure everything is readable when scaled down slightly
<ul>
<li>The 1280x720 video you send in may be scaled down to fit onto a FOSDEM template</li>
</ul></li>
<li>Make sure you use a good microphone for your presentation, ideally a headset</li>
<li>Have a suitable background during recording and live Q&amp;A</li>
<li>Dress for the occasion</li>
</ul>

<h2>Uploading videos</h2>

<p>Videos should be uploaded to https://penta.fosdem.org (through your account). Technical requirements for your presentation video are: </p>

<ul>
<li>resolution: 1280x720</li>
<li>frame rate: 25 fps</li>
<li>video codec: h264 video codec, main profile</li>
<li>video bitrate: &lt;= 2Mbit/s</li>
<li>audio codec: aac audio codec</li>
<li>audio sample rate: 48 KHz mono</li>
<li>audio bitrate: 128 Kbit/s</li>
<li>media container: whatever is easiest for you</li>
</ul>

<p>When you upload your video, the system will verify that it meets these requirements. If it does not, the video will be transcoded first (but this will take longer).</p>

<p>A 'review' link will be available so you can confirm that you have uploaded the correct video.</p>

<p>If you want to change the video, you can overwrite by uploading a replacement. However once you have confirmd the video, you can't upload it without FOSDEM resetting your confirmation. This enables them to take control of last-minute changes.</p>

<p>Bernard Tyers has <a href="https://www.flickr.com/photos/runningwithbulls/50829935862/in/dateposted/">created a slide share showing exactly how the upload process works</a>.</p>

<h2>Q&amp;A sessions</h2>

<p>Your Q&amp;A session will follow your pre-recorded video. If your timeslot is 10:00 - 10:30, for example, your video will be played out  over the stream from 10am. There will be an associated text chatroom where the speaker, host and audience can talk. This means any questions can be answered directly whilst the video plays. </p>

<p>When the video completes, for example at 21 minutes, 30 seconds, the live stream will automatically switch over to a live video room with the speaker and speaker host. The speaker host will lead a live Q&amp;A/discussion on video, asking questions that have been upvoted in the text chat or asking questions of their own, clarifying anything that may not have been clear.</p>

<p>Just before the 10:30 close of the session, the live stream will end and if any of the audience want to continue the Q&amp;A/discussion, they will be directed to the right place to go do that.</p>

<p>After the talk closes at 10:30, and the next one begins, you can continue with your extended Q&amp;A in a more open, informal fashion than during the session itself.</p>

<h2>Real-time chat</h2>

<p>The Matrix platform has been selected for the real-time organisers chat during the event. FOSDEM have <a href="https://matrix.org/blog/2021/01/04/taking-fosdem-online-via-matrix">released an article explaining the rationale here</a>. Note that there is also a bridge for IRC and XMPP / Jabber users.</p>

<p>If you are a devroom organiser / host / moderator, you will need to join the chat through one of these connected channels on the day to process Q&amp;A and communicate with FOSDEM staff.</p>

<h2>Hosts and coordinators</h2>

<p>All speakers must ensure they have a host and a coordinator to support their talk. </p>

<p>The coordinator is the devroom manager and the host will work with the speaker to ensure they upload a suitable presentation, as well as host the live Q&amp;A session. Hosts only need a normal self-created pentabarf account, like a speaker (not a devroom manager). Adding them to the event with the ‘host’ role gives them access to what they need.</p>

<p>Speakers, devroom managers and hosts can see the events you are listed against at the <a href="https://penta.fosdem.org/event/own">‘Own Events’ link</a> and upload videos <a href="https://penta.fosdem.org/submission/FOSDEM21/events">will be available here</a>.</p>

<p>Please make sure that hosts and coordinators are not taking part in a talk before or after your own – otherwise there could be problems with overlap during Q&amp;A sessions outside of the presentation time. Remember, your Q&amp;A can continue in a separate live video conference after your talk has ended.</p>

<h2>Further support</h2>

<ul>
<li>See <a href="/post/fosdem-2021-call-for-papers">call-for papers blog here</a></li>
<li>Contact FOSDEM at devrooms@fosdem.org</li>
<li>#fosdem on Freenode IRC</li>
<li>TPF FOSDEM Slack channel</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>Extracting the list of O'Reilly Animals</title>
    <link rel="alternate" href="https://www.perl.com/article/extracting-the-list-of-o-reilly-animals/" type="text/html"/>
    <content type="html">

&lt;p&gt;Now I want to grab the entire list of O&amp;rsquo;Reilly cover animals, and &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; is going to help me do that.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly Media, who publishes most of my books, is distinctively known
by the animals it chooses for their covers. Edie Freedman explains how she came up with the well-known design in &lt;a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/"&gt;A short history of the O’Reilly animals&lt;/a&gt;. I think I first saw this design on the cover of &lt;a href="https://shop.oreilly.com/product/9781565922259.do"&gt;sed &amp;amp; awk&lt;/a&gt;; those Slender Lorises (Lori?) are a bit creepy, but not creepy enough to keep me away from the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/extracting-the-list-of-o-reilly-animals/sed.jpeg" alt="sed &amp;amp; awk" /&gt;&lt;/p&gt;

&lt;p&gt;Not that a Perler should talk since Larry Wall choose a camel: it&amp;rsquo;s ugly but it gets the job done under tough conditions. And, for &lt;a href="https://www.intermediateperl.com"&gt;own of my own books&lt;/a&gt;, the alpaca is a bit cuter, but they are nasty beasts as well.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly &lt;a href="https://www.oreilly.com/animals.csp"&gt;lists almost all of the animals&lt;/a&gt; from their covers, even if &amp;ldquo;animals&amp;rdquo; is a bit of a loose term that encompasses &amp;ldquo;Catholic Priests&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/0636920021872.do"&gt;Ethics of Big Data&lt;/a&gt;&lt;/em&gt;) or &amp;ldquo;Soldiers or rangers, with rifles&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/9780596007164.do"&gt;SELinux&lt;/a&gt;&lt;/em&gt;). You can page through that list 20 results at a time, or search it. But, as with most lists I see online, I want to grab the entire list at once. Show me a paginated resources and I&amp;rsquo;ll show you the program I automated to unpaginate it.&lt;/p&gt;

&lt;p&gt;Scraping a bunch of pages is no problem for Perl, especially with &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; (as I write about in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). I whipped up a quick script and soon had &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;all of the animals in a JSON file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing particularly fancy in my programming, although I do use &lt;a href="https://docs.mojolicious.org/Mojo/Promise"&gt;Mojo::Promise&lt;/a&gt; so I can make the requests concurrently. That wasn&amp;rsquo;t something that I cared that much about, but I had just answered &lt;a href="https://stackoverflow.com/q/64597755/2766176"&gt;a StackOverflow question about Promises&lt;/a&gt; so it was on my mind. I set up all of the web requests but don&amp;rsquo;t run them right away. Once I have all of them, I run them at once through the &lt;code&gt;all()&lt;/code&gt; Promise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!perl&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.26&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; experimental &lt;span style="color:#e6db74"&gt;qw(signatures)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::JSON &lt;span style="color:#e6db74"&gt;qw(encode_json)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Promise;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::UserAgent;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Util &lt;span style="color:#e6db74"&gt;qw(dumper)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;https://www.oreilly.com/animals.csp&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total );

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ua &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Mojo::UserAgent&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;# We need to get the first request to get the total number of&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# requests. Note that that number is actually larger than the&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# number of results there will be, by about 80.&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $first_page_tx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) {
		push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*;&lt;/span&gt;
		&lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_pagination( $tx );
		},
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { die &lt;span style="color:#e6db74"&gt;&amp;#34;Initial fetch failed!&amp;#34;&lt;/span&gt; }
	)&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @requests &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
	map {
		&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $page &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_;
		$ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; form &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#39;x-o&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $page } )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;}&lt;/span&gt;,
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { warn &lt;span style="color:#e6db74"&gt;&amp;#34;Something is wrong&amp;#34;&lt;/span&gt; }
			);
		}
	map {
		$_ &lt;span style="color:#f92672"&gt;*&lt;/span&gt; $interval
		}
	&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;..&lt;/span&gt; ($total &lt;span style="color:#f92672"&gt;/&lt;/span&gt; $interval)
	;

Mojo::Promise&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;all( @requests )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_pagination&lt;/span&gt; ( $tx ) {
	&lt;span style="color:#75715e"&gt;# 1141 to 1160 of 1244&lt;/span&gt;
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $tx
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;span.cs-prevnext&amp;#39;&lt;/span&gt; )
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=~&lt;/span&gt;&lt;span style="color:#e6db74"&gt; /
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;		(\d+) \h+ to \h+ (\d+) \h+ of \h+ (\d+) /x&lt;/span&gt;;
	}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_page&lt;/span&gt; ( $tx ) {
&lt;span style="color:#75715e"&gt;=pod
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;div class=&amp;#34;animal-row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;a class=&amp;#34;book&amp;#34; href=&amp;#34;...&amp;#34; title=&amp;#34;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;img class=&amp;#34;book-cvr&amp;#34; src=&amp;#34;...&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;p class=&amp;#34;book-title&amp;#34;&amp;gt;Perl 6 and Parrot Essentials&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;p class=&amp;#34;animal-name&amp;#34;&amp;gt;Aoudad, aka Barbary sheep&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;=cut&lt;/span&gt;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; eval {
		$tx
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find( &lt;span style="color:#e6db74"&gt;&amp;#39;div.animal-row&amp;#39;&lt;/span&gt; )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
				&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %h;
				$h{link}      &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;a.book&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;href&amp;#39;&lt;/span&gt; );
				$h{cover_src} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;img.book-cvr&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;src&amp;#39;&lt;/span&gt; );
				$h{title}     &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.book-title&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				$h{animal}    &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.animal-name&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				&lt;span style="color:#f92672"&gt;\&lt;/span&gt;%h;
				} )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;to_array
		} &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
			warn &lt;span style="color:#e6db74"&gt;&amp;#34;Could not process a request!\n&amp;#34;&lt;/span&gt;;
			&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;;
			};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those concurrent requests make this program much faster than it would be if I did them individually one after the other, although it can really hammer a server if I&amp;rsquo;m not careful. Most of the web request time is simply waiting and I get all of those requests to wait at the same time. Now, this isn&amp;rsquo;t really parallelism because once one request has something to do, such as reading the data, the other requests still need to wait their turn. Perhaps I&amp;rsquo;ll rewrite this program later to use &lt;a href="https://docs.mojolicious.org/Minion"&gt;Minion&lt;/a&gt;, the Mojo-based job queue that can do things in different processes.&lt;/p&gt;

&lt;p&gt;The rest of the program is data extraction. In &lt;code&gt;parse_page&lt;/code&gt;, I have various &lt;a href="https://docs.mojolicious.org/Mojo/DOM/CSS"&gt;CSS Selectors&lt;/a&gt; to extract all of the &lt;code&gt;div.animal-row&lt;/code&gt; and turn each animal into a hash (again, I have lots of examples in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). Each Promise adds its results to the &lt;code&gt;@grand&lt;/code&gt; array. At the end, I turn that into a JSON file, which I&amp;rsquo;ve also uploaded as a &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As someone who has been doing this sort of extraction for quite a while, I&amp;rsquo;m always quite pleased how easy Mojolicious makes this. Everything I need is already there, uses the same idioms, and works together nicely. I get the page and select some elements. A long time ago, I would have had long series of substitutions, regexes, and other low-level text processing. Perl&amp;rsquo;s certainly good at text processing, but that doesn&amp;rsquo;t mean I want to work at that level in every program. Do something powerful a couple times and it doesn&amp;rsquo;t seem so cool anymore, although the next step for Mojolicious might be &lt;em&gt;Minority Report&lt;/em&gt;-style pre-fetching where it knows what I want before I do.&lt;/p&gt;

&lt;h2 id="a-nifty-trick"&gt;A nifty trick&lt;/h2&gt;

&lt;p&gt;I do use a few interesting tricks just because I do. Lately in these sorts of programs I&amp;rsquo;m collecting things into a data structure then presenting it at the end. Typically that means I do the setup at the top of the program file and the output at the end.  However, after I&amp;rsquo;ve defined the &lt;code&gt;@grand&lt;/code&gt; variable, I immediately define an &lt;code&gt;END&lt;/code&gt; block to specify what to do with &lt;code&gt;@grand&lt;/code&gt; once everything else has happened:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That keeps the details of the data structure together. The entire point of the program is to get those data out to the JSON file.&lt;/p&gt;

&lt;p&gt;I could have just as easily kept that together with a normal Perl subroutine, but &lt;code&gt;END&lt;/code&gt; is a subroutine that I don&amp;rsquo;t need to call explicitly. This is merely something I&amp;rsquo;ve been doing lately and I might change my mind later.&lt;/p&gt;

&lt;h2 id="a-little-safari"&gt;A little safari&lt;/h2&gt;

&lt;p&gt;And I leave you with a little safari for your own amusement. My animals are the Llama, Alpaca, Vicuñas, Camel, and Hamadryas Butterfly. Search the O&amp;rsquo;Reilly list (or my JSON) to find those titles. Some of them are missing and some have surprising results.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.perl.com/images/extracting-the-list-of-o-reilly-animals/learning_perl.jpeg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Here are some interesting &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; commands to play with the &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;Animals JSON file&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all the title
$ jq -r '.[].title' &amp;lt; animals.json | sort | head -10
.NET &amp;amp; XML
.NET Compact Framework Pocket Guide
.NET Framework Essentials
.NET Gotchas
.NET Windows Forms in a Nutshell
20 Recipes for Programming MVC 3
20 Recipes for Programming PhoneGap
21 Recipes for Mining Twitter
25 Recipes for Getting Started with R
50 Tips and Tricks for MongoDB Develope

# tab-separated list of animals and titles
$ jq -r '.[] | &amp;quot;\(.animal) =&amp;gt; \(.title)&amp;quot;' &amp;lt; animals.json | sort
12-Wired Bird of Paradise	Mobile Design and Development
3-Banded Armadillo	Windows PowerShell for Developers
Aardvark	Jakarta Commons Cookbook
Aardwolf	Clojure Cookbook
Addax, aka Screwhorn Antelope	Ubuntu: Up and Running
Adjutant (Storks)	Social eCommerce
Aegina Citrea, narcomedusae, jellyfish	BioBuilder
African Civet	JRuby Cookbook
African Crowned Crane aka Grey Crowned Crane	C# 5.0 Pocket Reference
African Crowned Crane aka Grey Crowned Crane	Programming C# 3.0

# find a title by exact match of animal
$ jq -r '.[] | select(.animal==&amp;quot;Llama&amp;quot;) | .title' &amp;lt; animals.json
Randal Schwartz on Learning Perl

# find a title with a regex match against the animal
$ jq -r '.[] | select(.animal|test(&amp;quot;ama&amp;quot;)) | .title' &amp;lt; animals.json | sort
Access Cookbook
Access Database Design &amp;amp; Programming
ActionScript for Flash MX Pocket Reference
ActionScript for Flash MX: The Definitive Guide
Ajax on Java
Appcelerator Titanium: Up and Running
Embedding Perl in HTML with Mason
Fluent Python
Identity, Authentication, and Access Management in OpenStack
Introduction to Machine Learning with Python
Learning Perl 6
PDF Explained
Randal Schwartz on Learning Perl
SQL Pocket Guide
SQL Tuning
Solaris 8 Administrator's Guide
The Little Book on CoffeeScript
Writing Game Center Apps in iOS

# find an animal with a regex match against the title
$ jq -r '.[] | select(.title|test(&amp;quot;Perl&amp;quot;)) | .animal' &amp;lt; animals.json | sort
Alpaca
Aoudad, aka Barbary sheep
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary, Head
Badger
Bighorn Sheep
Black Leopard
Blesbok (African antelope)
Camel, aka Dromedary
Cheetah
Emu, large and fluffy
Emu, young
Fan-footed Gecko, aka Wall Gecko
Flying Dragon (lizard)
Flying Dragon (lizard)
Greater Honeyguide
Green Monkey 1 (adult holding a baby)
Hamadryas Baboon
Hamadryas Butterfly
Llama
Mouse
North American Bullfrog
Proboscis Monkey
Red Colobus Monkey
Sea Otter
Staghound
Tadpole of a Greenfrog (sketch)
Thread-winged Lacewing, aka Antlion
White-tailed Eagle
Wolf
&lt;/code&gt;&lt;/pre&gt;
</content>
    <id>https://www.perl.com/article/extracting-the-list-of-o-reilly-animals/</id>
    <published>2021-01-11T18:02:50Z</published>
    <updated>2021-01-11T18:02:50Z</updated>
  </entry>
  <entry>
    <title>You think you're an X, but you're only a Y</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2021/01/you-think-youre-an-x-but-youre-only-a-y.html"/>
    <id>tag:blogs.perl.org,2021:/users/ben_bullock//392.10043</id>

    <published>2021-01-11T11:46:49Z</published>
    <updated>2021-01-11T12:06:29Z</updated>

    <summary> The other day I was converting the output of a Git::Raw::Commit into JSON using my module JSON::Create, when I noticed an oddity: { "commits":[ { "body":null, "id":"27ed4669e32ce2d14831c719dfd5b341a659788e", "message":"Remove a stray html ending tag\n", "time":"1609997818" }, The "time" part always...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="cats" label="cats" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="divine" label="divine" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="garyseven" label="gary seven" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="misteryoujustmadeabigmistake" label="mister you just made a big mistake" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/063RGou-P_8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>The other day I was converting the output of a <a href="https://metacpan.org/pod/Git::Raw::Commit">Git::Raw::Commit</a> into JSON using my module JSON::Create, when I noticed an oddity:</p>

<pre><code>{
"commits":[
    {
        "body":null,
        "id":"27ed4669e32ce2d14831c719dfd5b341a659788e",
        "message":"Remove a stray html ending tag\n",
        "time":"1609997818"
    },
</code></pre>

<p>The "time" part always comes out as a string, even though it's clearly a number. Was this a bug in my module, some kind of dual-string-and-number wannabee variable which JSON::Create falsely turned into a string?</p>

<p>As it happens, no. Git::Raw actually <a href="https://metacpan.org/source/JACQUESG/Git-Raw-0.87/xs%2FCommit.xs#L278">puts the number into a string</a>. (The newSVpv there makes a new Perl string, and the sprintf above that does exactly the same job as Perl's sprintf.)</p>

<p>So Git::Raw turns the original C variable of the form <code>git_time_t</code>, a 64-bit integer type representing the number of seconds since the "epoch" (1970), into a string, perhaps to avoid the "year two million" problem or whatever, because Perl can hold up to 52 or 53 bit integers.</p>

<p>Anyway Perl's monkey business with numbers and strings, and the lack of booleans, makes creating JSON quite complicated, although not as complicated as identifying cats in photographs and youtube videos.</p>

<p><img alt="gary-7-cat-50pc.png" src="http://blogs.perl.org/users/ben_bullock/gary-7-cat-50pc.png" width="599" height="447" class="mt-image-none" style="" /></p>

<p><img alt="gary-7-cat-cat-50pc.png" src="http://blogs.perl.org/users/ben_bullock/gary-7-cat-cat-50pc.png" width="380" height="370" class="mt-image-none" style="" /></p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Free Lunch? Yes, Please. Perl job in Vienna.</title>
    <link rel="alternate" href="https://job.perl.careers/j7i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One of the largest product and price comparison platforms in German-speaking countries is on the hunt for a Perl programmer who wants to use their skills to eradicate inflated prices. Client is willing to consider all candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Dancer, any of which would be useful to have experience with.</div>
    </content>
    <id>https://job.perl.careers/j7i</id>
    <published>2021-01-11T10:00:37Z</published>
    <updated>2021-01-11T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Variety is the spice of life! Perl Developer role in Dubai!</title>
    <link rel="alternate" href="https://job.perl.careers/9ta" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Spice up your 9-to-5 in the playground of the rich and famous! The client is a financial company whose meteoric growth over the last twenty years means that they’re a solid investment for anyone looking to make a change in location for their career. A new, exciting life in one of the most dynamic international cities is only a click away, so what are you waiting for?</div>
    </content>
    <id>https://job.perl.careers/9ta</id>
    <published>2021-01-11T10:00:36Z</published>
    <updated>2021-01-11T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Frankenstein’s Monster is Just Misunderstood! Perl in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/b3m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client’s area of expertise is decidedly less icky than ol’ Frankenstein. Their unique software is used to provide genotyping information about crops, which in turn helps to develop new species of plants. Feeding the planet? Much better way to save the environment than repurposing a few arms and legs. They’re looking for a bright mind with modern Perl skills.</div>
    </content>
    <id>https://job.perl.careers/b3m</id>
    <published>2021-01-11T10:00:35Z</published>
    <updated>2021-01-11T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Just Another Day Working in Perl Paradise (Perl developer job in Malta)</title>
    <link rel="alternate" href="https://job.perl.careers/ftu" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client's Malta office is looking for Perl developers with a strong exposure to Modern Perl – you’ll be comfortable with Plack/PSGI, Moose, and writing tests. Surrounded by the dazzling turquoise waters of the Mediterranean Sea, Malta is known for its 300 days of sunshine, its comprehensive and incredibly inexpensive healthcare, its arts and culture, and the delectable cuisine.</div>
    </content>
    <id>https://job.perl.careers/ftu</id>
    <published>2021-01-11T10:00:34Z</published>
    <updated>2021-01-11T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Business Casual has a Whole New Meaning. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/6bi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online shopping, socializing, working—it’s a digital world now, which is perfect for our client. As an international IT company managing millions of domains for retail and corporate customers in nearly every country in the world, they’re busier than ever—and they need a few senior Perl developers to help them continue to thrive.</div>
    </content>
    <id>https://job.perl.careers/6bi</id>
    <published>2021-01-11T10:00:33Z</published>
    <updated>2021-01-11T10:00:33Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-01-11T10:00:32Z</published>
    <updated>2021-01-11T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Using the ActiveState Platform</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/events/275282889" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 27, 2021; 6:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/events/275282889</id>
    <published>2021-01-11T10:00:31Z</published>
    <updated>2021-01-11T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Houston Perl Mongers Online Meeting - Atomic Operations in Unix (and Perl).</title>
    <link rel="alternate" href="http://houston.pm.org/announce_meeting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">January 14, 2021 06:00 PM Central Time (US and Canada)</div>
    </content>
    <id>http://houston.pm.org/announce_meeting.html</id>
    <published>2021-01-11T10:00:30Z</published>
    <updated>2021-01-11T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Derrick Talks renv - Purdue Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrycccbrb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 13, 2021; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrycccbrb/</id>
    <published>2021-01-11T10:00:29Z</published>
    <updated>2021-01-11T10:00:29Z</updated>
  </entry>
  <entry>
    <title>New Perl Course: Parallel processing in Perl</title>
    <link rel="alternate" href="https://code-maven.teachable.com/p/parallel-processing-in-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I have started to record a new course on parallel programming in Perl. I still have plenty to add to the course, but I already wanted to let you know about it and I already wanted to give you access to it. In the coming days you can use the coupon code FORK1 to get 50% discount on the course price.</div>
    </content>
    <id>https://code-maven.teachable.com/p/parallel-processing-in-perl</id>
    <published>2021-01-11T10:00:28Z</published>
    <updated>2021-01-11T10:00:28Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/cccxxiii-16-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdxlix-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlxxiii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-01-11T10:00:27Z</published>
    <updated>2021-01-11T10:00:27Z</updated>
  </entry>
  <entry>
    <title>A Complete Course of the Raku programming language</title>
    <link rel="alternate" href="https://course.raku.org/essentials/" type="text/html"/>
    <id>https://course.raku.org/essentials/</id>
    <published>2021-01-11T10:00:26Z</published>
    <updated>2021-01-11T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Advent of Code 2020 — Day 12 in Perl</title>
    <link rel="alternate" href="https://www.youtube.com/watch?v=R00JE6QRbno" type="text/html"/>
    <id>https://www.youtube.com/watch?v=R00JE6QRbno</id>
    <published>2021-01-11T10:00:25Z</published>
    <updated>2021-01-11T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 094</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-094-2d2h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon made the Anagram Grouping task look like a schoolboy task. Incredible.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-094-2d2h</id>
    <published>2021-01-11T10:00:24Z</published>
    <updated>2021-01-11T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 94: Binary Anagrams</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_94__Binary_Anagrams.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger's blog post is not just limited to Perl and Raku but it also includes bonus solutions in Python, Ruby and Rust.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_94__Binary_Anagrams.html</id>
    <published>2021-01-11T10:00:23Z</published>
    <updated>2021-01-11T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 94</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/01/04/PWC94/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis' one-liner is very impressive. Must Read.</div>
    </content>
    <id>https://wlmb.github.io/2021/01/04/PWC94/</id>
    <published>2021-01-11T10:00:22Z</published>
    <updated>2021-01-11T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 94: I’M (nearly) BACK!</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/01/04/PerlWeeklyChallenge94.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome back Luca. It is so inspiring to see him back in action.</div>
    </content>
    <id>https://fluca1978.github.io/2021/01/04/PerlWeeklyChallenge94.html</id>
    <published>2021-01-11T10:00:21Z</published>
    <updated>2021-01-11T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 94: Group Anagrams and Binary Tree to Linked List</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-94-group-anagrams-and-binary-tree-to-linked-list.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent has yet another detailed descriptive blog post for both Perl and Raku. Highly Recommended.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-94-group-anagrams-and-binary-tree-to-linked-list.html</id>
    <published>2021-01-11T10:00:20Z</published>
    <updated>2021-01-11T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 94</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-94.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James's short and precise blog post for a quick read.</div>
    </content>
    <id>http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-94.html</id>
    <published>2021-01-11T10:00:19Z</published>
    <updated>2021-01-11T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challenge 094 -- Group Anagrams and Binary Tree to Linked List</title>
    <link rel="alternate" href="https://gugod.org/2021/01/pwc-094-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">If you are looking for some Raku magic then don't forget to checkout Kang-min's blog. It is never short of cool ideas.</div>
    </content>
    <id>https://gugod.org/2021/01/pwc-094-en/</id>
    <published>2021-01-11T10:00:18Z</published>
    <updated>2021-01-11T10:00:18Z</updated>
  </entry>
  <entry>
    <title>PWC094 - Binary Tree to Linked List</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/07/pwc094-binary-tree-to-linked-list/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio showing the power of code reuse and proving the point - 'Don't reinvent the wheel'.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/07/pwc094-binary-tree-to-linked-list/</id>
    <published>2021-01-11T10:00:17Z</published>
    <updated>2021-01-11T10:00:17Z</updated>
  </entry>
  <entry>
    <title>PWC094 - Group Anagrams</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/06/pwc094-group-anagrams/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio's style of blogging is very interesting. Reading his blog is a kind of magic; it always keeps you engaged.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/06/pwc094-group-anagrams/</id>
    <published>2021-01-11T10:00:16Z</published>
    <updated>2021-01-11T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Flattened Anagrams: Perl Weekly Challenge #94</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/01/05/flattened-anagrams-perl-weekly-challenge-94.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave's blog is always inspiring and technical and keeps you engaged. Must Read.</div>
    </content>
    <id>https://jacoby.github.io/2021/01/05/flattened-anagrams-perl-weekly-challenge-94.html</id>
    <published>2021-01-11T10:00:15Z</published>
    <updated>2021-01-11T10:00:15Z</updated>
  </entry>
  <entry>
    <title>CY's Take on PWC#094</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/01/cys-take-on-pwc094.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I like the fighting nature of Cheok-Yin. Don't give up; you are doing great.</div>
    </content>
    <id>http://blogs.perl.org/users/c_y_fung/2021/01/cys-take-on-pwc094.html</id>
    <published>2021-01-11T10:00:14Z</published>
    <updated>2021-01-11T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Anagram Nut Clusters</title>
    <link rel="alternate" href="https://colincrain.com/2021/01/11/anagram-nut-clusters/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Little late but worth the effort, thanks for sharing this blog post. It is always fun and a pleasure to read.</div>
    </content>
    <id>https://colincrain.com/2021/01/11/anagram-nut-clusters/</id>
    <published>2021-01-11T10:00:13Z</published>
    <updated>2021-01-11T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Binary Linked Anagrams with Raku</title>
    <link rel="alternate" href="https://raku-musings.com/binary-linked-anagrams.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I look forward to Arne's blog post every week to see how creative his title is going to be. Thanks for yet another quality blog.</div>
    </content>
    <id>https://raku-musings.com/binary-linked-anagrams.html</id>
    <published>2021-01-11T10:00:12Z</published>
    <updated>2021-01-11T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/10" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam, thanks for reminding us of the "Fundamental Theorem of Arithmetic". It seems I no longer know any mathematics.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/10</id>
    <published>2021-01-11T10:00:11Z</published>
    <updated>2021-01-11T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 94</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-094/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron's solution to the second task "Binary Tree to Linked List" is so well structured and organised. Cool Raku code.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-094/</id>
    <published>2021-01-11T10:00:10Z</published>
    <updated>2021-01-11T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Perl Review - The Weekly Challenge - 092</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-092" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-092</id>
    <published>2021-01-11T10:00:09Z</published>
    <updated>2021-01-11T10:00:09Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 094</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-094" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Group Anagrams" and "Binary Tree to Linked List" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-094</id>
    <published>2021-01-11T10:00:08Z</published>
    <updated>2021-01-11T10:00:08Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 095</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-095" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with couple of fun tasks - "Palindrome Number" and "Demo Stack". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-095</id>
    <published>2021-01-11T10:00:07Z</published>
    <updated>2021-01-11T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Not just another Perl form framework</title>
    <link rel="alternate" href="https://brtastic.xyz/blog/article/perl-form-tiny" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Bartosz introduces his latest work, Form::Tiny.</div>
    </content>
    <id>https://brtastic.xyz/blog/article/perl-form-tiny</id>
    <published>2021-01-11T10:00:06Z</published>
    <updated>2021-01-11T10:00:06Z</updated>
  </entry>
  <entry>
    <title>New To Perl? What Do You Need?</title>
    <link rel="alternate" href="https://www.i-programmer.info/news/222-perl/14267-new-to-perl-what-do-you-need.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Developers who use Perl are invited to take a survey to provide feedback on what help and guidance they would find useful. It's a Perl Foundation initiative to guide developers in their journey of learning Perl.</div>
    </content>
    <id>https://www.i-programmer.info/news/222-perl/14267-new-to-perl-what-do-you-need.html</id>
    <published>2021-01-11T10:00:05Z</published>
    <updated>2021-01-11T10:00:05Z</updated>
  </entry>
  <entry>
    <title>ABC Mart</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/01/abc-mart.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ben is following the Mojolicious pattern of listing methods and functions in alphabetical order. Even the tests are arranged alphabetically.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2021/01/abc-mart.html</id>
    <published>2021-01-11T10:00:04Z</published>
    <updated>2021-01-11T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Coding in Perl? What support do you need?</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/newperluserssurvey" type="text/html"/>
    <id>https://news.perlfoundation.org/post/newperluserssurvey</id>
    <published>2021-01-11T10:00:03Z</published>
    <updated>2021-01-11T10:00:03Z</updated>
  </entry>
  <entry>
    <title>SanDiego.pm Meeting, Tuesday, January 12th, 2021</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bob/2021/01/sandiegopm-meeting-tuesday-january-12th-2021.html" type="text/html"/>
    <id>http://blogs.perl.org/users/bob/2021/01/sandiegopm-meeting-tuesday-january-12th-2021.html</id>
    <published>2021-01-11T10:00:02Z</published>
    <updated>2021-01-11T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Optimize GitHub Actions for Perl</title>
    <link rel="alternate" href="https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">If you use GitHub Actions for your CI/CD you know it doesn't treat Perl as a first class citizen. &lt;a href="https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition"&gt;This tutorial-style post&lt;/a&gt; can help you learn how to deploy a prebuilt Perl environment into GitHub Actions, simplifying and speeding up your CI/CD.</content>
    <id>https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition</id>
    <published>2021-01-11T10:00:01Z</published>
    <updated>2021-01-11T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#494 - Perl Myths</title>
    <link rel="alternate" href="http://perlweekly.com/archive/494.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;Welcome to my first edition of the newsletter for the year 2021. I hope you have had a great start to the year.&lt;/p&gt;
&lt;p&gt;Today I am going to share a personal experience from back in 1999. It was the year when I was first introduced to Perl and joined a start-up that was building Perl developerment team. In the team, we had two newcomers (incuding myself) and one senior developer. My first project was a web based app using MySQL as the database. I had really a hard time installing DBI on my development box and the senior dev was reluctant to help me. I approached my manager and he told me to build the project against a text file for time being. I was given a black &amp; white monitor and was expected to build a colourful web app. Eventually, the project was completed despite all the obstacles and it was time to demo it. Guess what? I was given a colour monitor this time. As expected it didn't look professional and it embarassed me. However a few months later, I found out how to install DBI.&lt;/p&gt;
&lt;p&gt;Why am I sharing this story?&lt;/p&gt;
&lt;p&gt;Well last week, a Perl enthusiast from Indonesia contacted me on Twitter having trouble installing &lt;a href="https://metacpan.org/release/Calendar-Hijri"&gt;Calendar::Hijri&lt;/a&gt;. I wondered how he founnd my Twitter account as I don't include thast information in the module's pod. After a little fight, the issue was resolved and he got the colourful Hijri calendar. It is so satisfactory to be able to help a fellow hacker.&lt;/p&gt;
&lt;p&gt;Coding in Perl? What support do you need?&lt;/p&gt;
&lt;p&gt;The Perl Foundation is running a &lt;a href="https://www.surveymonkey.com/r/7YCL7JZ"&gt;survey&lt;/a&gt;. It is aimed at newcomers to the language. There is a ongoing discussion on the subject for you to check out &lt;a href="https://www.reddit.com/comments/ko88ie"&gt;on Reddit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have you come across any Perl myths?&lt;/p&gt;
&lt;p&gt;I guess so, yes. Someone who has used Perl for years must have rebuked some Perl myths in that time. I recently came across an article titled &lt;a href="https://www.linkedin.com/pulse/perl-myths-pritesh-ugrankar"&gt;Debunking Perl Myths&lt;/a&gt; by Pritesh Ugrankar. I feel so happy to see a fellow Indian being discussed widely with regard to Perl. I would recommend the article to anyone starting Perl so he/she starts with solid base.&lt;/p&gt;
&lt;p&gt;Let me ask you a question, can you list new features released with Perl v5.xx?&lt;/p&gt;
&lt;p&gt;I have had to fight for this information during the peak when I was actively contributing to CPAN modules. With time, I built up a series of notes on this. I remember Dave Cross gave &lt;a href="https://www.slideshare.net/davorg/modern-perl-catchup"&gt;talk&lt;/a&gt; on the similar topic at the London Perl Workshop in 2016 and I had the honour to be in the room. I still remember that was the first time I heard about the special source code token "__SUB__" introduced in Perl v5.16. If you are keen to read a detailed discussion of the features added with every new release of Perl then I would recommend the latest creation from brian d foy, entitled &lt;a href="https://perlschool.com/books/perl-new-features/"&gt;Perl New Features&lt;/a&gt;. It is published by Dave Cross's &lt;a href="https://perlschool.com/about/"&gt;Perl School&lt;/a&gt; and covers releases from 5.10 to 5.32. From the little I have read so far, it looks really promising. Every Perl dev should have a copy handy. Thanks to brian d foy for the review copy.&lt;/p&gt;
&lt;p&gt;A fellow member of the &lt;a href="https://www.facebook.com/groups/perlprogrammers/"&gt;Perl Programmers&lt;/a&gt; Facebook Group shared a &lt;a href="https://www.youtube.com/watch?v=R00JE6QRbno"&gt;video of a struggling new Perl developer&lt;/a&gt;. I enjoyed watching his struggle to get the right answer. I am sure there will be something to learn from his experience.&lt;/p&gt;
&lt;p&gt;Are you looking for fresh start in the year 2021?&lt;/p&gt;
&lt;p&gt;It is a fact that the demand for Perl developers is not as high as it used to be. However there is one guy, Pete Sergeant, who singlehandedly keeps us up to date with every possible opportunity across the globe. Don't forget to check out the opportunities at the end of the newsletter. Pete is not just a recruiter but he is an experienced Perl hacker. Don't believe me? Please check out his MetaCPAN &lt;a href="https://metacpan.org/author/SARGIE"&gt;profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least, take care of yourself and your loved ones. Please enjoy rest of the newsletter.&lt;/p&gt;</content>
    <id>http://perlweekly.com/archive/494.html</id>
    <published>2021-01-11T10:00:00Z</published>
    <updated>2021-01-11T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/10#pwc094" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of strings &lt;span class="citation" data-cites="S"&gt;@S&lt;/span&gt;. Write a script to group Anagrams together in any random order.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
my %letter_factor = (
    e =&gt; 2,
    t =&gt; 3,
    a =&gt; 5,
    o =&gt; 7,
    i =&gt; 11,
    n =&gt; 13,
    s =&gt; 17,
    h =&gt; 19,
    r =&gt; 23,
    d =&gt; 29,
    l =&gt; 31,
    c =&gt; 37,
    u =&gt; 41,
    m =&gt; 43,
    w =&gt; 47,
    f =&gt; 53,
    g =&gt; 59,
    y =&gt; 61,
    p =&gt; 67,
    b =&gt; 71,
    v =&gt; 73,
    k =&gt; 79,
    j =&gt; 83,
    x =&gt; 89,
    q =&gt; 97,
    z =&gt; 101  
);  

MAIN:{
    my $word;
    my %anagrams;
    while($word = &lt;DATA&gt;){
        chomp($word); 
        my @letters = split(//, $word);
        my $word_product = 1;
        map {$word_product *= $_} map{$letter_factor{$_}} @letters;
        push @{$anagrams{$word_product}} , $word if $anagrams{$word_product};  
        $anagrams{$word_product} = [$word] unless $anagrams{$word_product};  
    }  
    close(DATA);
    print "Organized anagrams:\n";
    for my $key (keys %anagrams){
        print "  "; 
        for my $word (@{$anagrams{$key}}){
            print "$word ";
        }
        print "\n";
    }   
}   

__DATA__
opt
bat
saw
tab
pot
top
was
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
Organized anagrams:
  saw was 
  bat tab 
  opt pot top 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am using the same mathematical trick that I have used for anagrams in the past, starting with &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/04/26"&gt;Challenge 005&lt;/a&gt;. The By the &lt;strong&gt;Fundamental Theorem of Arithmetic&lt;/strong&gt; &lt;em&gt;every integer greater than 1 is either a prime number itself or can be represented as the unique product of prime numbers.&lt;/em&gt; We use that to our advantage by having a prime number associated with each letter. Each word is a product of these numbers and words with the same product are anagrams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this way we build a hash keyed by word product whose values are list of anagrams. After constructing this data structure we then just print out the contents of all the lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The choice of letters and prime numbers is based on the &lt;em&gt;Lewand Ordering&lt;/em&gt; and it isn’t at all necessary but it does little harm so I left it in anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree. Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally, print the linked list object.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use LinkedList;

sub build_linked_list{ 
    my($tree) = @_;
    my $linked_list = new LinkedList(); 
    my @paths = build_paths($tree);
    my $root = $paths[0]-&gt;[0]; 
    my $next = $linked_list-&gt;insert($root, undef); 
    for my $path (@paths){
        for my $node (@{$path}){
            $next = $linked_list-&gt;insert($node, $next) if !$linked_list-&gt;in_list($node);    
        }
    } 
    return $linked_list;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         unshift @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6, 7);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(2, 5);
    $Tree-&gt;add_edge(5, 6);
    $Tree-&gt;add_edge(5, 7);
    print build_linked_list($Tree)-&gt;stringify();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LinkedList module used is of my own making. I am using a somewhat modified version of the LinkedList module I made for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt;. Next is what that code looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList{
    use boolean;
    use Tie::RefHash;
    use Class::Struct;
    package Node{
        use Class::Struct;

        struct(
            data =&gt; q/$/,
            next =&gt; q/Node/
        );
    }

    struct(
        head =&gt; q/Node/
    );

    sub stringify{
        my($self) = @_;
        my $s = "";
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;data();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;data() if $next-&gt;data();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $data, $previous) = @_;
        if(!$previous){
            $previous=new Node(data =&gt; undef, next =&gt; undef);
            $self-&gt;head($previous);
        }
        my $next=new Node(data =&gt; $data, next =&gt; undef);
        $previous-&gt;next($next);
        return $next;
    }

    sub in_list{
        my($self, $k) = @_;
        my $previous = $self-&gt;head();
        my $next = $self-&gt;head()-&gt;next();
        tie my %node_value, "Tie::RefHash";
        while($next){
            return true if($next-&gt;data() == $k); 
            $next = $next-&gt;next(); 
        }
        return false;
    }
    true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -I. ch-2.pl
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Depth First Search (DFS) code for building the paths is the same as &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03"&gt;last week&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DFS returns all the paths they are simply inserted into the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My LinkedList module is one of my favorite uses of &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My write up for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt; has some more notes on this LinkedList.pm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Letter_frequency"&gt;Lewand Ordering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html"&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc094</id>
    <published>2021-01-10T11:29:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CY's Take on PWC#094</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2021/01/cys-take-on-pwc094.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10041</id>

    <published>2021-01-09T13:32:56Z</published>
    <updated>2021-01-10T06:33:06Z</updated>

    <summary>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email). Do tell me if I am wrong or you strongly oppose my statements!...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p>

<p><strong>Do tell me if I am wrong or you strongly oppose my statements! </strong></p>


<p>Task 1 of #094 looks like a sibling of <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-092/#TASK1">Task 1 of #092</a> (which Perl codes <a href="https://perlweeklychallenge.org/blog/review-challenge-092/">are recently reviewed</a>, my submitted code <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-092/cheok-yin-fung/perl/ch-1.pl">here</a>) and Task 2 of #094 looks like a sibling of <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-093/#TASK2">Task 2 of #093</a> (where I use the array representation of binary tree, <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-093/cheok-yin-fung/perl/ch-2.pl">code here</a>).</p>



<h4>Task 1: Group Anagrams</h4>
<p>Now I <a href="http://blogs.perl.org/users/c_y_fung/2021/01/from-a-reflection-on-the-weekly-challenge-092-task-1.html">was thinking of CJK characters</a>. When comparing terms, put <code>-CA</code>; and inside scripts, put <code>use utf8; use open ':std', ':encoding(UTF-8)';</code>.</p>

<p>And my approach is similar to that of Week #092. On #092, a <code>sub learn_pattern</code> produces a hash from the first parameter; and <code>sub verify_pattern</code> for the second parameter returns true or false. Now, this time we face a bulk of terms, therefore we have to <code>&amp;collect_alphabets</code>: [1]</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">%hash_num</font>;<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">collect_alphabets</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@words</font>&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@alphabets</font>&nbsp;=&nbsp;<font color="#007f00">split</font>&nbsp;<font color="#ffa500">//</font>,&nbsp;<font color="#007f00">join</font>(<font color="#ffa500">""</font>&nbsp;,&nbsp;<font color="#0000ff">@words</font>);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;=&nbsp;0;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">@alphabets</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">exists</font>&nbsp;<font color="#0000ff">$hash_num</font>{<font color="#0000ff"><b>$_</b></font>})&nbsp;{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$hash_num</font>{<font color="#0000ff"><b>$_</b></font>}&nbsp;=&nbsp;<font color="#0000ff">$i</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
</tt></div>

<p>Afterwards a function for <tt>learn</tt>ing again</p>

<div><tt><b>sub&nbsp;</b><font color="#007f00">learn_atoms</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$word</font>&nbsp;=&nbsp;<font color="#0000ff"><b>$_</b></font>[0];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@alphabets</font>&nbsp;=&nbsp;<font color="#007f00">split</font>&nbsp;<font color="#ffa500">//</font>,&nbsp;<font color="#0000ff">$word</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@coord</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff">$hash_num</font>{<font color="#0000ff"><b>$_</b></font>}}&nbsp;<font color="#0000ff">@alphabets</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@coord</font>&nbsp;=&nbsp;<font color="#007f00">sort</font>&nbsp;<font color="#0000ff">@coord</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#007f00">join</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">,</font><font color="#ffa500">"</font>,&nbsp;<font color="#0000ff">@coord</font>;<br />
}<br />
</tt></div>

<p>And I wrote a <tt>&amp;compare_two_words</tt> without second thought. But it is not included in the main dish.</p>

<p>I group all the terms by an array of arrays and make use of a hash (<tt>%hash_compounds</tt>):</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">%hash_compounds</font>;<br />
<b>my</b>&nbsp;<font color="#0000ff">@arr</font>;<br />
<b>my</b>&nbsp;<font color="#0000ff">$k</font>&nbsp;=&nbsp;0;<br />
<br />
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$w</font>&nbsp;(<font color="#0000ff"><b>@ARGV</b></font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$l</font>&nbsp;=&nbsp;learn_atoms(<font color="#0000ff">$w</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">exists</font>&nbsp;<font color="#0000ff">$hash_compounds</font>{<font color="#0000ff">$l</font>})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$hash_compounds</font>{<font color="#0000ff">$l</font>}&nbsp;=&nbsp;<font color="#0000ff">$k</font>;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;[<font color="#0000ff">$w</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$k</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$arr</font>[&nbsp;<font color="#0000ff">$hash_compounds</font>{<font color="#0000ff">$l</font>}&nbsp;]},&nbsp;<font color="#0000ff">$w</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
</tt></div>

<p><br /></p><p>The remaining is printing result:</p>

<div><tt>
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#0000ff">$k</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">(\"</font><font color="#ffa500">"</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#007f00">join</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">\",\"</font><font color="#ffa500">"</font>,&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$arr</font>[<font color="#0000ff">$j</font>]};<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">\")</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;&nbsp;<br />
}<br />
</tt></div>

<p><br /></p><p>Here are my manual tests:</p>

<pre>$ perl ch-1.pl "opt" "bat" "saw" "tab" "pot" "top" "was"
("opt","pot","top")
("bat","tab")
("saw","was")

$ perl -CA ch-1.pl 屢敗屢戰 東南西北 屢戰屢敗 陳年 屢屢戰敗 年陳 過錯 錯過 東西南北 真善美 美善真 一二三 三二一 真善美聖 真 善 美
("屢敗屢戰","屢戰屢敗","屢屢戰敗")
("東南西北","東西南北")
("陳年","年陳")
("過錯","錯過")
("真善美","美善真")
("一二三","三二一")
("真善美聖")
("真")
("善")
("美")

$ perl ch-1.pl "x"
("x")
</pre>

<p>For the Unicode part, the reference: <a href="https://stackoverflow.com/questions/15210532/use-of-use-utf8-gives-me-wide-character-in-print">a stackoverflow post</a> and <a href="https://www.reddit.com/r/perl/comments/koahhf/from_a_reflection_on_the_weekly_challenge_092/">a reddit post</a>. </p>


<h4>Task 2: Binary Tree to Linked List</h4>

<blockquote>Write a script to represent the given binary tree as an <u>object</u> and flatten it to a linked list <u>object</u>. </blockquote>

<p>Underlining is added by CY. Terms in programming can be obscure. I 
thought of object-oriented programming when I decided to start coding. I
 wrote two packages, one for linked lists, one for binary trees, in 
"traditional" Perl object-oriented system. I got "<tt>unblessed</tt>...". Then after a sleep, I tried Moose. The situation did not improve, Perl still gave out "<tt>unblessed</tt>..."
 messages. I accepted my capacity, and, looked at submitted solutions 
(an action I rarely do), no inspirations ‐ other submitters hadn't not 
touched on OO for this task. Then, unlike <b>the previously hot celebrity in politics</b>, I soon <b>Accepted the Defeat</b> ; wrote a version of script with OO linked list and array representation of binary tree; and, <b>tweeted</b>.</p>

<p>We know, tweets can be powerful! Our challenge organizer, Mohammand ,
replied my tweet with the word "please" and encouraged me not to give 
up. Initially I would like to reply with excuses. But some mysterious 
forces put me try harder. Although I have never written a full 
application by OOP (for any languages), I have heard of some OO terms. 
Suddenly the term "(multiple) inheritance" popped. Then I tried to write
 three packages, the third one specific for traversal. I used 
traditional Perl OO system (because I don't know how to alter attribute 
values in Moose). Well, my script still met hurdles -  "<tt>Can't locate object method "nextnode" via package "BinaryTreeNode"</tt> ". </p>

<p>In the morning of Saturday, I have used two packages; put the 
traversal subroutine inside the binary tree package and let this package
 <tt>our @ISA = qw/ SLL::Node /;</tt>. Finally the script <b>Works</b> (and More Importantly, <b>I Can Tweet</b>)! </p>

<p>Here is the binary tree, very direct:</p>

<div><tt>
<b>package</b>&nbsp;BinaryTreeNode;<br />
<br />
<b>our</b>&nbsp;<font color="#0000ff">@ISA</font>&nbsp;=&nbsp;<font color="#ffa500">qw/</font>&nbsp;SLL::Node&nbsp;<font color="#ffa500">/</font>;<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">new</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$class</font>)&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">bless</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_value&nbsp;=&gt;&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">1</font>],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_leftchild&nbsp;=&gt;&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">2</font>],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_rightchild&nbsp;=&gt;&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">3</font>],<br />
&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<font color="#0000ff">$class</font>;<br />
}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">value</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_value}&nbsp;}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">leftchild</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_leftchild}&nbsp;}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">rightchild</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_rightchild}&nbsp;}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">create_tree_from_list</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$class</font>,<font color="#0000ff">@arr</font>)&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$lastleaf</font>&nbsp;=&nbsp;<font color="#0000ff">$#arr</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@tree</font>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$k</font>&nbsp;(<font color="#007f00">reverse</font>&nbsp;0..<font color="#0000ff">$lastleaf</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>],&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>])&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>],&nbsp;<font color="#007f00">undef</font>)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;<font color="#007f00">undef</font>,&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>])&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;<font color="#007f00">undef</font>,&nbsp;<font color="#007f00">undef</font>)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#0000ff">$class</font>,&nbsp;<font color="#0000ff">$tree</font>[0];&nbsp;&nbsp;<font color="#7f7f7f"><i>#return&nbsp;tree&nbsp;root</i></font><font color="#7f7f7f"><i><br />
</i></font>}<br />
</tt></div>


<p><br /></p><p>The linked list used differ from codes written three months ago (<a href="http://blogs.perl.org/users/c_y_fung/2020/09/oo-linked-lists-in-perl.html">the post here</a>) just by an additional one-line method ‐ </p>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">set_nextnode</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_nextnode}&nbsp;=&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">1</font>];&nbsp;}<br />
</tt></div>

<br /><br /><br />

<p>For the traversal (inside the package <code>BinaryTreeNode</code>):</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">@tt_stack</font>&nbsp;=&nbsp;();<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">to_llnode</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#007f00">SLL::Node</font>-&gt;new(<font color="#007f00">shift</font>,&nbsp;<font color="#007f00">undef</font>);<br />
}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">tree_travel</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$self</font>&nbsp;=&nbsp;<font color="#007f00">shift</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$t</font>&nbsp;=&nbsp;<font color="#007f00">shift</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$baby</font>&nbsp;=&nbsp;to_llnode(<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">value</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$preserve</font>&nbsp;=&nbsp;\<font color="#0000ff">$baby</font>;<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>&nbsp;<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">leftchild</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@tt_stack</font>,&nbsp;<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>&nbsp;<b>if</b>&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>)&nbsp;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$baby</font>-&gt;<font color="#0000ff">set_nextnode</font>(tree_travel(<font color="#0000ff">$self</font>,<font color="#0000ff">$</font>{<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">leftchild</font>}));<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>elsif</b>&nbsp;(<font color="#007f00">defined</font>&nbsp;<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$baby</font>-&gt;<font color="#0000ff">set_nextnode</font>(tree_travel(<font color="#0000ff">$self</font>,<font color="#0000ff">$</font>{<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>}));<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>elsif</b>&nbsp;(<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@tt_stack</font>&nbsp;!=&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$n</font>&nbsp;=&nbsp;<font color="#007f00">pop</font>&nbsp;<font color="#0000ff">@tt_stack</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$baby</font>-&gt;<font color="#0000ff">set_nextnode</font>(tree_travel(<font color="#0000ff">$self</font>,<font color="#0000ff">$</font>{<font color="#0000ff">$n</font>}));<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#0000ff">$$preserve</font>;<br />
}<br />
<br />
</tt></div>


<p>For the printing (similar to the post in the three months ago):</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">$node</font>&nbsp;=&nbsp;<font color="#0000ff">$rootnode</font>;<br />
<b>while</b>&nbsp;(<font color="#007f00">defined</font>&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">nextnode</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">value</font>,&nbsp;<font color="#ffa500">"</font><font color="#ff0000">&nbsp;-&gt;&nbsp;</font><font color="#ffa500">"</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$node</font>&nbsp;=&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">nextnode</font>;<br />
}<br />
<font color="#007f00">print</font>&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">value</font>;&nbsp;<font color="#7f7f7f"><i>#final&nbsp;value</i></font><font color="#7f7f7f"><i><br />
</i></font><font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
<br />
</tt></div>

<p>Full code on GitHub: <i><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-094/cheok-yin-fung/">link</a></i> (with Java solution for task 2) □</p>

<p>Stay healthy! (written on 9th Jan 2021 (probably a remarkable day in the 21st century history) night, Hong Kong Time Zone).</p>

<hr>
<div>
Remark:<br />
[1] better name as "<tt>collect_letters</tt>"... As we won't say Chinese alphabets or Korean alphabets.<br />
For those who may be interested in the meaning of those Chinese terms:<br />
屢敗屢戰 fight disregard of previous failures<br />
屢戰屢敗 fight again and again , but fail always<br />
屢屢戰敗 fight again and again , but fail always<br />
東 East<br />
西 West<br />
北 North<br />
南 South <br />
真 truth<br />
善 goodness<br />
美 beauty<br />
聖 holiness<br />
一二三 one, two, three<br />
陳年 aged<br />
年陳 well... This could be a name of someone.<br />
過錯 wrongness<br />
錯過 miss ("to fail to do or experience something", from dictionary) <br /></div><div><br /></div>]]>
        
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3008768959591424846</id>
    <published>2021-01-09T22:37:00.000+01:00</published>
    <updated>2021-01-09T22:37:16.511+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxiii) 16 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997000&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.996 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.008&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.007 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.030&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.029 was 6 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.27&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.26 was 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/IO-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl core IO modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2021-01-04&lt;/li&gt;  &lt;li&gt;Votes: 52&lt;/li&gt;  &lt;li&gt;Previous version: 1.42 was 11 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PMQS/IO-Compress-2.100' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Compress::Zlib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IO Interface to compressed data files/buffers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.100&lt;/strong&gt; on 2021-01-07&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.096 was 5 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.52&lt;/strong&gt; on 2021-01-07&lt;/li&gt;  &lt;li&gt;Votes: 149&lt;/li&gt;  &lt;li&gt;Previous version: 6.51 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.15&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 80&lt;/li&gt;  &lt;li&gt;Previous version: 10.14 was 2 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.23&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 66&lt;/li&gt;  &lt;li&gt;Previous version: 4.22 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.12 was 6 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARSCHAP/perl-ldap-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::LDAP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - LDAP client library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.67 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VANSTYN/RapidApp-1.3401' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;RapidApp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Turnkey ajaxy webapps &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3401&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 1.3400 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 2 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/Test-LeakTrace-0.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::LeakTrace&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Traces memory leaks &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.17&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.16 was 3 years, 6 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GFRANKS/Test-MockModule-v0.176.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::MockModule&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Override subroutines in a module for unit testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.176.0&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v0.175.0 was 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Zydeco-0.613' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Zydeco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Jazz up your Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.613&lt;/strong&gt; on 2021-01-09&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.612 was 2 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3008768959591424846/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxiii-16-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3008768959591424846"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3008768959591424846"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxiii-16-cpan-great-modules-released.html" title="(cccxxiii) 16 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3007815038691880966</id>
    <published>2021-01-09T22:33:00.000+01:00</published>
    <updated>2021-01-09T22:33:01.021+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlix) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 62&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/09 21:32:29 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::calendr" target="_blank"&gt;App::calendr&lt;/a&gt; - Application to display supported Calendar.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argv" target="_blank"&gt;Argv&lt;/a&gt; - Provide an OO interface to an arg vector&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::Crypto" target="_blank"&gt;Bitcoin::Crypto&lt;/a&gt; - Bitcoin cryptography in Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Calendar::Hijri" target="_blank"&gt;Calendar::Hijri&lt;/a&gt; - Interface to Islamic Calendar.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Test::Dummy::Perl5::StaticInstall" target="_blank"&gt;CPAN::Test::Dummy::Perl5::StaticInstall&lt;/a&gt; - Dummy CPAN distribution with x_static_install metadata&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIDI::RtMidi::FFI" target="_blank"&gt;MIDI::RtMidi::FFI&lt;/a&gt; - Bindings for librtmidi - Realtime MIDI library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Duo" target="_blank"&gt;Net::Duo&lt;/a&gt; - API for Duo multifactor authentication service&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Text::Minify" target="_blank"&gt;Plack::Middleware::Text::Minify&lt;/a&gt; - minify text responses on the fly&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Readonly::Tiny" target="_blank"&gt;Readonly::Tiny&lt;/a&gt; - Simple, correct readonly values&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Assemble::Compressed" target="_blank"&gt;Regexp::Assemble::Compressed&lt;/a&gt; - Assemble more compressed Regular Expression&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Standard_Normal" target="_blank"&gt;Statistics::Standard_Normal&lt;/a&gt; - Z scores and percentiles using standard normal table&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Futuristic::Perl" target="_blank"&gt;Acme::Futuristic::Perl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::AhoCorasick::XS" target="_blank"&gt;Algorithm::AhoCorasick::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::fsql" target="_blank"&gt;App::fsql&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::MethodMaker" target="_blank"&gt;Class::MethodMaker&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Clipboard" target="_blank"&gt;Clipboard&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Const::Fast" target="_blank"&gt;Const::Fast&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::DSA" target="_blank"&gt;Crypt::OpenSSL::DSA&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Alias" target="_blank"&gt;Data::Alias&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::DeepAccess" target="_blank"&gt;Data::DeepAccess&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Money" target="_blank"&gt;Data::Money&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Section" target="_blank"&gt;Data::Section&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+2=85)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=247)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gedcom" target="_blank"&gt;Gedcom&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML5::DOM" target="_blank"&gt;HTML5::DOM&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FDPass" target="_blank"&gt;IO::FDPass&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Interactive" target="_blank"&gt;IO::Interactive&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MediaWiki::API" target="_blank"&gt;MediaWiki::API&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MetaCPAN::Client" target="_blank"&gt;MetaCPAN::Client&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+3=438)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Async::WebSocket" target="_blank"&gt;Net::Async::WebSocket&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=157)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Freenode" target="_blank"&gt;Perl::Critic::Freenode&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::POM::Web" target="_blank"&gt;Pod::POM::Web&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Simple" target="_blank"&gt;Pod::Simple&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Weaver" target="_blank"&gt;Pod::Weaver&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI::HTML" target="_blank"&gt;PPI::HTML&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Assemble" target="_blank"&gt;Regexp::Assemble&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Debugger" target="_blank"&gt;Regexp::Debugger&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::Key" target="_blank"&gt;Sort::Key&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::Naturally" target="_blank"&gt;Sort::Naturally&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract" target="_blank"&gt;SQL::Abstract&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/StreamFinder" target="_blank"&gt;StreamFinder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Install" target="_blank"&gt;Sub::Install&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Pipe" target="_blank"&gt;Sub::Pipe&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=129)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColorx::ColorNicknames" target="_blank"&gt;Term::ANSIColorx::ColorNicknames&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::LeakTrace" target="_blank"&gt;Test::LeakTrace&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::Tiny" target="_blank"&gt;Text::Table::Tiny&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=124)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::XSD::Lite" target="_blank"&gt;Types::XSD::Lite&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::db" target="_blank"&gt;URI::db&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3007815038691880966/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdxlix-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3007815038691880966"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3007815038691880966"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdxlix-metacpan-weekly-report.html" title="(cdxlix) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8222264738716613513</id>
    <published>2021-01-09T22:31:00.000+01:00</published>
    <updated>2021-01-09T22:31:20.018+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-01-09 21:30:36 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65567540" target="_blank"&gt;Pretending an Autoloaded Function has a Block Prototype&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65617886" target="_blank"&gt;The smartmatch operator is not working as expected&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65546890" target="_blank"&gt;What is the minimum perl script for Selenium?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65645504" target="_blank"&gt;dynamically add leading underscore to existing sub&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65561431" target="_blank"&gt;Perl:How to insert line in a file?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65560451" target="_blank"&gt;In mrskew, can I calculate human readable timestamps from tim?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65608879" target="_blank"&gt;How to append content of a file multiple times into one file in perl script&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65594390" target="_blank"&gt;How to use patchperl when compiling an old perl distribution?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65599664" target="_blank"&gt;Inline Python support for passing filehandle from perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65600639" target="_blank"&gt;Spreadsheet::WriteExcel - Values are changed to scientific notation despite cell being formatted as Text&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8222264738716613513/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8222264738716613513"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8222264738716613513"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxiii-stackoverflow-perl-report.html" title="(cdlxxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Simple live chart using Mojolicious</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/simple-live-chart-using-mojolicious-1iej" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzyau-MN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1m8vkngba6uik1ikc00o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzyau-MN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1m8vkngba6uik1ikc00o.gif" alt="Live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this blog post, I will show how easy it is to write a live chart with &lt;a href="https://www.perl.org/"&gt;Perl&lt;/a&gt;, &lt;a href="https://docs.mojolicious.org/Mojolicious/Lite"&gt;Mojolicious::Lite&lt;/a&gt; and some javascript (mainly &lt;a href="https://www.highcharts.com/"&gt;Highcharts&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s2tRxvuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/at40r8z12e9pedz17hon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2tRxvuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/at40r8z12e9pedz17hon.png" alt="Mojolicious"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code" class="anchor"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://docs.mojolicious.org/Mojolicious/Lite"&gt;Mojolicious::Lite&lt;/a&gt; very small webapp. With routes and get/set urls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojolicious::&lt;/span&gt;&lt;span class="nv"&gt;Lite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$datfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/tmp/values.txt&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# Answer to /&lt;/span&gt;
&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;live&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# Set value from GET call&lt;/span&gt;
&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/setvalue/:value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;param&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$datfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Could not open &lt;/span&gt;&lt;span class="si"&gt;$datfile&lt;/span&gt;&lt;span class="s2"&gt; $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$value&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You set the value to &lt;/span&gt;&lt;span class="si"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# Get value from GET call&lt;/span&gt;
&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getvalue&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$datfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Could not open '&lt;/span&gt;&lt;span class="si"&gt;$datfile&lt;/span&gt;&lt;span class="s2"&gt;' $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;chomp&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Right below, I start the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And open the &lt;code&gt;__DATA__&lt;/code&gt; section (where falls the template/view in &lt;a href="https://docs.mojolicious.org/Mojolicious/Lite"&gt;Mojolicious::Lite&lt;/a&gt; applications):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="cp"&gt;__DATA__
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the view, with &lt;strong&gt;jquery&lt;/strong&gt; and &lt;strong&gt;highcharts&lt;/strong&gt; to make make it "live".... Yes it is a bit a big blob since there is all configs for the chart, but it's not that complicated !&lt;/p&gt;

&lt;p&gt;The view is a big chunk of javascript and an almost empty piece of html (just one &lt;code&gt;div&lt;/code&gt; to make room to chart):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@@ live.html.ep
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"us"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dynamic Live Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://code.jquery.com/jquery-latest.min.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://code.highcharts.com/highcharts.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Highcharts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;global&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;useUTC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Highcharts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;renderTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                        &lt;span class="c1"&gt;// set up the updating of the chart each second&lt;/span&gt;
                        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
                        &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// current time&lt;/span&gt;
                            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/getvalue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                              &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oldy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                              &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                              &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPoint&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="p"&gt;});&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dynamic Chart live&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;xAxis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;tickPixelInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;yAxis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Values&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;plotLines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#808080&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;plotOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;marker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;tooltip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="nx"&gt;Highcharts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dateFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%Y-%m-%d %H:%M:%S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="nx"&gt;Highcharts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;exporting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;series&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// generate an array of random data&lt;/span&gt;
                    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
                        &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                        &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                            &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="p"&gt;});&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;})()&lt;/span&gt;
            &lt;span class="p"&gt;}]&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have our application, now we are ready to feed and test 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feed-with-random-data" class="anchor"&gt;
  &lt;/a&gt;
  Feed with random data
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGM94f2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mn0x0azbhlltj53eyezr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGM94f2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mn0x0azbhlltj53eyezr.jpeg" alt="Feed me"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the data source is a flat &lt;code&gt;/tmp/values.txt&lt;/code&gt; file that can be fed by http GET call or manually (this is what we will do right now):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;shuf&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; 0-20 &lt;span class="nt"&gt;-n&lt;/span&gt; 1&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /tmp/values.txt&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;sleep &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#start-it-and-test" class="anchor"&gt;
  &lt;/a&gt;
  Start it and test
&lt;/h2&gt;

&lt;p&gt;I start it with development server &lt;code&gt;morbo&lt;/code&gt; (but could be something else):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;morbo live.pl
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can access value with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://127.0.0.1:3000/getvalue
12
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or set value to &lt;strong&gt;100&lt;/strong&gt; for instance with the endpoint &lt;code&gt;/setvalue/100&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl http://127.0.0.1:3000/setvalue/100
You &lt;span class="nb"&gt;set &lt;/span&gt;the value to 100
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-result" class="anchor"&gt;
  &lt;/a&gt;
  The result
&lt;/h2&gt;

&lt;p&gt;Open your favorite browser and you will get this beautiful live chart:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzyau-MN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1m8vkngba6uik1ikc00o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzyau-MN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1m8vkngba6uik1ikc00o.gif" alt="Live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also get an overview &lt;a href="https://thibaultduponchelle.github.io/wawawa/livechart/"&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/simple-live-chart-using-mojolicious-1iej</id>
    <published>2021-01-09T15:56:29Z</published>
    <updated>2021-01-09T15:56:29Z</updated>
    <category term="perl"/>
    <category term="mojolicious"/>
    <category term="highcharts"/>
    <category term="javascript"/>
  </entry>
  <entry>
    <title>Scala and Perl in 2021</title>
    <link rel="alternate" href="https://dev.to/bevilaquabruno/scala-and-perl-in-2021-1mee" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi dev.to community!!</p>

<p>What is the situation of Scala and Perl in 2021? I mean, i don't know anything about both languages but i want to learn, is the both still used in large scale? Or do you think is better to keep coding in PHP, Node and Python?</p>

</div>
    </content>
    <author>
      <name>Bruno Fernando Bevilaqua</name>
    </author>
    <id>https://dev.to/bevilaquabruno/scala-and-perl-in-2021-1mee</id>
    <published>2021-01-07T12:09:32Z</published>
    <updated>2021-01-07T12:09:32Z</updated>
    <category term="scala"/>
    <category term="perl"/>
    <category term="2021"/>
    <category term="discuss"/>
  </entry>
  <entry>
    <title>Git-Hooks mit Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Git ist eine weit verbreitete Software zur Versionsverwaltung. Wir nutzen Git seit vielen Jahren, um unseren Perl-Code zu verwalten. Soll im Git-Workflow etwas erzwungen werden, kommen sogenannte Git-Hooks zum Einsatz.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl</id>
    <published>2021-01-06T10:00:00Z</published>
    <updated>2021-01-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 094</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-094-2d2h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-094/">Challenge 094</a></p>

<h1>
  <a href="#task-1-group-anagrams" class="anchor">
  </a>
  TASK #1 › Group Anagrams
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given an array of strings <code>@S</code>.</p>

<p>Write a script to group <a href="https://en.wikipedia.org/wiki/Anagram">Anagrams</a> together in any random order</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>This is pretty straight forward. Read the list of words, group them into a hash with the letters ordered, and then display the values of the hash. Simples.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl opt bat saw tab pot top was
[ ("saw", "was"),
  ("bat", "tab"),
  ("opt", "pot", "top") ]

» ./ch-1.pl x
[ ("x") ]
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-binary-tree-to-linked-list" class="anchor">
  </a>
  TASK #2 › Binary Tree to Linked List
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given a binary tree.</p>

<p>Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally print the linked list object.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>Okay, confession time. When doing these challenges. I have two rules. 1) Never read people's solutions before doing my own, and 2) Don't use modules that aren't part of Perl core. Perl doesn't have a native linked list implementation, and therefore I am intentionally skipping half this task to get the end result.</p>

<p>This task is similar to last week's <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-093/#TASK2">second task</a>. My code is largely copied from that. Instead of storing the paths, I add to the <code>@digits</code> array as I walk the path.</p>

<h2>
  <a href="#example" class="anchor">
  </a>
  Example
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl &lt; example-1.txt 
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-094-2d2h</id>
    <published>2021-01-05T12:07:42Z</published>
    <updated>2021-01-05T12:07:42Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Archiving CPAN logs in GitHub Actions</title>
    <link rel="alternate" href="https://dev.to/davorg/archiving-cpan-logs-in-github-actions-2hfd" type="text/html"/>
    <content type="html">&lt;p&gt;As more and more people have started to use &lt;a href="https://github.com/actions"&gt;GitHub Actions&lt;/a&gt; to test their CPAN modules, a pretty standard version of a basic configuration file has emerged. It looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-
latest']
        perl: [ 'latest' ]
    name: Perl ${{ matrix.perl }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}
      - name: Perl version
        run: perl -V
      - name: Install modules
        run: cpanm --installdeps .
      - name: Run tests
        run: prove -lv t
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I've been slowly adding something similar to this to all of the GitHub repos that contain my CPAN modules. And it mostly works pretty well. There are just a few problems that I'm ironing out.&lt;/p&gt;

&lt;p&gt;One of them is a problem where some of the required CPAN modules don't install cleanly, so the run is aborted. But I think I've found a tool that is going to help me fix this problem.&lt;/p&gt;

&lt;p&gt;You'll see that I use &lt;code&gt;cpanm&lt;/code&gt; to install the modules that are required to run the tests. And &lt;code&gt;cpanm&lt;/code&gt; writes a detailed log of what it is doing which is invaluable when something goes wrong - as you can get the error messages from the log file. Unfortunately, this doesn't work well in a CI environment like GitHub Actions. All I see in the log of the run is something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Building and testing Inline-C-0.81 ... FAIL
! Installing Inline::C failed. See /home/runner/.cpanm/work/1609767557.4781/build.log for details. 
Retry with --force to force install it.
! Installing the dependencies failed: Module 'Inline::C' is not installed
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;build.log&lt;/code&gt; file is the one we need to see. But it's on the container that has been used to run your tests, and by the time you're looking at that error, the container has vanished into the ether taking your build log with it.&lt;/p&gt;

&lt;p&gt;But we can stop it being removed. GitHub Actions has a feature called "artifacts" where you can store items that are created in a job run so that you can examine them in more detail later on. We can use that to archive our build logs.&lt;/p&gt;

&lt;p&gt;I've started adding this step to my GitHub Action config files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Archive CPAN logs
  if: ${{ failure() }}
  uses: actions/upload-artifact@v2
  with:
    name: cpan_log
    path: .cpanm/work/*/build.log
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This adds another step into my process. It only runs if another step fails in some way. It uses the standard action &lt;code&gt;actions/upload-artifact@v2&lt;/code&gt; to archive my build logs. Now, when something goes wrong in my tests the job page will have a link labelled "cpan_log" which I can click on to download a copy of the &lt;code&gt;cpanm&lt;/code&gt; build log which I can then examine at my leisure to work out what the problem is.&lt;/p&gt;

&lt;p&gt;Now I just need to add this to all of my existing CI workflows so that I can start to fix some of the issues I can see on my &lt;a href="https://cpandashboard.com/DAVECROSS/"&gt;CPAN Dashboard&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/archiving-cpan-logs-in-github-actions-2hfd</id>
    <published>2021-01-04T14:49:51Z</published>
    <updated>2021-01-04T14:49:51Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
    <category term="githubactions"/>
    <category term="logs"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 093</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/03#pwc093" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given set of co-ordinates &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to count maximum points on a straight line when given co-ordinates plotted on 2-d plane.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given set of co-ordinates @N.
# Write a script to count maximum points 
# on a straight line when given co-ordinates 
# plotted on 2-d plane.
##
sub triangle_area{
    my($i, $j, $k) = @_;
    return ($i-&gt;[0] * ($j-&gt;[1] - $k-&gt;[1])) 
         + ($j-&gt;[0] * ($k-&gt;[1] - $i-&gt;[1]))
         + ($k-&gt;[0] * ($i-&gt;[1] - $j-&gt;[1]));
}

sub collinear_points{
    my(@points) = @_;
    my @collinear;
    for my $i (@points){
        for my $j (@points){
            for my $k (@points){
                if(triangle_area($i, $j, $k) == 0){
                    my $i_string = join(",", @{$i});
                    my $j_string = join(",", @{$j});
                    my $k_string = join(",", @{$k});
                    if(($i_string ne $j_string) &amp;&amp; ($i_string ne $k_string) &amp;&amp; ($j_string ne $k_string)){
                        my $has_i = grep { $i_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $i if !$has_i;
                        my $has_j = grep { $j_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $j if !$has_j;
                        my $has_k = grep { $k_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $k if !$has_k;
                    }
                }
            }
        }
    }
    return @collinear;
}

MAIN:{
    my @N;
    @N = ([5,3], [1,1], [2,2], [3,1], [1,3]);
    my @collinear = collinear_points(@N);
    print "There are a maximum of " . @collinear . " collinear points.\n"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
There are a maximum of 3 collinear points.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Keep in mind that any two points determine a line. Therefore to consider all possible non-trivial lines we need to review all triples of points. This method will work in the most general case when the starting data may contain multiple lines with a larger number of points.&lt;/p&gt;
&lt;p&gt;In determining collinearity I calculate the area of a triangle using the triple of points. If the area is zero we know that all the points lay on the same line.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree containing only the numbers 0-9. Write a script to sum all possible paths from root to leaf.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a binary tree containing 
# only the numbers 0-9.
# Write a script to sum all possible paths 
# from root to leaf.
##
use Graph;

sub travserse_sum{
    my($tree) = @_;
    my @paths = build_paths($tree);
    my $path_sum = 0;
    for my $path (@paths){
        $path_sum +=  unpack("%32C*", pack("C*", @{$path})); 
    }
    return $path_sum;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         push @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(2, 3);
    $Tree-&gt;add_edge(2, 4);
    print travserse_sum($Tree) . "\n";
    
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(3, 5);
    $Tree-&gt;add_edge(3, 6);
    print travserse_sum($Tree) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
13
26
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is straightforward enough, at a high level anyway: (1) Get all paths and then (2) sum all the nodes on the paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am always happy to have a chance to use the &lt;a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod"&gt;Graph module&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;The Graph module has a bunch of nice algorithms implemented but what we want here is not a &lt;em&gt;shortest path&lt;/em&gt; but &lt;em&gt;all paths&lt;/em&gt;. The Graph module doesn’t have anything for us to use for that. Implementing a recursive &lt;em&gt;Depth First Search&lt;/em&gt; and collecting all the paths is not such a hard thing to do, but in the &lt;strong&gt;Holiday Spirit&lt;/strong&gt; (i.e. laziness) I just re-used &lt;a href="https://www.perlmonks.org/?node_id=381608"&gt;Ikegami&lt;/a&gt;’s code. See the References section.&lt;/li&gt;
&lt;li&gt;I first used the pack/unpack trick for summing array back in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/09"&gt;Challenge 007&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Collinear.html"&gt;Collinear Points&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/41646812/4705722"&gt;All Paths&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc093</id>
    <published>2021-01-03T16:37:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Bulk downloading all episodes of a podcast</title>
    <link href="http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html"/>
    <id>http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html</id>
    <updated>2021-01-03T14:51:24+00:00</updated>
    <category term="perl"/>
    <summary type="html">In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want MP3s on my hard disk (and/or vinyl on my record player). I want ...</summary>
    <content type="html">&lt;p&gt;In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want &lt;span class="caps"&gt;MP3&lt;/span&gt;s on my hard disk (and/or vinyl on my record player). I want access to my music when I'm offline (and I'm offline a lot) and without using a so-called smart phone (I prefer vintage &lt;span class="caps"&gt;USB&lt;/span&gt;-stick &lt;span class="caps"&gt;MP3 &lt;/span&gt;players). My partner thinks the same (I guess 25+ years of my propaganda had some influence..).&lt;/p&gt;

&lt;p&gt;But "modern" sites make it rather hard to actually download content (even if it's free). They offer links to a myriad of apps, but often no download button. At least a lot of podcasts still provide an &lt;span class="caps"&gt;RSS &lt;/span&gt;feed. So when my partner cannot download a newly discovered podcast, she asked me if I can do it for her. Which I'm of course happy to do, and which is often done with a few lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use strict;
use warnings;
use 5.030;

use XML::Feed;
use URI;
use String::Ident;

my $feed = XML::Feed-&amp;gt;parse( URI-&amp;gt;new( $ARGV[0] ) );

for my $entry ( $feed-&amp;gt;entries ) {
    my $date = $entry-&amp;gt;issued;
    $date =~ s/T.*$//;
    my $filename = join( '-', $date, String::Ident-&amp;gt;cleanup( $entry-&amp;gt;title ) ) . '.mp3';
    next if -f $filename;
    say &amp;quot;wget -O $filename &amp;quot; . $entry-&amp;gt;enclosure-&amp;gt;url;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;a href="https://metacpan.org/pod/XML::Feed"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;::Feed&lt;/a&gt; to fetch and parse the &lt;span class="caps"&gt;RSS &lt;/span&gt;feed, passing in the &lt;span class="caps"&gt;URL &lt;/span&gt;as the first command line argument. I create a nice filename based on the date the podcast was &lt;code&gt;issued&lt;/code&gt; (removing the time-part) and a &lt;code&gt;cleanup()ed&lt;/code&gt; version of the title. (&lt;a href="https://metacpan.org/pod/String::Ident"&gt;String::Ident&lt;/a&gt; is a nice little helper module Jozef created for a project we were working on some time ago).&lt;/p&gt;

&lt;p&gt;If the filename already exists in the current directory, we skip, because we don't need to download it again.&lt;/p&gt;

&lt;p&gt;Then I output a &lt;a href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; command to download the &lt;span class="caps"&gt;URL &lt;/span&gt;(provided by &lt;code&gt;$entry-&amp;gt;enclosure-&amp;gt;url&lt;/code&gt;) and save it under the nice filename.&lt;/p&gt;

&lt;p&gt;Why do I not download the file directly in the script?&lt;/p&gt;

&lt;p&gt;I just find it easier to use an external tool, especially as I like to pipe the output of this script into a file, so I can munge the file a bit. Eg, for this podcast, I did not download all 131 episodes, but only the 5 oldest and the 5 newest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/media/podcasts$ fetch_podcast.pl https://example.com/podcast.rss &amp;gt; all
~/media/podcasts$ head -n 5 all &amp;gt; test_it
~/media/podcasts$ tail -n 5 all &amp;gt;&amp;gt; test_it
~/media/podcasts$ bash test_it
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and easy!&lt;/p&gt;</content>
    <category term="automatization"/>
    <category term="~/bin"/>
  </entry>
  <entry>
  <title>Phishing Attack on CPAN Authors</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/phishing-attack-on-cpan-authors"/>
  <id>tag:news.perlfoundation.org,2021-01-03:/post/phishing-attack-on-cpan-authors</id>
  <published>2021-01-03T10:22:20</published>
  <updated>2021-01-03T10:22:20</updated>
  <summary>
  <![CDATA[
     We've been alerted to a phishing attack against CPAN authors. The image below shows what it looks like. One way you can protect yourself against such attacks is by configuring a secret email address for your PAUSE account. This address will be used for all contacts from the PAUSE/CPAN system, but will never be shared publicly. If you've clicked on the link and entered any credentials, you should change the 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/8a2ca0dee5b0d02ec36b0f75a5e9542b9aa4dcf5/CPAN-phishing-012021.jpg" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>We've been alerted to a phishing attack against CPAN authors. The image below shows what it looks like.</p>

<p><img src="_ra-rel-mnt_/simplecas/fetch_content/8a2ca0dee5b0d02ec36b0f75a5e9542b9aa4dcf5/CPAN-phishing-012021.jpg" style="max-width:100%; max-height: 700px" /></p>

<p>One way you can protect yourself against such attacks is by <a href="https://pause.cpan.org/pause/authenquery?ACTION=edit_cred">configuring a secret email address for your PAUSE account</a>. This address will be used for all contacts from the PAUSE/CPAN system, but will never be shared publicly.</p>

<p>If you've clicked on the link and entered any credentials, you should change the relevant password immediately. If you entered your PAUSE credentials, please check your recent uploads for any suspicious new packages. The easiest way to check this is through your MetaCPAN author releases page, like <a href="https://metacpan.org/author/DROLSKY/releases">metacpan.org/author/DROLSKY/releases</a>. If you find something suspicious, please download a copy, delete it from PAUSE, and alert <a href="mailto:modules@perl.org">modules@perl.org</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 1</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" type="text/html"/>
    <content type="html">&lt;p&gt;Back in mid-November 2020, I noticed that &lt;a href="https://hackage.haskell.org/"&gt;Hackage&lt;/a&gt; (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. &lt;/p&gt;
&lt;p&gt;Since the &lt;a href="https://hackage.haskell.org/api"&gt;Hackage API&lt;/a&gt; does not provide a way to list releases (uploads), I had to &lt;a href="https://metacpan.org/pod/http-tiny-plugin-every"&gt;download&lt;/a&gt; the &lt;a href="http://hackage.haskell.org/packages/recent"&gt;recent additions&lt;/a&gt; page periodically, &lt;a href="https://github.com/sharyanto/scripts/blob/master/parse-hackage-page"&gt;parse&lt;/a&gt; each page, and &lt;a href="https://metacpan.org/pod/combine-overlap"&gt;merge&lt;/a&gt; the results into a single large list. Because I have just collected the recent additions page since mid-November, I&amp;#039;m looking at December 2020 period. &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% http-tiny-plugin-every --every 3h http://hackage.haskell.org/packages/recent --dir . --trace
% for f in 2*.log; do parse-hackage-page &amp;quot;$f&amp;quot; --format ltsv &amp;gt; &amp;quot;$$.ltsv&amp;quot;; done
% combine-overlap 2*.ltsv &amp;gt; hackage_release_202012.ltsv
&lt;/pre&gt;
&lt;p&gt; For CPAN, the MetaCPAN API lets us query various things in many ways so the simple task of listing recent releases is not a problem at all. I&amp;#039;m using a &lt;a href="https://metacpan.org/pod/list-metacpan-releases"&gt;CLI&lt;/a&gt; to do this: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% list-metacpan-releases --from-date 2020-12-01 --to-date 2020-12-31 --json &amp;gt; cpan_release_202012.json
&lt;/pre&gt;
&lt;p&gt; With this two pieces of data, I just need to perform some SQL (again, using &lt;a href="https://metacpan.org/pod/fsql"&gt;CLI&lt;/a&gt; for this) to get what I want. &lt;/p&gt;
&lt;p&gt;So for December 2020, there are 957 releases: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
957
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 629: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
629
&lt;/pre&gt;
&lt;p&gt; As for number of authors who did releases in this period, the two are more similar: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
207
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 191: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
191
&lt;/pre&gt;
&lt;p&gt; So this does confirm my guess that the upload activity for both repositories are currently in the same order of magnitude, but does not confirm the suspicion that Hackage is more active than CPAN, at least in December 2020. I plan to do a follow up next year in January after I collected all 2021 data.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Back in mid-November 2020, I noticed that Hackage (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. Since the Hackage API does not provide a way to list releases (uploads), I had to download the recent additions page periodically, parse each page, and merge the results into … <a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 1</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1933</id>
    <published>2021-01-03T04:40:59Z</published>
    <updated>2021-01-03T04:40:59Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5796870623252404647</id>
    <published>2021-01-02T15:17:00.002+01:00</published>
    <updated>2021-01-02T15:17:25.799+01:00</updated>
    <title type="text">10 best perl distributions created at 2020 (metacpan rating)</title>
    <content type="html">10 best perl distributions created at 2020 (metacpan rating) &lt;p&gt;This list contains distributions created at 2020&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Zydeco"&gt;Zydeco&lt;/a&gt; (+20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Code::ART"&gt;Code::ART&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Devel::Wherefore"&gt;Devel::Wherefore&lt;/a&gt; (+6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Guacamole"&gt;Guacamole&lt;/a&gt; (+6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/SQL::Bind"&gt;SQL::Bind&lt;/a&gt; (+6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/MLPerl"&gt;MLPerl&lt;/a&gt; (+5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Sub::MultiMethod"&gt;Sub::MultiMethod&lt;/a&gt; (+5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/TOML::Tiny"&gt;TOML::Tiny&lt;/a&gt; (+5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Pepper"&gt;Pepper&lt;/a&gt; (+4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/RxPerl"&gt;RxPerl&lt;/a&gt; (+4)&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5796870623252404647/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/10-best-perl-distributions-created-at.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5796870623252404647"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5796870623252404647"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/10-best-perl-distributions-created-at.html" title="10 best perl distributions created at 2020 (metacpan rating)"/>
    <author>
      <name>prz</name>
      <uri>http://www.blogger.com/profile/17989445983340548566</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8719786875290079951</id>
    <published>2021-01-02T15:08:00.000+01:00</published>
    <updated>2021-01-02T15:08:40.044+01:00</updated>
    <title type="text">metacpan most voted distributions in 2020</title>
    <content type="html">&lt;p&gt;This is the metacpan most voted distributions in 2020&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+42)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Zydeco'&gt;Zydeco&lt;/a&gt; (+20)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/perl'&gt;perl&lt;/a&gt; (+17)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Type::Tiny'&gt;Type::Tiny&lt;/a&gt; (+15)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Future::AsyncAwait'&gt;Future::AsyncAwait&lt;/a&gt; (+13)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Path::Tiny'&gt;Path::Tiny&lt;/a&gt; (+12)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Plack'&gt;Plack&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Regexp::Debugger'&gt;Regexp::Debugger&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Rex'&gt;Rex&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Role::Tiny'&gt;Role::Tiny&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Yancy'&gt;Yancy&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Code::ART'&gt;Code::ART&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Dancer2'&gt;Dancer2&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Log::Log4perl'&gt;Log::Log4perl&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/MCE'&gt;MCE&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Minion'&gt;Minion&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Moose'&gt;Moose&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Sereal'&gt;Sereal&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Template::Toolkit'&gt;Template::Toolkit&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Text::CSV_XS'&gt;Text::CSV_XS&lt;/a&gt; (+8)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This is the metacpan most voted distributions in 2020 group by month&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2020-01&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+9)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Future::AsyncAwait'&gt;Future::AsyncAwait&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-02&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Zydeco'&gt;Zydeco&lt;/a&gt; (+8)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Sub::MultiMethod'&gt;Sub::MultiMethod&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-03&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Zydeco'&gt;Zydeco&lt;/a&gt; (+6)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Devel::Wherefore'&gt;Devel::Wherefore&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-04&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+5)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Yancy'&gt;Yancy&lt;/a&gt; (+5)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-05&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/App::lcpan'&gt;App::lcpan&lt;/a&gt; (+5)&lt;br/&gt;&lt;a href='https://metacpan.org/module/JSON'&gt;JSON&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-06&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Role::Tiny'&gt;Role::Tiny&lt;/a&gt; (+9)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Code::ART'&gt;Code::ART&lt;/a&gt; (+7)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-07&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Future::AsyncAwait'&gt;Future::AsyncAwait&lt;/a&gt; (+3)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-08&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Perl::Tidy'&gt;Perl::Tidy&lt;/a&gt; (+3)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Regexp::Common::Markdown'&gt;Regexp::Common::Markdown&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-09&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+4)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Pepper'&gt;Pepper&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-10&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Ask'&gt;Ask&lt;/a&gt; (+4)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Mojo::PDF'&gt;Mojo::PDF&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-11&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Plack'&gt;Plack&lt;/a&gt; (+4)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Log::Log4perl'&gt;Log::Log4perl&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-12&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+3)&lt;br/&gt;&lt;a href='https://metacpan.org/module/XS::Tutorial'&gt;XS::Tutorial&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8719786875290079951/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/metacpan-most-voted-distributions-in.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8719786875290079951"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8719786875290079951"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/metacpan-most-voted-distributions-in.html" title="metacpan most voted distributions in 2020"/>
    <author>
      <name>prz</name>
      <uri>http://www.blogger.com/profile/17989445983340548566</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Frohes Neues Jahr 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das in vielerlei Hinsicht ungewöhnliche Jahr 2020 ist vorbei. Wir wünschen allen treuen und neuen Leser\*innen unseres Blogs ein frohes neues Jahr. Wir hoffen, dass Sie gut durch das vergangene Jahr gekommen sind und dass 2021 besser wird.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr</id>
    <published>2021-01-01T10:00:00Z</published>
    <updated>2021-01-01T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/AWS-ARN-0.001">AWS-ARN</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>0.001</td>
<td>Dumb module to parse and generate ARNs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-0.09-TRIAL">AnyPAN</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.09</td>
<td>CPAN Mirror and DarkPAN merging toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-Storage-S3-0.05-TRIAL">AnyPAN-Storage-S3</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.05</td>
<td>AnyPAN storage plugin for Amazon S3</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-ImageMagickUtils-0.001">App-ImageMagickUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to ImageMagick</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-MetaCPANUtils-0.001">App-MetaCPANUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-OverlapUtils-0.001">App-OverlapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Command-line utilities related to overlapping lines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/App-Toolforge-MixNMatch-0.01">App-Toolforge-MixNMatch</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool app.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-jupiter-1">App-jupiter</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>an app that serves a river of news as a static page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Array-OverlapFinder-0.001">Array-OverlapFinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Find/remove overlapping items between two ordered sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OKLAS/Async-Template-0.12">Async-Template</a></td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>0.12</td>
<td>Async Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/EXODIST/Atomic-Pipe-0.001">Atomic-Pipe</a></td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>0.001</td>
<td>Send atomic messages from multiple writers across a POSIX pipe.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-DBI-0.000_01">AtteanX-Store-DBI</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>Database quad-store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Badge-Depot-Plugin-Githubactions-0.0100">Badge-Depot-Plugin-Githubactions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Github Actions plugin for Badge::Depot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-Meta-diff-0.001">CLI-Meta-diff</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Metadata for diff CLI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-MetaUtil-Getopt-Long-0.001">CLI-MetaUtil-Getopt-Long</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Routine related to Getopt::Long</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/CPANfile-Parse-PPI-0.01">CPANfile-Parse-PPI</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Parse cpanfiles with PPI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Data-CompactReadonly-0.0.1">Data-CompactReadonly</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v0.0.1</td>
<td>a description of CompactReadonly data format, version 0.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMC/Devel-WatchVars-v1.0.0">Devel-WatchVars</a></td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>v1.0.0</td>
<td>trace access to scalar variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-BME280-0.01">Device-Chip-BME280</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for BME280</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Dist-Mgr-1.00">Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Distribution development cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-Author-CSSON-GithubActions-0.0100">Dist-Zilla-Plugin-Author-CSSON-GithubActions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Ease creation of common Github Actions workflows</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-CheckForUnwantedFiles-0.0100">Dist-Zilla-Plugin-CheckForUnwantedFiles</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Check for unwanted files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-PluginBundle-Author-GTERMARS-0.01">Dist-Zilla-PluginBundle-Author-GTERMARS</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Plugin Bundle for distributions built by GTERMARS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/Finance-Crypto-Exchange-Kraken-0.001">Finance-Crypto-Exchange-Kraken</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Perl implementation of the Kraken REST API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MARKWIN/Finance-IG-0.01">Finance-IG</a></td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>0.01</td>
<td>– Module for doing useful stuff with IG Markets REST API.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Geo-Compass-Direction-0.01">Geo-Compass-Direction</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Convert a compass heading degree into human readable direction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-0.06">HEAT-Crypto</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.06</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-X25519-0.04">HEAT-Crypto-X25519</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.04</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenChart-0.001">Health-BladderDiary-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/JavaScript-Const-Exporter-v0.1.0">JavaScript-Const-Exporter</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Convert exported Perl constants to JavaScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/LocalConf-Parser-0.01">LocalConf-Parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Locale-Places-0.01">Locale-Places</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Translate places using <a href="http://download.geonames.org/" rel="nofollow">http://download.geonames.org/</a></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log-Log4perl-Appender-Redis-0.01">Log-Log4perl-Appender-Redis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseBaheForDump-0.001">Log-ger-UseBaheForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Bahe to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseJSONForDump-0.003">Log-ger-UseJSONForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Use JSON::MaybeXS to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseYAMLForDump-0.001">Log-ger-UseYAMLForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use YAML::PP to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log4perlAppenderRedis-0.01">Log4perlAppenderRedis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VVELOX/LogicMonitor-REST-Signature-0.0.1">LogicMonitor-REST-Signature</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>Builds LMv1 token header info for Logicmonitor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TURNERJW/LyricFinder-1.00">LyricFinder</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>Fetch song lyrics from several internet lyric sites.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TRIZEN/Math-Sidef-0.01">Math-Sidef</a></td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>0.01</td>
<td>Perl interface to Sidef's mathematical library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Mo-utils-0.01">Mo-utils</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Mo utilities.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Module-Installed-1.00">Module-Installed</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Check whether a module, or a file's list of includes are installed.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Mojolicious-Plugin-Parametry-1.001001">Mojolicious-Plugin-Parametry</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Mojolicious plugin providing param helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAMI/MsOffice-Word-Template-1.0">MsOffice-Word-Template</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1.0</td>
<td>treat a Word document as Template Toolkit document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-Chord-Progression-0.0001">Music-Chord-Progression</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0001</td>
<td>Create network transition chord progressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Inversion-0.0100">Music-MelodicDevice-Inversion</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply melodic inversion to a series of notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Ornamentation-0.0100">Music-MelodicDevice-Ornamentation</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Chromatic and diatonic musical ornamentation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Transposition-0.0100">Music-MelodicDevice-Transposition</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply chromatic and diatonic transposition to notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Nano-0.01">Nano</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Minimalist Object Persistence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Net-Cloudflare-DNS-0.01">Net-Cloudflare-DNS</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>DNS API for Cloudflare API v4</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-TokenExchange-0.001">Net-OAuth2Server-TokenExchange</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A Token Exchange extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OETIKER/PDF-QRCode-0.1.0">PDF-QRCode</a></td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>v0.1.0</td>
<td>Add QRCode method to PDF::API2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LEONT/PerlIO-bom-0.001">PerlIO-bom</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>Automatic BOM handling in Unicode IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAVECROSS/Plack-App-DirectoryIndex-0.0.1">Plack-App-DirectoryIndex</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>Serve static files from document root with an index file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Plack-Middleware-Text-Minify-v0.1.0">Plack-Middleware-Text-Minify</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>minify text responses on the fly</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueCurses-0.0.1">RogueCurses</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.0.1</td>
<td>game system for RPG/Adventure games using Curses.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueQuest-0.1.1">RogueQuest</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>game system for RPG/Adventure games using SDL for graphics.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/SMS-Send-Adapter-Node-Red-0.04">SMS-Send-Adapter-Node-Red</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.04</td>
<td>SMS::Send Adapter to Node-RED JSON HTTP request</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/SQL-PatchDAG-0.100">SQL-PatchDAG</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.100</td>
<td>A minimal DB schema patch manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/STEVEB-Dist-Mgr-0.01">STEVEB-Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>My distribution release cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-AudioTag-0.0102">Statocles-Plugin-AudioTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0102</td>
<td>Change mp3 anchors to audio elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Syntax-Check-1.00">Syntax-Check</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Wraps 'perl -c' so it works even if modules are unavailable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMCOP/Sys-Linux-KernelVersion-0.100">Sys-Linux-KernelVersion</a></td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>0.100</td>
<td>Gives tools for checking the current running linux kernel version</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Test-Mojo-Role-DOMinizer-1.001001">Test-Mojo-Role-DOMinizer</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Test::Mojo role to examine DOM mid test chain</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Text-Minify-XS-v0.1.0">Text-Minify-XS</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Simple text minification</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Diff-0.01">Toolforge-MixNMatch-Diff</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool diff.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Object-0.01">Toolforge-MixNMatch-Object</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool objects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Print-0.01">Toolforge-MixNMatch-Print</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool object print routines.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Struct-0.01">Toolforge-MixNMatch-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool structures.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GETTY/WWW-Picnic-0.001">WWW-Picnic</a></td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>0.001</td>
<td>Library to access Picnic Supermarket API
</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-0.01">Wikibase-Datatype</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-Struct-0.01">Wikibase-Datatype-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types struct conversions.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Word-Rhymes-0.01">Word-Rhymes</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Takes a word and fetches rhyming matches from RhymeZone.com</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ColorName-Any-0.002">WordList-ColorName-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Wordlist from any Graphics::ColorNames::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Json-0.01">Zing-Encoder-Json</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JSON Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Jwt-0.01">Zing-Encoder-Jwt</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JWT Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Mysql-0.01">Zing-Store-Mysql</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Mysql Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Pg-0.01">Zing-Store-Pg</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Postgres Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Redis-0.01">Zing-Store-Redis</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Redis Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Sqlite-0.01">Zing-Store-Sqlite</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Sqlite Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Zang-0.01">Zing-Zang</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Callback-based Zing Processes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/config-parser-0.01">config-parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/crazy-fast-media-scan-0.001-TRIAL">crazy-fast-media-scan</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>methods to identify files using random sampling</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>11</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>8</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>6</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract AWS-ARN JWRIGHT 0.001 Dumb module to parse and generate ARNs AnyPAN KARUPA 0.09 CPAN Mirror and DarkPAN merging toolkit AnyPAN-Storage-S3 KARUPA 0.05 AnyPAN storage plugin for Amazon S3 App-ImageMagickUtils PERLANCAR 0.001 Utilities related to ImageMagick App-MetaCPANUtils PERLANCAR 0.001 CLI utilities related to MetaCPAN App-OverlapUtils PERLANCAR 0.001 Command-line utilities related to overlapping … <a href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1931</id>
    <published>2021-01-01T00:32:41Z</published>
    <updated>2021-01-01T00:32:41Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Programs to Compute Trig Functions in Python, JavaScript, &amp; Perl (with Maclaurin Series)</title>
    <link rel="alternate" href="https://dev.to/xtrp/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurin-series-4ce9" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;Originally published &lt;a href="https://xtrp.io/blog/2020/12/31/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/"&gt;here at xtrp.io&lt;/a&gt;, my blog about computer science and just about anything programming.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever wondered how your computer calculates certain mathematical functions, like division, or trigonometric functions like sine or cosine? Well, for some of these mathematical functions, there exist useful formulas to calculate very accurate results pretty easily. For sine and cosine, one commonly used formula looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2C54cIXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/sinseries.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2C54cIXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/sinseries.jpg" alt="Maclaurin Series of sin(x)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for cosine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-WfBO9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/cosseries.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-WfBO9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/cosseries.jpg" alt="Maclaurin Series of cos(x)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the input of each function is in radians, not degrees.&lt;/p&gt;

&lt;p&gt;The series used in both formulas is called a &lt;a href="https://mathworld.wolfram.com/TaylorSeries.html"&gt;Maclaurin series&lt;/a&gt; (a type of &lt;a href="https://mathworld.wolfram.com/MaclaurinSeries.html"&gt;Taylor series&lt;/a&gt;), and can be derived from the sine and cosine functions with a series expansion. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-programs-work" class="anchor"&gt;
  &lt;/a&gt;
  How the Programs Work
&lt;/h2&gt;

&lt;p&gt;I've written programs to implement these two computations in three major scripting languages: Python, JavaScript, and Perl. These programs do not include any built-in trig functions or other utilities except the use of the in-built π constant in some cases. All code is CC0 licensed.&lt;/p&gt;

&lt;p&gt;The approach I used creates a generalized function called &lt;code&gt;computeSeries&lt;/code&gt; which takes in x as the number to calculate the sine or cosine of, a starting number in the series (x for sine and 1 for cosine), and the exponent and factorial base in the first term of the series (3 for sine and 2 for cosine).&lt;/p&gt;

&lt;p&gt;In calculating each series, I found that only about 10 terms in the series were needed to get a decently accurate result. &lt;/p&gt;

&lt;p&gt;The programs additionally include utility functions for sine and cosine functions in degrees. The end of each program also includes a few tests of each function, which work as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-python" class="anchor"&gt;
  &lt;/a&gt;
  In Python
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://gist.github.com/xtrp/2a5f0d82cff8c14867dabd22e0209933"&gt;view the below code as a GitHub Gist&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;

&lt;span class="c1"&gt;# round a number (x) to nearest 10 digits
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get the factorial of a number (x)
# factorial(x) is the product of every number from 1 to N inclusive
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# n is the result
&lt;/span&gt;    &lt;span class="c1"&gt;# multiply n by every number from 1 to x inclusive
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="s"&gt;""" get the result of the cos and sin formulas
    where the functions are sin(x radians) or cos(x radians),
    n is the start value (n = x for sin, n = 1 for cos), and
    i_start is the exponent and factorial base in the first term """&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# iterations is twice the amount of terms to use
&lt;/span&gt;    &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# i increases by 2 each term
&lt;/span&gt;        &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# alternates between addition and subtraction each term
&lt;/span&gt;        &lt;span class="n"&gt;next_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# each term is (x^i) / i!
&lt;/span&gt;        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;next_term&lt;/span&gt; &lt;span class="c1"&gt;# add or subtract from final result
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="c1"&gt;# get sin of x radians
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# get cos of x radians
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# get sin of x degrees
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get cos of x degrees
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# test the functions
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.78801
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.615661
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  In JavaScript
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://gist.github.com/xtrp/a348743383cc80121ab9964ef1f7f1ac"&gt;view the below code as a GitHub Gist&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// round a number (x) to nearest 10 digits&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// get the factorial of a number (x)&lt;/span&gt;
&lt;span class="c1"&gt;// factorial(x) is the product of every number from 1 to x inclusive&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// n is the result&lt;/span&gt;
    &lt;span class="c1"&gt;// multiply n by every number from 1 to x inclusive&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* get the result of the cos and sin formulas
   where the functions are sin(x radians) or cos(x radians),
   n is the start value (x for sin, 1 for cos), and i_start
   is the exponent and factorial base in the first term */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computeSeries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// iterations is twice the amount of terms to use&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;i_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// alternates between addition and subtraction each iteration&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;next_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// each term is (x^i) / i!&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;next_term&lt;/span&gt; &lt;span class="c1"&gt;// add or subtract from final result&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// i increases by 2 each term&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// get sin of x radians&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// get cos of x radians&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// get sin of x degrees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sinDeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// get cos of x degrees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cosDeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// test the functions&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.7071&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.78801&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.7071&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.615661&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-perl" class="anchor"&gt;
  &lt;/a&gt;
  In Perl
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://gist.github.com/xtrp/d93263899c7107f6a60517a084bf5388"&gt;view the below code as a GitHub Gist&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14159265358979323&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# get the factorial of a number (x)&lt;/span&gt;
&lt;span class="c1"&gt;# factorial(x) is the product of every number from 1 to N inclusive&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# n is the result&lt;/span&gt;
    &lt;span class="c1"&gt;# multiply n by every number from 1 to x inclusive&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@nums_to_multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@nums_to_multiply&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;=begin
get the result of the cos and sin formulas
where the functions are sin(x radians) or cos(x radians),
n is the start value (n = x for sin, n = 1 for cos), and
i_start is the exponent and factorial base in the first term
=cut&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;computeSeries&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$ITERATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# iterations is twice the amount of terms to use&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$i_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$multiplier&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# alternates between addition and subtraction each term&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;$x**$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sr"&gt;/ factorial($i)); # add or subtract ((x^i) /&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;final&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;
        &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# i increases by 2 each term&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# get sin of x radians&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;mySin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# get cos of x radians&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;myCos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# get sin of x degrees&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;sinDeg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;mySin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# get cos of x degrees&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;cosDeg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;myCos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# test the functions&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.78801&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.615661&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this helps in understanding how computers and languages would go about calculating trigonometric functions like sine and cosine. If you'd like to read more about how exactly mathematical formulas used to calculate the trig functions are derived, I would recommend taking a look at &lt;a href="https://www.khanacademy.org/math/old-ap-calculus-bc/bc-series"&gt;the videos on Taylor and Maclaurin series&lt;/a&gt; by Khan Academy.&lt;/p&gt;

&lt;p&gt;These programs are all licensed under the CC0 license, so feel free to use any of the code as you wish, without attribution.&lt;/p&gt;

&lt;p&gt;Thanks for scrolling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This post is originally from &lt;a href="https://xtrp.io/"&gt;my blog at xtrp.io&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;— Gabriel Romualdo, December 31, 2020&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gabriel Romualdo</name>
    </author>
    <id>https://dev.to/xtrp/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurin-series-4ce9</id>
    <published>2020-12-31T21:23:17Z</published>
    <updated>2020-12-31T21:23:17Z</updated>
    <category term="python"/>
    <category term="javascript"/>
    <category term="perl"/>
    <category term="math"/>
  </entry>
  <entry>
  <title>Coding in Perl? What support do you need?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/newperluserssurvey"/>
  <id>tag:news.perlfoundation.org,2020-12-31:/post/newperluserssurvey</id>
  <published>2020-12-31T12:16:46</published>
  <updated>2020-12-31T12:16:46</updated>
  <summary>
  <![CDATA[
     Learning Perl programming is a rewarding experience. But equally tough without the right support. What would be useful to you as part of your learning and development?
Take part in our survey.
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Learning Perl programming is a rewarding experience. But equally tough without the right support. What would be useful to you as part of your learning and development?</p>

<p><a href="https://www.surveymonkey.com/r/7YCL7JZ"><img src="_ra-rel-mnt_/simplecas/fetch_content/496f7560e08fe40ef1b2d427f1920adb7e48886f/Take survey.jpg" style="max-width:100%;" /></a></p>

<p>Examples of how you might need support include:</p>

<ul>
<li><p>Developers moving into Perl needing to bounce around ideas and code snippets in order to translate the concepts they have learnt in other languages into Perl.</p></li>
<li><p>Complete novices who have only just entered the programming world and have chosen Perl as their first dip into the water, looking for advice on where to start.</p></li>
</ul>

<p>Without encouragement, guidance, even mentorship, we realise newcomers could quickly lose their enthusiasm and motivation for Perl. We know that support levels across the community vary and that it might not always be easy for newcomers to get help. We want to learn from your experiences and understand your needs so we can help fill the gaps.</p>

<p>A primary reason for this, is that so often Perl is denigrated by those who do not realise just how crucial it is. Maybe you are new to the team and have been given the ‘pile of Perl to fix’? So often we hear of new Perl developers being given the ‘messy’ jobs on legacy systems whilst the experienced developers go off to work on new ‘exciting’ projects.</p>

<p>But think about this. If we switched Perl off today, there would be a problem. A huge problem! We know that Perl is the glue that holds a lot of the IT world together. The Perl Foundation wants to support the community to make sure that the IT world doesn’t fall apart and supporting people learning Perl is a big element of that.</p>

<p>We have developed a survey that needs just a few minutes of your time, to tell us what you would like, or need, to support your move into, or progress within, the Perl language.</p>

<p>The survey will run throughout January with the results announced at <a href="https://fosdem.org/2021/">FOSDEM</a>.</p>

<p>Please <a href="https://www.surveymonkey.com/r/7YCL7JZ">complete the survey</a> today! TPF really wants to know what you need so we can help you succeed in Perl and help protect the systems depending on this critical programming language.</p>

<p><a href="https://www.surveymonkey.com/r/7YCL7JZ"><img src="_ra-rel-mnt_/simplecas/fetch_content/496f7560e08fe40ef1b2d427f1920adb7e48886f/Take survey.jpg" style="max-width:100%;" /></a></p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Evaluate Perl project for new client - assessment</title>
  <summary type="html"><![CDATA[<p>
Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them
to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.
<p>
These were almost always old projects that needed some new feature added.
<p>
]]></summary>
  <updated>2020-12-30T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/evaluate-project"/>  <id>https://perlmaven.com/evaluate-project</id>
  <content type="html"><![CDATA[<p>
Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them
to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.
<p>
These were almost always old projects that needed some new feature added.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>CPAN-Updates November/Dezember 2020</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-29-cpan-update-november-dezember" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Auch in den letzten beiden Monaten dieses Jahres waren wir nicht ganz untätig – teilweise mit Hilfe anderer Perl-Programmierer\*innen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-29-cpan-update-november-dezember</id>
    <published>2020-12-29T10:00:00Z</published>
    <updated>2020-12-29T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Teaser: Gitlab und Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-28-gitlab-schulung" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Gitlab bietet viel Funktionalität, die für Perl-Projekte sinnvoll genutzt werden kann. Unsere Schulung soll am praktischen Beispiel einer kleinen CPAN-Distribution einen Einblick in die Möglichkeiten bieten.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-28-gitlab-schulung</id>
    <published>2020-12-28T10:00:00Z</published>
    <updated>2020-12-28T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Perl Core Development Fund</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl-core-development-fund"/>
  <id>tag:news.perlfoundation.org,2020-12-22:/post/perl-core-development-fund</id>
  <published>2020-12-22T21:15:27</published>
  <updated>2020-12-22T21:15:27</updated>
  <summary>
  <![CDATA[
     I am pleased to announce the launch of the Perl Core Development Fund. Perl 5 Core Maintenance Fund was launched in 2008 to support the development of the Perl programming language. Since then, we have awarded USD 670,000. With the version change of the language, we will close the Perl 5 Core Maintenance Fund and launch the Perl Core Development Fund. For those who would like to apply for grants, 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce the launch of the <a href="https://www.perlfoundation.org/perl-core-development-fund.html">Perl Core Development Fund</a>.</p>

<p><a href="https://www.perlfoundation.org/perl-5-core-maintenance-fund.html">Perl 5 Core Maintenance Fund</a> was launched in 2008 to support the development of the Perl programming language. Since then, we have awarded USD 670,000.</p>

<p>With the version change of the language, we will close the Perl 5 Core Maintenance Fund and launch the Perl Core Development Fund.</p>

<p>For those who would like to apply for grants, please take a look at the fund description.</p>

<p>Notable changes from the previous fund are:
- The fund is managed by the Grants Committee instead of the TPF Board.
- The Perl Steering Council is involved in the approval process.</p>

<p>I would like to thank those who provided valuable inputs in launching the fund, namely: the TPF Board members, Dave Mitchell, Tony Cook, Jason Crome and Matthias Bloch.</p>

<p>As always, thanks to our donors, both large and small, who support these funds.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Running CGI sccript as a Plack application with Plack::App::CGIBin</title>
  <summary type="html"><![CDATA[<p>
Good old <a href="https://metacpan.org/pod/CGI">CGI</a> scripts needed Apache server. this examples shows how to run them via
Plackup using <a href="https://metacpan.org/pod/Plack::App::CGIBin">Plack::App::CGIBin</a>
<p>
]]></summary>
  <updated>2020-12-20T16:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/plack-app-cgibin"/>  <id>https://perlmaven.com/plack-app-cgibin</id>
  <content type="html"><![CDATA[<p>
Good old <a href="https://metacpan.org/pod/CGI">CGI</a> scripts needed Apache server. this examples shows how to run them via
Plackup using <a href="https://metacpan.org/pod/Plack::App::CGIBin">Plack::App::CGIBin</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-6706364024855383118</id>
    <published>2020-12-04T17:40:00.006-08:00</published>
    <updated>2020-12-16T22:53:54.702-08:00</updated>
    <title type="text">rt.cpan.org will sunset on March 1st, 2021</title>
    <content type="html">&lt;p&gt;rt.cpan.org will be sunset on March 1st, 2021 due to low and declining use.&lt;/p&gt;&lt;p&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;Back when we started this service, it filled a need by providing a place for CPAN authors to track bug reports and feature requests. In recent years&amp;nbsp;&lt;/span&gt;&lt;a data-saferedirecturl="https://www.google.com/url?q=http://github.com&amp;amp;source=gmail&amp;amp;ust=1608051614409000&amp;amp;usg=AFQjCNHHBoyICGB-3KjXQ_B1HAHSPyhCIg" href="http://github.com/" rel="noreferrer" style="background-color: white; color: #1155cc; font-family: Arial, Helvetica, sans-serif;" target="_blank"&gt;github.com&lt;/a&gt;&lt;span face="Arial, Helvetica, sans-serif" style="background-color: white; color: #222222; font-size: small;"&gt;&amp;nbsp;and other sites have added issue tracking to their git repo hosting and many CPAN authors have migrated to these sites.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;If you are a CPAN author, there are several tools to help you migrate existing tickets:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;https://github.com/dagolden/zzz-rt-to-github&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;https://github.com/houseabsolute/RTx-ToGitHub&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;span face="Arial, Helvetica, sans-serif" style="color: #222222;"&gt;&lt;span style="background-color: white;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;See Dave Cross'&amp;nbsp;&lt;a href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/"&gt;Plan for CPAN Authors&lt;/a&gt;, which describes steps you may wish to take to transition to a new bug tracking system.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;p&gt;We're still finalizing the details, but the plan is to provide a static historical archive.&amp;nbsp;&lt;/p&gt;&lt;p&gt;This post will be updated as we figure things out.&lt;/p&gt;&lt;p&gt;Updated: 2020-12-13&lt;/p&gt;</content>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/6706364024855383118"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2020/12/rtcpanorg-sunset.html" title="rt.cpan.org will sunset on March 1st, 2021"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
  </entry>
  <entry>
    <title>Replacing CPAN RT</title>
    <link rel="alternate" href="https://perlhacks.com/2020/12/replacing-cpan-rt/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two weeks ago, we learned that the <a href="https://log.perl.org/2020/12/rtcpanorg-sunset.html">CPAN Request Tracker was closing down early next year</a>. I proposed <a href="https://perlhacks.com/2020/12/rt-action-plan-for-cpan-authors/">a plan that CPAN authors could follow</a> to ensure that their users can still find somewhere to report bugs in modules (and, perhaps more importantly, to see what bugs have already been reported in modules).</p>
<p>But that’s only part of the problem. In fact, it’s probably a minor part of the problem. If you’re an active CPAN author, then you probably already knew about the impending closure and had already made plans to deal with it. It’s likely that you had already moved your bug tracking to a new system. At the very least, you now know what the problem is and are considering the best way to deal with it before next March.</p>
<p>The far larger problem is the thousands of distributions that aren’t owned by active CPAN authors. What are we going to do about those?</p>
<p>How big is the problem? Well, the site <a href="https://cpan.rocks/">cpan.rocks</a> displays stats about CPAN. One of the panels on its front page shows a summary of the bugtracker information in CPAN distribution. You’ll see that 24,873 distributions (that’s 66% of them) have no bugtracker information included in their metadata. That’ll be for a number of reasons. Some of them will be distributions that haven’t been updated since alternative bugtrackers were supported by CPAN (originally, it was just assumed that everyone used the CPAN RT); some of them will be because the authors don’t know how to add the required metadata; and some of them (including most of my distributions) are missing it because the author just hasn’t got round to adding it yet. There will, of course, be many more reasons.</p>
<p>Some people will have read the recent news and will be galvanised into doing something about it (I fall firmly into that category) but others (and I’d suggest that it’s a large majority) either won’t hear about the change or won’t care about it. And why should they care? They were generous enough to donate some of their code to CPAN at some point. They don’t have any obligation at all to carry on maintaining it after they’ve lost interest in whatever project led to them writing that software.</p>
<p>Take, for example, <a href="https://metacpan.org/release/Mail-Alias">Mail-Alias</a>. That was released by someone called Tom Zeltwanger twenty years ago. He released three versions over a period of two months and then stopped. Who knows why. When he last updated the module, the CPAN search engine didn’t support alternative bugtrackers, so he never considered adding one. And that meant that the CPAN page for his module linked to the default bugtracker set up for the distribution on the CPAN RT. In the last fifteen years, <a href="https://rt.cpan.org/Public/Dist/Display.html?Name=Mail-Alias">four bugs have been reported</a> against that module. But as Tom has moved on, nothing has been done about any of them. There are a lot of modules on CPAN in a similar situation.</p>
<p>But that leaves <a href="https://metacpan.org/">MetaCPAN</a> (the current CPAN search engine) with a problem. Where does it send people who want to report a bug against an inactive module?</p>
<p>You might think that it doesn’t matter. But I disagree. Maybe I think that Mail::Alias would be the perfect module for a project I’m working on. Even before I start using it, it’s useful to be able to browse any existing bugs to see how they might affect my use of the module. And if someone later comes along and wants to take over maintenance of the module, then it’s useful for them to see any bugs that have been raised during the hiatus when the module was unmaintained.</p>
<p>So, I’m a big fan of having a default bugtracker for CPAN modules – even for ones with inactive authors. Which leads us to the question of where should that be. And I have a suggestion.</p>
<p>A few years ago, Micheal Schwern and Olaf Alders set up <a href="https://github.com/gitpan">Gitpan</a>. It’s an organisation which has a Github repo for every distribution on CPAN. And those repos each have a commit for every release of those distributions. Here, for example, is <a href="https://github.com/gitpan/Mail-Alias">the repo for Mail-Alias</a> – and you can see the three commits for the three releases I mentioned above.</p>
<p>So I’d like to suggest Gitpan as a suitable place to use as a default bugtracker for CPAN distributions. There are a couple of problems:</p>
<ul>
<li>It looks like the auto-population of the commits stopped a few years ago. We’d need to work out how that works and catch up on the recent uploads.</li>
<li>None of the repos has the issue tracker turned on. But I expect that can be done with a relatively simple program that uses the GitHub API.</li>
</ul>
<p>Of course, we also have the problem that some people object to using GitHub since it was taken over by Microsoft. But that’s fine, they can just point their bugtracker metadata to their preferred system.</p>
<p>The problem with the CPAN RT was that it needed too much maintenance – and the Perl NOC team is really overworked. Any self-hosted alternative seems likely to have the same problem eventually. So I’m all in favour of using a third-party alternative. And if you’re taking that route, then it makes sense (to me, at least) to use a third-party system that already has all (ok, most) of the repos set up.</p>
<p>I haven’t spoken to Schwern or Olaf about this, so I don’t know if there was some major problem that would stop this plan from working. But I think it’s worth looking at.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Replacing CPAN RT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two weeks ago, we learned that the CPAN Request Tracker was closing down early next year. I proposed a plan that CPAN authors could follow to ensure that their users can still find somewhere to report bugs in modules (and, perhaps more importantly, to see what bugs have already been reported in modules). But that’s […]</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2020/12/replacing-cpan-rt/">Replacing CPAN RT</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2026</id>
    <published>2020-12-16T17:24:20Z</published>
    <updated>2020-12-16T17:24:20Z</updated>
    <category term="CPAN"/>
    <category term="bugtracker"/>
    <category term="cpan"/>
    <category term="cpan rt"/>
    <category term="github"/>
    <category term="gitpan"/>
  </entry>
</feed>
