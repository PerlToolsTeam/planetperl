<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-12-12T08:41:05Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>#594 - Advent Calendar</title>
    <link rel="alternate" href="https://perlweekly.com/archive/594.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The <strong>Advent Calendar</strong> celebration begins with the start of <strong>December</strong>. For all <strong>Perl</strong> fans, we have <a href="https://perladvent.org/2022">Perl Advent Calendar 2022</a>, thanks to the hard work of <strong>Olaf Alders</strong> and his team. I am sure you have checked out the amazing daily source of fun.</p>
<p>As of today, we have got through <strong>12 days</strong>.</p>
<p><strong>Do you have any favourite so far?</strong></p>
<p>Well I do have mine. To me the best part is the festive flavour in every article. I find it amusing and fun to read the story. I have contributed in the past but never got around to add the spice. I would blame the lack of background knowledge. This year's calendar started with <strong>Toby Inkster</strong> creation <a href="https://perladvent.org/2022/2022-12-01.html">Silent Mite</a>. What a cool way to start the calendar. If you look at closely all the contributions so far, you would notice a fresh air with lots of positive energy. One name stands out very prominently this year is <strong>Thibault DUPONCHELLE</strong>. His first contribution, <a href="https://perladvent.org/2022/2022-12-03.html">Santa is on GitHub</a> was a nice way to begin the journey. Then found a gem from a very dear friend of mine, <strong>Julien Fiegehenn</strong> talking about good old friend <strong>CGI</strong>. In fact, I have seen him presenting the subject <a href="https://perladvent.org/2022/2022-12-04.html">northpole.cgi</a> at the <strong>Perl Conference</strong>. I found another piece of work by <strong>Thibault DUPONCHELLE</strong> about <strong>MongoDB</strong>. I found the <strong>Day 5</strong> contribution <a href="https://perladvent.org/2022/2022-12-05.html">Catching dreams</a> is worth checking, if you want to explore <strong>MongoDB</strong>. If I am not mistaken then few years ago, <strong>Dave Cross</strong> shared his creation <a href="https://metacpan.org/pod/SVG::ChristmasTree">SVG::ChristmasTree</a> in <strong>Perl Advent Calendar</strong>. I was happy to see it part of this year calendar too, not directly though. <strong>Day 8</strong> started with <a href="https://perladvent.org/2022/2022-12-08.html">A Perlmas Tree</a> by <strong>Maximilian Lika</strong>. I found <strong>Day 11</strong> contribution very technical dealing with <strong>signal ALRM</strong>. Not an easy subject to discuss in the <strong>Advent Calendar</strong> in my humble opinion. Thanks <strong>OODLER</strong> for the fine contribution, <a href="https://perladvent.org/2022/2022-12-11.html">Wake up! Time to open presents!</a>.</p>
<p>If you are still looking for more <strong>Advent Calendar</strong> theme fun then I would highly recommend, <a href="https://theweeklychallenge.org/blog/advent-calendar-2022">The Weekly Challenge Advent Calendar</a>. Like in the past, this year also, it has contributions from <strong>Team PWC</strong> hand picked by me. I am sure you would find it interesting.</p>
<p>I am working on something that I would love to be part of this year <strong>Perl Advent Calendar</strong>. Hopefully it would be ready soon. Well I am also working on something similar for <strong>Raku Advent Calendar</strong>. It would be an achievement if I can get both done on time. Please wish me luck.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/594.html</id>
    <published>2022-12-12T10:00:00Z</published>
    <updated>2022-12-12T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Perl Weekly #594 - Advent Calendar</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-594-advent-calendar-31ao" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/594.html"&gt;Perl Weekly 594&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Advent Calendar&lt;/strong&gt; celebration begins with the start of &lt;strong&gt;December&lt;/strong&gt;. For all &lt;strong&gt;Perl&lt;/strong&gt; fans, we have &lt;a href="https://perladvent.org/2022"&gt;Perl Advent Calendar 2022&lt;/a&gt;, thanks to the hard work of &lt;strong&gt;Olaf Alders&lt;/strong&gt; and his team. I am sure you have checked out the amazing daily source of fun.&lt;/p&gt;

&lt;p&gt;As of today, we have got through &lt;strong&gt;12 days&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you have any favourite so far?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well I do have mine. To me the best part is the festive flavour in every article. I find it amusing and fun to read the story. I have contributed in the past but never got around to add the spice. I would blame the lack of background knowledge. This year's calendar started with &lt;strong&gt;Toby Inkster&lt;/strong&gt; creation &lt;a href="https://perladvent.org/2022/2022-12-01.html"&gt;Silent Mite&lt;/a&gt;. What a cool way to start the calendar. If you look at closely all the contributions so far, you would notice a fresh air with lots of positive energy. One name stands out very prominently this year is &lt;strong&gt;Thibault DUPONCHELLE&lt;/strong&gt;. His first contribution, &lt;a href="https://perladvent.org/2022/2022-12-03.html"&gt;Santa is on GitHub&lt;/a&gt; was a nice way to begin the journey. Then found a gem from a very dear friend of mine, &lt;strong&gt;Julien Fiegehenn&lt;/strong&gt; talking about good old friend &lt;strong&gt;CGI&lt;/strong&gt;. In fact, I have seen him presenting the subject &lt;a href="https://perladvent.org/2022/2022-12-04.html"&gt;northpole.cgi&lt;/a&gt; at the &lt;strong&gt;Perl Conference&lt;/strong&gt;. I found another piece of work by &lt;strong&gt;Thibault DUPONCHELLE&lt;/strong&gt; about &lt;strong&gt;MongoDB&lt;/strong&gt;. I found the &lt;strong&gt;Day 5&lt;/strong&gt; contribution &lt;a href="https://perladvent.org/2022/2022-12-05.html"&gt;Catching dreams&lt;/a&gt; is worth checking, if you want to explore &lt;strong&gt;MongoDB&lt;/strong&gt;. If I am not mistaken then few years ago, &lt;strong&gt;Dave Cross&lt;/strong&gt; shared his creation &lt;a href="https://metacpan.org/pod/SVG::ChristmasTree"&gt;SVG::ChristmasTree&lt;/a&gt; in &lt;strong&gt;Perl Advent Calendar&lt;/strong&gt;. I was happy to see it part of this year calendar too, not directly though. &lt;strong&gt;Day 8&lt;/strong&gt; started with &lt;a href="https://perladvent.org/2022/2022-12-08.html"&gt;A Perlmas Tree&lt;/a&gt; by &lt;strong&gt;Maximilian Lika&lt;/strong&gt;. I found &lt;strong&gt;Day 11&lt;/strong&gt; contribution very technical dealing with &lt;strong&gt;signal ALRM&lt;/strong&gt;. Not an easy subject to discuss in the &lt;strong&gt;Advent Calendar&lt;/strong&gt; in my humble opinion. Thanks &lt;strong&gt;OODLER&lt;/strong&gt; for the fine contribution, &lt;a href="https://perladvent.org/2022/2022-12-11.html"&gt;Wake up! Time to open presents!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are still looking for more &lt;strong&gt;Advent Calendar&lt;/strong&gt; theme fun then I would highly recommend, &lt;a href="https://theweeklychallenge.org/blog/advent-calendar-2022"&gt;The Weekly Challenge Advent Calendar&lt;/a&gt;. Like in the past, this year also, it has contributions from &lt;strong&gt;Team PWC&lt;/strong&gt; hand picked by me. I am sure you would find it interesting.&lt;/p&gt;

&lt;p&gt;I am working on something that I would love to be part of this year &lt;strong&gt;Perl Advent Calendar&lt;/strong&gt;. Hopefully it would be ready soon. Well I am also working on something similar for &lt;strong&gt;Raku Advent Calendar&lt;/strong&gt;. It would be an achievement if I can get both done on time. Please wish me luck.&lt;/p&gt;

&lt;p&gt;Enjoy rest of the newsletter.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2022/12/this-week-in-psc-090.html"&gt;This Week in PSC (090)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;More regular updates by PSC team,&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/aristotle/2022/12/goodbye-prepan.html"&gt;Good bye PrePAN&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;What a shame we lost PrePAN. It is too late to do anything, unfortunately.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/lichtkind/2022/12/kephra-goto-last-edit.html"&gt;Kephra: goto (last) edit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A very interesting topic about goto and very engaging article worth checking.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://gist.github.com/Ovid/7c22b76e37b7b7b7e7c01bfbe68709bb"&gt;RedBlack tree mockup in Corinna&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Yves Orton wanted to see a complex class implemented in Corinna, so I mocked up a red-black tree.&lt;/p&gt;




&lt;h2&gt;
  
  
  Web
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/05/aoc2022-03-misplaced-supplies/"&gt;AoC 2022/3 - Misplaced supplies and where to find them&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/06/aoc2022-04-poor-planning/"&gt;AoC 2022/4 - Poor planning&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/07/aoc2022-05-insane-crane/"&gt;AoC 2022/5 - Insane crane&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/10/aoc2022-06-canned-diversity/"&gt;AoC 2022/6 - Canned diversity&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/11/aoc2022-07-enospc/"&gt;AoC 2022/7 - ENOSPC - no space left on device&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Advent Calendar
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-01.html"&gt;Silent Mite&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-02.html"&gt;MooseX::Getopt saves Christmas&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-03.html"&gt;Santa is on GitHub&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-04.html"&gt;northpole.cgi&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-05.html"&gt;Catching dreams&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-06.html"&gt;St. Nick's Reindeers Need H2O!&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-07.html"&gt;The Sleigh odometer&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-08.html"&gt;A Perlmas Tree&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-09.html"&gt;What did Santa forget?&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-10.html"&gt;The Christmas Time Machine&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perladvent.org/2022/2022-12-11.html"&gt;Wake up! Time to open presents!&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-195"&gt;The Weekly Challenge - 195&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Special Integers" and "Most Frequent Even". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-194"&gt;RECAP - The Weekly Challenge - 194&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Digital Clock" and "Frequency Equalizer" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/advent-calendar-2022"&gt;The Weekly Challenge Advent Calendar 2022&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/digital-frequalizer.html"&gt;Digital Frequalizer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Lots of Raku magic shared as every week. Plenty to keep you busy. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/bruce_gray/2022/12/twc-194-bag-time.html"&gt;Bag Time!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I noticed sharp observations about the task. Good catch. Well done and keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://colincrain.com/2022/12/12/freq-out-man/"&gt;Freq Out, Man!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Deep task analysis is not to be missed. Highly recommended.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/08/pwc194-digital-clock/"&gt;PWC194 - Digital Clock&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Flavio makes the task simple to follow. What a treat, thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2022/12/09/pwc194-frequency-equalizer/"&gt;PWC194 - Frequency Equalizer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The frank and open discussion is the highlight. Plenty to keep up busy every week.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-194/james-smith#readme"&gt;iffy solutions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;James introduced new term to me, IIFE. Thanks for your contributions every week.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/laurent_r/2022/12/perl-weekly-challenge-194-digital-clock-and-frequency-equalizer.html"&gt;Digital Clock and Frequency Equalizer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Great demo of Perl and Raku with such an ease. Thanks for sharing knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://fluca1978.github.io/2022/12/05/PerlWeeklyChallenge194.html"&gt;regular expressions everywhere!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Are you regex fan? If yes then this is for you. Thank you.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2022/12/05/PWC194/"&gt;Perl Weekly Challenge 194&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Once again we got the demo of PDL this week. Thanks for sharing the knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://pjcs-pwc.blogspot.com/2022/12/completing-time-and-levelling-letters.html"&gt;Completing the time and levelling the letters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Compact collection of various test cases. This makes the logic easy to follow. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2022/12/The_Weekly_Challenge_194__Digital_Equaliser.html"&gt;Digital Equaliser&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Advise and suggestions in the blog post is worth checking. Thanks for sharing knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/simongreennet/digital-frequency-l56"&gt;Digital frequency&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For both Perl and Python fans, have fun. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://thiujiac.blogspot.com/2022/12/pwc-194.html"&gt;PWC 194&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Blog post showing the porting of Perl solution to Raku and Julia. Plenty to learn every week.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2022/12/05/2022-49-releasemas-again/"&gt;2022.49 ReleaseMas Again&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2022/12/cdxxii-16-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2022/12/dxxxv-metacpan-weekly-report-valuediff.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2022/12/dlxiii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  The corner of Gabor
&lt;/h2&gt;

&lt;p&gt;A couple of entries sneaked in by Gabor.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/yukikimoto/how-to-create-cpanfile-by-perl-makefilepl-2cnl"&gt;How to create cpanfile by "perl Makefile.PL"?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;An interesting possibility to se cpanfile with Makefile.PL&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/canadian-municipal-github-rankings-2hhi"&gt;Canadian Municipal GitHub Rankings&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;While looking for Open source projects I bumped into an interesting listing of government-related GitHub organizations.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/scotticles/jumphost-pull-switch-configs-with-perl-5b7c"&gt;Jumphost - Pull Switch Configs with Perl&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/yukikimoto/how-to-install-cpanm-using-httptiny-and-perl-oneliner-44el"&gt;How to install cpanm using HTTP::Tiny and Perl oneliner?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I am not sure it is really needed as Strawberry Perl for Windows, the only place where you don't have built in curl already comes with cpanm preinstalled. But nevertheless an interesting possibility.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/day-9-ci-for-mojo-useragent-cached-and-plack-middleware-greylist-4b3p"&gt;Day 9: CI for Mojo-UserAgent-Cached and Plack-Middleware-Greylist&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/szabgab/63-corporations-that-share-open-source-code-4o62"&gt;63 Corporations that share Open Source code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Since I posted this, I added a lot more corporations. Thanks to contribution of Dean Hamstead as well.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/jj6"&gt;Bold, beautiful, and… brainy? Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Our client provides online trading services and with offices in Dubai, Malta, and Malaysia, they’ve got the global reach that may provide the challenge you’re looking for. Their staff count has increased 600 percent in the last four years, and growth is still on the upswing. They know that a seasoned Perl pro is just what their team needs as they expand, and that’s where you come in.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/r5t"&gt;Perl to Node Cross-training? Yes Please! UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/lvd"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/jgr"&gt;Perl Developer and Business Owner? Remote Perl role in UK &amp;amp; EU&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Our clients run a job search engine that has grown from two friends with an idea to a site that receives more than 10 million visits per month. They're looking for a Perl pro with at least three years of experience with high-volume and high-traffic apps and sites, a solid understanding of Object-Oriented Perl (perks if that knowledge includes Moose), SQL/MySQL and DBIx::Class.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-594-advent-calendar-31ao</id>
    <published>2022-12-12T06:59:00Z</published>
    <updated>2022-12-12T06:59:00Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>TWC 194: Bag Time!</title>
    <link rel="alternate" href="https://blogs.perl.org/users/bruce_gray/2022/12/twc-194-bag-time.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10969</id>
    <published>2022-12-12T02:18:17Z</published>
    <updated>2022-12-12T03:52:49Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which analysis speeds, and mis-leads.</p>
]]>
        <![CDATA[<p>(Still editing!)</p>

<blockquote>
  <p>Old Mr. Kringle is soon gonna jingle <br />
The bells that'll tingle all your troubles away <br />
Everybody's waitin' for the man with the bag <br />
'cause Christmas is coming again
-- <a href="https://www.youtube.com/watch?v=TF01VuvBfq8">The Brian Setzer Orchestra</a></p>
</blockquote>

<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-194/#TASK1">Digital Clock</a></h1>

<h2>Task</h2>

<p>Given time in the format <code>hh:mm</code> with one missing digit, find the highest digit <code>0-9</code> that makes it a valid time.</p>

<h2>Observations</h2>

<p>Example #4 says <code>'2?:00'</code> should return <code>3</code>, which tells us that we should work with 24-hour time, and that <code>24:00</code> is not allowed as a alternate expression of <code>00:00 the-next-day</code>.</p>

<ul>
<li>Question mark in 4th digit place, the answer is 9.</li>
<li>Question mark in 3th digit place, the answer is 5.</li>
<li>Question mark in 2th digit place, the answer is 9 or 3, depending on whether the 1st digit is 0|1 or 2.</li>
<li>Question mark in 1st digit place, the answer is 2 or 1, depending on whether the 2nd digit is 0..3 or 4..9.</li>
</ul>

<p>There are only 24<em>60=1440 possible times, but only (10</em>60)+( 3<em>60)+(24</em>10)+(24* 6) = 1164 possible (valid) inputs.</p>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<pre><code>sub is_time_valid ( Str $s --&gt; Bool ) {
    constant $valid_times = ( ^24 X ^60 ).map( *.fmt('%02d', ':') ).Set;
    return $s ∈ $valid_times;
}
sub task1 ( Str $s --&gt; UInt ) {
    return (9…0).first: { $s.subst( '?', $_ ).&amp;is_time_valid };
}
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<hr />

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-194/#TASK2">Frequency Equalizer</a></h1>

<h2>Task</h2>

<p>Given a string, determine whether removing only one character can make the frequency of the remaining characters the same.</p>

<h2>Observations</h2>

<p>The test cases led many participants to shortcut the analysis and produce concise solutions that would fail one of these cases:</p>

<ul>
<li>'aaaaab', 1</li>
</ul>

<p>The count of <code>a</code> (<code>5</code>) is not within striking distance of the count of <code>b</code> (1), but because <code>b</code> is the only solo character, removing it would succeed.</p>

<ul>
<li>'aaabbbcc', 0</li>
</ul>

<p><code>3</code> can be reduced to <code>2</code> be removing <code>1</code>, but there are <em>two</em> letters that each have <code>3</code>, so the frequency cannot be made equal with just one character removed.</p>

<p>Alternately, one of the groups has only one letter in it (<code>c</code>), and <code>abs(3-2) == 1</code>, but in the wrong direction; you would have to <em>add</em> a <code>c</code> to equalize.</p>

<ul>
<li>'abcd', 1</li>
</ul>

<p>Removing <em>any</em> of the letters leaves us with equal frequency.</p>

<h3>Generating test cases</h3>

<p>Of interest to me were methods to generate minimal sets of test cases:</p>

<pre><code>raku -e 'my @a = "a".."e"; for ( [X] (@a xx 5) ) { say .join if [le] .list and (.join ~~ /^a+[b+[c+[d+[e+]?]?]?]?$/)}' | m
aaaaa aaaab aaabb aaabc aabbb aabbc aabcc aabcd abbbb abbbc abbcc abbcd abccc abccd abcdd abcde
</code></pre>

<p>Longer code, but more efficient to run:</p>

<pre><code>raku -e 'my $w = 5; my $f = "\%0{$w}b"; for ^(2 ** $w) { my @bin = .fmt($f).comb;
my $c = "a";
my $out = "a";
for @bin {
    $c++ if +$_;
    $out ~= $c;
}
say $out;
}'
</code></pre>

<p>The above is not fully minimal; it misses the nuance that <code>aabbc</code> and <code>aabcc</code> both are "two of two, and one of one". We need partitioning!</p>

<pre><code>perl -MList::Util=zip -MInteger::Partition -wE 'my $i = Integer::Partition-&gt;new(shift); while (my $p = $i-&gt;next){say map { $_-&gt;[0] x $_-&gt;[1] } zip [("a".."z")[keys @$p]], $p}' 5
aaaaa
aaaab
aaabb
aaabc
aabbc
aabcd
abcde
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<pre><code># Best compromise between performance, complexity, reducing chance to "get it wrong",
# and likelihood of a maintenance programmer to reverse-engineer the original requirements.
sub task2 ( Str $s --&gt; Bool ) {
    my BagHash $b = $s.comb.BagHash;
    my @k = $b.keys;

    for @k -&gt; $k {
        $b.remove: $k;
        return True if $b.values.unique.elems == 0|1;
        $b.add:    $k;
    }
    return False;
}
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-194/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<p>Translation of my Raku solution, with <code>%h</code> as a improvised <code>Bag</code>.
The code <code>grep { $_ != 0 }</code> is needed to adapt to the hash entry not disappearing when the value goes to <code>0</code>.</p>

<pre><code>use v5.36;
use List::Util qw&lt;uniq&gt;;
sub task2 ($s) {
    my %h;
    $h{$_}++ for split '', $s;
    my @k = keys %h;

    for my $k (@k) {
        $h{$k}--;

        my $c = 0 + grep { $_ != 0 } uniq values %h;

        return 1 if $c == 0
                 or $c == 1;

        $h{$k}++;
    }
    return 0;
}
</code></pre>

<blockquote>
  <p>He'll make this December the one you'll remember <br />
The best and the merriest you ever did have <br />
Everybody's waitin', they're all congregating <br />
Waitin' for the man with the bag
-- <a href="https://voctave.net/videos/2/">#Voctave</a> {A Cappella, and Breath-taking; We got to see them in concert last week!}</p>
</blockquote>
]]>
    </content>
</entry>
  <entry>
    <title>Suggestion: cpanm is added to Perl core</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/suggestion-cpanm-is-added-to-perl-core-2c5l" type="text/html"/>
    <content type="html">&lt;p&gt;I suggest cpanm is added to Perl core.&lt;/p&gt;

&lt;p&gt;For now, cpanm is attached to all SPVM repositories for portable tests using Github Action.&lt;/p&gt;

&lt;p&gt;And if anyone knows the way to install cpanm using IO::Socket::INET, please let me know.&lt;/p&gt;

&lt;p&gt;The following onliner failed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -MIO::Socket::INET -e 'my $socket = IO::Socket::INET-&amp;gt;new(PeerAddr =&amp;gt; "cpanmin.us", PeerPort =&amp;gt; 80, Proto=&amp;gt; "tcp");print $socket "GET / HTTP/1.0\r\n\r\n";print &amp;lt;$socket&amp;gt;;close($sock);' &amp;gt; cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;cpanm can be used from Perl 5.6.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/suggestion-cpanm-is-added-to-perl-core-2c5l</id>
    <published>2022-12-12T01:42:16Z</published>
    <updated>2022-12-12T01:42:16Z</updated>
    <category term="perl"/>
    <category term="perlsuggestion"/>
  </entry>
  <entry>
    <title>Github Actions for Perl Modules 2022-12-12 version</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/github-actions-for-perl-modules-2022-12-12-version-5f7k" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Github Actions for Perl Modules 2022-12-12 version.</p>

<ul>
<li>Prereq is <a href="https://dev.to/yukikimoto/how-to-install-cpanm-using-httptiny-and-perl-oneliner-44el">cpanm</a>.</li>
<li>latest-perl and Perl 5.8.9</li>
<li>64bit and 32bit</li>
<li>Ubuntu/Linux, Mac, Windows</li>
</ul>

<p>This example is used in SPVM::Sys.</p>

<h2>
  
  
  linux-ubuntu-latest
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: linux-ubuntu-latest

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5:$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: perl cpanm -L ~/mylib --installdeps .
      - run: make
      - run: make disttest
</code></pre>

</div>



<h2>
  
  
  linux-ubuntu-latest-32bit
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: linux-ubuntu-latest-32bit

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: i386/ubuntu:latest
    steps:
      - run: |
          apt update
          apt install -y libperl-dev build-essential
      - uses: actions/checkout@v1
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5:$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: perl cpanm -L ~/mylib --installdeps .
      - run: make
      - run: make disttest
</code></pre>

</div>



<h2>
  
  
  linux-ubuntu-latest-perl-5.8.9
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: linux-ubuntu-latest-perl-5.8.9

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.8.9'
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl cpanm ExtUtils::CBuilder
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5:$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: perl cpanm -L ~/mylib --installdeps .
      - run: make
      - run: make disttest
</code></pre>

</div>



<h2>
  
  
  macos-latest
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: macos-latest

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - run: brew install perl
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: echo "PERL5LIB=$HOME/mylib/lib/perl5:$HOME/mylib/lib/perl5/"$(perl -MConfig -e 'print $Config{archname}') &gt;&gt; $GITHUB_ENV
      - run: perl Makefile.PL
      - run: perl cpanm -L ~/mylib --installdeps .
      - run: make
      - run: make disttest

</code></pre>

</div>



<h2>
  
  
  windows-latest
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: windows-latest

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  perl:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
      - run: perl -V
      - run: perl -MConfig -MData::Dumper -e 'local $Data::Dumper::Sortkeys = 1;warn Dumper \%Config;'
      - run: perl Makefile.PL
      - run: perl cpanm --installdeps .
      - run: gmake
      - run: gmake disttest
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/github-actions-for-perl-modules-2022-12-12-version-5f7k</id>
    <published>2022-12-12T00:40:40Z</published>
    <updated>2022-12-12T00:40:40Z</updated>
    <category term="perl"/>
    <category term="github"/>
    <category term="githubaction"/>
    <category term="mac"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 12, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-12/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 11 | Day 12 |  The gift is presented by W. Luis Mochan. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 152&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 Perl Weekly Challenge 152 My solutions (task 1 and task 2) to The Weekly Challenge - 152.
Task 1: Triangle Sum Path You are given a triangle array.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-12/</id>
    <published>2022-12-12T00:00:00Z</published>
    <updated>2022-12-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Advent Calendar 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">| 2019 | 2020 | 2021 | 2022 |  Welcome to our 4th Advent Calendar. I promise to present interesting topic every day contributed by esteemed members of Team PWC.                         MON
 TUE
 WED
 THU
 FRI
 SAT
 SUN</div>
    </content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022/</id>
    <published>2022-12-12T00:00:00Z</published>
    <updated>2022-12-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 194</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-194/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-194/</id>
    <published>2022-12-12T00:00:00Z</published>
    <updated>2022-12-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 195</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-195/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Special Integers 10. TASK #2: Most Frequent Even HEADLINES  Welcome to the Week #195 of The Weekly Challenge.
Advent Calendar 2022 is going on with full swing, thanks to the contributions by the members of Team PWC.
          Day Article Authors        1  Are Abecedarians from Abecedaria?</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-195/</id>
    <published>2022-12-12T00:00:00Z</published>
    <updated>2022-12-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Delivery Map</title>
    <link href="http://perladvent.org/2022/2022-12-12.html"/>
    <id>http://perladvent.org/2022/2022-12-12.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;Santa has started to get more absent-minded lately. Year after year he tends to forget a few more things. Just little things like where he left the keys to the sled, or to put his red Santa hat on before he leaves the house.&lt;/p&gt;

&lt;p&gt;To give you an idea, in 2021, Santa completely forgot to deliver presents to the Johnson family in Birmingham. He had to come back later to fix it, and nearly got caught by the children!&lt;/p&gt;

&lt;p&gt;This kind of mistake takes time and is tiring for Santa. His right-hand elf, worried about Santa&amp;#39;s well being, just came up with a solution.&lt;/p&gt;

&lt;p&gt;He started to design &amp;quot;TODO-Maps&amp;quot; for his boss.&lt;/p&gt;

&lt;p&gt;For this purpose, he decided to use the &lt;a href="https://metacpan.org/module/GraphViz2"&gt;GraphViz2&lt;/a&gt; Perl module, to build a graph of families to deliver to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphviz.org/"&gt;GraphViz&lt;/a&gt; is a well known graph visualization software and is easy to use, and the elf was able to come up with a first graph in a matter of minutes:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;GraphViz2&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$graph&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;GraphViz2&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;graph&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;rankdir&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;LR&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Anderson&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Williams&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;run&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;format&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;output_file&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;simple.svg&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And got this nice result:&lt;/p&gt;

&lt;center&gt;&lt;img src="simple.svg" alt="A simple delivery map"&gt;&lt;/center&gt;

&lt;h3 id="Make-it-a-Bit-Better"&gt;Make it a Bit Better&lt;/h3&gt;

&lt;p&gt;It was already a nice help for Santa, but the elf wanted to make it a bit better.&lt;/p&gt;

&lt;p&gt;First, to materialize the direction using &lt;code&gt;directed =&amp;gt; 1&lt;/code&gt;, and second, to change the node shape to house using &lt;code&gt;shape =&amp;gt; &amp;quot;house&amp;quot;&lt;/code&gt; because after all, these families live in houses!&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;GraphViz2&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$graph&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;GraphViz2&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;global&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Birmingham&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;directed&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;graph&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;rankdir&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;LR&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;default_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;shape&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;house&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;height&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Anderson&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Williams&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;run&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;format&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;output_file&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;better.svg&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;And got this result:&lt;/p&gt;

&lt;center&gt;&lt;img src="better.svg" alt="A better delivery map"&gt;&lt;/center&gt;

&lt;h3 id="The-Full-Procedure-for-Santa"&gt;The Full Procedure for Santa&lt;/h3&gt;

&lt;p&gt;Santa was already happy with this map but wanted to go even a bit further.&lt;/p&gt;

&lt;p&gt;If the map could also display the chores he would do to get ready for the day, it would be perfect for Santa!&lt;/p&gt;

&lt;p&gt;To give you a better idea, this is what Santa&amp;#39;s typical day looked like: he would leave his home, head to the shop for some chocolate bars to sustain him on his travels, then walk over to the sled&amp;#39;s garage and then finally start his tour (can be a delivery tour if it&amp;#39;s Christmas day, or it can be visiting toy crafters to discover new products).&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;br /&gt;32:&amp;nbsp;&lt;br /&gt;33:&amp;nbsp;&lt;br /&gt;34:&amp;nbsp;&lt;br /&gt;35:&amp;nbsp;&lt;br /&gt;36:&amp;nbsp;&lt;br /&gt;37:&amp;nbsp;&lt;br /&gt;38:&amp;nbsp;&lt;br /&gt;39:&amp;nbsp;&lt;br /&gt;40:&amp;nbsp;&lt;br /&gt;41:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/env perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;GraphViz2&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$graph&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;GraphViz2&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;global&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Birmingham&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;directed&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;graph&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;rankdir&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;LR&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;default_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;shape&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;house&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;height&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;push_subgraph&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'cluster_NorthPole'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;graph&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;label&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'North Pole'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Santa's house&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Supermarket&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Sleds' garage&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pop_subgraph&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;push_subgraph&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'cluster_Birmingham'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;graph&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;label&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'Birmingham'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Anderson&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_node&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;name&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Williams&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pop_subgraph&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Santa's house&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Supermarket&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Supermarket&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Sleds' garage&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Sleds' garage&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Anderson&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Anderson&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Johnson&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add_edge&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;from&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Taylor&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;to&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Williams&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$graph&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;run&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;format&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;svg&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;output_file&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;final.svg&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;It resulted in this graph:&lt;/p&gt;

&lt;center&gt;&lt;img src="final.svg" alt="Final delivery map" width='1200'&gt;&lt;/center&gt;

&lt;p&gt;Elves started to print these kinds of maps for every tour Santa has to do, and Christmas was once again a success!&lt;/p&gt;

&lt;p&gt;More &lt;a href="https://graphviz-perl.github.io/"&gt;examples&lt;/a&gt; of &lt;a href="https://metacpan.org/module/GraphViz2"&gt;GraphViz2&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-12T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Thibault DUPONCHELLE</name>
    </author>
  </entry>
  <entry>
    <title>How to install cpanm using HTTP::Tiny and Perl oneliner?</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/how-to-install-cpanm-using-httptiny-and-perl-oneliner-44el" type="text/html"/>
    <content type="html">&lt;p&gt;How to install cpanm using HTTP::Tiny and Perl oneliner?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -MHTTP::Tiny -e 'print HTTP::Tiny-&amp;gt;new-&amp;gt;get("http://cpanmin.us/")-&amp;gt;{content};' &amp;gt; cpanm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use cpanm in the portable way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl cpanm -h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/how-to-install-cpanm-using-httptiny-and-perl-oneliner-44el</id>
    <published>2022-12-11T23:48:22Z</published>
    <updated>2022-12-11T23:48:22Z</updated>
    <category term="perl"/>
    <category term="cpanm"/>
    <category term="http"/>
    <category term="oneliner"/>
  </entry>
  <entry>
    <title>How To Install cpanm on Ubuntu 20.04?</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/how-to-install-cpanm-on-ubuntu-2004-1jnd" type="text/html"/>
    <content type="html">&lt;p&gt;How To Install cpanm on Ubuntu 20.04?&lt;/p&gt;

&lt;p&gt;Please see &lt;a href="https://installati.one/ubuntu/20.04/cpanminus/"&gt;How To Install cpanminus on Ubuntu 20.04 | Installati.one&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get -y install cpanminus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Yuki Kimoto - SPVM - Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/how-to-install-cpanm-on-ubuntu-2004-1jnd</id>
    <published>2022-12-11T23:36:04Z</published>
    <updated>2022-12-11T23:36:04Z</updated>
    <category term="perl"/>
    <category term="cpanm"/>
    <category term="ubuntu"/>
    <category term="linux"/>
  </entry>
  <entry>
    <title>Advent Calendar - December 11, 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/advent-calendar-2022-12-11/" type="text/html"/>
    <content type="text">Advent Calendar 2022 | Day 10 | Day 11 | Day 12 |  The gift is presented by Flavio Poletti. Today he is talking about his solution to &amp;ldquo;The Weekly Challenge - 153&amp;rdquo;. This is re-produced for Advent Calendar 2022 from the original post by him.
 PWC153 - Factorions TL;DR On with TASK #2 from The Weekly Challenge #153. Enjoy!
The challenge You are given an integer, $n.</content>
    <id>https://theweeklychallenge.org/blog/advent-calendar-2022-12-11/</id>
    <published>2022-12-11T00:00:00Z</published>
    <updated>2022-12-11T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Wake up! Time to open presents! </title>
    <link href="http://perladvent.org/2022/2022-12-11.html"/>
    <id>http://perladvent.org/2022/2022-12-11.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h2 id="Wake-up-Time-to-open-presents"&gt;Wake up! Time to open presents!&lt;/h2&gt;

&lt;p&gt;Clark W. Grisman faced a dilemma, it was the night before Christmas; and he found himself up against a programming deadline. Why a company at the cutting edge of milk-proof cereal coatings required him to write a Perl program, Clark can&amp;#39;t remember, but he does know that he&amp;#39;s trying to read from a socket that keeps timing out!&lt;/p&gt;

&lt;h2 id="Traditional-alarm-Handling"&gt;Traditional &lt;code&gt;alarm&lt;/code&gt; Handling&lt;/h2&gt;

&lt;p&gt;In the past, whenever Clark wanted to call a procedure inside his Perl code that might take too long to return, he always simply copied the example in &lt;code&gt;perldoc -f alarm&lt;/code&gt;, which at the time of this Advent season looks like the following:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;# ...&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;eval&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;local&lt;/span&gt; &lt;span class="symbol"&gt;$SIG&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;ALRM&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;die&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;alarm\n&amp;quot;&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt; &lt;span class="comment"&gt;# NB: \n required&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;alarm&lt;/span&gt; &lt;span class="symbol"&gt;$timeout&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$nread&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;sysread&lt;/span&gt; &lt;span class="symbol"&gt;$socket&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$buffer&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$size&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;alarm&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;};&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="magic"&gt;$@&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;die&lt;/span&gt; &lt;span class="word"&gt;unless&lt;/span&gt; &lt;span class="magic"&gt;$@&lt;/span&gt; &lt;span class="operator"&gt;eq&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;alarm\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;   &lt;span class="comment"&gt;# propagate unexpected errors&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # timed out&lt;br /&gt;&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;    # didn't&lt;br /&gt;&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;If he didn&amp;#39;t need it quite so fancy, he&amp;#39;d just nip it down to:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="symbol"&gt;$SIG&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;ALRM&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt; &lt;span class="word"&gt;die&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;alarm\n&amp;quot;&lt;/span&gt; &lt;span class="structure"&gt;};&lt;/span&gt; &lt;span class="comment"&gt;# NB: \n required&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;alarm&lt;/span&gt; &lt;span class="symbol"&gt;$timeout&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$nread&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;sysread&lt;/span&gt; &lt;span class="symbol"&gt;$socket&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$buffer&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$size&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;alarm&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Clark never liked using &lt;code&gt;alarm&lt;/code&gt; in this latter way because it didn&amp;#39;t feel very &lt;i&gt;perlish&lt;/i&gt;. But he did what he had to, then would just bottle up the guilt. That&amp;#39;s what the eggnog is for, he&amp;#39;d tell himself.&lt;/p&gt;

&lt;h2 id="alarm-Handling-Comes-to-Christmastown"&gt;&lt;code&gt;alarm&lt;/code&gt; Handling Comes to Christmastown&lt;/h2&gt;

&lt;p&gt;Clark is not only a food scientist by day, but he considers himself a Perl artist by night. Realizing this approach seemed a little dated, he recalled seeing a module fly by the CPAN radar that treats &lt;code&gt;alarm&lt;/code&gt;&amp;#39;s &lt;code&gt;ALRM&lt;/code&gt; signal as a catchable exception.&lt;/p&gt;

&lt;p&gt;After some searching, he found the module. &lt;a href="https://metacpan.org/module/Try::ALRM"&gt;Try::ALRM&lt;/a&gt;. Turns out there was no need to fiddle with the &lt;code&gt;eval&lt;/code&gt; stuff directly. Using this handy module, it can be done in the following way using a multi-level block that looks a lot a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; construct.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Try::ALRM&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# ...&lt;br /&gt;# thing that can time out&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;try_once&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$nread&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;sysread&lt;/span&gt; &lt;span class="symbol"&gt;$socket&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$buffer&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$size&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# code block locally assigned to $SIG{ALRM}&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;ALRM&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;warn&lt;/span&gt; &lt;span class="interpolate"&gt;qq{Wake up! `sysread` has timed out!}&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# code run after $SIG{ALRM}&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;finally&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$attempt&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$successful&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="operator"&gt;not&lt;/span&gt; &lt;span class="symbol"&gt;$successful&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # timed out&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # didn't&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;span class="comment"&gt;# trailing modifier to set timeout (in seconds)&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;timeout&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$timeout&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Cleaned up, Clark&amp;#39;s code came out to be:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;try_once&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$nread&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;sysread&lt;/span&gt; &lt;span class="symbol"&gt;$socket&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$buffer&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$size&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;# NB: no ALRM block is a localized no-op $SIG{ALRM}!&lt;br /&gt;&lt;/span&gt;&lt;span class="word"&gt;finally&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$attempt&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$successful&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="operator"&gt;not&lt;/span&gt; &lt;span class="symbol"&gt;$successful&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # timed out&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # didn't&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="word"&gt;timeout&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$timeout&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In the above code, Clark found he didn&amp;#39;t even need to define the &lt;code&gt;ALRM&lt;/code&gt; handler block, so he didn&amp;#39;t include it. Effectively the &lt;code&gt;$SIG{ALRM}&lt;/code&gt; handler was a &lt;i&gt;no-op&lt;/i&gt;.&lt;/p&gt;

&lt;h2 id="retry:-Never-Gonna-Give-It-Up"&gt;&lt;code&gt;retry&lt;/code&gt;: &lt;i&gt;Never Gonna Give It Up&lt;/i&gt; ...&lt;/h2&gt;

&lt;p&gt;.. not immediately, anyway.&lt;/p&gt;

&lt;p&gt;Clark was not satisfied, since he wanted to add some retries; and this is when &lt;a href="https://metacpan.org/module/Try::ALRM"&gt;Try::ALRM&lt;/a&gt; &lt;i&gt;really&lt;/i&gt; proved its worth. And Clark really needed a win. Chicago PD just &lt;i&gt;SWAT&lt;/i&gt;&amp;#39;d the Grisman home because in a misguided attempt at some Christmas cheer, cousin Eddie had, among other things, just emptied the entire contents of his RV&amp;#39;s septic tank into the neighborhood&amp;#39;s drainage system.&lt;/p&gt;

&lt;p&gt;In all its full glory, Clark finished his code in time to enjoy a lot of spiked eggnog before getting some sleep.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;strict&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Try::ALRM&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;# ...&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;retry&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$attempt&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="core"&gt;shift&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$total_tries&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;tries&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;printf&lt;/span&gt; &lt;span class="interpolate"&gt;qq{Attempt #%d of %d ...\n}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$attempt&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$total_tries&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$nread&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;sysread&lt;/span&gt; &lt;span class="symbol"&gt;$socket&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$buffer&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$size&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;ALRM&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$attempt&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="core"&gt;shift&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$total_tries&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;tries&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$msg&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;sprintf&lt;/span&gt; &lt;span class="interpolate"&gt;qq{FAILED: Attempt #%d of %d ...\n}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$attempt&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$total_tries&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;warn&lt;/span&gt; &lt;span class="symbol"&gt;$msg&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;finally&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$attempt&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$successful&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="operator"&gt;not&lt;/span&gt; &lt;span class="symbol"&gt;$successful&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # timed out&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class="comment"&gt;        # didn't&lt;br /&gt;&lt;/span&gt;    &lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="word"&gt;timeout&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="symbol"&gt;$timeout&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;tries&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;h2 id="It-Was-Just-A-Dream"&gt;It Was Just A Dream&lt;/h2&gt;

&lt;p&gt;... or was it! Clark frantically searched the house for evidence of the shenanigans of the night before, but realized that it was all a dream. Good thing, because he was really starting to get a hankerin&amp;#39; for the pickle jelly from the Jelly of the Month Club.&lt;/p&gt;

&lt;p&gt;Clark did realize that he wished for one part of that dream to be true. Something like this &lt;a href="https://metacpan.org/module/Try::ALRM"&gt;Try::ALRM&lt;/a&gt; sure would be a blessing for a lot of things! And what to his wondering eyes did appear, after searching on &lt;i&gt;MetaCPAN&lt;/i&gt;, was &lt;a href="https://metacpan.org/module/Try::ALRM"&gt;Try::ALRM&lt;/a&gt; and 8 tiny reindeer!&lt;/p&gt;

&lt;p&gt;And just at that moment, he&amp;#39;s convinced he heard Santa&amp;#39;s bells and a jolly old, &lt;i&gt;Ho, Ho, Ho! Merrry Christmas!&lt;/i&gt;. He also now sees 8 tiny reindeer everywhere and is really worried that Uncle Eddie slipped more than bottom shelf Kentucky Bourbon in that eggnog.&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-11T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>oodler</name>
    </author>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 194:  Digital Clock and Frequency Equalizer</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2022/12/perl-weekly-challenge-194-digital-clock-and-frequency-equalizer.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10968</id>
    <published>2022-12-10T21:02:07Z</published>
    <updated>2022-12-10T21:03:21Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 194 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-194/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 11, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Digital Clock</h2>

<p><em>You are given time in the format <code>hh:mm</code> with one missing digit.</em></p>

<p><em>Write a script to find the highest digit between <code>0-9</code> that makes it valid time.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $time = '?5:00'
Output: 1

Since 05:00 and 15:00 are valid time and no other digits can fit in the missing place.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $time = '?3:00'
Output: 2
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: $time = '1?:00'
Output: 9
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: $time = '2?:00'
Output: 3
</code></pre>

<p><em>Example 5</em></p>

<pre><code>Input: $time = '12:?5'
Output: 5
</code></pre>

<p><em>Example 6</em></p>

<pre><code>Input: $time =  '12:5?'
Output: 9
</code></pre>

<p>The task is quite easy, but a little painful because of the number of cases to be tested.</p>

<h3>Digital Clock in Raku</h3>

<p>The <code>highest-digit</code> subroutine splits the input qstring into the hour and minute component and figures out in which component the missing digit (the question mark) is.</p>

<p><em>If the missing digit is in the hour component</em>, and if the first digit is missing, then the subroutine returns 1 if the second digit if more than 3 and 2 otherwise. If the second digit is missing, then it returns 3 if the first digit is 2, and 9 otherwise.</p>

<p><em>If the missing digit is in the minute component</em>, then the suboutine returns 5 if it is the first digit that is missing, and 9 if it is the second digit.</p>

<pre><code>sub highest-digit ($in) {
    my ($h, $m) = $in.split(/\:/);
    # say $h, " ", $m;
    if $h ~~ /\?/ {
        my ($h1, $h2) = $h.comb('');
        if $h1 eq '?' {
            return $h2 &gt; 3 ?? 1 !! 2;
        } elsif $h2 eq '?' {
            return $h1 == 2 ?? 3 !! 9;
        }
    } elsif $m ~~ /\?/ {
        my ($m1, $m2) = $m.comb('');
        return 5 if $m1 eq '?'; 
        return 9 if $m2 eq '?'; 
    }        
}

for &lt;?5:00 ?3:00 1?:00 2?:00 12:?5 12:5? 14:?9&gt; -&gt; $t {
    say "$t =&gt; ", highest-digit($t);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./highest-digit.raku
?5:00 =&gt; 1
?3:00 =&gt; 2
1?:00 =&gt; 9
2?:00 =&gt; 3
12:?5 =&gt; 5
12:5? =&gt; 9
14:?9 =&gt; 5
</code></pre>

<h3>Digital Clock in Perl</h3>

<p>This is a port to Perl of the Raku program above. Please refer to the Raku section for explanations on the way the program works.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub highest_digit  {
    my ($h, $m) = split /\:/, $_[0];
    # say $h, " ", $m;
    if ($h =~ /\?/) {
        my ($h1, $h2) = split //, $h;
        if ($h1 eq '?') {
            return $h2 &gt; 3 ? 1 : 2;
        } elsif ($h2 eq '?') {
            return $h1 == 2 ? 3 : 9;
        }
    } elsif ($m =~ /\?/) {
        my ($m1, $m2) = split //, $m;
        return 5 if $m1 eq '?'; 
        return 9 if $m2 eq '?'; 
    }        
}

for my $t (qw&lt;?5:00 ?3:00 1?:00 2?:00 12:?5 12:5? 14:?9&gt;) {
    say "$t =&gt; ", highest_digit($t);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./highest-digit.pl
?5:00 =&gt; 1
?3:00 =&gt; 2
1?:00 =&gt; 9
2?:00 =&gt; 3
12:?5 =&gt; 5
12:5? =&gt; 9
14:?9 =&gt; 5
</code></pre>

<h2>Task 2: Frequency Equalizer</h2>

<p><em>You are given a string made of alphabetic characters only, <code>a-z</code>.</em></p>

<p><em>Write a script to determine whether removing only one character can make the frequency of the remaining characters the same.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $s = 'abbc'
Output: 1 since removing one alphabet 'b' will give us 'abc' where each alphabet frequency is the same.
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $s = 'xyzyyxz'
Output: 1 since removing 'y' will give us 'xzyyxz'.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $s = 'xzxz'
Output: 0 since removing any one alphabet would not give us string with same frequency alphabet.
</code></pre>

<p>Basically, to answer the question, we need to find out whether all the characters have the same frequency, except for one which occurs once more than the others.</p>

<h3>Frequency Equalizer in Raku</h3>

<p>We first build the <code>%histo</code> histogram of the letters of the input string. Then we store the sorted values (ascending order) in the <code>@frequencies</code> array and check whether all the values except the last (the largest) are equal and the last value is one more than the others.</p>

<pre><code>sub remove-one ($st) {
    my %histo;
    %histo{$_}++ for $st.comb;
    my @frequencies = %histo.values.sort;
    my $largest = @frequencies.pop;
    return 1 if $largest - 1 == @frequencies.all;
    return 0;
}
for &lt;abbc xyzyyxz xzxz&gt; -&gt; $test {
    say "$test.fmt("%-10s") =&gt; ", remove-one($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./freq-analyzer.raku
abbc       =&gt; 1
xyzyyxz    =&gt; 1
xzxz       =&gt; 0
</code></pre>

<h3>Frequency Equalizer in Perl</h3>

<p>We first build the <code>%histo</code> histogram of the letters of the input string. Then we store the sorted values (<em>descending</em> order) in the <code>@frequencies</code> array and check whether all the values except the first (the largest) are equal and the first value is one more than the others. Note that we cannot use an <code>all</code> junction in Perl, so we simply loop over the values (except the first) to check that they are all equal</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub remove_one {
    my %histo;
    $histo{$_}++ for split //, shift;
    my @frequencies = sort { $b &lt;=&gt; $a } values %histo;
    my $largest = shift @frequencies;
    for my $count (@frequencies) {
        return 0 if $largest - 1 != $count;
    }
    return 1;
}
for my $test (&lt;abbc xyzyyxz xzxz&gt;) {
    printf "%-10s =&gt; %d\n", $test, remove_one($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./freq-analyzer.pl
abbc       =&gt; 1
xyzyyxz    =&gt; 1
xzxz       =&gt; 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on December 18, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5239354894593758389</id>
    <published>2022-12-10T21:38:00.000+01:00</published>
    <updated>2022-12-10T21:38:00.558+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxii) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.060000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.060000&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.059001 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.030&lt;/strong&gt; on 2022-12-10&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.029 was 1 month, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.13&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 5.12 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Log-Any-1.712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Any&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Bringing loggers and listeners together &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.712&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 1.711 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/Module-Build-0.4232' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build and install Perl modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.4232&lt;/strong&gt; on 2022-12-08&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 0.4231 was 2 years, 10 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-IRC-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::IRC&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IRC Client for the Mojo IOLoop &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 1 year, 9 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.26&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 1.25 was 1 year, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.08' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.08&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 5.07 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.74&lt;/strong&gt; on 2022-12-04&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 0.72 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/parent-0.239' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;parent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Establish an ISA relationship with base classes at compile time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.239&lt;/strong&gt; on 2022-12-06&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.238 was 2 years, 9 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.144&lt;/strong&gt; on 2022-12-06&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: 1.142 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9665' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9665&lt;/strong&gt; on 2022-12-09&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9664 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.28&lt;/strong&gt; on 2022-12-08&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 0.27 was 9 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v8.10.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v8.10.0&lt;/strong&gt; on 2022-12-08&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: v8.9.0 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Test-WWW-Mechanize-1.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Testing-specific WWW::Mechanize subclass &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.60&lt;/strong&gt; on 2022-12-05&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 7 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000138' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000138&lt;/strong&gt; on 2022-12-06&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000136 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5239354894593758389/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxii-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5239354894593758389"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5239354894593758389"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxii-16-great-cpan-modules-released.html" title="(cdxxii) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-797398133988045957</id>
    <published>2022-12-10T21:34:00.005+01:00</published>
    <updated>2022-12-10T21:34:55.088+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxv) metacpan weekly report - Value::Diff</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 47&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Value::Diff"&gt;Value::Diff&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/10 20:33:58 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::TimeZone::Catalog::Extend" target="_blank"&gt;DateTime::TimeZone::Catalog::Extend&lt;/a&gt; - Extend DateTime::TimeZone catalog&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Babble" target="_blank"&gt;Dist::Zilla::Plugin::Babble&lt;/a&gt; - EXPERIMENTAL Automatic Babble substitution in Dist::Zilla&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::UK::Postcode::Regex" target="_blank"&gt;Geo::UK::Postcode::Regex&lt;/a&gt; - regular expressions for handling British postcodes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Lint" target="_blank"&gt;Git::Lint&lt;/a&gt; - lint git commits and messages&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::HTMX" target="_blank"&gt;Mojolicious::Plugin::HTMX&lt;/a&gt; - Mojolicious Plugin for htmx&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Password::AutoMigration" target="_blank"&gt;Text::Password::AutoMigration&lt;/a&gt; - generate and verify Password with any contexts&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CGIThis" target="_blank"&gt;App::CGIThis&lt;/a&gt; (+2=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::sdview" target="_blank"&gt;App::sdview&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Babble" target="_blank"&gt;Babble&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catmandu" target="_blank"&gt;Catmandu&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Frame" target="_blank"&gt;Data::Frame&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=142)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Wrap" target="_blank"&gt;Hash::Wrap&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FD" target="_blank"&gt;IO::FD&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/KCP" target="_blank"&gt;KCP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mango" target="_blank"&gt;Mango&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+2=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CoreList" target="_blank"&gt;Module::CoreList&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::GitHub" target="_blank"&gt;Net::GitHub&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Number::Range" target="_blank"&gt;Number::Range&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+2=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=399)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pithub" target="_blank"&gt;Pithub&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=164)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Match" target="_blank"&gt;Syntax::Keyword::Match&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ProgressBar::Simple" target="_blank"&gt;Term::ProgressBar::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep::Type" target="_blank"&gt;Test::Deep::Type&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=53)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=171)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URL::Social" target="_blank"&gt;URL::Social&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O::More" target="_blank"&gt;Util::H2O::More&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Value::Diff" target="_blank"&gt;Value::Diff&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML" target="_blank"&gt;XML::LibXML&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/797398133988045957/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxv-metacpan-weekly-report-valuediff.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/797398133988045957"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/797398133988045957"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxv-metacpan-weekly-report-valuediff.html" title="(dxxxv) metacpan weekly report - Value::Diff"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2342464762934455369</id>
    <published>2022-12-10T21:31:00.001+01:00</published>
    <updated>2022-12-10T21:31:24.215+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-12-10 20:31:03 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74732086" target="_blank"&gt;How do I extract an array from a 2D array in Perl?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74716732" target="_blank"&gt;Get a list of classes derived from given base class in Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74750192" target="_blank"&gt;`perl -pe` match only start of file?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74747671" target="_blank"&gt;Perl executable crashes even though file is not missing&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74678226" target="_blank"&gt;In perl is \*STDIN the same as STDIN?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2342464762934455369/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2342464762934455369"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2342464762934455369"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dlxiii-stackoverflow-perl-report.html" title="(dlxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Kephra: goto (last) edit</title>
    <link rel="alternate" href="https://blogs.perl.org/users/lichtkind/2022/12/kephra-goto-last-edit.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10962</id>
    <published>2022-12-10T02:01:15Z</published>
    <updated>2022-12-10T02:28:25Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="Kephra" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>Welcome to my musings: how editing should be (aimed to all users of an editor as food for thought). After <a href="https://blogs.perl.org/users/lichtkind/2022/11/kephra-select-all.html">select all</a> I will today choose as feature of the day: <strong>goto edit</strong> (Strg+E) by which I mean jump to the location where you did the last change to the document. In latest <a href="https://metacpan.org/release/LICHTKIND/Kephra-0.404">version 0.404</a> I even extended the feature to make it more productive.</p>]]>
        <![CDATA[<p>This feature can be implemented in 2 minutes so why even talk about it except bragging about it? If you think about editing strategically (first principles - step one - making requirements less dumb), you see that its not really about moving the caret to some position somewhere or selecting some text. Editing is ultimately an information game. How to get and organize information and apply them in the most effective way.</p>

<p>One little question in that game is for instance: how to get an overview which methods are in this file? Do I want an outline box on the margin, that shows me all the names with signatures or do I want a key command that folds all subroutines so I have an overview inside the edit field? I prefer the second. Even aesthetically I dislike everything that shrinks the space for the main thing (edit field) but also practically. An outline forces me to use the mouse if i want to do anything else than looking at it. Why not stay in the edit field and use all the powerful key combinations for search and and change in place. And when I'm at the wanted method why not plop - unfold all methods again and off I go? I think this style of work makes Vi(m) so powerful. But in TIMTOWTDI manner I may provide an outline anyway.</p>

<p>The preferred way to edit also includes going on tangents, look for information in many ways, which will include moving through the document. Already you can for instance search without the search bar - just mark the term and skip with (Shift+) F3. And it's good to be able to continue your current work after that search just by one key stroke.</p>

<p> But sometimes its actually more than one position you want to jump between. That is why now Strg+E now jumps to the second last edit, in case you are already at the position of the last edit. This saves you in many cases from using position marker or memorize the line number. But also makes sure Strg+E does always something potentially useful instead of nothing.<br />
</p>]]>
    </content>
</entry>
  <entry>
    <title>The Christmas Time Machine</title>
    <link href="http://perladvent.org/2022/2022-12-10.html"/>
    <id>http://perladvent.org/2022/2022-12-10.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h3 id="A-Terrible-Flashback"&gt;A Terrible Flashback&lt;/h3&gt;

&lt;p&gt;At the North Pole, the elves are just starting the Christmas 2022 preparations.&lt;/p&gt;

&lt;p&gt;As usual they restarted doing line work, building toys, then sorting them per area. Everyone happily singing and working! When suddenly one elf put the first toy in a box marked &amp;quot;Salt Lake City&amp;quot; and was surprised it was not empty...&lt;/p&gt;

&lt;p&gt;And he had a terrible flashback, they seemed to have forgotten to deliver the 2021 toys to Salt Lake City!&lt;/p&gt;

&lt;h3 id="Go-Ask-Santa"&gt;Go Ask Santa&lt;/h3&gt;

&lt;p&gt;The elves panicked, so they quickly reached out to Santa for a solution.&lt;/p&gt;

&lt;p&gt;He took some time to think about it, then had an idea: Let&amp;#39;s use the time machine to go back to 2021 and deliver the gifts!&lt;/p&gt;

&lt;p&gt;(If you&amp;#39;re wondering: YES, time machines do exist in North Pole! And I bet that elves even already used it in the past for similar mistakes? :P)&lt;/p&gt;

&lt;p&gt;So a group of elves decided to use the time machine, fixed the arrival date to 25 December 2021, pushed the &amp;quot;go&amp;quot; button and zooooooooooooop!&lt;/p&gt;

&lt;h3 id="Try-to-Deliver-Back-in-the-Past"&gt;Try to Deliver Back in the Past&lt;/h3&gt;

&lt;p&gt;Upon arriving in 2021, they immediately tried to run Perl software that they took with them.&lt;/p&gt;

&lt;p&gt;For the record, in 2021, North Pole was equipped with Ubuntu 20.04 and here is the Perl code they had:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="pragma"&gt;feature&lt;/span&gt; &lt;span class="single"&gt;'try'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;no&lt;/span&gt; &lt;span class="pragma"&gt;warnings&lt;/span&gt; &lt;span class="single"&gt;'experimental::try'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="word"&gt;try&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;deliver&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="word"&gt;catch&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$e&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Failed to deliver\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;But it failed with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Feature &amp;quot;try&amp;quot; is not supported by Perl 5.30.0 at deliver.pl line 3.
    BEGIN failed--compilation aborted at deliver.pl line 3.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because the &lt;code&gt;perl&lt;/code&gt; interpreter on which they wanted to run the code is older (5.30 in Ubuntu 20.04) than the one from where they are coming (5.36 in a rolling release distribution).&lt;/p&gt;

&lt;p&gt;This is called &amp;quot;forward compatibility&amp;quot;.&lt;/p&gt;

&lt;h3 id="The-Perl-Time-Machine"&gt;The Perl Time Machine&lt;/h3&gt;

&lt;p&gt;One of the elves had heard about the Perl &amp;quot;Time Machine&amp;quot; and was finally able to fix the Perl script thanks to &lt;a href="https://metacpan.org/module/Feature::Compat::Try"&gt;Feature::Compat::Try&lt;/a&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="comment"&gt;#!/usr/bin/perl&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Feature::Compat::Try&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="word"&gt;try&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;deliver&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt; &lt;span class="word"&gt;catch&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$e&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Failed to deliver\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;This way, the CPAN module enables the feature &lt;code&gt;try&lt;/code&gt; for capable interpreters or implements the feature &lt;code&gt;try&lt;/code&gt; for older ones. It allowed the &lt;code&gt;try&lt;/code&gt; feature to &amp;quot;travel&amp;quot; in the past with the elves and it also means that, back in 2022, elves would be able to reuse the updated version of the script without any change.&lt;/p&gt;

&lt;p&gt;Thanks to this trick, the 2021 Christmas of Salt Lake City was saved! Ouf!&lt;/p&gt;

&lt;p&gt;Credits to Paul Evans for &lt;a href="https://metacpan.org/module/Feature::Compat::Try"&gt;Feature::Compat::Try&lt;/a&gt; and &lt;a href="https://youtu.be/Kc_bP73xNyM"&gt;Perl&amp;#39;s Amazing Time Machine&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-10T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Thibault DUPONCHELLE</name>
    </author>
  </entry>
  <entry>
    <title>This Week in PSC (090)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2022/12/this-week-in-psc-090.html"/>
    <id>tag:blogs.perl.org,2022:/users/psc//4112.10967</id>
    <published>2022-12-09T21:59:45Z</published>
    <updated>2022-12-09T22:03:53Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>Just Paul and Rik, Philippe could not join us today.</p>

<ul>
<li>We talked about the difficulty of taking work that the author thinks is good, and may commit, but on which no significant feedback has been received. Rik will post more about this a bit later.
<li>We ran through the RFC tracker, putting the "updating *'* as package separator" for Tony Cook's pull request, and resetting the counter on the ?-> implementation, as Veesh G. has begun taking a crack at that.
</ul>]]>
        
    </content>
</entry>
  <entry>
    <title>What did Santa forget?</title>
    <link href="http://perladvent.org/2022/2022-12-09.html"/>
    <id>http://perladvent.org/2022/2022-12-09.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;p&gt;Santa is about ready to start his yearly trip around the world! But does he &lt;i&gt;really&lt;/i&gt; have everything?&lt;/p&gt;

&lt;p&gt;It would be silly not to deliver a present to someone who has been trying the whole year to be nice. Luckily, to avoid such a blunder, he made a list beforehand:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;%santas_list&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;presents&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Rob'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Lisa'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Brian'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Amy'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Chris'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Larry'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Scott'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Sabina'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Shirley'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Richard'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Amy'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;other&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'candy canes'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'fireplace break-in tool'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'cookies degustation kit'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Now all he needs to do is compare it to the list of things he packed. He asked the elves how should he do it, and they suggested giving a try to recently released module &lt;a href="https://metacpan.org/module/Value::Diff"&gt;Value::Diff&lt;/a&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;br /&gt;19:&amp;nbsp;&lt;br /&gt;20:&amp;nbsp;&lt;br /&gt;21:&amp;nbsp;&lt;br /&gt;22:&amp;nbsp;&lt;br /&gt;23:&amp;nbsp;&lt;br /&gt;24:&amp;nbsp;&lt;br /&gt;25:&amp;nbsp;&lt;br /&gt;26:&amp;nbsp;&lt;br /&gt;27:&amp;nbsp;&lt;br /&gt;28:&amp;nbsp;&lt;br /&gt;29:&amp;nbsp;&lt;br /&gt;30:&amp;nbsp;&lt;br /&gt;31:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;%santas_package&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;presents&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Richard'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Rob'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Lisa'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Larry'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Brian'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Scott'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Sabina'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Shirley'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Amy'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'for Chris'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;other&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="structure"&gt;[&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'cookies degustation kit'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'candy canes'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'sleigh repair tool'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="single"&gt;'fireplace break-in tool'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="version"&gt;v5.36&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Value::Diff&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;Data::Dumper&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;diff&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;%santas_list&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;%santas_package&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="word"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$missing&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="single"&gt;'looks like you forgot something: '&lt;/span&gt; &lt;span class="operator"&gt;.&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$missing&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="single"&gt;'all looks good...'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;diff&lt;/code&gt; function used here recursively compares its two first arguments, creating a new data structure which contains the differences. It returns a true value if the arguments are not equal, and the diff is put into &lt;code&gt;$missing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this program, Santa got his answer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    looks like you forgot something: $VAR1 = {
              &amp;#39;presents&amp;#39; =&amp;gt; [
                              &amp;#39;for Amy&amp;#39;
                            ]
            };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right! There are two Amys on the list, and he only has a present for one. Of course he doesn&amp;#39;t need last names, he simply distinguishes them by their first names alone.&lt;/p&gt;

&lt;p&gt;Rudolph liked the new module, but since he&amp;#39;s a reindeer he has major difficulties typing on the keyboard. He read the documentation thoroughly instead and noticed that the module only finds missing elements, not the excessive ones! So Santa reversed the order of values and tried again:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;diff&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;%santas_package&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;%santas_list&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="word"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$excess&lt;/span&gt;&lt;span class="structure"&gt;))&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="single"&gt;'looks like you have something extra: '&lt;/span&gt; &lt;span class="operator"&gt;.&lt;/span&gt; &lt;span class="word"&gt;Dumper&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$excess&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;else&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;say&lt;/span&gt; &lt;span class="single"&gt;'all looks very good now...'&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;&lt;code&gt;diff&lt;/code&gt; function tries to find a Perl data structure which describes the patch for the second value to be equal to the first one. With arguments order reversed in the second call, Santa could see the full picture:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    looks like you forgot something: $VAR1 = {
              &amp;#39;presents&amp;#39; =&amp;gt; [
                              &amp;#39;for Amy&amp;#39;
                            ]
            };
    looks like you have something extra: $VAR1 = {
              &amp;#39;other&amp;#39; =&amp;gt; [
                           &amp;#39;sleigh repair tool&amp;#39;
                         ]
            };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well of course he doesn&amp;#39;t need that, he can use magic instead!&lt;/p&gt;

&lt;p&gt;It was getting late and the fireplace started to flicker out. Happy with his program, Santa put his laptop away, stood up and picked up his presents bag. Ho Ho Ho, it&amp;#39;s time for the delivery!&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-09T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Bartosz Jarzyna</name>
    </author>
  </entry>
  <entry>
    <title>A Perlmas Tree</title>
    <link href="http://perladvent.org/2022/2022-12-08.html"/>
    <id>http://perladvent.org/2022/2022-12-08.html</id>
    <summary type="html">&lt;div class='pod'&gt;&lt;h3 id="How-to-Buy-a-Christmas-Tree-on-Christmas-Day-:-S"&gt;How to Buy a Christmas Tree on Christmas Day :-S&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s just before Christmas Eve. The air smells of cinnamon and gingerbread, the most beautiful Christmas melodies sound everywhere, the Christmas goose has already been ordered, but wait... A very important detail is missing. Rudolph, the Christmas grouch, did not buy a Christmas tree! And so his wife Fjolla, a Christmas elf, asks him to finally get a tree. The same procedure as every year...&lt;/p&gt;

&lt;p&gt;But it&amp;#39;s just before Christmas Eve... And so the Christmas tree stand of Knecht Ruprecht is sold out.&lt;/p&gt;

&lt;h3 id="A-Do-it-Youself-Tree-with-perl"&gt;A Do-it-Youself Tree with perl&lt;/h3&gt;

&lt;p&gt;&amp;quot;No problem&amp;quot;, Rudolph thinks. Nowadays you can create a Christmas tree with perl. There was a wonderful module by Dave Cross in the &lt;a href="https://www.perladvent.org/2018/2018-12-12.html"&gt;Perl Advent Calendar 2018&lt;/a&gt;. But to find the perfect fitting tree, you have to hack the code. Therefore a GUI is needed. And why not to try the new module &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt; is an object oriented binding to the &lt;a href="https://www.enlightenment.org/about-efl"&gt;Enlightenment Foundation Libraries&lt;/a&gt;. And even if it is a very young module, the Elementary part (the widget toolkit) is already very usable. But let&amp;#39;s see:&lt;/p&gt;

&lt;p&gt;But before take a deep dive into &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt; we make a global hash for the settings to &lt;a href="https://metacpan.org/module/SVG::ChristmasTree"&gt;SVG::ChristmasTree&lt;/a&gt; with nice defaults on top of our code:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;%settings&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;layers&lt;/span&gt;        &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;width&lt;/span&gt;         &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;1000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;trunk_length&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;pot_height&lt;/span&gt;    &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;200&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;leaf_colour&lt;/span&gt;   &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'rgb(9,186,10)'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;bauble_colour&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'rgb(212,175,55)'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;trunk_colour&lt;/span&gt;  &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'rgb(139,69,19)'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;pot_colour&lt;/span&gt;    &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="single"&gt;'rgb(133,100,69)'&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;All &lt;a href="https://metacpan.org/module/pEFL::Elm"&gt;pEFL::Elm&lt;/a&gt; applications share the following basic framework, which initializes Elementary, runs the Mainloop and do cleanup when the program exists:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;SVG::ChristmasTree&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="comment"&gt;# for creating the Christmas tree&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; &lt;span class="word"&gt;pEFL::Evas&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt; &lt;span class="comment"&gt;# for EVAS_CONSTANTS_&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="word"&gt;pEFL::Elm::init&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="arrayindex"&gt;$#ARGV&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;@ARGV&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;pEFL::Elm::policy_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;ELM_POLICY_QUIT&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;ELM_POLICY_QUIT_LAST_WINDOW_CLOSED&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="comment"&gt;### (...GUI CODE COMES HERE...)&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;pEFL::Elm::run&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;pEFL::Elm::shutdown&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Pehaps a little explanation to the policies set with &lt;code&gt;pEFL::Elm::policy_set()&lt;/code&gt;: this causes the Mainloop started by &lt;code&gt;pEFL::Elm::run()&lt;/code&gt; to quit automatically when the last window of the application is closed.&lt;/p&gt;

&lt;p&gt;To create a standard window with a standard background we use the special constructor &lt;code&gt;pEFL::Elm::Win-&amp;gt;util_standard_add($name, $title)&lt;/code&gt;. The autodel setting means that if someone hits the close button, or otherwise uses some normal environment mechanism (keybinding, menu) to close the window, the window object is automatically deleted on the application side. If you don&amp;#39;t do this, these mechanisms will not work and the window will stay around if you do not manually add a callback to handle &amp;quot;delete, request&amp;quot; events.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$win&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Win&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;util_standard_add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;christmas-tree&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Christmas Tree&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$win&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;autodel_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$win&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;resize&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;800&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;800&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;The content will be framed in a &lt;a href="https://metacpan.org/module/pEFL::Elm::Box"&gt;pEFL::Elm::Box&lt;/a&gt;. This basic container of Elementary is just a linear method of arranging widgets horizontally or vertically. Attention should be paid to the functions &lt;code&gt;$widget-&amp;gt;size_hint_weight|align_set(x_expand|align, y_expand_align)&lt;/code&gt;. With these you control hints for expanding and aligning of the widget packed to the container box. Possible arguments are 0.0 (no expand/align to left/top) to 1.0 (expand/align to the right/bottom). If you want the widget to take up all the space in its parent you can use the special constants &lt;code&gt;EVAS_HINT_EXPAND&lt;/code&gt; and &lt;code&gt;EVAS_HINT_FILL&lt;/code&gt; together. Because it is much paperwork, we create a function for widgets that expand and fill in all directions:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$frame&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Frame&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$win&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;_expand_widget&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$frame&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$container&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Box&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$win&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;_expand_widget&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$frame&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;style_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;pad_large&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$frame&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;content_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$frame&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt; &lt;span class="symbol"&gt;$win&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;resize_object_add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$frame&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="operator"&gt;...&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;_expand_widget&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$widget&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$widget&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;size_hint_weight_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_EXPAND&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_EXPAND&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$widget&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;size_hint_align_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_FILL&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_FILL&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In the container box we pack three widgets:&lt;/p&gt;

&lt;dl&gt;

&lt;dt&gt;1. An pEFL::Elm::Image widget that serves as a viewer&lt;/dt&gt;
&lt;dd&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$viewer&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Image&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;_expand_widget&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt; &lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pack_end&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/dd&gt;
&lt;dt&gt;2. An pEFL::Elm::Table widget where the controls of the several settings are aligned&lt;/dt&gt;
&lt;dd&gt;

&lt;p&gt;A table is like a box with 2 dimensions. An item of the table can span multiple columns and rows, and even overlap with other items.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$table&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;padding_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;10&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;size_hint_weight_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_EXPAND&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;   &lt;span class="comment"&gt;# Expand and fill only to the&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;size_hint_align_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_FILL&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;      &lt;span class="comment"&gt;# X-Direction&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt; &lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pack_end&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;For changing the settings of the tree we add several sliders.&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="word"&gt;_add_slider_setting&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;4&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;label&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Width of the tree&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;min&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;700&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;max&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;3000&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;key&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;_add_slider_setting&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;5&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;label&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Layers&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;min&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;max&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;8&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;key&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;layers&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;_add_slider_setting&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;6&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;label&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Trunk length&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;min&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;50&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;max&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;300&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;key&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;trunk_length&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&lt;span class="word"&gt;_add_slider_setting&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="number"&gt;7&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;label&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Pot height&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;min&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;100&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;max&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="number"&gt;400&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="word"&gt;key&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;pot_height&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;For this we use the custom function &lt;code&gt;_add_slider_settings($table,$row,$option_hash)&lt;/code&gt;:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;br /&gt;13:&amp;nbsp;&lt;br /&gt;14:&amp;nbsp;&lt;br /&gt;15:&amp;nbsp;&lt;br /&gt;16:&amp;nbsp;&lt;br /&gt;17:&amp;nbsp;&lt;br /&gt;18:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;_add_slider_setting&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$row&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$opts&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$label&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Label&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$label&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;text_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$opts&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;label&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$label&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt; &lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pack&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$label&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$row&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$spinner&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Slider&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;size_hint_align_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_FILL&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="float"&gt;0.5&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;size_hint_weight_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="word"&gt;EVAS_HINT_EXPAND&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="float"&gt;0.0&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;min_max_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$opts&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;min&lt;/span&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$opts&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;max&lt;/span&gt;&lt;span class="structure"&gt;});&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;step_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;indicator_format_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;%1.0f&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;value_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$settings&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$opts&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;key&lt;/span&gt;&lt;span class="structure"&gt;}});&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt; &lt;span class="symbol"&gt;$table&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pack&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$row&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;2&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$spinner&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;smart_callback_add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;delay,changed&amp;quot;&lt;/span&gt; &lt;span class="operator"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$settings&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="symbol"&gt;$opts&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="structure"&gt;{&lt;/span&gt;&lt;span class="word"&gt;key&lt;/span&gt;&lt;span class="structure"&gt;}}&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;int&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="magic"&gt;$_&lt;/span&gt;&lt;span class="structure"&gt;[&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="structure"&gt;]&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;value_get&lt;/span&gt;&lt;span class="structure"&gt;());}&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="core"&gt;undef&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Most of the code should be self-explanatory. Therefore only two little explanations:&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;$spinner-&amp;gt;indicator_format_set(&amp;quot;%1.0f&amp;quot;);&lt;/code&gt; the popup for the actual value shows only integers.&lt;/p&gt;

&lt;p&gt;Very important is the &lt;code&gt;$spinner-&amp;gt;smart_callback_add(&amp;quot;eventName&amp;quot;,\&amp;amp;eventSub,$data)&lt;/code&gt;. With this you can register an event handler for smart callbacks, the most often used event types in EFL. The callback function takes as parameters the additional &lt;code&gt;$data&lt;/code&gt; defined in the &lt;code&gt;$widget-&amp;gt;smart_callback_add()&lt;/code&gt;, the object to which the event happened, and the event info data, which depends on the object type and the event at play. So the signature is&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;smart_event_cb&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$data&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$obj&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="symbol"&gt;$evInfo&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;In the example code we use an anonymous subroutine as event handler that sets the key in the setting hash with the actual value of the spinner object.&lt;/p&gt;

&lt;/dd&gt;
&lt;dt&gt;3. Last we add the button to create the Christmas tree to the container-box&lt;/dt&gt;
&lt;dd&gt;

&lt;p&gt;and show the window (don&amp;#39;t forget this!!)&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$btn&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;pEFL::Elm::Button&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$btn&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;text_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;Create a new Christmas Tree&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$btn&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;smart_callback_add&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;clicked&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;&amp;amp;create_christmas_tree&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$btn&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;();&lt;/span&gt; &lt;span class="symbol"&gt;$container&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;pack_end&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$btn&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="symbol"&gt;$win&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;show&lt;/span&gt;&lt;span class="structure"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;p&gt;Again we register a callback to the follwing event handler that creates the SVG file and let the viewer show the created tree. A little hack is needed with &lt;code&gt;$viewer-&amp;gt;file_set(undef,&amp;quot;&amp;quot;)&lt;/code&gt;. Otherwise the viewer doesn&amp;#39;t know that the file has changed:&lt;/p&gt;

&lt;table class='code-listing'&gt;&lt;tr&gt;&lt;td class='line-numbers'&gt;&lt;br /&gt;&lt;code&gt;1:&amp;nbsp;&lt;br /&gt;2:&amp;nbsp;&lt;br /&gt;3:&amp;nbsp;&lt;br /&gt;4:&amp;nbsp;&lt;br /&gt;5:&amp;nbsp;&lt;br /&gt;6:&amp;nbsp;&lt;br /&gt;7:&amp;nbsp;&lt;br /&gt;8:&amp;nbsp;&lt;br /&gt;9:&amp;nbsp;&lt;br /&gt;10:&amp;nbsp;&lt;br /&gt;11:&amp;nbsp;&lt;br /&gt;12:&amp;nbsp;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;td class='code'&gt;&lt;br /&gt;&lt;code&gt;&lt;span class="keyword"&gt;sub&lt;/span&gt; &lt;span class="word"&gt;create_christmas_tree&lt;/span&gt; &lt;span class="structure"&gt;{&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$obj&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="symbol"&gt;$evinfo&lt;/span&gt;&lt;span class="structure"&gt;)&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="magic"&gt;@_&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$tree&lt;/span&gt; &lt;span class="operator"&gt;=&lt;/span&gt; &lt;span class="word"&gt;SVG::ChristmasTree&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;new&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="cast"&gt;\&lt;/span&gt;&lt;span class="symbol"&gt;%settings&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;open&lt;/span&gt; &lt;span class="word"&gt;my&lt;/span&gt; &lt;span class="symbol"&gt;$fh&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;tree.svg&amp;quot;&lt;/span&gt; &lt;span class="operator"&gt;or&lt;/span&gt; &lt;span class="word"&gt;die&lt;/span&gt; &lt;span class="double"&gt;&amp;quot;Could not write to ./tree.svg: $!\n&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;print&lt;/span&gt; &lt;span class="symbol"&gt;$fh&lt;/span&gt; &lt;span class="symbol"&gt;$tree&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;as_xml&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="word"&gt;close&lt;/span&gt; &lt;span class="symbol"&gt;$fh&lt;/span&gt;&lt;span class="structure"&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;file_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="core"&gt;undef&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="symbol"&gt;$viewer&lt;/span&gt;&lt;span class="operator"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="word"&gt;file_set&lt;/span&gt;&lt;span class="structure"&gt;(&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;./tree.svg&amp;quot;&lt;/span&gt;&lt;span class="operator"&gt;,&lt;/span&gt;&lt;span class="double"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="structure"&gt;);&lt;/span&gt;&lt;br /&gt;&lt;span class="structure"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;br /&gt;&amp;nbsp;&lt;/td&gt;&lt;/table&gt;

&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id="Conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this little introduction to &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt;. Because the Perl advent articles should be light and trivial, the explained version only gives you control over the numeric settings of &lt;a href="https://metacpan.org/module/SVG::ChristmasTree"&gt;SVG::ChristmasTree&lt;/a&gt;. But at &lt;a href="https://github.com/MaxPerl/PerlAdvent2022"&gt;my Perl Advent 2022 github repository&lt;/a&gt; you find also an advanced version where you can also alter the colors of the tree, baubles and pot. The additions adjust the colorselector examples under &lt;code&gt;examples/colorselector.pl&lt;/code&gt; in the &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt; distribution and hopefully are understandable.&lt;/p&gt;

&lt;p&gt;If you want to get deep into programming with &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt;, see the explanations at &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt;. As the API of &lt;a href="https://metacpan.org/module/pEFL"&gt;pEFL&lt;/a&gt; is (apart from its object-oriented interface) deliberately kept close to the Elementary C API, the documentations at the &lt;a href="https://www.enlightenment.org/develop/legacy/api/c/start#"&gt;Enlightenment docs&lt;/a&gt; should help you, too. The Perl method names usually remove the prefix at the beginning of the C functions. Therefore applying the C documentation should be no problem.&lt;/p&gt;

&lt;p&gt;And of course, you can get help at &lt;a href="https://github.com/MaxPerl/Perl-Efl"&gt;Github&lt;/a&gt;. And perhaps you want to contribute and to make the pEFL bindings better? In any case there is much to do :-)&lt;/p&gt;

&lt;p&gt;Merry Christmas &amp;#x1F384; &amp;#x1F384; &amp;#x1F384; &amp;#x1F384; &amp;#x1F384; &amp;#x1F384;&lt;/p&gt;

&lt;/div&gt;</summary>
    <updated>2022-12-08T00:00:00Z</updated>
    <category term="Perl"/>
    <author>
      <name>Maximilian Lika</name>
    </author>
  </entry>
  <entry>
    <title>Good bye PrePAN</title>
    <link rel="alternate" href="https://blogs.perl.org/users/aristotle/2022/12/goodbye-prepan.html"/>
    <id>tag:blogs.perl.org,2022:/users/aristotle//15.10966</id>
    <published>2022-12-05T21:19:09Z</published>
    <updated>2022-12-06T19:00:53Z</updated>
    <author>
        <name>Aristotle</name>
        <uri>http://plasmasturm.org/</uri>
    </author>
    <category term="Reaction" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/aristotle/">
        <![CDATA[<p>The domain was snapped up by a squatter some time ago. 🙁 What a pity, I always enjoyed those conversations.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#593 - Perl on DEV.to</title>
    <link rel="alternate" href="https://perlweekly.com/archive/593.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I registered to <a href="https://dev.to/">DEV.to</a> in 2017, more than 5 years ago. Posted a few articles with rather limited success: less than 10 people looked at the articles. Then in 2020 I posted a few more articles. On one of them <a href="https://dev.to/szabgab/tests-are-awesome-3i63">Tests are awesome!</a> I got as many as 300 readers, but the others have not received much love so I did not continue publishing. In 2021 I had another experiment when I published <a href="https://dev.to/szabgab/perl-modules-with-their-own-web-site-2gmo">Perl modules with their own web site</a> on which there were some 600 visitors. Primarily the readers of the Perl Weekly newsletter. I published a few more articles with readers in the low 10s. A few weeks ago I started to publish again. This time several of my articles got above 100 viewers and one, <a href="https://dev.to/szabgab/open-source-development-courses-5d4b">Open Source Development Courses</a> is already above 1100 viewers. I started to get around 600 readers a day. That's already really valuable!</p>
<p>So what happened? There were a couple of changes: 1. There are more people on DEV. 2. I publish a lot more articles that appeal to a wider range of people. 3. There is a sort-of network effect. The more people up-vote and bookmark (the two kinds of reactions on DEV) my articles the more people will see it.</p>
<p>The nice thing about DEV is that I can republish the articles I published elsewhere (e.g. on <a href="https://perlmaven.com/">PerlMaven</a>, on <a href="https://code-maven.com/">Code-Maven</a>, or <a href="https://blogs.perl.org/">blogs.perl.org</a>), and also I can set the canonical URL of each article on DEV to the original one on my blog. That way I get the visitors on DEV as well, but the 'Google juice' the articles receive will flow over to my sites. It seems like a win-win for DEV and authors who have blogs elsewhere. You can even configure DEV to pull your RSS feed and create drafts from your articles published elsewhere. I even started to republish the content of the <a href="https://dev.to/szabgab/perl-weekly-591-less-than-50-use-ci-4966">Perl Weekly</a>.</p>
<p>So here is what I suggest. If you already write about Perl elsewhere, republish those articles on DEV and tag them with <b>perl</b>. If you are primarily a reader of articles, then register on <a href="https://dev.to/">DEV</a> and start up-voting the <a href="https://dev.to/t/perl">Perl-related posts</a> you like. You can even follow a few authors there, get notified when they have new posts, and up-vote those to encourage them to write even more.</p>
<p>Alternatively, you can watch the <a href="https://perl.theplanetarium.org/">Perl Planetarium</a>. It already follows the <b>perl</b> tag on DEV.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/593.html</id>
    <published>2022-12-05T10:00:00Z</published>
    <updated>2022-12-05T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1808027491351841833</id>
    <published>2022-12-04T08:55:00.000+01:00</published>
    <updated>2022-12-04T08:55:16.047+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxxi) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.74' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.74&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.73 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.27&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.25 was 1 year, 6 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.90&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 6.89 was 3 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DDICK/Firefox-Marionette-1.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Firefox::Marionette&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Automate the Firefox browser with the Marionette protocol &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.33&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 3 years, 4 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-1.882' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Many-Core Engine for Perl providing parallel processing capabilities &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.882&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 91&lt;/li&gt;  &lt;li&gt;Previous version: 1.881 was 1 month, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARIOROY/MCE-Shared-1.879' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MCE::Shared&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MCE extension for sharing data supporting threads and processes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.879&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.878 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.013&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 2.010 was 1 year, 8 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.8007' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8007&lt;/strong&gt; on 2022-12-02&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8006 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.73' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.73&lt;/strong&gt; on 2022-12-03&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 0.71 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.057' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.057&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.056 was 2 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.144' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.144&lt;/strong&gt; on 2022-12-01&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 0.142 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.142' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.142&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 125&lt;/li&gt;  &lt;li&gt;Previous version: 1.140 was 1 year, 8 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KARASIK/Prima-1.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Prima&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a perl graphic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.67&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.66 was 3 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9664' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9664&lt;/strong&gt; on 2022-11-30&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9662 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAYASHI/Term-ReadLine-Gnu-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::ReadLine::Gnu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for the GNU Readline/History Library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2022-11-27&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.44 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000136' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000136&lt;/strong&gt; on 2022-11-29&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000133 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1808027491351841833/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxi-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1808027491351841833"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1808027491351841833"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/cdxxi-16-great-cpan-modules-released.html" title="(cdxxi) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1836666147745065918</id>
    <published>2022-12-04T08:51:00.001+01:00</published>
    <updated>2022-12-04T08:51:11.510+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxiv) metacpan weekly report - Perl::Dist::APPerl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 56&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/12/04 07:50:38 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FD" target="_blank"&gt;IO::FD&lt;/a&gt; - Faster accept, socket, listen with file descriptors, not handles&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tee" target="_blank"&gt;IO::Tee&lt;/a&gt; - Multiplex output to multiple output handles&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/KCP" target="_blank"&gt;KCP&lt;/a&gt; - Perl extension for skywind3000/kcp&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Joystick" target="_blank"&gt;Linux::Joystick&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Logging::Simple" target="_blank"&gt;Logging::Simple&lt;/a&gt; - Simple debug logging by number, with customizable labels and formatting&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/results" target="_blank"&gt;results&lt;/a&gt; - why throw exceptions when you can return them?&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::RunAlone" target="_blank"&gt;Role::RunAlone&lt;/a&gt; - prevent multiple instances of a script from running&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM::Numpy" target="_blank"&gt;SPVM::Numpy&lt;/a&gt; - Numpy is the Python/NumPy porting to Perl/SPVM&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Plugin::Cache" target="_blank"&gt;Template::Plugin::Cache&lt;/a&gt; - cache output of templates&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Terminal::Identify" target="_blank"&gt;Terminal::Identify&lt;/a&gt; - Perl extension for recognising the terminal emulator in use.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=62)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CSVUtils" target="_blank"&gt;App::CSVUtils&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::grindperl" target="_blank"&gt;App::grindperl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/bareword::filehandles" target="_blank"&gt;bareword::filehandles&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro" target="_blank"&gt;Coro&lt;/a&gt; (+1=76)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Run" target="_blank"&gt;Dist::Zilla::Plugin::Run&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Sender" target="_blank"&gt;Email::Sender&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Simple" target="_blank"&gt;Email::Simple&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::ParseXS" target="_blank"&gt;ExtUtils::ParseXS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Ordered" target="_blank"&gt;Hash::Ordered&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/indirect" target="_blank"&gt;indirect&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::ger" target="_blank"&gt;Log::ger&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Metrics::Any" target="_blank"&gt;Metrics::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=292)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::Getopt" target="_blank"&gt;MooseX::Getopt&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/multidimensional" target="_blank"&gt;multidimensional&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IMAP::Simple" target="_blank"&gt;Net::IMAP::Simple&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Server" target="_blank"&gt;Net::Server&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Bangs" target="_blank"&gt;Perl::Critic::Bangs&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Pulp" target="_blank"&gt;Perl::Critic::Pulp&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perlfaq" target="_blank"&gt;perlfaq&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Greylist" target="_blank"&gt;Plack::Middleware::Greylist&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Tree" target="_blank"&gt;Pod::Tree&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/strictures" target="_blank"&gt;strictures&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tee" target="_blank"&gt;Tee&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Harness" target="_blank"&gt;Test::Harness&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=107)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Vlc::Engine" target="_blank"&gt;Vlc::Engine&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::LibXML::PrettyPrint" target="_blank"&gt;XML::LibXML::PrettyPrint&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1836666147745065918/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxiv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1836666147745065918"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1836666147745065918"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/12/dxxxiv-metacpan-weekly-report.html" title="(dxxxiv) metacpan weekly report - Perl::Dist::APPerl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>The Weekly Challenge 193</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/12/03#pwc193" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, $n &gt; 0. Write a script to find all possible binary numbers of 
size $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub binary_numbers_size_n{
    my($n) = @_;
    my @numbers = map {
        sprintf("%0${n}b", $_)
    } 0 .. 2**$n - 1;
    return @numbers;
}

MAIN:{
    say join(", ", binary_numbers_size_n(2));
    say join(", ", binary_numbers_size_n(3));
    say join(", ", binary_numbers_size_n(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
00, 01, 10, 11
000, 001, 010, 011, 100, 101, 110, 111
0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I think it's fair to say that &lt;code&gt;sprintf&lt;/code&gt; is doing most of the work here! For those 
unfamiliar, the format string &lt;code&gt;"%0${n}b"&lt;/code&gt; means &lt;em&gt;print the number as binary of length $n,
left pad with 0s&lt;/em&gt;.  &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of strings of same length, @s. Write a script to find the odd string 
in the given list. Use positional alphabet values starting 
with 0, i.e. a = 0, b = 1, ... z = 25.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub odd_string{
    my(@strings) = @_;
    my %differences;
    for my $string (@strings){
        my $current;
        my $previous;
        my @differences;
        map {
            unless($previous){
                $previous = $_;
            }
            else{
                $current = $_;
                push @differences, ord($current) - ord($previous);
                $previous = $current;
            }        
        } split(//, $string);
        my $key = join(",", @differences);
        my $size_before = keys %differences;
        $differences{$key} = undef;
        my $size_after = keys %differences;
        return $string if $size_before &gt; 0 &amp;&amp; $size_after - $size_before == 1;
    }
    return undef;
}

MAIN:{
    say odd_string(qw/adc wzy abc/);
    say odd_string(qw/aaa bob ccc ddd/);
    say odd_string(qw/aaaa bbbb cccc dddd/) || "no odd string found";
    say odd_string(qw/aaaa bbob cccc dddd/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
abc
bob
no odd string found
bbob
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is one main assumption here and that is that the list of strings is going to be of
length three or more. If the array has length one then can we say that single string is 
"odd" in and of itself? And if we have only two strings and they aren't the same which is 
the the odd one?&lt;/p&gt;

&lt;p&gt;The basic steps of this solution are:&lt;/p&gt;

&lt;p&gt;1) For each string split it into an array of characters.&lt;/p&gt;

&lt;p&gt;2) Compute the differences. This is done in the &lt;code&gt;map&lt;/code&gt;. I'll concede that this is a 
somewhat unusual use of &lt;code&gt;map&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;3) Transform the differences into a single string to be used as a hash key using &lt;code&gt;join&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;4) If we add this differences based key to the hash and the hash size changes by 
1 (assuming it is a non-empty hash) then we know we have found the unique "odd string" 
which is then returned.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-193/"&gt;Challenge 193&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc193</id>
    <published>2022-12-03T19:04:00-05:00</published>
    <updated>2022-12-03T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AI-TensorFlow-Libtensorflow">AI-TensorFlow-Libtensorflow</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.0.1</td>
<td>0.0.2</td>
<td>Bindings for Libtensorflow deep learning library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStructuredData">Acme-CPANModules-DiffingStructuredData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules to diff structured data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-DiffingStuffs">Acme-CPANModules-DiffingStuffs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules/applications to diff various stuffs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-RenamingFiles">Acme-CPANModules-RenamingFiles</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of Perl modules (and scripts) to rename multiple files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WrappingText">Acme-CPANModules-WrappingText</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>List of modules and utilities to wrap text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Font-Uni">Alien-Font-Uni</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.0_1</td>
<td>0.3</td>
<td>provide Unifont trutype file or location</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libui">Alien-libui</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Build and Install libui: A portable GUI library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-psl">Alien-psl</a></td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Discover or download and install psl (Public Suffix List Library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GUI-Cellgraph">App-GUI-Cellgraph</a></td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>0.01_0</td>
<td>0.02</td>
<td>draw pattern by cellular automaton</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-OpenMbox">App-OpenMbox</a></td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>0.12</td>
<td>0.12</td>
<td>The methods for email management used in OpenMbox.net</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ParseCommandLineUtils">App-ParseCommandLineUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for parsing command-line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-StringQueryToRegexpUtils">App-StringQueryToRegexpUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLIs for String::Query::To::Regexp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-TextWrapUtils">App-TextWrapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to text wrapping</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Business-PagOnline">Business-PagOnline</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library for Unicredit's PagOnline payment system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Popt">CLI-Popt</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Parse CLI parameters via popt(3)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Clearbuilt-Excelerator">Clearbuilt-Excelerator</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2.0000</td>
<td>2.0001</td>
<td>Write XLSX files in a Clearbuilt-standard way</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Complete-Random">Complete-Random</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Complete from a list of random string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Class-PseudoEnum">DBIx-Class-PseudoEnum</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0002</td>
<td>Schema-based enumerations independent of database</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ViewCache">Dancer2-Plugin-ViewCache</a></td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Create a code for a guest user to use to view a page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DateTime-TimeZone-Catalog-Extend">DateTime-TimeZone-Catalog-Extend</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Extend DateTime::TimeZone catalog</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Deprecations-Environmental">Devel-Deprecations-Environmental</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1.000</td>
<td>1.000</td>
<td>deprecations for your code's surroundings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Util-Current">Dist-Util-Current</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Guess the current Perl distribution name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Test-Prereqs-Latest">Dist-Zilla-Plugin-Test-Prereqs-Latest</a></td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Tests your module has up to date dependencies</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Experian-IDAutho">Experian-IDAutho</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2.53</td>
<td>2.53</td>
<td>Experian's ID Authenticate service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Food-Ratio">Food-Ratio</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.01</td>
<td>calculate ingredient ratios</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-AsyncAwait-Metrics">Future-AsyncAwait-Metrics</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>report metrics from Future::AsyncAwait to Metrics::Any</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-Marad">Game-Marad</a></td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>0.01</td>
<td>0.05</td>
<td>a board game for two players</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-TileMap">Game-TileMap</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Representation of tile-based two-dimensional rectangular maps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geo-FIT">Geo-FIT</a></td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1.01</td>
<td>1.03</td>
<td>Decode Garmin FIT files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Graphics-Layout-Kiwisolver">Graphics-Layout-Kiwisolver</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.002</td>
<td>0.002</td>
<td>API for Kiwisolver constraint solver</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Blitz">HTML-Blitz</a></td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>high-performance, selector-based, content-aware HTML template engine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Macro-Simple">Macro-Simple</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.003</td>
<td>preprocessor-like macros in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Markdown-ODF">Markdown-ODF</a></td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Create ODF documents from Markdown</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-BlackScholesMerton">Math-Business-BlackScholesMerton</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1.25</td>
<td>1.25</td>
<td>Algorithm of Math::Business::BlackScholesMerton for binary and non-binary options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Business-Lookback">Math-Business-Lookback</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>The Black-Scholes formula for Lookback options.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-WebSocketProxy-Backend-ConsumerGroups">Mojo-WebSocketProxy-Backend-ConsumerGroups</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Class for communication with backend by sending messaging through redis streams.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-HTMX">Mojolicious-Plugin-HTMX</a></td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Mojolicious Plugin for htmx</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Async-Blockchain">Net-Async-Blockchain</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>base for blockchain subscription clients.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-FattureInCloud">Net-FattureInCloud</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.1.0</td>
<td>0.1.1</td>
<td>Perl library with MINIMAL interface to use FattureInCloud (FIC) API version 2.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenTelemetry-TraceContext-W3C">OpenTelemetry-TraceContext-W3C</a></td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>0.01</td>
<td>0.02</td>
<td>W3C Trace Context implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-List-Rule">Path-List-Rule</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Path::Iterator::Rule on an list of paths</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Perl">Perinci-Sub-XCompletionBundle-Perl</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perinci-Sub-XCompletionBundle-Riap">Perinci-Sub-XCompletionBundle-Riap</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.103</td>
<td>0.103</td>
<td>XCompletion routines related to Riap</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls">Perl-Critic-Policy-Subroutines-ProhibitAmbiguousFunctionCalls</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1.002</td>
<td>1.002</td>
<td>Don't call fully qualified function methods without parens</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Dist-APPerl">Perl-Dist-APPerl</a></td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Actually Portable Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Middleware-Greylist">Plack-Middleware-Greylist</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.3.0</td>
<td>throttle requests with different rates based on net blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/REFECO-Blockchain-Contract-Solidity-ABI">REFECO-Blockchain-Contract-Solidity-ABI</a></td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>0.002</td>
<td>0.004</td>
<td>Contract ABI utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Runtime-Debugger">Runtime-Debugger</a></td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>0.01</td>
<td>0.10</td>
<td>Debug perl wihle its running.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Numpy">SPVM-Numpy</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Numpy is the Python/NumPy porting to Perl/SPVM</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SQL-Load">SQL-Load</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>This module is a simple SQL file loader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Simple-Filter-Macro">Simple-Filter-Macro</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.08</td>
<td>Perl extension for creating macro modules that are expanding use declarations inline in Perl code.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Socket-More">Socket-More</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1.0</td>
<td>v0.2.0</td>
<td>Interface and scoped passive addressing routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Query-To-Regexp">String-Query-To-Regexp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Convert query to regular expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sub-Boolean">Sub-Boolean</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>1.000000</td>
<td>make XS true/false subs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Subunit">Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tags-HTML-Table-View">Tags-HTML-Table-View</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tags helper for table view.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-QRCode-Compact">Term-QRCode-Compact</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>create QR codes for display in the terminal</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Subunit">Test-Subunit</a></td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>0.1</td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Types-ULID">Types-ULID</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>ULID type constraints</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Value-Diff">Value-Diff</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>find out the difference between two Perl values</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebSerivce-SendBird">WebSerivce-SendBird</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>client to work with SendBird API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-CustomerIO">WebService-Async-CustomerIO</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>unofficial support for the Customer.io service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Onfido">WebService-Async-Onfido</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Webservice to connect to Onfido API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-Segment">WebService-Async-Segment</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Unofficial support for the Segment service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-Async-SmartyStreets">WebService-Async-SmartyStreets</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Access SmartyStreet API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-GAMSTOP">WebService-GAMSTOP</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.003</td>
<td>0.003</td>
<td>GAMSTOP API Client Implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/results">results</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.002</td>
<td>why throw exceptions when you can return them?</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>67</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/CLEARBLT">CLEARBLT</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/CTRLSOFT">CTRLSOFT</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/JMATES">JMATES</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LICHTKIND">LICHTKIND</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GDT">GDT</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/EGOR">EGOR</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/MBARBON">MBARBON</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/REFECO">REFECO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HENRYR">HENRYR</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/TIMKA">TIMKA</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/ABEVERLEY">ABEVERLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/GAHAYES">GAHAYES</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/PATJOL">PATJOL</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LANCEW">LANCEW</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/MAUKE">MAUKE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-TensorFlow-Libtensorflow ZMUGHAL 0.0.1 0.0.2 Bindings for Libtensorflow deep learning library Acme-CPANModules-DiffingStructuredData PERLANCAR 0.001 0.001 List of modules to diff structured data Acme-CPANModules-DiffingStuffs PERLANCAR 0.001 0.001 List of modules/applications to diff various stuffs Acme-CPANModules-RenamingFiles PERLANCAR 0.001 0.001 List of Perl modules (and scripts) to rename multiple files Acme-CPANModules-WrappingText PERLANCAR 0.001 0.001 … <a href="https://perlancar.wordpress.com/2022/12/01/list-of-new-cpan-distributions-nov-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2002</id>
    <published>2022-12-01T00:44:15Z</published>
    <updated>2022-12-01T00:44:15Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#592 - Perl Blogging?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/592.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>We all know not many people blog about <strong>Perl</strong> anymore. Are we doing anything to get it back on track? Well, unfortunately again, nothing is happening on that front either.</p>
<p>But, hey, there is still hope and handful of <strong>Perl</strong> fans doing their best. One of them is our chief editor, <strong>Gabor Szabo</strong>. He has been running <a href="https://perlmaven.com">Perl Maven</a> for years now and many of us benefitted from his work. He recently started blogging on <a href="https://dev.to/szabgab">Dev.To</a>. I request all the <strong>Perl</strong> fans to follow him and like blog post. I didn't have the account there before so I decided to create <a href="https://dev.to/manwar">personal account</a>. Although I no longer blog at all but this is going to change soon. Earlier I used to blog on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a> but then I moved to <a href="https://theweeklychallenge.org/blogs">The Weekly Challenge</a> recently.</p>
<p>Talking about blogging, how can I miss one name, <strong>Flavio Poletti</strong>? He has been blogging daily for years now. Feel free to check out his <a href="https://github.polettix.it/ETOOBUSY">work here</a>. Kudos to him for his effort.</p>
<p>I would like to mention another name, <strong>Olaf Alders</strong>, for his hard work in reviving the good old friend, <a href="https://perladvent.org">Perl Advent Calendar</a>. <strong>Julien</strong> has been helping him in the project too. I remember there was a <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">call for papers</a> by him. If you have time and something to share about your favourite <strong>CPAN</strong> module then please do contribute. I have booked one slot for myself for this year <strong>Advent Calendar</strong>. Hopefully, I will submit my article on time.</p>
<p>Last but not the least, I would like to thank all the members of <strong>Team PWC</strong> for creating friendly and positive vibes for years now. As of today, they have published <strong>3000+ blog posts</strong> sharing creative ideas and solutions. If you are interested then please do checkout <a href="https://theweeklychallenge.org/recaps">blog posts</a>.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/592.html</id>
    <published>2022-11-28T10:00:00Z</published>
    <updated>2022-11-28T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Flipping to Redistribute</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/27#pwc192" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find the binary flip.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
sub int2bits{
    my($n) = @_;
    my @bits;
    while($n){
        my $b = $n &amp; 1;
        unshift @bits, $b;
        $n = $n &gt;&gt; 1;
    }
    return @bits
}

sub binary_flip{
    my($n) = @_;
    my @bits = int2bits($n);
    @bits = map {$_^ 1} @bits;
    return oct(q/0b/ . join(q//, @bits));
}

MAIN:{
    say binary_flip(5);
    say binary_flip(4);
    say binary_flip(6);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
3
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There was once a time when I was positively terrified of bitwise operations. Anything at 
that level seemed a bit like magic. Especially spooky were the bitwise algorithms detailed 
in &lt;a href="https://en.wikipedia.org/wiki/Hacker%27s_Delight"&gt;Hacker's Delight&lt;/a&gt;! Anyway, has time
has gone on I am a bit more confortable with these sorts of things. Especially when, like
this problem, the issues are fairly straightforward.&lt;/p&gt;

&lt;p&gt;The code here does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;converts a given integer into an array of bits via &lt;code&gt;int2bits()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flips the bits using an xor operation (the &lt;code&gt;map&lt;/code&gt; in &lt;code&gt;binary_flip()&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;converts the array of flipped bits to the decimal equivalent via &lt;code&gt;oct()&lt;/code&gt; which, despite 
the name, handles any decimal, binary, octal, and hex strings as input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of integers greater than or equal to zero, @list. Write a script to 
distribute the number so that each members are same. If you succeed then print the total 
moves otherwise print -1.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use POSIX;

sub equal_distribution{
    my(@integers) = @_;
    my $moves;
    my $average = unpack("%32I*", pack("I*",  @integers)) / @integers; 
    return -1 unless floor($average) ==  ceil($average);
    {
        map{
            my $i = $_;
            if($integers[$i] &gt; $average &amp;&amp; $integers[$i] &gt; $integers[$i+1]){$integers[$i]--; $integers[$i+1]++; $moves++}
            if($integers[$i] &lt; $average &amp;&amp; $integers[$i] &lt; $integers[$i+1]){$integers[$i]++; $integers[$i+1]--; $moves++}
        } 0 .. @integers - 2;
        redo unless 0 == grep {$average != $_} @integers;
    }
    return $moves;
}

MAIN:{
    say equal_distribution(1, 0, 5);
    say equal_distribution(0, 2, 0);
    say equal_distribution(0, 3, 0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
4
-1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules that must be followed are:&lt;/p&gt;

&lt;p&gt;1) You can only move a value of '1' per move&lt;/p&gt;

&lt;p&gt;2) You are only allowed to move a value of '1' to a direct neighbor/adjacent cell.&lt;/p&gt;

&lt;p&gt;First we compute the average of the numbers in the list. Provided that the average is a
non-decimal (confirmed by comparing &lt;code&gt;floor&lt;/code&gt; to &lt;code&gt;ceil&lt;/code&gt;) we know we can compute the 
necessary "distribution".&lt;/p&gt;

&lt;p&gt;The re-distribution itself is handled just by following the rules and continuously looping
until all values in the list are the same. &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/functions/oct"&gt;oct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-192/"&gt;Challenge 192&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc192</id>
    <published>2022-11-27T19:04:00-05:00</published>
    <updated>2022-11-27T19:04:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Raku Advent Calendar submission deadline approaching!</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakuadvent"/>
  <id>tag:news.perlfoundation.org,2022-11-24:/post/rakuadvent</id>
  <published>2022-11-24T13:36:27</published>
  <updated>2022-11-24T13:36:27</updated>
  <summary>
  <![CDATA[
     The Christmas season is almost here, and that means a fresh batch of Raku Advent Calendar posts. Every year since 2009, the Raku community has hosted an annual Advent event, in the spirit of Perl and other projects, consisting of daily articles starting on the 1st of December and ending on the 25th. The Raku community has had so many great posts and, hopefully, this year will live up to 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Christmas season is almost here, and that means a fresh batch of
Raku Advent Calendar posts.  Every year since 2009, the Raku community
has hosted an annual Advent event, in the spirit of Perl and other
projects, consisting of daily articles starting on the 1st of December and ending
on the 25th.  The Raku community has had so many great posts and, hopefully, this year will live up to that same high standard.</p>

<p>But, to do that, Raku needs your help: If you'd like to write a post,
please <strong>sign up on the Raku Advent Calendar <a href="https://github.com/Raku/advent/blob/master/raku-advent-2022/authors.md">GitHub
repo</a></strong>.
  The deadline for post submission is December 1st (next week!).  However,
if you would like to post but cannot meet that deadline, please sign up
anyway and reach out about when you can submit a post – it's likely that we can make the timing work.</p>

<p>Let’s all write some great posts and have a Merry Raku Advent indeed!</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) October 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_october_2022"/>
  <id>tag:news.perlfoundation.org,2022-11-23:/post/maintaining_perl_tonyc_october_2022</id>
  <published>2022-11-23T09:01:16</published>
  <updated>2022-11-23T09:01:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/10/01 Saturday  0.12 github notifications  0.22 #20355 comment  0.13 #20362 ask for more info  0.47 2022/10/03 Monday  1.05 #20207 LogFile::Read, Nagios::Cmd patches  0.23 #20207 Log::Procmail patch  0.05 #20346 Text::PerlPP look at test report and comment  1.33 2022/10/06 Thursday  0.07 github notifications  0.67 #20355 long comment  1.03 #20362 review new info, research and comment  0.80 #20026 research 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/10/01      Saturday
 0.12           github notifications
 0.22           #20355 comment</p>

<h1> 0.13           #20362 ask for more info</h1>

<p> 0.47</p>

<p>2022/10/03      Monday
 1.05           #20207 LogFile::Read, Nagios::Cmd patches
 0.23           #20207 Log::Procmail patch</p>

<h1> 0.05           #20346 Text::PerlPP - look at test report and comment</h1>

<p> 1.33</p>

<p>2022/10/06      Thursday
 0.07           github notifications
 0.67           #20355 long comment
 1.03           #20362 review new info, research and comment
 0.80           #20026 research and comment
 0.18           #20356 review and approve
 0.30           #20290 review testing (was going to merge, but) comment on
                test noise
 0.23           #20367 review and approve</p>

<h1> 0.30           #20309 review and comment</h1>

<p> 3.58</p>

<p>2022/10/10      Monday
 0.23           #20290 review updates and apply to blead, perldelta
 0.23           #20372 testing, comment
 0.70           #20370 review and approve
 0.17           #20380 review and approve
 2.00           #20362 re-work test-dist-modules (based on Bram’s PR)
 2.83           #20362 fix, restart, not using system perl, add missing
                file for threads, threads-shared, debugging, move file
                data to <strong>DATA</strong>, testing</p>

<h1> 0.05           #20362 fixes and push  for more CI</h1>

<p> 6.21</p>

<p>2022/10/11      Tuesday
 1.72           #20362 clean up commits, add more logging, testing
 3.28           #20362 look into failures, fix build issue with threads,
                threads-shared, fix probing bug on darwin, try fix for
                emulation not happening (macos system perl doesn’t -</p>

<h1>                DPERL_DARWIN)</h1>

<p> 5.00</p>

<p>2022/10/12      Wednesday
 0.75           #20372 research and comment (and some #p5p discussion)
 2.98           #20362 look into EU:PXS failure and update EU::CBuilder,
                commit clean up, polish</p>

<h1> 1.78           #20362 more polish, final test, post PR #20385</h1>

<p> 5.51</p>

<p>2022/10/13      Thursday
 0.08           #20304 review and approve
 0.68           github notifications
 0.28           #20362 changes to avoid conflict with #20304
 0.30           #20388 review, research and comment briefly
 0.52           #20390 review and comment
 0.30           #20387 review, research and approve</p>

<h1> 1.75           #20346 testing, debugging</h1>

<p> 3.91</p>

<p>2022/10/17      Monday
 0.35           #20362/#20385 follow-up on PR comments
 0.13           #20403 review and approve
 0.35           #20388 review and comment
 0.40           #20402 review and approve
 0.50           #20404 review, research and approve
 0.33           #20393 review and comment
 0.60           #20351 apply to blead, perldelta
 1.45           look into blead test failure (Test::More related?), cannot
                reproduce</p>

<h1> 0.35           look over RFC discussions</h1>

<p> 4.46</p>

<p>2022/10/18      Tuesday
 0.30           github notifications
 0.40           #20199 apply to blead, perldelta and open related #20408
 0.47           #20397 review and approve
 0.38           #20408 comment</p>

<h1> 1.97           #19964 re-work, testing</h1>

<p> 3.52</p>

<p>2022/10/19      Wednesday
 0.92           #19964 fixes, testing, push for CI
 0.13           github notifications
 0.68           #20409 why hasn’t this been an issue before - testing,
                only in miniperl, comment
 0.20           rfc pr #30 review and comments
 0.43           #20399 research
 0.43           #19964 look into test failures</p>

<h1> 0.95           #20412 review, research and comment</h1>

<p> 3.74</p>

<p>2022/10/20      Thursday
 1.70           #20411 reproduce, debugging
 2.83           #20411 look into why the save stack is getting so large,
                try some fixes, look into supplied solution, work on</p>

<h1>                better solution, testing</h1>

<p> 4.53</p>

<p>2022/10/24      Monday
 0.38           github notifications
 0.85           rfc #17 review and comments
 0.13           #20417 review and approve
 0.65           #20398 review
 0.10           #20398 more review and comment
 0.08           #20429 review and approve
 0.18           #20428 review and comment
 0.03           #20424 review and approve with comment
 0.67           #20415 review and approve
 0.57           #20385 rebase, testing and apply manually to blead
 0.42           #20363 recheck, issues with blead, fix B::Op_private</p>

<h1>                version, investigate other problems</h1>

<p> 4.06</p>

<p>2022/10/25      Tuesday
 0.33           github notifications
 0.22           #20427 review and comment
 0.58           look into dist-modules macos failures, make PR 20436
 0.35           rfc #17 look at changes
 0.57           #20434 review and comment</p>

<h1> 0.50           #20435 review and comments</h1>

<p> 2.55</p>

<p>2022/10/26      Wednesday
 1.37           #20440 review, testing, long comment
 0.65           #20427 follow-up, some #p5p discussion
 0.03           #20435 briefly comment
 0.68           #20365 review
 1.03           #20365 try to track down issue, more testing, comments
 0.80           #20346 look over still failing modules, retest
                Mojolicioous::Plugin::RenderCGI and comment
 0.33           #20427 discussion, review patch and approve</p>

<h1> 0.12           #20440 approve modified PR</h1>

<p> 5.01</p>

<p>2022/10/27      Thursday
 2.53           #20365 alt branch review, testing, comments at
                https://github.com/Perl/perl5/commit/d6b8be71272aafbbaa17b
                b27be4ac484f8726651</p>

<h1> 1.43           #20411 try to make patch crash</h1>

<p> 3.96</p>

<p>2022/10/28      Friday</p>

<h1> 0.85           #20446 review updates, testing, comments</h1>

<p> 0.85</p>

<p>2022/10/31      Monday
 1.88           #19814 review, performance testing, comment
 1.30           #20446 review updates, minor comments
 0.58           #20457 review, comments
 0.32           #20459 comment
 0.37           #20460 review discussion and comment
 0.22           #20378 review, research and comment
 0.25           #20451 review and comment
 0.62           #20411 polish, testing, push for CI</p>

<h1> 0.87           security list - research, comment</h1>

<p> 6.41</p>

<p>Which I calculate is 65.1 hours.</p>

<p>Approximately 51 tickets were reviewed or worked on, and 4 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Read dates from Excel file using Perl</title>
  <summary type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></summary>
  <updated>2022-11-23T05:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/read-dates-from-excel"/>  <id>https://perlmaven.com/read-dates-from-excel</id>
  <content type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#591 - Less than 50% use CI</title>
    <link rel="alternate" href="https://perlweekly.com/archive/591.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>One of the best things about programming is that you can get almost immediate feedback from your work. The compiler tells you immediately if your code has syntax errors. Your tests can tell you within minutes if your code does what you expected on your computer. Your CI system can tell you within another few minutes if your code works on various other environments.</p>
<p>In the Perl community writing test became the norm. You rarely find any Open Source Perl code without tests. People write test even for code that only they use. Even for code they consider 'toys'. Yet with CI we are still far from it. On our <a href="https://perlweekly.com/metacpan.html">stats page</a> you can see that 12% are missing their link to VCS (some of those do have VCS they are just missing the link), but 45-60% (depending on the week) of CPAN releases have no CI configured.</p>
<p>From experience I know that corporations are way behind the curve in terms of test writing. So I can only imagine how few use Continuous Integration. There is a lot of work to be done.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/591.html</id>
    <published>2022-11-21T10:00:00Z</published>
    <updated>2022-11-21T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Twice Largest Once Cute </title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/20#pwc191" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given list of integers, @list. Write a script to find out whether the largest 
item in the list is at least twice as large as each of the other items.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub twice_largest{
    my(@list_integers) = @_;
    my @sorted_integers = sort {$a &lt;=&gt; $b} @list_integers;
    for my $i (@sorted_integers[0 .. @sorted_integers - 1]){
        unless($sorted_integers[@sorted_integers - 1] == $i){
            return -1 unless $sorted_integers[@sorted_integers - 1] &gt;= 2 * $i; 
        }
    }
    return 1;
}

MAIN:{
    say twice_largest(1, 2, 3, 4);
    say twice_largest(1, 2, 0, 5);
    say twice_largest(2, 6, 3, 1);
    say twice_largest(4, 5, 2, 3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
-1
1
1
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;For Part 1 I at first couldn't see how to avoid a basic O(n^2) nested for loop. After I 
took a nap I think the best approach is what I have here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sort the list O(n log n)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;get the max element from the sorted list O(1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iterate over the sorted list, stop and return false if at any point an element times 
two is not less then max. return true if all elements (other than $max itself) pass the 
test. O(n)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So total worst case dominated by the sort O(n log n). &lt;/p&gt;

&lt;p&gt;(And the nap was required because I was on an overnight camping trip with my son's Cub 
Scout pack the previous day and barely slept at all!)&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, 0 &amp;lt; $n &amp;lt;= 15. Write a script to find the number of orderings 
of numbers that form a cute list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Hash::MultiKey;

sub cute_list{
    my($n) = @_;
    my %cute;
    tie %cute, "Hash::MultiKey";
    for my $i (1 .. $n){
        $cute{[$i]} = undef;
    }
    my $i = 1;
    {
        $i++;
        my %cute_temp;
        tie %cute_temp, "Hash::MultiKey";
        for my $j (1 .. $n){
            for my $cute (keys %cute){
                if(0 == grep {$j == $_} @{$cute}){
                    if(0 == $j % $i || 0 == $i % $j){
                        $cute_temp{[@{$cute}, $j]} = undef;
                    }    
                }
            }
        }
        %cute = %cute_temp;
        untie %cute_temp;
        redo unless $i == $n;
    }
    return keys %cute;
}

MAIN:{
    say cute_list(2) . q//;
    say cute_list(3) . q//;
    say cute_list(5) . q//;
    say cute_list(10) . q//;
    say cute_list(11) . q//;
    say cute_list(15) . q//;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
3
10
700
750
24679
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution with a dynamic programming style approach seems to work pretty well. 
cute(11) runs in less than a second (perl 5.34.0, M1 Mac Mini 2020) which is pretty good
compared to some other reported run times that have been posted to social media this week.&lt;/p&gt;

&lt;p&gt;Some may notice that the solution here bears a striking resemblance to the one for 
&lt;a href="http://rabbitfarm.com/cgi-bin/blosxom/2021/06/20"&gt;TWC 117&lt;/a&gt;! The logic there was a bit 
more complicated, since multiple paths could be chosen. The overall idea is the same 
though: as we grow the possible lists we are able to branch and create new lists (paths).&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-191/"&gt;Challenge 191&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc191</id>
    <published>2022-11-20T21:50:00-05:00</published>
    <updated>2022-11-20T21:50:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#590 - Perl &amp; Corinna</title>
    <link rel="alternate" href="https://perlweekly.com/archive/590.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Congratulation to all England cricket team fans for the T20I world cup trophy. You played like a champion in the final. Although you beat us (India) in the semi final, still I am very happy for you.</p>
<p><strong>Did you hear any update about Corinna recently?</strong></p>
<p>We used to get regular update earlier and I really enjoyed the discussion about the Corinna. Last week <strong>Curtis</strong> shared a <a href="https://twitter.com/OvidPerl/status/1590247361384792065">tweet</a> where he mentioned that code example has been added to <a href="https://github.com/Ovid/Cor/blob/master/README.md">README.md</a>. I am sure you are going to love it. Thank you <strong>Curtis</strong> and the entire team of <strong>Corinna</strong> for all the hard work. We are waiting for it patiently.</p>
<p>There was one more <a href="https://twitter.com/OvidPerl/status/1591119906510077963">tweet</a> by <strong>Curtis</strong> that made my day about the proposed feature of <strong>Perl v5.38</strong> where you no longer need to end module with true value. In my career of <strong>23 years</strong>, I have come across many creative ways to return true values in the module. I welcome this change and thanks the entire team.</p>
<p>I am keeping the editorial short this week as I am running short of time. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/590.html</id>
    <published>2022-11-14T10:00:00Z</published>
    <updated>2022-11-14T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Capital Detection Decode</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/13#pwc190" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a string with alphabetic characters only: A..Z and a..z. Write a script to 
find out if the usage of Capital is appropriate if it satisfies at least one of the 
rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use boolean;

sub capital_detection{
    {my($s) = @_; return true if length($s) == $s =~ tr/A-Z//d;}
    {my($s) = @_; return true if length($s) == $s =~ tr/a-z//d;}
    {
        my($s) = @_; 
        $s =~ m/(^.{1})(.*)$/;
        my $first_letter = $1;
        my $rest_letters = $2;
        return true if $first_letter =~ tr/A-Z//d == 1 &amp;&amp;
                       length($rest_letters) == $rest_letters =~ tr/a-z//d;
    }
    return false;
}

MAIN:{
    say capital_detection(q/Perl/);
    say capital_detection(q/TPF/);
    say capital_detection(q/PyThon/);
    say capital_detection(q/raku/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules to be satisfied are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) Only first letter is capital and all others are small.

2) Every letter is small.

3) Every letter is capital.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did a bit of experimenting with &lt;code&gt;tr&lt;/code&gt; this week. Somewhat relatedly I also reminded 
myself of &lt;em&gt;scope&lt;/em&gt; issues in Perl. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tr&lt;/code&gt; function has a nice feature where it returns the number of characters changed, or
as was the case here, deleted. Here we delete all upper or lower case letters and if the
number of letters deleted is equal to original length we know that the original contained
all upper/lower case letters as required by the rules. One catch is that &lt;code&gt;tr&lt;/code&gt; when used 
this way alters the original string. One way around that would be to use temporary 
variables. Another option is to contain each of these rules checks in their own block!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an encoded string consisting of a sequence $s of numeric characters: 0..9. 
Write a script to find the all valid different decodings in sorted order.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use AI::Prolog;
use Hash::MultiKey;

my $prolog_code;
sub init_prolog{
    $prolog_code = do{
        local $/;
        &amp;lt;DATA&amp;gt;;
    };
}

sub decoded_list{
    my($s) = @_;
    my $prolog = $prolog_code;
    my @alphabet = qw/A B C D E F G H I J K L M N O P Q R S T U V W X Y Z/;
    my @encoded;
    my @decoded;
    my $length = length($s);
    $prolog =~ s/_LENGTH_/$length/g;
    $prolog = AI::Prolog-&gt;new($prolog); 
    $prolog-&gt;query("sum(Digits).");
    my %h;
    tie %h, "Hash::MultiKey";
    while(my $result = $prolog-&gt;results){
        $h{$result-&gt;[1]} = undef;
    }
    for my $pattern (keys %h){
        my $index = 0;
        my $encoded = [];
        for my $i (@{$pattern}){
            push @{$encoded}, substr($s, $index, $i);
            $index += $i;
        }
        push @encoded, $encoded if 0 == grep { $_ &gt; 26 } @{$encoded};
    }
    @decoded = sort { $a cmp $b } map { join("", map { $alphabet[$_ - 1] } @{$_}) } @encoded;
}

MAIN:{
    init_prolog;
    say join(", ", decoded_list(11));
    say join(", ", decoded_list(1115));
    say join(", ", decoded_list(127));
}

__DATA__
member(X,[X|_]).
member(X,[_|T]) :- member(X,T).

digits([1, 2]).

sum(Digits):-
    sum([], Digits, 0).

sum(Digits, Digits, _LENGTH_). 

sum(Partial, Digits, Sum):-   
    Sum &lt; _LENGTH_, 
    digits(L),
    member(X,L),
    S is Sum + X,
    sum([X | Partial], Digits, S). 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
AA, K
AAAE, AAO, AKE, KAE, KO
ABG, LG
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is an element of this task which reminded me of a much older problem presented back
in &lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-075/"&gt;TWC 075&lt;/a&gt;. In brief,
the question was how many ways could coins be used in combination to form a target sum. My 
&lt;a href="https://adamcrussell.livejournal.com/17614.html"&gt;solution&lt;/a&gt; used a mix of Prolog and Perl
since Prolog is especially well suited for elegant solutions to these sorts of 
combinatorial problems.&lt;/p&gt;

&lt;p&gt;I recognized that this week we have a similar problem in how we may separate the given
encoded string into different possible chunks for decoding. Here we know that no chunk
may have value greater than 26 and so we can only choose one or two digits at a time. How 
many ways we can make these one or two digit chunks is the exact same problem, somewhat in 
hiding, as in TWC 075!&lt;/p&gt;

&lt;p&gt;I re-use almost the exact same Prolog code as used previously. This is used to identify 
the different combinations of digits for all possible chunks. Once that is done we need 
only map the chunks to letters and &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perl.plover.com/FAQs/Namespaces.html"&gt;Scoping in Perl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-190/"&gt;Challenge 190&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc190</id>
    <published>2022-11-13T21:12:00-05:00</published>
    <updated>2022-11-13T21:12:00-05:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
