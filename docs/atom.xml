<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-02-02T04:45:18Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Annual Report - 2021</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2022/01/annual-report---2021.html"/>
    <id>tag:blogs.perl.org,2022:/users/mohammad_s_anwar//990.10660</id>
    <published>2022-02-01T00:31:35Z</published>
    <updated>2022-02-01T01:12:43Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmonthlyreport" label="perl monthly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-12.jpg"/></p>

<p><strong>Good bye 2021 and Welcome 2022 !!!</strong></p>

<p>Time to look back and review how the year 2021 was for me. </p>

<h1>Perl Weekly newsletter</h1>

<p>As you all know, I have been editing <strong>Perl weekly newsletter</strong every alternate week alongside the chief editor, <strong>Gabor Szabo</strong>. We agreed, I edit the even numbered newsletter and <strong>Gabor</strong> would do odd numbered ones. So that way, I got the honour to edit the <strong>500th</strong> edition of the weekly newsletter. I am now looking forward to my personal,  <strong>100th</strong> edition. As of today, I have edited <strong>96</strong> in total.</p>

<h1>The [Perl] Weekly Challenge</h1>

<p>Thanks to the <strong>Team PWC</strong>, I completed one more year of weekly challenge. It may not sound a big deal but for me it is. I wouldn't have done without the support of the team. I would like to mention one name, <strong>Colin Crain</strong>, our in-house, <strong>Perl</strong> reviewer for the hard work in reviewing <strong>Perl</strong> solutions every week without fail for so many months now.</p>

<p>There are some of the sharpest brain in our team and we are proud of them. Every week, I get to learn from them, technical or otherwise. You know who I am talking about.</p>

<p>On <strong>15th Feb 2021</strong>, we completed <strong>100 weeks</strong>. It is unbelievable even today that we have reached so far. Today we achieved another milestone as we are now in the <strong>week 150</strong>.</p>

<h1>Programming Languages</h1>

<p>Last year, I final gathered the courage to contribute in <strong>Raku</strong>. I faced tough time initially but with so many friends ready to help <strong>24x7</strong>, I sailed through. I feel comfortable now. I can read code written by some of great experts of the language.</p>

<p>I started sharing solutions to the weekly challenge in <strong>Python</strong>, <strong>Java</strong> and <strong>Swift</strong>. Having done for sometimes now, I can now proudly say, I can read/write in <strong>5 different programming languages</strong>. Having said, we have, <strong>Abigail</strong> in the team who can code in, <strong>30+</strong>, different languages.</p>

<h1>Oleeo Limited</h1>

<p>Having worked with some of the great Perl brain at <strong>NTT Limited</strong> for nearly <strong>9 years</strong>, I decided to move on. With the help and guidance from a very close friend of mine, <strong>Julien</strong>, I joined <a href="https://www.oleeo.com/">Oleeo Limited</a>. I must admit, it was the best decision of my entire career. I am so happy to have found such a cool and friendly team. I have been lucky to have very understanding and approachable managers in the past as well. I am very lucky once again to have found cool manager. In a short time so far, I already feel like I am part of the team. Above all, it feels great when my contribution is appreciated.</p>

<h1>1000 days FREE T-shirt campaign</h1>

<p>On <strong>18th Dec 2021</strong>, <a href="">The Weekly Challenge</a> completed 1000 days. I wanted to celebrate the moment in a big way. I shared my ideas with the team and general public. I am pleasantly surprised by the support I received so far. The support came within the team and outside. The best part was when our monthly prize sponsor, <strong>Pete Sergeant</strong>, came forward to top up the fund to cover the cost of FREE gift. You can find out the details in the <a href="https://theweeklychallenge.org/blog/1000-days/">blog here</a>.</p>

<h1>Pull Request Club</h1>

<p>I have been member of the club from day one. As you all know, being a member, you get assigned a distribution and you are requested to make at least one contribution. So far, I have managed to complete all my assignments without fail. I would like to mention one thing here, my contributions are mostly limited to documentation improvement. So it doesn't take long to find something to contribute. I am also grateful to all who accepted my contributions. </p>

<h1>Change of domain name</h1>

<p>As you all know, <strong>Perl Weekly Challenge</strong> has been renamed to <strong>The Weekly Challenge</strong>. I had bought the new domain <strong>theweeklychallenge.org</strong> long time ago but I was still using the old domain name <strong>perlweeklychallenge.org</strong> as I didn't have the courage and knowledge to move over to new domain name. <strong>Gabor Szabo</strong> offered to help me with domain switch. One Sunday afternoon, he helped me to switch the domain over Skype. Thank you, <strong>Gabor</strong>, for everything.</p>

<h1>YouTube Channel</h1>

<p>I started <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a> to share my contributions to the weekly challenge. Although I am not being regular but I do share live coding session as and when I find time. As of today, I have got <strong>163 subscribers</strong>. I know, it is not big number but I am proud of myself. There are some very well known names in the Perl community following my YouTube channel. I would like to thank each and every subscriber for the support and encouragement.</p>

<p>Last but not the least, the start of the year didn't go the way I wanted. I am presenting the monthly report on the last day of the month instead of day one. The only grace is I did manage to share and  not skipped it altogether. There are couple of things I skipped purposely as it would embaras me, sorry.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Past Monthly Reports</a></li>
<li><a href="#j">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>5 Pull Requests</strong> submitted in the month of <strong>December 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-12.png"/></p>

<p><strong>2374 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-12.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>718 commits</strong> recorded in the month of <strong>December 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-12.png"/></p>

<p>Overall <strong>8171 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-12.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>December 2021</strong>:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-142">Challenge #142</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-143">Challenge #143</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-144">Challenge #144</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-145">Challenge #145</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-141">RECAP Challenge #141</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-142">RECAP Challenge #142</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-143">RECAP Challenge #143</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-144">RECAP Challenge #144</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>Last month, I created <strong>6 videos</strong> as listed below. You can take a look at all my past videos on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. </p>

<h4>The Weekly Challenge - 141 (Task #1: Number Divisors)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tevgYBpKk7M" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 140 (Task #1: Add Binary)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DzkSojqFvaA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 138 (Task #1: Workdays)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yntQpjmS4ho" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 137 (Task #1: Long Year)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/U-FeZ8LPjd8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 143 (Task #1: Calculator)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Ch1C1HYytdU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>Revisit The Weekly Challenge - 075 (Task #1: Coins Sum)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Q8UPvDMYqJA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br />
If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://theweeklychallenge.org/blog/meet-the-champion-2021-11">W. Luis Mochan</a> as the Champion of <strong>The Weekly Challenge</strong>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://theweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/OPM::Maker::Command::sopm">OPM::Maker::Command::sopm</a> by <strong>Renee Baecker</strong>. I submitted <a href="https://github.com/PerlServices/OPM-Maker-Command-sopm/pull/3">one</a> Pull Request and it has been accepted and merged already.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-12.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-12.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/12/monthly-report---november-3.html">Monthly Report - November</a>.</p>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited three editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/536.html">Issue #536</a>, <a href="http://perlweekly.com/archive/538.html">Issue #538</a> and <a href="http://perlweekly.com/archive/540.html">Issue #540</a>.</p>

<hr id="i"/>
<h2>Past Monthly Reports</h2>

<p><strong>Year 2021</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/02/monthly-report---january-2.html">Jan</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/03/monthly-report---february-2.html">Feb</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html">Mar</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/05/monthly-report---april-2.html">Apr</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/06/monthly-report---may-2.html">May</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/07/monthly-report---june-2.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/09/monthly-report---august-2.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/10/monthly-report---september-2.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/11/monthly-report---october-3.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/12/monthly-report---november-3.html">Nov</a>. </p>

<p><strong>Year 2020</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/02/monthly-report---january-1.html">Jan</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/03/monthly-report---february-1.html">Feb</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/04/monthly-report---march-1.html">Mar</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/05/monthly-report---april-1.html">Apr</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/06/monthly-report---may-1.html">May</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/07/monthly-report---june-1.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/08/monthly-report---july-1.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/09/monthly-report---august-1.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/10/monthly-report---september-1.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/11/monthly-report---october-2.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html">Nov</a>,  <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html">Dec</a>. </p>

<p><strong>Year 2019</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/02/monthly-report---january.html">Jan</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/03/monthly-report---february.html">Feb</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/04/monthly-report---march.html">Mar</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/05/monthly-report---april.html">Apr</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/06/monthly-report---may.html">May</a>,  <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/07/monthly-report---june.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/08/monthly-report---july.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/09/monthly-report---august.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/10/monthly-report---september.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/11/monthly-report---october-1.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/12/monthly-report---november-1.html">Nov</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/01/annual-report---2019.html">Dec</a>. </p>

<p><strong>Year 2018</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/06/why-may-2018-is-so-special.html">May</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/07/how-i-performed-in-june-2018-as-compared-to-may-2018.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/08/comparative-analysis---report-july-2018.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/09/performance-report---august-2018.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/10/hacktoberfest-challenge-2018.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/11/monthly-report---october.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/12/monthly-report---november.html">Nov</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/01/monthly-report---december.html">Dec</a>. </p>

<hr id="j"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>December 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-12.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>A brief guide to perl character encoding</title>
    <link rel="alternate" href="https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;I originally wrote this at work, after my team spent far too many days yelling at the computer because of &lt;a href="https://en.wikipedia.org/wiki/Mojibake"&gt;Mojibake&lt;/a&gt;. Thanks to my employer for allowing me to publish it, and the several colleagues who provided helpful feedback. Any errors are, naturally, not their fault.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#gratuitous-pi-reference"&gt;12:45. Restate my assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-royal-road"&gt;The Royal Road&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#characters-representations-and-strings"&gt;Characters, representations, and strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-use-utf8-is-bad"&gt;Source code encoding, the utf8 pragma, and why you shouldn’t use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#input-and-output"&gt;Input and output&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#perlio-layers"&gt;PerlIO layers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-encode-module"&gt;The Encode module&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#encode-encode"&gt;Encode::encode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encode-decode"&gt;Encode::decode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encode-everything-else"&gt;Encode:: everything else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-utf8-flag"&gt;The UTF8 flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#devel-peek"&gt;Devel::Peek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hexdump"&gt;hexdump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perlio-getlayers"&gt;PerlIO::get_layers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#many-ways"&gt;The many ways of writing a character&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#string-literals"&gt;String literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-chr-function"&gt;The chr function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#octal"&gt;Octal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hexadecimal"&gt;Hexadecimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#by-codepoint-name"&gt;By codepoint name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-hexadecimal"&gt;Other hexadecimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-regular-expressions"&gt;In regular expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ascii-encoded-json"&gt;ASCII-encoded JSON strings in your code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-characters"&gt;Accented character vs character + combining accent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1245-restate-my-assumptions"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;12:45. Re-state my assumptions
&lt;/h2&gt;

&lt;p&gt;We will normally want to read and write UTF-8 encoded data. Therefore you should make sure that your terminal can handle it. While we will occasionally have to deal with other encodings, and will often want to look at the byte sequences that we are reading and writing and not just the characters they represent, your life will still be much easier if you have a UTF-8 capable terminal. You can test your terminal thus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'binmode(STDOUT, ":encoding(UTF-8)"); say "\N{GREEK SMALL LETTER LAMDA}"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should print &lt;code&gt;λ&lt;/code&gt;, a letter that looks a bit like a lower-case &lt;code&gt;y&lt;/code&gt; mirrored through the horizontal axis.&lt;/p&gt;

&lt;p&gt;And if you pipe the output from that into &lt;code&gt;hexdump -C&lt;/code&gt; you should see the byte sequence &lt;code&gt;0xce 0xbb 0x0a&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-royal-road"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The Royal Road
&lt;/h2&gt;

&lt;p&gt;Ideally, your code will only have to care about any of this at the edges - that is, where data enters and leaves the application. That could be when reading or writing a file, sending/receiving data across the network, making system calls, or talking to a database. And in many of these cases - especially talking to a database - you will be using a library which already handles everything for you. In a brand new code-base which doesn’t have to deal with any legacy baggage you should, in theory, only have to read this first section of this document.&lt;/p&gt;

&lt;p&gt;Alas, most real programming is a habitation of devils, who will beset you from all around and make you have to care about the rest of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#characters-representations-and-strings"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Characters, representations, and strings
&lt;/h3&gt;

&lt;p&gt;Perl can work with strings containing any character in Unicode. Characters are written in source code either as a literal character such as "m" or in several other ways. These are all equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;m&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x6d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# or chr(109), of course&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{6d}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{U+6d}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{LATIN SMALL LETTER M}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As are these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{3bb}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{U+3bb}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{GREEK SMALL LETTER LAMDA}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Non-ASCII characters can also appear as literals in your code, for example &lt;code&gt;"λ"&lt;/code&gt;, but this is not recommended - see the discussion of the &lt;code&gt;utf8&lt;/code&gt; pragma below. You can also use octal - &lt;code&gt;"\154"&lt;/code&gt; - but this too is not recommended as hexadecimal encodings are marginally more familiar and easier to read.&lt;/p&gt;

&lt;p&gt;Internally, characters have a &lt;em&gt;representation&lt;/em&gt;, a sequence of bytes that is unique for a particular combination of character and encoding. Most modern languages default to using UTF-8 for that representation, but perl is old enough to pre-date UTF-8 - and indeed to pre-date any concern for most character sets. For backward-compatibility reasons, and for compatibility with the many C libraries for which perl bindings exist, it was decided when perl sprouted its Unicode tentacle that the default representation should be ISO-Latin-1. This is a single-byte character set that covers most characters used in most modern Western European languages, and is a strict superset of ASCII.&lt;/p&gt;

&lt;p&gt;Any string consisting solely of characters in ISO-Latin-1 will by default be represented internally in ISO-Latin-1. Consider these strings:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Release the raccoon!&lt;/strong&gt; - consists solely of ASCII characters. ASCII is a subset of ISO-Latin-1, so the string’s internal representation is an ISO-Latin-1-encoded string of bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Libérez le raton laveur!&lt;/strong&gt; - consists solely of characters that exist in ISO-Latin-1, so the string’s internal representation is an ISO-Latin-1-encoded string of bytes. The "é" character has &lt;em&gt;code point&lt;/em&gt; 0xe9 and is represented as the byte 0xe9 internally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rhyddhewch y racŵn!&lt;/strong&gt; - the "ŵ" does not exist in ISO-Latin-1. But it does exist in Unicode, with code point 0x175. As soon as perl sees a non-ISO-Latin-1 character in a string, it switches to using something UTF-8-ish, so code point 0x175 is represented by &lt;em&gt;byte sequence&lt;/em&gt; 0xc5 0xb5. Note that while valid characters’ internal representations are valid UTF-8 byte sequences, this can also encode &lt;em&gt;invalid&lt;/em&gt; characters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Libérez le raton laveur! Rhyddhewch y racŵn!&lt;/code&gt; - this contains both an "é" (which is in ISO-Latin-1) and a "ŵ" (which is not), so the whole string is UTF-8 encoded. The "ŵ" is as before encoded as byte sequence 0xc5 0xb5, but the "é" must also be UTF-8 encoded instead of ISO-Latin-1-encoded, so becomes byte sequence 0xc3 0xa9.&lt;/p&gt;

&lt;p&gt;But notice that ISO-Latin-1 not only contains ASCII, and characters like "é" (at code point 0xe9, remember), it also contains characters "Ã" (capital A with a tilde, code point 0xc3) and "©" (copyright symbol, code point 0xa9). So how do we tell the difference between the ISO-Latin-1 byte sequence 0xc3 0xa9 representing "Ã©" and the UTF-8 byte sequence 0xc3 0xa9 representing "é"? Remember that a representation is "a sequence of bytes that is unique for a particular combination of character and encoding". So perl stores the encoding as well as the byte sequence. It is stored as a single bit flag. If the flag is unset then the sequence is ISO-Latin-1, if it is set then it is UTF-8.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code-encoding-the-utf8-pragma-and-why-you-shouldnt-use-it"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Source code encoding, the utf8 pragma, and why you shouldn’t use it
&lt;/h3&gt;

&lt;p&gt;It is possible to put non-ASCII characters into your source code. For example, consider this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;é&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$string&lt;/span&gt;&lt;span class="s2"&gt; contains &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; characters&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;from which some problems arise. First, if the file is encoded in UTF-8, how can perl tell when it comes across the byte sequence 0xc3 0xa9 what encoding that is? Is it ISO-Latin-1? Well, it could be. Is it UTF-8? Again, it could be. In general, it isn’t possible to tell from a sequence of bytes what encoding is in use. For backward-compatibility reasons, perl assumes ISO-Latin-1.&lt;/p&gt;

&lt;p&gt;If you save that file encoded in UTF-8, and have a UTF-8-savvy terminal, that code will output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;é contains 2 characters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which is quite clearly wrong. It interpreted the 0xc3 0xa9 as two characters, but then when it spat those two characters out your terminal treated them as one.&lt;/p&gt;

&lt;p&gt;We can tell perl that the file contains UTF-8-encoded source code by adding a &lt;code&gt;use utf8&lt;/code&gt;. We also need to fix the output encoding - &lt;code&gt;use utf8&lt;/code&gt; doesn’t do that for you, it only asserts that the source file is UTF-8 encoded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;binmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;é&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$string&lt;/span&gt;&lt;span class="s2"&gt; contains &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; character&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(For more on output encoding see the next section)&lt;/p&gt;

&lt;p&gt;And now we get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;é contains 1 character
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hurrah!&lt;/p&gt;

&lt;p&gt;At this point a second problem arises. Some editors aren’t very clever about encodings and even if they correctly read a file that is encoded in UTF-8, they will save it in ISO-Latin-1. VSCode for example is known to do this at least some of the time. If that happens, you’re still asserting via &lt;code&gt;use utf8&lt;/code&gt; that the file is UTF-8, but the &lt;code&gt;"é"&lt;/code&gt; in the sample file will be encoded as byte 0xe9, and the following double-quote and semicolon as 0x22 0x3b. This results in a fatal error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Malformed UTF-8 character: \xe9\x22\x3b (unexpected non-continuation byte 0x22,
immediately after start byte 0xe9; need 3 bytes, got 1) at ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So given that you’re basically screwed if you have non-ASCII source code no matter whether you use utf8 or not, I recommend that you just don’t do it. If you need a non-ASCII character in your code, use any of the many other ways of specifying it, and if necessary put a comment nearby so that whoever next has to fiddle with the code knows what it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xe9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;# e-acute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input-and-output"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Input and output
&lt;/h3&gt;

&lt;p&gt;Strings aren’t the only things that have encodings. File handles do too. Just like how perl defaults to assuming that your source code is encoded in ISO-Latin-1, it assumes unless told otherwise that file handles similarly are ISO-Latin-1, and so if you try to print "é" to a a handle, what actually gets written is the byte 0xe9.&lt;/p&gt;

&lt;p&gt;Even if your source code has the &lt;code&gt;use utf8&lt;/code&gt; pragma, and your code contains the byte sequence 0xc3 0xa9, which will internally by decoded as the character "é", your handles are still ISO-Latin-1 and you'll get a single byte for that character. For how this happens see "PerlIO layers" below.&lt;/p&gt;

&lt;p&gt;Things get a bit more interesting if you try to send a non-ISO-Latin-1 character to an ISO-Latin-1 handle. Perl does the best it can and sends the internal representation - which is UTF-8, remember - to the handle and emits a warning "Wide character in print". Pay attention to the warnings!&lt;/p&gt;

&lt;p&gt;This behaviour is another common source of bugs. If you send the two strings "Libérez le raton laveur!" followed by "Rhyddhewch y racŵn!" to an ISO-Latin-1 handle, then the first one will sail through, correctly encoded, but the second will also go through. You’ve now got two different character encodings in your output stream and no matter what encoding is expected at the other end you’ll get mojibake.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#perlio-layers"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;PerlIO layers
&lt;/h4&gt;

&lt;p&gt;We’ve seen how by default input and output is assumed to be in ISO-Latin-1. But that can be changed. Perl has supported different encodings for I/O since the dawn of time - since at least perl 3.016. That’s when it started to automatically convert "\n" into "\r\n" and vice versa on MSDOS, and the &lt;code&gt;binmode()&lt;/code&gt; function was introduced in case you wanted to open a file on DOS without any translation.&lt;/p&gt;

&lt;p&gt;These days this is implemented via PerlIO layers, which allows you to open a file with all kinds of translation layers, including those which you write yourself or grab from the CPAN (see for example &lt;a href="https://metacpan.org/pod/File::BOM"&gt;File::BOM&lt;/a&gt;). You can also add and remove layers from an already open handle.&lt;/p&gt;

&lt;p&gt;In general these days, you always want to read/write UTF-8 or raw binary, so will open files something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some.log&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;

&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;:raw&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.jpg&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or to change the encoding of an already open handle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;binmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;NB&lt;/strong&gt; that encodings applied to bare-word file handles such as STDOUT have global effect!)&lt;/p&gt;

&lt;p&gt;Provided that we don’t have to worry about Windows, we generally will only ever have one layer doing anything significant on a handle (on Windows the &lt;code&gt;:crlf&lt;/code&gt; layer is useful in addition to any others, to cope with Windows’s endearing backward-compatibility with &lt;a href="https://en.wikipedia.org/wiki/CP/M"&gt;CP/M&lt;/a&gt;), but it's possible to have more. In general, when a handle is opened for reading, encodings are applied to data in the order that they are specified in the &lt;code&gt;open()&lt;/code&gt; function call, from left to right. When writing, they are applied from right to left.&lt;/p&gt;

&lt;p&gt;If you ever think you need more than one layer, or want a layer other than those in the examples above, see &lt;a href="https://metacpan.org/pod/PerlIO"&gt;PerlIO&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-encode-module"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The Encode module
&lt;/h2&gt;

&lt;p&gt;The above explains the "royal road", where you are in complete control of how data gets into and out of your code. In that situation, you should never need to re-encode data, as it will always be Just A Bunch Of Characters whose underlying representation you don’t care about. That is, however, often not the case in the real world where we are beset by demons. We sometimes have to deal with libraries that do their own encoding/decoding and expect us to supply them with a byte stream (&lt;a href="https://metacpan.org/pod/XML::LibXML"&gt;XML::LibXML&lt;/a&gt;, for example), or which have had incorrect or partial bug fixes applied for any of the problems mentioned above and for which we can’t easily provide a proper fix because of other code now relying on the buggy behaviour (by for example having work-arounds to correct badly-encoded data).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encodeencode"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Encode::encode
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Encode::encode()&lt;/code&gt; function takes a string of characters and returns a string of bytes that represent that string in your desired encoding. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Libérez le raton laveur!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;FB_CROAK&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;LEAVE_SRC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will return a string where the character "é" has been replaced by the two bytes  0xc3 0xa9. If the original string was encoded in UTF-8 then the underlying representation of the input and output strings will be the same, but their encodings (as stored in the single bit flag we mentioned earlier) will be different, and the output will be reported as being one character longer by the &lt;code&gt;length()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Encode::encode&lt;/code&gt; can sometimes for Complicated Internals Optimisation Reasons modify its input. To avoid this set the &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; bit in its third argument.&lt;/p&gt;

&lt;p&gt;If you are encoding to anything other than UTF-8 or your string may contain characters outside of Unicode then you should consider telling &lt;code&gt;encode()&lt;/code&gt; to be strict about characters that it can't encode, such as if you try to encode "ŵ" into a ISO-Latin-1 byte sequence. That's what the &lt;code&gt;Encode::FB_CROAK&lt;/code&gt; bit is about in the example - in real code the encode should be in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block to deal with the exception that may arise. &lt;code&gt;Encode&lt;/code&gt;'s documentation has a whole section on &lt;a href="https://metacpan.org/pod/Encode#Handling-Malformed-Data"&gt;handling malformed data&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encodedecode"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Encode::decode
&lt;/h3&gt;

&lt;p&gt;It is quite common for us to receive data, either from a network connection or from a library, which is a UTF-8-encoded byte stream. Naively treating this as &lt;em&gt;ISO-Latin-1 characters&lt;/em&gt; will lead to doom and disaster, as the byte sequence 0xc3 0xa9 will, as already explained, be interpreted as the characters "Ã" and "©". &lt;code&gt;Encode::decode()&lt;/code&gt; takes a bunch of bytes and turns them into characters assuming that they are in a specified encoding. For example, this will return a "é" character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xc3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xa9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;FB_CROAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should consider how to handle a byte stream that turns out to not be valid in your desired encoding and again I recommend use of &lt;code&gt;Encode::FB_CROAK&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encode-everything-else"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Encode:: everything else
&lt;/h3&gt;

&lt;p&gt;The "Encode" module provides some other functions that, on the surface, look useful. They are, mostly, not.&lt;/p&gt;

&lt;p&gt;Remember how waaaay back I briefly mentioned that perl’s internal representation for non-ISO-Latin-1 characters was UTF-8-ish and how they could contain invalid characters? That’s why you shouldn’t use &lt;code&gt;encode_utf8&lt;/code&gt; or &lt;code&gt;decode_utf8&lt;/code&gt;. You may be tempted to use &lt;code&gt;Encode::is_utf8()&lt;/code&gt; to check a string's encoding. Don't, for the same reason.&lt;/p&gt;

&lt;p&gt;You will generally not be calling &lt;code&gt;encode()&lt;/code&gt; with a string literal as its input, but with a variable as its input. However, any errors like "Modification of a read-only value attempted" are your fault, you should have told it to &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don't even think about using the &lt;code&gt;_utf8_on&lt;/code&gt; and &lt;code&gt;_utf8_off&lt;/code&gt; functions. They are only useful for deliberately breaking things at a lower level than you should care about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Debugging
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-utf8-flag"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;the UTF8 flag
&lt;/h3&gt;

&lt;p&gt;The UTF8 flag &lt;em&gt;is&lt;/em&gt; a reliable indicator that the underlying representation uses multiple bytes per non-ASCII character, but that’s about it. It is &lt;em&gt;not&lt;/em&gt; a reliable indicator whether a string’s underlying representation is valid UTF-8 or that the string is valid Unicode.&lt;/p&gt;

&lt;p&gt;The result of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xe9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is a string whose underlying representation is valid UTF-8 but the flag is off.&lt;/p&gt;

&lt;p&gt;This, on the other hand has the flag on but the underlying representation is not valid UTF-8 because the character is out of range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2097153&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an invalid character in Unicode, but perl encodes it (it has to encode it so it can store it) and turns the UTF8 flag on (so that it knows how the underlying representation is encoded):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xfff8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, this variable that someone else’s broken code might pass to you contains an invalid encoding of a valid character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xf0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x82&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x82&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x1c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;_utf8_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#develpeek"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Devel::Peek
&lt;/h3&gt;

&lt;p&gt;This is a very useful module for looking at the internals of perl variables, in particular for looking at what perl thinks the characters are and what their underlying representation is. It exports a &lt;code&gt;Dump()&lt;/code&gt; function, which prints details about its argument’s internal structure to STDERR. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -MDevel::Peek -E 'Dump(chr(0xe9))'
SV = PV(0x7fa98980b690) at 0x7fa98a00bf90
  REFCNT = 1
  FLAGS = (PADTMP,POK,READONLY,PROTECT,pPOK)
  PV = 0x7fa989408170 "\351"\0
  CUR = 1
  LEN = 10

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the purposes of debugging character encoding issues, the two important things to look at are the lines beginning with &lt;code&gt;FLAGS =&lt;/code&gt; and &lt;code&gt;PV =&lt;/code&gt;. Note that there is no UTF8 flag set, indicating that the string uses the single-byte ISO-Latin-1 encoding. And the string’s underlying representation is shown (in octal, annoyingly), as &lt;code&gt;"\351"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And here’s what it looks like when the string contains code points outside ISO-Latin-1, or has been decoded from a byte stream into UTF-8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -MDevel::Peek -E 'Dump(chr(0x3bb))'
SV = PV(0x7ff37e80b090) at 0x7ff388012390
  REFCNT = 1
  FLAGS = (PADTMP,POK,READONLY,PROTECT,pPOK,UTF8)
  PV = 0x7ff37f907350 "\316\273"\0 [UTF8 "\x{3bb}"]
  CUR = 2
  LEN = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the UTF8 flag has appeared, and that we are shown both the underlying representation as two octal bytes &lt;code&gt;"\316\273"&lt;/code&gt; and the characters (in hexadecimal if necessary - mmm, consistency) that those bytes represent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hexdump"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;hexdump
&lt;/h3&gt;

&lt;p&gt;For debugging input and output I recommend the external &lt;code&gt;hexdump&lt;/code&gt; utility. Feed it a file and it will show you the bytes therein, avoiding any clever UTF-8-decoding that your terminal might do if you were to simply &lt;code&gt;cat&lt;/code&gt; the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat greek
αβγ
$ hexdump -C greek
00000000  ce b1 ce b2 ce b3 0a                              |.......|
00000007
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can of course also read from STDIN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perliogetlayers"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;PerlIO::get_layers
&lt;/h3&gt;

&lt;p&gt;Once you’re sure that your code isn’t doing anything perverse, but your data is still getting screwed up on input/output you can see what encoding layers are in use on a handle with the &lt;code&gt;PerlIO::get_layers&lt;/code&gt; function. &lt;code&gt;PerlIO&lt;/code&gt; is a Special built-in namespace, you don’t need to &lt;code&gt;use&lt;/code&gt; it. Indeed, if you do try to &lt;code&gt;use&lt;/code&gt; it you will fail, as it doesn’t exist as a module. Layers are returned in an array, in the order that you would tell &lt;code&gt;open()&lt;/code&gt; about them.&lt;/p&gt;

&lt;p&gt;Layers can apply to any handle, not just file handles. If you’re dealing with a socket then remember that they have both an input side and an output side which may have different layers - see &lt;a href="https://metacpan.org/pod/PerlIO"&gt;the PerlIO manpage&lt;/a&gt; for details. And also see the doco if you care about the difference between &lt;code&gt;:utf8&lt;/code&gt; and &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; - although if you diligently follow the sage advice in this document you won’t care, because you won’t use &lt;code&gt;:utf8&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-many-ways-of-writing-a-character"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The many ways of writing a character
&lt;/h2&gt;

&lt;p&gt;There are numerous different ways of representing a character in your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#string-literals"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;String literals
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;m&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the reasons outlined above please only use this for ASCII characters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-chr-function"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The chr function
&lt;/h3&gt;

&lt;p&gt;This function takes a number as its argument and returns the character with the corresponding codepoint. For example, &lt;code&gt;chr(0x3bb)&lt;/code&gt; returns &lt;code&gt;λ&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#octal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Octal
&lt;/h3&gt;

&lt;p&gt;You can use up to three octal digits &lt;code&gt;"\155"&lt;/code&gt; for ISO-Latin-1 characters only but please don’t. It’s a less familiar encoding than hexadecimal so hex is marginally easier to read, and it also suffers from the “how long is this number” problem described below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hexadecimal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Hexadecimal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{e9}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put any number of hexadecimal digits between the braces. There is also a version of this which doesn’t use braces: &lt;code&gt;"\xe9"&lt;/code&gt;. It can only take one or two hexadecimal digits and so is only valid for ISO-Latin-1 characters. The lack of delimiters can lead to confusion and error. Consider &lt;code&gt;"\xa9"&lt;/code&gt;. Brace-less &lt;code&gt;\x&lt;/code&gt; can take one or two hex digits, so is that &lt;code&gt;\xa&lt;/code&gt; (a line-feed character) followed by the digit &lt;code&gt;9&lt;/code&gt;, or is it &lt;code&gt;\xa9&lt;/code&gt;, the copyright symbol? Brace-less &lt;code&gt;\x&lt;/code&gt; is greedy, so if it looks like there are two hex digits it will assume that there are. Only if the first digit is followed by the end-of-string or by a non-hex-digit will it assume that you meant to use the single digit form. This means that &lt;code&gt;\xap&lt;/code&gt;, for example, is a single hex digit, so is equivalent to &lt;code&gt;\x{0a}p&lt;/code&gt;, a new line followed by the letter &lt;code&gt;p&lt;/code&gt;. I think you will agree that use of braces makes things much clearer, so the brace-less variant is deprecated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#by-codepoint-name"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;By codepoint name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{GREEK SMALL LETTER LAMDA}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may sometimes be preferable to providing the (hexa)decimal codepoint with an associated comment, but it gets awful wordy awful fast. By default the name must correspond &lt;em&gt;exactly&lt;/em&gt; to that in the Unicode standard. Shorter aliases are available if you ask for them, via the &lt;code&gt;charnames&lt;/code&gt; pragma. The documentation only mentions this for the Greek and Cyrillic scripts, but they are available for all scripts which have letters. For example, these are equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{5d0}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;HEBREW&lt;/span&gt; &lt;span class="nv"&gt;LETTER&lt;/span&gt; &lt;span class="nv"&gt;ALEF&lt;/span&gt;&lt;span class="p"&gt;}"&lt;/span&gt;&lt;span class="s2"&gt;

use charnames qw(hebrew);
&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;ALEF&lt;/span&gt;&lt;span class="p"&gt;}"&lt;/span&gt;&lt;span class="s2"&gt;                  # א
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful if you ask for character-set-specific aliases as there may be name clashes. Both Arabic and Hebrew have a letter called "alef", for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;charnames&lt;/span&gt; &lt;span class="sx"&gt;qw(arabic)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{ALEF}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;                  &lt;span class="c1"&gt;# ا&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;charnames&lt;/span&gt; &lt;span class="sx"&gt;qw(arabic hebrew)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{ALEF}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;                  &lt;span class="c1"&gt;# Always Hebrew, no matter the order of the imports!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A happy medium ground is to ask for &lt;code&gt;:short&lt;/code&gt; aliases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;charnames&lt;/span&gt; &lt;span class="sx"&gt;qw(:short)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{ALEF}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;                           &lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{hebrew:alef}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\N{arabic:alef}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;    &lt;span class="c1"&gt;# does what it says on the tin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-hexadecimal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Other hexadecimal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{U+3bb}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This notation looks a little bit more like the U-ish hexadecimal notations used in other languages while also being a bit like the &lt;code&gt;\N{...}&lt;/code&gt; notation for codepoint names. Unless you want to mix hexadecimal along with codepoint names you should probably not use this, and prefer &lt;code&gt;\x{...}&lt;/code&gt; which is more familiar to perl programmers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-regular-expressions"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;In regular expressions
&lt;/h3&gt;

&lt;p&gt;You can use any of the &lt;code&gt;\x&lt;/code&gt; and &lt;code&gt;\N{...}&lt;/code&gt; variants in regular expressions. You may also see &lt;code&gt;\p&lt;/code&gt;, &lt;code&gt;\P&lt;/code&gt;, and &lt;code&gt;\X&lt;/code&gt; as well. See &lt;a href="https://metacpan.org/dist/perl/view/pod/perlunicode.pod"&gt;perlunicode&lt;/a&gt; and &lt;a href="https://metacpan.org/dist/perl/view/pod/perlrebackslash.pod"&gt;perlrebackslash&lt;/a&gt;. You should consider use of the &lt;code&gt;/a&lt;/code&gt; modifier as that does things like force &lt;code&gt;\d&lt;/code&gt; to only match ASCII and not, say, &lt;code&gt;৪&lt;/code&gt; which looks like &lt;code&gt;8&lt;/code&gt; but is actually &lt;code&gt;BENGALI DIGIT FOUR&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asciiencoded-json-strings-in-your-code"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;ASCII-encoded JSON strings in your code
&lt;/h3&gt;

&lt;p&gt;You may need to embed JSON strings in your code, especially in tests. I recommend that JSON should always be ASCII-encoded as this minimises the chances of it getting mangled anywhere. This introduces yet another annoying way of embedding a bunch of hex digits into text. This example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3c0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will produce the string &lt;code&gt;"\u03c0"&lt;/code&gt;. That’s the sequence of eight characters &lt;code&gt;"&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;u&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; &lt;code&gt;"&lt;/code&gt;. The double quotes are how JSON says “this is a string”, and the two characters &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt; are how JSON says “here comes a hexadecimal code point”. If you want to put ASCII-encoded JSON in your code then you need to be careful about quoting and escaping.&lt;/p&gt;

&lt;p&gt;Perl will treat the character sequence &lt;code&gt;\&lt;/code&gt; &lt;code&gt;u&lt;/code&gt; as a real back-slash followed by the letter when it is single-quoted, but in general it is always good practice to escape a back-slash that you want to be a real back-slash, to avoid confusion to the reader who may not have been paying attention to whether you’re single- or double-quoting, or in case you later change the code to use double-quotes and interpolate some variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"I like &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;u03c0, especially Greek pie"&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# or double-quoted with interpolation&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qq{"I like \\u03c0, especially $nationality pie"}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accented-character-vs-character-combining-accent"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Accented character vs character + combining accent
&lt;/h3&gt;

&lt;p&gt;For many characters there are two different valid ways of representing them. &lt;code&gt;chr(0xe9)&lt;/code&gt; is &lt;code&gt;LATIN SMALL LETTER E WITH ACUTE&lt;/code&gt;. The same character can be obtained with the two codepoints &lt;code&gt;"e".chr(0x301)&lt;/code&gt; - that is &lt;code&gt;LATIN SMALL LETTER E&lt;/code&gt; and &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Whether those should sort the same, compare the same, or one should be converted to t’other will vary depending on your application, so the best I can do is point you at &lt;a href="https://metacpan.org/pod/Unicode::Normalize"&gt;Unicode::Normalize&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7</id>
    <published>2022-01-31T18:43:59Z</published>
    <updated>2022-01-31T18:43:59Z</updated>
    <category term="perl"/>
    <category term="unicode"/>
    <category term="mojibake"/>
  </entry>
  <entry>
    <title>Test web API's with Perl and Cucumber</title>
    <link rel="alternate" href="https://dev.to/dragostrif/test-web-apis-with-perl-and-cucumber-5fff" type="text/html"/>
    <content type="html">&lt;p&gt;Behavior-Driven Development is an agile software development process that encourages teams to use conversation and concrete examples to formalize a shared understanding of how the application should behave.&lt;br&gt;
Cucumber Open is the world's leading tool for BDD.&lt;/p&gt;

&lt;p&gt;In this tutorial I want to show to you how to test web API using&lt;br&gt;
Test::BDD::Cucumber, Mojo::UserAgent and Test2::V0 modules.&lt;/p&gt;

&lt;p&gt;First we need to install &lt;em&gt;Carton&lt;/em&gt; the Perl module dependency manager.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;cpanm&lt;/span&gt; &lt;span class="nv"&gt;Carton&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can mock an API using Mojolicious lite web-framework.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Create a &lt;em&gt;cpanfile&lt;/em&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;touch&lt;/span&gt; &lt;span class="nv"&gt;cpanfile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
Add Mojolicious web-framework to the &lt;em&gt;cpanfile&lt;/em&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;requires 'Mojolicious';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
Install Mojolicious using carton:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
Generate a Mojolicious lite app:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;mojo&lt;/span&gt; &lt;span class="nv"&gt;generate&lt;/span&gt; &lt;span class="nv"&gt;lite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt; &lt;span class="nv"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;pl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
Edit the mock.pl to return a json:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojolicious::&lt;/span&gt;&lt;span class="nv"&gt;Lite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/json&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;($c) {&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$dc_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;param&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$api_data_centers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;ro&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.0.0.1&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;os&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linux mint&lt;/span&gt;&lt;span class="p"&gt;'},&lt;/span&gt;
    &lt;span class="s"&gt;uk&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uk&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.0.0.2&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;os&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$api_data_centers&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;lc&lt;/span&gt; &lt;span class="nv"&gt;$dc_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start the server:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;morbo&lt;/span&gt; &lt;span class="nv"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;pl&lt;/span&gt;
&lt;span class="c1"&gt;# you can test the API at this url:&lt;/span&gt;
&lt;span class="c1"&gt;# http://127.0.0.1:3000/json?dc=ro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the server is up and running we can move to the Cucumber part.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create the Test::BDD::Cucumber file structure:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;test_api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="nv"&gt;features&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="nv"&gt;step_definitions&lt;/span&gt;
    &lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="nv"&gt;test_api_steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;pl&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="nv"&gt;test_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;feature&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add Cucumber and test modules to cpanfile file:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test::BDD::Cucumber&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test2::V0&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test::BDD::Cucumber::Harness::Html&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Cucumber and test modules:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-the-feature-file"&gt;
  &lt;/a&gt;
  Edit the feature file
&lt;/h2&gt;

&lt;p&gt;Open the test_api/features/test_api.feature and add in this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;Test a basic api with Test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="err"&gt;BDD&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="err"&gt;Cucumber&lt;/span&gt;
  &lt;span class="err"&gt;Test a basic api with Test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="err"&gt;BDD&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="err"&gt;Cucumber&lt;/span&gt;

  &lt;span class="kn"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="nf"&gt;I &lt;/span&gt;get the request object

    &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; test api request
      &lt;span class="nf"&gt;Given &lt;/span&gt;I query for the RO data center
      &lt;span class="nf"&gt;When &lt;/span&gt;I make a GET request to the url /json
      &lt;span class="nf"&gt;Then &lt;/span&gt;http code is &lt;span class="nv"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;

      &lt;span class="nn"&gt;Examples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;200&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To understand the above example you need some basic knowledge about the gherkin verbs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Given&lt;/em&gt; is used for a predefined action.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;When&lt;/em&gt; is used for an action done by the user (making a request).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Then&lt;/em&gt; is used for evaluating the user action. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;And&lt;/em&gt; duplicates the verb above&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;But&lt;/em&gt; duplicates the verb above&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also as you can see that variables can be added to the feature file using the &lt;em&gt;Examples&lt;/em&gt; table. &lt;br&gt;
Running &lt;code&gt;carton exec -- local/bin/pherkin test_api/&lt;/code&gt; will display all the scenario steps in orange. This means that code to implement them was not written yet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-step-definitions"&gt;
  &lt;/a&gt;
  Writing step definitions
&lt;/h2&gt;

&lt;p&gt;Open the test_api/features/step_definitions/test_api_steps.pl and add in this code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::BDD::Cucumber::&lt;/span&gt;&lt;span class="nv"&gt;StepFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;UserAgent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;Before&lt;/span&gt;
  &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;UserAgent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;ua&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ua&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;note&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;we have a Mojo::UserAgent obj in S&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;Given&lt;/span&gt; &lt;span class="sx"&gt;qr/I use the (\w+) data center/&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;dc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;When&lt;/span&gt; &lt;span class="sx"&gt;qr/I make a (\w+) request to the url ([\w\W]+)/&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$ua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;ua&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$http_verb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
  &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;host&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
  &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
  &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lc&lt;/span&gt; &lt;span class="nv"&gt;$endpoint&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ua&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;insecure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$http_verb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;Accept&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;'}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Request:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
    &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="nv"&gt;$tx&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$tx&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HTTP/&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$tx&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;$tx&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;req&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to_string&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$tx&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nv"&gt;note&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Reponse:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
  &lt;span class="nv"&gt;note&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nv"&gt;note&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Reponse code:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
  &lt;span class="nv"&gt;note&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;Then&lt;/span&gt; &lt;span class="sx"&gt;qr/http code is (\d+)/&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$got&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;status code is ok&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running &lt;code&gt;carton exec -- local/bin/pherkin test_api/&lt;/code&gt; will display all the scenario steps in green, showing you that everything is ok.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Understanding "S" and "C" objects&lt;/em&gt;&lt;br&gt;
The "S" and "C" objects are automatically created. "S" stores data for the duration of a scenario while "C" stores data for the duration of a step. Calling &lt;code&gt;C-&amp;gt;matches()&lt;/code&gt; will get you an array with all the matches the regex did in the current step. You can use instead regex capture groups like &lt;code&gt;$1&lt;/code&gt; if you prefer it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How everything worked together&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Background&lt;/code&gt; code in the feature file executed the Before block in the step file which adds  Mojo::UserAgent object and stores it in S.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Given qr/I query for the (\w+) data center/&lt;/code&gt;
This step adds the &lt;code&gt;{dc =&amp;gt; 'ro' }&lt;/code&gt; hash on S. Later this is used to add this &lt;code&gt;?dc=ro&lt;/code&gt; part to the request query.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;When I make a GET request to the url /json&lt;/code&gt; &lt;br&gt;
This step does a bunch of things: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;reads the http verb and the url passed to him from the feature file and uses them to create &lt;code&gt;Mojo::URL-&amp;gt;new();&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;makes a request using the object &lt;code&gt;Mojo::UserAgent&lt;/code&gt; object stored in S.&lt;/li&gt;
&lt;li&gt;uses the Test2::V0 note() subroutine to document what happened.&lt;/li&gt;
&lt;li&gt;stores the request response in  &lt;code&gt;S-&amp;gt;{result};&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Then http code is 200&lt;/code&gt; &lt;br&gt;
This step reads the expect status code sent in from the feature file using a regex and compares it with whatever value we have stored in the response object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-library-for-common-steps"&gt;
  &lt;/a&gt;
  Creating a library for common steps
&lt;/h2&gt;

&lt;p&gt;If your team manages more then one API you don't want to rewrite the same tests over and over again for obvious reasons.&lt;br&gt;
Cucumber allows you to have such steps libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt;
&lt;span class="nv"&gt;vim&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;Steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;pm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now move this step &lt;code&gt;Then qr/http code is (\d+)/&lt;/code&gt;to a new lib.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Steps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::BDD::Cucumber::&lt;/span&gt;&lt;span class="nv"&gt;StepFile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;Then&lt;/span&gt; &lt;span class="sx"&gt;qr/http code is (\d+)/&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$got&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$got&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;status code is ok&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then make sure you load the lib in &lt;code&gt;test_api/features/step_definitions/test_api_steps.pl&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Steps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the code again should result in a pass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-tags"&gt;
  &lt;/a&gt;
  Using tags
&lt;/h2&gt;

&lt;p&gt;If a feature has more than one scenario and you don't want to run them all at once you can use tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;    &lt;span class="nt"&gt;@json_tag&lt;/span&gt; &lt;span class="nt"&gt;@all&lt;/span&gt;
    &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; test api json request
      &lt;span class="nf"&gt;Given &lt;/span&gt;I query for the RO data center
      &lt;span class="nf"&gt;When &lt;/span&gt;I make a GET request to the url /json
      &lt;span class="nf"&gt;Then &lt;/span&gt;http code is &lt;span class="nv"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;

      &lt;span class="nn"&gt;Examples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;200&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;

   &lt;span class="nt"&gt;@xml_tag&lt;/span&gt; &lt;span class="nt"&gt;@all&lt;/span&gt;
    &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; test api xml request
      &lt;span class="nf"&gt;Given &lt;/span&gt;I query for the RO data center
      &lt;span class="nf"&gt;When &lt;/span&gt;I make a GET request to the url /xml
      &lt;span class="nf"&gt;Then &lt;/span&gt;http code is &lt;span class="nv"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;

      &lt;span class="nn"&gt;Examples&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;200&lt;/span&gt;   &lt;span class="p"&gt;|&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Call the json scenario:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;carton exec -- local/bin/pherkin --tags=&lt;/span&gt;&lt;span class="si"&gt;@json_tag&lt;/span&gt;&lt;span class="sb"&gt; test_api/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run all scenarios, except the xml one:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;carton exec -- local/bin/pherkin --tags=~&lt;/span&gt;&lt;span class="si"&gt;@xml_tag&lt;/span&gt;&lt;span class="sb"&gt; test_api/
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generating-an-html-report"&gt;
  &lt;/a&gt;
  Generating an html report
&lt;/h2&gt;

&lt;p&gt;To generate an html report use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt;&lt;span class="sr"&gt;/bin/p&lt;/span&gt;&lt;span class="nv"&gt;herkin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt; &lt;span class="nv"&gt;Html&lt;/span&gt; &lt;span class="nv"&gt;test_api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;html&lt;/span&gt;
&lt;span class="c1"&gt;#  -o Html flag calls Test::BDD::Cucumber::Harness::Html harness &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szZQypA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wwva6op4ipa4x8y4yxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szZQypA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wwva6op4ipa4x8y4yxf.png" alt="html report" width="880" height="435"&gt;&lt;/a&gt;&lt;br&gt;
If you click open a step you will see the details reported by &lt;code&gt;note()&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwJLzPUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkxzy363p0eidd8q18dn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwJLzPUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkxzy363p0eidd8q18dn.png" alt="details reported by note" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-with-prove"&gt;
  &lt;/a&gt;
  Integration with prove
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;carton&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="nv"&gt;prove&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;Perl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;Feature&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="nv"&gt;test_api&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://perlschool.com/books/cucumber/"&gt;Cucumber &amp;amp; Perl by John Davies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://perlschool.com/books/mojolicious-web-clients/"&gt;Mojolicious Web Clients By brian d foy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mojolicious.io/blog/2017/12/08/day-8-mocking-a-rest-api/"&gt;Mocking a REST API by Doug Bell&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>DragosTrif</name>
    </author>
    <id>https://dev.to/dragostrif/test-web-apis-with-perl-and-cucumber-5fff</id>
    <published>2022-01-31T16:24:15Z</published>
    <updated>2022-01-31T16:24:15Z</updated>
    <category term="perl"/>
    <category term="cucumber"/>
    <category term="testing"/>
    <category term="bdd"/>
  </entry>
  <entry>
    <title>#549 - Wordle</title>
    <link rel="alternate" href="https://perlweekly.com/archive/549.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Probably many of you have seen people posting their Wordle results. It is a nice little game that originally was written fo English speakers. Then several open source versions popped up that were then forked to create versions in many languages.</p>
<p>I have a <a href="https://wordle.szabgab.com/">partial list of Wordle clones</a>. I was hoping the author of one of these open source versions would make it easy to add other languages and then people would not need to host their own translated versions. So far I have not seen that happen.</p>
<p>Anyway, this has nothing to do with Perl.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/549.html</id>
    <published>2022-01-31T10:00:00Z</published>
    <updated>2022-01-31T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>TWC 149: Limited Fibs, and Bases of Unusual Size</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2022/01/twc-149-limited-fibs-and-bases-of-unusual-size.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10658</id>
    <published>2022-01-31T03:19:38Z</published>
    <updated>2022-01-31T03:43:49Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="C" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="c" label="C" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="Raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>(<strong>Currently editing</strong>)</p>

<p>In which we see that you don't need <em>all</em> the Fibs, and have trouble turning 21.</p>

<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-149/#TASK1">Fibonacci Digit Sum</a></h1>

<p>Given an input $N, generate the first $N numbers for which the sum of their digits is a Fibonacci number.</p>

<p>(i.e. Generate <a href="https://oeis.org/A028840">OEIS A028840</a>)</p>

<h2>Observations:</h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/c/ch-1.c">C</a></h2>

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-149/#TASK2">Largest Square</a></h1>

<p>(i.e. Generate <a href="https://oeis.org/A287298">OEIS A287298</a>)</p>

<p>Given a number base, derive the largest perfect square with no repeated digits and return it as a string. (For base>10, use ‘A’..‘Z’.)</p>

<h2>Observations:</h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/c/ch-2.c">C</a></h2>
]]>
        

    </content>
</entry>
  <entry>
    <title>Weekly Challenge 149</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-149-cln" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-149/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-149/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-fibonacci-digit-sum">
  </a>
  TASK #1 › Fibonacci Digit Sum
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>Given an input <code>$N</code>, generate the first <code>$N</code> numbers for which the sum of their digits is a Fibonacci number.</p>

<h3>
  <a href="#my-solutions">
  </a>
  My solutions
</h3>

<p>This is (hopefully) a relatively straight forward task. We have a loop that increments by 1 until we have <code>$N</code> numbers. For each iteration, I have a <code>is_sum_fib</code> to determine if the number meets the criteria. I have a global variable <code>fibs</code> that keeps a count of all Fibonacci numbers, and top up the array if the last computed one is less than the sum of digits.</p>

<p>The Perl code is a transliteration of the Python code, with the <code>fibs</code> array a private persistent variable using the <a href="https://perldoc.perl.org/functions/state">state</a> declaration.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 20
0, 1, 2, 3, 5, 8, 10, 11, 12, 14, 17, 20, 21, 23, 26, 30, 32, 35, 41, 44

$ ./ch-1.pl 20
0, 1, 2, 3, 5, 8, 10, 11, 12, 14, 17, 20, 21, 23, 26, 30, 32, 35, 41, 44
</code></pre>

</div>



<h2>
  <a href="#task-2-largest-square">
  </a>
  TASK #2 › Largest Square
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>Given a number base, derive the largest perfect square with no repeated digits and return it as a string. (For base&gt;10, use ‘A’..‘Z’.)</p>

<h3>
  <a href="#python-solution">
  </a>
  Python solution
</h3>

<p>There appears to be two ways to solve this one. One is to work out the maximum square n<sup>n</sup> work downwards and see if that number is has no repeating digits. The other is to work downwards from the maximum unique values and see if that number is square. I'm sure they bright sparks in Team PWC may have an even better solution, and am looking forward to reading every ones blog posts.</p>

<p>I choose the second method. It works fine when n &lt;= 12, struggles (takes a wee while to produce a result) on most numbers bases between 13-22, and outright fails on larger number bases. While Python can handle an infinite number of digits in an integer, the <code>math.sqrt</code> function is bound by 2<sup>64</sup>-1.</p>

<p>So on with my explanation. I start by creating a string <code>v</code> with all the digits in reverse order (so <code>A9876543210</code> for base 11). This is the highest possible value that can be expressed as unique digits. I then use python's <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations">itertools.permutations</a> function to work through all possible unique digits in reverse order. As we get to a number that starts with 0, I restart the permutations call with one less digit.</p>

<p>As the permutations call uses the <code>yield</code> command, we don't need to dump all possible permutations into memory. For each uniquely digited number, I convert it to an integer, and see if it is a perfect square.</p>

<p>I did write a Perl solution, but am not happy with it enough that I'm going to share it :-/</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 2
1 (1² = 1)

$ ./ch-2.py 4
3201 (15² = 225)

$ ./ch-2.py 10
9814072356 (99066² = 9814072356)

$ ./ch-2.py 12
B8750A649321 (2950717² = 8706730814089)
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-149-cln</id>
    <published>2022-01-30T22:17:18Z</published>
    <updated>2022-01-30T22:17:18Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>TWC 148: Numbrs, and Cubic Cards</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2022/01/twc-148-numbrs-and-cubic-cards.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10657</id>
    <published>2022-01-29T22:52:39Z</published>
    <updated>2022-01-30T07:34:35Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="Raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which we see that you <em>can</em> spell "numbers" without an <code>e</code>, and realize that <code>first</code> implies an ordering.</p>
]]>
        <![CDATA[<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-148/#TASK1">Eban Numbers</a></h1>

<p>Eban: A number that has no letter <code>e</code> when spelled in English.</p>

<h2>Observations:</h2>

<p>Since the <code>Lingua::EN::Numbers</code> exists for both Perl and Raku, the solutions are just expanded one-liners. Both output:</p>

<pre><code>2 4 6 30 32 34 36 40 42 44 46 50 52 54 56 60 62 64 66
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<pre><code>use Lingua::EN::Numbers;
put grep *.&amp;cardinal.contains('e').not, 0..100;
</code></pre>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<pre><code>use Modern::Perl;
use Lingua::EN::Numbers qw&lt;num2en&gt;;

say join ' ', grep { !(num2en($_) =~ /e/) } 0..100;
</code></pre>

<p>Note: I missed using Perl's <code>!~</code> operator, which would have been clearer than negating the whole expression: <code>grep { num2en($_) !~ /e/ }</code></p>

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-148/#TASK2">Cardano Triplets</a></h1>

<pre><code>  ________     ________
³√ 𝑎 + 𝑏√𝑐  + ³√ 𝑎 - 𝑏√𝑐  == 1
</code></pre>

<h2>Observations:</h2>

<ul>
<li><p>Most of my calculations are in the <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/README">README</a>.</p></li>
<li><p>Exact wording of the task is "Write a script to generate <strong>first</strong> 5 Cardano Triplets".</p></li>
<li><p>The order that triplets occur depends on the method you use to search for them. Therefore, if more than one method exists to search for Cardano triplets, the output of all the participants might not match each other.</p></li>
<li><p><em>Several</em> methods exists to search for Cardano triplets.</p></li>
<li><p><code>a</code>,<code>b</code>,<code>c</code> are independent and not interchangeable; they each play a different role in the equation. So, we cannot use the common technique of "for a = 1..Inf", then have inner loops that bound <code>b</code> and <code>c</code> to <code>&lt;= a</code>, or we risk missing some triplets.</p></li>
<li><p>Whenever searching for N-tuples (in this case, triples) that satisfy some condition, a good approach is to see if one piece of the tuple can be calculated from the other pieces. If so, you can remove a loop!</p></li>
<li><p><code>c</code> can be calculated from <code>a,b</code>. <br />
WolframAlpha says that <br />
<code>Solve[CubeRoot[a + b Sqrt[c]] + CubeRoot[a - b Sqrt[c]] == 1, c]</code> has the <a href="https://www.wolframalpha.com/input/?i2d=true&amp;i=Solve%5C%2891%29Cbrt%5Ba+%2B+b+Sqrt%5Bc%5D%5D+%2B+Cbrt%5Ba+-+b+Sqrt%5Bc%5D%5D+%3D%3D+1%5C%2844%29+c%5C%2893%29">solution</a> <code>c = (8a - 1)(a + 1)² / 27b²</code>. <br />
So, if <code>(8a - 1)(a + 1)²</code> is evenly divisible by <code>27b²</code>, then we have found a triplet <em>and</em> computed <code>c</code>.</p></li>
<li><p>All triplets must have <code>𝑎 ≡ 2 𝑚𝑜𝑑 3</code>, which is the same as saying <code>a = 3k+2</code> where <code>k</code> is a positive integer. <br />
(Stated halfway through Jean Marie's StackExchange answer to <a href="https://math.stackexchange.com/questions/1885095/parametrization-of-cardano-triplet">Parametrization of Cardano triplet</a>)</p></li>
<li><p>Combining the last two points, we can replace <code>a</code> with <code>3k+2</code> in <code>(8a - 1)(a + 1)²</code>, and <a href="https://www.wolframalpha.com/input/?i2d=true&amp;i=Simplify%5C%2891%29%5C%2840%29%5C%2840%293k%2B2%5C%2841%29+%2B+1%5C%2841%29%C2%B2+%5C%2840%298%5C%2840%293k%2B2%5C%2841%29+-+1%5C%2841%29%5C%2893%29">simplify</a> it to <code>27(8k + 5)(k + 1)²</code>. <br />
Since that has a factor of <code>27</code>, and every triple must be evenly divisible by <code>27b²</code>, then <em>every</em> valid <code>a</code> (that is, <code>𝑎 ≡ 2 𝑚𝑜𝑑 3</code>) has a least one triple, where <code>b=1</code>. If <code>a</code> has square divisors, then there are multiple triples for that <code>a</code>.</p></li>
<li><p>A straightforward coding of <code>is_Cardano_triplet()</code> uses <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic">floating-point math</a> then checks for an equality, which is the classic FP bug. We must compare to some tolerance, so that we do not exclude a valid triple.</p>

<p>say "Bad!" if sqrt(3)**2 != 3'      # Output: Bad!</p></li>
</ul>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<ul>
<li><p>Since the math involves more than just division, even Raku's invisible Rat(s) will not save us; <code>($r - 1).abs &lt; $some_tolerance</code>, or maybe <code>$r =~= 1</code>.</p></li>
<li><p>Raku's is-almost-equal-to operator, <code>=~=</code> uses the current <code>$*TOLERANCE</code> setting, whose default of 1e-15 is too strict to find some triplets. <br />
(Aside: if you do something like <code>my $*TOLERANCE = 1e-14;</code> and <em>omit</em> the minus sign, then suddenly <em>every</em> triple is a Cardano triple, because now one is almost equal to a trillion. Blew my mind until I saw my error.)</p></li>
<li><p>I found it concise to use two uncommon techniques: <code>find_Cardano_triplet()</code> and <code>is_Cardano_triplet()</code> both take a single argument of a triplet (notice the doubled parenthesis in the <code>sub</code> declarations), and return either a complete triplet or Nil. You might expect <code>find_Cardano_triplet()</code> to return <code>c</code>, <code>is_Cardano_triplet()</code> to return a <code>Bool</code> and both to take 3 arguments. This allowed a <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/raku/ch-2.raku#L39">slick combining</a> of candidate sources and filters/generators via <code>map</code> and <code>grep</code>.</p></li>
<li><p>While I used <code>$m % $n</code> in the Perl code to check for divisibility, Raku's Rat types always reduce to GCD, so I can just divide and then examine <code>.denominator == 1</code>. The <code>.narrow</code> method is needed so that I don't return a <code>Rat</code> where one would expect an <code>Int</code>.</p></li>
<li><p>Similar to using Unicode superscript numerals to express exponents (<code>$n²</code>), you can use Unicode "vulgar fractions" in Raku. This was convenient for cube roots, although special handling was needed for negatives.</p>

<p><code>say [15 * ⅖, 27 ** ⅓];         # Output: [6 3]</code></p>

<p><code>sub cbrt (\n) { n.sign  *  n.abs ** ⅓ }</code> # Handles positives and negatives uniformly.</p></li>
<li><p>While Raku provides the Cross operator (and meta-operator), it does not work usefully with more than one infinite list, so we can only use it (or the equivalent three nested <code>for</code> loops) if we <em>already</em> know the answer to the problem. I have always disliked this limitation (across many problems), but I did use the pre-knowledge this time for comparison, as constants <code>@fixed_X_triplets</code> and <code>@fixed_X_doublets</code> with <code>1..21</code> ranges.</p></li>
<li><p>I invented (probably <em>rediscovered</em>) an <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/raku/ch-2.raku#L17">algorithm</a> to iterate over N-tuple cross-products of N infinite lazy lists, never generating (or even having to check for) duplicates. It works well in any language with generators, and is a good fit here, but the ordering that it produces the tuples looks irregular to humans.</p></li>
</ul>

<p>I expanded the output count from 5 triplets to 6, to better show the differences in the orderings.
Here are the 4 lines that my program <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/raku/ch-2.raku#L39">produces</a> (plus one from elsewhere).</p>

<pre><code>(2 1 5) (5 2 13) (17 18   5) (17 9  20) ( 8  3  21) (11 4   29) # 1
(2 1 5) (5 2 13) ( 8  3  21) (17 9  20) (17 18   5)             # 2
(2 1 5) (5 1 52) ( 5  2  13) ( 8 1 189) ( 8  3  21) (11 1  464) # 3
(2 1 5) (5 1 52) ( 8  1 189) (11 1 464) (14  1 925) (17 1 1620) # 4
(2 1 5) (5 2 13) ( 8  3  21) (11 4  29) (14  5  37) (17 6   45) # 5
</code></pre>

<ol>
<li><p><code>triplet_generator().grep( &amp;is_Cardano_triplet)</code> <br />
"smallest" for minimizing <code>max(a,b,c)</code></p></li>
<li><p><code>@fixed_X_triplets.grep( &amp;is_Cardano_triplet)</code> <br />
Notice that it omits the 6th triplet, because the (1..21) that was just enough for 5; it "ran out" of triplets before finding the 6th!</p></li>
<li><p><code>@fixed_X_doublets.map(&amp;find_Cardano_triplet)</code> <br />
<code>a,b</code> can be smaller because calculated <code>c</code> is not restricted by a range. This one will "run out" too.</p></li>
<li><p><code>(^Inf).map({find_Cardano_triplet( (3 * $_ + 2,  1), )})</code> <br />
Locks <code>b=1</code>, and walks through all the <code>a=3k+2</code> since we know they all work with <code>b=1</code>, finding the correct <code>c</code>. This is reasonable; you would get the same answer from a big enough triple-loop if <code>b</code> was the outer variable, <code>find_Cardano_triplet</code> would return <code>Nil</code> for all the <code>a</code> that were not <code>𝑎 ≡ 2 𝑚𝑜𝑑 3</code> and therefore be suppressed.</p></li>
<li><p>This line does not come from my challenge solution; <a href="https://github.polettix.it/ETOOBUSY/2022/01/20/pwc148-cardano-triplets/">Flavio Poletti adapted</a> Jean Marie's complete answer (that I only managed half of, above) to derive a formula that, given <code>b</code>, produces the smallest-working <code>a</code> and its corresponding <code>c</code>. Splendid! And also, yet <em>another</em> ordering, with a reasonable take on "first 5", that gives different output from any of my four. The cost in finding <code>(5 2 13)</code> so easily, is never seeing other <code>b=2</code> like <code>(11 2 116)</code>.</p>

<pre><code>say (1..Inf).map({ 3 * $_ - 1, $_, 8 * $_ - 3 }).head(6)
</code></pre></li>
<li><p>Inspired by Flavio, I wrote this just before posting. It was experimentally arrived-at (<code>doublet_generator+find_Cardano_triplet|sort</code>, OEIS), not algebraically derived, but it produces correct output (with tolerance=1e-12) for the first 1000 triplets, locking <code>c=5</code>.</p>

<p>say (1..Inf).map(-> \n { (15 * (2 * n - 1)² + 1)/8, (2 * n - 1)*(5 * n² - 5 * n + 2)/2, 5 }).head(6)</p>

<p>Output: ((2 1 5) (17 18 5) (47 80 5) (92 217 5) (152 459 5) (227 836 5))</p></li>
</ol>

<p>Six first 5's, all for valid interpretations of "first". Surprising, and Fun!</p>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-148/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<p>I simply translated <code>find_Cardano_triplet</code> from Raku, and called it with <code>a=0..4, b=1</code> for the most humorous definition of "first 5".</p>

<pre><code>sub find_Cardano_triplet ( $x, $y ) {
    my $m = ($x + 1)**2 * (8*$x - 1);
    my $n = 27 * $y * $y;

    return if $m % $n;
    return [ $x, $y, $m / $n ];
}
say sprintf('%3d %3d %3d', @{$_}) for map { find_Cardano_triplet( (3 * $_ + 2, 1), ) } 0..4;
</code></pre>

<p>Output is the same triples as #4 in the Raku section.</p>
]]>
    </content>
</entry>
  <entry>
    <title>Calling a Python Function From Perl</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/29#expect_perl_python" type="text/html"/>
    <content type="html">
&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Recently the question came up of how to call a Python function from Perl. Here is one
way to do it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The method here is to use Expect.pm to create a subprocess containing the Python repl.
Python code is then loaded and called interactively. In my experience this is good for
calling, say, a BERT model on some text from Perl. This approach is minimalistic as 
compared to other solutions such as standing up a Fast API instance to serve the model.
Furthermore, this same pattern can be used for any arbitrary Python code you may need to 
call from Perl.&lt;/p&gt;

&lt;p&gt;While this works well it does introduce additional complexity to an application. If at all
possible it is preferable to re-write the Python functionality in Perl. An ideal use case
would be where it would be too laborious to re-implement the Python code in Perl. Imagine,
say, we want to use KeyBERT to extract keywords from a given body of text. In this case we
may be doing substantial data and text processing in Perl and merely need to call out to 
Python for this single function. If at some point KeyBERT were to become available 
natively to Perl, perhaps through the Apache MXNet bindings, then that interface should
be preferred. If nothing else, the performance improvement would be dramatic.&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# A simple example of calling a Python function
# from a Perl script using a Python repl started
# as a subprocess.
##
use Expect;
use boolean;
use constant TIMEOUT =&gt; 0.25; 
use constant PYTHON =&gt; q[/usr/bin/python];

sub create_python{
    my($io) = @_;
    my $python = do{
        local $/;
        &lt;DATA&gt;;
    };
    $$io = new Expect();
    $$io-&gt;log_stdout(false);
    $$io-&gt;raw_pty(true);
    $$io-&gt;spawn(PYTHON);
    $$io-&gt;send("$python\n\n");
    $$io-&gt;expect(TIMEOUT, q[-re] , q|m/[0-9]*/|);
    $$io-&gt;clear_accum();
}

sub call_python_sample{
    my($io, $arg) = @_;
    print $$io-&gt;send("sample(" . $arg . ")\n");
    $$io-&gt;expect(TIMEOUT, q[-re], qr[\d+]);
    my $r = $$io-&gt;exp_match();
    $$io-&gt;clear_accum();
    return $r;
}

MAIN:{
    my($io);
    create_python(\$io);
    print call_python_sample(\$io, 1) . "\n";
    print call_python_sample(\$io, 9) . "\n";
}

__DATA__
import os
os.system("stty -echo")
def sample(a):
    print(str(a + 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The results&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl call_python_.pl
2
10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The code here is a minimum working example. Well, fairly minimal in that I could have 
avoided breaking things up into multiple subroutines. In terms of cleanliness and 
explainability these divisions make sense, with only the added need to pass a reference to
an Expect object back and forth as a parameter.&lt;/p&gt;

&lt;p&gt;For a self-contained example the Python code we are going to run is contained in the DATA
section. For more complex use cases it would make sense to have the Python code in 
separate files which could be read in and loaded. They could also be specified directly as
arguments to the Python interpreter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sub create_python&lt;/code&gt; instantiates a new Expect object, sets some parameters for the 
object, and spawns the Python repl. We also clear the Expect buffers so that upon the next
invocation we need not worry about the Python header messages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sub call_python_sample&lt;/code&gt; calls the function of interest. Here it is just &lt;code&gt;sample()&lt;/code&gt; 
which takes a single argument, adds 1 to the argument, and prints out the result.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Effectively what we are doing is interprocess communication using text passed between the
two processes. Perl knows nothing of the state of the Python code, and vice versa. If you
call a Python function which does not print a value to STDOUT then you will need to add
your own print() call. This is not actually so bad a situation since Expect works by 
pattern matching on the expected (pun intended!) output. To ensure you are collecting the 
right values some massaging of what the Python code is doing is to be anticipated 
(pun avoided!). For example, suppose we want to call the KeyBERT function to extract key 
words from some given text. We might consider writing a wrapper function which takes
the output from &lt;code&gt;KeyBERT.extract_keywords&lt;/code&gt; (a list of tuples, each tuple a pair: key 
phrase and a distance) and concatenates and prints each of the pairs to STDOUT on a single
line. In this way our Perl regex can most easily pick up the phrase/distance pairs.&lt;/p&gt;

&lt;p&gt;Expect is a very mature tool, with a generous set of options and abilities. This sort of 
use is really just the tip of the iceberg. In terms of Perl being a "Glue Language" 
consider Expect to be a key ingredient that causes the glue to stick. Peruse the 
documentation for further inspiration.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Expect"&gt;Expect.pm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maartengr.github.io/KeyBERT/index.html"&gt;KeyBERT&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/expect_perl_python</id>
    <published>2022-01-29T16:30:00-05:00</published>
    <updated>2022-01-29T16:30:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7829319208382793807</id>
    <published>2022-01-29T21:39:00.000+01:00</published>
    <updated>2022-01-29T21:39:56.696+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxvii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/AnyEvent-Fork-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;AnyEvent::Fork&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - everything you wanted to use fork() for, but couldn't &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2022-01-26&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.31 was 5 years, 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/App-cpanminus-1.7045' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpanminus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - get, unpack, build and install modules from CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.7045&lt;/strong&gt; on 2022-01-27&lt;/li&gt;  &lt;li&gt;Votes: 260&lt;/li&gt;  &lt;li&gt;Previous version: 1.7044 was 3 years, 9 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Natural&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse informal natural language date/time strings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13&lt;/strong&gt; on 2022-01-23&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.12 was 10 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2022-01-26&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 1 year, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2022-01-26&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/GD-2.75' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GD&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the gd2 graphics library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.75&lt;/strong&gt; on 2022-01-25&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 2.73 was 1 year, 4 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.054' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.054&lt;/strong&gt; on 2022-01-27&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 1.052 was 1 year, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.070' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.070&lt;/strong&gt; on 2022-01-28&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.068 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/PPI-1.271' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse, Analyze and Manipulate Perl (without perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.271&lt;/strong&gt; on 2022-01-25&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 1.270 was 2 years, 6 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9132' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9132&lt;/strong&gt; on 2022-01-28&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9126 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7829319208382793807/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvii-10-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7829319208382793807"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7829319208382793807"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvii-10-great-cpan-modules.html" title="(ccclxxvii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-718234730276066767</id>
    <published>2022-01-29T21:36:00.000+01:00</published>
    <updated>2022-01-29T21:36:12.072+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-01-29 20:35:53 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70868805" target="_blank"&gt;Why does Perl allow functions to be declared without being defined?&lt;/a&gt; - [&lt;b&gt;18&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70827168" target="_blank"&gt;Why does combining Perl hashes in and each expression not work?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70837207" target="_blank"&gt;Cpan, address already in use error when installing IO::Socket::Timeout&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70892478" target="_blank"&gt;Perl numeric comparison of numeric strings understanding and debugging&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70818333" target="_blank"&gt;How to not export all functions/methods from a package in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/718234730276066767/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/718234730276066767"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/718234730276066767"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxix-stackoverflow-perl-report.html" title="(dxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grant Report 2021-12/2022-01 Raku CI Bot by Patrick Böker</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-raku-ci-bot-2022-01"/>
  <id>tag:news.perlfoundation.org,2022-01-29:/post/grant-report-raku-ci-bot-2022-01</id>
  <published>2022-01-29T10:45:20</published>
  <updated>2022-01-29T10:45:20</updated>
  <summary>
  <![CDATA[
     Regarding the progress on his Raku CI Bot grant, Patrick Böker writes: In December and January I worked in different areas of RCB: I fixed smaller errors in all parts of the stack, so that now testing on the OBS backend works, ignoring errors caused by the still open bugs listed below. I started work on the website which currently allows viewing test status and results of a given test 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding the progress on his Raku CI Bot grant, Patrick Böker writes:</p>

<hr />

<p>In December and January I worked in different areas of RCB:</p>

<ul>
<li>I fixed smaller errors in all parts of the stack, so that now testing on the OBS backend works, ignoring errors caused by the still open bugs listed below.</li>
<li>I started work on the website which currently allows viewing test status and results of a given test set and downloading of the source archive the build was based on.</li>
<li>I fixed MoarVM#1614 which turned out to be a long standing bug in the Raku OpenSSL library. I had a lot of help with debugging MoarVM from niner++.</li>
</ul>

<p>Red#537 is making me nervous. It's a bug in Red, which causes Red to mix up different queries in a concurrent setting. The cause is that dynamic variables don't survive through supply / react / whenever blocks and Red relies on several dynamic variables to communicate its state through the stack. Currently the Red author is out of ideas of how to solve this.</p>

<h2>Bug rooster</h2>

<p>Solved:</p>

<ul>
<li>MoarVM#1614: NativeCall error <a href="https://github.com/MoarVM/MoarVM/issues/1614">#1614</a> (Severity: Medium)</li>
</ul>

<p>New:</p>

<ul>
<li>Cro::WebApp#62: <code>&lt;:use&gt;</code> doesn't see route level template locations https://github.com/croservices/cro-webapp/issues/62) (Severity: Low, workaround available)</li>
</ul>

<p>Unchanged:</p>

<ul>
<li>Red#537: Unknown columns in query in concurrent setting <a href="https://github.com/FCO/Red/issues/537">#537</a> (Severity: High)</li>
<li>Red#527: Enum on Pg: invalid input syntax for type integer: \"a\" [#527] (https://github.com/FCO/Red/issues/527) (Severity: High)</li>
<li>Cro::HTTP#161: Implement remote window handling <a href="https://github.com/croservices/cro-http/pull/161">#161</a> (Severity: High, PR: me)</li>
<li>Red#495: SELECTing enums generates broken WHERE in most cases <a href="https://github.com/FCO/Red/issues/495">#495</a> (Severity: Low, workaround available)</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>My Favorite Warnings: precedence</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-precedence.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10654</id>
    <published>2022-01-27T23:06:24Z</published>
    <updated>2022-01-27T23:07:49Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Perl possesses a rich and expressive set of operators. So rich, in fact, that other adjectives can come to mind, such as prolix, or even Byzantine.</p>

<p>Requests for help navigating Perl's operator space appear repeatedly on outlets such as <a href="https://www.perlmonks.org/">PerlMonks</a>. These seem to me to involve two sorts of confusion: precedence (discussed here) and functionality (string versus numeric -- maybe another blog post).</p>

<p>The <code>precedence</code> <a href="https://perldoc.perl.org/warnings.html"><code>warnings</code></a> category has some help here, though as of Perl 5.34 there are only two diagnostics under it:</p>

<dl>

<p>    <dt>Precedence problem: open %s should be open(%s)</dt><br />
    <dd>This involves the "open a file or die" idiom. It seems that in very early versions of Perl (4 and earlier?) there was a special case in the compiler allowing the use of the double-pipe <code>logical or</code> operator (<code>'||'</code>) in this idiom. This disappeared before I first started using Perl, in favor of the low-precedence <code>'or'</code> operator. But because the internet never forgets anything people learning Perl from Google try to use it. Unfortunately they do not learn <code>use warnings;</code> from such sources, hence the questions.</dd></p>

<p>    <dt>Possible precedence problem on bitwise %s operator</dt><br />
    <dd>This involves the fact that the bitwise logical operators have lower precedence than the comparison operators, so that <code>$x &amp; $y == $z</code> compiles unexpectedly (to some, including me) to <code>$x &amp; ( $y == $z )</code>.</dd></p>

</dl>

<p>My impression is that most of the precedence queries on places like PerlMonks come from the fact that Perl has two sets of Boolean operators, differing only in precedence. An inexperienced Perl programmer trying to write clear code might choose <code>'and'</code> over <code>'&amp;&amp;'</code> because it is less cryptic, and then fall over the fact that its precedence is lower than the assignment operator.</p>

<p>It is hard to see how the Perl compiler could deliver useful warnings in more than a fraction of these cases, at least not without a Vulcan Mind Meld interface to determine what the programmer actually meant. There is a <a href=" https://metacpan.org/pod/Perl::Critic">Perl::Critic</a> policy that tries to deal with this (<a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitMixedBooleanOperators">::ValuesAndExpressions::ProhibitMixedBooleanOperators</a>), but unless the neophyte has a Perl support system <code>perlcritic</code> is unlikely to be available. And anyway this specific policy looks like training wheels to me, Perl Best Practices to the contrary notwithstanding.</p>

<p>									</p>

<p>Previous entries in this series:</p>
<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"><code>redefine</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings---ex-warnings.html">Ex-Warnings</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-deprecated.html"><code>deprecated</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-experimental.html"><code>experimental</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-shadow.html"><code>shadow</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-syntax.html"><code>syntax</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-ambiguous.html"><code>ambiguous</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-closure.html"><code>closure</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-qw.html"><code>qw</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 149: Fibonacci Digit Sum and Largest Square</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/01/perl-weekly-challenge-149-fibonacci-digit-sum-and-largest-square.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10653</id>
    <published>2022-01-27T03:45:19Z</published>
    <updated>2022-01-27T19:59:55Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 149 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-149/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on January 30, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Fibonacci Digit Sum</h2>

<p><em>Given an input <code>$N</code>, generate the first <code>$N</code> numbers for which the sum of their digits is a Fibonacci number.</em></p>

<p><em>Example:</em></p>

<pre><code>f(20)=[0, 1, 2, 3, 5, 8, 10, 11, 12, 14, 17, 20, 21, 23, 26, 30, 32, 35, 41, 44]
</code></pre>

<h3>Fibonacci Digit Sum in Raku</h3>

<p>We first populate a <a href="https://docs.raku.org/type/Set">Set</a> (for fast look-up) with the Fibonacci numbers up to 1000. Note that we could choose a much smaller maximum value, but it doesn&#8217;t cost much and it will work with very large sequences.</p>

<p>To generate the Fibonacci numbers, we use the <a href="https://docs.raku.org/language/operators#index-entry-sequence_operator">sequence operator</a>, in which we provide the first two numbers of the Fibonacci sequence and a formula (<code>* + *</code>) to compute a Fibonacci number from the two previous ones. The last part of the code line is the stopping condition. This idiomatic construction makes the code very concise and fast. This is an example in a Raku one-liner:</p>

<pre><code>$ raku -e 'say 0, 1, * + * ...^  * &gt; 100'
(0 1 1 2 3 5 8 13 21 34 55 89)
</code></pre>

<p>Then, we use the <a href="https://docs.raku.org/language/control#gather/take">gather / take</a> construct to loop over successive integers and store those satisfying the criteria, and we stop when we reach the limit.</p>

<pre><code>sub MAIN (Int $max = 20) {       # 20: default input value
    my $fibo = set(0, 1, * + * ...^  * &gt; 1000);
    my $count = 0;
    my @numbers = gather {
        for 0 .. Inf -&gt; $num {
            if $num.comb.sum (elem) $fibo {
                take $num;
                $count++;
                last if $count &gt;= $max;
            }
        }
    }
    say @numbers;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./fib_digit_sum.raku
[0 1 2 3 5 8 10 11 12 14 17 20 21 23 26 30 32 35 41 44]

$ raku ./fib_digit_sum.raku 25
[0 1 2 3 5 8 10 11 12 14 17 20 21 23 26 30 32 35 41 44 49 50 53 58 62]
</code></pre>

<h3>Fibonacci Digit Sum in Perl</h3>

<p>The Perl solution follows essentially the same ideas as the Raku implementation, except that we use a plain <code>while</code> loop (instead of a sequence) to generate the Fibonacci numbers and we store them in a hash instead of a set for fast look-up.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub fib_digit_sum {
    my $max = shift;
    my @fib = (0, 1);
    my $count = 1;
    while ($count &lt; 100) {
        push @fib, $fib[-1] + $fib[-2];
        $count ++;
    }
    my %fibo = map { $_ =&gt; 1 } @fib;
    my @numbers;
    my $count_result = 0;
    my $i = 0;
    while ($count_result &lt; $max) {
        my $sum = 0;
        $sum += $_ for split //, $i;
        if (exists $fibo{$sum}) {
            push @numbers, $i;
            $count_result++;
        }
        $i++
    }           
     say "@numbers";
}

fib_digit_sum(shift);
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./fib_digit_sum.pl 20
0 1 2 3 5 8 10 11 12 14 17 20 21 23 26 30 32 35 41 44

$ perl ./fib_digit_sum.pl 50
0 1 2 3 5 8 10 11 12 14 17 20 21 23 26 30 32 35 41 44 49 50 53 58 62 67 71 76 80 85 94 100 101 102 104 107 110 111 113 116 120 122 125 131 134 139 140 143 148 152
</code></pre>

<h2>Task 2: Largest Square</h2>

<p><em>Given a number base, derive the largest perfect square with no repeated digits and return it as a string. (For base>10, use ‘A’..‘Z’.)</em></p>

<p><em>Example:</em></p>

<pre><code>f(2)="1"
f(4)="3201"
f(10)="9814072356"
f(12)="B8750A649321"
</code></pre>

<p>Note that any program that I can think of for solving this task is bound to become very slow for large bases (especially some of them such as 13  in the case of the programs below). </p>

<h3>Largest Square in Raku</h3>

<p>We start with the largest number that can be expressed in <code>$base</code> digits in the given <code>$base</code>. We compute <code>largest_root</code>, the integer part of the root of that number. Then we iterate down one by one from <code>largest_root</code> and check whether the square of each such number has no duplicate digit when expressed in the input base. </p>

<pre><code>sub largest ($base) {
    my $largest_num = $base ** $base - 1;
    my $largest_root = $largest_num.sqrt.Int;
    for (1..$largest_root).reverse -&gt; $i {
        my $sq = $i².base($base);
        next if $sq.chars != $sq.comb.Set;
        say "f($base) = $sq" and last;
    }
}
for 1..14 -&gt; $test { largest $test }
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./largest_sq.raku
f(2) = 1
f(3) = 1
f(4) = 3201
f(5) = 4301
f(6) = 452013
f(7) = 6250341
f(8) = 47302651
f(9) = 823146570
f(10) = 9814072356
f(11) = A8701245369
f(12) = B8750A649321
f(13) = CBA504216873
f(14) = DC71B30685A924
</code></pre>

<h3>Largest Square in Perl</h3>

<p>This is essentially the same idea in Perl. We use two helper subroutines: <code>has_unique_digits</code> to discard squares having duplicate digits (using a hash), and <code>base_to_b</code> to convert a number into a string representing that number in the given base.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub base_to_b {
    my ($n, $b) = @_;
    my $s = "";
    while ($n) {
        $s .= ('0'..'9','A'..'Z')[$n % $b];
        $n = int($n / $b);
    }
    scalar(reverse($s));
}

sub has_unique_digits {
    my $in = shift; 
    my %seen = map { $_ =&gt; 1 } split //,  $in;
    return length $in == scalar keys %seen;
}

sub largest {
    my $base = shift;
    my $largest_num = $base ** $base - 1;
    my $largest_root = int sqrt $largest_num;
    for my $i ( reverse 1..$largest_root) {
        my $sq = base_to_b ($i*$i, $base);
        next unless has_unique_digits $sq;
        say "f($base) = $sq" and last;
    }
}

largest $_ for 1..14;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./largest_sq.pl
f(2) = 1
f(3) = 1
f(4) = 3201
f(5) = 4301
f(6) = 452013
f(7) = 6250341
f(8) = 47302651
f(9) = 823146570
f(10) = 9814072356
f(11) = A8701245369
f(12) = B8750A649321
f(13) = CBA504216873
f(14) = DC71B30685A924
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on February 6, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>100 Languages Speedrun: Episode 68: Raku (Perl 6) Grammars</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-68-raku-perl-6-grammars-9f0" type="text/html"/>
    <content type="html">&lt;p&gt;I covered &lt;a href="https://dev.to/taw/languages-speedrun-episode-26-raku-perl-6-4emf"&gt;Raku&lt;/a&gt; and &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-47-raku-perl-6-regular-expressions-4p8n"&gt;Raku regular expressions&lt;/a&gt; before, now it's time to complete this with an episode about Raku grammars.&lt;/p&gt;

&lt;p&gt;Processing text is one of the most common tasks in programming, so most languages since Perl come with some kind of regular expression system. Generally the basic regexps are the same, but each language comes with some unique extensions. Raku notably does not keep the traditional regexp syntax even for the common things, but conceptually they're mostly the same.&lt;/p&gt;

&lt;p&gt;A regular expression can extract information from a string based on some pattern, but often we need something more advanced. So a lot of languages also have some way to define tokenizers, which chop the string into pieces based on multiple regular expressions. Notably Perl's &lt;code&gt;/gc&lt;/code&gt; flag, and Ruby &lt;a href="https://ruby-doc.org/stdlib-3.0.0/libdoc/strscan/rdoc/StringScanner.html"&gt;&lt;code&gt;StringScanner&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Raku takes it one step further, and supports defining grammars as part of the language. Pretty much every other language needs external tools like Yacc or ANTLR for that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#named-regular-expressions"&gt;
  &lt;/a&gt;
  Named regular expressions
&lt;/h3&gt;

&lt;p&gt;Before we get to grammars, let's take a tiny detour to regular expressions. In addition to defining them in one go, we can also define them in pieces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;digit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;nonzero_digit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;byte&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;                 &lt;span class="c1"&gt;# 0-9&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;nonzero_digit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# 10-99&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="c1"&gt;# 100-199&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;digit&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;      &lt;span class="c1"&gt;# 200-249&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;             &lt;span class="c1"&gt;# 250-255&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;ipv4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.2.3.4&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100.200.300.400&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;02.03.04.05&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.2.3.4.5&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it's a kitty!&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;69.420.69.420&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10.20.30.40 &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;127.0.0.1.&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;๓.๓.๓.๓&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="c1"&gt;# \d bug still there&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VALID: '&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;'&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;ipv4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NOT VALID: '&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;'&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;!~~&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;ipv4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially I thought I could even define some mutually recursive regular expressions, and get simple parsers this way, but that is not actually supported.&lt;/p&gt;

&lt;p&gt;Notice unusual sigils we need to use in this case - &lt;code&gt;&amp;lt;digit&amp;gt;&lt;/code&gt; inside regular expression, and &lt;code&gt;&amp;amp;ipv4&lt;/code&gt; outside it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-value-grammar"&gt;
  &lt;/a&gt;
  Key Value Grammar
&lt;/h3&gt;

&lt;p&gt;Let's start with extremely simple grammar, one that matches a single key value pair, with a single word on both sides:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;grammar&lt;/span&gt; &lt;span class="nv"&gt;KV&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;zA&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;Z0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat=cute&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4=5&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat = fluffy&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat=dog=ferret&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c a t = d o g&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PARSED: &lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MATCH: $/&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;KEY IS: $/.&amp;lt;key&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VALUE IS: $/.&amp;lt;value&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PARSE TREE:&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FAILED: &lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./kv.raku
PARSED: cat=cute
MATCH: cat=cute
KEY IS: cat
VALUE IS: cute
PARSE TREE:
｢cat=cute｣
 key =&amp;gt; ｢cat｣
  id =&amp;gt; ｢cat｣
 value =&amp;gt; ｢cute｣
  id =&amp;gt; ｢cute｣

PARSED: 4=5
MATCH: 4=5
KEY IS: 4
VALUE IS: 5
PARSE TREE:
｢4=5｣
 key =&amp;gt; ｢4｣
  id =&amp;gt; ｢4｣
 value =&amp;gt; ｢5｣
  id =&amp;gt; ｢5｣

PARSED: cat = fluffy
MATCH: cat = fluffy
KEY IS: cat
VALUE IS: fluffy
PARSE TREE:
｢cat = fluffy｣
 key =&amp;gt; ｢cat｣
  id =&amp;gt; ｢cat｣
 value =&amp;gt; ｢fluffy｣
  id =&amp;gt; ｢fluffy｣

FAILED: cat

FAILED: cat=dog=ferret

FAILED: c a t = d o g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's cover everything that's going on here, and it's a lot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can define &lt;code&gt;grammar&lt;/code&gt; sort of like we declare a &lt;code&gt;class&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;tokens are declared with &lt;code&gt;regex&lt;/code&gt; (or &lt;code&gt;token&lt;/code&gt;, which has slightly different rules)&lt;/li&gt;
&lt;li&gt;parse rules are defined with &lt;code&gt;rule&lt;/code&gt;, and can refer to other rules, named regexps, or just plain strings&lt;/li&gt;
&lt;li&gt;parse rule &lt;code&gt;TOP&lt;/code&gt; is the default rule for the whole grammar&lt;/li&gt;
&lt;li&gt;by default, whitespace is allowed between tokens, notice &lt;code&gt;cat = fluffy&lt;/code&gt; parsed even though we didn't say anything about optional spaces&lt;/li&gt;
&lt;li&gt;this does not happen within the regex, notice how &lt;code&gt;c a t = d o g&lt;/code&gt; failed to parse&lt;/li&gt;
&lt;li&gt;we can override this whitespace parsing by redefining &lt;code&gt;ws&lt;/code&gt; regexp&lt;/li&gt;
&lt;li&gt;we can use &lt;code&gt;KV.parse($string)&lt;/code&gt; or &lt;code&gt;KV.parsefile($filename)&lt;/code&gt; to parse a string or a file&lt;/li&gt;
&lt;li&gt;parse result is returned from &lt;code&gt;KV.parse&lt;/code&gt;, and also saved to &lt;code&gt;$/&lt;/code&gt;, the same one used for regexp matching&lt;/li&gt;
&lt;li&gt;we can navigate the parse tree with &lt;code&gt;.&amp;lt;name&amp;gt;&lt;/code&gt;, we can also stringify any part of it, it will return the matching part&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we use grammars this way, we don't really gain much over just using regular expressions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h3&gt;

&lt;p&gt;The second part of parsing is actions associated with each rule. In many parsing languages, grammars and their actions are defined together. In Raku they're defined separately, which makes it easy to have multiple sets actions for the same grammar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;grammar&lt;/span&gt; &lt;span class="nv"&gt;KV&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;zA&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;Z0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;KVActions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="s"&gt;made&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Str&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat=cute&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4=5&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat = fluffy&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat=dog=ferret&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c a t = d o g&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;KVActions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PARSED: &lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RESULT: &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FAILED: &lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./actions.raku
PARSED: cat=cute
RESULT: {cat =&amp;gt; cute}

PARSED: 4=5
RESULT: {4 =&amp;gt; 5}

PARSED: cat = fluffy
RESULT: {cat =&amp;gt; fluffy}

FAILED: cat

FAILED: cat=dog=ferret

FAILED: c a t = d o g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we define actions with &lt;code&gt;class KVActions { }&lt;/code&gt; and each action with &lt;code&gt;method name($/) { ... }&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; corresponding to a rule in the grammar&lt;/li&gt;
&lt;li&gt;by the way this is regular class, so you can do regular OO stuff like inheriting from it, override specific actions, metaprogram etc.&lt;/li&gt;
&lt;li&gt;there are many ways to use it, but generally to create a token you do &lt;code&gt;make somedata&lt;/code&gt;, and it will return match object with &lt;code&gt;somedata&lt;/code&gt; associated with given rule&lt;/li&gt;
&lt;li&gt;you can access subtrees and their associated data with &lt;code&gt;$/.&amp;lt;subrule&amp;gt;.made&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;you can access text of what was matched by different subtrees with &lt;code&gt;$/.&amp;lt;subrule&amp;gt;.Str&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;once you parse the whole tree, you can do &lt;code&gt;$/.made&lt;/code&gt; to access result of the whole parsing&lt;/li&gt;
&lt;li&gt;this is just the usual way of doing things, there are of course many other ways&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rpn-calculator"&gt;
  &lt;/a&gt;
  RPN Calculator
&lt;/h3&gt;

&lt;p&gt;RPN Calculator grammar is very easy - it's just a list of tokens, with optional spaces between them ignored. We could just use a tokenizer for this, but let's use a Raku grammar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;grammar&lt;/span&gt; &lt;span class="nv"&gt;RPN&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;tok&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;tok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;"?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;out&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;RPNActions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;tok&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;tok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;($m) {&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@$m&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
    &lt;span class="nv"&gt;given&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$*IN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;out&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;@stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pop&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unknown operator &lt;/span&gt;&lt;span class="si"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;@*ARGS&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Usage: $*PROGRAM-NAME &amp;lt;file.rpn&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@*ARGS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;RPN&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;parsefile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;RPNActions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;run&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;made&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Parse error&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./rpn.raku rpn/temperature_c_to_f.rpn
0
32
$ ./rpn.raku rpn/temperature_c_to_f.rpn
100
212
$ ./rpn.raku rpn/temperature_c_to_f.rpn
25.7
78.26
$ ./rpn.raku rpn/mile_to_km.rpn
1000
1609.34
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;grammar has very few simple rules - optional whitespaces between tokens are implied because we didn't turn them off. I don't think this should really be the default, as it makes grammar ambiguous (what is whitespace? just spaces and tabs? newlines? any exotic Unicode stuff?), but it's useful for these toy cases&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&amp;lt;tok&amp;gt;&lt;/code&gt; is the same as &lt;code&gt;$/.&amp;lt;tok&amp;gt;&lt;/code&gt;, for both normal regexps and grammars&lt;/li&gt;
&lt;li&gt;actions for &lt;code&gt;op&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; are simple enough, &lt;code&gt;+&lt;/code&gt; operator in Raku converts to a number&lt;/li&gt;
&lt;li&gt;action for &lt;code&gt;tok&lt;/code&gt; already looks bad with just two cases, and it would look awful if we listed every kind of op separately. Raku has better syntax to deal with this alternatives, because it absolutely needs it.&lt;/li&gt;
&lt;li&gt;action for &lt;code&gt;TOP&lt;/code&gt; is interesting - as we had &lt;code&gt;&amp;lt;tok&amp;gt;*&lt;/code&gt;, &lt;code&gt;$&amp;lt;tok&amp;gt;&lt;/code&gt; is already an array - as we only care about tokens made, we just &lt;code&gt;.map(*.made)&lt;/code&gt; it. Due to Raku having Perl-style scalar vs list context distinction, we need to wrap that in extra &lt;code&gt;[]&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;the whole process returns single &lt;code&gt;$/&lt;/code&gt;, with array of tokens as that's what we constructed&lt;/li&gt;
&lt;li&gt;it's not really part of the grammar, but I added simple &lt;code&gt;run&lt;/code&gt; function to run our RPN program&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#parser-feedback"&gt;
  &lt;/a&gt;
  Parser Feedback
&lt;/h3&gt;

&lt;p&gt;OK, let's do something more complicated, and also let's increase our expectations as to what we want the parser to do. Here's a simple grammar for sums expressions, and yes, it is ambiguous as &lt;code&gt;2+3+4&lt;/code&gt; can be parsed as &lt;code&gt;2+(3+4)&lt;/code&gt; or &lt;code&gt;(2+3)+4&lt;/code&gt;. But we won't be feeding it any such input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;grammar&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;parens&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;parens&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;operation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;"?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-4.20&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;((5))&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2+3&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(2+3)&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Parse error: &lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's give it a try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./math.raku
｢100｣
 expr =&amp;gt; ｢100｣
  number =&amp;gt; ｢100｣
｢-4.20｣
 expr =&amp;gt; ｢-4.20｣
  number =&amp;gt; ｢-4.20｣
｢((5))｣
 expr =&amp;gt; ｢((5))｣
  parens =&amp;gt; ｢((5))｣
   expr =&amp;gt; ｢(5)｣
    parens =&amp;gt; ｢(5)｣
     expr =&amp;gt; ｢5｣
      number =&amp;gt; ｢5｣
Parse error: 2+3
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It completely fails to parse &lt;code&gt;2+3&lt;/code&gt;, and it just hangs there on &lt;code&gt;(2+3)&lt;/code&gt;. What?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grammar-debugging"&gt;
  &lt;/a&gt;
  Grammar Debugging
&lt;/h3&gt;

&lt;p&gt;I was really baffled by what was going on. I could make the grammar completely unambiguous in a few ways, but that didn't solve the problem at all - different grammars I'd write would result in different baffling issues.&lt;/p&gt;

&lt;p&gt;Eventually it occurred to me that this is neither LL-style or LR-style parsing I was expecting, but PEG, which is highly sensitive to order of alternatives. It basically YOLOs any ambiguity by always picking the first matching alternative as soon as it can, even if it then can't match the rest. I only have experience with LR and LL parsing, not PEG, so I dropped my idea of writing any big grammars in Raku.&lt;/p&gt;

&lt;p&gt;Anyway, the problem isn't that I run into such issues, or that it's PEG parsing. The problem is that traditional parser generator tools normally come with tools to debug grammar issues; and if you write recursive descend parser by hand, it's just functions calling other functions which you can debug the usual ways. Raku just lacks such tools. If you have problems with your grammar, tough luck.&lt;/p&gt;

&lt;p&gt;And while this problem would apply to every kind of parsing, PEG grammars are far more sensitive to tiny changes than traditional LL and LR grammars, so you'll need debugging tools more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-sums-grammar"&gt;
  &lt;/a&gt;
  Working Sums Grammar
&lt;/h3&gt;

&lt;p&gt;I eventually figured out one way to make PEG grammars work for simple sums. The problem was that Raku was of no help and I had to figure it out from just the theory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env raku&lt;/span&gt;

&lt;span class="nv"&gt;grammar&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;TOP&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;expr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;op&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;parens&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;rule&lt;/span&gt; &lt;span class="nv"&gt;parens&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;expr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;"?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt;&lt;span class="p"&gt;]?&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;regex&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-4.20&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;((5))&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2+3&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(2+3)&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2+3+4&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@examples&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Parse error: &lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  ./math2.raku
｢100｣
 expr =&amp;gt; ｢100｣
  value =&amp;gt; ｢100｣
   number =&amp;gt; ｢100｣
｢-4.20｣
 expr =&amp;gt; ｢-4.20｣
  value =&amp;gt; ｢-4.20｣
   number =&amp;gt; ｢-4.20｣
｢((5))｣
 expr =&amp;gt; ｢((5))｣
  value =&amp;gt; ｢((5))｣
   parens =&amp;gt; ｢((5))｣
    expr =&amp;gt; ｢(5)｣
     value =&amp;gt; ｢(5)｣
      parens =&amp;gt; ｢(5)｣
       expr =&amp;gt; ｢5｣
        value =&amp;gt; ｢5｣
         number =&amp;gt; ｢5｣
｢2+3｣
 expr =&amp;gt; ｢2+3｣
  value =&amp;gt; ｢2｣
   number =&amp;gt; ｢2｣
  op =&amp;gt; ｢+｣
  value =&amp;gt; ｢3｣
   number =&amp;gt; ｢3｣
｢(2+3)｣
 expr =&amp;gt; ｢(2+3)｣
  value =&amp;gt; ｢(2+3)｣
   parens =&amp;gt; ｢(2+3)｣
    expr =&amp;gt; ｢2+3｣
     value =&amp;gt; ｢2｣
      number =&amp;gt; ｢2｣
     op =&amp;gt; ｢+｣
     value =&amp;gt; ｢3｣
      number =&amp;gt; ｢3｣
｢2+3+4｣
 expr =&amp;gt; ｢2+3+4｣
  value =&amp;gt; ｢2｣
   number =&amp;gt; ｢2｣
  op =&amp;gt; ｢+｣
  value =&amp;gt; ｢3｣
   number =&amp;gt; ｢3｣
  op =&amp;gt; ｢+｣
  value =&amp;gt; ｢4｣
   number =&amp;gt; ｢4｣
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be extended to other operators, and in the end my solution is somewhat similar to what an LL grammar would look like.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-raku-grammars"&gt;
  &lt;/a&gt;
  Should you use Raku Grammars?
&lt;/h3&gt;

&lt;p&gt;I definitely support the idea of adding grammars to the language, and it's already useful enough for libraries like &lt;code&gt;JSON::Tiny&lt;/code&gt;, but right now I don't think this is good enough execution yet.&lt;/p&gt;

&lt;p&gt;You as grammar writer won't get any feedback about the issues. And users won't get any feedback about why their input isn't matching.&lt;/p&gt;

&lt;p&gt;For anyone interested in implementing grammar parsing in their own language, I'd recommend going the &lt;code&gt;LL(*)&lt;/code&gt; route like ANTLR does it, not PEG route. PEG grammars can be good enough for some things, but they're so much harder to write and debug, and a lot more restrictive. But either way, you really need to work on your tooling a lot more than Raku did.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-68-raku-grammars"&gt;Code for the Raku (Perl 6) Grammars episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-68-raku-perl-6-grammars-9f0</id>
    <published>2022-01-27T00:52:21Z</published>
    <updated>2022-01-27T00:52:21Z</updated>
    <category term="raku"/>
    <category term="perl6"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Release 1.9.11 of Perl distribution of Crypt::OpenSSL::X509, followed by 1.9.12</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1911-of-perl-distribution-of-cryptopensslx509-followed-by-1912-5ei1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Recently I published a new release of the Perl distribution <a href="https://metacpan.org/dist/Crypt-OpenSSL-X509">Crypt::OpenSSL::X509</a>.</p>

<p>A release had not been made since August, I had lined one up and planned for November 2021, but never got it shipped, but now I found the time.</p>

<p>As always I am incredibly happy for the users of, and the contributors to the distribution and this release contains PRs from 3 different contributors:</p>

<ul>
<li>James Rouzier <a href="https://github.com/jrouzierinverse">@jrouzierinverse</a>
</li>
<li>Florian Schlichting <a href="https://github.com/fschlich">@fschlich</a>
</li>
<li>Timothy Legge <a href="https://github.com/timlegge">@timlegge</a>
</li>
</ul>

<p>If you want to contribute you are always welcome to submit issues or PRs via the <a href="https://github.com/dsully/perl-crypt-openssl-x509">GitHub repository</a></p>

<p>Well that all sounds <em>honky dory</em> BUT, things went sideways... the first attempt at an upload to PAUSE, the gateway for CPAN was an empty tar-ball.</p>

<p>Luckily Timothy Legge swiftly informed me of the issue. Unfortunately it is not possible to upload a file with the same name twice, so release 1.9.12 followed just after.</p>

<p>I think I need to write some scripts to help me with these releases, so I do not make stupid mistakes, or I should migrate to Dist::Zilla, which is a stronger tool compared to Module::Install IMHO.</p>

<p>The distribution still relies on OpenSSL 1, next up is support for OpenSSL 3. I am planning a bug fix/maintenance release in between.</p>

<p>Take care,</p>

<p>jonasbn</p>

<h2>
  <a href="#change-log-1911-tue-jan-18-185739-cet-2022">
  </a>
  Change Log 1.9.11 Tue Jan 18 18:57:39 CET 2022
</h2>

<ul>
<li><p>Applied patch from @jrouzierinverse PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/93">#93</a> addressing issue <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/66">#66</a></p></li>
<li><p>Applied patch from @timlegge PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/92">#92</a> addressing issues <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/50">#50</a> and <a href="https://github.com/dsully/perl-crypt-openssl-x509/issues/40">#40</a></p></li>
<li><p>Correction to spelling found Debian Linter, thanks @fschlich PR <a href="https://github.com/dsully/perl-crypt-openssl-x509/pull/90">#90</a></p></li>
<li><p>Added eliminated compound-token-split-by-macro errors coming from newer clang/LLVM version (&gt;11?), got some good pointers from this <a href="https://github.com/Perl/perl5/issues/18780">Perl issue</a></p></li>
<li><p>Forced OpenSSL under Homebrew to 1.1 via <code>openssl\@1.1</code>, since OpenSSL version 3 got released we might experience issues and this need to be revisited and tested thoroughly</p></li>
<li><p>Reformatted the Changes file, slowly converting to Markdown</p></li>
</ul>

<h2>
  <a href="#change-log-1911-tue-jan-18-185739-cet-2022">
  </a>
  Change Log 1.9.11 Tue Jan 18 18:57:39 CET 2022
</h2>

<ul>
<li>Repair upload, see release 1.9.11, thank you @timlegge for reporting this</li>
</ul>

<blockquote>
<p>PAUSE doesn't let you upload a file twice.</p>
</blockquote>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-1911-of-perl-distribution-of-cryptopensslx509-followed-by-1912-5ei1</id>
    <published>2022-01-26T19:56:28Z</published>
    <updated>2022-01-26T19:56:28Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>#548 - Perl Books Collection</title>
    <link rel="alternate" href="https://perlweekly.com/archive/548.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Do you have a Perl books collection?</p>
<p>I am sure most of us own the <strong>Camel</strong> book. As you know, there have been hardly any new <strong>Perl</strong> books published in recent years. I recently bought two very popular <strong>Perl</strong> books <strong>"Extending and Embedding Perl"</strong> and <strong>"Network Programming with Perl"</strong>. I have realised there are two distinct views about good old <strong>Perl</strong> books. One view is that the recommendations in these books are no longer in use, since we have better choices available on <strong>CPAN</strong> now. I fully agree with this view but I also agree to the other view that it is still relevant in terms of base knowledge of the subject. Above all, there is a sentimental values attached to each <strong>Perl</strong> book that I own.</p>
<p>How about you?</p>
<p>Last week, <strong>Gabor</strong>, spoke about learning languages in his editorial. Being an <strong>Indian</strong> by birth, I know more than just the national language of India, <strong>Hindi</strong>. I can understand, to be precise, <strong>six human languages</strong>. Nowadays, I am learning <strong>Spanish</strong> from my daughter as she is learning as part of her school curriculum. But here I would like to know how many programming languages one can fluently code in. Recently in <a href="https://theweeklychallenge.org">The Weekly Challenge</a> contest, we have received loads of solutions in different languages. In <strong>week 147</strong>, we received <strong>100+</strong> solutions. One member who stands out front the crowd is <strong>Abigail</strong>, who has contributed in <strong>30 different programming languages</strong>. To me it seems impossible, but he did it.</p>
<p>How many programming languages do I know? Well thanks to the weekly challenge, I have had the opportunity to code in <strong>Raku</strong>, <strong>Python</strong>, <strong>Java</strong> and <strong>Swift</strong> as well as <strong>Perl</strong>, of course. Do you want to try some new languages? Please give it a try.</p>
<p>Enjoy the week and stay safe.</p></div>
    </content>
    <id>https://perlweekly.com/archive/548.html</id>
    <published>2022-01-24T10:00:00Z</published>
    <updated>2022-01-24T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4280747974760313097</id>
    <published>2022-01-22T22:05:00.000+01:00</published>
    <updated>2022-01-22T22:05:23.288+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxvi) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ZARQUON/DBD-Oracle-1.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Oracle&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Oracle database driver for the DBI module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.83&lt;/strong&gt; on 2022-01-17&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 1.82 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIKIHOSHI/Devel-Cover-Report-Coveralls-0.30' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::Cover::Report::Coveralls&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - coveralls backend for Devel::Cover &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.30&lt;/strong&gt; on 2022-01-18&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.20 was 1 year, 2 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.61&lt;/strong&gt; on 2022-01-21&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.60 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.23&lt;/strong&gt; on 2022-01-20&lt;/li&gt;  &lt;li&gt;Votes: 88&lt;/li&gt;  &lt;li&gt;Previous version: 10.22 was 7 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220120&lt;/strong&gt; on 2022-01-20&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 5.20211220 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.122' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.122&lt;/strong&gt; on 2022-01-16&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 0.120 was 2 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.028' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.028&lt;/strong&gt; on 2022-01-19&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 1.027 was 3 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9126' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9126&lt;/strong&gt; on 2022-01-21&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9121 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Test-LWP-UserAgent-0.036' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A LWP::UserAgent suitable for simulating and testing network calls &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.036&lt;/strong&gt; on 2022-01-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.035 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4280747974760313097/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvi-9-great-cpan-modules-released_22.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4280747974760313097"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4280747974760313097"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvi-9-great-cpan-modules-released_22.html" title="(ccclxxvi) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2261357992143979902</id>
    <published>2022-01-22T22:01:00.002+01:00</published>
    <updated>2022-01-22T22:01:35.946+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcvi) metacpan weekly report - Regex::Object</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 34&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Regex::Object" target="_blank"&gt;Regex::Object (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/01/22 21:01:12 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Object" target="_blank"&gt;HTML::Object&lt;/a&gt; - HTML Parser, Modifier and Query Interface&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebSocket" target="_blank"&gt;WebSocket&lt;/a&gt; - WebSocket Client &amp; Server&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::Diff" target="_blank"&gt;Algorithm::Diff&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+1=149)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CHI" target="_blank"&gt;CHI&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLucene" target="_blank"&gt;CLucene&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CryptX" target="_blank"&gt;CryptX&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DB_File" target="_blank"&gt;DB_File&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DB_File::Lock" target="_blank"&gt;DB_File::Lock&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Oracle" target="_blank"&gt;DBD::Oracle&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=279)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dpkg" target="_blank"&gt;Dpkg&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode" target="_blank"&gt;Encode&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ETL::Pipeline" target="_blank"&gt;ETL::Pipeline&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::XDG" target="_blank"&gt;File::XDG&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Hooks" target="_blank"&gt;Git::Hooks&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Kwalify" target="_blank"&gt;Kwalify&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::EN::Inflect" target="_blank"&gt;Lingua::EN::Inflect&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::EN::Numbers" target="_blank"&gt;Lingua::EN::Numbers&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Class" target="_blank"&gt;Path::Class&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=388)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Progress::Any" target="_blank"&gt;Progress::Any&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regex::Object" target="_blank"&gt;Regex::Object&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::MultiMethod" target="_blank"&gt;Sub::MultiMethod&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Harness" target="_blank"&gt;Test2::Harness&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Harness::Renderer::JUnit" target="_blank"&gt;Test2::Harness::Renderer::JUnit&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Trace" target="_blank"&gt;Tie::Trace&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TOML::Tiny" target="_blank"&gt;TOML::Tiny&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2261357992143979902/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/cdxcvi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2261357992143979902"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2261357992143979902"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/cdxcvi-metacpan-weekly-report.html" title="(cdxcvi) metacpan weekly report - Regex::Object"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2729831527236158563</id>
    <published>2022-01-22T21:59:00.000+01:00</published>
    <updated>2022-01-22T21:59:09.334+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-01-22 20:58:33 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70750715" target="_blank"&gt;Difference in Perl regex variable $+{name} and $-{name}&lt;/a&gt; - [&lt;b&gt;8&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70789934" target="_blank"&gt;what does this perl -ane mean in the find command of shell script?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70768887" target="_blank"&gt;Extracting data from Excel XML files using perl XML::Twig handlers when tags (nodes) contain prefix&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70798866" target="_blank"&gt;Perl Exec/System passing parameter&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70803181" target="_blank"&gt;How to control logging for Mojolicious web server&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2729831527236158563/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2729831527236158563"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2729831527236158563"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxviii-stackoverflow-perl-report.html" title="(dxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 2</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" type="text/html"/>
    <content type="html">&lt;p&gt;Continuing from the &lt;a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/"&gt;first part&lt;/a&gt;, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. &lt;/p&gt;
&lt;table border&gt;
&lt;tr&gt;
&lt;td&gt;Period&lt;/td&gt;
&lt;td&gt;CPAN releases&lt;/td&gt;
&lt;td&gt;CPAN authors&lt;/td&gt;
&lt;td&gt;Hackage releases&lt;/td&gt;
&lt;td&gt;Hackage authors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jan 2021&lt;/td&gt;
&lt;td&gt;1184&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;574&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Feb 2021&lt;/td&gt;
&lt;td&gt;1016&lt;/td&gt;
&lt;td&gt;223&lt;/td&gt;
&lt;td&gt;737&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mar 2021&lt;/td&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;783&lt;/td&gt;
&lt;td&gt;258&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2021&lt;/td&gt;
&lt;td&gt;979&lt;/td&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;540&lt;/td&gt;
&lt;td&gt;193&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jun 2021&lt;/td&gt;
&lt;td&gt;982&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;491&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jul 2021&lt;/td&gt;
&lt;td&gt;951&lt;/td&gt;
&lt;td&gt;187&lt;/td&gt;
&lt;td&gt;562&lt;/td&gt;
&lt;td&gt;195&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt; Draw the conclusion yourself. I end my curiosity here, but might compare again in the future.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Continuing from the first part, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. Period CPAN releases CPAN authors Hackage releases Hackage authors … <a href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 2</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1979</id>
    <published>2022-01-21T04:45:23Z</published>
    <updated>2022-01-21T04:45:23Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
  <title>Grant Proposal: Optree Optimsiations for Performance Gains</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_optree_optimisation_paul_evans"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/grant_proposal_optree_optimisation_paul_evans</id>
  <published>2022-01-20T19:20:01</published>
  <updated>2022-01-20T19:20:01</updated>
  <summary>
  <![CDATA[
     Synopsis Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates. Project Details Inside a 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates.</p>

<h2>Project Details</h2>

<p>Inside a running <code>perl</code> interpreter, source code is compiled into a more direct representation of its behaviour, called an optree. This is comprised of individual elements called ops. Each is executed in sequence, and performs a small specific part of work involved in executing the program as a whole.</p>

<p>Due to the small nature of the specific ops, there are several optimisations that are performed by the interpreter before it starts executing a program; mostly on a theme of combining the effects of several small ops into fewer, larger ones. This allows them to overall work more efficiently as they can either share intermediate results, or can avoid the various data-passing overheads between them.</p>

<p>This project aims to look at three new ideas on this theme of skipping certain elements of the optree by combining their effects together. A full description of each is given in the appendix section below. Each of the three ideas were first mentioned on the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262094.html">Perl5-Porters mailing list</a>.</p>

<h2>Timeline</h2>

<p>Each of the three optimisations would process through the following stages: </p>

<p><em>*1. Create an "ideal-case" benchmark test *</em></p>

<p>Begin by creating a benchmark containing some simple code that is entirely composed of one particular kind of operation, which is the target of the 
optimisation. Measure this benchmark case in order to obtain a baseline performance measurement.  </p>

<p><em>*2. Implement the optimisation *</em></p>

<p>Apply code to the Perl interpreter by defining new opcode flags, adjusting the peephole optimiser, or whatever other techniques may be required to achieve it. </p>

<p>Take a second measurement of performance with the optimisation applied. This should give an indication of the maximal possible gain that could be achieved.</p>

<p><strong>3. Analyse large programs to estimate extent of application</strong></p>

<p>While the figure gained in the above step gives a best-case value, it is unlikely that real-world programs would be able to gain as much benefit. It would be useful to analyse the generated optree of real-world programs to get an estimate of how likely these optimisations are to be hit, and a guess at what proportion of the potential benefit could actually be achieve in a real case.</p>

<p>Actually this step could be performed first, for each of the three optimisations, to get a suggestion on which of them are likely to be the most useful, and thus how to assign the remaining project time to each of them.</p>

<h2>Author Information</h2>

<p>I am Paul Evans, PEVANS on <a href="https://metacpan.org/author/PEVANS">CPAN</a> and current member of the Perl Steering Committee.</p>

<p>I have been a CPAN maintainer for over 12 years, and currently have over 200 distributions under my name. Recently I have been working on a variety of perl core features; adding the <code>isa</code> operator to Perl 5.32, <code>try/catch</code> syntax to 5.34, and the <code>builtin::</code> namespace of additional core functions expected to be part of the upcoming 5.36 release.</p>

<p>I have successfully completed two TPF projects before, to improve the implementation of the <code>Future::AsyncAwait</code> module; and to create bindings for the <code>libuv</code> event system. </p>

<h2>Amount Requested</h2>

<p>$3,980 USD</p>

<h2>Appendix</h2>

<p>The three optimisations described in more detail:</p>

<h3><code>OA_TARGLEX</code> on <code>OP_CONST</code></h3>

<p>Give the <code>OP_CONST</code> opcode the <code>OA_TARGLE</code> flag, meaning that code such as
<code>
    $var = 123;
</code>
gains a performance optimisation, discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> which is normally used to implement scalar lexical variable assignment from a constant, leaving just a single <code>OP_CONST</code> in its place.</p>

<h3><code>OA_TARGLEX</code> with <code>OPpLVAL_INTRO</code></h3>

<p>Create a new <code>OA_...</code> constant, or adjust the semantics of the existing <code>OA_TARGLEX</code>, such that it can also apply in <code>OPpLVAL_INTRO</code> situations. This would allow the (currently fairly-rare) <code>OA_TARGLEX</code> optimisation to
also apply on variables introduced in <code>my</code> expressions, such as
<code>
    my $zero = 0;
</code>
by once again discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> ops.</p>

<h3>Fold away <code>OP_PADSV</code> arguments to <code>UNOP</code>s</h3>

<p>Create a similar optimisation to the <code>-&amp;gt;targ</code> opcode field, applicable to <code>UNOP</code>s to contain the pad offset of a lexical variable argument for arguments being passed into <code>UNOP</code>s. Thus for example a statement like
<code>
    sleep $time;
</code>
could discard the <code>OP_PADSV</code> of its incoming argument, and similarly avoid using the stack for the lexical variable.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Call for Grants: January 2022 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_jan_2022"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/call_for_grants_jan_2022</id>
  <published>2022-01-20T19:14:01</published>
  <updated>2022-01-20T19:14:01</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 Jan 31, 2022, UTC. We will publish the received applications, get community feedback through February 7th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 Jan 31, 2022, UTC. We will publish the received applications, get community feedback through February 7th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than February 1st.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#547 - Learning a human language vs. a programming language</title>
    <link rel="alternate" href="https://perlweekly.com/archive/547.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Learning a programming language is not easy, but have you tried learning a human language? You don't have a compiler to tell you when you make a syntax error. You have a lot more words and rules and a lot more exceptions than in a programming language. Mostly however, the lack of quick feedback is what makes it hard. However, after a few months work you start to be able to speak to people in their native language.</p>
<p>As you might have read I've started to learn Ladino - the language spoken by the Jews who were expelled from the Iberian peninsula more than 500 years ago. It is a mix of medieval Spanish, Portuguese, Italian, French, Turkish, Serb, Arabic, and Hebrew. It is a fantastic exercise and it involves programming as well. Join me!</p>
<p>Something else: In Israel every Saturday evening, once the Shabbat ends, and throughout Sunday people say 'have a good week'. Referring to the week that starts on Sunday, the first day of our work-week. I don't recall ever hearing that or anything similar in Hungary. Not even on Sunday or Monday. I wonder, do you use any similar expression in whatever country and language environment you live in? Let me know and...</p>
<p>Have a good week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/547.html</id>
    <published>2022-01-17T10:00:00Z</published>
    <updated>2022-01-17T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Primes and Pentagonals</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/16#pwc147" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 left-truncatable prime numbers in base 10.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;
use constant N =&gt; 10_000; 

sub sieve_atkin{
    my($n) = @_;
    my @primes = (2, 3, 5);
    my $upper_bound = int($n * log($n) + $n * log(log($n)));
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound;
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub truncatable{
    my($prime, $primes) = @_;
    return false if $prime =~ m/0/;
    my @truncatable = map { my $p = substr($prime, -1 * $_, $_); grep {$p == $_} @{$primes}} 1 .. length($prime);
    return @truncatable == length($prime);
}

sub first_n_truncatable_primes{
    my($n) = @_;
    my @primes = sieve_atkin(N);
    my @truncatable;
    for my $prime (@primes){
        push @truncatable, $prime if truncatable($prime, \@primes);
        last if @truncatable == $n;
    }
    return @truncatable;
}

MAIN:{
    print join(", ", first_n_truncatable_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2, 3, 5, 7, 13, 17, 23, 37, 43, 47, 53, 67, 73, 83, 97, 113, 137, 167, 173, 197
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First off, I am re-using the Sieve of Atkin code I wrote for a previous challenge. These
challenges somewhat frequently have a prime number component so, if I get a chance, I'll
compose that code into it's own module. If it weren't for the copy/paste of the Sieve of 
Atkin code then this solution would be very short! This sort of string manipulation is 
where Perl excels and the determination of whether a number is left truncatable takes
only a few lines.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the first pair of Pentagon Numbers whose sum and difference are 
also a Pentagon Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant N =&gt; 10_000;

sub n_pentagon_numbers{
    my($n) = @_;
    my @pentagon_numbers;
    my $x = 1;
    my %h;
    do{
        my $pentagon = $x * (3 * $x - 1) / 2;
        push @pentagon_numbers, $pentagon;
        $h{"$pentagon"} = $x;
        $x++;
    }while(@pentagon_numbers &lt; $n);
    return (\@pentagon_numbers, \%h);
}

sub pairs_pentagon{
    my($n) = @_;
    my($pentagons, $lookup) = n_pentagon_numbers(N);
    my @pairs;
    for my $x (0 .. @{$pentagons} - 1){
        for my $y (0 .. @{$pentagons} - 1){
            unless($x == $y){
                my($sum, $difference) = ($pentagons-&gt;[$x] + $pentagons-&gt;[$y], abs($pentagons-&gt;[$x] - $pentagons-&gt;[$y]));
                 if($lookup-&gt;{$sum} &amp;&amp; $lookup-&gt;{$difference}){
                     my($s, $t) = ($x + 1, $y + 1);
                     push @pairs, ["P($s)", "P($t)"]
                 }
            }
            last if @pairs == $n;
        }
        last if @pairs == $n;
    }
    return @pairs;
}

sub first_pair_pentagon{
    return [pairs_pentagon(1)];
}

MAIN:{
    print join(", ", @{first_pair_pentagon()-&gt;[0]}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
P(1020), P(2167)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This second part of the challenge proceeds in mostly the same way as the first. We 
generate a large list of candidates and then search for those exhibiting the property in 
question. It is somewhat unexpected that the first pair of Pentagonal Numbers that have 
this property are so deeply located. Many times in these challenges the solution is 
emitted without quite as much searching! &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-147/"&gt;Challenge 147&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/glossary/page.php?sort=LeftTruncatablePrime"&gt;Left Truncatable Primes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PentagonalNumber.html"&gt;Pentagonal Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc147</id>
    <published>2022-01-16T13:29:00-05:00</published>
    <updated>2022-01-16T13:29:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>New year, new impetus for Perl Foundation Marketing Committee</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/marketing-support-2022"/>
  <id>tag:news.perlfoundation.org,2022-01-15:/post/marketing-support-2022</id>
  <published>2022-01-15T04:03:19</published>
  <updated>2022-01-15T04:03:19</updated>
  <summary>
  <![CDATA[
     The TPF Marketing Committee wants to raise USD$100,000 to fund Perl and Raku development and make 2022 the year of Perl and Raku. But we can only do this with community support. In 2022 the Perl Foundation Marketing Committee aims to: Achieve a fundraising target of $100,000 through improved fundraising efforts Improve and sustain the perception of Perl Address feature gaps from community feedback Demonstrate why people should use Perl 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The TPF Marketing Committee wants to raise USD$100,000 to fund Perl and Raku development and make 2022 the year of Perl and Raku. But we can only do this with community support.</p>

<p>In 2022 the Perl Foundation Marketing Committee aims to:
* Achieve a fundraising target of $100,000 through improved fundraising efforts
* Improve and sustain the perception of Perl
* Address feature gaps from community feedback
* Demonstrate why people should use Perl
* Increase adoption of the language</p>

<p>These goals are just words without your help.</p>

<p>We need everyone in the community to share our news and updates via your social media and other channels.</p>

<p>We ask you to use <a href="https://smile.amazon.com/gp/chpf/homepage/ref=smi_chpf_redirect/138-2474394-5588856?ie=UTF8&amp;ein=38-3536536&amp;ref_=smi_ext_ch_38-3536536_cl">Amazon Smile</a> when purchasing from Amazon, providing a percentage donation at no extra cost.</p>

<p>Can you ask your employer to make a donation, or maybe you could make a personal donation to <a href="https://www.perlfoundation.org/donate.html">The Perl Foundation</a>?</p>

<p>Please get involved and coordinate activities at the monthly committee meetings. Come along with your ideas and willing hands so we can take action together.</p>

<p>The meeting dates for 2022 are listed below - all at 1730UTC via Zoom - join <a href="https://join.slack.com/share/enQtMjk0NzkzNjM4NzI5OS05MmE5OGRjNmEzYTNhZmUwMzllNmE2ZDMwMDk1YWMwMzI0NWNmMGM2NWRlM2Q5MzJkMmY4NmEwOTVhNzU2ZTFk">the Marketing Slack channel</a> to keep up to date.</p>

<ul>
<li>10 February</li>
<li>10 March</li>
<li>7 April</li>
<li>12 May</li>
<li>9 June</li>
<li>7 July</li>
<li>11 August</li>
<li>8 September</li>
<li>13 October</li>
<li>10 November</li>
<li>8 December</li>
</ul>

<p>Thank you for your help and we look forward to seeing you!</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#546 - Perl Books</title>
    <link rel="alternate" href="https://perlweekly.com/archive/546.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Welcome to my first edition of 2022 and <strong>95th edition</strong> overall.</p>
<p>I remember there was a time when the <strong>O'Reilly</strong> group published many Perl books. Then came a few other publishing houses like <strong>Manning</strong> publications. I am sure you must have owned a handful of Perl books from these publishers. In recent times not many Perl books have been written, except one or two by <strong>brian d foy</strong>. A friend of mine donated all his Perl books to a local library as he is moving to Python. It is a sad state to be honest. Recently, I came across a <strong>Facebook</strong> post by a friend of mine about a Perl book called <strong>Extending and Embedding Perl</strong>. I knew about it but I had never had the chance to read it. So I decided to buy a used copy from <strong>Amazon</strong>. I must confess I was missing a great deal. If you haven't read it then you must check it out. By the way, I have kept all my Perl books safe. I like to read physical books and not online versions.</p>
<p>With a new year, there is a tradition of new year resolutions. As far as I am concerned, I stopped making any resolutions two years ago. But this year, I decided to make one and stick to it. And the resolution is to get the draft of my first Perl book out as soon as possible. It has been going on for months now. It is embarassing now to even talk about it. There are so many things going on at the same time, I hardly find time for the book. Please wish me luck.</p>
<p>A long time ago, <strong>Gabor</strong> started a campaign to make live videos about Perl. He even did few pair-programming sessions and they were very popular. But then there has been no noise on that front in recent times. I used to make <strong>YouTube</strong> videos for the Weekly Challenge during the middle of last year and then I also stopped because of lack of time. Last month, I started making videos again for the Weekly Challenge. It gives me immense pleasure when I see comments on my videos. Someone recently commented on one video and requested I should make videos of past challenges as well. I have to manage my time carefully otherwise my first book would be neglected again. Having said that, I am not giving up on making videos for the Weekly Challenge. If you are interested then please do check out my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>.</p>
<p>There is one piece of good news shared by <strong>Curtis</strong> - that the MMVP (minimally minimal viable product) RFC for Corinna has been sent to P5P. I am keeping my fingers crossed.</p>
<p>Last but not least, please look after yourself and your loved ones.</p></div>
    </content>
    <id>https://perlweekly.com/archive/546.html</id>
    <published>2022-01-10T10:00:00Z</published>
    <updated>2022-01-10T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Install Perl on Linux and Mac OSX</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-01-10T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-install-perl-on-linux"/>  <id>https://perlmaven.com/dancer2-install-perl-on-linux</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Sieve of Atkin / Curious Fraction Tree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/09#pwc146" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the 10001st prime number.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean; 
use Getopt::Long;
use LWP::UserAgent;

use constant N =&gt; 10_001;   
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)];
        }
    }
    return @primes;
}

sub sieve_atkin{
    my($n) = @_;
    my @primes = (2, 3, 5);
    my $upper_bound = int($n * log($n) + $n * log(log($n)));
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub get_nth_prime{
    my($n, $generate) = @_; 
    my @primes;
    unless($generate){
        @primes = get_primes;
    }
    else{
        @primes = sieve_atkin($n);
    }
    return $primes[$n - 1]; 
}


MAIN:{
    my $n = N;
    my $generate = false;
    GetOptions("n=i" =&gt; \$n, generate =&gt; \$generate);
    print get_nth_prime($n, $generate) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
104743
$ perl perl/ch-1.pl --generate
104743
$ perl perl/ch-1.pl --generate
104743
$ perl perl/ch-1.pl --generate --n 101
547
$ perl perl/ch-1.pl --generate --n 11
31
$ perl perl/ch-1.pl --n 10001
104743
$ perl perl/ch-1.pl --n 11
31
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I've mentioned it before, but for anything that asks for or needs prime numbers I always
ust grab them from one of several convenient online sources, rather than generate them 
myself.&lt;/p&gt;

&lt;p&gt;This time around I figured it'd be sporting to generate them myself, but maybe in an
interesting way. Here I implement a sieve method for determining prime numbers. This
&lt;em&gt;Sieve of Atkin&lt;/em&gt;_ has a claim to fame of being the most performant among prime number
generating sieve techniques. The code is a bit convoluted looking, I will admit, but is 
a faithful Perl representation of the algorithm (follow the reference link for 
pseudocode). Also, rather than try and explain the algorithm myself anyone interested
can find full in depth treatments elsewhere. A background in number theory helps for 
some of the details.&lt;/p&gt;

&lt;p&gt;Since I have some existing code for getting the pre-computed primes I figured I would
use that as a check and extra feature. Command line options allow for the default
behavior (fetch pre-computed primes for an N of 10,001) to be overridden.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Given a fraction return the parent and grandparent of the fraction from the Curious 
Fraction Tree.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use constant ROOT =&gt; "1/1";
use constant SEPARATOR =&gt; "/";

sub initialize{
    my($member) = @_;
    my $graph = new Graph();
    $graph-&gt;add_vertex(ROOT);
    my @next = (ROOT);
    my @changes = ([0, 1], [1, 0]);
    my $level = 0;
    {
        my @temp_next;
        my @temp_changes;
        do{
            $level++;
            my $next = shift @next;
            my($top, $bottom) = split(/\//, $next);
            my $change_left = shift @changes;
            my $change_right = shift @changes;
            my $v_left = ($top + $change_left-&gt;[0]) . SEPARATOR . ($bottom + $change_left-&gt;[1]);
            my $v_right = ($top + $change_right-&gt;[0]) . SEPARATOR . ($bottom + $change_right-&gt;[1]);    
            $graph-&gt;add_edge($next, $v_left);
            $graph-&gt;add_edge($next, $v_right);
            push @temp_next, $v_left, $v_right;
            push @temp_changes, $change_left;
            push @temp_changes, [$level + 1, 0], [0, $level + 1];
            push @temp_changes, $change_right;
        }while(@next &amp;&amp; !$graph-&gt;has_vertex($member));
        @next = @temp_next;
        @changes = @temp_changes; 
        redo if !$graph-&gt;has_vertex($member);
    }
    return $graph;
}

sub curious_fraction_tree{
    my($member) = @_;
    my $graph = initialize($member);
    my($parent) = $graph-&gt;predecessors($member);
    my($grandparent) = $graph-&gt;predecessors($parent);
    return ($parent, $grandparent);
}

MAIN:{
    my($member, $parent, $grandparent);
    $member = "3/5";
    ($parent, $grandparent) = curious_fraction_tree($member);
    print "member = '$member'\n";
    print "parent = '$parent' and grandparent = '$grandparent'\n";
    print "\n";
    $member = "4/3";
    ($parent, $grandparent) = curious_fraction_tree($member);
    print "member = '$member'\n";
    print "parent = '$parent' and grandparent = '$grandparent'\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
member = '3/5'
parent = '3/2' and grandparent = '1/2'

member = '4/3'
parent = '1/3' and grandparent = '1/2'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My thought process on this problem started somewhat backwards. After reading the problem
statement I thought of the Graph module and remembered that it defines a function
&lt;code&gt;predecessors()&lt;/code&gt; which would be very useful for this. After convincing myself to 
&lt;code&gt;use Graph;&lt;/code&gt; I then probably spent the majority of the time for this just getting my 
head around how to define new vertices at each level of the tree. Like all trees there is
some recursiveness to the structure, but an iterative implementation still looks clean as
well.&lt;/p&gt;

&lt;p&gt;Once the graph is constructed the solution as required comes from calling &lt;code&gt;predecessors()&lt;/code&gt;
to get the parent and grandparent vertices.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-146/"&gt;Challenge 146&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/prime-number-algorithms"&gt;Sieve of Atkin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/"&gt;Prime Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Graph"&gt;Graph&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc146</id>
    <published>2022-01-09T17:32:00-05:00</published>
    <updated>2022-01-09T17:32:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>#545 - Happy, Healthy, and Prosperous New Year!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/545.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone!</p>
<p>Let me start by welcoming you to the new year! Let me also use the opportunity to thank <a href="http://manwar.org/">Mohammad S. Anwar</a> for his dedication in both editing every other edition of the Perl Weekly Newsletter and his very own <a href="https://theweeklychallenge.org/">Weekly Challenge</a>. Let me also thank <a href="https://davecross.co.uk/">Dave Cross</a> for his immense help making our grammar a bit more bearable and the various Open Source projects he creates. (e.g. the <a href="https://cpandashboard.com/">CPAN Dashboard</a> or <a href="https://perl.theplanetarium.org/">The Perl Planetarium</a>). If you also like their work please thank them in an email, a blog post, or by supporting them via <a href="https://www.patreon.com/manwar/">Patreon for Mohammad</a> or via <a href="https://github.com/davorg/">GitHub for Dave</a>. They won't become wealthy from this, but receiving a paycheck every month from tens of supporters give a huge boost to the ego and makes one create even more for the public.</p>
<p>As for me, you might recall I've been learning Spanish for more than 3 years and started to learn Ladino (aka. Judeo-Spanish) a few weeks ago. Learning a foreign language is a totally different experience than learning a programming language. If for nothing else, because you don't get immediate feedback to your mistakes from a compiler. Well. Except if you use an application that helps you. My open source mindset quickly kicked in. I found an Open Source platform called <a href="https://librelingo.app/">LibreLingo</a> that will help you learn languages. It is still in very early version, but started to use that platform to be able to practice Ladino and also started to contribute to the project. I'll share more about it when enough progress was made to show something in public. Until then you are invited to check it out.</p>
<p>Enjoy the year ahead!</p></div>
    </content>
    <id>https://perlweekly.com/archive/545.html</id>
    <published>2022-01-03T10:00:00Z</published>
    <updated>2022-01-03T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
</feed>
