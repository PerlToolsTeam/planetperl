<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-10-30T00:57:12Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>My Favorite Warnings: redefine</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10483</id>
    <published>2021-10-30T01:07:52Z</published>
    <updated>2021-10-30T01:11:02Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Sooner or later any programmer, writing in any language, will run across something like this Perl warning: <code>Subroutine foo redefined</code>. This is telling you that somehow, somewhere, you tried to create two subroutines with the same name.</p>

<p>Tracking this down can be tricky, and remediation equally so. The possibilities include:</p>

<ul>
    <li>If one of your own subroutines is involved, you can rename it.</li>
    <li>If an imported subroutine that you do not need is involved, you can just not import it. This, of course, involves figuring out which imports you <strong>do</strong> need. The use of default import lists can make tracking this one down tricky.</li>
    <li>You can use <a href="https://metacpan.org/pod/Importer">Importer</a> to import a subroutine under a different name.</li>
    <li>You can ignore the import mechanism and populate the symbol table yourself with something like <code>BEGIN { require Some::Module; *foo = \&amp;Some::Module::bar; }</code>, after which <code>bar()</code> calls <code>Some::Module::foo()</code>.</li>
</ul>

<p>But maybe you really want to replace a subroutine, in which case you do not want the warning. For example you might want to tweak the action of a subroutine with a hot patch. A trivial example looks something like this:</p>

<pre>
{
    no warnings qw{ redefine };
    my $old_foo = \&amp;foo;
    *foo = sub {
        warn "Debug - Called foo( qw{ @_ } )";
	goto $old_foo;
    };
}
</pre>

<p>This disables the <a href="https://perldoc.perl.org/perldiag#Subroutine--s-redefined">redefine</a> warning. saves the code reference to <code>foo()</code> and replaces it with code that logs the arguments (sort of) and then transfers control to the original <code>foo()</code>. The block is to restrict the scope of the <code>no warnings</code> pragma, but it could equally be a <code>BEGIN</code> block if your use case requires it.</p>

<p>Previous entries in this series:</p>
<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li>
</ol>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 136: Two Friendly and Fibonacci Sequence</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/10/perl-weekly-challenge-136-two-friendly-and-fibonacci-sequence.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10482</id>
    <published>2021-10-28T02:30:29Z</published>
    <updated>2021-10-28T02:32:13Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 136 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-136/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on October 31, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Two Friendly</h2>

<p><em>You are given 2 positive numbers, <code>$m</code> and <code>$n</code>.</em></p>

<p><em>Write a script to find out if the given two numbers are Two Friendly.</em></p>

<blockquote>
  <p><em>Two positive numbers, m and n are two friendly when gcd(m, n) = 2 ^ p where p > 0. The greatest common divisor (gcd) of a set of numbers is the largest positive number that divides all the numbers in the set without remainder.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $m = 8, $n = 24
Output: 1

Reason: gcd(8,24) = 8 =&gt; 2 ^ 3
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $m = 26, $n = 39
Output: 0

Reason: gcd(26,39) = 13
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $m = 4, $n = 10
Output: 1

Reason: gcd(4,10) = 2 =&gt; 2 ^ 1
</code></pre>

<p>In other words, the greatest common divisor of two friendly numbers needs to be a power of two. Or, there must be a power of two for which, when both integers are divided by this power of two, the results are co-primes.</p>

<h3>Two Friendly Numbers in Raku</h3>

<p>Raku has a built-in <a href="https://docs.raku.org/routine/gcd">gcd</a> infix operator. So we just need to compute the GCD if the two input integers. If the GCD is 1 (numbers are co-primes) or less (one of the input integers was 0), then we return 0, as the integers are not two friendly numbers. Otherwise, we divide the GCD by two as long as the result is even. When we can no longer divide by two, the two input integers were two friendly numbers is the result of the final division is 1 (as the GCD was a power of two).</p>

<pre><code>use v6;

sub is-friendly (Int $i, Int $j) {
    my $gcd = $i gcd $j;
    return 0 if $gcd &lt;= 1;
    $gcd /= 2 while $gcd %% 2;
    return $gcd == 1 ?? 1 !! 0;
}
for 8, 24, 26, 39, 4, 10, 7, 5, 18, 0 {
    say "$^a, $^b =&gt; ", is-friendly $^a, $^b;
}
</code></pre>

<p>Note that Raku can take two numbers at a time from the input list in the <code>for</code> loop at the bottom, because the loop uses two parameters, which is quite convenient. In this case, we used <a href="https://docs.raku.org/language/variables#The_^_twigil">placeholder variables aka self-declared positional parameters</a> (<code>$^a</code> and <code>$^b</code>), but it would also work just as well with formal declared loop parameters, such as:</p>

<pre><code>for 8, 24, 26, 39, 4, 10, 7, 5, 18, 0 -&gt; $a, $b {
    say "$a, $b =&gt; ", is-friendly $a, $b;
}
</code></pre>

<p>This program yields the following results for the built-in input test integers:</p>

<pre><code>$ raku ./friendly.raku
8, 24 =&gt; 1
26, 39 =&gt; 0
4, 10 =&gt; 1
7, 5 =&gt; 0
18, 0 =&gt; 0
</code></pre>

<h3>Two Friendly Numbers in Perl</h3>

<p>Just like in Raku, we divide the GCD by two as long as the result is even. When we can no longer divide by two, the two input integers were two friendly numbers is the result of the final division is 1. The main difference with Raku, though, is that Perl doesn&#8217;t have a built-in GCD function or operator. So we implement the <code>gcd</code> subroutine for that purpose, implementing a well-known method derived from the famous <a href="https://en.wikipedia.org/wiki/Euclidean_algorithm">Euclidean algorithm</a>.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub gcd {
    my ($i, $j) = @_;
    return 0 if $i &lt; 1 or $j &lt; 1;
    while ($j) {
        ($i, $j) = ($j, $i % $j);
    }
    return $i;
}
sub is_friendly {
    my $gcd = gcd $_[0], $_[1];
    return 0 if $gcd &lt;= 1;
    $gcd /= 2 while $gcd % 2 == 0;
    return $gcd == 1 ? 1 : 0;
}
for my $pair ([8, 24], [26, 39], [4, 10], [7, 5], [18, 0]) {
    say "@$pair =&gt; ", is_friendly @$pair;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./friendly.pl
8 24 =&gt; 1
26 39 =&gt; 0
4 10 =&gt; 1
7 5 =&gt; 0
18 0 =&gt; 0
</code></pre>

<h2>Task 2: Fibonacci Sequence</h2>

<p><em>You are given a positive number <code>$n</code>.</em></p>

<p><em>Write a script to find how many different sequences you can create using Fibonacci numbers where the sum of unique numbers in each sequence are the same as the given number.</em></p>

<blockquote>
  <p><em>Fibonacci Numbers: 1,2,3,5,8,13,21,34,55,89, …</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input:  $n = 16
Output: 4

Reason: There are 4 possible sequences that can be created using Fibonacci numbers
i.e. (3 + 13), (1 + 2 + 13), (3 + 5 + 8) and (1 + 2 + 5 + 8).
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:  $n = 9
Output: 2

Reason: There are 2 possible sequences that can be created using Fibonacci numbers
i.e. (1 + 3 + 5) and (1 + 8).
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input:  $n = 15
Output: 2

Reason: There are 2 possible sequences that can be created using Fibonacci numbers
i.e. (2 + 5 + 8) and (2 + 13).
</code></pre>

<h3>Fibonacci Sequence in Raku</h3>

<p>I do not see any way to solve this problem other than listing all possible sequences of Fibonacci numbers less than or equal to the target number and counting those sequence whose sum is equal to the target number. We first initialize a list (a global variable) of the first 16 Fibonacci numbers using the <a href="https://docs.raku.org/language/operators#index-entry-sequence_operator">sequence <code>...</code> operator</a>. The reason for doing this is that we don&#8217;t want to recompute the Fibonacci numbers for every input test integer. Of course, we would have to change this for input integers larger than 1597, but that&#8217;s good enough for our testing purpose.</p>

<p>Then, the <code>fib-seq</code> subroutine uses the built-in <a href="https://docs.raku.org/routine/combinations">combinations</a> method to generate all sequences of Fibonacci numbers and uses the builin <code>grep</code> and <code>sum</code> functions to keep the sequences whose sum is equal to the target input integer. And it returns the number of sequences matching this criterion.</p>

<p>Note that, although the task specification did not request that, I&#8217;ve decided to print out the matching sequences as this makes it much easier to check the result.</p>

<pre><code>use v6;

my @fib = 1, 2, * + * ... * &gt; 1000; # 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597

sub fib-seq (UInt $n) {
    my $count = 0;
    ++$count and .say for grep { $_.sum == $n }, @fib.grep({$_ &lt;= $n }).combinations;
    return $count;
}
for 16, 9, 15, 89, 100 {
    say "Number of sequences for $_: ", fib-seq($_), "\n";
}
</code></pre>

<p>This programs prints out the following output:</p>

<pre><code>$ raku ./main.raku
(3 13)
(1 2 13)
(3 5 8)
(1 2 5 8)
Number of sequences for 16: 4

(1 8)
(1 3 5)
Number of sequences for 9: 2

(2 13)
(2 5 8)
Number of sequences for 15: 2

(89)
(34 55)
(13 21 55)
(5 8 21 55)
(2 3 8 21 55)
Number of sequences for 89: 5

(3 8 89)
(1 2 8 89)
(3 8 34 55)
(1 2 3 5 89)
(1 2 8 34 55)
(3 8 13 21 55)
(1 2 3 5 34 55)
(1 2 8 13 21 55)
(1 2 3 5 13 21 55)
Number of sequences for 100: 9
</code></pre>

<h3>Fibonacci Sequence in Perl</h3>

<p>The Perl implementation is very similar to the Raku implementation, except that we need to code our own <code>sum</code> and <code>combine</code> subroutines to replace the equivalent Raku built-in methods.</p>

<p>Note that, as in Raku and although the task specification did not request that, I&#8217;ve decided to print out the matching sequences as this makes it much easier to check the result. Just comment out the penultimate code line of the <code>fib_seq</code> subroutine to avoid printing the sequences.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;

my @comb;
my @fib = qw /1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597/;

sub sum {
    my $sum = 0;
    $sum += $_ for @_;
    return $sum;
}

sub combine {
    my $target = shift;
    my $count = shift;
    my @out = @{$_[0]};
    my @in  = @{$_[1]};
    return if sum @out &gt; $target;
    push @comb, [@out] and return if sum(@out) == $target;
    return if $count == 0;
    for my $i (0..$#in) {
        combine ($target, $count - 1, [@out, $in[$i]], [@in[$i+1..$#in]]);
    }
}


sub fib_seq {
    my $n = shift;
    my @short_fib = grep { $_ &lt;= $n } @fib;
    my $count =  scalar @short_fib;
    @comb = ();
    combine $n, $count, [], [@short_fib];
    say "@$_" for @comb;
    return scalar @comb;
}

say "Number of sequences for $_: ", fib_seq $_ for 16, 9, 15, 89, 100;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./fib-seq.pl
1 2 5 8
1 2 13
3 5 8
3 13
Number of sequences for 16: 4
1 3 5
1 8
Number of sequences for 9: 2
2 5 8
2 13
Number of sequences for 15: 2
2 3 8 21 55
5 8 21 55
13 21 55
34 55
89
Number of sequences for 89: 5
1 2 3 5 13 21 55
1 2 3 5 34 55
1 2 3 5 89
1 2 8 13 21 55
1 2 8 34 55
1 2 8 89
3 8 13 21 55
3 8 34 55
3 8 89
Number of sequences for 100: 9
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on November 7, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Reviving Net::Pcap</title>
    <link rel="alternate" href="http://blogs.perl.org/users/max_maischein/2021/10/reviving-netpcap.html"/>
    <id>tag:blogs.perl.org,2021:/users/max_maischein//227.10474</id>
    <published>2021-10-26T23:26:55Z</published>
    <updated>2021-10-26T23:28:27Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <category term="cpan" label="cpan" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="pcap" label="pcap" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>I've blogged a bit about my steps to get Net::Pcap to compile again - I won't paste the complete text here unless there is demand, but I'm posting the link to the article here :)</p>

<p><a href="https://corion.net/blog/2021/10/26/reviving-net-pcap/">https://corion.net/blog/2021/10/26/reviving-net-pcap/</a></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Better Perl: Four list processing best practices with map, grep, and more</title>
    <link rel="alternate" href="https://dev.to/mjgardner/better-perl-four-list-processing-best-practices-with-map-grep-and-more-ino" type="text/html"/>
    <content type="html">&lt;p&gt;Six months ago I gave &lt;a href="https://phoenixtrap.com/2021/03/16/perl_map_grep/"&gt;an overview of Perl’s list processing fundamentals&lt;/a&gt;, briefly describing what lists are and then introducing the built-in &lt;a href="https://perldoc.perl.org/functions/map"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/functions/grep"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/a&gt; functions for transforming and filtering them. Later on, I compiled a list (how appropriate) of &lt;a href="https://phoenixtrap.com/2021/05/18/a-list-of-perl-list-processing-modules/"&gt;list processing modules available via CPAN&lt;/a&gt;, noting there’s some confusing duplication of effort. But you’re a busy developer, and you just want to know the Right Thing To Do™️ when faced with a list processing challenge.&lt;/p&gt;

&lt;p&gt;First, some credit is due: these are all restatements of several &lt;a href="https://metacpan.org/dist/Perl-Critic/view/lib/Perl/Critic/PolicySummary.pod"&gt;Perl::Critic policies&lt;/a&gt; which in turn codify standards described in &lt;a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/"&gt;Damian Conway’s &lt;em&gt;Perl Best Practices&lt;/em&gt;&lt;/a&gt; (2005). I’ve &lt;a href="https://phoenixtrap.com/tag/pbp/"&gt;repeatedly recommended&lt;/a&gt; the latter as a starting point for higher-quality Perl development. Over the years these practices continue to be re-evaluated (including &lt;a href="https://www.oreilly.com/videos/modern-perl-best/9781491910719/"&gt;by the author himself&lt;/a&gt;) and various authors release new &lt;a href="https://metacpan.org/search?q=module%3APerl%3A%3ACritic%3A%3APolicy"&gt;policy modules&lt;/a&gt;, but &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic"&gt;&lt;code&gt;perlcritic&lt;/code&gt;&lt;/a&gt; remains a great tool for ensuring you (and your team or other contributors) maintain a consistent high standard in your code.&lt;/p&gt;

&lt;p&gt;With that said, on to the recommendations!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-use-raw-grep-endraw-to-check-if-any-list-elements-match"&gt;
  &lt;/a&gt;
  Don’t use &lt;code&gt;grep&lt;/code&gt; to check if &lt;em&gt;any&lt;/em&gt; list elements match
&lt;/h2&gt;

&lt;p&gt;It might sound weird to lead off by recommending &lt;em&gt;not&lt;/em&gt; to use &lt;code&gt;grep&lt;/code&gt;, but sometimes it’s not the right tool for the job. If you’ve got a list and want to determine if a condition matches any item in it, you might try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# don't do this!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, this works because (in scalar &lt;a href="https://perldoc.perl.org/perldata#Context"&gt;context&lt;/a&gt;) &lt;code&gt;grep&lt;/code&gt; returns the number of matches found, but it’s wasteful, checking every element of &lt;code&gt;@my_list&lt;/code&gt; (which could be lengthy) before finally providing a result. Use the standard &lt;a href="https://perldoc.perl.org/List::Util"&gt;List::Util&lt;/a&gt; module’s &lt;a href="https://perldoc.perl.org/List::Util#any"&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt; function, which immediately returns (“short-circuits”) on the first match:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="mf"&gt;1.33&lt;/span&gt; &lt;span class="sx"&gt;qw(any)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perl has included the requisite version of this module &lt;a href="https://perldoc.perl.org/perl5200delta#Updated-Modules-and-Pragmata"&gt;since version 5.20&lt;/a&gt; in 2014; for earlier releases, you’ll need to &lt;a href="https://metacpan.org/dist/Scalar-List-Utils"&gt;update from CPAN&lt;/a&gt;. List::Util has many other great &lt;a href="https://perldoc.perl.org/List::Util#LIST-REDUCTION-FUNCTIONS"&gt;list-reduction&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/List::Util#KEY/VALUE-PAIR-LIST-FUNCTIONS"&gt;key/value pair&lt;/a&gt;, and &lt;a href="https://perldoc.perl.org/List::Util#OTHER-FUNCTIONS"&gt;other related functions&lt;/a&gt; you can import into your code, so check it out before you attempt to re-invent any wheels.&lt;/p&gt;

&lt;p&gt;As a side note for web developers, the &lt;a href="https://www.perldancer.org/"&gt;Perl Dancer framework&lt;/a&gt; also includes an &lt;a href="https://metacpan.org/dist/Dancer2/view/lib/Dancer2/Manual/Keywords.pod#any"&gt;&lt;code&gt;any&lt;/code&gt; keyword&lt;/a&gt; for declaring multiple HTTP routes, so if you’re mixing List::Util in there don’t import it. Instead, call it explicitly like this or you’ll get an error about a redefined function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;Util&lt;/span&gt; &lt;span class="mf"&gt;1.33&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;List::Util::&lt;/span&gt;&lt;span class="nv"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This recommendation is codified in the &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitBooleanGrep"&gt;BuiltinFunctions::ProhibitBooleanGrep&lt;/a&gt; Perl::Critic policy, comes directly from &lt;em&gt;Perl Best Practices&lt;/em&gt;, and is &lt;a href="https://wiki.sei.cmu.edu/confluence/display/perl/EXP06-PL.+Do+not+use+an+array+in+an+implicit+scalar+context"&gt;recommended&lt;/a&gt; by the Software Engineering Institute Computer Emergency Response Team (SEI CERT)’s &lt;a href="https://wiki.sei.cmu.edu/confluence/display/perl/SEI+CERT+Perl+Coding+Standard"&gt;Perl Coding Standard&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-change-raw-endraw-in-raw-map-endraw-or-raw-grep-endraw-"&gt;
  &lt;/a&gt;
  Don’t change &lt;code&gt;$_&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I &lt;a href="https://phoenixtrap.com/2021/03/16/perl_map_grep/#side_effects"&gt;mentioned this back in March&lt;/a&gt;, but it bears repeating: &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; are intended as &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure functions&lt;/a&gt;, not &lt;a href="https://en.wikipedia.org/wiki/Mutator_method"&gt;mutators&lt;/a&gt; with side effects. This means that the original list should remain unchanged. Yes, each element aliases in turn to the &lt;a href="https://perldoc.perl.org/variables/%24_"&gt;&lt;code&gt;$_&lt;/code&gt; special variable&lt;/a&gt;, but that’s for speed and can have surprising results if changed even if it’s technically allowed. If you need to modify an array in-place use something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@my_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# make your changes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want something that &lt;em&gt;looks&lt;/em&gt; like &lt;code&gt;map&lt;/code&gt; but won’t change the original list (and don’t mind a few CPAN dependencies), consider &lt;a href="https://metacpan.org/pod/List::SomeUtils"&gt;List::SomeUtils&lt;/a&gt;’ &lt;a href="https://metacpan.org/pod/List::MoreUtils#apply-BLOCK-LIST"&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;List::&lt;/span&gt;&lt;span class="nv"&gt;SomeUtils&lt;/span&gt; &lt;span class="sx"&gt;qw(apply)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@doubled_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@old_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, side effects also include things like manipulating other variables or doing input and output. Don’t use &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt; in a void context (i.e., without a resulting array or list); do something with the results or use a &lt;a href="https://perldoc.perl.org/perlsyn#Foreach-Loops"&gt;&lt;code&gt;for&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt;&lt;/a&gt; loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# don't do this&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# do this instead&lt;/span&gt;

&lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@new_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# don't do this&lt;/span&gt;
&lt;span class="nv"&gt;@new_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@my_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# do this instead&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This recommendation is codified by the &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidGrep"&gt;BuiltinFunctions::ProhibitVoidGrep&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitVoidMap"&gt;BuiltinFunctions::ProhibitVoidMap&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitMutatingListFunctions"&gt;ControlStructures::ProhibitMutatingListFunctions&lt;/a&gt; Perl::Critic policies. The latter comes from &lt;em&gt;Perl Best Practices&lt;/em&gt; and is an SEI CERT Perl Coding Standard &lt;a href="https://wiki.sei.cmu.edu/confluence/display/perl/EXP34-PL.+Do+not+modify+%24_+in+list+or+sorting+functions"&gt;rule&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-blocks-with-raw-map-endraw-and-raw-grep-endraw-not-expressions"&gt;
  &lt;/a&gt;
  Use blocks with &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt;, not expressions
&lt;/h2&gt;

&lt;p&gt;You can call &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt; like this (&lt;a href="https://perldoc.perl.org/perlfunc#DESCRIPTION"&gt;parentheses are optional&lt;/a&gt; around built-in functions):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@new_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;@old_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# don't do this&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@new_array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/^#/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@old_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# don't do this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@new_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@old_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@new_array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/^#/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@old_array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do it the second way. It’s easier to read, especially if you’re passing in a literal list or multiple arrays, and the expression forms can conceal bugs. This recommendation is codified by the &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireBlockGrep"&gt;BuiltinFunctions::RequireBlockGrep&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireBlockMap"&gt;BuiltinFunctions::RequireBlockMap&lt;/a&gt; Perl::Critic policies and comes from &lt;em&gt;Perl Best Practices&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactor-multistatement-raw-map-endraw-s-raw-grep-endraw-s-and-other-list-functions"&gt;
  &lt;/a&gt;
  Refactor multi-statement &lt;code&gt;map&lt;/code&gt;s, &lt;code&gt;grep&lt;/code&gt;s, and other list functions
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and friends should follow the &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well"&gt;Unix philosophy of “Do One Thing and Do It Well.”&lt;/a&gt; Your readability and maintainability drop with every statement you place inside one of their blocks. Consider junior developers and future maintainers (this includes you!) and refactor anything with more than one statement into a separate subroutine or at least a &lt;code&gt;for&lt;/code&gt; loop. This goes for list processing functions (like the aforementioned &lt;code&gt;any&lt;/code&gt;) imported from other modules, too.&lt;/p&gt;

&lt;p&gt;This recommendation is codified by the &lt;em&gt;Perl Best Practices&lt;/em&gt;-inspired &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitComplexMappings"&gt;BuiltinFunctions::ProhibitComplexMappings&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireSimpleSortBlock"&gt;BuiltinFunctions::RequireSimpleSortBlock&lt;/a&gt; Perl::Critic policies, although those only cover &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; functions, respectively.&lt;/p&gt;




&lt;p&gt;Do you have any other suggestions for list processing best practices? Feel free to leave them in the comments or better yet, consider &lt;a href="https://metacpan.org/pod/Perl::Critic#EXTENDING-THE-CRITIC"&gt;creating new Perl::Critic policies&lt;/a&gt; for them or &lt;a href="//mailto:team@perlcritic.com"&gt;contacting the Perl::Critic team&lt;/a&gt; to develop them for your organization.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/better-perl-four-list-processing-best-practices-with-map-grep-and-more-ino</id>
    <published>2021-10-26T14:00:00Z</published>
    <updated>2021-10-26T14:00:00Z</updated>
    <category term="perl"/>
    <category term="grep"/>
    <category term="lists"/>
    <category term="map"/>
  </entry>
  <entry>
  <title>Final Report: Raku Dispatch and Compiler Improvements Grant Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/final_report_raku_dispatch_compiler_improvements"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/final_report_raku_dispatch_compiler_improvements</id>
  <published>2021-10-25T21:12:38</published>
  <updated>2021-10-25T21:12:38</updated>
  <summary>
  <![CDATA[
     During September, I completed the remaining hours on my current grant. The key aim of the grant to bring my work on a new generalized dispatch mechanism to the point where it could be merged and delivered to Raku users has been achieved, the merge taking place on 29th September. I wrote a blog post that provides some data on the improvements, as well as identifying future work that can 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>(from Jonathan Worthington)</p>

<p>During September, I completed the remaining hours on <a href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_compiler_improvements">my current grant</a>.
The key aim of the grant - to bring my work on a new generalized dispatch mechanism to the point where it
could be merged and delivered to Raku users - has been achieved, the merge taking place on 29th September.
I wrote a <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">blog post</a>
that provides some data on the improvements, as well as identifying future work that can build upon what
has been achieved thus far.</p>

<p>During September, working under the grant, I:</p>

<ul>
<li>Implemented specialization and inlining of dispatches that store resume initialization state, to allow
the dispatches to be resumed (for example, if <code>callsame</code> is used). This was a critical part of getting
back the level of inlining for method calls and multi dispatches that existed prior to this work, which
is a critical factor in Raku performance.</li>
<li>Implemented caller-side removal of <code>Scalar</code> containers, which in turn avoids various duplicate guards,
leading to much tighter code being produced after specialization and JIT compilation in many common
situations.</li>
<li>Fixed <code>Junction</code> multi-dispatch failover for the case where the <code>Junction</code> was in a named argument,
along the way tweaking the semantics to be more consistent with those of positional arguments (there
were some unintended discrepancies in the previous implementation).</li>
<li>Changed dispatch program compilation to not emit type guards when the types were already proven during
optimization, rather than adding them and relying on them to be optimized out later.</li>
<li>Reinstated all known missing optimizations from prior to the new dispatch work, and added JIT support
for various new operations introduced during the work.</li>
<li>Did various modifications to improve startup time, which has regressed. The new dispatch model has
many advantages, however does carry a higher warmup cost.</li>
<li>Fixed the profiler to work again in programs that use continuations, after changes to the continuation
representation as part of callstack changes.</li>
<li>Did numerous smaller fixes for bugs identified by <code>blin</code> (which runs the tests of all modules in the
ecosystem). In some cases where the modules relied on internals or unspecified behavior, I sent a PR
to the module instead.</li>
</ul>

<p>The time worked during September was 55 hours and 18 minutes, which was the remaining grant time
available.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal: Optimizations building upon the new Raku dispatch mechanism</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_dispatch_optimizations"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/grant_proposal_raku_dispatch_optimizations</id>
  <published>2021-10-25T21:02:20</published>
  <updated>2021-10-25T21:02:20</updated>
  <summary>
  <![CDATA[
     Project title Optimizations building upon the new Raku dispatch mechanism Author Jonathan Worthington Synopsis Recently a new dispatch mechanism was merged into MoarVM, along with changes to Rakudo to make use of it. This led to a number of performance improvements in the immediate, and incidentally fixed various long-standing bugs. This is, however, just the start of what can be achieved with the new dispatch architecture and the changes made 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h2>Project title</h2>

<p>Optimizations building upon the new Raku dispatch mechanism</p>

<h2>Author</h2>

<p>Jonathan Worthington</p>

<h2>Synopsis</h2>

<p>Recently a new dispatch mechanism was merged into MoarVM, along with changes to
Rakudo to make use of it. This led to a number of <a href="https://6guts.wordpress.com/2021/09/29/the-new-moarvm-dispatch-mechanism-is-here/">performance improvements</a>
in the immediate, and incidentally fixed various long-standing bugs. This
is, however, just the start of what can be achieved with the new dispatch
architecture and the changes made to the runtime as part of implementing it.
This grant application requests funding to help deliver further improvements
unlocked by that work.</p>

<h2>How will your work specifically benefit the development of Raku?</h2>

<p>Raku performance has improved significantly since the initial release of the
language. This is thanks to a multi-faceted effort by many Raku contributors,
including putting more powerful optimizations in the runtime, the careful
optimization of the standard library, and developing better tooling for
analyzing performance. However, there is most certainly more to be done in
order that performance becomes a limiting factor for an ever smaller number
of developers considering using Raku.</p>

<p>This work will deliver further performance improvements for many Raku scripts
and applications. It is quite varied in nature, although primarily focuses on
improvements at the level of the language runtime (MoarVM), especially given
the fact that the current compiler frontend will ultimately be replaced thanks
to the ongoing RakuAST effort. Given I am also working on that, I'm well-placed
to avoid doing throwaway work.</p>

<h2>Project Details</h2>

<p>As with previous grants, I request an hourly rate, and propose a set of key
areas that I intend to work on, on the understanding that there may not be
time to complete all of them, or that studying profiler and compilation output
might reveal some more profitable improvements to work on (bigger performance
gains for less effort).</p>

<p>One key area of work is to reduce the cost of calls, which is relatively high.
A lot of this cost is hidden by MoarVM being able to inline (including multiple
levels deep) and, in the case a speculative optimization proves invalid, to
uninline. However, in anything except the tightest microbenchmark, we can't
just inline everything, and the calling cost thus needs to be reduced also. Of
note, I propose to:</p>

<ul>
<li>Reduce the cost of callframe setup by allocating space for registers and,
where possible, the lexical environment directly on the callstack rather
than as separate allocations. This should make every non-inlined call
faster.</li>
<li>Reorganize callframe entry to avoid repeated checks (for example, around
specialized/unspecialized, JIT compiled or not, etc.), perhaps getting rid
of many of the checks entirely in specialized code by compiling the steps
needed for callframe setup.</li>
<li>Find a different, and cheaper, way to handle <code>LEAVE</code> and similar phasers.
These are often required for reliable release of locks, but suffer from
relatively poor performance. Their potential presence also imposes a small
cost even on frames that do not rely upon them, which would be good to
eliminate.</li>
<li>Further rework callframe exit in order to make it cheaper. Of note, MoarVM
has a "special return" mechanism that is used internally to avoid nested
runloops in favor of a Continuation Passing Style approach, which currently
also imposes a small cost on every frame exit (checking if it is needed).
The callstack layout after the new dispatch mechanism work will allow
us to avoid this.</li>
</ul>

<p>Prior to working on the new dispatch mechanism, I started some work on partial
escape analysis, an analysis that allows for eliminating or delaying object
allocations. Raku makes heavy use of objects, which not only imposes the
direct cost of their allocation and later garbage collection, but also the
indirect cost of having further optimizations frustrated by not being able to
look "inside" the object. Some basic escape analysis has already been merged,
while further work was not completed, and in part blocked by things that have
now been resolved. I would like to return to this work, bringing it piecemeal
into the main branch. Of note, this will deliver:</p>

<ul>
<li>Support for transitive escape analysis, so we can avoid the allocation of
entire object graphs (for example, a Scalar container holding a Complex
could potentially elide both allocations).</li>
<li>Restructuring object creation. Today we often lazily allocate containers
for attributes, in part because we depend on it to know whether to apply
attribute default values. This creates complications for escape analysis,
as well as forcing initialization checks in quite a number of places.</li>
<li>Delayed materialization of allocations. For example, if an object is read
and written many times before it escapes (that is, returned or stored
somewhere we can't reason about), we can delay the allocation of the object,
treating its attributes as local variables up to that point. In some cases
the allocation may only happen in one branch (for example, in an exceptional
path), and so be possible to eliminate entirely in the common case.</li>
<li>Handling of <code>Int</code>s in scalar replacement (the process by which non-escaping
object's attributes are stored in VM registers). <code>Int</code> is important given how
common integer math is, but also challenging because of the potential big
integer upgrade. Special care will be needed to never leak memory that is
allocated for a big integer, even in the situations an enclosing object's
allocation is elided.</li>
</ul>

<p>Another area of work is to further improve or make further use of the new
dispatch mechanism. Of note:</p>

<ul>
<li>Apply the same caller-side decontainerization of <code>Scalar</code> containers approach
to also handle native references, so we can optimize their creation away in
many more cases. This should lead to performance improvements in code that
makes use of native types.</li>
<li>Provide a way to attach dispatch programs a level down the callstack, which
may turn a megamorphic program point into a monomorphic one. For example, at
the moment, when we have a <code>proto</code> with a complex body and a <code>{*}</code>, the cache
at the <code>{*}</code> will end up with entries for all argument types that are seen.
However, if we were to locate the cache in the caller of the <code>proto</code>, we'd
often end up with only a single entry. The same applies in a number of other
situations (for example, the dispatch resumption is currently inside of the
<code>callsame</code> sub, so we scale poorly in large applications that use <code>callsame</code>
in many different places).</li>
<li>Use the dispatch mechanism to better optimize use of the FALLBACK method</li>
<li>Use the dispatch mechanism to better optimize various forms of Raku type
check</li>
<li>In the case we have specializations available, fold the selection of a
specialization into the dispatch program, avoiding repeated guard checks</li>
</ul>

<h2>Project Schedule</h2>

<p>I would start immediately upon grant approval, and expect to give a minimum of
40 hours a month to the grant, however more should be possible most months.</p>

<h2>Bio</h2>

<p>I am the founder and architect of MoarVM, the most popular runtime for Raku users,
and the architect of the Rakudo compiler. I have contributed to the implementation
of numerous Raku language features, and played a key role in the design of the
concurrent and parallel aspects of the language. I hold a degree in Computer Science
from the University of Cambridge, and actively work in the field of developer
tooling and compilation.</p>

<h2>Amount requested</h2>

<p>200 hours * $60 USD / hour = $12,000 USD</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Call for Grants: November 2021 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_november_2021"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/call_for_grants_november_2021</id>
  <published>2021-10-25T20:56:26</published>
  <updated>2021-10-25T20:56:26</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 November 5, 2021, UTC. We will publish the received applications, get community feedback through November 12th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding .png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 November 5, 2021, UTC. We will publish the received applications, get community feedback through November 12th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than November 6th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Bitbucket Pipelines (the CI system) for Perl projects</title>
  <summary type="html"><![CDATA[<p>
Bitbucket Pipelines (the CI system) for Perl projects
<p>
]]></summary>
  <updated>2021-10-25T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/bitbucket-pipelines-for-perl-projects"/>  <id>https://perlmaven.com/bitbucket-pipelines-for-perl-projects</id>
  <content type="html"><![CDATA[<p>
Bitbucket Pipelines (the CI system) for Perl projects
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#535 - Exercism and Perl</title>
    <link rel="alternate" href="https://perlweekly.com/archive/535.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>A long, long time ago I contributed a few Perl-related exercises to <a href="https://exercism.org/">Exercism</a>, but then for another long time I only recommended it, but didn't use it myself. Recently I returned to it with the hope to use it as a platform to allow my students to practice. I noticed that the Perl track has 62 exercises while many of the other tracks have more. Some of them twice as many.</p>
<p>Have you tried doing the Perl track recently? Are you a mentor on the Perl track? Have you contributed an exercises?</p>
<p>I wonder if it would be a good idea for Mohammad, to post his Weekly challenges as exercises on Exercism.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/535.html</id>
    <published>2021-10-25T10:00:00Z</published>
    <updated>2021-10-25T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Please spare ten minutes for the Calgary Research Study</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/survey-please-take-part"/>
  <id>tag:news.perlfoundation.org,2021-10-25:/post/survey-please-take-part</id>
  <published>2021-10-25T03:44:22</published>
  <updated>2021-10-25T03:44:22</updated>
  <summary>
  <![CDATA[
     Have you completed the online survey which forms part of the research by Dr. Ann Barcomb of the University of Calgary to understand episodic, or occasional, participation in the Perl and Raku communities. The research is being undertaken in collaboration with The Perl Foundation. More information is in the launch article. The survey requires 125-150 participants before analysis of the results can begin. To date 95 people have completed the 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Have you completed the <a href="https://survey.yeticraft.net/index.php/361854?lang=en">online</a> survey which forms part of the research by <a href="https://barcomb.org/">Dr. Ann Barcomb</a> of the University of Calgary to understand episodic, or occasional, participation in the Perl and Raku communities. The research is being undertaken in collaboration with The Perl Foundation. More information is in <a href="https://news.perlfoundation.org/post/annbarcombstudylaunch">the launch article</a>. </p>

<p>The survey requires 125-150 participants before analysis of the results can begin. To date 95 people have completed the survey. </p>

<p>If you've already filled the survey, please forward it to friends or colleagues who are a part of the community too.</p>

<p>As well as this online survey, the research team are looking <a href="https://news.perlfoundation.org/post/next-steps-for-research-study">for interview participants</a> to look at your experiences working with episodic contributors, and episodic contributions, in the Perl/Raku community. If you are interested, please read <a href="https://news.perlfoundation.org/post/_ra-rel-mnt_/simplecas/fetch_content/365ad3aa7bd432024d3140e3f5ac382b05c73622/InterviewRecruitment.pdf">the full invitation</a> to take part.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Caught in the Middle With SEDOL</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/24#pwc135" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer. Write a script find out the middle 3-digits of the given 
integer, if possible, otherwise show a sensible error message.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use POSIX;
sub middle_3{
    my($i) = @_;
    $i = abs($i);
    my $length = length($i);
    return "even number of digits" if $length % 2 == 0;
    return "too short" if $length &lt; 3;
    my $middle = ceil($length / 2);
    return substr($i, $middle - 2, 3);
}

MAIN:{
    print middle_3(1234567) . "\n";
    print middle_3(-123) . "\n";
    print middle_3(1) . "\n";
    print middle_3(10) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
345
123
too short
even number of digits
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Maybe on of the more interesting things about this is just what we consider the middle 3.
Truly it only makes sense for an integer with an odd number of digits. But could we 
have stretched the idea to allow for an even number of digits, perhaps with some left 
padding? Perhaps, but here we don't. So all integers with only 1 or 2 digits are discarded
as are those with an even number of digits. Negative numbers are allowed, but we do not
consider the minus sign in determining the middle.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 7-characters alphanumeric SEDOL. Write a script to validate the given 
SEDOL. Print 1 if it is a valid SEDOL otherwise 0.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_sedol{
    my($sedol) = @_;
    my $base = substr($sedol, 0, 6);
    my $check_digit = substr($sedol, 6, 1); 
    ##
    # check length
    ##
    return false if length($sedol) != 7;
    ##
    # check for alphanumerics only
    ##
    my $test_base = $base;
    $test_base =~ tr/[0-9][B-Z]//d;
    return false if $test_base;
    ##
    # confirm the check_digit
    ##
    return false if $check_digit != compute_check_digit($base);
    ##
    # all tests passed!
    ##
    return true;
}

sub compute_check_digit{
    my($base) = @_;
    my @chars = split(//, $base);
    my @weights = (1, 3, 1, 7, 3, 9),
    my $sum = 0;
    do{
        my $c = ord(shift @chars);
        if($c &gt;= 66 &amp;&amp; $c &lt;= 90){
            $sum += (($c - 64 + 9) * shift @weights);
        }
        if($c &gt;= 48 &amp;&amp; $c &lt;= 57){
            $sum += (($c - 48) * shift @weights);
        }
    }while(@chars);
    return (10 - ($sum % 10)) % 10
}

MAIN:{
    print is_sedol(2936921) . "\n";
    print is_sedol(1234567) . "\n";
    print is_sedol("B0YBKL9") . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules around SEDOLs are a bit more complex than this problem lets on. I won't recount
them all here, but suffice to say we are dealing with a quite idealized set of validations
here. For example, prior to 2004 only numerals were allowed, but since then letters are 
allowed. But only a numeral can follow a letter. Again, though, those are only rules that
apply for a certain time range.&lt;/p&gt;

&lt;p&gt;Here we are just checking on length, whether or not the SEDOl contains all numerals and/or
(uppercase) letter, and the checksum validation.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-134/"&gt;Challenge 135&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.investopedia.com/terms/s/sedol.asp"&gt;Stock Exchange Daily Official List (SEDOL)&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc135</id>
    <published>2021-10-24T15:17:00-04:00</published>
    <updated>2021-10-24T15:17:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Some Perl Code In Memory of a Great Scientist</title>
    <link rel="alternate" href="http://blogs.perl.org/users/martin/2021/10/some-perl-code-in-memory-of-a-great-scientist.html"/>
    <id>tag:blogs.perl.org,2021:/users/martin//2725.10473</id>
    <published>2021-10-24T17:10:00Z</published>
    <updated>2021-10-24T18:14:37Z</updated>
    <author>
        <name>martin</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/martin/">
        <![CDATA[<p>On August 21, 2021, famous Polish mathematician Andrzej Schinzel passed away at the age of 84. He was one of the great minds behind modern number theory. May he rest in peace.
I have extended one of my CPAN modules relating to his work and dedicated the release to his memory.</p>
]]>
        <![CDATA[<p>I'll outline one of the insights credited to Beeger (1884-1965) and Schinzel. Suppose we want to factor an integer number of the form <em>k<sup>n</sup> ± 1</em>. We can use classical Algebra to factor rational polynomials <em>x<sup>n</sup> ± 1</em>. For example, <em>x<sup>21</sup> + 1 = (x + 1)(x<sup>2</sup> - x + 1)(x<sup>6</sup> - x<sup>5</sup> + x<sup>4</sup> - x<sup>3</sup> + x<sup>2</sup> - x + 1)(x<sup>12</sup> + x<sup>11</sup> - x<sup>9</sup> - x<sup>8</sup> + x<sup>6</sup> - x<sup>4</sup> - x<sup>3</sup> + x +1)</em>. These factors always have integer coefficients, are called cyclotomic polynomials, and are "easy" to obtain. Evaluating these polynomials at <em>x = k</em> yields us a first partial factorization of our number.</p>

<p>To continue our example, we see that <em>2<sup>21</sup> + 1 = 3·3·43·5419</em>, <em>3<sup>21</sup> + 1 = 4·7·547·682969</em>, etc.  Can we do better? Enter Aurifeuillean factorization. Aurifeuille, Le Lasseur and Lucas observed that some cyclotomic polynomials can be written in the form <em>C<sup>2</sup> - n·x·D<sup>2</sup> = (C - √(n·x)D)(C + √(n·x)D)</em> where <em>n</em> is a positive integer and <em>C</em> and <em>D</em> are again polynomials with integer coefficients. In algebraic terms, while irreducible over the field of Rationals ℚ, cyclotomic polynomials may be reducible over some extension field ℚ[√n]. Now if the square root of <em>n·x</em> happens to be an integer, that is when <em>x</em> is <em>n</em> times a square number, the formula above gets all integer, splitting a cyclotomic factor into two smaller integer factors.  In short, Aurifeuille &amp; Co. improve our factorization for some, but not all combinations of <em>n</em> and <em>k</em>.</p>

<p>For square-free <em>n &gt; 1</em>, meaning <em>n</em> without square divisors, <em>Lucas C,D</em> polynomials can split one cyclotomic factor of <em>n<sup>n</sup> - 1</em> if <em>n ≡ 1 (mod 4)</em>, or of <em>n<sup>n</sup> + 1</em> otherwise, into two smaller factors. Note that the base and the exponent are equal.</p>

<p>It turns out that these are special cases of something more profound. Beeger and Schinzel found the best currently known generalization. Essentially, they give us <em>C,D</em> polynomials covering more cases. To illustrate their range, let's compare some factorizations of 21st powers plus one. We leave out perfect powers, as <em>k<sup>n<sup>21</sup></sup></em> can be better treated as an <em>n</em><sup>21</sup>st power of <em>k</em> than as a 21st power of <em>k<sup>n</sup></em>.</p>

<pre>
+-----+------------+-----------------------------------------+
|  n  |  kind      |  factors of n^21+1                      |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  2  | cyclotomic |  3  3  43  5419                         |
|     +------------+-----------------------------------------+
|     | complete   |  3  3  43  5419                         |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  3  | cyclotomic |  4        7  547  682969                |
|     +------------+-----------------------------------------+
|     | Lucas      |  4     1  7  547  682969                |
|     +------------+-----------------------------------------+
|     | Schinzel   |  4     1  7  547  301    2269           |
|     +------------+-----------------------------------------+
|     | complete   |  2  2     7  547  7  43  2269           |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  5  | cyclotomic |  6     21    13021    290639881         |
|     +------------+-----------------------------------------+
|     | complete   |  2  3  3  7  29  449  7  43  127  7603  |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  6  | cyclotomic |  6     21    13021    290639881         |
|     +------------+-----------------------------------------+
|     | complete   |  2  3  3  7  29  449  7  43  127  7603  |
+-----+------------+-----------------------------------------+
|     +------------+-----------------------------------------+
|  7  | cyclotomic |  8        43  102943    15772610449     |
|     +------------+-----------------------------------------+
|     | Lucas      |  8        43  113  911  15772610449     |
|     +------------+-----------------------------------------+
|     | Schinzel   |  8        43  113  911  51031  309079   |
|     +------------+-----------------------------------------+
|     | complete   |  2  2  2  43  113  911  51031  309079   |
+-----+------------+-----------------------------------------+
</pre>
<p>As we can see, "Schinzel" polynomials, as I like to call them, help us with many large cyclotomic factors Lucas polynomials leave aside.</p>
<p>As I wanted to include Aurifeuillean factorization in my CPAN module Math::Polynomial::Cyclotomic for quite some time, I finally took the opportunity to do that. I implemented Lucas and "Schinzel" polynomials there as well as methods applying these to find algebraic factors of integer numbers of the form <em>k<sup>n</sup> ± 1</em>.
Factoring large numbers can be hard—crypto-algorithms like RSA rely on that—, and a partial factorization can be the crucial step to reduce the problem to a feasible magnitude.  Curiously, <em>Lucas C,D</em> polynomials seem to be rare in computer algebra libraries and Schinzel's results even rarer.  At least CPAN now has some of these.  I intend to add a Raku version later.  A treasure trove of other number-theoretic functions can be found in Dana Jacobsen's Math::Prime::Util, including some that are used in M::P::Cyclotomic.</p>
<p>Andrzej Schinzel published more than 200 research papers and was <strong>the</strong> expert for number-theoretic aspects of polynomials. I dedicate the latest release of Math::Polynomial::Cyclotomic to his memory.</p>
<h2>References</h2>
<ul><li><a href="https://metacpan.org/dist/Math-Polynomial-Cyclotomic">Math::Polynomial::Cyclotomic</a> on CPAN</li>
<li><a href="https://metacpan.org/dist/Math-Prime-Util">Math::Prime::Util</a> on CPAN</li>
<li><a href="https://homes.cerias.purdue.edu/~ssw/cun/">The Cunningham Project</a>, a project dedicated to collect integer factors of high powers of small integers ± 1</li>
<li><a href="https://en.wikipedia.org/wiki/Cyclotomic_polynomial">Cyclotomic polynomial</a> in Wikipedia</li>
<li><a href="https://maths-people.anu.edu.au/~brent/pub/pub135.html">The paper by Richard Brent</a> my implementation of Aurifeuillean factorization of cyclotomic polynomials is based on</li>
<li><a href="https://en.wikipedia.org/wiki/Andrzej_Schinzel">Andrzej Schinzel</a> in Wikipedia</li>
</ul>]]>
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6850168098691124927</id>
    <published>2021-10-23T15:53:00.000+02:00</published>
    <updated>2021-10-23T15:53:16.267+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxiv) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.44&lt;/strong&gt; on 2021-10-20&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.42 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.050003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.050003&lt;/strong&gt; on 2021-10-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.050001 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.51&lt;/strong&gt; on 2021-10-22&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.50 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.35' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.35&lt;/strong&gt; on 2021-10-19&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.34 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/local-lib-2.000028' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;local::lib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - create and use a local lib/ for perl modules with PERL5LIB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000028&lt;/strong&gt; on 2021-10-17&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 2.000027 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20211020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20211020&lt;/strong&gt; on 2021-10-21&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210920 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.22&lt;/strong&gt; on 2021-10-21&lt;/li&gt;  &lt;li&gt;Votes: 462&lt;/li&gt;  &lt;li&gt;Previous version: 9.21 was 2 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2021-10-22&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.715' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.715&lt;/strong&gt; on 2021-10-20&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 7.714 was 2 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2021-10-21&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 1.44 was 6 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.078' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.078&lt;/strong&gt; on 2021-10-17&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.077 was 1 month, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6850168098691124927/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiv-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6850168098691124927"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6850168098691124927"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiv-11-great-cpan-modules-released.html" title="(ccclxiv) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Weekly Challenge 135</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-135-g0o" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-135/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-135/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-middle-3digits">
  </a>
  TASK #1 › Middle 3-digits
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given an integer.</p>

<p>Write a script find out the middle 3-digits of the given integer, if possible otherwise throw sensible error.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>This task was pretty straight forward.</p>

<ul>
<li>Check the an integer was provided.</li>
<li>If it is negative, make it positive with the <code>abs</code> function.</li>
<li>Display an error if it contains an even number of digits, or one digit</li>
<li>The first character we want to show can be calculated by <code>(length - 3) ÷ 2</code>. Use this value with <code>substr</code> to display the middle three digit</li>
</ul>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl 1234567
345

$ ./ch-1.pl -123
123

$ ./ch-1.pl 1
too short

$ ./ch-1.pl 10
even numbers of digits
</code></pre>

</div>



<h2>
  <a href="#task-2-validate-sedol">
  </a>
  TASK #2 › Validate SEDOL
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given 7-characters alphanumeric <a href="https://en.wikipedia.org/wiki/SEDOL">SEDOL</a>.</p>

<p>Write a script to validate the given SEDOL. Print 1 if it is a valid SEDOL otherwise 0.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>The first thing that I need to do is check if the input is valid. I use the regular expression <code>^[B-DF-HJ-NP-TV-Z0-9]{6}[0-9]$</code> to perform this. According to the specification, vowels are not valid. Did anyone else sing the <a href="https://en.wikipedia.org/wiki/Alphabet_song">alphabet song</a> when generating the regular expression? :)</p>

<p>I set the value of <code>$sum</code> to the last digit. I then go through the other digits. I work out the value of the digit in the position (0-9 if it is is a number, 10-35 if it is a letter) and multiple the weight.</p>

<p>If the resulting sum is divisible by 10, I return 1 (a valid SEDOL value), otherwise I return 0.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.pl 2936921
1

$ ./ch-2.pl 1234567
0

$ ./ch-2.pl B0YBKL9
1
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-135-g0o</id>
    <published>2021-10-23T12:39:48Z</published>
    <updated>2021-10-23T12:39:48Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>13 reasons why you should not use Perl</title>
    <link rel="alternate" href="https://dev.to/parvezmrobin/13-reasons-why-you-should-not-use-perl-20d5" type="text/html"/>
    <content type="html">&lt;p&gt;Currently, I am conducting a natural language processing course. As part of the curriculum, I need to learn and code in Perl. I was exited! I was enthusiastic! However, the verb is "WAS". I am neither exited nor enthusiastic any more. I already have experience in C, CPP, C#, Java, Golang, Python, JavaScript, TypeScript and Bash. Among this versatile experience, Perl is now my second most hated language after Bash. &lt;em&gt;Let me tell you why&lt;/em&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Weird variable access&lt;/strong&gt;: I have worked with typed language where I need to tell the type. I have worked with weakly typed language where the language knows which is which. Then comes Perl. It is weakly typed. But, I need to prefix a variable by either &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; to tell Perl about the type of variable. And I need to do it every time I access the variable. Even more - the prefix changes time to time based on the usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Too much implicit code&lt;/strong&gt;: Remember, explicit is always better than implicit. But, Perl works the opposite way. Consider the following snippet.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;What this does is reads from the input stream in &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; this command, stores it in a variable named &lt;code&gt;$_&lt;/code&gt;, then prints that variable. Of course you can assign and use your own variable but Perl developers seem to prefer this. Well, I don't.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lacking readability&lt;/strong&gt;: Continuing from the previous example, when someone sees that snippet, it is literally hard to get what it is doing. At least, it was hard for me. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No clear parameter list&lt;/strong&gt;: While declaring a function (called subroutine in Perl), it does not specify the parameter list. You will always pass a list of arguments and the function need to extract them from an array. The end product is too much boiler-plating with too less readability.&lt;br&gt;
This is what you will do, if you need to retrieve 3 parameters.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;something&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;variables&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weirdly passing arrays to function&lt;/strong&gt;: When you pass an array to a perl function, it flattens everything. Consider the following code.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;@a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;@b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;scalar&lt;/code&gt; function returns the length of an array and the &lt;code&gt;@_&lt;/code&gt; variable holds the arguments as an array. So, &lt;code&gt;scalar(@_)&lt;/code&gt; will give us the number of arguments. What do you think the output is? &lt;code&gt;2&lt;/code&gt;? It should be. But, it's perl and the output is &lt;code&gt;6&lt;/code&gt;.&lt;br&gt;
If you want to pass an array as an array, you need to make a reference of the array, pass the reference and de-reference it inside the function. Hell of a job for such a simple task!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weirder passing hash/map to function&lt;/strong&gt;: Okay. When we pass something to a perl function, it flattens everything and makes a single array. What happens to hashes/maps? Well! It makes that an array too. And that array contains all the keys and values; in a single place. Consider the following code.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;func1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;%f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;func&lt;/span&gt; &lt;span class="nv"&gt;%f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;What do you think the former code prints? My guess was it will print the keys of the map. At the worst case, it will print the values instead. Alas! The actual worst case worse than what I anticipated. It prints both keys and values. So, the output is &lt;code&gt;one, 1, two, 2&lt;/code&gt;. And it becomes a mess when you want to reconstruct the map.&lt;br&gt;
The mess gets messier if you call the function like &lt;code&gt;func1 %f, three, 3&lt;/code&gt;. How will you know what came from where?&lt;/p&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cryptic RegEx handling&lt;/strong&gt;: When you do a regular expression match, it automatically assigns some variables like &lt;code&gt;$&amp;amp;&lt;/code&gt;, &lt;code&gt;$`&lt;/code&gt;, &lt;code&gt;$'&lt;/code&gt; etc. They are useful when you know them to be honest. But, when you just read the code, specially when you are from another background, it looks like a mess.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less Searchability&lt;/strong&gt;: Consider the previous point. You are reading a perl program. You suddenly found use of undeclared variables like &lt;code&gt;$&amp;amp;&lt;/code&gt; or &lt;code&gt;$'&lt;/code&gt;. So, you googled about it - &lt;em&gt;"what does $' means in perl"&lt;/em&gt;. Alas! while you search something on the search engines, they generally stripes out spaces and punctuation. You will still have relevant results. But, they won't be as great as if you search - &lt;em&gt;"what does dir mean in python"&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pathetic debugging support&lt;/strong&gt;: The debugging support for perl is in a word pathetic. It only supports some basic commands and the error messages are cryptic. Once you are stuck in somewhere, you are DONE!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Too much implicit error handling&lt;/strong&gt;: While the shown error messages are cryptic, there are a lot of errors that are not shown at all. Say, we have an array &lt;code&gt;@a&lt;/code&gt; and we want to print it. Now, mistakenly we have typed &lt;code&gt;print $a&lt;/code&gt;. It will just print nothing just like if the array was empty. In my opinion it either should through an error or print the memory address of &lt;code&gt;@a&lt;/code&gt;. It does nothing. And you will never know that you have an error there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Inconsistent behavior&lt;/strong&gt;: Say, we have a function like this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;one&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we define two maps like the following&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;%m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;%m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;one&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;%m1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;%m2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It will print &lt;code&gt;one1&lt;/code&gt; and &lt;code&gt;1two&lt;/code&gt;. Can you make any sense of it? Well, I could not for a while. Turns out if your map's value coincides with one of the functions, it will call that function and use the function's return value as the map's value. But, it will not do such if your map's key coincides with a function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poor IDE support&lt;/strong&gt;: So far I have not seen any perl IDE that satisfies me. You can add plugin to VS Code or JetBrains IDEs to support perl. But, they are buggy and are not feature-rich.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;I just hate it&lt;/strong&gt;: This is the full and final reason. And, I guess, this is sufficient reason to hate a language that I just hate it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;John Lennon dreamed of a world without religion. I dream of a world without perl.&lt;/p&gt;
&lt;/blockquote&gt;

</content>
    <author>
      <name>Parvez M Robin</name>
    </author>
    <id>https://dev.to/parvezmrobin/13-reasons-why-you-should-not-use-perl-20d5</id>
    <published>2021-10-21T20:15:33Z</published>
    <updated>2021-10-21T20:15:33Z</updated>
    <category term="perl"/>
    <category term="nlp"/>
    <category term="regex"/>
  </entry>
  <entry>
    <title>Making Single-binary Release with pp</title>
    <link rel="alternate" href="https://dev.to/gugod/making-single-binary-release-with-pp-5171" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;code&gt;pp&lt;/code&gt; comes with &lt;code&gt;PAR::Packer&lt;/code&gt;, which is a tool for "compiling" a bunch of modules and codes and makes a single binary.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perldoc pp&lt;/code&gt; already contains a good amount of documentation one can refer to.&lt;/p&gt;

&lt;p&gt;While it works with system perl, I found it even easier to first prepare a directory of &lt;code&gt;local::lib&lt;/code&gt;, then just package that entire directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pp&lt;/code&gt; tries its best to determine the list of dependencies of the given program in various ways but none of those are guaranteed to be 100% accurate. As matter of fact that guarantee is impossible to make. This is partially due to the fact that a running program can load modules in ways that cannot be easily determined by reading the program source code, or in a relative hidden code path that cannot be easily captured.&lt;/p&gt;

&lt;p&gt;That is a good amount of flexibility, but definitely a pricey one. Although, arguably it is also an issue brought by the tool (&lt;code&gt;pp&lt;/code&gt;, &lt;code&gt;perlcc&lt;/code&gt;, &lt;code&gt;perl2exe&lt;/code&gt;, etc.). I guess that is because the dynamic nature is so convenient as long as all the installation are done right. Having a tool that is able to automically complie all dependencies together was not needed that much. It has definidently needed, that is why we have those tools now, but in the last mile of their completion, lies an undecidable problem.&lt;/p&gt;

&lt;p&gt;So we will need to manually add those missing depedencies to &lt;code&gt;pp&lt;/code&gt; command, which is fine only when the list is small. Since we wish to just pack all the declared dependencies together, we don't care that much even if that's going to make the result a little bigger than it has to be. If we can have the same build script that works everywhere, it is as happy as in Christmas. (An pure metaphoric experssion. Pesonally I feel nothing spceial in Dec 25.)&lt;/p&gt;

&lt;p&gt;Anyway...... it turns out to be much easier to decide the dependency at installation time, since that's all well-declared and tools like &lt;code&gt;cpm&lt;/code&gt;, or &lt;code&gt;cpanm&lt;/code&gt; already does this perfectly. If we install dependencies in a self-contained directory, we could just archive the entire directory together with the program we are packing, and that should be good to go.&lt;/p&gt;

&lt;p&gt;Let's say we cd into the source code of &lt;code&gt;foo&lt;/code&gt; and we are trying to compile the program &lt;code&gt;foo&lt;/code&gt; as a binary. The executable is at &lt;code&gt;bin/foo&lt;/code&gt;, while its own moulders such as &lt;code&gt;Foo.pm&lt;/code&gt;, &lt;code&gt;Foo/Bar.pm&lt;/code&gt; are put under the conventional directory &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Given that, this script should produce &lt;code&gt;foo&lt;/code&gt; as a single binary that as if all dependencies are "statically-linked" inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Prepare local/ 
cpanm -L local -q --installdeps .
# or: cpm install

perlversion=$(perl -MConfig -e 'print $Config{version}')
pp -B \
    -I ./local/lib/perl5 \
    -a "./local/lib/perl5/;$perlversion/" \
    -a lib \
    -o foo \
    bin/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alas, this is almost perfect -- except modules in corelist might still be missing. They won't be inside &lt;code&gt;local/&lt;/code&gt; and if they are somehow not discovered by &lt;code&gt;pp&lt;/code&gt; then they'll be missing in the end result. We won't know this until we manually test the result &lt;code&gt;foo&lt;/code&gt; thoroughly. Basically we should always add a bunch of &lt;code&gt;-M&lt;/code&gt; flags in the build script instead of assuming &lt;code&gt;pp&lt;/code&gt; would do the right thing.&lt;/p&gt;

&lt;p&gt;For example, like so, when all of &lt;code&gt;Getopt::Long&lt;/code&gt;, &lt;code&gt;JSON::PP&lt;/code&gt;, and &lt;code&gt;Sys::Hostname&lt;/code&gt; are required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pp -B \
    -M Getopt::Long:: \
    -M JSON::PP:: \
    -M Sys::Hostname:: \
    -I local/lib/perl5 \
    -a "./local/lib/perl5/;$perlversion/" \
    -a lib \
    -o foo \
    bin/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A rather tedious modification as the list of dependent modules my exist in two places in the repo. Surely there is some way to refactor this.&lt;/p&gt;

&lt;p&gt;I've verified the following script &lt;code&gt;build-minicpan.sh&lt;/code&gt; that can download the tarball of &lt;code&gt;CPAN::Mini&lt;/code&gt; and build a working &lt;code&gt;minicpan&lt;/code&gt; out of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash
set -e

curl --silent -O https://cpan.metacpan.org/authors/id/R/RJ/RJBS/CPAN-Mini-1.111016.tar.gz

tar -xzf CPAN-Mini-1.111016.tar.gz

cd CPAN-Mini-1.111016

cpanm -n -q -L local --installdeps .

perlversion=$(perl -MConfig -e 'print $Config{version}')

pp -B \
   -M Getopt::Long:: \
   -I ./local/lib/perl5 \
   -a "./local/lib/perl5/;$perlversion/" \
   -a lib \
   -o ../minicpan \
   bin/minicpan

echo "DONE: minicpan"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me this seems to be an area worth exploring... I've been experimenting the automation of this in a side-project: &lt;a href="https://github.com/gugod/pau"&gt;pau&lt;/a&gt;, which is a collection of shell functions that can install app to their own self-contained directory and expose just the program it self. Very similar to what &lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt; does. &lt;code&gt;pp&lt;/code&gt; support was added not long ago but still there is no good way to figure out all the missing modules and automatically add them as &lt;code&gt;-M&lt;/code&gt; arguments.&lt;/p&gt;

&lt;p&gt;Maybe as a lazy solution, we should just &lt;em&gt;always&lt;/em&gt; produce a heavy-pack that includes the whole core lib directory (usually &lt;code&gt;$INC[-1]&lt;/code&gt;) regardless whether any of them are used.&lt;/p&gt;

&lt;p&gt;Maybe.&lt;/p&gt;




&lt;p&gt;Originally posted at: &lt;a href="https://gugod.org/2021/10/perl-making-single-binary-release-with-pp/"&gt;gugod's blog -- Making single binary release with pp&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Kang-min Liu</name>
    </author>
    <id>https://dev.to/gugod/making-single-binary-release-with-pp-5171</id>
    <published>2021-10-21T15:01:08Z</published>
    <updated>2021-10-21T15:01:08Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="compiling"/>
  </entry>
  <entry>
    <title>My Favorite Modules: diagnostics</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"/>
    <id>tag:blogs.perl.org,2021:/users/tom_wyant//506.10471</id>
    <published>2021-10-21T03:46:34Z</published>
    <updated>2021-10-21T03:49:26Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>One of the things the Perl 5 Porters work hard on is issuing diagnostics that are actually diagnostic. I think they do a pretty good job at this, but sometimes I need a bit more explanation than the typical one-line message.<p>

<p>Now, there is documentation on all of these in <a href="http://perldoc.perl.org/perldiag.html"><code>perldiag</code></a>, but paging through that looking for my message is a pain.</p>

<p>Fortunately, there is a module for that: <a href="http://perldoc.perl.org/diagnostics.html"><code>diagnostics</code></a>. This module causes diagnostics to be expanded into their full explanation as it appears in <code>perldiag</code>.</p>

<p>Typically you would not put a <code>use diagnostics;</code> in your Perl code, though of course you could. Instead, you would load it via a command-line option to <code>perl</code>, or maybe via environment variable <code>PERL5OPT</code>. That is, either</p>

<pre>
$ perl -Mdiagnostics my-flaky-perl.PL
</pre>

<p>or</p>

<pre>
$ env PERL5OPT=-Mdiagnostics perl my-flaky-perl.PL
</pre>

<p>The environment-variable example is a bit contrived, and <code>U**x</code> specific. It is more useful if you do not run Perl directly, and so can not change the command (if any) used to invoke Perl. In this case you would define the environment variable however it is done in your OS, before starting Perl. If your environment already defines this you will need to add <code>'-Mdiagnostics'</code> to the existing value, space delimited, using the quoting rules of your command shell. Note that this only affects Perls run in the same process that defined <code>PERL5OPT</code>, or in a subprocess of that process.</p>

<p>If for some reason you are unable to inject this module into your Perl, but you can capture your messages from <code>stderr</code>, the <code>splain</code> script will expand them after the fact. See the <a href="http://perldoc.perl.org/diagnostics.html"><code>diagnostics</code></a> POD for details.</p>

<p>A couple notes on this module:</p>

<ul>
    <li>This module was introduced in Perl 5.002.</li>
    <li>The documentation describes this module as a pragma, which to me means lexical scope. But playing with it seems to say its scope is global.</li>
    <li>Only the first instance of each diagnostic is expanded.</li>
    <li>To tie this back to the <a href="http://perldoc.perl.org/warnings.html">warnings</a> series, I wrote some Perl to report on what diagnostics are enabled by each warning category. This may involve too much ad-hocery to actually release to CPAN, but the curious can find the code <a href="https://github.com/trwyant/perl-App-Warning-Diagnostics">on GitHub</a>.</li>
</ul>

<p>Previous entries in this series:</p>
<ul>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
</ul>
]]>
        
    </content>
</entry>
  <entry>
    <title>The reports of Perl’s death have been greatly exaggerated</title>
    <link rel="alternate" href="https://dev.to/mjgardner/the-reports-of-perls-death-have-been-greatly-exaggerated-2p61" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Look, I get it. You don’t like the Perl programming language or have otherwise disregarded it as “dead.” (Or perhaps you haven’t, in which case please check out my <a href="https://phoenixtrap.com/tag/perl/">other blog posts</a>!) It has <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/">weird noisy syntax</a>, mixing <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#regexps">regular expressions</a>, <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#sigils">sigils</a> on variable names, various braces and brackets for <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#datastructures">data structures</a>, and a menagerie of cryptic <a href="https://phoenixtrap.com/2021/07/20/the-four-noisy-horsemen-of-perl-hate/#vars">special variables</a>. It’s old: <a href="https://perldoc.perl.org/perlhist#THE-RECORDS">34 years in December</a>, with a history of (sometimes amateur) developers that have used and abused that syntax to ship code of questionable quality. Maybe you grudgingly accept its utility but think it should <a href="https://phoenixtrap.com/2021/06/01/should-perl-die-gracefully/">die gracefully</a>, maintained only to run legacy applications.</p>

<p>But you know what? Perl’s still going. It’s had a <a href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/">steady cadence of yearly releases</a> for the past decade, introducing new <a href="https://perldoc.perl.org/feature">features</a> and <a href="https://phoenixtrap.com/2021/09/21/everyones-a-perl-critic/">fencing in bad behavior</a> while maintaining an <a href="https://perldoc.perl.org/perlpolicy#BACKWARD-COMPATIBILITY-AND-DEPRECATION">admirable level of backward compatibility</a>. Yes, there was a too-long adventure developing what started as Perl 6, but that language now has <a href="https://raku.org/">its own identity as Raku</a> and even has facilities for <a href="https://phoenixtrap.com/2021/08/17/perl-raku-best-frenemies/">mixing Perl with its native code</a> or vice versa.</p>

<p>And then there’s <a href="https://www.cpan.org/">CPAN</a>, the Comprehensive Perl Archive Network: a <a href="https://metacpan.org/recent">continually-updated</a> collection of over 200,000 open-source modules written by over 14,000 authors, the <a href="https://metacpan.org/pod/Task::Kensho">best of which</a> are <a href="https://qa.perl.org/cpan-testers/">well-tested</a> and ‑documented (applying <a href="https://cpants.cpanauthors.org/">peer pressure</a> to those that fall short), presented through a <a href="https://metacpan.org/">search engine and front-end</a> built by <a href="https://metacpan.org/about/contributors">scores of contributors</a>. Through CPAN you can find distributions for things like:</p>

<ul>
<li>web frameworks (e.g., <a href="http://www.catalystframework.org/">Catalyst</a>, <a href="https://www.perldancer.org/">Dancer</a>, <a href="https://mojolicious.org/">Mojolicious</a>)</li>
<li>object-relational mappers (e.g., <a href="https://metacpan.org/pod/DBIx::Class">DBIx::Class</a>, <a href="https://metacpan.org/pod/Rose::DB::Object">Rose::DB::Object</a>)</li>
<li>advanced object systems (e.g., <a href="https://metacpan.org/pod/Moose">Moose</a>, <a href="https://metacpan.org/pod/Moo">Moo</a>)</li>
<li>asynchronous libraries (e.g., <a href="https://metacpan.org/pod/IO::Async">IO::Async</a> and the aforementioned Mojolicious’ <a href="https://docs.mojolicious.org/Mojo/IOLoop">Mojo::IOLoop</a>)</li>
</ul>

<p>All of this is available through a mature installation toolchain that doesn’t break from month to month.</p>

<p>Finally and most importantly, there’s the global Perl community. The COVID-19 pandemic has put a damper on the hundreds of global <a href="https://www.pm.org/">Perl Mongers</a> groups’ meetups, but that hasn’t stopped the yearly <a href="https://perlconference.us/">Perl and Raku Conference</a> from meeting virtually. (In the past there have also been yearly <a href="http://www.yapceurope.org/events/conferences.html">European</a> and <a href="http://yapcasia.org/">Asian</a> conferences, occasional forays into South America and <a href="https://yapcrussia.org/">Russia</a>, as well as hackathons and workshops worldwide.) There are <a href="http://www.irchelp.org/">IRC</a> <a href="http://www.irc.perl.org/">servers</a> and <a href="https://web.libera.chat/#perl">channels</a> for chat, <a href="https://lists.perl.org/">mailing lists</a> galore, <a href="https://perl.theplanetarium.org/">blogs</a> (yes, apart from this one), and a quirky <a href="https://www.perlmonks.com/">social network</a> that predates Facebook and Twitter.</p>

<p>So no, Perl isn’t dead or even dying, but if you don’t like it and favor something newer, that’s OK! Technologies can coexist on their own merits and advocates of one don’t have to beat down their contemporaries to be successful. Perl happens to be battle-tested (to borrow a term from my friend <a href="https://ovid.github.io/">Curtis “Ovid” Poe</a>), it runs large parts of the Web (speaking from direct and ongoing experience in the hosting business here), and it’s still evolving to meet the needs of its users.</p>




<p><em>Cover image by <a href="https://cogdogblog.com/">Alan Levine</a>, licensed <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a></em></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/the-reports-of-perls-death-have-been-greatly-exaggerated-2p61</id>
    <published>2021-10-19T14:00:00Z</published>
    <updated>2021-10-19T14:00:00Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="webdev"/>
  </entry>
  <entry>
    <title>#534 - Are you CPAN contributor?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/534.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How much have you contributed during the Hacktoberfest event yet?</p>
<p>CPAN needs a helping hand, not just during Hacktoberfest. I am raising the subject as Dave Cross recently blogged about his experience with one of the distributions hosted on CPAN in this <a href="https://dev.to/davorg/failing-to-get-product-information-from-amazon-with-perl-5a3g">blog post</a>. It also reminds me of my early days when I created Perl a library around some of Google's public APIs. Two of them, <a href="https://metacpan.org/dist/WWW-Google-CustomSearch">WWW::Google::CustomSearch</a> and <a href="https://metacpan.org/dist/WWW-Google-Places">WWW::Google::Places</a> were used by many people, as I have had many queries related to them in the past. It is very common for an API provider to discontinue the service or move in a new direction any time without notice. It becomes an even bigger issue if the author of the CPAN distribution disappears from the scene. So the question is, how best to deal with such cases? Thanks to the PAUSE admins, there is a documented process to adopt a distribution and take it forward. You should get in touch with one of the PAUSE admins if you want to adopt a distribution and contribute.</p>
<p>For many years, <a href="https://metacpan.org/recent">MetaCPAN</a> has been my playground. I used to spend 2-4 hours every day looking for low-hanging issues in the recently uploaded distributions. I even wrote a two-part blog post talking about how to become a CPAN contributor. <a href="https://www.perl.com/article/how-to-become-cpan-contributor">Part 1</a> and <a href="https://www.perl.com/article/how-to-become-cpan-contributor-part-2">Part 2</a>. I also gave a talk at The Perl Conference in Glasgow 2018 on the same topic. You can watch the talk on <a href="https://www.youtube.com/watch?v=QYN1nijo9VY">YouTube</a>, if you fancy.</p>
<p>I remember at one point, I was keen to contribute to MetaCPAN and be part of the Toolchain Gang. I couldn't get the local dev setup of MetaCPAN and was looking for help. I was told that someone from the gang is working on dockerisation of MetaCPAN to make it easier for anyone to contribute. I missed the opportunity to meet the gang when it was held in Marlow, not far from where I live (London) in 2019. I don't know if anyone is still working on that front.</p>
<p>I hardly contribute to CPAN these days but I still like to call myself CPAN contributor. However I do release a patch every now and then to some of my personal and adopted distributions. Being a member of the <a href="https://pullrequest.club/hello">Pull Request Club</a>, I do contribute to at least one distribution every month. I have never missed a month since I joined the club in Jan 2019.</p>
<p>If anyone is keen to become a CPAN contributor then please get in touch with me. We need fresh energy to make CPAN the central place to look for the best solutions.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/534.html</id>
    <published>2021-10-18T10:00:00Z</published>
    <updated>2021-10-18T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>A Couple of Brute Force Computations</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/17#pwc134" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 5 Pandigital Numbers in base 10.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to generate first 5 Pandigital Numbers in base 10.
##
use boolean;

sub first_n_pandigitals {
    my ($n)         = @_;
    my $found       = false;
    my $pandigitals = [];
    my $x           = 1_000_000_000;
    do {
        my $test = $x;
        push @{$pandigitals}, $x
          if ( $test =~ tr/0//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/1//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/2//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/3//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/4//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/5//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/6//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/7//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/8//d ) &gt; 0
          &amp;&amp; ( $test =~ tr/9//d ) &gt; 0;
        $found = ( @{$pandigitals} == $n );
        $x++;
    } while ( !$found );
    return $pandigitals;
}

sub first_5_pandigitals {
    return first_n_pandigitals(5);
}
MAIN: {
    my $pandigitals = first_5_pandigitals;
    for my $x ( @{$pandigitals} ) {
        print "$x\n";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1023456789
1023456798
1023456879
1023456897
1023456978
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;From the definition we know that we will need at least 10 digits and, intuitively, the
first five pandigital numbers will start with &lt;code&gt;1&lt;/code&gt;. So then, we start with &lt;code&gt;1_000_000_000&lt;/code&gt;
and iterate upwards testing each candidate until we find the first five. The test used
here is to determine if &lt;code&gt;tr&lt;/code&gt; finds all the required digits.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given 2 positive numbers, $m and $n. Write a script to generate multiplication 
table and display count of distinct terms.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given 2 positive numbers, $m and $n.
# Write a script to generate multiplcation table and display count of distinct terms.
##
sub compute_print {
    my ( $m, $n ) = @_;
    my $distinct = {};
    print " x | " . join( " ", ( 1 .. $n ) ) . "\n";
    print "---+-" . "-" x ( $n * 2 - 1 ) . "\n";
    for my $i ( 1 .. $m ) {
        print " $i | " . join( " ", map { $i * $_ } ( 1 .. $n ) ) . "\n";
        for my $j ( 1 .. $n ) {
            $distinct-&gt;{ $i * $j } = undef;
        }
    }
    return $distinct;
}
MAIN: {
    my $distinct = compute_print( 3, 3 );
    print "Distinct Terms: "
      . join( ", ", sort { $a &lt;=&gt; $b } keys %{$distinct} ) . "\n";
    print "Count: " . keys( %{$distinct} ) . "\n";
    print "\n\n";
    $distinct = compute_print( 3, 5 );
    print "Distinct Terms: "
      . join( ", ", sort { $a &lt;=&gt; $b } keys %{$distinct} ) . "\n";
    print "Count: " . keys( %{$distinct} ) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
 x | 1 2 3
---+------
 1 | 1 2 3
 2 | 2 4 6
 3 | 3 6 9
Distinct Terms: 1, 2, 3, 4, 6, 9
Count: 6


 x | 1 2 3 4 5
---+----------
 1 | 1 2 3 4 5
 2 | 2 4 6 8 10
 3 | 3 6 9 12 15
Distinct Terms: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15
Count: 11
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This is a perfectly Perl shaped problem. The computations can be handled in a 
straightforward way, especially with &lt;code&gt;map&lt;/code&gt;. Getting rid of duplicates is done using
the idiomatic method with hash keys. Finally, formatting the output cleanly is done 
without much undo stress. Compare what we do here to format the table with what was
necessary to represent the 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/10/17/prolog"&gt;same table in Prolog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-134/"&gt;Challenge 134&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PandigitalNumber.html"&gt;Pandigital Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc134</id>
    <published>2021-10-17T13:03:00-04:00</published>
    <updated>2021-10-17T13:03:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-754312460882398230</id>
    <published>2021-10-17T09:56:00.000+02:00</published>
    <updated>2021-10-17T09:56:17.813+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxiii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.050001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.050001&lt;/strong&gt; on 2021-10-12&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049009 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ASB/CHI-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CHI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Unified cache handling interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2021-10-13&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 6 years, 4 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/Cpanel-JSON-XS-4.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cpanel::JSON::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - cPanel fork of JSON::XS, fast and correct serializing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.27&lt;/strong&gt; on 2021-10-14&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.26 was 6 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.50&lt;/strong&gt; on 2021-10-15&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.49 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.16&lt;/strong&gt; on 2021-10-13&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.15 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9725' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9725&lt;/strong&gt; on 2021-10-10&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9724 was 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/local-lib-2.000027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;local::lib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - create and use a local lib/ for perl modules with PERL5LIB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000027&lt;/strong&gt; on 2021-10-14&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 2.000024 was 4 years, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.55&lt;/strong&gt; on 2021-10-11&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.54 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.027' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.027&lt;/strong&gt; on 2021-10-11&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.025 was 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.26' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.26&lt;/strong&gt; on 2021-10-12&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 0.25 was 4 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/754312460882398230/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiii-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/754312460882398230"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/754312460882398230"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxiii-10-great-cpan-modules-released.html" title="(ccclxiii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-227326272157609067</id>
    <published>2021-10-17T09:52:00.002+02:00</published>
    <updated>2021-10-17T09:52:56.167+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxvii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 27&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/10/17 07:52:38 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Subprocess" target="_blank"&gt;AnyEvent::Subprocess&lt;/a&gt; - flexible, OO, asynchronous process spawning and management&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::DSP::Fir" target="_blank"&gt;PDL::DSP::Fir&lt;/a&gt; - Finite impulse response filter kernels.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/POE::Component::Server::Inet" target="_blank"&gt;POE::Component::Server::Inet&lt;/a&gt; - a super-server daemon implementation in POE&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::WWW::WebKit2" target="_blank"&gt;Test::WWW::WebKit2&lt;/a&gt; - Perl extension for using an embedding WebKit2 engine for tests&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=152)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Fork" target="_blank"&gt;AnyEvent::Fork&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Fork::Pool" target="_blank"&gt;AnyEvent::Fork::Pool&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Fork::RPC" target="_blank"&gt;AnyEvent::Fork::RPC&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::MP" target="_blank"&gt;AnyEvent::MP&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=259)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPANtoRPM" target="_blank"&gt;App::CPANtoRPM&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autodie::variables" target="_blank"&gt;autodie::variables&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CBOR::XS" target="_blank"&gt;CBOR::XS&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::IniFiles" target="_blank"&gt;Config::IniFiles&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Audit" target="_blank"&gt;CPAN::Audit&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::JWT" target="_blank"&gt;Crypt::JWT&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ptkdb" target="_blank"&gt;Devel::ptkdb&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::MintingProfile::FFI" target="_blank"&gt;Dist::Zilla::MintingProfile::FFI&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::WebKit2" target="_blank"&gt;Gtk3::WebKit2&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO" target="_blank"&gt;IO&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::Redis" target="_blank"&gt;Mojo::Redis&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Model" target="_blank"&gt;Mojolicious::Plugin::Model&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=88)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::LogErrors" target="_blank"&gt;Plack::Middleware::LogErrors&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::WebKit2" target="_blank"&gt;WWW::WebKit2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/227326272157609067/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/cdlxxxvii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/227326272157609067"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/227326272157609067"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/cdlxxxvii-metacpan-weekly-report.html" title="(cdlxxxvii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6617058933828502709</id>
    <published>2021-10-17T09:51:00.000+02:00</published>
    <updated>2021-10-17T09:51:48.412+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-10-17 06:44:32 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69542971" target="_blank"&gt;Perl optional capture groups not working?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69516720" target="_blank"&gt;How do I format qw lists using perltidy?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69569478" target="_blank"&gt;Perl one-liner regex doesn't substitute correctly - returns error&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69517170" target="_blank"&gt;Automate values from text files to each sheet of excel file&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69550315" target="_blank"&gt;Perl LWP::UserAgent parse response JSON&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69559891" target="_blank"&gt;perl regex to remove initial all-whitespace lines from a string: why does it work?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69532488" target="_blank"&gt;Why doesn't my XPath expression find a newly added node in an XML document?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69559859" target="_blank"&gt;Perl eval scope&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69542093" target="_blank"&gt;In Mojolicious how do I have a route override a static path?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/69540721" target="_blank"&gt;Is the use of "||" in a substring search prohibited?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6617058933828502709/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/dviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6617058933828502709"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6617058933828502709"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/dviii-stackoverflow-perl-report.html" title="(dviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#533 - Consulting work</title>
    <link rel="alternate" href="https://perlweekly.com/archive/533.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>I just had a meeting with a company in the UK that were looking for some consulting in Perl. After our conversation I felt that what they are interested in is not really where my expertise is, so I referred them to two other people who have a lot more experience in those areas. However I realized I don't know who is providing consulting or development service these days. So let me know. Who knows next time I might be able to refer the clients to you.</p>
<p>On the other hand I just found out that my client, where I do some refactoring on a web-application with some machine-learning backend (written in Python). is likely to move the project to their parent company. This probably means I'll be free for other projects to introduce test automation, CI, and refactoring code.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/533.html</id>
    <published>2021-10-11T10:00:00Z</published>
    <updated>2021-10-11T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Raku CI Bot Grant Report for September 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/2021-09-raku-ci-bot-grant-report"/>
  <id>tag:news.perlfoundation.org,2021-10-11:/post/2021-09-raku-ci-bot-grant-report</id>
  <published>2021-10-11T03:36:20</published>
  <updated>2021-10-11T03:36:20</updated>
  <summary>
  <![CDATA[
     Regarding his Raku CI bot grant, Patrick Böker writes: In September I: got the OBS interfacing component working, and got the GitHub interfacing component working. I hoped to manage to put a working system together this weekend. That didn't quite work out, but there is not much missing. So I'm hopeful to do so in the coming days. 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding his Raku CI bot grant, Patrick Böker writes:</p>

<hr />

<p>In September I:</p>

<ul>
<li>got the OBS interfacing component working, and</li>
<li>got the GitHub interfacing component working.</li>
</ul>

<p>I hoped to manage to put a working system together this weekend. (Currently 
only integrating GitHub and OBS, so no separate Website and no interactive 
features yet.) That didn't quite work out, but there is not much missing. So 
I'm hopeful to do so in the coming days.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-18902481429639061</id>
    <published>2021-10-10T00:41:00.000+02:00</published>
    <updated>2021-10-10T00:41:26.106+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxii) 7 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.049009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.049009&lt;/strong&gt; on 2021-10-06&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.049005 was 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.49&lt;/strong&gt; on 2021-10-02&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.49 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.15&lt;/strong&gt; on 2021-10-08&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.12 was 1 month, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.02&lt;/strong&gt; on 2021-10-06&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 5.00 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojo-mysql-1.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious and Async MySQL/MariaDB &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.24&lt;/strong&gt; on 2021-10-05&lt;/li&gt;  &lt;li&gt;Votes: 35&lt;/li&gt;  &lt;li&gt;Previous version: 1.23 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.54&lt;/strong&gt; on 2021-10-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.53 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Scalar-List-Utils-1.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sub::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Common Scalar and List utility subroutines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.60&lt;/strong&gt; on 2021-10-08&lt;/li&gt;  &lt;li&gt;Votes: 157&lt;/li&gt;  &lt;li&gt;Previous version: 1.59 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/18902481429639061/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxii-7-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/18902481429639061"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/18902481429639061"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/10/ccclxii-7-great-cpan-modules-released.html" title="(ccclxii) 7 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Immediate writing to file - flushing in Perl without buffering</title>
  <summary type="html"><![CDATA[<p>
When we say we read from a file or write to a file in Perl (or any other language for that matter), we don't actually access the file directly and immediately. Instead of that we what we really do is that we ask the operating system to read from the file or write to the file using a "system call". The Operating system (Linux, OSX, Windows, etc.) will do the work on our behalf, but it will try to optimize.
<p>
So it won't go and write to the disk immediately when we ask it to write a few characters. Instead of that it will keep the request in memory in a "buffer" and will write it to the disk later, when the buffer is full or when the file is closed.
<p>
]]></summary>
  <updated>2021-10-04T12:11:11Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/immediate-writing-to-files-flushing"/>  <id>https://perlmaven.com/immediate-writing-to-files-flushing</id>
  <content type="html"><![CDATA[<p>
When we say we read from a file or write to a file in Perl (or any other language for that matter), we don't actually access the file directly and immediately. Instead of that we what we really do is that we ask the operating system to read from the file or write to the file using a "system call". The Operating system (Linux, OSX, Windows, etc.) will do the work on our behalf, but it will try to optimize.
<p>
So it won't go and write to the disk immediately when we ask it to write a few characters. Instead of that it will keep the request in memory in a "buffer" and will write it to the disk later, when the buffer is full or when the file is closed.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#532 - Hacktoberfest 2021</title>
    <link rel="alternate" href="https://perlweekly.com/archive/532.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Have you joined the annual <a href="https://hacktoberfest.digitalocean.com">Hacktoberfest 2021</a> run by Digital Ocean?</p>
<p>If not then please join without any further delay. Hacktoberfest encourages participation in the open source community. You can earn a limited edition T-shirt by completing the challenge.</p>
<p>Not sure if you noticed, but this time they have made an interesting change by allowing open source maintainers to also take part in the contest. Ever since I started <a href="https://theweeklychallenge.org">The Weekly Challenge</a>, I have hardly found time to dedicate to Hacktoberfest. Last year I could only submit 6 PRs, enough to win the contest, since you only need to submit 4 PRs. This year, I am only taking part as the maintainer of an open source project - "The Weekly Challenge". The best year for me as contributor was 2019 when I submitted 160 PRs.</p>
<p>If you are looking for an open source project to contribute to then you can join "The Weekly Challenge" and win the competition by submitting 4 PRs in just one week.</p>
<p>How?</p>
<p>Well, you could submit 2 Perl and 2 Raku solutions to the weekly task. Just submit one solution per PR. I know it is cheating but a fair one in my humble opinion. Again, please don't limit yourself to just Perl and Raku. You are free to choose your favourite programming language. One more bit, please don't tie yourself to the current weekly challenge. You are free pick any past week challenges. Plenty of choices available. If you have any questions with regard to submitting a PR then please follow the <a href="https://theweeklychallenge.org/blog/how-to-contribute">blog post</a> that explains every detail. If you still have any questions then please get in touch with me. You can find my details on the page. I am also accepting PRs to another open source project - <a href="https://github.com/manwar/theweeklychallenge">The Weekly Challenge</a> website which is also open source code.</p>
<p>If you are a CPAN contributor then you could pick and choose your favourite distribution and contribute. However there is a catch, the distribution may or may not be part of the contest. Having said that, you can contribute to my <a href="https://metacpan.org/author/MANWAR">CPAN distributions</a> if you fancy. I promise, I will make the distribution to be part of the contest so that your PR will count towards the target. Just yesterday, I received a <a href="https://github.com/manwar/BankAccount-Validator-UK/pull/2">Pull Request</a> on one of my CPAN distributions, <a href="https://metacpan.org/dist/BankAccount-Validator-UK">BankAccount::Validator::UK</a>.</p>
<p>Happy Hacking !!!</p></div>
    </content>
    <id>https://perlweekly.com/archive/532.html</id>
    <published>2021-10-04T10:00:00Z</published>
    <updated>2021-10-04T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Sep 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/10/03/list-of-new-cpan-distributions-sep-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-PAUSE">Acme-CPANModules-PAUSE</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that interact with PAUSE, the Perl Authors Upload Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-PodOnly">Acme-PodOnly</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001001</td>
<td>0.001003</td>
<td>A distribution that only contains Pod</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-PGPLOT">Alien-PGPLOT</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Build and Install the PGPLOT library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-PortMidi">Alien-PortMidi</a></td>
<td><a href="https://metacpan.org/author/JBARRETT">JBARRETT</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Install the Mixxx fork of PortMidi</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Bitcoin-PaperWallet">App-Bitcoin-PaperWallet</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Generate printable cold storage of bitcoins</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-GhostWork">App-GhostWork</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Barcode Logger(When,Where,Who,What,toWhich,Why)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ShellCompleter-YtDlp">App-ShellCompleter-YtDlp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Shell completion for yt-dlp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-TimeZoneUtils">App-TimeZoneUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>An assortment of time-zone-related CLI utilities</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dumpbin">App-dumpbin</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>It's a PE Parser!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-nioscli">App-nioscli</a></td>
<td><a href="https://metacpan.org/author/SSMN">SSMN</a></td>
<td>0.001</td>
<td>0.001</td>
<td>CLI for NIOS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-Lingua-Word-ID-KBBI">ArrayData-Lingua-Word-ID-KBBI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>0.003</td>
<td>Indonesian words from Kamus Besar Bahasa Indonesia</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Meta-YtDlp">CLI-Meta-YtDlp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Metadata for yt-dlp CLI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chess-Plisco">Chess-Plisco</a></td>
<td><a href="https://metacpan.org/author/GUIDO">GUIDO</a></td>
<td>0.1</td>
<td>0.3</td>
<td>Representation of a chess position with move generator, legality checker etc.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Text">Data-Text</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Class to handle text in an OO way</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-MintingProfile-AlienBuild">Dist-Zilla-MintingProfile-AlienBuild</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.03</td>
<td>A minimal Dist::Zilla minting profile for Aliens</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-TableData">Dist-Zilla-Plugin-TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Plugin to use when building TableData::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-QUIP">Evo-QUIP</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>v0.1.1</td>
<td>Perl extension for QUIP (Quadratic Unconstrained Integer Program)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-FaceGenerator">Game-FaceGenerator</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1.02</td>
<td>a web app to combina random images into faces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-HexDescribe">Game-HexDescribe</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1</td>
<td>a web app to add random table driven data to map data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Game-TextMapper">Game-TextMapper</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>1.03</td>
<td>a web app to generate maps based on text files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Games-TabNoun">Games-TabNoun</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Select nouns from list of words, as fast as possible</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Geonode-Free-ProxyList">Geonode-Free-ProxyList</a></td>
<td><a href="https://metacpan.org/author/JULIODCS">JULIODCS</a></td>
<td>v0.0.1</td>
<td>v0.0.5</td>
<td>Get Free Geonode Proxies by using some filters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IO-Term-Status">IO-Term-Status</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>print log lines to a terminal with a running status bar</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-DJARE-Writer">JSON-DJARE-Writer</a></td>
<td><a href="https://metacpan.org/author/SARGIE">SARGIE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Write DJARE files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Media-Convert">Media-Convert</a></td>
<td><a href="https://metacpan.org/author/WOUTER">WOUTER</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>a Moose-based library to work with media assets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-TagHelpers-ContentBlock">Mojolicious-Plugin-TagHelpers-ContentBlock</a></td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>0.11</td>
<td>0.11</td>
<td>Mojolicious Plugin for Content Blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Text-Minify">Mojolicious-Plugin-Text-Minify</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>v0.2.2</td>
<td>remove HTML intendation on the fly</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-ClamAV-Client">Net-ClamAV-Client</a></td>
<td><a href="https://metacpan.org/author/BYTERAZOR">BYTERAZOR</a></td>
<td>0.1</td>
<td>0.1</td>
<td>A client class for the ClamAV clamd virus scanner daemon</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Netstack">Netstack</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Object-Util-Stringify">Object-Util-Stringify</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to object stringification</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Passwd-Keyring-Secret">Passwd-Keyring-Secret</a></td>
<td><a href="https://metacpan.org/author/UHLE">UHLE</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Password storage implementation using the GObject-based Secret library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Plugin-TableData">Pod-Weaver-Plugin-TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Plugin to use when building TableData::* distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pod-Weaver-Role-RequireFromBuild">Pod-Weaver-Role-RequireFromBuild</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Role to require() from Dist::Zilla build files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-FilterRules">RT-Extension-FilterRules</a></td>
<td><a href="https://metacpan.org/author/AJWOOD">AJWOOD</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Filter incoming tickets through rule sets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-TemplateTickets">RT-Extension-TemplateTickets</a></td>
<td><a href="https://metacpan.org/author/AJWOOD">AJWOOD</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Designate tickets as templates for new tickets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-JSON">Sah-Schemas-JSON</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Various schemas related to JSON</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Statistics-Descriptive-PDL">Statistics-Descriptive-PDL</a></td>
<td><a href="https://metacpan.org/author/SLAFFAN">SLAFFAN</a></td>
<td>0.02</td>
<td>0.12</td>
<td>A close to drop-in replacement for Statistics::Descriptive using PDL as the back-end</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Syntax-Operator-Zip">Syntax-Operator-Zip</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>infix operator to compose two lists together</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableData-CPAN-Release-Static-2021">TableData-CPAN-Release-Static-2021</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20210928.0</td>
<td>20210928.1</td>
<td>CPAN releases for the year 2021</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-CPAN-Release">TableDataBundle-CPAN-Release</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Collection of TableData:: modules that contain CPAN releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-CPAN-Release-Static-Older">TableDataBundle-CPAN-Release-Static-Older</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>20210927.0</td>
<td>20210927.0</td>
<td>Collection of TableData:: modules that contain older CPAN releases data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-AlienDev">Task-AlienDev</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Task bundle for Alien development</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-LWP-Distilled">Test-Mock-LWP-Distilled</a></td>
<td><a href="https://metacpan.org/author/SKINGTON">SKINGTON</a></td>
<td>0.001_01</td>
<td>1.000</td>
<td>make and use LWP mocks, distilled to their essence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-LWP-Distilled-JSON">Test-Mock-LWP-Distilled-JSON</a></td>
<td><a href="https://metacpan.org/author/SKINGTON">SKINGTON</a></td>
<td>0.001_01</td>
<td>1.000</td>
<td>JSON support for Test::Mock::LWP::Distilled</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Module-Features">Test-Module-Features</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Test feature set specifications and features declarations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-ANSI-Tabs">Text-ANSI-Tabs</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.06</td>
<td>0.07</td>
<td>Tab expand and unexpand with ANSI sequence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordLists-EN-Adjective">WordLists-EN-Adjective</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Collection of English adjectives</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordLists-EN-Noun">WordLists-EN-Noun</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Collection of English nouns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/autocroak">autocroak</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Replace functions with ones that succeed or die with lexical scope</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/fka9sxOL">fka9sxOL</a></td>
<td><a href="https://metacpan.org/author/SEGOMOS">SEGOMOS</a></td>
<td>0</td>
<td>0</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mb-JSON">mb-JSON</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>0.02</td>
<td>a simple JSON parser for multibyte string</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>51</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>28</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>17</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/SKINGTON">SKINGTON</a></td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/AJWOOD">AJWOOD</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/GUIDO">GUIDO</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SSMN">SSMN</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/AKRON">AKRON</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SLAFFAN">SLAFFAN</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JBARRETT">JBARRETT</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BYTERAZOR">BYTERAZOR</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SEGOMOS">SEGOMOS</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/SARGIE">SARGIE</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/WOUTER">WOUTER</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/UHLE">UHLE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/JULIODCS">JULIODCS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-PAUSE PERLANCAR 0.001 0.001 Modules that interact with PAUSE, the Perl Authors Upload Server Acme-PodOnly HAARG 0.001001 0.001003 A distribution that only contains Pod Alien-PGPLOT DJERIUS 0.01 0.01 Build and Install the PGPLOT library Alien-PortMidi JBARRETT 0.01 0.03 Install the Mixxx fork of PortMidi App-Bitcoin-PaperWallet BRTASTIC 1.00 1.01 Generate printable … <a href="https://perlancar.wordpress.com/2021/10/03/list-of-new-cpan-distributions-sep-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Sep 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1953</id>
    <published>2021-10-03T01:38:26Z</published>
    <updated>2021-10-03T01:38:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>delete an element from a hash</title>
  <summary type="html"><![CDATA[<p>
The <a href="https://metacpan.org/pod/perlfunc#delete-EXPR">delete</a> function will remove the given key from a hash.
<p>
]]></summary>
  <updated>2021-09-30T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/delete"/>  <id>https://perlmaven.com/delete</id>
  <content type="html"><![CDATA[<p>
The <a href="https://metacpan.org/pod/perlfunc#delete-EXPR">delete</a> function will remove the given key from a hash.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
