<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-03-30T11:46:58Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The Zen of Test Suites</title>
    <link rel="alternate" href="https://dev.to/ovid/the-zen-of-test-suites-304f" type="text/html"/>
    <content type="html">&lt;h1&gt;
  &lt;a href="#the-zen-of-application-test-suites" class="anchor"&gt;
  &lt;/a&gt;
  The Zen of Application Test Suites
&lt;/h1&gt;

&lt;p&gt;This is a long read, but it's an important one about one of the most common problems I see with my clients: they all have broken test suites. Learning testing is as much a skill as learning coding and this long article only scratches the surface.&lt;/p&gt;

&lt;p&gt;Much of what I describe below is generic and applies to test suites written in any programming language, despite many examples being written in Perl.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I often speak with developers who take a new job and they describe a Web site built out of a bunch of separate scripts scattered randomly through directories, lots of duplicated code, poor use of modules, with embedded SQL and printing HTTP headers and HTML directly. The developers shake their head in despair, but grudgingly admit an upside: job security. New features are time-consuming to add, changes are difficult to implement and may have wide-ranging side-effects, and reorganizing the codebase to have a proper separation of concerns, to make it cheaper and safer to hack on, will take lots and lots of time.&lt;/p&gt;

&lt;p&gt;A bunch of randomly scattered scripts, no separation of concerns, lots of duplicated code, poor use of modules, SQL embedded directly in them? Does this sound familiar? It's your standard test suite. We're horrified by this in the code, but don't bat an eyelash at the test suite.&lt;/p&gt;

&lt;p&gt;Part of this is because much, if not most, of the testing examples we find focus on testing distributions, not applications. If you were to look at the tests for my module &lt;a href="https://github.com/Ovid/dbix-class-easyfixture"&gt;DBIx::Class::EasyFixture&lt;/a&gt;, you'd see the following tests:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;00-load.t
basic.t
definitions.t
groups.t
load_multiple_fixtures.t
many_to_many.t
no_transactions.t
one_to_many.t
one_to_one.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;These tests were added one by one, as I added new features to &lt;code&gt;DBIx::Class::EasyFixture&lt;/code&gt; and each &lt;code&gt;*.t&lt;/code&gt; file represents (more or less) a different feature.&lt;/p&gt;

&lt;p&gt;For a small distribution, this isn't too bad because it's very easy to keep it all in your head. With only nine files, it's trivial to glance at them, or grep them, to figure out where the relevant tests are. Applications, however, are a different story. This is the number of test classes from the &lt;a href="https://taustation.space"&gt;Tau Station MMORPG&lt;/a&gt; test suite:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ find t/tests -name '*.pm' | wc -l
589
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;One codebase I worked on had close to a million lines of code with thousands of test scripts. You couldn't hold the codebase in your head, you're couldn't &lt;em&gt;glance&lt;/em&gt; at the tests to figure out what went where, nor was grepping necessarily going to tell you as tests for particular sections of code were often scattered around multiple test scripts.  And, of course, I regularly hear the lament I've heard at many shops with larger codebases: where are the tests for feature &lt;em&gt;X&lt;/em&gt;? Instead of just sitting down and writing code, the developers are hunting for the tests, wondering if there are any tests for the feature they're working on and, if not, trying to figure out where to put their new tests.&lt;/p&gt;

&lt;p&gt;Unfortunately, this disorganization is only the start of the problem.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#largescale-test-suites" class="anchor"&gt;
  &lt;/a&gt;
  Large-scale test suites
&lt;/h2&gt;

&lt;p&gt;I've worked with many companies with large test suites and they tend to share some common problems. I list them below in the order I try to address these problems (in other words, roughly easiest to hardest).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests often emit warnings&lt;/li&gt;
&lt;li&gt;Tests often fail ("oh, that sometimes fails. Ignore it.")&lt;/li&gt;
&lt;li&gt;There is little evidence of organization&lt;/li&gt;
&lt;li&gt;Much of the testing code is duplicated&lt;/li&gt;
&lt;li&gt;Testing fixtures are frequently not used (or poorly used)&lt;/li&gt;
&lt;li&gt;Code coverage is spotty&lt;/li&gt;
&lt;li&gt;They take far too long to run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Problems are one thing, but what features do we want to see in large-scale test suites?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests should be very easy to write and run&lt;/li&gt;
&lt;li&gt;They should run relatively quickly&lt;/li&gt;
&lt;li&gt;The order in which tests run should not matter&lt;/li&gt;
&lt;li&gt;Test output should be clean&lt;/li&gt;
&lt;li&gt;It should be obvious where to find tests for a particular piece of code&lt;/li&gt;
&lt;li&gt;Testing code should not be duplicated&lt;/li&gt;
&lt;li&gt;Code coverage should be able to analyze different aspects of the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at some of the problems and try to understand their impacts.  While it's good to push a test suite into a desirable state, often this is risky if the underlying problems are ignored. I will offer recommendations for resolving each problem, but it's important to understand that these are &lt;em&gt;recommendations&lt;/em&gt;. They may not apply to your situation.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tests-often-emit-warnings" class="anchor"&gt;
  &lt;/a&gt;
  Tests often emit warnings
&lt;/h3&gt;

&lt;p&gt;This seems rather innocuous. Sure, code emits warnings and we're used to that.  Unfortunately, we sometimes forget that warnings are &lt;em&gt;warnings&lt;/em&gt;: there might very well be something wrong.&lt;/p&gt;

&lt;p&gt;In my time at the BBC, one of the first things I did was try to clean up all of the warnings. One was a normal warning about use of an undefined variable, but it was unclear to me from the code if this should be an acceptable condition. Another developer looked at it with me and realized that the variable should never be undefined: this warning was masking a very serious bug in the code, but the particular condition was not explicitly tested. By rigorously eliminating all warnings, we found it easier to make our code more correct, and in those places where things were dodgy, comments were inserted into the code to explain why warnings were suppressed.  In short: the code became easier to maintain.&lt;/p&gt;

&lt;p&gt;Another issue with warnings in the test suite is that they condition developers to ignore warnings. We get so used to them that we stop reading them, even if something serious is going on (on a related note, I often listen to developers complain about stack traces, but a careful reading of a stack trace will often reveal the exact cause of the exception). New warnings crop up, warnings change, but developers conditioned to ignore them often overlook serious issues with their code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Eliminate all warnings from your test suite, but investigate each one to understand if it reflects a serious issue. Also, some tests will capture STDERR, effectively hiding warnings. Making warnings fatal while running tests can help to overcome this problem.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tests-often-fail-oh-that-sometimes-fails-ignore-it" class="anchor"&gt;
  &lt;/a&gt;
  Tests often fail ("oh, that sometimes fails. Ignore it.")
&lt;/h3&gt;

&lt;p&gt;For one client, their hour-long test suite had many failing tests. When I first started working on it, I had a developer walk me through all of the failures and explain why they failed and why they were hard to fix. Obviously this is a far more serious problem than warnings, but in the minds of the developers, they were under constant deadline pressures and as far as management was concerned, the test suite was a luxury to keep developers happy, not "serious code." As a result, developers learned to recognize these failures and consoled themselves with the thought that they understood the underlying issues.&lt;/p&gt;

&lt;p&gt;Of course, that's not really how it works. The developer explaining the test failures admitted that he didn't understand some of them and with longer test suites that routinely fail, more failures tend to crop up. Developers conditioned to accept failures tend not to notice them. They kick off the test suite, run and grab some coffee and later glance over the results to see if they look reasonable (that's assuming they run all of the tests, something which often stops happening at this point). What's worse, continuous integration tools are often built to accomodate this. From the Jenkin's &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin"&gt;xUnit Plugin page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Records xUnit tests&lt;/li&gt;
&lt;li&gt;Mark the build unstable or fail according to threshold values&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, there's an "acceptable" level of failure. What's the acceptable level of failure when you debit someone's credit card, or you're sending their medical records to someone, or you're writing embedded software that can't be easily updated?&lt;/p&gt;

&lt;p&gt;Dogmatism aside, you can make a case for acceptable levels of test failure, but you need to understand the risks and be prepared to accept them. However, for the purposes of this document, we'll assume that the acceptable level of failure is zero.&lt;/p&gt;

&lt;p&gt;If you absolutely cannot fix a particular failure, you should at least mark the test as &lt;code&gt;TODO&lt;/code&gt; so that the test suite can pass. Not only does this help to guide you to a clean test suite, the &lt;code&gt;TODO&lt;/code&gt; reason is generally embedded in the test, giving the next developer a clue to what's going on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Do not allow any failing tests. If tests fail which do not impact the correctness of the application (such as documentation or "coding style" tests), they should be separated from your regular tests in some manner and your systems should recognize that it's OK for them to fail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-little-evidence-of-organization" class="anchor"&gt;
  &lt;/a&gt;
  There is little evidence of organization
&lt;/h3&gt;

&lt;p&gt;As mentioned previously, a common lament amongst developers is the difficulty of finding tests for the code they're working on. Consider the case of &lt;a href="https://metacpan.org/release/HTML-TokeParser-Simple"&gt;HTML::TokeParser::Simple&lt;/a&gt;.  The library is organized like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lib/
└── HTML
    └── TokeParser
        ├── Simple
        │   ├── Token
        │   │   ├── Comment.pm
        │   │   ├── Declaration.pm
        │   │   ├── ProcessInstruction.pm
        │   │   ├── Tag
        │   │   │   ├── End.pm
        │   │   │   └── Start.pm
        │   │   ├── Tag.pm
        │   │   └── Text.pm
        │   └── Token.pm
        └── Simple.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There's a class in there named &lt;code&gt;HTML::TokeParser::Simple::Token::ProcessInstruction&lt;/code&gt;. Where, in the following tests, would you find the tests for process instructions?&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t
├── constructor.t
├── get_tag.t
├── get_token.t
├── internals.t
└── munge_html.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You might think it's in the &lt;code&gt;get_token.t&lt;/code&gt; test, but are you sure? And what's that strange &lt;code&gt;munge_html.t&lt;/code&gt; test? Or the &lt;code&gt;internals.t&lt;/code&gt; test? As mentioned, for a small library, this really isn't too bad. However, what if we reorganized our tests to reflect our library hierarchy?&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t/
└── tests/
    └── html/
        └── tokeparser/
            ├── simple/
            │   ├── token/
            │   │   ├── comment.t
            │   │   ├── declaration.t
            │   │   ├── tag/
            │   │   │   ├── end.t
            │   │   │   └── start.t
            │   │   ├── tag.t
            │   │   └── text.t
            │   └── token.t
            └── simple.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It's clear that the tests for &lt;code&gt;HTML::TokeParser::Simple::Token::Tag::Start&lt;/code&gt; are in &lt;code&gt;t/tests/html/tokeparser/simple/token/tag/start.t&lt;/code&gt;. And you can see easily that there is no file for &lt;code&gt;processinstruction.t&lt;/code&gt;. This test organization not only makes it easy to find where your tests are, it's also easy to program your editor to automatically switch between the code and the tests for the code. For large test suites, this saves a huge amount of time.  When I reorganized the test suite of the BBC's central metadata repository, &lt;a href="http://www.bbc.co.uk/blogs/bbcinternet/2009/02/what_is_pips.html"&gt;PIPs&lt;/a&gt;, I followed a similar pattern and it made our life much easier.&lt;/p&gt;

&lt;p&gt;(&lt;strong&gt;Note&lt;/strong&gt;: the comment about programming your editor is important. Effective use of your editor/IDE is one of the most powerful tools in a developer's toolbox.)&lt;/p&gt;

&lt;p&gt;Of course, your test suite could easily be more complicated and your top-level directories inside of your test directory may be structured differently:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t
├── unit/
├── integration/
├── api/
└── web/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Organize your test files to have a predictable, discoverable structure. The test suite should be much easier to work with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#much-of-the-testing-code-is-duplicated" class="anchor"&gt;
  &lt;/a&gt;
  Much of the testing code is duplicated
&lt;/h3&gt;

&lt;p&gt;We're aghast that people routinely cut-n-paste their application code, but we don't even notice when people do this in their test code. More than once I've worked on a test suite with a significant logic change and I've had to find this duplicated code and either change it many places or try to refactor it so that it's in a single place and then change it. We already know why duplicated code is bad, I'm unsure why we tolerate this in test suites.&lt;/p&gt;

&lt;p&gt;Much of my work in tests has been to reduce this duplication. For example, many test scripts list the same set of modules at the top. I did a heuristic analysis of tests on the CPAN and chose the most popular testing modules and that allowed me to change this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Differences&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Deep&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Warn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;More&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Most&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can easily use similar strategies to bundle up common testing modules into a single testing module that all of your tests use. Less boilerplate and you can easily dive into testing.&lt;/p&gt;

&lt;p&gt;Or as a more egregious example, I often see something like this (a silly example just for illustration purposes):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;set_up_some_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr1 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr2 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr3 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr4 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr5 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then a few lines later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;set_up_some_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$new_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$new_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr1 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr2 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr3 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr4 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;attr5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attr5 works&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then a few lines later, the same thing ...&lt;/p&gt;

&lt;p&gt;And in another test file, the same thing ...&lt;/p&gt;

&lt;p&gt;Put that in its own test function and wrap those attribute tests in a loop. If this pattern is repeated in different test files, put it in a custom test library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;test_fetching_by_id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$tests&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@$tests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$attribute&lt;/span&gt;&lt;span class="s2"&gt; works for &lt;/span&gt;&lt;span class="si"&gt;$class&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then you call it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@id_tests&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected3&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected4&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$expected5&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;tests&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected1&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected2&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected3&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected4&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;attr5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$new_expected5&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;]},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@id_tests&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nv"&gt;test_fetching_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
       &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="nv"&gt;$test&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nv"&gt;$tests&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a cleanly refactored data-driven approach. By not repeating yourself, if you need to test new attributes, you can just add an extra line to the data structures and the code remains the same. Or, if you need to change the logic, you only have one spot in your code where this is done. Once a developer understands the &lt;code&gt;test_fetching_by_id()&lt;/code&gt; function, they can reuse this understanding in multiple places. Further, it makes it easier to find patterns in your code and any competent programmer is always on the lookout for patterns because those are signposts leading to cleaner designs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Keep your test code as clean as your application code.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#testing-fixtures-are-frequently-not-used-or-poorly-used" class="anchor"&gt;
  &lt;/a&gt;
  Testing fixtures are frequently not used (or poorly used)
&lt;/h3&gt;

&lt;p&gt;One difference between your application code and the test suite is in an application, we often have no idea what the data will be and we try to have a clean separation of data and code.&lt;/p&gt;

&lt;p&gt;In your test suite, we also want a clean separation of data and code (in my experience, this is very hit-or-miss), but we often &lt;em&gt;need&lt;/em&gt; to know the data we have. We set up data to run tests against to ensure that we can test various conditions. Can we give a customer a birthday discount if they were born on February 29th? Can a customer with an overdue library book check out another?  If our employee number is no longer in the database, is our code properly deleted, along with the backups and the git history erased? (kidding!)&lt;/p&gt;

&lt;p&gt;When we set up the data for these known conditions under which to test, we call the data a &lt;a href="http://en.wikipedia.org/wiki/Test_fixture"&gt;test fixture&lt;/a&gt;.  Test fixtures, when properly designed, allow us generate clean, understandable tests and make it easy to write tests for unusual conditions that may otherwise be hard to analyze.&lt;/p&gt;

&lt;p&gt;There are several common anti-patterns I see in fixtures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to set up and use&lt;/li&gt;
&lt;li&gt;Adding them to the database and not rolling them back&lt;/li&gt;
&lt;li&gt;Loading all your test data at once with no granularity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reviewing various fixture modules on the CPAN and for clients I have worked with, much of the above routinely holds true. On top of that, documentation is often rather sparse or non-existent. Here's a (pseudo-code) example of an almost undocumented fixture system for one client I worked with and it exemplified common issues in this area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;load_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;client&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$client_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;datasets&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sx"&gt;qw/customers orders items order_items/&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This had several problems, all of which could be easily corrected &lt;em&gt;as code&lt;/em&gt;, but they built a test suite around these problems and had backed themselves into a corner, making their test suite dependent on bad behavior.&lt;/p&gt;

&lt;p&gt;The business case is that my client had a product serving multiple customers and each customer would have multiple separate databases. In the above, client &lt;em&gt;$client_id&lt;/em&gt; connects to their sales database and we load several test datasets and run tests against them. However, loading of data was not done in a transaction, meaning that there was no isolation between different test cases in the same process. More than once I caught issues where running an individual test case would often fail because it depended on data loaded by a different test case, but it wasn't always clear which test cases were coupled with which.&lt;/p&gt;

&lt;p&gt;Another issue is that fixtures were not fine-tuned to address particular test cases. Instead, if you loaded "customers" or "referrals", you got &lt;em&gt;all&lt;/em&gt; of them in the database. Do you need a database with a single customer with a single order and only one order item on it to test that obscure bug that occurs when a client first uses your software? There really wasn't any clean way of doing that; data was loaded in an "all or nothing" context. Even if you violated the paradigm and tried to create fine-tuned fixtures, it was very hard to write them due to the obscure, undocumented format needed to craft the data files for them.&lt;/p&gt;

&lt;p&gt;Because transactions were not used and changes could not be rolled back, each &lt;code&gt;*.t&lt;/code&gt; file would rebuild its own test database, a very slow process. Further, due to lack of documentation about the fixtures, it was often difficult to figure out which combination of fixtures to load to test a given feature. Part of this is simply due to the complex nature of the business rules, but the core issues stemmed from a poor understanding of fixtures. This client now has multiple large, slow test suites, spread across multiple repositories, all of which constantly tear down and set up databases and load large amounts of data. The test suites are both slow and fragile. The time and expense to fix this problem is considerable due to how long they've pushed forward with this substandard setup.&lt;/p&gt;

&lt;p&gt;What you generally want is the ability to easily create understandable fixtures which are loaded in a transaction, tests are run, and then changes are rolled back.  The fixtures need to be fine-grained so you can tune them for a particular test case.&lt;/p&gt;

&lt;p&gt;One attempt I've made to fix this situation is releasing &lt;a href="http://search.cpan.org/dist/DBIx-Class-EasyFixture/lib/DBIx/Class/EasyFixture.pm"&gt;DBIx::Class::EasyFixture&lt;/a&gt;, along with &lt;a href="http://search.cpan.org/dist/DBIx-Class-EasyFixture/lib/DBIx/Class/EasyFixture/Tutorial.pm"&gt;a tutorial&lt;/a&gt;.  It does rely on &lt;code&gt;DBIx::Class&lt;/code&gt;, the most popular ORM for Perl. This will likely make it unsuitable for some use cases.&lt;/p&gt;

&lt;p&gt;Using fixtures is now very simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fixtures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;DBIx::Class::&lt;/span&gt;&lt;span class="nv"&gt;EasyFixture&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$schema&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$fixtures&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;load&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;customer_with_order_without_items&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="c1"&gt;# run your tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the customer's code, we could satisfy the different database requirements by passing in different schemas. Other (well-documented) solutions, particularly those which are pure &lt;code&gt;DBI&lt;/code&gt; based are welcome in this area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Use fine-grained, well-documented fixtures which are easy to create and easy to clean up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-coverage-is-poorly-understood" class="anchor"&gt;
  &lt;/a&gt;
  Code coverage is poorly understood
&lt;/h3&gt;

&lt;p&gt;Consider the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;float recip(float number) {
    return 1.0 / number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a sample test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;assert recip(2.0) returns .5;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You now have 100% code coverage of that function.&lt;/p&gt;

&lt;p&gt;For a statically typed language, I'm probably going to be moderately comfortable with that test. Alas, for dynamically typed languages we're fooling ourselves. An equivalent function in Perl will pass that test if we use &lt;code&gt;recip("2 apples")&lt;/code&gt; as the argument. And what happens if we pass a file handle? And would a Unicode number work? What happens if we pass no arguments?  Perl is powerful and lets us write code quickly, but there's a price: it expects us to know what we're doing and passing unexpected kinds of data is a very common source of errors, but one that 100% code coverage will never (no pun intended) uncover. This can lead to false confidence.&lt;/p&gt;

&lt;p&gt;To work around false confidence in your code, always assume that you write applications to create things and you write tests to destroy them. Testing is, and should be, an act of violence. If you're not breaking anything with your tests, you're probably doing it wrong.&lt;/p&gt;

&lt;p&gt;Or what if you have that code in a huge test suite, but it's dead code? We tend to blindly run code coverage over our entire test suite, never considering whether or not we're testing dead code. This is because we slop our unit, integration, API and other tests all together.&lt;/p&gt;

&lt;p&gt;Or consider the following test case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;test_forum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$test&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;test_website&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$pass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/forum&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;follow_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Off Topic&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$site&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;post_ok&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;What is this?&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;body&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a test&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;We should be able to post to the forum&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Devel::Cover&lt;/code&gt; doesn't know which code is test code and which is not.  &lt;code&gt;Devel::Cover&lt;/code&gt; merely tells you if your application code was exercised in your tests. &lt;a href="http://search.cpan.org/dist/Devel-Cover/lib/Devel/Cover.pm#UNCOVERABLE_CRITERIA"&gt;You can annotate your code with "uncoverable" directives&lt;/a&gt; to tell &lt;code&gt;Devel::Cover&lt;/code&gt; to ignore the following code, but that potentially means sprinkling your code with annotations all over the place.&lt;/p&gt;

&lt;p&gt;There are multiple strategies to deal with this. One of the simplest is to merely run your code coverage tools over the public-facing portions of your code, such as web or API tests. If you find uncovered code, you either have code that is not fully tested (in the sense that you don't know if your API can really use that code) or, if you cannot write an API test to reach that code, investigate if it is dead code.&lt;/p&gt;

&lt;p&gt;You can do this by grouping your tests into subdirectories:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t/
|--api/
|--integration/
`--unit/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Alternatively, if you use &lt;code&gt;Test::Class::Moose&lt;/code&gt;, you can tag your tests and only run coverage over tests including the tags you wish to test:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;perl&lt;br&gt;
My::Test::Class::Moose-&amp;gt;new({&lt;br&gt;
  include_tags =&amp;gt; [qw/api/],&lt;br&gt;
})-&amp;gt;runtests;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you start tagging your tests by the subsystems they are testing, you can then start running code coverage on specific subsystems to determine which ones are poorly tested.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Run coverage over public-facing code and on different subsystems to find poor coverage.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#they-take-far-too-long-to-run" class="anchor"&gt;
  &lt;/a&gt;
  They take far too long to run
&lt;/h3&gt;

&lt;p&gt;The problem with long-running test suites is well known, but it's worth covering this again here. These are problems that others have discussed and that I have also personally experienced many times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ02lHaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/JNfyxoo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ02lHaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.imgur.com/JNfyxoo.png" alt="Perl's version of waiting for a compile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With apologies to &lt;a href="http://xkcd.com/303/"&gt;XKCD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the best case scenario for developers who always run that long-running test suite, expensive developer time is wasted while the test suite is running.  When they launch that hour-long (or more) test suite, they frequently take a break, talk to (read: interrupt) other developers, check their Facebook, or do any number of things which equate to "not writing software." Yes, some of those things involve meetings or research, but meetings don't conveniently schedule themselves when we run tests and for mature products (those which are more likely to have long-running test suites), there's often not that much research we really need to do.&lt;/p&gt;

&lt;p&gt;Here are some of the issues with long-running test suites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expensive developer time is wasted while the test suite runs&lt;/li&gt;
&lt;li&gt;Developers often don't run the entire test suite&lt;/li&gt;
&lt;li&gt;Expensive code coverage is not generated as a result&lt;/li&gt;
&lt;li&gt;Code is fragile as a result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I find particularly curious is that we accept this state of affairs. Even a back-of-the-envelope calculation can quickly show significant productivity benefits that will pay off in the long run by taking care of our test suite.  &lt;a href="http://www.slideshare.net/Ovid/turbo-charged-test-suites-presentation"&gt;I once reduced a BBC test suite's run time from one hour and twenty minutes down to twelve minutes&lt;/a&gt; (&lt;em&gt;Note: today I use a saner approach that results in similar or greater performance benefits&lt;/em&gt;).  We had six developers on that team. When the test suite took over an hour to run, they often didn't run the test suite. They would run tests on their section of code and push their code when they were comfortable with it. This led to other developers finding buggy code and wasting time trying to figure out how they had broken it when, in fact, someone else broke the code.&lt;/p&gt;

&lt;p&gt;But let's assume each developer was running the test suite at least once a day (I'm careful about testing and often ran mine twice a day). By cutting test suite run time by over an hour, we reclaimed a &lt;em&gt;full day&lt;/em&gt; of developer productivity every day! Even if it takes a developer a month to increase perfomance by that amount it pays for itself many times over very quickly.  Why would you not do this?  As a business owner, wouldn't you want your developers to save time on their test suite so they can create features faster for you?&lt;/p&gt;

&lt;p&gt;There are several reasons why this is difficult. Tasking a developer with a block of time to speed up a test suite means the developer is not creating user-visible features during that time. For larger test suites, it's often impossible to know in advance just how much time you can save or how long it will take you to reach your goal. In most companies I've worked with, the people who can make the decision to speed up the test suite are often not the people feeling the pain. Productivity and quality decrease slowly over time, leading to the &lt;a href="http://en.wikipedia.org/wiki/Boiling_frog"&gt;boiling frog problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What's worse: in order to speed up your test suite without affecting behavior, the test suite often has to be "fixed" (eliminating warnings, failures, and reducing duplication) to ensure that no behavior has been changed during the refactor.&lt;/p&gt;

&lt;p&gt;Finally, some developers simply don't have the background necessary to implement performance optimizations. While performance profiles such as Perl's &lt;a href="http://search.cpan.org/dist/Devel-NYTProf/lib/Devel/NYTProf.pm"&gt;Devel::NYTProf&lt;/a&gt; can easily point out problem areas in the code, it's not always clear how to overcome the discovered limitations.&lt;/p&gt;

&lt;p&gt;The single biggest factor in poor test suite performance for applications is frequently I/O. In particular, working with the database tends to be a bottleneck and there's only so much database tuning that can be done. After you've profiled your SQL and optimized it, several database-related optimizations which can be considered are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using transactions to clean up your database rather than rebuilding the database&lt;/li&gt;
&lt;li&gt;Only connect to the database once per test suite (hard when you're using a separate process per test file)&lt;/li&gt;
&lt;li&gt;If you must rebuild the database, maintain a pool of test databases and assign them as needed, rebuilding used ones in the background&lt;/li&gt;
&lt;li&gt;Use smaller database fixtures instead of loading everything at once&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After you've done all you can to improve your database access, you may find that your test suite is "fast enough", but if you wish to go further, there are several steps you can take.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#use-testaggregate" class="anchor"&gt;
  &lt;/a&gt;
  Use Test::Aggregate
&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://search.cpan.org/dist/Test-Aggregate/"&gt;Test::Aggregate&lt;/a&gt; can often double the speed of your test suite (I've had it speed up test suites by around 65%). It does this by taking your separate &lt;code&gt;*.t&lt;/code&gt; files and runs them in a single process. Not all tests can be run this way (tests that munge global state without cleaning up are prime examples), but it's the easiest way to get a quick boost to test suite performance.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#aggressively-search-for-and-remove-duplicated-tests" class="anchor"&gt;
  &lt;/a&gt;
  Aggressively search for and remove duplicated tests.
&lt;/h4&gt;

&lt;p&gt;For poorly organized test suites, developers sometimes make the mistake of putting tests for something in a new &lt;code&gt;*.t&lt;/code&gt; file or add them to a different &lt;code&gt;*.t&lt;/code&gt; file, even if related tests already exist. This strategy can be time-consuming and often does not result in quick wins.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#run-performance-profiling" class="anchor"&gt;
  &lt;/a&gt;
  Run Performance Profiling
&lt;/h4&gt;

&lt;p&gt;For one test suite, I found that we were using a pure Perl implementation of JSON. As the test suite used JSON extensively, switching to &lt;a href="http://search.cpan.org/dist/JSON-XS/XS.pm"&gt;JSON::XS&lt;/a&gt; gave us a nice performance boost. We may not have noticed that if we hadn't been profiling our code with &lt;code&gt;Devel::NYTProf&lt;/code&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#look-for-code-with-global-effects" class="anchor"&gt;
  &lt;/a&gt;
  Look for code with "global" effects
&lt;/h4&gt;

&lt;p&gt;On one test suite, I ensured that &lt;code&gt;Universal::isa&lt;/code&gt; and &lt;code&gt;Universal::can&lt;/code&gt; cannot be loaded. It was a quick fix and sped up the test suite by 2% (several small accumulations of improvements can add up quickly).&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#inline-hot-functions" class="anchor"&gt;
  &lt;/a&gt;
  Inline "hot" functions.
&lt;/h4&gt;

&lt;p&gt;Consider the following code which runs in about 3.2 seconds on my computer:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/env perl
use strict;
use warnings;
no warnings 'recursion';

for my $i ( 1 .. 40 ) {
    for my $j ( 1 .. $i**2 ) {
        my $y = factorial($j);
    }
}

sub factorial {
    my $num = shift;
    return 1 if $num &amp;lt;= 1;
    return $num * factorial($num - 1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;By rewriting the recursive function as a loop, the code takes about .87 seconds:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub factorial {
    my $num = shift;
    return 1 if $num &amp;lt;= 1;
    $num *= $_ for 2 .. $num - 1;
    return $num;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;By inlining the calculation, the code completes in .69 seconds:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for my $i ( 1 .. 40 ) {
    for my $j ( 1 .. $i**2 ) {
        my $y = $j;
        if ( $y &amp;gt; 1 ) {
            $y *= $_ for 2 .. $y - 1;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In other words, in our trivial example, the inlined behavior is roughly 20% faster than the iterative function and 80% faster than the recursive function.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#recompile-your-perl" class="anchor"&gt;
  &lt;/a&gt;
  Recompile your Perl
&lt;/h4&gt;

&lt;p&gt;You may wish to recompile your Perl to gain a performance improvement. Many Linux distributions ship with a threaded Perl by default. Depending on the version of Perl you ship with, you can gain performance improvements of up to 30% by recompiling without threads. Of course, if you use threads, you'll feel very stupid for doing this. However, if you don't make heavy use of threads, switching to a forking model for the threaded code may make the recompile worth it. Naturally, you'll need to heavily benchmark your code (preferably under production-like loads) to understand the trade-offs here.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#preload-modules" class="anchor"&gt;
  &lt;/a&gt;
  Preload modules
&lt;/h4&gt;

&lt;p&gt;If your codebase makes heavy use of modules that are slow to load, such as &lt;code&gt;Moose&lt;/code&gt;, &lt;code&gt;Catalyst&lt;/code&gt;, &lt;code&gt;DBIx::Class&lt;/code&gt; and others, preloading them might help.  &lt;a href="http://search.cpan.org/~miyagawa/forkprove-v0.4.9/script/forkprove"&gt;forkprove&lt;/a&gt; is a utility written by Tatsuhiko Miyagawa that allows you to preload slow-loading modules and then forks off multiple processes to run your tests.  Using this tool, &lt;a href="http://blogs.perl.org/users/ovid/2013/12/merry-christmas-parallel-testing-with-testclassmoose-has-arrived.html"&gt;I reduced one sample test suite's run time from 12 minutes to about a minute&lt;/a&gt;.  Unfortunately, &lt;code&gt;forkprove&lt;/code&gt; doesn't allow schedules, a key component often needed for larger test suites. I'll explain that in the next section.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#parallel-tests" class="anchor"&gt;
  &lt;/a&gt;
  Parallel tests
&lt;/h4&gt;

&lt;p&gt;Running tests in parallel is tricky. Some tests simply &lt;em&gt;can't&lt;/em&gt; be run with other tests. Usually these are tests which alter global state in some manner that other processes will pick up, or might cause resource starvation of some kind.&lt;/p&gt;

&lt;p&gt;Or some tests &lt;em&gt;can&lt;/em&gt; be run in parallel with other tests, but if several tests are updating the same records in the database at the same time, locking behavior might slow down the tests considerably.&lt;/p&gt;

&lt;p&gt;Or maybe you're running 4 jobs, but all of your slowest tests are grouped in the same job: not good.&lt;/p&gt;

&lt;p&gt;To deal with this, you can create a schedule that assigns different tests to different jobs, based on a set of criteria, and then puts tests which cannot run in parallel in a single job that runs after the others have completed.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="http://search.cpan.org/dist/Test-Harness/lib/TAP/Parser/Scheduler.pm"&gt;TAP::Parser::Scheduler&lt;/a&gt; to create an effective parallel testing setup. You can use this with &lt;code&gt;TAP::Parser::Multiplexer&lt;/code&gt; to create your parallel tests. Unfortunately, as of this writing there's a bug in the Multiplexer whereby it uses &lt;code&gt;select&lt;/code&gt; in a loop to read the parser output. If one parser blocks, none of the other output is read. Further, the schedule must be created prior to loading your test code, meaning that if your tests would prefer a different schedule, you're out of luck. Also, &lt;code&gt;make test&lt;/code&gt; currently doesn't handle this well. There is work being done by David Golden to alleviate this problem.&lt;/p&gt;

&lt;p&gt;My preferred solution is to use &lt;a href="http://search.cpan.org/dist/Test-Class-Moose/"&gt;Test::Class::Moose&lt;/a&gt;. It has built-in parallel testing and writing schedules is very easy. Further, different test cases can simply use a &lt;code&gt;Tags(noparallel)&lt;/code&gt; attribute to ensure that they're run sequentially after the parallel tests.&lt;/p&gt;

&lt;p&gt;Aside from the regular benefits of &lt;code&gt;Test::Class::Moose&lt;/code&gt;, an interesting benefit of this module is that it loads all of your test and application code into a single process and &lt;em&gt;then&lt;/em&gt; forks off subprocesses. As a result, your code is loaded once and only once. Alternate strategies which try to fork before loading your code might still cause the code to be loaded multiple times.&lt;/p&gt;

&lt;p&gt;I have used this strategy to reduce a &lt;a href="http://blogs.perl.org/users/ovid/2013/12/merry-christmas-parallel-testing-with-testclassmoose-has-arrived.html"&gt;12 minute test suite to 30 seconds&lt;/a&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#distributed-tests" class="anchor"&gt;
  &lt;/a&gt;
  Distributed tests
&lt;/h4&gt;

&lt;p&gt;Though I haven't used this module, Alex Vandiver has written &lt;a href="http://search.cpan.org/dist/TAP-Harness-Remote/lib/TAP/Harness/Remote.pm"&gt;TAP::Harness::Remote&lt;/a&gt;.  This module allows you to rsync directory trees to multiple servers and run tests on those servers. Obviously, this requires multiple servers.&lt;/p&gt;

&lt;p&gt;If you want to roll your own version of this, I've also released &lt;a href="http://search.cpan.org/dist/TAP-Stream/"&gt;TAP::Stream&lt;/a&gt;, a module that allows you to take streams (the text, actually) of TAP from multiple sources and combine them into a single TAP document.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#develcoverxcovered" class="anchor"&gt;
  &lt;/a&gt;
  Devel::CoverX::Covered
&lt;/h4&gt;

&lt;p&gt;There is yet another interesting strategy: only run tests that exercise the code that you're changing. Johan Lindström wrote &lt;a href="http://search.cpan.org/dist/Devel-CoverX-Covered/"&gt;Devel::CoverX::Covered&lt;/a&gt;.  This module is used in conjunction with Paul Johnson's &lt;a href="http://search.cpan.org/dist/Devel-Cover/"&gt;Devel::Cover&lt;/a&gt; to identify all the places in your tests which cover a particular piece of code. In the past, I've written tools for vim to read this data and only run relevant tests. This is a generally useful approach, but there are a couple of pitfalls.&lt;/p&gt;

&lt;p&gt;First, if your test suite takes a long time to run, it will take much, much longer to run with &lt;code&gt;Devel::Cover&lt;/code&gt;. As a result, I recommend that this be used with a special nightly "cover build" and have the results synched back to the developers.&lt;/p&gt;

&lt;p&gt;Second, when changing code, it's easy to change which tests cover your code, leading to times when this technique won't cover your actual changes thoroughly. In practice, this hasn't been a problem for me, but I've not used it enough to say that with confidence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: Don't settle for slow test suites. Pick a goal and work to achieving that goal (it's easy to keep optimizing for too long and start getting diminishing marginal returns).&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#testclassmoose" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/houseabsolute/test-class-moose"&gt;Test::Class::Moose&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;If you start creating a large Web site, do you start writing a bunch of individual scripts, each designed to handle one URL and each handling their own database access and printing their output directly to STDOUT? Of course not. Today, professional developers reach for Sinatra, Seaside, Catalyst, Ruby on Rails or other Web frameworks. They take a bit more time to set up and configure, but we know they generally save more time in the long run. Why wouldn't you do that with your test suite?&lt;/p&gt;

&lt;p&gt;If you're using Perl, many of the problems listed in this document can be avoided by switching to &lt;code&gt;Test::Class::Moose&lt;/code&gt;. This is a testing framework I designed to make it very easy to test applications. Once you understand it, it's actually easy to use for testing libraries, but it really shines for application testing.&lt;/p&gt;

&lt;p&gt;Note that I now regret putting &lt;code&gt;Moose&lt;/code&gt; in the name. &lt;code&gt;Test::Class::Moose&lt;/code&gt; is a rewrite of &lt;code&gt;Test::Class&lt;/code&gt; using &lt;code&gt;Moose&lt;/code&gt;, but it's &lt;em&gt;not&lt;/em&gt; limited to testing &lt;code&gt;Moose&lt;/code&gt; applications. It uses &lt;code&gt;Moose&lt;/code&gt; because internally it relies on the &lt;code&gt;Moose&lt;/code&gt; meta-object protocol for introspection.&lt;/p&gt;

&lt;p&gt;Out of the box you get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Parallel tests (which optionally accept a custom schedule)&lt;/li&gt;
&lt;li&gt;Tagging tests (slice and dice your test suite!)&lt;/li&gt;
&lt;li&gt;Test inheritance (xUnit for the win!)&lt;/li&gt;
&lt;li&gt;Full Moose support&lt;/li&gt;
&lt;li&gt;Test control methods (startup, setup, teardown, shutdown)&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;All the testing functions and behavior from &lt;code&gt;Test::Most&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn about xUnit testing in Perl, you may wish to read a five-part tutorial I published at Modern Perl Books:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/organizing-test-suites-with-testclass.html"&gt;Organizing test suites with Test::Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/reusing-test-code-with-testclass.html"&gt;Reusing test code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/making-your-testing-life-easier.html"&gt;Making your testing life easier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/using-test-control-methods-with-testclass.html"&gt;Using test control methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.modernperlbooks.com/mt/2009/03/working-with-testclass-test-suites.html"&gt;Working with Test::Class test suites&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That tutorial is slightly out of date (I wrote it in 2009), but it explains effective use of &lt;code&gt;Test::Class&lt;/code&gt; and some common anti-patterns when using it.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#about-the-author" class="anchor"&gt;
  &lt;/a&gt;
  About The Author
&lt;/h1&gt;

&lt;p&gt;For those of you who may be reading this and are not familiar with me, I am Curtis "Ovid" Poe. I authored the test harness that ships with the Perl programming language. I wrote the well-reviewed book &lt;a href="http://www.amazon.com/Beginning-Perl-Curtis-Poe/dp/1118013840/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1395074590&amp;amp;sr=1-1&amp;amp;keywords=beginning+perl+curtis+poe&amp;amp;tag=overse-20"&gt;Beginning Perl&lt;/a&gt; and am one of the authors of &lt;a href="http://www.amazon.com/Perl-Hacks-Programming-Debugging-Surviving/dp/0596526741/"&gt;Perl Hacks&lt;/a&gt; (how's that for a redundant title?). I also sit on &lt;a href="http://www.perlfoundation.org/who_s_who"&gt;the Board of Directors of the Perl Foundation&lt;/a&gt; and am one of the people behind &lt;a href="http://www.allaroundtheworld.fr/"&gt;All Around The World&lt;/a&gt;, a company offering software development, consulting and training.&lt;/p&gt;

&lt;p&gt;If you'd like to hire me to fix your test suite or write software for you, drop me a line at &lt;a href="//mailto:ovid@allaroundtheworld.fr"&gt;ovid@allaroundtheworld.fr&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Ovid</name>
    </author>
    <id>https://dev.to/ovid/the-zen-of-test-suites-304f</id>
    <published>2021-03-30T07:23:47Z</published>
    <updated>2021-03-30T07:23:47Z</updated>
    <category term="testing"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Python Zen vs Perl TMTOWTDI</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/python-zen-vs-perl-tmtowtdi-j53" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl has been said to be a writing-only language for over a decade(Although In fact, it's a lie.).</p>

<p>Only Python Zen was evaluated.</p>

<p>Age has moved forward. </p>

<p>People want diversity and inclusion.</p>

<p>Perl TMTOWTDI means "There's more than one way to do it".</p>

<p>This message contains the philosophy of diversity and inclusion.</p>

<p>I hope the time will come when Perl's philosophy will be evaluated fairly.</p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/python-zen-vs-perl-tmtowtdi-j53</id>
    <published>2021-03-30T06:09:37Z</published>
    <updated>2021-03-30T06:09:37Z</updated>
    <category term="perl"/>
    <category term="python"/>
  </entry>
  <entry>
    <title>Perl's SPVM is similar to Python's Cython.</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/perl-s-spvm-is-similar-to-python-s-cython-74d" type="text/html"/>
    <content type="html">&lt;p&gt;I thought about how to explain SPVM to people who don't know yet.&lt;/p&gt;

&lt;p&gt;Perl's &lt;a href="https://yuki-kimoto.github.io/spvmdoc-public/"&gt;SPVM&lt;/a&gt; is similar to Python's Cython.&lt;/p&gt;

&lt;p&gt;Both is&lt;/p&gt;

&lt;p&gt;・C language transpiler&lt;br&gt;
・This is converted to machine code&lt;br&gt;
・Perl can call SPVM subroutine, Python call Cython function.&lt;/p&gt;

&lt;p&gt;I would appreciate it if you could remove the prejudice against Perl and make a fair comparison.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/perl-s-spvm-is-similar-to-python-s-cython-74d</id>
    <published>2021-03-30T04:49:14Z</published>
    <updated>2021-03-30T04:49:14Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
    <category term="python"/>
    <category term="cython"/>
  </entry>
  <entry>
    <title>Switch lots of things on at once</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/03/switch-lots-of-things-on-at-once.html"/>
    <id>tag:blogs.perl.org,2021:/users/ben_bullock//392.10161</id>
    <published>2021-03-30T00:37:20Z</published>
    <updated>2021-03-30T03:39:36Z</updated>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    <category term="export" label="export" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="exporter" label="exporter" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="import" label="import" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="signaturesfileslurper" label="signatures. File::Slurper" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>Many people already have codes like</p>

<pre>
use strict;
use warnings;
</pre>

<p>and so on at the top of each script they write. For scripts which I don't intend to publish anywhere, I have a module (which I accidentally called Z not knowing there was already a module of the same name on CPAN), which switches on lots of things at once just by saying</p>

<pre>
use Z;
</pre>

<p>The top bit goes like this:</p>

<pre>
package Z;
use warnings;
use strict;
use utf8;

use Carp;
use Deploy 'do_system';
use File::Slurper qw!read_text write_text read_lines!;
use FindBin '$Bin';
use Getopt::Long;
use Table::Readable ':all';
use v5.32;
no warnings qw(experimental::signatures);
use feature qw(signatures);
</pre>

<p>So far that is all fairly standard stuff, but what Z does is also to import all of the above things into my script using the <code>EXPORT</code> variables from the above modules:</p>

<pre>
our $VERSION = '0.01';

require Exporter;
our @ISA = qw(Exporter);

our @EXPORT = (
    @Carp::EXPORT,
    @Deploy::EXPORT_OK,
    @File::Slurper::EXPORT_OK,
    @FindBin::EXPORT_OK,
    @Getopt::Long::EXPORT,
    @Table::Readable::EXPORT_OK,
);
</pre>

<p>This requires a special <code>import</code> method:</p>

<pre>
sub import
{
    my ($class) = @_;

    strict->import ();
    utf8->import ();
    warnings->import ();
    warnings->unimport (qw(experimental::signatures));
    feature->import ('signatures');

    Carp->import ();
    File::Slurper->import (qw!read_text write_text!);
    FindBin->import ('$Bin');
    Getopt::Long->import ();
    Deploy->import ('do_system');
    Table::Readable->import (':all');

    Z->export_to_level (1);
}
</pre>

<p>To save another bit of boilerplate I also have</p>

<pre>
binmode STDOUT, ":encoding(utf8)";
</pre>

<p>at the end of the module.</p>

<p>This is for personal convenience so it's not something I would use publicly, but perhaps people who want to save themselves a bit of boilerplate might find this useful for making their own "personal module".</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>In defence of OOP</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2021/03/in-defence-of-oop.html"/>
    <id>tag:blogs.perl.org,2021:/users/lichtkind//275.10158</id>
    <published>2021-03-28T01:40:08Z</published>
    <updated>2021-03-30T01:37:10Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="OOP" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>During the last years it became fashionable to rag on object oriented programming and a decade ago I would join the choir. Hack, when I started with Perl I despised the bloat and inefficiency of many corporate smelling *coughjava* systems and preached the light weight and foreward thinking way that real hackers travel. In this miniseries I want to write why I changed my tune [part one], the best way (IMO) to use OOP [part two] and why inheritance (incl. roles and templates) and delegation or not helpful features (in contrast to polymorphism) [part three]. Maybe there will be more  about rating Perl OO features and modules.</p>]]>
        <![CDATA[<p>Objects are a tool to create abstraction layer - to do anything. It's easy to get overwhelmed by possibilities or run with preconceived ideas. And the larger the system, the harder it is to make wise choices. I think this is one reason why a lot of OO code sucks. The second is bad coding styles. It's not getting taught enough how to find the right abstractions and how to ease the use by proper naming. The third reason is the introduction and teaching of contra-productive features like inheritance and even worse, multiple inheritance.</p>

<p>So why even bother? To make my point lets unwind history a little. Because back in the days a similar discussion ensued about subroutines, which are also a tool to hide complexity behind a meaningful names. </p>

<p>register_customer( $paul ) is much nicer to our intuitive mind than GOTO 230. It frees up mental resources and makes programming easier. And yes there are 0.2% of algorithms that can be written clearer with goto's (inside a subroutine). Were talking here about API design.</p>

<p>The main point is that we are sealing a sub as one unit to be called or not. Rather than jumping with GOTO into the middle of a sub you insert an additional IF statement inside the sub, to have the option to skip a few lines. Old school programmers may yell at you for wasting 5 or 20 bytes. But you gained the peace knowing the sub always starts at line one so when you approach line 20 you know the data is checked and sanitized so only errors might happen you did not thought about yet. If you jump to line 20 of the sub  with bad data it might be go well for a while and when things go down its hard to find out why. Having a regulated control flow means also have well defined data, which  is the next big win usinf a sub. </p>

<p>And coincidental but not identical with sub : scopes. Create local variables inside a sub to prevent name collisions with other vars with same name and therefore  spooky actions at distance. Its a whole class of problems you instantly can stop to worry and it has no down sides, since you don't want to use the local variables anywhere else anyway. (I only miss the feature that functions can't access anything but their args).</p>

<p>To summarize: scopes - good, routine syntax - helpful and already it is as much about the (regulated state of) data than flow control.<br />
 <br />
Once you get a lot of subs, you prevent name collisions with name spaces (packages), that also give you order so that each sub is in the right place in the hierarchy. But when the namespaces get nested and names becoming longer you start to whish for classes, so you can call the method directly on the object - but were not there yet. Also, attribute data is sanitized once, when coming via a setter into the object and can be used over and over without any second check. So you can pass the object into a sub and data can be used without check, which makes for more efficient code (huh, efficient and oop in same sentnce?). This advantage would vanish if you could reach into object internals, when not having no real encapsulation like in vanilla p5 - but still this is not my main two points.</p>

<p>With the ability to capsule data you can guarantee to oblige to contracts, since noone else touched the data than the little code you have inside you small class. (I already touched on that.).  Most importantly strict abstraction layer walls will tell you if your abstraction layers are appropriate. You will notice it if there is a need to violate them or if your classes or methods get to big. These are clear signs that code has to be refactored. And if you have to many classes, it is a sign you don't have enough high order classes. OOP can be used in a very functional manner which is often less painful (in larger projects) than being strictly  functional and fighting with the strict rules of monads all the time. But how exactly do that will be content of the next part ....</p>]]>
    </content>
</entry>
  <entry>
  <title>Security Issues in Perl IP Address distros</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/security-issues-in-perl-ip-address-distros"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/security-issues-in-perl-ip-address-distros</id>
  <published>2021-03-29T20:51:04</published>
  <updated>2021-03-29T20:51:04</updated>
  <summary>
  <![CDATA[
     **TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.** If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on Dave Rolsky's personal blog. 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><strong>TLDR: Some Perl modules for working with IP addresses and netmasks have bugs with potential security applications.</strong></p>

<p>If you are using Net-Netmask, you should upgrade to the latest version. For more details, including on other affected and unaffected distros, please see the post on <a href="https://blog.urth.org/2021/03/29/security-issues-in-perl-ip-address-distros/">Dave Rolsky's personal blog</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Outreachy 2021 projects published</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/outreach-2021-projects"/>
  <id>tag:news.perlfoundation.org,2021-03-29:/post/outreach-2021-projects</id>
  <published>2021-03-29T20:12:58</published>
  <updated>2021-03-29T20:12:58</updated>
  <summary>
  <![CDATA[
     I am pleased to announce the following Perl Outreachy projects. Outreachy interns have about a month to make contributions and create a final application. Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products Improve the Perl code quality of Open Food Facts Extend and Improve Complement, our end-to-end test suite The first two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. The 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce the following Perl Outreachy projects. Outreachy interns have about a month (till April 30, 2021 at 4pm UTC) to make contributions and create a final application.</p>

<ul>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-ingredients-analysis-in-open-food-fact">Improve the ingredients analysis in Open Food Facts, the Wikipedia of food products</a></li>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/perl/#improve-the-perl-code-quality-of-open-food-facts">Improve the Perl code quality of Open Food Facts</a></li>
<li><a href="https://www.outreachy.org/outreachy-may-2021-internship-round/communities/matrix/#extend-and-improve-complement-our-end-to-end-test-">Extend and Improve Complement, our end-to-end test suite</a></li>
</ul>

<p>The first two projects are mentored by Stéphane Gigandet and sponsored by The Perl Foundation. The third project is sponsored by <a href="https://matrix.org/">Matrix</a>. </p>

<p>If you have any questions about the TPF-sponsored projects, feel free to contact Stéphane Gigandet (stephane@openfoodfacts.org) or Makoto Nozaki (makoto@perlfoundation.org).</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Part 2 of live-coding in Perl and Mojolicious</title>
    <link rel="alternate" href="https://dev.to/mjgardner/part-2-of-live-coding-in-perl-and-mojolicious-139c" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Sunday’s live pair programming session with Gábor Szabó was a blast, so we’re doing it again <strong>this Sunday, April 4</strong>. Watch the video below, and <a href="https://perlmaven.com/course-management-app-in-mojolicious">learn all about it and register here</a>.</p>

<p><iframe width="710" height="399" src="https://www.youtube.com/embed/_AInPp-dneQ">
</iframe>
</p>

<p><em>(I really need to do a better job of looking at the camera.)</em></p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/part-2-of-live-coding-in-perl-and-mojolicious-139c</id>
    <published>2021-03-29T14:35:58Z</published>
    <updated>2021-03-29T14:35:58Z</updated>
    <category term="programming"/>
    <category term="perl"/>
    <category term="meetup"/>
    <category term="mojolicious"/>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/nn2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cutting-edge bioinformatics company in Canberra, Australia looking for developers with excellent Modern Perl skills, ideally with Dancer, at least some familiarity with JavaScript on the front-end, and an openness to learning new things – there’s a learning curve regarding the domain knowledge, but they’ll be happy to teach you.</div>
    </content>
    <id>https://job.perl.careers/nn2</id>
    <published>2021-03-29T10:00:53Z</published>
    <updated>2021-03-29T10:00:53Z</updated>
  </entry>
  <entry>
    <title>All Aboard to Your Next Adventure! Perl Role in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/tvf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl programmers rejoice — our client has an office in Malta, and they’re looking for you. Looking for Perl developers with a strong background in Modern Perl – you should be comfortable with Moose and PSGI/Plack, and a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/tvf</id>
    <published>2021-03-29T10:00:52Z</published>
    <updated>2021-03-29T10:00:52Z</updated>
  </entry>
  <entry>
    <title>Vienna Does it Best. Perl Developer role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/bu2" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This role is located in Vienna, Austria, which is routinely ranked as one of the best places to live. With hundreds of things to see and do, there’s lots to keep you occupied in your off-hours. Client is willing to consider all candidates with strong Perl, but they make heavy use of PostgreSQL, Elasticsearch, and Modern Perl.</div>
    </content>
    <id>https://job.perl.careers/bu2</id>
    <published>2021-03-29T10:00:51Z</published>
    <updated>2021-03-29T10:00:51Z</updated>
  </entry>
  <entry>
    <title>A New Adventure is only a Click Away. Perl Developer role in London</title>
    <link rel="alternate" href="https://job.perl.careers/8r4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dancer, they want you. You’ll be deploying apps your work to AWS, so experience would be handy, and the company’s big on testing, so they’d like you to know your way around Test::More.</div>
    </content>
    <id>https://job.perl.careers/8r4</id>
    <published>2021-03-29T10:00:50Z</published>
    <updated>2021-03-29T10:00:50Z</updated>
  </entry>
  <entry>
    <title>A Role that Makes Dollars (and Cents). Perl Developer Role in London</title>
    <link rel="alternate" href="https://job.perl.careers/0gt" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">To be the best in their field, our client has gathered a world-class team with the skills and expertise to tailor content to different site aesthetics. Reaching over 349 million consumers worldwide is a big responsibility, and this engaged team is more than up to the challenge. If you are a senior Perl/JS developer with a passion for finance and business, this could be the role for you!</div>
    </content>
    <id>https://job.perl.careers/0gt</id>
    <published>2021-03-29T10:00:49Z</published>
    <updated>2021-03-29T10:00:49Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021 </title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/savethedatetprc2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 9-11 June 2021.</div>
    </content>
    <id>https://news.perlfoundation.org/post/savethedatetprc2021</id>
    <published>2021-03-29T10:00:48Z</published>
    <updated>2021-03-29T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 22, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-03-29T10:00:47Z</published>
    <updated>2021-03-29T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, April 14, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-03-29T10:00:46Z</published>
    <updated>2021-03-29T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Short talks: #AprilFools hijinks</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, April 1, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-03-29T10:00:45Z</published>
    <updated>2021-03-29T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, March 31, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-03-29T10:00:44Z</published>
    <updated>2021-03-29T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Presenting Mojolicious Nine Point Oh!</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, March 31, 2021</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/</id>
    <published>2021-03-29T10:00:43Z</published>
    <updated>2021-03-29T10:00:43Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/03/cdlxxxiii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-03-29T10:00:42Z</published>
    <updated>2021-03-29T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Web development with Mojolicious</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mark and myself (szabgab) had a fun pair-programming session a few hours ago developing a web application using Mojolicious. You can find all the links and the recording of the meeting and if you are interested you can register to the next event where we'll continue with the application.</div>
    </content>
    <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
    <published>2021-03-29T10:00:41Z</published>
    <updated>2021-03-29T10:00:41Z</updated>
  </entry>
  <entry>
    <title>unzip using Archive::Any of Perl</title>
    <link rel="alternate" href="https://perlmaven.com/unzip" type="text/html"/>
    <id>https://perlmaven.com/unzip</id>
    <published>2021-03-29T10:00:40Z</published>
    <updated>2021-03-29T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Forking, Process ID, Parent Process ID, init</title>
    <link rel="alternate" href="https://perlmaven.com/forking-pid-ppid" type="text/html"/>
    <id>https://perlmaven.com/forking-pid-ppid</id>
    <published>2021-03-29T10:00:39Z</published>
    <updated>2021-03-29T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 105: singing roots</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/03/22/PerlWeeklyChallenge105.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca's blog makes it lot easier to read his Raku solutions. Keep it up.</div>
    </content>
    <id>https://fluca1978.github.io/2021/03/22/PerlWeeklyChallenge105.html</id>
    <published>2021-03-29T10:00:38Z</published>
    <updated>2021-03-29T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 105: Nth Root and The Name Game</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-105-nth-root-and-the-name-game.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent kept it simple and easy this time. We even got a bonus solution in Python.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-105-nth-root-and-the-name-game.html</id>
    <published>2021-03-29T10:00:37Z</published>
    <updated>2021-03-29T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 105</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/03/perl-weekly-challenge-105.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The fighting spirit of James is evident in his solutions. He decided to invent his own nth_root() function.</div>
    </content>
    <id>http://blogs.perl.org/users/james_curtis-smith/2021/03/perl-weekly-challenge-105.html</id>
    <published>2021-03-29T10:00:36Z</published>
    <updated>2021-03-29T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge: Week 105</title>
    <link rel="alternate" href="https://www.braincells.com/perl/2021/03/perl_weekly_challenge_week_105.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting use of Math::Round, thanks for the short introduction of nearest().</div>
    </content>
    <id>https://www.braincells.com/perl/2021/03/perl_weekly_challenge_week_105.html</id>
    <published>2021-03-29T10:00:35Z</published>
    <updated>2021-03-29T10:00:35Z</updated>
  </entry>
  <entry>
    <title>PWC105 - The Name Game</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/25/pwc105-the-name-game/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I absolutely love "the questions" section and had a laugh. Keep up the humour.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/25/pwc105-the-name-game/</id>
    <published>2021-03-29T10:00:34Z</published>
    <updated>2021-03-29T10:00:34Z</updated>
  </entry>
  <entry>
    <title>PWC105 - Nth root</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/24/pwc105-nth-root/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I am not sure if I understood the line "the exponentiation operator in Perl is right associative". I wish the was more discussion on this subject.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/24/pwc105-nth-root/</id>
    <published>2021-03-29T10:00:33Z</published>
    <updated>2021-03-29T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Root, Root, bo-Boot: Perl Weekly Challenge 105</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/03/23/root-root-boboot-perl-weekly-challenge-105.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thanks Dave for sharing more than just the solutions. The extra bit of information makes it fun to read.</div>
    </content>
    <id>https://jacoby.github.io/2021/03/23/root-root-boboot-perl-weekly-challenge-105.html</id>
    <published>2021-03-29T10:00:32Z</published>
    <updated>2021-03-29T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Named Roots with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/named-roots.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne, as always, came up with complete solutions in Perl and Raku. Keep it up.</div>
    </content>
    <id>https://raku-musings.com/named-roots.html</id>
    <published>2021-03-29T10:00:31Z</published>
    <updated>2021-03-29T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/03/28" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thanks for introducing Newton’s Method. Always fun to read your blog.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/03/28</id>
    <published>2021-03-29T10:00:30Z</published>
    <updated>2021-03-29T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 105</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-105/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Reading this blog post is a lot fun then reading the code, I must admit. Thanks for sharing the Nth root trick.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-105/</id>
    <published>2021-03-29T10:00:29Z</published>
    <updated>2021-03-29T10:00:29Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 105</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Nth root" and "The Name Game" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-105</id>
    <published>2021-03-29T10:00:28Z</published>
    <updated>2021-03-29T10:00:28Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 106</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-106" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome a new week with couple of fun tasks "Maximum Gap" and "Decimal String". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-106</id>
    <published>2021-03-29T10:00:27Z</published>
    <updated>2021-03-29T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Raku CI Integration Bot Grant - Report March 2021 </title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant-raku-ci-bot-2021-03" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">See the <a href="https://dev.to/patrickbkr/hi-and-an-introduction-to-the-raku-ci-bot-3p3g">detailed post</a>.</div>
    </content>
    <id>https://news.perlfoundation.org/post/grant-raku-ci-bot-2021-03</id>
    <published>2021-03-29T10:00:26Z</published>
    <updated>2021-03-29T10:00:26Z</updated>
  </entry>
  <entry>
    <title>LibUV Grant: March 2021 Update</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant-report-libuv-2021-03" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant-report-libuv-2021-03</id>
    <published>2021-03-29T10:00:25Z</published>
    <updated>2021-03-29T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Install CPAN modules from different sources with cpanminus</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/install-cpan-modules-from-different-sources-with-cpanminus-5afi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">From CPAN, Git, local tarball, remote tarball.</div>
    </content>
    <id>https://dev.to/thibaultduponchelle/install-cpan-modules-from-different-sources-with-cpanminus-5afi</id>
    <published>2021-03-29T10:00:24Z</published>
    <updated>2021-03-29T10:00:24Z</updated>
  </entry>
  <entry>
    <title>CPAN River position vs time since last release </title>
    <link rel="alternate" href="https://neilb.org/2021/03/23/river-position-vs-age.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">CPAN RP is an indicator how many other modules depend on. It is nice to draw this, but I don't really know what conclusions can be drawn about any relationship between these two values. What does it really mean if a distribution has not been released for years. Is it abandoned? Is it (almost) perfect so that no serious bugs exists that would be worth the effort of the release? What does it mean if something was released 2 weeks ago? What if this happened after a 5-year break?</div>
    </content>
    <id>https://neilb.org/2021/03/23/river-position-vs-age.html</id>
    <published>2021-03-29T10:00:23Z</published>
    <updated>2021-03-29T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Course Management Application in Mojolicious</title>
    <link rel="alternate" href="https://perlmaven.com/course-management-app-in-mojolicious" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Live coding in which Mark Gardner will be the navigator, Gabor Szabo the driver and if you join us, you will also be able to add you input to the development of this web application.</div>
    </content>
    <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
    <published>2021-03-29T10:00:22Z</published>
    <updated>2021-03-29T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Multiple OS-es using (R)?ex</title>
    <link rel="alternate" href="https://code-maven.com/rex-multiple-oses" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The second part of the Rex series in which we discussed the automation of the Rex demo and setting up nginx on various Linux distributions and even on FreeBSD.</div>
    </content>
    <id>https://code-maven.com/rex-multiple-oses</id>
    <published>2021-03-29T10:00:21Z</published>
    <updated>2021-03-29T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Migrate to Mojolicious 9 - Quick feedback</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/migrate-to-mojolicious-9-quick-feedback-23c6" type="text/html"/>
    <id>https://dev.to/thibaultduponchelle/migrate-to-mojolicious-9-quick-feedback-23c6</id>
    <published>2021-03-29T10:00:20Z</published>
    <updated>2021-03-29T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Data visualization: Creating charts from perl using plotly.js (Chart::Plotly)</title>
    <link rel="alternate" href="https://dev.to/raigaurav/data-visualization-creating-charts-from-perl-using-plotly-js-chart-plotly-3m48" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You can create the images dynamically or you can save them locally and serve them ready-made.</div>
    </content>
    <id>https://dev.to/raigaurav/data-visualization-creating-charts-from-perl-using-plotly-js-chart-plotly-3m48</id>
    <published>2021-03-29T10:00:19Z</published>
    <updated>2021-03-29T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Mininet topology visualization with Graphviz from Perl</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/27/mininet-graphviz-perl/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/27/mininet-graphviz-perl/</id>
    <published>2021-03-29T10:00:18Z</published>
    <updated>2021-03-29T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Poor man's sequence diagrams</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/26/sequence-diagrams/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/26/sequence-diagrams/</id>
    <published>2021-03-29T10:00:17Z</published>
    <updated>2021-03-29T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Playwright and Mojolicious</title>
    <link rel="alternate" href="https://dev.to/kraih/playwright-and-mojolicious-21hn" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Playwright is an alternative to Selenium created by Microsoft with some interesting features and risks.</div>
    </content>
    <id>https://dev.to/kraih/playwright-and-mojolicious-21hn</id>
    <published>2021-03-29T10:00:16Z</published>
    <updated>2021-03-29T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Managing a Test Database</title>
    <link rel="alternate" href="https://dev.to/ovid/managing-a-test-database-2oje" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Test databases are very easy to get wrong. Very easy. Ovid shows some bad examples and points in the direction of good solutions. One thing that I especially like is the idea that the test database is left on the system for inspection for some time and then automatically cleaned up by the system.</div>
    </content>
    <id>https://dev.to/ovid/managing-a-test-database-2oje</id>
    <published>2021-03-29T10:00:15Z</published>
    <updated>2021-03-29T10:00:15Z</updated>
  </entry>
  <entry>
    <title>use Sys::Binmode; </title>
    <link rel="alternate" href="https://dev.to/fgasper/use-sys-binmode-4e6o" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Felipe says this new module should be used in <b>all</b> new code. Do you agree? Commend on the post or comment <a href="https://www.reddit.com/r/perl/comments/mfj2mv/use_sysbinmode/">here</a></div>
    </content>
    <id>https://dev.to/fgasper/use-sys-binmode-4e6o</id>
    <published>2021-03-29T10:00:14Z</published>
    <updated>2021-03-29T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Which version of Perl does your non-CPAN code require?</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/mbyy5w/which_version_of_perl_does_your_noncpan_code/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I would love to know which 'new' features (post 5.8) you use. Especially in your non-CPAN code where you don't have to think as much about backward compatibility. If at all.</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/mbyy5w/which_version_of_perl_does_your_noncpan_code/</id>
    <published>2021-03-29T10:00:13Z</published>
    <updated>2021-03-29T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Perl 7 - the current plan (document and core team discussion)</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/mbvhtc/perl_7_the_current_plan_document_and_core_team/" type="text/html"/>
    <id>https://www.reddit.com/r/perl/comments/mbvhtc/perl_7_the_current_plan_document_and_core_team/</id>
    <published>2021-03-29T10:00:12Z</published>
    <updated>2021-03-29T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Crypt::LE update</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/29/crypt-le-update/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/29/crypt-le-update/</id>
    <published>2021-03-29T10:00:11Z</published>
    <updated>2021-03-29T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Perl and XML in 2021: A few lessons learned</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/03/27/perl-and-xml-in-2021-a-few-lessons-learned/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">XML was always a scary thing to deal with. Very enterprisey. Full of bloat. But what can you do if that's what you get? You have to deal with it. Discuss it on <a href="https://dev.to/mjgardner/perl-and-xml-in-2021-a-few-lessons-learned-5dp8">dev.to</a> or on <a href="https://www.reddit.com/r/perl/comments/merpsn/perl_and_xml_in_2021_a_few_lessons_learned/">Reddit</a></div>
    </content>
    <id>https://phoenixtrap.com/2021/03/27/perl-and-xml-in-2021-a-few-lessons-learned/</id>
    <published>2021-03-29T10:00:10Z</published>
    <updated>2021-03-29T10:00:10Z</updated>
  </entry>
  <entry>
    <title>Data::HexDump::XXD</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/28/xxd/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">... and at first I thought Flavio is talking about <a href="https://xkcd.com/">xkcd</a>...</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/28/xxd/</id>
    <published>2021-03-29T10:00:09Z</published>
    <updated>2021-03-29T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Efficient programming</title>
    <link rel="alternate" href="https://dev.to/davehodg/efficient-programming-5g54" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A few notes from someone dealing with a 20-years old code-base.</div>
    </content>
    <id>https://dev.to/davehodg/efficient-programming-5g54</id>
    <published>2021-03-29T10:00:08Z</published>
    <updated>2021-03-29T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Subject Verb Object notation; declarative Perl without the framework</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jesse_shy/2021/03/subject-verb-object-notation-declarative-perl-without-the-framework.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Interesting and possibly scary. I can't decide if I like this. Read <a href="https://www.reddit.com/r/perl/comments/md8o82/subject_verb_object_notation_declarative_perl/">more discussion</a> about it</div>
    </content>
    <id>http://blogs.perl.org/users/jesse_shy/2021/03/subject-verb-object-notation-declarative-perl-without-the-framework.html</id>
    <published>2021-03-29T10:00:07Z</published>
    <updated>2021-03-29T10:00:07Z</updated>
  </entry>
  <entry>
    <title>"My half-life with Perl" from OSCON 2013 live encore performance</title>
    <link rel="alternate" href="http://blogs.perl.org/users/randal_l_schwartz/2021/03/my-half-life-with-perl-from-oscon-2013-live-encore-performance.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Unfortunately the video is not available to me.</div>
    </content>
    <id>http://blogs.perl.org/users/randal_l_schwartz/2021/03/my-half-life-with-perl-from-oscon-2013-live-encore-performance.html</id>
    <published>2021-03-29T10:00:06Z</published>
    <updated>2021-03-29T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Perl animated game. Playing with Perl, Inline C++ and SDL2 (part 2!)</title>
    <link rel="alternate" href="https://dev.to/ibrierley/perl-animated-game-playing-with-perl-inline-c-and-sdl2-part-2-ocg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It is nice to see someone actually playing with Perl. And in public!</div>
    </content>
    <id>https://dev.to/ibrierley/perl-animated-game-playing-with-perl-inline-c-and-sdl2-part-2-ocg</id>
    <published>2021-03-29T10:00:05Z</published>
    <updated>2021-03-29T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Specify octal numbers with the 0o prefix</title>
    <link rel="alternate" href="https://www.effectiveperlprogramming.com/2021/03/specify-octal-numbers-with-the-0o-prefix/" type="text/html"/>
    <id>https://www.effectiveperlprogramming.com/2021/03/specify-octal-numbers-with-the-0o-prefix/</id>
    <published>2021-03-29T10:00:04Z</published>
    <updated>2021-03-29T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Perl v5.34 new features</title>
    <link rel="alternate" href="https://www.effectiveperlprogramming.com/2021/03/perl-v5-34-new-features/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl v5.34 is scheduled to come out in May. Here’s what you can look forward to.</div>
    </content>
    <id>https://www.effectiveperlprogramming.com/2021/03/perl-v5-34-new-features/</id>
    <published>2021-03-29T10:00:03Z</published>
    <updated>2021-03-29T10:00:03Z</updated>
  </entry>
  <entry>
    <title>Mininet topology visualization with Graphviz</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/03/23/mininet-graphviz-topology/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/03/23/mininet-graphviz-topology/</id>
    <published>2021-03-29T10:00:02Z</published>
    <updated>2021-03-29T10:00:02Z</updated>
  </entry>
  <entry>
    <title>The Pearls of Perl - The top 10 Perl tools for every developer</title>
    <link rel="alternate" href="https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">From A (Ack) to Z (Dist-Zilla), check out the &lt;a href="https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition"&gt;10 Perl tools&lt;/a&gt; that should be in every developer’s toolbox. Or Download our &lt;a href="https://platform.activestate.com/Pizza-Team/Pearls-of-Perl?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition"&gt;“Pearls of Perl”&lt;/a&gt; build to get a version of Perl 5.28 with all the tools listed in this post so you can test them out for yourself!</content>
    <id>https://www.activestate.com/blog/top-10-perl-tools-and-utilities/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-pearls-repeat&amp;utm_campaign=user-acquisition</id>
    <published>2021-03-29T10:00:01Z</published>
    <updated>2021-03-29T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#505 - Pair programming</title>
    <link rel="alternate" href="http://perlweekly.com/archive/505.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Pair programming is fun and IMHO extremely efficient. There are plenty of advantages. For example when you are stuck, the other person will likely be able to help you out. You get immediate feedback to your ideas. Doing it live is even more fun. It is almost like doing 'mob programming' or 'ensemble programming' or 'ensemble working' as it is called by various people.</p>
<p>You can watch the recent session Mark Gardner and I had <a href="https://perlmaven.com/course-management-app-in-mojolicious">developing a Mojolicious web application</a>. You can also register for the next session.</p>
<p>Earlier I had two such sessions with Ferenc Erki about <a href="https://code-maven.com/rex">Rex</a> that we will continue.</p>
<p>I'd go even further, if you are interested in having such a session with me, writing some open source code then let me know in a private e-mail.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/505.html</id>
    <published>2021-03-29T10:00:00Z</published>
    <updated>2021-03-29T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>SPVM Document is upgraded. SPVM is a Programming launguage which has Perl-like syntax</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/spvm-document-is-upgraded-1j6j" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>SPVM Document is upgraded.</p>

<p>Add simple example to top.</p>

<p><a href="https://yuki-kimoto.github.io/spvmdoc-public/">SPVM Document</a></p>

<p>If you know where the new programming language will be announced, can you tell me?</p>

<p>I don't know where to make a good announcement.</p>

<p>Do I need a lot of money and power to get to know in 2021?</p>

<p>Does the Dev community have the opportunity to unveil great products that aren't yet known?</p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/spvm-document-is-upgraded-1j6j</id>
    <published>2021-03-29T05:20:52Z</published>
    <updated>2021-03-29T05:20:52Z</updated>
    <category term="perl"/>
    <category term="spvm"/>
  </entry>
  <entry>
    <title>[Personal Review] Codes from The Weekly Challenge Week 095-105</title>
    <link rel="alternate" href="http://blogs.perl.org/users/c_y_fung/2021/03/personal-review-codes-from-the-weekly-challenge-week-095-105.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10160</id>
    <published>2021-03-29T01:52:58Z</published>
    <updated>2021-03-29T03:40:29Z</updated>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p><p><i>-------------------------------------<br /></i></p><p>My coding momentum is a bit low.</p>

<p>Reflections on the codes I have written:</p>

<p>#095</p>

<p>Task 1: Palindrome Number<br />
TMTOWTDI. On this seemly and actually simple task, I chose to compare the digit one by one.<br />
</p><p>Task 2: Demo Stack<br />
A bit smell of laziness. I did not provide functions when stack is empty and <tt>pop()</tt> or <tt>min()</tt> is called. </p>

<p>#096</p>

<p>Task 1: Reverse Words<br />
A lesson on extra-white space. Oppositely but as lack of caution as a sin, this morning (GMT+8) I found I have forgotten a newline for my code for #105 Task 1.</p>

<p>Task 2: Edit Distance<br />
That was a standard computer science exercise. I was astounded by reading Mr Abigail's blog on the approach on saving memory space.</p>

<p>#097 </p>

<p>Task 1: Caesar Cipher<br />
Trivial.</p>

<p>Task 2: Binary Substrings<br />
Seems to be weird at the first sight, but much simpler after "fourth" thought.<br />
I wish I would have a head for calm analysis when it comes to a more time-limited situation.</p>

<p>#098</p>

<p>Task 1: Read N-characters<br />
Trivial for Perl long-term user, but I had not known <tt>read</tt> before.</p>

<p>Task 2: Search Insert Position<br />
Put a binary search tree as solution. Actually it was modified from some codes for rosalind.info .</p>

<p>#099</p>

<p>Task 1: Pattern Match<br />
KOed by regex.</p>

<p>Task 2: Unique Subsequence<br />
Quite a loaded task for me. idea-&gt;input(letter by letter);</p>

<p>Output: a procedural script.</p>

<p>#100</p><p>
Task 1: Fun Time<br />
When I was in secondary school, one of my class teachers is a strict English teacher. He said we should say "Good noon Mr Chan" if the class begins at 12:00 nn. Yeah, 12:00 nn.</p>

<p>Task 2: Triangle Sum<br />
Ignoring instructions, people took the fastest way: from bottom to top traversal.</p>

<p>I think I am over-unpredictable on how strict I follow the examples or task instructions.</p>

<p>#101<br />
My laziest week recently.  </p>

<p>Task 1: Pack a Spiral<br />
Back to a few years ago, I read a similar task on a competitive programming guide book. At that time I have no clues. A mark of improvement.</p>

<p>Task 2: origin-containing triangle<br />
But still thanks Mr S. Little introduce some basic computer graphics task.</p>

<p>#102</p><p>
Task 1: Rare Numbers<br />
As said, it is faster to generate the numbers, instead of checking the natural numbers one after one... I let go of my previous experience.</p>

<p>Task 2: Hash-counting String<br />
I used recursion for the task. Mr J. Smith's <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-102/james-smith/perl/ch-2.pl">two elegant lines</a> save the recursion, no wonder he gets the team title of Champion of Feb 2021 soon after he enters the team.</p>

<p>#103</p><p>
Task 1: Chinese Zodiac<br />
Trivial.</p>

<p>Task 2: What’s playing?<br />
I got the "wrong answer" at first. Anyway, I like this task as its nature suggests me getting experience of some of the CPAN modules.</p>

<p>Extra:<br />
Instead of using the <tt>Test::XXXXXX</tt> module, I wrote a short script for test. (Reinventing or whatever, I know there is a book on Perl Testing, I will check it.) This helps me get on the latest #105 -- I undergo time travel again.</p>

<p>Here is my testing script:</p>

<div><tt>
<b>#!/usr/bin/perl</b><br />
<b>use</b>&nbsp;<b>strict</b>;<br />
<b>use</b>&nbsp;<b>warnings</b>;<br />
<font color="#7f7f7f"><i>#&nbsp;Testing&nbsp;script&nbsp;for <br /></i></font></tt></div><div><tt><font color="#7f7f7f"><i>#The&nbsp;Weekly&nbsp;Challenge&nbsp;#103&nbsp;</i>Task<font color="#7f7f7f"><i>&nbsp;1</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<b>my</b>&nbsp;<font color="#0000ff">%data_ret</font>&nbsp;=&nbsp;<br />
&nbsp;&nbsp;&nbsp;(<font color="#00007f">2017</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Fire&nbsp;Rooster</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1938</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Earth&nbsp;Tiger</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1997</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Fire&nbsp;Ox</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1990</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Metal&nbsp;Horse</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#00007f">1967</font>&nbsp;=&gt;&nbsp;<font color="#ffa500">"</font><font color="#ff0000">Fire&nbsp;Goat</font><font color="#ffa500">"</font>,<br />
&nbsp;&nbsp;&nbsp;);<br />
<br />
<br />
<b>my</b>&nbsp;<font color="#0000ff">$program</font>&nbsp;=&nbsp;<font color="#ffa500">"</font><font color="#ff0000">perl&nbsp;ch-1.pl</font><font color="#ffa500">"</font>;&nbsp;<font color="#7f7f7f"><i><br /></i></font></font></tt></div><div><font color="#7f7f7f"><tt><font color="#7f7f7f"><i>#MODIFY&nbsp;FOR&nbsp;DIFFERENT&nbsp;USES</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<font color="#7f7f7f"><i>#&nbsp;============================= #</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<b>my</b>&nbsp;<font color="#0000ff">$num_of_success</font>&nbsp;=&nbsp;0;<br />
<br />
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$parameter</font>&nbsp;(<font color="#007f00">keys</font>&nbsp;<font color="#0000ff">%data_ret</font>)&nbsp;{<br />
&nbsp; <b>my</b>&nbsp;<font color="#0000ff">$test_return</font>&nbsp;=&nbsp;<font color="#ffa500">`</font><font color="#0000ff">$program</font><font color="#ff0000">&nbsp;</font><font color="#0000ff">$parameter</font><font color="#ffa500">`</font>;&nbsp;<br />
&nbsp; <font color="#007f00">chomp</font>(<font color="#0000ff">$test_return</font>);<br />
&nbsp; <b>if</b>&nbsp;(<font color="#0000ff">$test_return</font>&nbsp;<font color="#ffa500">eq</font>&nbsp;<font color="#0000ff">$data_ret</font>{<font color="#0000ff">$parameter</font>})&nbsp;{&nbsp;&nbsp;<br />
&nbsp; <font color="#7f7f7f"><i>#CHANGE&nbsp;==&nbsp;INTO&nbsp;"eq"&nbsp;for&nbsp;non-numeric</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;case&nbsp;parameter&nbsp;</font><font color="#0000ff">$parameter</font><font color="#ff0000">:&nbsp;passed&nbsp;</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;</tt></font></div><div><font color="#7f7f7f"><tt><font color="#0000ff">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $num_of_success</font>++;<br />
&nbsp; }&nbsp;<br />
&nbsp; <b>else</b>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;case&nbsp;parameter&nbsp;</font><font color="#0000ff">$parameter</font><font color="#ff0000">:&nbsp;failed&nbsp;</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
&nbsp; }<br />
}<br />
<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">done&nbsp;</font><font color="#ffa500">"</font>,&nbsp;&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#007f00">keys</font>&nbsp;<font color="#0000ff">%data_ret</font>,&nbsp;<font color="#ffa500">"</font><font color="#ff0000">&nbsp;test&nbsp;case(s);&nbsp;PASS:&nbsp;</font><font color="#0000ff">$num_of_success</font><font color="#ff0000">&nbsp;case(s)&nbsp;.</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
</tt></font></div><font color="#7f7f7f">

</font><br /><div>#104</div><div><br /></div><div>Task 1: FUSC Sequence</div><div>Seems easy? I submitted a seriously bugged script, just fix it after reading others' blog in the afternoon on Monday.</div><div><br />Task 2 NIM Game:<br /></div><div>The winning strategy is well-known if you like math or have read some math expositions for laymen.</div><div><br /></div><div>I enjoy programming for traditional games.</div><div><br /></div><div>#105</div><div><br /></div><div>Task 1: Nth Root</div><div>My interpretation: N is an integer.</div><div><br /></div><div>I think thtat using log with exp throws out the interesting mathematics. My first thought after seeing the task statement is using Newton's method. However, I was afraid of numerical analysis and delayed coding til early morning of the 29th March.<br /></div><div><tt><br /></tt></div><div>I tried two approaches. One is Newton's method, one is basic integer for-loop. Then I compare their results making use of a version of my testing script and apply warnings to users.<br /></div><div><br /></div><pre><tt>$ perl ch-1.pl 10 1048578<br />WARN: Recommend to take the result from Newton's method if two methods dispute
WARN: N is large; probably dispute between two methods 
By lazy method:
4.00
By Newton's method:
4.00<br /><br />$ cat tester_105-ch-1.pl<br />...<br />for (1..100) { <br />    my $temp_N = 2 + int rand(9);<br />    my $temp_k = rand(3000);<br />    $data_ret{"$temp_N $temp_k"} = lazy_method($temp_N, $temp_k);<br />}<br /><br />my $program = "perl ch-1_newton.pl"; #MODIFY FOR DIFFERENT USES<br />...<br /><br />$ perl tester_105-ch-1.pl<br />...<br />test case parameter 10 1708.35583396219: failed <br />got 2.11 , expect: 2.10<br />...<br />done 100 test case(s); PASS: 99 case(s) .<br />
</tt></pre><div><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-105/cheok-yin-fung/perl/ch-1.pl">Full code of ch-1.pl on GitHub</a>. <br /></div><div><tt><br /></tt></div><div>Maybe I need a rest, maybe I need a clearer goal in programming, maybe I should just enjoy the logic challenges. I don't know yet.</div><div><br /></div><div>Anyway, I discover that I had forgotten a newline character after a sleep. A confession here. □<br /></div>]]>
        <![CDATA[<p><br /></p>]]>
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 105: Nth Root and The Name Game</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-105-nth-root-and-the-name-game.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10156</id>
    <published>2021-03-27T03:05:09Z</published>
    <updated>2021-03-29T03:04:55Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 105 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a couple of days (March 28, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Nth Root</h2>

<p><em>You are given positive numbers <code>$N</code> and <code>$k</code>.</em></p>

<p><em>Write a script to find out the <code>$Nth</code> root of <code>$k</code>. For more information, please take a look at the <a href="https://en.wikipedia.org/wiki/Nth_root#Computing_principal_roots">wiki page</a>.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $N = 5, $k = 248832
Output: 12

Input: $N = 5, $k = 34
Output: 2.02
</code></pre>

<p>The <code>$n</code>th root of the number <code>$k</code>  can usually be expressed as the number ​<code>$k</code> raised to the <code>1/N</code>th power: <code>$k ** (1/$n)</code>, with <code>$n &gt; 0</code>.</p>

<h3>Nth Root in Raku</h3>

<p>We just implement the formula above and compute the first to the tenth root of the input value:</p>

<pre><code>use v6;

my $input = @*ARGS[0] // 248832;
for 1..10 -&gt; $i {
    printf "%2i\t%10.3f\n", $i, $input ** (1/$i);
}
</code></pre>

<p>Running this script with no parameter yields the results for the defgault value:</p>

<pre><code>$ raku root.raku
 1      248832.000
 2         498.831
 3          62.898
 4          22.335
 5          12.000
 6           7.931
 7           5.900
 8           4.726
 9           3.977
10           3.464
</code></pre>

<p>And providing another integer as a command-line parameter displays the following output:</p>

<pre><code>$ raku root.raku 400
 1         400.000
 2          20.000
 3           7.368
 4           4.472
 5           3.314
 6           2.714
 7           2.354
 8           2.115
 9           1.946
10           1.821
</code></pre>

<h3>Nth Root in Perl</h3>

<p>This a direct port to Perl of the above Raku program:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my $input = $ARGV[0] // 248832;
for my $i (1..10) {
    printf "%2i\t%10.3f\n", $i, $input ** (1/$i);
}
</code></pre>

<p>Output with the default value:</p>

<pre><code> $ perl root.pl
 1      248832.000
 2         498.831
 3          62.898
 4          22.335
 5          12.000
 6           7.931
 7           5.900
 8           4.726
 9           3.977
10           3.464
</code></pre>

<p>Output with a command-line parameter:</p>

<pre><code>$ perl root.pl 400
 1         400.000
 2          20.000
 3           7.368
 4           4.472
 5           3.314
 6           2.714
 7           2.354
 8           2.115
 9           1.946
10           1.821
</code></pre>

<h3>Nth Root in Scala</h3>

<p>Again, a simple port to Scala:</p>

<pre><code>object root extends App {
  val in: Int = if (args.size == 1) args(0).toInt else 248832
  for (i &lt;- 1 to 10) {
    val root = scala.math.pow(in, (1 / i.toDouble))
    println(f"$i%2d $root%10.3f")
  }
}
</code></pre>

<p>Note the in Scala, a division between two integers yields the Euclidean division (or integer division) so that <code>1 / i</code> would return 0 for all integer values from 2 to 10. That is why the program converts <code>i</code> to a <code>double</code> before performing the division. Replacing 1 by 1.0 would also do the trick.</p>

<p>Output:</p>

<pre><code> 1 248832.000
 2    498.831
 3     62.898
 4     22.335
 5     12.000
 6      7.931
 7      5.900
 8      4.726
 9      3.977
10      3.464
</code></pre>

<h3>Nth Root in Python</h3>

<p>Port of the same program to Python:</p>

<pre><code>#!/usr/bin/python

import sys
input = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 248832
for i in range(1, 11):
    root = input ** (1/i)
    print('{:2d}'.format(i), "   ", root)
</code></pre>

<p>Output with default value::</p>

<pre><code>$ python3 root.py
 1     248832.0                                                                                                         
 2     498.8306325798367                                                                                                
 3     62.89779346101351                                                                                                
 4     22.33451661845039                                                                                                
 5     12.000000000000002                                                                                               
 6     7.930812913000375                                                                                                
 7     5.899887726224536                                                                                                
 8     4.725940818339814                                                                                                
 9     3.976904267210367                                                                                                
10     3.464101615137755
</code></pre>

<p>Please note that my real output is single-spaced. I have no idea why my mark-down file produces double-space rendering here and in two more entries below.</p>

<p>Output with a command-line parameter:</p>

<pre><code>$ python3 root.py 400
 1     400.0
 2     20.0
 3     7.368062997280773
 4     4.47213595499958
 5     3.3144540173399872
 6     2.7144176165949063
 7     2.353546893650252
 8     2.114742526881128
 9     1.9458877175763887
10     1.8205642030260802
</code></pre>

<p>Note that I haven&#8217;t tried to format the roots: either Python is bad at formatting numbers, or I did not understand its formatting system. Note that I&#8217;ll not try very hard to pretty-print the results in the coming guest languages.</p>

<h3>Nth Root in Other Languages</h3>

<p>Some languages don&#8217;t have the <code>**</code> exponentiation operator. In some cases, the exponenciation operator may be <code>^</code>. In others, you might have to use a built-in or an imported <code>pow</code> function. Or possibly to use logarithms (like in <em>bc</em>). Or yet some other construct. Also, in a number of the languages examples below, I did not try to get argument from the command-lin, but preferred to hard code the input value. In some cases, I did not try to pretty-print the results.</p>

<h4>In the C Programming Language</h4>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

#define DEFAULT_IN 248832

int main(int argc, char *argv[]) {
    printf("%s\n", argv[1]);
    int in = argc == 2 ? atoi( argv[1]) : DEFAULT_IN;
    for (int i = 1; i &lt;= 10; i++) {
        printf("%2i     %10.3f \n", i, pow (in, 1.0/i));
    };
    return 0;
}
</code></pre>

<p>Output:</p>

<pre><code>$ a.out
 1     248832.000                                                                                                       
 2        498.831                                                                                                       
 3         62.898                                                                                                       
 4         22.335                                                                                                       
 5         12.000                                                                                                       
 6          7.931                                                                                                       
 7          5.900                                                                                                       
 8          4.726                                                                                                       
 9          3.977                                                                                                       
10          3.464    

$ a.out 10000
 1      10000.000                                                                                                       
 2        100.000                                                                                                       
 3         21.544                                                                                                       
 4         10.000                                                                                                       
 5          6.310                                                                                                       
 6          4.642                                                                                                       
 7          3.728                                                                                                       
 8          3.162                                                                                                       
 9          2.783                                                                                                       
10          2.512
</code></pre>

<h4>In the D Programming Language</h4>

<p>After C, comes D (just as C came after B, which itself came after BCPL). More seriously, D was designed as a successor to C (although D is object oriented and might better qualified as a successor to C++),same ideas and simular syntax, but supposedly more robust.</p>

<pre><code>import std.stdio;
import std.math;

void main() {
    auto input = 248832;
    for (int i = 1; i &lt;= 8; i++) {
        double root = pow(input, 1.0/i);
        writeln(i, "     ", root);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>1     248832
2     498.831
3     62.8978
4     22.3345
5     12
6     7.93081
7     5.89989
8     4.72594
</code></pre>

<h4>In Awk</h4>

<pre><code># run e.g. as: $ awk -v input=120 -f root.awk
BEGIN {
    for (i = 1; i &lt;= 10; i++) {
        printf "%2i    ¨%10.3f\n", i, input ** (1/i);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -v input=248832 -f root.awk
 1    ¨248832.000
 2    ¨   498.831
 3    ¨    62.898
 4    ¨    22.335
 5    ¨    12.000
 6    ¨     7.931
 7    ¨     5.900
 8    ¨     4.726
 9    ¨     3.977
10    ¨     3.464
</code></pre>

<p>We don&#8217;t really need to store the awk script in a file and can use an awk one-liner:</p>

<pre><code>$ awk -v input=248832 ' BEGIN { for (i = 1; i &lt;= 6; i++) {
                print i, "\t", input ** (1/i); } } '
1        248832
2        498.831
3        62.8978
4        22.3345
5        12
6        7.93081
</code></pre>

<h4>In Bc</h4>

<p>The Unix/Linux <em>bc</em> utility is aimed at performing simple numeric calculations, so it should presumably be ideal for our numeric tasK. However, its name stands for &#8220;basic calculator,&#8221; and it is so basic that it doesn&#8217;t have an exponentiation operator for non-integer exponents. We can work around that issue, though. Using the <code>-l</code> command line option enables a math library that provides the <code>l</code> natural logarithm and <code>e</code> exponential functions. The <em>n</em>th root of <code>k</code> can be computed as the exponential of the logarithm of <code>k</code> divided by <code>n</code>, which is written <code>e(l(k)/n)</code> in the bc syntax. We can run our program as a one-liner:</p>

<pre><code>$ echo  'a = 248832; for(i=1;i&lt;=5;i++) { print i; print "   "; print e(l(a)/i); print "\n"}' | bc -l
1   248831.99999999999999787313
2   498.83063257983666053377
3   62.89779346101351857080
4   22.33451661845039037442
5   11.99999999999999999988
</code></pre>

<p>Of course, using logarithm and exponential reduces somewhat the accuracy.</p>

<h4>In Gembase</h4>

<p>Gembase is a little known proprietary language for database access. You may find some information about it on my <a href="http://blogs.perl.org/users/laurent_r/2021/03/perl-weekly-challenge-104-fusc-sequence-and-nim-game.html">blog post of last week</a>. It should be quite easy to understand this code once you know that variable names start with a &#8220;sigil&#8221;: <code>#</code>.</p>

<pre><code>PROCEDURE_FORM ROOT (#in)
    if (#in = "")
        #input = 248832
    else
        #input = #in
    end_if
    #i = 1
    while(#i &lt;= 10)
        #root = #input ^ (1.0/#i)
        error /text_only (mask("!-@@", #i) &amp; mask("!-@@@@@@@@@@0.@@@", #root))
        #i = #i + 1
    end_while
END_FORM
</code></pre>

<p>Output:</p>

<pre><code> 1     248832.000
 2        498.831
 3         62.898
 4         22.335
 5         12.000
 6          7.931
 7          5.900
 8          4.726
 9          3.977
10          3.464
</code></pre>

<h4>In Ruby</h4>

<pre><code>$input = 248832
for i in 1 .. 8 do
    root = $input ** (1.0/i)
    puts "#{i}    #{root}"
end
print "\n"
</code></pre>

<p>Output:</p>

<pre><code>1    248832.0
2    498.8306325798367
3    62.89779346101351
4    22.33451661845039
5    12.000000000000002
6    7.930812913000375
7    5.899887726224536
8    4.725940818339814
</code></pre>

<h4>In Dart</h4>

<pre><code>import 'dart:math';

void main() {
  var input = 248832;
  for (int i = 1; i &lt;= 8; i++) {
    var root = pow(input, (1/i));
    print("$i    $root");
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1    248832
2    498.8306325798367
3    62.89779346101351
4    22.33451661845039
5    12.000000000000002
6    7.930812913000375
7    5.899887726224536
8    4.725940818339814
</code></pre>

<h4>In Visual Basic</h4>

<pre><code>Module VBModule
    Sub Main()
        for i as Integer = 1 to 5
            Console.WriteLine(248832 ^ (1/i))
        next
    End Sub
End Module
</code></pre>

<p>Output:</p>

<pre><code>248832                                                                                                                  
498.830632579837                                                                                                        
62.8977934610135                                                                                                        
22.3345166184504                                                                                                        
12
</code></pre>

<h4>In Kotlin</h4>

<pre><code>fun main() {
    val input = 248832;
    for (i in 1..10) {
        val root = "%12.3f".format(Math.pow(input * 1.0, 1.0/i))
        val formatted_i = "%2d".format(i)
        println("$formatted_i  $root")
    }
}
</code></pre>

<p>Output:</p>

<pre><code> 1    248832.000
 2       498.831
 3        62.898
 4        22.335
 5        12.000
 6         7.931
 7         5.900
 8         4.726
 9         3.977
10         3.464
</code></pre>

<h4>In Lua</h4>

<pre><code>input = 248832
for i = 1, 10 do
    print (string.format("%2d  %10.3f", i, input ^ (1/i)))
end
</code></pre>

<p>Output:</p>

<pre><code> 1  248832.000
 2     498.831
 3      62.898
 4      22.335
 5      12.000
 6       7.931
 7       5.900
 8       4.726
 9       3.977
10       3.464
</code></pre>

<h4>In Go</h4>

<pre><code>package main
import (
    "fmt"
    "math"
)
func main() {
    const input = 248832

    for i := 1; i &lt;= 10; i++ {
        fmt.Printf("%2d\t%10.3f\n", i, math.Pow(input, 1.0/float64(i)))
    }
}
</code></pre>

<p>Output:</p>

<pre><code> 1  248832.000
 2     498.831
 3      62.898
 4      22.335
 5      12.000
 6       7.931
 7       5.900
 8       4.726
 9       3.977
10       3.464
</code></pre>

<h4>In Java</h4>

<pre><code>class Main {  
    public static void main(String args[]) { 
        double input = Double.parseDouble(args[0]);
        for (int i = 1; i &lt;= 10; i++) {
            double root = Math.pow(input, 1.0 / i );
            System.out.format("%2d   %10.3f\n", i, root); 
        } 
    }  
}
</code></pre>

<p>Output:</p>

<pre><code> 1   248832.000
 2      498.831
 3       62.898
 4       22.335
 5       12.000
 6        7.931
 7        5.900
 8        4.726
 9        3.977
10        3.464
</code></pre>

<h4>In Nim</h4>

<p>Nim uses Python-like code indentation.</p>

<pre><code>import math

var input = 248832.0
for i in 1..8: 
  var root = pow(input, 1.0 / float(i))
  echo i, "   ", root
</code></pre>

<p>Output:</p>

<pre><code>1   248832.0
2   498.8306325798367
3   62.89779346101351
4   22.33451661845039
5   12.0
6   7.930812913000375
7   5.899887726224536
8   4.725940818339814
</code></pre>

<h4>In Julia</h4>

<pre><code>input = 248832
for i = 1:10
    @printf("%2d  %10.3f\n", i, input ^ (1/i) )
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia root.jl
 1  248832.000
 2     498.831
 3      62.898
 4      22.335
 5      12.000
 6       7.931
 7       5.900
 8       4.726
 9       3.977
10       3.464
</code></pre>

<h4>In Rust</h4>

<pre><code>fn main() {
    let input = 248832f64;
    for i in 1..11 {
        let root = input.powf(1.0/i as f64);
        println!("{:2}   {:10.3}", i,  root);
    }
}
</code></pre>

<p>Output:</p>

<pre><code> 1   248832.000
 2      498.831
 3       62.898
 4       22.335
 5       12.000
 6        7.931
 7        5.900
 8        4.726
 9        3.977
10        3.464
</code></pre>

<h2>Task 2: The Name Game</h2>

<p><em>You are given a <code>$name</code>.</em></p>

<p><em>Write a script to display the lyrics to the Shirley Ellis song The Name Game. Please checkout the <a href="https://en.wikipedia.org/wiki/The_Name_Game">wiki page</a> for more information.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $name = "Katie"
Output:

    Katie, Katie, bo-batie,
    Bonana-fanna fo-fatie
    Fee fi mo-matie
    Katie!
</code></pre>

<p>The Name Game is apparently very well known in the United States, but I haven&#8217;t lived there and the rules are not entirely clear to me, so I&#8217;ll base my programs on my best understanding of those rules.</p>

<h3>The Name Game in Raku</h3>

<p>We&#8217;ll use a <em>here-doc</em> for producing the lyrics of the song, with variable interpolation. So, the only difficulty is to populate these variables with the right values in accordance with rules laid out in the Wikipedia page referred to above.</p>

<pre><code>use v6;

my $name = prompt "Please enter the name: ";
my $vowels = Set.new(&lt;a e i o u&gt;);
my $consonants = Set.new('a'..'z') (-) $vowels;
my ($start, $suffix) = ($0, $1) if $name ~~ /(\w)(\w+)/;

my @y;
if $start.lc (elem) $consonants {
    @y[0] = $start eq 'B' ?? "bo-$suffix" !! "bo-b$suffix";
    @y[1] = $start eq 'F' ?? "fo-$suffix" !! "fo-f$suffix";
    @y[2] = $start eq 'M' ?? "mo-$suffix" !! "mo-m$suffix";
} else {
    @y = "bo-$suffix", "fo-$suffix", "mo-$suffix";
}

say qq:to/END/; 
    $name, $name, @y[0]
    Bonana-fanna @y[1]
    Fee fi @y[2])
    $name!
    END
</code></pre>

<p>Examples of output:</p>

<pre><code>$ ./raku name-game.raku
Please enter the name: Katie
Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie)
Katie!

$ ./raku name-game.raku
Please enter the name: Billy
Billy, Billy, bo-illy
Bonana-fanna fo-filly
Fee fi mo-milly)
Billy!

$ ./raku name-game.raku
Please enter the name: Anna
Anna, Anna, bo-nna
Bonana-fanna fo-nna
Fee fi mo-nna)
Anna!
</code></pre>

<h3>The Name Game in Perl</h3>

<p>This a port to Perl of the Raku program above:</p>

<pre><code>use strict;
use warnings;
use feature "say";

say "Please enter the name: ";
my $name = &lt;STDIN&gt;;
chomp $name;
my %vowels = map { $_ =&gt; 1} qw&lt;a e i o u&gt;;
my ($start, $suffix) = ($1, $2) if $name =~ /(\w)(\w+)/;
my @y;
if (exists $vowels{lc $start}) {
    @y = ("bo-$suffix", "fo-$suffix", "mo-$suffix");
} else {
    $y[0] = $start eq 'B' ? "bo-$suffix" : "bo-b$suffix";
    $y[1] = $start eq 'F' ? "fo-$suffix" : "fo-f$suffix";
    $y[2] = $start eq 'M' ? "mo-$suffix" : "mo-m$suffix";
}
say "\n", &lt;&lt;~EOF;
    $name, $name, $y[0]
    Bonana-fanna $y[1]
    Fee fi $y[2])
    $name!
    EOF
</code></pre>

<p>Examples of output:</p>

<pre><code>$ perl  name-game.pl
Please enter the name:
Katie

Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie)
Katie!

$ perl  name-game.pl
Please enter the name:
Anna

Anna, Anna, bo-nna
Bonana-fanna fo-nna
Fee fi mo-nna)
Anna!

$ perl  name-game.pl
Please enter the name:
Billy

Billy, Billy, bo-illy
Bonana-fanna fo-filly
Fee fi mo-milly)
Billy!
</code></pre>

<h3>The Name Game in Scala</h3>

<pre><code>object nameGame extends App {
  val in: String = if (args.size == 1) args(0) else "Katie"
  val start =  in.substring(0, 1)
  val suffix = in.substring(1)
  val vowels = Map("A" -&gt; 1, "E" -&gt; 1, "I" -&gt; 1, "O" -&gt; 1, "U" -&gt; 1)

  val bosuffix = if (start == 'B' || vowels.contains(start)) 
    s"bo-$suffix"  else s"bo-b$suffix"
  val fosuffix = if (start == 'F' || vowels.contains(start)) 
    s"fo-$suffix"  else s"fo-f$suffix"
  val mosuffix = if (start == 'M' || vowels.contains(start)) 
    s"mo-$suffix" else s"mo-m$suffix"

  println(s"$in, $in, $bosuffix")
  println(s"Bonana-fanna $fosuffix")
  println(s"Fee fi $mosuffix")
  println(s"$in!")
}
</code></pre>

<p>Example output:</p>

<pre><code>Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie
Katie!
</code></pre>

<h3>The Name Game in Python</h3>

<pre><code>import sys
input = sys.argv[1] if len(sys.argv) &gt; 1 else "Katie"
start = input[0]
suffix = input[1:]
vowels = { "A", "E", "I", "O", "U"}

bosuffix = f'bo-{suffix}' if (start == 'B' or start in vowels) else f'bo-b{suffix}'
fosuffix = f'fo-{suffix}' if (start == 'F' or start in vowels) else f'fo-f{suffix}'
mosuffix = f'mo-{suffix}' if (start == 'M' or start in vowels) else f'mo-m{suffix}'

print(f'{input}, {input}, {bosuffix}')
print(f'Bonana-fanna {fosuffix}')
print(f'Fee fi {mosuffix}')
print(f'{input}!')
</code></pre>

<p>Output:</p>

<pre><code>$ python3 name-game.py
Katie, Katie, bo-batie
Bonana-fanna fo-fatie
Fee fi mo-matie
Katie!
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, April 4, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Newton’s Method and Perl Formats: The Weekly Challenge 105</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/28#pwc105" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><em>The examples used here are from the weekly challenge problem statement and demonstrate the working solution.</em></p>
<h2 id="part-1">Part 1</h2>
<p><em>You are given positive numbers $N and $k. Write a script to find out the $Nth root of $k</em></p>
<h3 id="solution">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;
sub nth_root{
    my($n, $k) = @_;
    my $x_i = int(rand(10) + 1); 
    my $r;
    for my $i (0 .. 100){
        $x_i = (1 / $n) * (($n - 1) * $x_i + ($k / $x_i ** ($n - 1)));  
    } 
    return $x_i;  
}

MAIN:{
    my($N, $k);
    $N = 5;
    $k = 248832;
    print nth_root($N, $k) . "\n";
    $N = 5;
    $k = 34;
    print sprintf("%0.2f", nth_root($N, $k)) . "\n";
}
</code></pre>
<h3 id="sample-run">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-1.pl
12
2.02
</code></pre>
<h3 id="notes">Notes</h3>
<p>One of my neatest things one can learn in calculus class, I would argue, is Newton’s method for computing square roots. One can read more on this elsewhere but this works by using a recurrence relationship, defined using directives, to compute the zero of a function. If the function is <code>x^n - a</code>, the zero we are computing is the nth root of a.</p>
<p>To start the process any <code>x_0</code> may be chosen. Here we pick an integer from 1 to 10 at random.</p>
<p>You can compute this for as many iterations as you’d like, of course, but here even 100 iterations is much more than enough to properly converge.</p>
<h2 id="part-2">Part 2</h2>
<p><em>You are given a $name. Write a script to display the lyrics to the Shirley Ellis song The Name Game.</em></p>
<h3 id="solution-1">Solution</h3>
<pre><code class="perl">
use strict;
use warnings;

sub name_game{
    my($name) = @_;
    my($b, $f, $m); 
    my $first_letter = lc(substr($name, 0, 1));
    my $irregular_v = $first_letter =~ tr/aeiou//d;
    my $irregular_bfm = $first_letter =~ tr/bfm//d;
    unless($irregular_v || $irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
    }   
    elsif($irregular_v){
        $b = "b" . lc($name);
        $f = "f" . lc($name); 
        $m = "m" . lc($name); 
    }
    elsif($irregular_bfm){
        $b = "b" . lc(substr($name, 1)); 
        $f = "f" . lc(substr($name, 1)); 
        $m = "m" . lc(substr($name, 1)); 
        $b = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "b"; 
        $f = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "f"; 
        $m = lc(substr($name, 1)) if lc(substr($name, 0, 1)) eq "m"; 
    }  
    format NAME_GAME = 
        @*, @*, bo-@* 
        $name, $name, $b 
        Banana-fana fo-@* 
        $f 
        Fee-fi-mo-@*
        $m
        @*!
        $name
.
    
    select(STDOUT);
    $~ = "NAME_GAME";
    write();  
}


MAIN:{
    my($name);
    $name = "Katie";  
    name_game($name); 
    print "\n"; 
    $name = "Adam";  
    name_game($name); 
    print "\n"; 
    $name = "Mary";  
    name_game($name); 
}
</code></pre>
<h3 id="sample-run-1">Sample Run</h3>
<pre><code class="shell">
$ perl perl/ch-2.pl
        Katie, Katie, bo-batie
        Banana-fana fo-fatie
        Fee-fi-mo-matie
        Katie!

        Adam, Adam, bo-badam
        Banana-fana fo-fadam
        Fee-fi-mo-madam
        Adam!

        Mary, Mary, bo-bary
        Banana-fana fo-fary
        Fee-fi-mo-ary
        Mary!
</code></pre>
<h3 id="notes-1">Notes</h3>
<p>My first comment is that I am a terrible singer and have never been able to reliably remember songs with rules like this at all, at any time of my life! Practically speaking that means I may have had to do more research on this part than one might expect. I did find an excellent reference (listed below) which detailed the rules for each case very clearly.</p>
<p>Perhaps the trickiest case in the one in which the name starts with a b, f, or m. For these you need to adjust the one specific <em>rewrite rule</em> which uses that letter. In the example above we see that Mary requires special handling and becomes <em>Fee-fi-mo-ary</em>.</p>
<p>To print the verses out I use a <a href="https://perldoc.perl.org/perlform">Perl Format</a>. Formats are not the most commonly used feature of Perl these days but still have some nice uses such as here where we want to define a simple template for plain text output. Formats can even be used to write to files, but here we just print to the console.</p>
<p>One Format trick which I have not used before is the use of a variable width field. Much of the documentation for Formats has to do with fixed width fields which can be centered, padded left, padded right, involve multiple lines, and so forth. A common case which is not typically well explained is one we need here. Names are of different lengths and may be followed by a comma or an exclamation point. Padding right adds unwanted space before the “,” or “!”. Padding left adds unwanted space before the name. Centering does both! The trick is to use <code>@*</code> for the field specifier in the Format definition. This will allow the value to be substituted in without any padding.</p>
<h2 id="references">References</h2>
<p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-105/">Challenge 105</a></p>
<p><a href="https://www.planetmath.org/NthRootByNewtonsMethod">nth root by Newton’s method</a></p>
<p><a href="https://thenamegame-generator.com/the-name-game-rules.html">Name Game Rules</a></p>
<p><a href="https://perldoc.perl.org/perlform">Perl Formats</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc105</id>
    <published>2021-03-28T11:28:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4523734777886205462</id>
    <published>2021-03-27T18:49:00.000+01:00</published>
    <updated>2021-03-27T18:49:10.026+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxiv) 20 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MSTROUT/App-opan-0.003003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::opan&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A CPAN overlay for darkpan and pinning purposes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.003003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.003002 was 1 year, 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.43 was 11 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9720' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9720&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 0.9718 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.16&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 4.14 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Markdent-0.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Markdent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An event-based Markdown parser toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.40&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.39 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.12&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 50&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.11 was 6 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.21' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.21&lt;/strong&gt; on 2021-03-20&lt;/li&gt;  &lt;li&gt;Votes: 82&lt;/li&gt;  &lt;li&gt;Previous version: 10.20 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210320' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210320&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.14&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 447&lt;/li&gt;  &lt;li&gt;Previous version: 9.12 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-4.02' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.02&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 4.00 was 1 month, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.17&lt;/strong&gt; on 2021-03-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.16 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.005003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.005003&lt;/strong&gt; on 2021-03-21&lt;/li&gt;  &lt;li&gt;Votes: 280&lt;/li&gt;  &lt;li&gt;Previous version: 2.004004 was 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RHANDOM/Net-Server-2.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Server&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Extensible Perl internet server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.010&lt;/strong&gt; on 2021-03-22&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 2.009 was 3 years, 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.032' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.032&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.029 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PETDANCE/Perl-Critic-1.140' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Critic&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Critique Perl source code for best-practices. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.140&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 111&lt;/li&gt;  &lt;li&gt;Previous version: 1.138 was 1 year, 2 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EZIMUEL/Search-Elasticsearch-7.712' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Search::Elasticsearch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The official client for Elasticsearch &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.712&lt;/strong&gt; on 2021-03-25&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 7.711001 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.44&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.42 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BAKERSCOT/String-Util-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;String::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - String processing utility functions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2021-03-26&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.31 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.23&lt;/strong&gt; on 2021-03-27&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.21 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.46&lt;/strong&gt; on 2021-03-24&lt;/li&gt;  &lt;li&gt;Votes: 92&lt;/li&gt;  &lt;li&gt;Previous version: 1.45 was 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4523734777886205462/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4523734777886205462"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiv-20-cpan-great-modules-released.html" title="(cccxxxiv) 20 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-159827276407573698</id>
    <published>2021-03-27T18:44:00.003+01:00</published>
    <updated>2021-03-27T18:44:38.493+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlx) metacpan weekly report - Hash::Flatten</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 52&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten"&gt;Hash::Flatten&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/03/27 17:43:05 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache2::SSI" target="_blank"&gt;Apache2::SSI&lt;/a&gt; - Apache2 Server Side Include&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::japerl" target="_blank"&gt;App::japerl&lt;/a&gt; - JPerl-again Perl glocalization scripting environment&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/LINQ" target="_blank"&gt;LINQ&lt;/a&gt; - &lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::DifferenceSet::Planar" target="_blank"&gt;Math::DifferenceSet::Planar&lt;/a&gt; - object class for planar difference sets&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; - run Perl script in MBCS encoding (not only CJK ;-)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; - Perl client for Playwright&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Elasticsearch::Cxn::NetCurl" target="_blank"&gt;Search::Elasticsearch::Cxn::NetCurl&lt;/a&gt; - A Cxn implementation which uses libcurl via Net::Curl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Typesense" target="_blank"&gt;Search::Typesense&lt;/a&gt; - Perl interface to Typesense search engine.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=255)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::opan" target="_blank"&gt;App::opan&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Applify" target="_blank"&gt;Applify&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI" target="_blank"&gt;CGI&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLI::Osprey" target="_blank"&gt;CLI::Osprey&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::ReverseDependencies" target="_blank"&gt;CPAN::ReverseDependencies&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Firebird" target="_blank"&gt;DBD::Firebird&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Eval::Closure" target="_blank"&gt;Eval::Closure&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::MakeMaker" target="_blank"&gt;ExtUtils::MakeMaker&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GDGraph" target="_blank"&gt;GDGraph&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::Flatten" target="_blank"&gt;Hash::Flatten&lt;/a&gt; (+3=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Escape" target="_blank"&gt;HTML::Escape&lt;/a&gt; (+2=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Parser" target="_blank"&gt;HTML::Parser&lt;/a&gt; (+2=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Jacode4e::RoundTrip" target="_blank"&gt;Jacode4e::RoundTrip&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Markdent" target="_blank"&gt;Markdent&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Open" target="_blank"&gt;Modern::Open&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::ReadWriteFork" target="_blank"&gt;Mojo::IOLoop::ReadWriteFork&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::Log::Log4perl" target="_blank"&gt;MojoX::Log::Log4perl&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=280)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AMQP::RabbitMQ" target="_blank"&gt;Net::AMQP::RabbitMQ&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Kafka" target="_blank"&gt;Net::Kafka&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=372)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter" target="_blank"&gt;Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Metrics::Simple" target="_blank"&gt;Perl::Metrics::Simple&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ph" target="_blank"&gt;ph&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Profiler::NYTProf" target="_blank"&gt;Plack::Middleware::Profiler::NYTProf&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Fork" target="_blank"&gt;Proc::Fork&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply" target="_blank"&gt;Reply&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Clipboard" target="_blank"&gt;Win32::Clipboard&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Sig" target="_blank"&gt;XML::Sig&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/159827276407573698/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/159827276407573698"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlx-metacpan-weekly-report.html" title="(cdlx) metacpan weekly report - Hash::Flatten"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5697688778325796745</id>
    <published>2021-03-27T18:35:00.000+01:00</published>
    <updated>2021-03-27T18:35:34.027+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-03-27 17:32:37 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66812474" target="_blank"&gt;Pass scalar and hash to subroutine in Perl&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66776916" target="_blank"&gt;Get unique elements from HoA values and print&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66766187" target="_blank"&gt;Perl: Fastest match of anything?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66770674" target="_blank"&gt;Perl - How to omit lines from a text file?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66752049" target="_blank"&gt;perl getting 0 instead of output&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66771201" target="_blank"&gt;exempting a piece of perl code from strict pragma&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66829616" target="_blank"&gt;How to send HTTP POST data in multipart/form-data to REST API in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66760565" target="_blank"&gt;Perl Template Toolkit - how to join / concat multiple variables (into one)&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66808414" target="_blank"&gt;How can I combine two patterns in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/66827633" target="_blank"&gt;Isolating hash values with same key inside an array, inside of an anonymous hash&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5697688778325796745/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlxxxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5697688778325796745"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5697688778325796745"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlxxxiii-stackoverflow-perl-report.html" title="(cdlxxxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Perl weekly challenge 105</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/03/perl-weekly-challenge-105.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10157</id>
    <published>2021-03-27T03:26:28Z</published>
    <updated>2021-03-27T04:01:21Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-105/james-smith/perl">Github</a></p>

<h3>Nth root</h3>
<p>You are given positive numbers $N and $k.</p>
<p>Write a script to find out the $Nth root of $k.</p>

<h4>The solution</h4>

<p>I decided that I would not go the easy way this week and just use the power function <code>**</code> i.e. <code>return $k**(1/$N)</code>.</p>

<p>Instead for integer values of $N, solve this with only using the simple mathematical operators <code>+, /, *, -, &lt;, &gt;</code></p>

<p>To do this we will use a divide and conquer solution, starting at the two ends of the interval we calculate the values of <em>x^N</em>, and then iterate reducing the interval in half - choosing the interval where the value of <em>x^N</em> is less than <em>k</em> at the left hand end & <em>x^N</em> is greater than <em>k</em>.</p>

<p>To do this we store the value of the ends of the interval as <em>l</em> and <em>r</em> respectively and computer the <em>Nth</em> power of each (<em>ln</em> & <em>rn</em>).</p>
<p>We then do the same for the midpoint <em>m = (l+r)/2</em></p>
<p>We replace the left values with the new mid values if <em>m^N > k</em>, and if not replace the right values with the mid values</p>
<p>The interval halves in size each time - so repeat until the gap is small..</p>

<pre><code>sub nth_root {
  my( $n, $k ) = @_;
  sub pow {
    my $res = 1;
    $res *= $_[0] foreach 1..$_[1];
    return $res;
  }
  my $l = 0;
  my $r = '1'.'0'x (1+ int(length(int $k)/$n) );
     $r = $k if $r>$k;
  my $m; # This is the midpoint...
  my($ln,$rn) = (1, pow($r,$n));
  while( $r-$l > 1e-10) {
    my $mn = pow($m = ($r+$l)/2,$n);
    if($mn<$k) {
      ($l,$ln) = ($m,$mn);
      next;
    }
    ($r,$rn) = ($m,$mn);
  }
  return sprintf '%0.8f',$m;
}</code></pre>

<p>You will note a quirky bit of code that defines the initial <em>r</em> - rather than choosing the right hand side of the interval we note that we can guess a better <em>r</em> based purely on the length of the string. e.g. when <em>N = 5</em>, we know that if <em>k &lt; 100_000</em> then the <em>Nth</em> route must be less than 10, if <em>k < 10_000_000_000</em> then the <em>Nth root</em> is less than 100.</p>

<p>We can extrapolate this by dividing the length of the string representation of <em>k</em> by <em>N</em> to get the approximate max value represented by 1 and a number of 0s.</p>

<h3>The name game</h3>
<p>I will leave you to read the description on the challenge itself or the wiki page <a href="https://en.wikipedia.org/wiki/The_Name_Game">https://en.wikipedia.org/wiki/The_Name_Game</a></p>

<p>The simple rule states that if your name starts with a consonant that is stripped and substituted in different places,</p>
<p>There are special rules for b, f, m,</p>
<p>If the word starts with vowels, you strip the vowels and the first consonant</p>
<p>There are also rules defined that you remove the first syllable - but as finding syllables is difficult I will avoid this.</p>

<p>We will use 2 nice features of Perl this week</p>
<ul>
  <li>The one I use quite a lot which is the regex modifier to return the replaced string<br />
 <em>But note $1 etc are defined as when doing a match so you can still use them, in this case we use it to handle the special cases where the letter removed is one of b, f or m.</em></li>
  <li>sprintf - with <code>%1$...</code> substitutions.<br />
<em>Normally we just use <code>%s</code> to specify where to insert each entry in the parameters into the substitution string - but you can specify which parameter goes where by add int n<code$</code> between the % and the definition.<br />
This allows us repeat substitution strings without duplicating them in the list passed in, and/or change the order of the substitution. This is really useful if you have a series of templates you wish to choose from.
</em>
  
<pre><code>
my $TEMPLATE = '%1$s, %1$s, bo-%3$s%2$s
Bonana-fanna fo-%4$s%2$s
Fee fi mo-%5$s%2$s
%1$s!
';
my $REGEX = '^[aeiou]*([bcdfghjklmnpqrstvwxyz])';

<p>print map { the_name_game( $_ ) }<br />
    qw(Katie Lucy James Bob<br />
       Fred Mike Aaron Abel);</p>

<p>sub the_name_game {<br />
  return sprintf $TEMPLATE,<br />
    $_[0], $_[0]=~s{$REGEX}{}ri,<br />
    map { $_ eq lc $1?'':$_ } qw(b f m);<br />
}<br />
</code></pre></p>]]>
        
    </content>
</entry>
  <entry>
  <title>LibUV Grant: March 2021 Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-libuv-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-03-26:/post/grant-report-libuv-2021-03</id>
  <published>2021-03-26T14:41:47</published>
  <updated>2021-03-26T14:41:47</updated>
  <summary>
  <![CDATA[
     Paul Evans' LibUV grant is starting to wrap up. He writes: I've been doing some CPAN releases now, most recent trying to fix a few MSWin32 bugs. I think we're in the final bits now of just trying to finish the thing off and actually get it working. It seems to be mostly fine on Linux now at least.  https://metacpan.org/release/PEVANS/UV-1.905-TRIAL 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Paul Evans' LibUV grant is starting to wrap up. He writes:</p>

<hr />

<p>I've been doing some CPAN releases now, most recent trying to fix a few
MSWin32 bugs. I think we're in the final bits now of just trying to
finish the thing off and actually get it working. It seems to be mostly
fine on Linux now at least.</p>

<p>https://metacpan.org/release/PEVANS/UV-1.905-TRIAL</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Raku CI Integration Bot Grant - Report March 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-raku-ci-bot-2021-03"/>
  <id>tag:news.perlfoundation.org,2021-03-26:/post/grant-raku-ci-bot-2021-03</id>
  <published>2021-03-26T14:33:09</published>
  <updated>2021-03-26T14:33:09</updated>
  <summary>
  <![CDATA[
     It is my pleasure to announce that the Grant Proposal: Raku CI integration bot has been approved, and Patrick has already started work on it. You can read his thoughts on the technical architecture and first progress here. I am looking forward to more great progress from Patrick. 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>It is my pleasure to announce that the <a href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot">Grant Proposal: Raku CI integration bot</a> has been approved, and Patrick has already started work on it.</p>

<p>You can <a href="https://dev.to/patrickbkr/hi-and-an-introduction-to-the-raku-ci-bot-3p3g">read his thoughts on the technical architecture and first progress here</a>.</p>

<p>I am looking forward to more great progress from Patrick.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>unzip using Archive::Any of Perl</title>
  <summary type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Archive::Any">Archive::Any</a> makes it easy to unzip a file using Perl only.
<p>
]]></summary>
  <updated>2021-03-25T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/unzip"/>  <id>https://perlmaven.com/unzip</id>
  <content type="html"><![CDATA[<p>
<a href="https://metacpan.org/pod/Archive::Any">Archive::Any</a> makes it easy to unzip a file using Perl only.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Call for Grants: March 2020 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_march_2020_round"/>
  <id>tag:news.perlfoundation.org,2021-03-23:/post/call_for_grants_march_2020_round</id>
  <published>2021-03-23T18:46:40</published>
  <updated>2021-03-23T18:46:40</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 April 2, 2021, UTC. We will publish the received applications, get community feedback through April 9th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 April 2, 2021, UTC. We will publish the received applications, get community feedback through April 9th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by April 3rd.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Which Version of Perl are you using?</title>
  <summary type="html"><![CDATA[<p>
A non-scientific poll to which 132 answered. Mostly with one, sometimes with 2 responses.
<p>
]]></summary>
  <updated>2021-03-23T15:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/perl-version-poll-2020-03"/>  <id>https://perlmaven.com/perl-version-poll-2020-03</id>
  <content type="html"><![CDATA[<p>
A non-scientific poll to which 132 answered. Mostly with one, sometimes with 2 responses.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>undef - defined - true -false</title>
  <summary type="html"><![CDATA[<p>
The <a href="/defined">defined</a> function checks if a variable is <a href="/undef">undef</a> or not.
This is different from being evaluated to <a href="/true">true</a> or <a href="/false">false</a>.
<p>
]]></summary>
  <updated>2021-03-23T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/undef-defined-true-false"/>  <id>https://perlmaven.com/undef-defined-true-false</id>
  <content type="html"><![CDATA[<p>
The <a href="/defined">defined</a> function checks if a variable is <a href="/undef">undef</a> or not.
This is different from being evaluated to <a href="/true">true</a> or <a href="/false">false</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>true</title>
  <summary type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to <a href="/false">false</a> or true in boolean context.
<p>
]]></summary>
  <updated>2021-03-23T08:00:02Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/true"/>  <id>https://perlmaven.com/true</id>
  <content type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to <a href="/false">false</a> or true in boolean context.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>false</title>
  <summary type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to false or <a href="/true">true</a> in boolean context.
<p>
]]></summary>
  <updated>2021-03-23T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/false"/>  <id>https://perlmaven.com/false</id>
  <content type="html"><![CDATA[<p>
There is no special <a href="/boolean-values-in-perl">boolean values</a> in Perl that would mean <b>false</b> or <b>true</b>.
There are certain values that evaluate to false or <a href="/true">true</a> in boolean context.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8921001561469365512</id>
    <published>2021-03-20T20:51:00.000+01:00</published>
    <updated>2021-03-20T20:51:34.061+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxxiii) 14 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/App-Cmd-0.333' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Cmd&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - write command line apps with less suffering &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.333&lt;/strong&gt; on 2021-03-14&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 0.332 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.032' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.032&lt;/strong&gt; on 2021-03-18&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.031 was 2 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.301001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.301001&lt;/strong&gt; on 2021-03-17&lt;/li&gt;  &lt;li&gt;Votes: 122&lt;/li&gt;  &lt;li&gt;Previous version: 0.300005 was 1 month, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Natural&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse informal natural language date/time strings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.12&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.11 was 5 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-1.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.43&lt;/strong&gt; on 2021-03-17&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/File-Which-1.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Which&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of the which utility as an API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.24&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.23 was 2 years, 2 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Getopt-Long-Descriptive-0.109' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long::Descriptive&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Getopt::Long, but simpler and more powerful &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.109&lt;/strong&gt; on 2021-03-16&lt;/li&gt;  &lt;li&gt;Votes: 46&lt;/li&gt;  &lt;li&gt;Previous version: 0.106 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.20&lt;/strong&gt; on 2021-03-14&lt;/li&gt;  &lt;li&gt;Votes: 82&lt;/li&gt;  &lt;li&gt;Previous version: 10.19 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.11&lt;/strong&gt; on 2021-03-20&lt;/li&gt;  &lt;li&gt;Votes: 447&lt;/li&gt;  &lt;li&gt;Previous version: 9.08 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.16' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.16&lt;/strong&gt; on 2021-03-18&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.15 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/MooseX-Getopt-0.75' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;MooseX::Getopt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A Moose role for processing command line options &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.75&lt;/strong&gt; on 2021-03-16&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.74 was 2 years, 5 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BDFOY/PerlPowerTools-1.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PerlPowerTools&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - BSD utilities written in pure Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.024&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.023 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.42&lt;/strong&gt; on 2021-03-17&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.40 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EHUELS/Test-BDD-Cucumber-0.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::BDD::Cucumber&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Feature-complete Cucumber-style testing in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.79&lt;/strong&gt; on 2021-03-19&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8921001561469365512/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiii-14-cpan-great-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8921001561469365512"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8921001561469365512"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cccxxxiii-14-cpan-great-modules.html" title="(cccxxxiii) 14 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6925465418911101600</id>
    <published>2021-03-20T20:48:00.004+01:00</published>
    <updated>2021-03-20T20:48:35.059+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlix) metacpan weekly report - GD::Graph</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 49&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/pod/GD::Graph"&gt;GD::Graph&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/03/20 19:45:51 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::lupapona" target="_blank"&gt;App::lupapona&lt;/a&gt; - a simple static Gemini server&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Avro" target="_blank"&gt;Avro&lt;/a&gt; - the official Perl API for the Apache Avro project's serialization and RPC framework&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode::Base2N" target="_blank"&gt;Encode::Base2N&lt;/a&gt; - fast base64, base32, base16 encode/decode functions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::GDAL::FFI" target="_blank"&gt;Geo::GDAL::FFI&lt;/a&gt; - A foreign function interface to GDAL&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Helpers::XS" target="_blank"&gt;List::Helpers::XS&lt;/a&gt; - Perl extension to provide some usefull functions with arrays&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RT::BugTracker" target="_blank"&gt;RT::BugTracker&lt;/a&gt; - Adds a UI designed for bug-tracking for developers to RT&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::TypedCodeRef" target="_blank"&gt;Types::TypedCodeRef&lt;/a&gt; - Type constraint for any typed subroutine.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sandy" target="_blank"&gt;App::Sandy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BSD::Resource" target="_blank"&gt;BSD::Resource&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Clicker" target="_blank"&gt;Chart::Clicker&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::GGPlot" target="_blank"&gt;Chart::GGPlot&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::DBI" target="_blank"&gt;Class::DBI&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=122)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::DPath" target="_blank"&gt;Data::DPath&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+2=136)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive" target="_blank"&gt;Data::Recursive&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date" target="_blank"&gt;Date&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Natural" target="_blank"&gt;DateTime::Format::Natural&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Pg" target="_blank"&gt;DateTime::Format::Pg&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::IPerl" target="_blank"&gt;Devel::IPerl&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Which" target="_blank"&gt;File::Which&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Firefox::Marionette" target="_blank"&gt;Firefox::Marionette&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FunctionalPerl" target="_blank"&gt;FunctionalPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/GD::Graph" target="_blank"&gt;GD::Graph&lt;/a&gt; (+3=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager" target="_blank"&gt;Imager&lt;/a&gt; (+1=61)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Imager::File::WEBP" target="_blank"&gt;Imager::File::WEBP&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::XS" target="_blank"&gt;JSON::XS&lt;/a&gt; (+1=109)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::relative" target="_blank"&gt;lib::relative&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Handler" target="_blank"&gt;Log::Handler&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MailTools" target="_blank"&gt;MailTools&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=82)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=447)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Runner" target="_blank"&gt;Parallel::Runner&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+2=163)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::TooMuchCode" target="_blank"&gt;Perl::Critic::TooMuchCode&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Fork" target="_blank"&gt;Proc::Fork&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Meta" target="_blank"&gt;Sub::Meta&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Quote" target="_blank"&gt;Sub::Quote&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Ago" target="_blank"&gt;Time::Ago&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=85)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6925465418911101600/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlix-metacpan-weekly-report-gdgraph.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6925465418911101600"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6925465418911101600"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/03/cdlix-metacpan-weekly-report-gdgraph.html" title="(cdlix) metacpan weekly report - GD::Graph"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Interview: Trying to Catch Paul "LeoNerd" Evans</title>
    <link rel="alternate" href="https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.leonerd.org.uk/"&gt;Paul &amp;ldquo;LeoNerd&amp;rdquo; Evans&lt;/a&gt;&lt;/strong&gt; is a
&lt;a href="https://metacpan.org/author/PEVANS"&gt;CPAN author&lt;/a&gt;,
&lt;a href="https://leonerds-code.blogspot.com/"&gt;blogger&lt;/a&gt;,
and &lt;a href="https://github.com/leonerd"&gt;core Perl contributor&lt;/a&gt;. He introduced the
&lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;experimental &lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;
in Perl 5.32 and the &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax in an upcoming version.&lt;/p&gt;

&lt;h2 id="tell-me-a-little-about-yourself-and-your-background-whatever-you-feel-comfortable-sharing"&gt;Tell me a little about yourself and your background; whatever you feel comfortable sharing.&lt;/h2&gt;

&lt;p&gt;Lets see—I&amp;rsquo;m going to do this in reverse chronological order.&lt;/p&gt;

&lt;p&gt;Currently I&amp;rsquo;m a self-employed contractor, splitting my time between Perl and other computery things, and electronics. Most of the jobs I&amp;rsquo;ve had before I did that were based on Perl, with the minor exception of a little Internet startup company called &amp;ldquo;Google&amp;rdquo;—
maybe you&amp;rsquo;ve heard of them? Sadly they don&amp;rsquo;t do much Perl there.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-did-you-first-get-into-programming-perl-and-then-later-hacking-on-perl-s-core"&gt;How did you first get into programming Perl, and then later hacking on Perl&amp;rsquo;s core?&lt;/h2&gt;

&lt;p&gt;I dabbled in a little amount of it at university, during my final year. When I ought to have been studying type systems and other academic stuff I found it much more interesting to be hacking on bits of C and Perl instead, much to the dismay of my supervisors. My first post-study job happened to be in Perl and I&amp;rsquo;ve just stuck with it ever since.&lt;/p&gt;

&lt;p&gt;The core hacking all came as a slow progression from writing Perl code, to writing modules, to the inevitable having to write bits of &lt;a href="https://perldoc.perl.org/perlxs"&gt;XS code&lt;/a&gt; for some of those modules. The deeper you dive into that area the more you find you have to understand how the internals of the interpreter work. The largest amount of time I spent on that was probably while making the &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; module—that has to have quite a tight in-depth integration with the interpreter core, in order to successfully suspend and resume running functions, which is the basis of how the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax all works.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="you-first-uploaded-the-syntax-keyword-try-module-to-cpan-in-2016-and-at-the-time-there-were-and-are-still-a-number-of-other-modules-with-similar-functionality-you-compared-their-differences-in-the-syntax-keyword-try-documentation-but-were-there-any-particular-issues-that-inspired-you-to-contribute-another-module"&gt;You first uploaded the Syntax::Keyword::Try module to CPAN in 2016, and at the time there were (and are still) a number of other modules with similar functionality. You compared their differences in the Syntax::Keyword::Try documentation, but were there any particular issues that inspired you to contribute another module?&lt;/h2&gt;

&lt;p&gt;Two reasons. The first reason I wrote it just for myself, was a learning exercise to see if I could understand and use this new-fangled &amp;ldquo;&lt;a href="https://perldoc.perl.org/perlapi#wrap_keyword_plugin"&gt;custom keyword&lt;/a&gt;&amp;rdquo; mechanism that was recently added to Perl. Once I had a proof-of-concept working, it didn&amp;rsquo;t take me long to work out how to write it &amp;ldquo;correctly&amp;rdquo;—in the sense that the body of the &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks were true blocks, and not closures-in-disguise like all of the pure Perl and even all of the custom syntax modules at the time were all doing. This meant it had a much ligher calling overhead, doesn&amp;rsquo;t interact with &lt;code&gt;@_&lt;/code&gt;, plays nicer with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt;/&lt;code&gt;redo&lt;/code&gt;, and all sorts of other advantages. From there it didn&amp;rsquo;t take me too long before I had something that I felt had real technical advantages than anything else that came before, so I tried to encourage its use. &lt;a href="irc://irc.freenode.org/perl"&gt;Freenode&amp;rsquo;s #perl channel&lt;/a&gt; in particular were very instrumental in helping that effort, adopting it in their recommendations to new users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="recently-you-ve-spearheaded-adding-native-try-catch-syntax-to-native-perl-and-released-the-feature-compat-try-module-to-offer-the-same-syntax-for-earlier-versions-currently-the-former-is-enabled-by-a-feature-guard-do-you-anticipate-a-time-when-this-will-no-longer-be-the-case-would-that-cause-issues-with-code-that-uses-other-try-catch-syntax-modules"&gt;Recently you&amp;rsquo;ve spearheaded adding native try/catch syntax to native Perl, and released the Feature::Compat::Try module to offer the same syntax for earlier versions. Currently the former is enabled by a feature guard; do you anticipate a time when this will no longer be the case? Would that cause issues with code that uses other try/catch syntax modules?&lt;/h2&gt;

&lt;p&gt;I think it will be quite a while yet before we can see a Perl that would enable it &lt;em&gt;by default&lt;/em&gt;, but I hope very soon it will make its way into the numbered version bundles. That is, I hope that simply&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.36&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be enough to enable the &lt;code&gt;try&lt;/code&gt; syntax, and if and when such a time comes that we decide to bump the major version to 7, that will continue to hold—merely saying&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v7;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be sufficient to get that—along with all the other fancy fun things I hope to see by that time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="how-do-you-envision-syntax-keyword-try-s-role-going-forward-will-it-be-a-testbed-for-future-native-perl-exception-features"&gt;How do you envision Syntax::Keyword::Try&amp;rsquo;s role going forward? Will it be a testbed for future native Perl exception features?&lt;/h2&gt;

&lt;p&gt;It already is just that. There are more features in Syntax::Keyword::Try than the &amp;ldquo;minimal viable product&amp;rdquo; part that I ported to core in &lt;a href="https://github.com/Perl/perl5/releases/tag/v5.33.7"&gt;5.33&lt;/a&gt;. Two main things come to mind—the typed exception dispatch, and the &lt;code&gt;finally&lt;/code&gt; blocks. I&amp;rsquo;ve lately been looking at some &lt;code&gt;defer&lt;/code&gt; syntax for a more general-purpose version of &lt;code&gt;finally&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The question of how to handle typed dispatch is a more general one, which needs addressing in a wider language context—perhaps including considerations of signatures, &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt; syntax, variable or object slot type assertions, and so on&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;h2 id="what-s-next-for-you-aside-from-exceptions-in-perl-i-ve-been-reading-about-the-work-you-ve-been-doing-with-curtis-ovid-poe-on-and-your-object-pad-module-would-you-like-to-speak-on-that"&gt;What&amp;rsquo;s next for you aside from exceptions in Perl? I&amp;rsquo;ve been reading about the work you&amp;rsquo;ve been doing with Curtis &amp;ldquo;Ovid&amp;rdquo; Poe on and your Object::Pad module—would you like to speak on that?&lt;/h2&gt;

&lt;p&gt;Yes, object systems seem to be of interest currently—so part of my thoughts are about &lt;a href="https://github.com/Ovid/Cor/wiki"&gt;Corinna&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt;. But I&amp;rsquo;m also working on a number of other things. &lt;code&gt;defer&lt;/code&gt; I already mentioned above. Additionally I have some thoughts in the direction of &lt;code&gt;match&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;, and a few other bits and pieces. These would mostly be done as CPAN modules at first to experiment with the ideas. I mentioned a lot of them in my recent &lt;a href="https://fosdem.org/2021/schedule/event/perl_in_2025/"&gt;&amp;ldquo;Perl in 2025&amp;rdquo; talk at FOSDEM&lt;/a&gt;.&lt;/p&gt;
</content>
    <id>https://perl.com/article/interview-trying-to-catch-paul-leonerd-evans/</id>
    <published>2021-03-18T16:24:37Z</published>
    <updated>2021-03-18T16:24:37Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 103: Astrology and Audio</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/14#pwc103" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a year $year. Write a script to determine the Chinese Zodiac for the given year $year.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a year $year.
# Write a script to determine the Chinese Zodiac for the given year $year
##
use constant ELEMENTS =&gt; {1 =&gt; q/Wood/, 2 =&gt; q/Fire/, 3 =&gt; q/Earth/, 4 =&gt; q/Metal/, 0 =&gt; q/Water/};
use constant ANIMALS =&gt;  {1 =&gt; q/Rat/, 2 =&gt; q/Ox/, 3 =&gt; q/Tiger/, 4 =&gt; q/Rabbit/, 5 =&gt; q/Dragon/, 6 =&gt; q/Snake/, 7 =&gt; q/Horse/, 8 =&gt; q/Goat/, 9 =&gt; q/Monkey/, 10 =&gt; q/Rooster/, 11 =&gt; q/Dog/, 0 =&gt; q/Pig/}; 

sub chinese_zodiac{
    my($year) = @_;
    return ELEMENTS-&gt;{$year % 5} . " " . ANIMALS-&gt;{($year + 9) % 12};    
} 

MAIN:{
    my($YEAR);
    $YEAR = 2017;
    print chinese_zodiac($YEAR) . "\n";
    $YEAR = 1938;
    print chinese_zodiac($YEAR) . "\n";
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Fire Rooster
Earth Tiger
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;When I first saw the problem statement for this part of the challenge I took a look at the cited Wikipedia article, but it just seemed like a real slog of a read. So I decided to just work backwards from the examples given! Pretty much this seems to boil down to a straightforward modular arithmetic problem. The values are all known and so I hard code then with &lt;code&gt;use constant&lt;/code&gt; and then use them directly.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a program to output which file is currently playing.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub song_times{
    my($file_name) = @_; 
    my %song_times;
    my @song_order;
    my $length = 0; 
    my $index = 0;  
    if(!$file_name){
        while(&lt;DATA&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$index] =  $song; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    else{
        open(FILE, $file_name); 
        while(&lt;FILE&gt;){
            chomp; 
            my($time, $song) = split(/,/);       
            $length += $time; 
            $song_order[$song] =  $index; 
            $song_times{$song} =  $time; 
            $index++; 
        } 
    } 
    return [\%song_times, \@song_order, $length];   
}

sub now_playing{
    my($start_time, $current_time, $file_name) = @_; 
    my($song_times, $song_order, $length_millis);
    $current_time = time() if !$current_time; 
    ($song_times, $song_order, $length_millis) = @{song_times()} if $file_name;   
    ($song_times, $song_order, $length_millis) = @{song_times($file_name)} if !$file_name;   
    my $time_playing = $current_time - $start_time;
    my $cycles = ($time_playing * 1000) / $length_millis;  
    my $current_cycle_millis = ($cycles - int($cycles)) * $length_millis;  
    my $seek_time = 0; 
    for my $song (@{$song_order}){
        $seek_time += $song_times-&gt;{$song};
        if($seek_time &gt; $current_cycle_millis){
            my $position = ($song_times-&gt;{$song} - ($seek_time - $current_cycle_millis)) / 1000; 
            my $hours = int($position/3600);
            my $minutes = int(($position % 3600) / 60);
            my $seconds = int(($position % 3600) % 60);
            $position = sprintf("%02d", $hours) . ":" . sprintf("%02d", $minutes) . ":" . sprintf("%02d", $seconds);    
            return ($song, $position);  
        }   
    }  
}  

MAIN:{
    my($song, $position) =  now_playing(1606134123, 1614591276);   
    print "$song\n$position\n";  
}  

__DATA__
1709363,"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
1723781,"Les Miserables Episode 2: Javert (broadcast date: 1937-07-30)"
1723781,"Les Miserables Episode 3: The Trial (broadcast date: 1937-08-06)"
1678356,"Les Miserables Episode 4: Cosette (broadcast date: 1937-08-13)"
1646043,"Les Miserables Episode 5: The Grave (broadcast date: 1937-08-20)"
1714640,"Les Miserables Episode 6: The Barricade (broadcast date: 1937-08-27)"
1714640,"Les Miserables Episode 7: Conclusion (broadcast date: 1937-09-03)"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
"Les Miserables Episode 1: The Bishop (broadcast date: 1937-07-23)"
00:10:24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I have to say that I found this deceptively harder to implement than it first appears! I suppose that is always true when working with time.&lt;/p&gt;
&lt;p&gt;In the spirit of good sportsmanship wrote the code to fit the specification given, but then allow for defaults, such as reading from &lt;code&gt;&amp;lt;DATA&amp;gt;&lt;/code&gt; and using the value of &lt;code&gt;time()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way this works here is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The file list is read in and the times of the songs and the total length of the whole playlist is saved.&lt;/li&gt;
&lt;li&gt;We find out where in the playlist “cycle” we are.&lt;/li&gt;
&lt;li&gt;Given the time of the cycle we “seek” to the position of the current song.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-103/"&gt;Challenge 103&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Chinese_zodiac"&gt;Chinese Zodiac&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc103</id>
    <published>2021-03-14T16:46:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Why I wrote Net::Google::CivicInformation</title>
    <link rel="alternate" href="https://perl.com/article/why-i-wrote-net-google-civicinformation/" type="text/html"/>
    <content type="html">

&lt;p&gt;Before I became a computer programmer, I tried my hand at being a human programmer, in the form of a wordsmith, as I called myself then. I had various jobs as a writer, editor, translator and journalist, but I met with little success, for two main reasons. In those days you needed a publisher to find your work interesting enough to publish before anyone could read it, and that was a pretty high bar. And in the second place, it was difficult to get the humans to react to the content I wrote (I&amp;rsquo;m still exercised that the movie reviewer would get more letters to the editor than I did after a political exposé that took a month to produce).&lt;/p&gt;

&lt;p&gt;I still remember the moment of awe and inspiration in early 1994 or so, when after acquiring a sparkly new i286 PC at Circuit City, I discovered the World Wide Web and its promise of a world free of publishers and constraining editors. I jumped right in and became one of the first &amp;ldquo;webmasters,&amp;rdquo; which led to a job where I needed to learn Perl. Over a short time I began to thrill more at the construction of the engine to publish the content than at the creating of it. I still had the barrier-free entry point, and as to my second gripe &amp;hellip; well, I found that computers respond much more predictably to my writing than humans ever did.&lt;/p&gt;

&lt;p&gt;Fast forward almost 25 years and lots of things have changed, but I still get an itch scratched by building &amp;ldquo;websites.&amp;rdquo; Of course now they are called REST APIs or webapps or microservices or whatever the newest term is, and I deliver mostly JSON data packets to other computers inside big organizations—it&amp;rsquo;s been 20 years since I used CGI.pm—but I&amp;rsquo;m very blessed to have had a long career in the same field with fast-evolving technologies, supported throughout by Perl and its amazing community of contributors.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;d think maybe that after spending all week building APIs at work I&amp;rsquo;d be sated, but last weekend found me hankering for a new project, something outside work, but using my expertise, and something that could have real value for other people. I also specifically wanted to see if I could provide for the CPAN a library to interface to a useful public API. I&amp;rsquo;ve contributed a handful of insignificant distributions over the years, and found it to be very satisfying and also that it forces me to up my game as far as quality control and attention to detail. Yet I&amp;rsquo;d never found an opportunity to contribute a module in the area I know best.&lt;/p&gt;

&lt;p&gt;Usually all the best ideas are taken, of course, especially when it comes to the CPAN. It seemed there was a client for every API you could think of, but eventually I stumbled upon one that I found to be super-cool, and unsupported in Perl! The &lt;a href="https://developers.google.com/civic-information"&gt;Google Civic Information API&lt;/a&gt; provides extensive contact information for all elected officials from head of state down to county tax collector for any US address.&lt;/p&gt;

&lt;h2 id="silence-betokens-consent"&gt;Silence betokens consent&lt;/h2&gt;

&lt;p&gt;Like many of you, I suppose, I am still somewhat shell-shocked at the sustained assault on democracy and democratic participation that has been going on lately, not to mention that so many elected &amp;ldquo;leaders&amp;rdquo; seem to be insulated from the people. I also considered the COVID pandemic—not just its awful toll and the crass incompetence of the government response, but also how it has made us all much more isolated from each other, and how technologies that bring people together are even more important now that, for example, you can&amp;rsquo;t readily show up with a neighborhood community group to a crowded county board meeting to make your views heard. But silence betokens consent, and if our elected officials don&amp;rsquo;t hear from us they will just continue to do what they do.&lt;/p&gt;

&lt;p&gt;With all that in mind I set to creating a Perl client for the API. The first step was to obtain an auth token, which Google provides to developers for free (with a limit on daily queries). Authentication is extremely simple, so using &lt;a href="https://metacpan.org/pod/HTTP::Tiny"&gt;HTTP::Tiny&lt;/a&gt; I quickly had a client in my module that could connect to the API and make queries. Because elected officials&amp;rsquo; contact information is only one thing the API provides, I made a parent class &lt;a href="https://metacpan.org/pod/Net::Google::CivicInformation"&gt;Net::Google::CivicInformation&lt;/a&gt; and subclass &lt;a href="https://metacpan.org/pod/Net::Google::CivicInformation::Representatives"&gt;Net::Google::CivicInformation::Representatives&lt;/a&gt; handling the representatives-related code. This will allow me or other authors to write sibling subclasses for other endpoints in future.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a portion of the subclass for fetching Representatives data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;package&lt;/span&gt; Net::Google::CivicInformation::Representatives;

&lt;span style="color:#66d9ef"&gt;our&lt;/span&gt; $VERSION &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1.02&amp;#39;&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; strict;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; warnings;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.10&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Carp &lt;span style="color:#e6db74"&gt;&amp;#39;croak&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Function::Parameters;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; JSON::MaybeXS;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Try::Tiny;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Types::Common::String &lt;span style="color:#e6db74"&gt;&amp;#39;NonEmptyStr&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; URI;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Moo;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; namespace::clean;

extends &lt;span style="color:#e6db74"&gt;&amp;#39;Net::Google::CivicInformation&amp;#39;&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;##&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_build__api_url&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#39;representatives&amp;#39;&lt;/span&gt;}

&lt;span style="color:#75715e"&gt;##&lt;/span&gt;
method representatives_for_address (NonEmptyStr $address) {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $uri &lt;span style="color:#f92672"&gt;=&lt;/span&gt; URI&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;( $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;_api_url );
    $uri&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;query_form( address &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $address, key &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;api_key );

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $call &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $self&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;_client&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get( $uri );
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $response;

    &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The parent class has the &lt;code&gt;api_url&lt;/code&gt; attribute whose coercion prepends the root URL to the value returned by the subclasses&amp;rsquo; builder override. Note the use of &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt; for signatures and &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt; for type validation, which reduce the subroutine boilerplate nicely.&lt;/p&gt;

&lt;p&gt;Most of the work in creating the client distribution was in deciding how to marshal and reformat the extensive JSON data structure returned by Google. The results are organized into &lt;a href="http://docs.opencivicdata.org/en/latest/proposals/0002.html"&gt;Open Civic Data Divisions&lt;/a&gt;, an international standard adopted by Google for its service. An OCD Division ID can be as generic as &lt;code&gt;ocd-division/country:us&lt;/code&gt; or as specific as &lt;code&gt;ocd-division/country:us/state:ny/place:new_york/council_district:36&lt;/code&gt;. Google provides filtering on the data sets but I chose to use a high-level endpoint that returns all levels of officials for a single specific address (although a zip code alone works most of the time as well).&lt;/p&gt;

&lt;p&gt;After a few attempts I had it working in a simple way that was pleasing to me as a consumer of the module, and I documented the arrayref of hashrefs it would return representing the, um, representatives. I wrote some tests and bundled up the distribution and uploaded it to PAUSE.&lt;/p&gt;

&lt;h2 id="setting-up-the-webservice"&gt;Setting up the webservice&lt;/h2&gt;

&lt;p&gt;The next step was to put the new client to use, and a public-facing web app seemed the obvious choice. I&amp;rsquo;ve learned over the years that the majority of people still think of a .com domain as most inviting, and that a readable name is key. I settled on &lt;strong&gt;ContactMyReps&lt;/strong&gt; for the name, registered the &lt;a href="https://contactmyreps.com"&gt;contactmyreps.com&lt;/a&gt; domain, and pointed it at my server. At work I use &lt;a href="https://metacpan.org/pod/Mojolicious"&gt;Mojolicious&lt;/a&gt; but I far prefer &lt;a href="https://metacpan.org/pod/Dancer2"&gt;Dancer2&lt;/a&gt;—it feels much more light weight and flexible and Perlish to me.&lt;/p&gt;

&lt;p&gt;The POST route handler for the lookup query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;post &lt;span style="color:#e6db74"&gt;&amp;#39;/find-by-address&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; params;

    &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( &lt;span style="color:#f92672"&gt;not&lt;/span&gt; $params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address} ) {
        send_error(&lt;span style="color:#e6db74"&gt;&amp;#39;Error: address is required.&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;400&lt;/span&gt; );
    }

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $client &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Net::Google::CivicInformation::Representatives&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %result &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ( address &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address} );

    &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $response &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $client&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;representatives_for_address($params&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{address});

    &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ( $response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{error} ) {
        $result{error} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{error};
    }
    &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
        $result{officials} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; decode_utf8(encode_json($response&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{officials}));
    }

    &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; template &lt;span style="color:#e6db74"&gt;&amp;#39;find-by-address&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;\&lt;/span&gt;%result;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The backend side of the webapp was done in an hour, and then I set to the presentation. It took a while but I came up with a design that seemed functional and aesthetically acceptable. After testing locally I was ready to deploy, and after creating a new TLS cert and updating the &lt;code&gt;Apache&lt;/code&gt; config, the site was up and running. (The source code is available &lt;a href="https://github.com/1nickt/ContactMyReps"&gt;on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perl.com/images/why_i_wrote_net_google_civicinformation/expanded.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I sent the link to the to a couple of friends to see what they thought, and posted to &lt;a href="http://blogs.perl.org/users/1nickt/2021/02/who-you-gonna-call-perl-client-and-website-for-google-civic-information-api.html"&gt;blogs.perl.org&lt;/a&gt; to get some live testing, and was pleased when other people started using the site.&lt;/p&gt;

&lt;h2 id="wrapping-up"&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Having conceived of and implemented the idea in less than 24 hours, I was pretty exhilarated and on a roll. I decided that if a thing was worth doing, it was worth doing well, so I signed up for a few hundred dollars in Google advertising to promote the site next to relevant search results. I also set up a Buy Me a Coffee account and placed a button on the search results display. It costs about $1.20 to buy a click to the site, so I figure if 10% of the visitors contribute something, they&amp;rsquo;ll pay for the advertising to reach new audiences and the thing will be self-sustaining.&lt;/p&gt;

&lt;p&gt;All in all it was a fun way to spend a winter weekend. The service is online at &lt;a href="https://contactmyreps.com"&gt;https://contactmyreps.com&lt;/a&gt; if you&amp;rsquo;d like to check it out!&lt;/p&gt;
</content>
    <id>https://perl.com/article/why-i-wrote-net-google-civicinformation/</id>
    <published>2021-03-09T19:35:09Z</published>
    <updated>2021-03-09T19:35:09Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge 102: Threads and Recursion</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/03/07#pwc102" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to generate all Rare Numbers of size &lt;code&gt;$N&lt;/code&gt; if any exist.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Thread;
use constant THREAD_COUNT =&gt; 4;

sub rare_number_check{
    my($lower, $upper) = @_;
    my @rares; 
    {
        my $r = $lower;
        my $r1 = reverse($r);  
        if($r &gt; $r1){
            my $rs = sqrt($r + $r1);  
            my $r1s = sqrt($r - $r1);  
            if($rs !~ m/\./ &amp;&amp; $r1s !~ m/\./){
                push @rares, $lower; 
            } 
        } 
        $lower++; 
        redo unless $lower &gt; $upper;
    }  
    return \@rares;
}

sub rare_number{
    my($n) = @_;
    my @rares; 
    my $lower = "1" . 0 x ($n - 1);
    my $upper = "1" . 9 x ($n - 1);
    my $increment = $lower;
    {
        my @threads;
        for(1 .. THREAD_COUNT){
            my $t = Thread-&gt;new(\&amp;rare_number_check, $lower, $upper); 
            push @threads, $t;
            $lower = $upper + 1;
            $upper = $lower + $increment - 1;  
            last if(length($upper) == ($n + 1)); 
        }
        foreach my $t (@threads){
            my $rares = $t-&gt;join();
            push @rares, @{$rares}; 
        }  
        redo unless(length($upper) == ($n + 1)); 
    }
    return \@rares;  
}

MAIN:{
    my($N);
    $N=2;
    my $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
    $N=6;
    $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
    $N=9;
    $rares = rare_number($N); 
    print "$N digits: " . join(" ", @{$rares}) . "\n";
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2 digits: 65
6 digits: 621770
9 digits: 281089082
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My approach here is &lt;em&gt;brute force&lt;/em&gt;, but with a slight twist. I parallelize the computations by using &lt;a href="https://perldoc.perl.org/threads"&gt;Threads&lt;/a&gt;. I’ve used Threads in the past, for example in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/18"&gt;Challenge 008&lt;/a&gt; Threads were used to compute Perfect Numbers. The search for Perfect Numbers bears enough similarity to the current problem with Rare Numbers that the code from Challenge 008 will also be similar to this week’s code.&lt;/p&gt;
&lt;p&gt;There are four CPU cores on the system I am running this code on. We can create any number of Threads that we need, of course, but Perl Threads are a special sort of “thread” in that they create new copies of the running interpreter and so consume a bit more memory than the sort of light weight threads you may learn about in C or Java. In the interest of conserving memory, and to avoid having multiple &lt;em&gt;interpreter threads&lt;/em&gt; running on the same core we’ll just create no more than four Threads at a time. &lt;em&gt;Note: Ultimately it is the OS which schedules where things run but, generally speaking, four threads on a four core system will each run on individual cores.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can demonstrate this to ourselves by increasing the number of threads beyond the number of cores and not seeing an improvement in execution time.&lt;/p&gt;
&lt;p&gt;Each Thread will get a slice of the search space. Each slice is of size &lt;code&gt;10 ** ($N - 1)&lt;/code&gt;. Threads run &lt;code&gt;sub rare_number_check&lt;/code&gt; which implements the definition of a Rare Number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I chose to use a bare block with &lt;a href="https://perldoc.perl.org/functions/redo"&gt;redo&lt;/a&gt;. This is purely a matter of style and aesthetics. I’d argue that in this case it is more readable than the equivalent &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; loops would be.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub rare_number&lt;/code&gt; which generates and co-ordinates the Threads also uses redo for similar reasons.&lt;/li&gt;
&lt;li&gt;Interestingly Perl is clever enough to return a integer with no decimal part in the case of a perfect square! Checking to see if we have a perfect square then becomes a matter of checking to see if the value returned by &lt;a href="https://perldoc.perl.org/functions/sqrt"&gt;sqrt&lt;/a&gt; contains a decimal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer &lt;code&gt;$N&lt;/code&gt;. Write a script to produce hash counting string of that length.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub hash_counting_string{
    my($n) = @_;
    return "" if $n == 0; 
    return "#" if $n == 1; 
    my $h = "$n#";  
    return hash_counting_string($n - length($h)) . $h;  
}

MAIN:{
    print hash_counting_string(1). "\n";
    print hash_counting_string(2). "\n";
    print hash_counting_string(3). "\n";
    print hash_counting_string(10). "\n";
    print hash_counting_string(14). "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 
#
2#
#3#
#3#5#7#10#
2#4#6#8#11#14#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is what I consider to be a nice clean recursive implementation. When I first saw Part 2 it seemed a bit more complicated than it would later prove to be. My thought process was along the lines of “I am not sure how I would do this in Perl, and I have no idea of how this would go in Prolog either!” Often times I will rely on the insights gained by doing it in one to aid the implementation of the other. In times like this, with no immediately clear solution, I prefer to start off in Perl, and write it in a way which would allow for reproduction in Prolog. Then, as necessary, remove any vestiges of the solution’s origins by conforming to idiomatic Prolog by ensuring things are done declaratively, logically.&lt;/p&gt;
&lt;p&gt;This is actually a long acknowledged use of Perl: &lt;em&gt;algorithm development.&lt;/em&gt; If you see the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/03/07"&gt;Prolog solution for Part 2&lt;/a&gt; you can detect the obvious origins!&lt;/p&gt;
&lt;p&gt;As far as this solution in Perl, perhaps the main “trick” is that we must account for the length of the numeral. So, for example, “14#” consumes three characters and so the next time through we need to generate the hash count for 11 = 14 - 3.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-102/"&gt;Challenge 102&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc102</id>
    <published>2021-03-07T16:28:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Feb 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/03/01/list-of-new-cpan-distributions-feb-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-HaveWebsite-0.001">Acme-CPANModules-HaveWebsite</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that have their own website</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-Sudoku-0.001">Acme-CPANModules-Sudoku</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sudoku-related modules on CPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GSG/Algorithm-Backoff-RetryTimeouts-v1.0.0">Algorithm-Backoff-RetryTimeouts</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>A backoff-style retry algorithm with adjustable timeout support</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DONGXU/Alien-LibJQ-0.01">Alien-LibJQ</a></td>
<td><a href="https://metacpan.org/author/DONGXU">DONGXU</a></td>
<td>0.01</td>
<td>Build libjq library (<a href="https://stedolan.github.io/jq/" rel="nofollow">https://stedolan.github.io/jq/</a>)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BDFOY/Antsy-0.901">Antsy</a></td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>0.901</td>
<td>Streaming ANSI escape sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYMKAT/App-FilePacker-0.001">App-FilePacker</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.001</td>
<td>Embed a self-extracting tarball in a Perl module.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-StatisticsUtils-0.001">App-StatisticsUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/CGI-remote_addr-0.03">CGI-remote_addr</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>Enhanced version of CGI.pm's "remote_addr()"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKAJI/CPAN-02Packages-Search-0.001">CPAN-02Packages-Search</a></td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>0.001</td>
<td>Search packages in 02packages.details.txt</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Cobol-Compiler-0.1.1">Cobol-Compiler</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>a cobol compiler</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/POLETTIX/Command-Template-0.001">Command-Template</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>A template to build command line arrays, and run them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GSG/DBIx-Class-Helper-ResultSet-MySQLHacks-v1.0.0">DBIx-Class-Helper-ResultSet-MySQLHacks</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>Useful MySQL-specific operations for DBIx::Class</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GEEKRUTH/DBIx-Class-Schema-ResultSetNames-1.000">DBIx-Class-Schema-ResultSetNames</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.000</td>
<td>Create resultset accessors from table names</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GSG/DBIx-ParseError-MySQL-v1.0.0">DBIx-ParseError-MySQL</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v1.0.0</td>
<td>Error parser for MySQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GEEKRUTH/Dancer2-Plugin-DBIx-Class-1.000">Dancer2-Plugin-DBIx-Class</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.000</td>
<td>syntactic sugar for DBIx::Class in Dancer2, optionally with DBIx::Class::Schema::ResultSetNames</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Debian-DEP12-0.1.0">Debian-DEP12</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>interface to Debian DEP 12 format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/DuckCurses-0.1.1">DuckCurses</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Duck Tales game using curses library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ECHERNOF/Excel-Grinder-1.0">Excel-Grinder</a></td>
<td><a href="https://metacpan.org/author/ECHERNOF">ECHERNOF</a></td>
<td>1.0</td>
<td>Import/export plain Excel (XLSX) files as simply as possible.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Finance-ID-KSEI-0.000">Finance-ID-KSEI</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000</td>
<td>Get information from KSEI (Kustodian Sentral Efek Indonesia) (Indonesian Central Securities Depository)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASOKOLOV/GooCanvas2-CairoTypes-0.001">GooCanvas2-CairoTypes</a></td>
<td><a href="https://metacpan.org/author/ASOKOLOV">ASOKOLOV</a></td>
<td>0.001</td>
<td>Bridge between GooCanvas2 and Cairo types</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ECHERNOF/Google-ISBNNumbers-1.00">Google-ISBNNumbers</a></td>
<td><a href="https://metacpan.org/author/ECHERNOF">ECHERNOF</a></td>
<td>1.00</td>
<td>Retrieve book info by ISBN number</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Graph-Line-0.1.0">Graph-Line</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>Generate line graphs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Gzip-Libdeflate-0.00_01">Gzip-Libdeflate</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Perl interface to libdeflate</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Gzip-Zopfli-0.00_01">Gzip-Zopfli</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ESTRELOW/HTTP-Request-Webpush-0.11">HTTP-Request-Webpush</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>0.11</td>
<td>HTTP Request for web push notifications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Image-PNG-Data-0.00_01">Image-PNG-Data</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>manipulate the image data part of PNGs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TDRUGEON/Iterator-Merger-0.60">Iterator-Merger</a></td>
<td><a href="https://metacpan.org/author/TDRUGEON">TDRUGEON</a></td>
<td>0.60</td>
<td>an iterator to efficiently merge sorted iterators</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEAM/Log-Any-Adapter-Coderef-0.001">Log-Any-Adapter-Coderef</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>Provide stacktrace and other information to generic Log::Any handlers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LDILLEY/Minecraft-ServerStatus-1.0.1">Minecraft-ServerStatus</a></td>
<td><a href="https://metacpan.org/author/LDILLEY">LDILLEY</a></td>
<td>v1.0.1</td>
<td>A Minecraft server status checker</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-Features-0.1.0">Module-Features</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Define features for modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-Features-TextTable-0.001">Module-Features-TextTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Features of modules that generate text tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JBERGER/Mojo-IOLoop-Delay-8.74">Mojo-IOLoop-Delay</a></td>
<td><a href="https://metacpan.org/author/JBERGER">JBERGER</a></td>
<td>8.74</td>
<td>(DISCOURAGED) Promises/A+ and flow-control helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCESANO/Mojo-Response-JSON-Path-0.001">Mojo-Response-JSON-Path</a></td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>0.001</td>
<td>use JSON::Path for searching JSON responses</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCESANO/Mojolicious-Plugin-Minion-Starter-0.001">Mojolicious-Plugin-Minion-Starter</a></td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>0.001</td>
<td>start/stop minion workers with the Mojolicious server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/MooX-Clone-0.01">MooX-Clone</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.01</td>
<td>Make Moo objects clone-able</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VVELOX/Net-Connection-FreeBSD_sockstat-0.0.1">Net-Connection-FreeBSD_sockstat</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>Creates Net::Connection objects using sockstat on FreeBSD.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/Net-Curl-Easier-0.01">Net-Curl-Easier</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Convenience wrapper around Net::Curl::Easy</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TONKIN/Net-Google-CivicInformation-0.01">Net-Google-CivicInformation</a></td>
<td><a href="https://metacpan.org/author/TONKIN">TONKIN</a></td>
<td>0.01</td>
<td>client for the Google Civic Information API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABRAXXA/Net-Silverpeak-Orchestrator-0.001001">Net-Silverpeak-Orchestrator</a></td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>0.001001</td>
<td>Silverpeak Orchestrator REST API client library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DIONYS/Path-Tiny-Archive-Zip-0.001">Path-Tiny-Archive-Zip</a></td>
<td><a href="https://metacpan.org/author/DIONYS">DIONYS</a></td>
<td>0.001</td>
<td>Zip/unzip add-on for file path utility</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Perinci-Manual-0.001">Perinci-Manual</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Extra documentation for Perinci</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/Perl-Critic-Policy-ProhibitImplicitImport-0.000001">Perl-Critic-Policy-ProhibitImplicitImport</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Prefer symbol imports to be explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/Promise-AsyncAwait-0.01">Promise-AsyncAwait</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Async/await with promises</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JDEGUEST/Regexp-Common-Apache2-v0.1.0">Regexp-Common-Apache2</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>Apache2 Expressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SRI/SQL-Abstract-Pg-1.0">SQL-Abstract-Pg</a></td>
<td><a href="https://metacpan.org/author/SRI">SRI</a></td>
<td>1.0</td>
<td>PostgreSQL features for SQL::Abstract</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TEODESIAN/Selenium-Client-1.0">Selenium-Client</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1.0</td>
<td>Module for communicating with WC3 standard selenium servers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PMB/Sentry-SDK-0.01">Sentry-SDK</a></td>
<td><a href="https://metacpan.org/author/PMB">PMB</a></td>
<td>0.01</td>
<td>Blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/POLETTIX/Test-CLI-0.001">Test-CLI</a></td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>0.001</td>
<td>Testing command-line invocations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WYANT/Test-Prereq-Meta-0.000_90">Test-Prereq-Meta</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.000_90</td>
<td>Test distribution prerequisites against meta data.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YLAVOIE/Test2-Plugin-Feature-0.001102-TRIAL">Test2-Plugin-Feature</a></td>
<td><a href="https://metacpan.org/author/YLAVOIE">YLAVOIE</a></td>
<td>0.001102</td>
<td>Plugin to allow testing Pherkin files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YLAVOIE/Test2-Plugin-pgTAP-0.001100-TRIAL">Test2-Plugin-pgTAP</a></td>
<td><a href="https://metacpan.org/author/YLAVOIE">YLAVOIE</a></td>
<td>0.001100</td>
<td>Plugin to allow testing pgTAP files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Text-Match-20201221">Text-Match</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20201221</td>
<td>Match text question against possible answer strings</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-More-0.009">Text-Table-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.009</td>
<td>Generate text table with simple interface and many options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-Span-0.001">Text-Table-Span</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Text::Table::Tiny + support for column/row spans</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Trav-Dir-0.00_01">Trav-Dir</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Traverse directories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Bulk-20210226">Tree-Bulk</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210226</td>
<td>Bulk Tree operations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Random-Secure-0.001">UUID-Random-Secure</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Like UUID::Random, but uses Math::Random::Secure for random numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GRYPHON/Unit-Duration-1.01">Unit-Duration</a></td>
<td><a href="https://metacpan.org/author/GRYPHON">GRYPHON</a></td>
<td>1.01</td>
<td>Work-time unit duration conversion and canonicalization</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JJNAPIORK/Valiant-0.001001">Valiant</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001001</td>
<td>Validation Library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JKUTEJ/Web-PageMeta-0.01">Web-PageMeta</a></td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>0.01</td>
<td>get page open-graph / meta data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOCHSTEN/Web-Solid-Auth-0.1">Web-Solid-Auth</a></td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>0.1</td>
<td>A Perl Sold Web Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-ColorName-X-0.002">WordList-EN-ColorName-X</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Color names from Graphics::ColorNames::X</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ID-ColorName-PERLANCAR-0.002">WordList-ID-ColorName-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of color names in Indonesian</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MARKOV/XML-eXistDB-0.99_1">XML-eXistDB</a></td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>0.99_1</td>
<td>eXistDB interface over XML-RPC</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KFLY/namespace-allclean-0.01">namespace-allclean</a></td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>0.01</td>
<td>Avoid imports all subroutines into your namespace</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/p5-GFX-Enhancer-0.1.10">p5-GFX-Enhancer</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.10</td>
<td>Perl extension for enhancing scanned in images</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PMB/pmbtest-v1.0.0">pmbtest</a></td>
<td><a href="https://metacpan.org/author/PMB">PMB</a></td>
<td>v1.0.0</td>
<td>Blah blah blah</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>67</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>40</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>12</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/ECHERNOF">ECHERNOF</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/POLETTIX">POLETTIX</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/YLAVOIE">YLAVOIE</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SCESANO">SCESANO</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/PMB">PMB</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TDRUGEON">TDRUGEON</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/DIONYS">DIONYS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/KFLY">KFLY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/LDILLEY">LDILLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/TONKIN">TONKIN</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/BDFOY">BDFOY</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/SKAJI">SKAJI</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/JBERGER">JBERGER</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/HOCHSTEN">HOCHSTEN</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/GRYPHON">GRYPHON</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/DONGXU">DONGXU</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/SRI">SRI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/JKUTEJ">JKUTEJ</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/ASOKOLOV">ASOKOLOV</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-HaveWebsite PERLANCAR 0.001 Modules that have their own website Acme-CPANModules-Sudoku PERLANCAR 0.001 Sudoku-related modules on CPAN Algorithm-Backoff-RetryTimeouts GSG v1.0.0 A backoff-style retry algorithm with adjustable timeout support Alien-LibJQ DONGXU 0.01 Build libjq library (https://stedolan.github.io/jq/) Antsy BDFOY 0.901 Streaming ANSI escape sequences App-FilePacker SYMKAT 0.001 Embed a self-extracting tarball in a Perl … <a href="https://perlancar.wordpress.com/2021/03/01/list-of-new-cpan-distributions-feb-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Feb 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1937</id>
    <published>2021-03-01T01:22:59Z</published>
    <updated>2021-03-01T01:22:59Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
