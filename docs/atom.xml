<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2020-11-23T09:21:46Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Frankenstein’s Monster is Just Misunderstood! Perl in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/v7n" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This client’s mission involves developing cost-efficient genotyping technology and promoting the development of crops adapted to suit their environment. They care about doing great things, and they want their team to be as happy as the crops they breed. Don’t wait for lightning to strike—your chance to make the world a better place is here!</div>
    </content>
    <id>https://job.perl.careers/v7n</id>
    <published>2020-11-23T10:00:45Z</published>
    <updated>2020-11-23T10:00:45Z</updated>
  </entry>
  <entry>
    <title>We aren’t Mal-teasing—this is the Perl job you’ve been waiting for! Perl in Malta</title>
    <link rel="alternate" href="https://job.perl.careers/jru" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Who wouldn’t want to work in one of the world’s most beautiful places? A diving hotspot with over 50 dive sites, ample hiking, scenic cycling routes, and more kayaking opportunities than you can shake a paddle at, gorgeous Malta has it all! And lucky for you, we have an international client looking to hire Perl developers for their Malta office.</div>
    </content>
    <id>https://job.perl.careers/jru</id>
    <published>2020-11-23T10:00:44Z</published>
    <updated>2020-11-23T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Seeking Senior Perl Developers for Global Domination. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/43l" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Located in St. Ingbert, Germany with a satellite office in Munich, this sociable and friendly team are now working 100% remotely. The situation with the pandemic-that-shall-not-be-named means this will continue for the foreseeable future, but when allowed back to the offices, you’ll enjoy chillin’ like a villain on their rooftop deck.</div>
    </content>
    <id>https://job.perl.careers/43l</id>
    <published>2020-11-23T10:00:43Z</published>
    <updated>2020-11-23T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Bored of jobs that don't matter? Be a Perl developer and save lives! Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/v3b" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This web-app saves lives, and literally pushes forward medical science. Your work will be used by the NHS, research labs, and healthcare providers worldwide to diagnose patients, organize research, and make the world a better place.</div>
    </content>
    <id>https://job.perl.careers/v3b</id>
    <published>2020-11-23T10:00:42Z</published>
    <updated>2020-11-23T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Distraction-free Workplace - Escape Standups and Scrum - Perl Developer West London</title>
    <link rel="alternate" href="https://job.perl.careers/485" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Client is a small development team where everyone is expected to pull their own weight. No daily standups, no planning poker, just you and your work, aided by some of the most experienced technical colleagues in London. You’ll be encouraged to make sensible use of Modern Perl tooling and grow your personal experience of best development practices under excellent technical leadership.</div>
    </content>
    <id>https://job.perl.careers/485</id>
    <published>2020-11-23T10:00:41Z</published>
    <updated>2020-11-23T10:00:41Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-11-23T10:00:40Z</published>
    <updated>2020-11-23T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2020-11-23T10:00:39Z</published>
    <updated>2020-11-23T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 24, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcqbgc/</id>
    <published>2020-11-23T10:00:38Z</published>
    <updated>2020-11-23T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Starship Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, December 9, 2020; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrybcqbmb/</id>
    <published>2020-11-23T10:00:37Z</published>
    <updated>2020-11-23T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Quantum::Superpositions, 2021 election</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, December 3, 2020, 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrybcqbfb/</id>
    <published>2020-11-23T10:00:36Z</published>
    <updated>2020-11-23T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Intro to Docker</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/274755174/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Sunday, November 29, 2020;  1:00 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/274755174/</id>
    <published>2020-11-23T10:00:35Z</published>
    <updated>2020-11-23T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcnbdc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, November 26, 2020; 7:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/events/dtdtrrybcnbdc/</id>
    <published>2020-11-23T10:00:34Z</published>
    <updated>2020-11-23T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers - face to face?</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcpbhc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, November 25, 2020; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcpbhc/</id>
    <published>2020-11-23T10:00:33Z</published>
    <updated>2020-11-23T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Finding an Open Source Python project to contribute to</title>
    <link rel="alternate" href="https://code-maven.com/finding-python-project-to-contribute" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You can use the same approach to find a Perl project</div>
    </content>
    <id>https://code-maven.com/finding-python-project-to-contribute</id>
    <published>2020-11-23T10:00:32Z</published>
    <updated>2020-11-23T10:00:32Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2020/11/cdlxviii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2020-11-23T10:00:31Z</published>
    <updated>2020-11-23T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #87</title>
    <link rel="alternate" href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-087/walt-mankowski/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Walt made the largest rectangle task look so simple. Well done.</div>
    </content>
    <id>https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-087/walt-mankowski/README.md</id>
    <published>2020-11-23T10:00:30Z</published>
    <updated>2020-11-23T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 087</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-087-6mj" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon uses code comments to share the ideas behind his solutions.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-087-6mj</id>
    <published>2020-11-23T10:00:29Z</published>
    <updated>2020-11-23T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="https://samirparikh.com/blog/perl-weekly-challenge-087.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Samir is having lots of fun with the weekly challenge. Great to read such a story.</div>
    </content>
    <id>https://samirparikh.com/blog/perl-weekly-challenge-087.html</id>
    <published>2020-11-23T10:00:28Z</published>
    <updated>2020-11-23T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87: Consecutive Rectangles</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_87__Consecutive_Rectangles.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger spoilt us with solutions in Perl, Raku, Python, Ruby and Rust.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/11/Perl_Weekly_Challenge_87__Consecutive_Rectangles.html</id>
    <published>2020-11-23T10:00:27Z</published>
    <updated>2020-11-23T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge #087 Task #1 :: (Perl, Raku)</title>
    <link rel="alternate" href="https://dev.to/jeongoon/weekly-challenge-086-task-1-perl-raku-2hk4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Myoungjin's discussion of his Raku solution is too good to miss. Must Read.</div>
    </content>
    <id>https://dev.to/jeongoon/weekly-challenge-086-task-1-perl-raku-2hk4</id>
    <published>2020-11-23T10:00:26Z</published>
    <updated>2020-11-23T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87: Longest Consecutive Sequences and Largest Rectangle</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-87-longest-consecutive-sequences-and-largest-rectangle.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent's thorough discussion about different types of sorting. You even get to know about Functional programming.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-87-longest-consecutive-sequences-and-largest-rectangle.html</id>
    <published>2020-11-23T10:00:25Z</published>
    <updated>2020-11-23T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC087 - Largest Rectangle</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/19/pwc087-largest-rectangle/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio once again shared nice ideas. Must Read.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/19/pwc087-largest-rectangle/</id>
    <published>2020-11-23T10:00:24Z</published>
    <updated>2020-11-23T10:00:24Z</updated>
  </entry>
  <entry>
    <title>PWC087 - Longest Consecutive Sequence</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/11/18/pwc087-longest-consecutive-sequence/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio took the discussion to another level. Highly Recommended.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/11/18/pwc087-longest-consecutive-sequence/</id>
    <published>2020-11-23T10:00:23Z</published>
    <updated>2020-11-23T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Raku - Largest and Longest</title>
    <link rel="alternate" href="https://raku-musings.com/largest-longest.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It makes me happy when I see how Arne tried different strategies. Once again, we have Perl and Raku solutions.</div>
    </content>
    <id>https://raku-musings.com/largest-longest.html</id>
    <published>2020-11-23T10:00:22Z</published>
    <updated>2020-11-23T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/22" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Short notes at the end of each solution tell the story behind the journey. You don't want to miss this.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/22</id>
    <published>2020-11-23T10:00:21Z</published>
    <updated>2020-11-23T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87, Part 2</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/20/perl-weekly-challenge-87-part-2/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail raised interesting questions and explored the different choices about the task.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/20/perl-weekly-challenge-87-part-2/</id>
    <published>2020-11-23T10:00:20Z</published>
    <updated>2020-11-23T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 87, Part 1</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2020/11/19/perl-weekly-challenge-87-part-1/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail's blog post has not just Perl solution but also C and Node.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2020/11/19/perl-weekly-challenge-87-part-1/</id>
    <published>2020-11-23T10:00:19Z</published>
    <updated>2020-11-23T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Raku Review - Perl Weekly Challenge - 084</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/p6-review-challenge-084" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Raku Solutions Review by Andrew Shitov.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/p6-review-challenge-084</id>
    <published>2020-11-23T10:00:18Z</published>
    <updated>2020-11-23T10:00:18Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 087</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-087" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by Team PWC, dealing with the "Pair Difference" and "Sudoko Puzzle" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-087</id>
    <published>2020-11-23T10:00:17Z</published>
    <updated>2020-11-23T10:00:17Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 088</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-088" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with a couple of fun tasks "Array of Product" and "Spiral Matrix". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-088</id>
    <published>2020-11-23T10:00:16Z</published>
    <updated>2020-11-23T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Hacktoberfest 2020 report</title>
    <link rel="alternate" href="https://dev.to/zakame/hacktoberfest-2020-report-1p6i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Just a good example of how to contribute to other projects. The best thing is that you can do this throughout the whole year, not just during October.</div>
    </content>
    <id>https://dev.to/zakame/hacktoberfest-2020-report-1p6i</id>
    <published>2020-11-23T10:00:15Z</published>
    <updated>2020-11-23T10:00:15Z</updated>
  </entry>
  <entry>
    <title>CPAN.Rocks</title>
    <link rel="alternate" href="https://cpan.rocks/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The site now has a new box listing information about the Bugtracker of each CPAN module. A total of 66.2% Have no bug tracker defined explicitely. 67.6% don't link to their VCS. (Compare that with the stats from the <a href="https://cpan-digger.perlmaven.com/">most recently uploaded</a>. Only 17% missing the VCS link and 58% missing the explicit link to a bugtracker. The direction is good, but there is more work to do.</div>
    </content>
    <id>https://cpan.rocks/</id>
    <published>2020-11-23T10:00:14Z</published>
    <updated>2020-11-23T10:00:14Z</updated>
  </entry>
  <entry>
    <title>GitHub Actions for semi-static web sites</title>
    <link rel="alternate" href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave describes how the CPAN Dashboard is automatically regenerated and how he does not need to host this on any of his servers.</div>
    </content>
    <id>https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g</id>
    <published>2020-11-23T10:00:13Z</published>
    <updated>2020-11-23T10:00:13Z</updated>
  </entry>
  <entry>
    <title>How is Perl an interpreted Language</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/jy7z25/how_is_perl_an_interpreted_language/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">My answer would be that 'interpreted' and 'compiled' are just two points on a line. Many languages fall betweeen the two. Many other languages are not even on the line. Luckily there are better answers in the comment secition of that question.</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/jy7z25/how_is_perl_an_interpreted_language/</id>
    <published>2020-11-23T10:00:12Z</published>
    <updated>2020-11-23T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Where is Perl used these days?</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/jyt8ff/where_is_perl_used_these_days/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">39 very interesting comments so far. People really want to tell their story. It would be even better if they did so in a long-form version as a stand-alone blog post. e.g. on <a href="https://dev.to/">dev.to</a></div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/jyt8ff/where_is_perl_used_these_days/</id>
    <published>2020-11-23T10:00:11Z</published>
    <updated>2020-11-23T10:00:11Z</updated>
  </entry>
  <entry>
    <title>GitLab CI Pipeline for Perl DBD::Mock using Module::Build</title>
    <link rel="alternate" href="https://perlmaven.com/gitlab-ci-module-build" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Although the majority of Perl modules use GitHub there are a few that use GitLab. Some of them have the GitLab CI system enabled, some don't. In this article you can read how DBD::Mock uses CI to see if you can build on that example.</div>
    </content>
    <id>https://perlmaven.com/gitlab-ci-module-build</id>
    <published>2020-11-23T10:00:10Z</published>
    <updated>2020-11-23T10:00:10Z</updated>
  </entry>
  <entry>
    <title>The mysterious case of the SVt_PVIV</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2020/11/the-mysterious-case-of-the-svt-pviv.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In a nutshell: Wanting to use emojis can lead to shaving a yak.</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2020/11/the-mysterious-case-of-the-svt-pviv.html</id>
    <published>2020-11-23T10:00:09Z</published>
    <updated>2020-11-23T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Where is Rob Seegel?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/alex1/2020/11/where-is-rob.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Author of Tk::MListbox. Alex is calling.</div>
    </content>
    <id>http://blogs.perl.org/users/alex1/2020/11/where-is-rob.html</id>
    <published>2020-11-23T10:00:08Z</published>
    <updated>2020-11-23T10:00:08Z</updated>
  </entry>
  <entry>
    <title>What is CI and why is it good for you?</title>
    <link rel="alternate" href="https://perlmaven.com/what-is-ci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Screencast</div>
    </content>
    <id>https://perlmaven.com/what-is-ci</id>
    <published>2020-11-23T10:00:07Z</published>
    <updated>2020-11-23T10:00:07Z</updated>
  </entry>
  <entry>
    <title>TPF Meeting Minutes for October 2020</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/tpf-minutes-202010" type="text/html"/>
    <id>https://news.perlfoundation.org/post/tpf-minutes-202010</id>
    <published>2020-11-23T10:00:06Z</published>
    <updated>2020-11-23T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Github Actions for Module::Install and showing error log on Linux, Mac OSX, and Windows</title>
    <link rel="alternate" href="https://perlmaven.com/github-actions-showing-error-log-on-linux-mac-windows" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Part of the effort to enable some sort of <a href="https://perlmaven.com/ci">CI system</a> for all the modules on CPAN this is a sample configuration file for GitHub Actions. It might encourage you to add a GitHub Action configuration file to your project as well.</div>
    </content>
    <id>https://perlmaven.com/github-actions-showing-error-log-on-linux-mac-windows</id>
    <published>2020-11-23T10:00:05Z</published>
    <updated>2020-11-23T10:00:05Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021 (if the Coronavirus lets them run it in person). <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2020-11-23T10:00:04Z</published>
    <updated>2020-11-23T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Blogs</title>
    <link rel="alternate" href="https://perlweekly.com/stats.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Number of posts last week: BPO: 7; DevTo: 3; Perl.com: 0; PerlAcademy: 0; PerlHacks: 0; PerlMaven: 3; Reddit: 18; TPF: 1;</div>
    </content>
    <id>https://perlweekly.com/stats.html</id>
    <published>2020-11-23T10:00:03Z</published>
    <updated>2020-11-23T10:00:03Z</updated>
  </entry>
  <entry>
    <title>CPAN uploads</title>
    <link rel="alternate" href="https://metacpan.org/recent" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Last week there were a total of 201 uploads to CPAN of 144 distinct distributions by 82 different authors. Number of distributions with link to VCS: 121. Number of distros with CI: 61. Number of distros with bugtracker: 85.</div>
    </content>
    <id>https://metacpan.org/recent</id>
    <published>2020-11-23T10:00:02Z</published>
    <updated>2020-11-23T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Perl 5.32 from ActiveState - Make Your Python Coder Friends Jealous!</title>
    <link rel="alternate" href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">Try out our whole new Perl ecosystem, featuring: A unified, cloud-based toolchain for Linux and Windows (replaces PPM). Virtual environment support (similar to Python's virtualenv). Pure open source licensing (no more ActiveState license). Try ActiveState's &lt;a href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition"&gt;latest Perl&lt;/a&gt; release</content>
    <id>https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition</id>
    <published>2020-11-23T10:00:01Z</published>
    <updated>2020-11-23T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#487 - CPAN Dashboard explained</title>
    <link rel="alternate" href="http://perlweekly.com/archive/487.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Have you noticed how the English spelling and grammar of both Mohammad and myself improved in the last couple of weeks? It's all thanks to Dave Cross who had enough of our broken English and started to comb through the newsletter fixing some of the biggest offenders. Thanks Dave!</p>
<p>I put together a web page for <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> where you can see the 100 most recently uploaded CPAN modules. The goal is to locate the ones that don't link to their VCS in their META.json file. Try to locate the public VCS and add the link. I also would like to encourage the CPAN authors to set up their <a href="https://cpandashboard.com/">CPAN Dashboard</a> that was created by Dave Cross.</p>
<p>After several months of waiting, Patreon has enabled annual payments on my account. That means from now on you can <a href="https://www.patreon.com/szabgab">support my work</a> with an annual payment and even get 10% discount.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/487.html</id>
    <published>2020-11-23T10:00:00Z</published>
    <updated>2020-11-23T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>The mysterious case of the SVt_PVIV</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2020/11/the-mysterious-case-of-the-svt-pviv.html"/>
    <id>tag:blogs.perl.org,2020:/users/ben_bullock//392.9952</id>

    <published>2020-11-23T04:40:18Z</published>
    <updated>2020-11-23T06:11:59Z</updated>

    <summary>The other day I wanted to send my friend some silly emojis on LINE and so I updated my flaky old Unicode browser to the new-fangled Unicode with values above 0x10000, so that I could fetch the Emojis, which start...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="arthurcclarkesmysteriousworld" label="Arthur C. Clarke's Mysterious World" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="daftmodule" label="daft module" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="jsoncreate" label="JSON::Create" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="mysteries" label="mysteries" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="stupidmodule" label="stupid module" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="sviok" label="SvIOK" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="svt_pviv" label="SVt_PVIV" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>The other day I wanted to send my friend some silly emojis on LINE and so I updated my <a href="https://www.lemoda.net/tools/unicode/index.html">flaky old Unicode browser</a> to the new-fangled Unicode with values above 0x10000, so that I could fetch the Emojis, which start <a href="https://www.lemoda.net/tools/unicode/index.html?char=1F348">around here</a>. The thing also features a perl script which fetches values from <a href="https://metacpan.org/pod/Unicode::UCD">Unicode::UCD</a> using the <code>charinfo</code> function. I also updated to Perl 5.32 around the same time. Now the funny thing was that I started getting all kinds of errors about invalid JSON in the browser console. My Perl script was sending something of the form <code>{... "script":Common ...}</code> from my module JSON::Create, which is not valid JSON due to not having quotes around <code>Common</code>, and obviously my module was faulty.</p>

<p>Investigating the fault led me into the XS (C) code of my module where the value part of the JSON thought that the value associated with the <code>script</code> key in the hash reference returned by <code>charinfo</code> was of the form <code>SVt_PVIV</code>. <code>PV</code> means "pointer value" which is basically a string, and <code>IV</code> means "integer value", you can probably guess what that is supposed to contain.</p>

<p>My stupid module assumed that the string in an <code>SVt_PVIV</code> was just a representation of the IV part, so it just printed the PV as a string without quotes, leading to the above Common appearing. But it doesn't seem to be so. Is it some kind of "dual variable"? It turned out that the IV part wasn't even valid, so forcing it to treat the <code>SVt_PVIV</code> as an IV didn't work. <a href="https://metacpan.org/source/BKB/JSON-Create-0.27_01/json-create-perl.c#L1442">The solution at the moment</a> is to test with something called SvIOK whether the IV part is OK then treat it as a string if not.</p>

<p>The mysterious part for me is why is the <code>script</code> value an SVt_PVIV in the first place? Answers on a postcard, or comment below if you prefer.</p>

<p>I tried to replicate this bug for testing purposes using Scalar::Util's <code>dualvar</code>, but that creates an SVt_PVNV (floating point/string combo), which my daft module treated differently again.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>JSON::Create now features indentation</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/ben_bullock/2020/11/jsoncreate-now-features-indentation.html"/>
    <id>tag:blogs.perl.org,2020:/users/ben_bullock//392.9951</id>

    <published>2020-11-23T04:29:54Z</published>
    <updated>2020-11-23T04:39:50Z</updated>

    <summary>In version 0.27 of JSON::Create I added a new indentation feature. This was added basically out of necessity. Originally the purpose of the module was sending short bits of JSON over the internet, but I've been using JSON more and...</summary>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    
    <category term="indentation" label="indentation" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="jsoncreate" label="JSON::Create" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="megabytes" label="megabytes" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="yearsofsuffering" label="years of suffering" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<p>In version 0.27 of JSON::Create I added a new <a href="https://metacpan.org/pod/distribution/JSON-Create/lib/JSON/Create.pod#indent">indentation feature</a>. This was added basically out of necessity. Originally the purpose of the module was sending short bits of JSON over the internet, but I've been using JSON more and more for processing data too. I've spent quite a long time working on <a href="https://www.qhanzi.com/">a web site for recognition of Chinese</a>, and I've been using JSON more and more extensively. The basic data file for the web site is a 168 megabyte JSON file. Not indenting this kind of file makes for "interesting" problems if one accidentally opens it in an editor or on a terminal screen, a million characters all on one line tends to confuse the best-written text reading utilities. So after years of suffering the relief is tremendous, and now I have tab-based indentation in JSON::Create.</p>

<p>Originally I thought that I should make all kinds of customisable indentation possible, but then it occurred to me that basically any fool armed with a regular expression could easily alter the indentation however they want to. I put <a href="https://fastapi.metacpan.org/source/BKB/JSON-Create-0.27/examples/indent-format.pl">a simple example in the documentation</a>.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 087</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/22#pwc087" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an unsorted array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to find the longest consecutive sequence. Print 0 if no sequence found.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an unsorted array of integers @N.
# Write a script to find the longest consecutive sequence. 
# Print 0 if no sequence found.
##
sub min_max{
    my @a = @_;
    my($min, $max) = ($a[0], $a[0]);
    for my $x (@a){
        $min = $x if($x &lt; $min);
        $max = $x if($x &gt; $max);
    }
    return ($min, $max);
}

sub longest_sequence{
    my @sequences = @_;
    my @max = (0);
    for my $sequence (@sequences){
        @max = @{$sequence} if((@{$sequence} &gt; @max) &amp;&amp; (@{$sequence} &gt; 1));
    }
    return @max;
}

sub continuous_sub_sequences{
    my @a = @_;
    my($min, $max) = min_max(@a);
    my @sub_sequences;
    my $sub_sequence = [];
    while($min &lt;= $max){
        my $test = grep {$_ == $min} @a;
        if($test){
            push @{$sub_sequence}, $min;
        }
        else{
            push @sub_sequences, $sub_sequence if(@{$sub_sequence} &gt; 0);
            $sub_sequence = [];
        }
        $min++;
    }
    return @sub_sequences;
}

MAIN:{
    my @N = (100, 4, 50, 3, 2);
    my @sequences = continuous_sub_sequences(@N);
    my @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
    @N = (20, 30, 10, 40, 50);
    @sequences = continuous_sub_sequences(@N);
    @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
    @N = (20, 19, 9, 11, 10);
    @sequences = continuous_sub_sequences(@N);
    @max = longest_sequence(@sequences);
    print join(",", @max) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2,3,4
0
9,10,11
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I decided to force myself to work with an artificial constraint as a way fo forcing a little bit more creativity in my solution. When I first looked at this problem I immediately thought “ok, first thing should be to sort the list”. Based on that first impression my self-imposed constraint was to “solve this without using a sort”!&lt;/p&gt;
&lt;p&gt;What I did can be summarized as follows: 1. Find the minimum and maximum numbers in the given list. 2. Starting with the minimum number generate test sequences by incrementing upwards towards the maximum list value. 3. As each new element of the test sequence is added test to see if it is in the original list. 4. If it is in the list, good, keep going. 5. If it is not in the list then save the test sequence generated up to that point and continue with a new test sequence. 6. Return all successful test sequences and determine the longest one.&lt;/p&gt;
&lt;p&gt;The most blatant inefficiency to this approach is when lists are sparse. For example, suppose we are given &lt;code&gt;(2, 100000000, 3, 4, 5)&lt;/code&gt; then we would be iterating from &lt;code&gt;2&lt;/code&gt; to &lt;code&gt;100000000&lt;/code&gt;. An approach using a sorted list would basically need only loop over the elements of the list, checking to see if the next element was 1 larger than the previous.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given matrix m x n with 0 and 1. Write a script to find the largest rectangle containing only 1. Print 0 if none found.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given matrix m x n with 0 and 1.
# Write a script to find the largest rectangle 
# containing only 1. Print 0 if none found.
##
use boolean;

sub print_solution{
    my($m, $n) = @_;
    if(!$m || !$n){
        print "0\n";
    }
    else{
        for (1 .. $n){
            print "[". join(" ", (1)x $m) . "]\n";
        }       
    }
}

sub evaluate{
    my($m, $n, $matrix) = @_;
    my $row_string = join(",", (1) x $m);
    my $columns = 0;
    for my $row (@{$matrix}){
        my $test = join(",", @{$row});
        if(index($test, $row_string) &gt; -1){
            $columns++;
            return true if($columns == $n);
        }
        else{
            $columns = 0;
        }
    }
    return false;
}

sub largest_rectangle{
    my @matrix = @_;
    my $rows = @{$matrix[0]};
    my $columns = @matrix;
    my $max_area = 0;
    my @rectangle;
    for my $m (2 .. $columns){
        for my $n (1 .. $rows){
            if(evaluate($m, $n, \@matrix)){
                if(($m * $n) &gt; $max_area){
                    $max_area = ($m * $n);
                    @rectangle = ($m, $n);
                }
            }
        }
    }
    return @rectangle;
}

MAIN:{
    my @MATRIX = (
        [0, 0, 0, 1, 0, 0],
        [1, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 0],
        [1, 1, 1, 1, 1, 0]
    );
    print_solution(largest_rectangle(@MATRIX));
    @MATRIX = (
        [1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1],
        [1, 0, 1, 0, 1, 0],
        [0, 1, 0, 1, 0, 1]
    );
    print_solution(largest_rectangle(@MATRIX));
    @MATRIX = (
        [0, 0, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1],
        [0, 0, 1, 0, 0, 1],
        [0, 0, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 1]
    );
    print_solution(largest_rectangle(@MATRIX));  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
[1 1 1 1 1]
[1 1 1 1 1]
0
[1 1 1 1]
[1 1 1 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Unlike Part 1 I did not necessarily have a self-imposed constraint other than to try and be as creative as possible. I’ll only know when I look at other submitted solutions if I was really all that relatively clever or not!&lt;/p&gt;
&lt;p&gt;Here I do the following: 1. Check the size of the given matrix 2. Test the matrix for all possible sub-matrix sizes. 3. For all found sub-matrices determine the largest one.&lt;/p&gt;
&lt;p&gt;For checking the presence of sub-matrices I &lt;a href="https://perldoc.perl.org/functions/join"&gt;join&lt;/a&gt; the rows into strings and then use &lt;a href="https://perldoc.perl.org/functions/index"&gt;index&lt;/a&gt; to see if they appear in a given row or not. To determine if a sub-matrix is the largest I compare the areas of the “rectangles”.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc087</id>
    <published>2020-11-22T17:36:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>GitHub Actions for semi-static web sites</title>
    <link rel="alternate" href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I've been using <a href="https://pages.github.com/">GitHub pages</a> to host static web sites for a few years. I wrote <a href="https://blog.dave.org.uk/2018/08/simple-static-websites-with-github-pages.html">a brief introduction on how to do that</a> a couple of years ago.</p>

<p>However, very few pages are completely static. So I still had to host many of my web sites in places where I could execute the code that was used to run the site. But in the last couple of weeks, I've realised that there is another type of site that can be successfully hosted on GitHub pages using <a href="https://github.com/features/actions">GitHub Actions</a>. I call these "semi-static" sites. It would probably help if I explained what I mean by this term. I'll start by giving an example.</p>

<p>I've written before about my <a href="https://dev.to/davorg/your-cpan-dashboard-92">CPAN Dashboard site</a>. It's a site that allows <a href="https://metacpan.org/">CPAN</a> authors to monitor the various continuous integration services that they use to develop their code. (For those of you who haven't heard of it - CPAN is the "Comprehensive Perl Archive Network - the site where Perl programmers can find thousands of libraries that extend the Perl language).</p>

<p>This site is <em>mostly</em> static. There's a page for each author who uses the site. Those pages are mostly taken up by a big table. Each row in the table contains data about one of the author's modules. There are links to the code repo and the module's page on CPAN, the version number and release date of the most recent version of the module and a series of badges indicating the status of the module on various CI services. The list of an author's modules is generated by making a call to the <a href="https://github.com/metacpan/metacpan-api/blob/master/docs/API-docs.md">MetaCPAN API</a>.</p>

<p>The site currently has two other pages: the home page (which basically lists the authors using the site) and a page telling authors how they can add themselves to the site (which is by sending a pull request to <a href="https://github.com/davorg/dashboard">the repo that hosts the site</a>).</p>

<p>As I say, the site is mostly static. There are only a few ways that the site can change.</p>

<ul>
<li>I change the information in one of the static pages</li>
<li>I change the formatting of site</li>
<li>A new author sends a pull request to add themself to the site</li>
<li>An author who uses the site releases a new module (or gives up ownership of an existing one)</li>
<li>An author who uses the site releases a new version of module (meaning that the last-released date needs to change)</li>
</ul>

<p>There is a single program in the repo that can be used to rebuild the site in all of these circumstances.</p>

<p>If I change the site in some way (the first two items in the list), obviously I know that this change has been made and can run the regeneration program and commit the regenerated version.</p>

<p>If an author sends a pull request to add themself to the site, I can merge the site, then pull down the latest version and regenerate it to add the page for the new user. But it would be nicer if I just had to merge the pull request and the rebuild was handled automatically.</p>

<p>But I can't know when an author adds a new module or releases a new version of a module - well not without monitoring CPAN rather more closely than I have time for. It would be better if the site is automatically rebuilt periodically (say once an hour) and checked in if something has changed. And that's what I can now do - thanks to GitHub Actions.</p>

<p>GitHub actions are configured by adding a <a href="https://yaml.org/">YAML</a> file to the <code>.github/workflows</code> directory in a code repo. The YAML configures what the action does and how it is triggered. Here's the current version of the workflow file for my <a href="https://github.com/davorg/dashboard">dashboard repo</a>:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name: Generate web page

on:
  push:
    branches: '*'
  schedule:
    - cron: '7 */6 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: perldocker/perl-tester:5.30   # https://hub.docker.com/r/perldocker/perl-tester

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install modules
      run: |
          cpanm --installdeps --notest .
    - name: Create pages
      run: |
        mkdir -p docs
        perl dashboard
    - name: Commit new page
      if: github.repository == 'davorg/dashboard'
      run: |
        GIT_STATUS=$(git status --porcelain)
        echo $GIT_STATUS
        git config --global user.name 'Dave Cross'
        git config --global user.email 'dave@dave.org.uk'
        git add docs/
        if [ "$GIT_STATUS" != "" ]; then git commit -m "Automated Web page generation"; fi
        if [ "$GIT_STATUS" != "" ]; then git push; fi
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>

<p>I think it's pretty easy to understand, but let's go through it a section at a time.</p>

<p>We start with the <code>on:</code> key. That defines when the workflow will be triggered. In this case, we have three triggers.</p>

<ul>
<li>If there's a <code>push</code> to any branch (most usefully, this is triggered when I merge a pull request)</li>
<li>On a <code>cron</code> schedule. Here I run it hourly - at seven minutes past the hour</li>
<li>And <code>workflow_dispatch:</code> adds a button to the action's page in the repo. Pressing this button will run the action at any time.</li>
</ul>

<p>The next section (<code>jobs:</code>) defines what we do. We're using the build-in ability to run in a Docker image (here, we use one of the official Perl images - which adds a number of useful Perl tools to a standard Ubuntu image). We checkout the repo, install the dependencies using <code>cpanm</code> and then run the program (called <code>dashboard</code>) that regenerates the site. We then use a low-level (porcelain) <code>git</code> command to determine whether any of the files actually changed; and, if they did, we commit the changes and they will appear on the web site.</p>

<p>This solves all of my problems. If I change the site in some way and forget to regenerate it before committing, then the site will be regenerated automatically. When I merge a pull request from a new author, the site will be regenerated automatically. And the site will be regenerated automatically each hour, which will take care of the case when any of the authors' lists of modules have changed in any way.</p>

<p>So that's what I mean by a "semi-static" site. It's one where the pages stay the same most of the time, but there are a few, well-defined, events can change the contents of the site. As long as those events can be mapped onto the various triggers for GitHub actions, then the regeneration of the site can be handled automatically.</p>

<p>Here's another example. I run another site called <a href="http://perl.theplanetarium.org/">Planet Perl</a>. This is an old-school web feed aggregator. It knows about a number of web feeds about Perl programming and it combines their content into a single page (and another web feed). Once again, there is a small list of events that can change the site:</p>

<ul>
<li>I change the look and feel of the site</li>
<li>I add a new web feed (or someone submits a pull request that adds a web feed)</li>
<li>Every hour we poll all of the feeds and rebuild the site</li>
</ul>

<p>I won't go through the workflow definition again, but <a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/buildsite.yml">here it is</a> if you'd like to take a look (it's actually very similar to the previous one).</p>

<p>Please let me know in the comments if you can think of any other kinds of site that this approach would work for. Or if you can suggest any improvements to my system.</p>

<p>The original version of the CPAN Dashboard workflow was sent to me by <a href="https://dev.to/szabgab">Gabor Szabo</a>. Many thanks to him for showing me how to do it.</p>

</div>
    </content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g</id>
    <published>2020-11-22T20:20:10Z</published>
    <updated>2020-11-22T20:20:10Z</updated>
    <category term="github"/>
    <category term="actions"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge #086 Task #1 :: (Perl, Raku) </title>
    <link rel="alternate" href="https://dev.to/jeongoon/weekly-challenge-086-task-1-perl-raku-2hk4" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#task-1-longest-consecutive-sequence" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-087/#TASK1"&gt;&lt;strong&gt;TASK #1 › Longest Consecutive Sequence&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Submitted by: Mohammad S Anwar&lt;/p&gt;

&lt;p&gt;You are given an unsorted array of integers @N.&lt;/p&gt;

&lt;p&gt;Write a script to find the longest consecutive sequence. Print 0 if none sequence found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1:

Input: @N = (100, 4, 50, 3, 2)
Output: (2, 3, 4)

Example 2:

Input: @N = (20, 30, 10, 40, 50)
Output: 0

Example 3:

Input: @N = (20, 19, 9, 11, 10)
Output: (9, 10, 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#perl-solution" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Perl Solution&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#imperative-approach" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Imperative Approach&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;I've done the same task with common lisp and golang, then I guess that I naturally follow the same logic I used in both language.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;sort the number&lt;/li&gt;
&lt;li&gt;compare between consecutive member in the list&lt;/li&gt;
&lt;li&gt;concatenate the list if they are right next to each other&lt;/li&gt;
&lt;li&gt;if not, start a new sequence&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;and I need to add handy dummy member at the tail of the list&lt;/p&gt;

&lt;p&gt;here is the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# note: no sanity check !!&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@sorted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$sorted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# dummy&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@longest_seq_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$longest_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@curr_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$curr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@sorted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$prev&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@curr_seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;# concat. current seq&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$curr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$prev&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="c1"&gt;# skip&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                            &lt;span class="c1"&gt;# update longest&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$curr_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt; &lt;span class="nv"&gt;@curr_seq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$curr_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$longest_size&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$longest_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$curr_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;@longest_seq_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;@curr_seq&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$curr_size&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$longest_size&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@longest_seq_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;@curr_seq&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;@curr_seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$curr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$longest_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;longest size: &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$longest_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;total &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;scalar&lt;/span&gt; &lt;span class="nv"&gt;@longest_seq_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; sequencies found.&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$seq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@longest_seq_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;@$seq&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;]&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It is simple challenge, so I tried learn more about raku today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raku-solution" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Raku Solution&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#sorting" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Sorting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Easy!&lt;/em&gt;, and we don't need to add 'sort( $^a &amp;lt;=&amp;gt; $^b )' because @n are all already IntStr instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;unit&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;(*@n where {&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;elems&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;say&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#produce" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Produce&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;as we go through the list, we can &lt;em&gt;produce&lt;/em&gt; the trace of our data.&lt;br&gt;
the simple example of produce is that maximum value at each step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;but I need some more information to keep at every step and decided to keep a list of numbers as we go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({[&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and if &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; is consecutive write down the linked numbers or start over new one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({[&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;]}))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                 &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;clone&lt;/span&gt;
                 &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;clone&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;say&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;and result looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now classify the number by length and grep the element has maximum size and say!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="nv"&gt;classify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;elems&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-code" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final Code&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;unit&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;MAIN&lt;/span&gt; &lt;span class="p"&gt;(*@n where {&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;elems&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({[&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;]}))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                 &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;clone&lt;/span&gt;
                 &lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;clone&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;classify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;elems&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Happy Coding!!&lt;br&gt;
I spent too much time on common-lisp and golang.&lt;br&gt;
I'm so sorry to say that I'll skip blog about task #2.&lt;/p&gt;

&lt;p&gt;May Perl and Raku be with you!!&lt;br&gt;
&lt;a href="https://perlweeklychallenge.org"&gt;🐪PWC🦋&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Myoungjin Jeon</name>
    </author>
    <id>https://dev.to/jeongoon/weekly-challenge-086-task-1-perl-raku-2hk4</id>
    <published>2020-11-22T10:56:59Z</published>
    <updated>2020-11-22T10:56:59Z</updated>
    <category term="perlweeklychallenge"/>
    <category term="raku"/>
    <category term="perl"/>
    <category term="challenge"/>
  </entry>
  <entry>
    <title>CY's Take on PWC#087</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc087.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9950</id>

    <published>2020-11-21T02:29:39Z</published>
    <updated>2020-11-22T05:01:00Z</updated>

    <summary>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email). After the long-haul Sudoku Task, this week we come to meet two tiny...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p>

<div>After the long-haul Sudoku Task, this week we come to meet two tiny tasks.</div><div><br /></div>

<h4>Task 1 Longest Consecutive Sequence</h4>

<div>It seems unavoidable for me that we have to sort the input first:</div><div><br /></div>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">long_consec</font>{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@list</font>&nbsp;=&nbsp;<font color="#007f00">sort</font>&nbsp;{<font color="#0000ff">$a</font>&lt;=&gt;<font color="#0000ff">$b</font>}&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#...</i></font><font color="#7f7f7f"><i><br />
</i></font></tt></div><div><br />


</div><div>Then I use a <tt>for</tt> loop and a temporary list variable <tt>@potential_max_opp</tt></div><div><tt><br /></tt></div>
<div><tt>
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$max_len</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@max_opp</font>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@potential_max_opp</font>&nbsp;=&nbsp;(<font color="#0000ff">$list</font>[0]);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#00007f">1.</font>.<font color="#0000ff">$#list</font>)&nbsp;{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$list</font>[<font color="#0000ff"><b>$_</b></font>-<font color="#00007f">1</font>]&nbsp;==&nbsp;<font color="#0000ff">$list</font>[<font color="#0000ff"><b>$_</b></font>]<font color="#00007f">-1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@potential_max_opp</font>,&nbsp;<font color="#0000ff">$list</font>[<font color="#0000ff"><b>$_</b></font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b><br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@potential_max_opp</font>&nbsp;&gt;&nbsp;<font color="#0000ff">$max_len</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$max_len</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@potential_max_opp</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@max_opp</font>&nbsp;=&nbsp;<font color="#0000ff">@potential_max_opp</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@potential_max_opp</font>&nbsp;=&nbsp;(<font color="#0000ff">$list</font>[<font color="#0000ff"><b>$_</b></font>]);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@max_opp</font>;<br />
}<br />
</tt></div>

<div><br /></div><div>Pretty straight-forward.</div>

<div><br /></div><div>Some ideas: There should be some more efficient algorithms, maybe similar to <a href="https://en.wikipedia.org/wiki/Counting_sort">counting sort</a> , if the range of integers is given and the integers are "dense" enough.</div>

<div>---</div>
<div>Since this is a task on list, I write Lisp codes after a few weeks&nbsp; (<u>checking: last time is Challenge #80, oh!</u> )
and it is probably a bad implementation as a lot of global variables 
have been used... Stop confession. The most interesting point is making <tt>(50 48 301 4 51 3 2 49 29 300)</tt> as <tt>((2 3 4) (29) (48 49 50 51) (300 301))</tt>
 -- from an unsorted list to a list of sorted lists which each are 
composed of consecutive integers --. Interested readers may go to GitHub
 to see the full code.</div><div><br /></div>

<h4>Task 2 Largest Rectangle</h4>

<div>I think my codes are not the most optimized.</div><div><br /></div>

<div>There is a four-layer <tt>for</tt> loops. In order to get the largest rectangle as early as we can, I put <tt>reverse</tt> for the latter two layers <tt>for</tt> loop. <br /></div><div><br /></div>

<div><tt>
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#0000ff">$N</font>-<font color="#00007f">2</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#0000ff">$M</font>-<font color="#00007f">2</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$k</font>&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">$i</font>+<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(all_ones(\<font color="#0000ff">@mat</font>,<font color="#0000ff">$i</font>,<font color="#0000ff">$k</font>,<font color="#0000ff">$j</font>))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$l</font>&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">$j</font>+<font color="#00007f">1.</font>.<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)&nbsp;{&nbsp;<font color="#7f7f7f"><i>#&nbsp;to&nbsp;be&nbsp;continued...</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
</tt></div>

<div><tt>all_ones(\@mat, $p1, $p2, $p3)</tt> checks the <tt>$p1</tt>-th to <tt>$p2</tt>-th column terms on the <tt>$p3</tt>-th row.</div>

<div><br /></div><div>As said, I want to get the largest rectangle as soon as possible. There is a <tt>if </tt>conditional for checking whether the rectangle with vertices <tt>($i,$j)</tt>, <tt>($k,$j)</tt>, <tt>($i,$l)</tt> and <tt>($k,$l)</tt> is larger than the currently found rectangle with largest area, before checking every entry "inside" the "rectangle" is 1: <br /></div><div><br /></div>

<div><tt>
<b>if</b>&nbsp;((<font color="#0000ff">$k</font>-<font color="#0000ff">$i</font>+<font color="#00007f">1</font>)*(<font color="#0000ff">$l</font>-<font color="#0000ff">$j</font>+<font color="#00007f">1</font>)&nbsp;&gt;&nbsp;<font color="#0000ff">$largest_area</font>)&nbsp;{&nbsp;<font color="#7f7f7f"><i>#...</i></font><font color="#7f7f7f"><i><br />
</i></font></tt></div><div><br />

</div><div>Then here is the main dish of the task:
</div><div><tt>
<b><br /></b></tt></div><div><tt><b>my</b>&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;<font color="#0000ff">$l</font>;<br />
<b>my</b>&nbsp;<font color="#0000ff">$bool</font>;<br />
<b>do</b>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$bool</font>&nbsp;=&nbsp;all_ones(\<font color="#0000ff">@mat</font>,&nbsp;<font color="#0000ff">$i</font>,&nbsp;<font color="#0000ff">$k</font>,&nbsp;<font color="#0000ff">$count</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;<font color="#0000ff">$count</font>-<font color="#00007f">1</font>;<br />
}&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$count</font>&nbsp;&gt;&nbsp;<font color="#0000ff">$j</font>&nbsp;&amp;&amp;&nbsp;<font color="#0000ff">$bool</font>);<br />
<b>if</b>&nbsp;(<font color="#0000ff">$bool</font>&nbsp;<font color="#ffa500">and</font>&nbsp;<font color="#0000ff">$count</font>==<font color="#0000ff">$j</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$largest_area</font>&nbsp;=&nbsp;(<font color="#0000ff">$k</font>-<font color="#0000ff">$i</font>+<font color="#00007f">1</font>)*(<font color="#0000ff">$l</font>-<font color="#0000ff">$j</font>+<font color="#00007f">1</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$rect_width</font>&nbsp;=&nbsp;<font color="#0000ff">$k</font>-<font color="#0000ff">$i</font>+<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$rect_height</font>&nbsp;=&nbsp;<font color="#0000ff">$l</font>-<font color="#0000ff">$j</font>+<font color="#00007f">1</font>;<br />
}<br />
<br />
</tt></div><hr>
<p>The COVID-19 is more active in winter. Beware.</p>

<p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p>

<p>Dear friends, stay alert and healthy! □</p>

<p><i>link for codes: <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-087/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-087/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt>, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-087/cheok-yin-fung/common-lisp/ch-1.lsp">ch-1.lsp</a></tt></i></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 87: Longest Consecutive Sequences and Largest Rectangle</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/laurent_r/2020/11/perl-weekly-challenge-87-longest-consecutive-sequences-and-largest-rectangle.html"/>
    <id>tag:blogs.perl.org,2020:/users/laurent_r//3226.9948</id>

    <published>2020-11-19T23:05:21Z</published>
    <updated>2020-11-21T18:06:27Z</updated>

    <summary>These are some answers to the Week 87 of the Perl Weekly Challenge organized by Mohammad S. Anwar. Spoiler Alert: This weekly challenge deadline is due in a few days (November 22, 2020). This blog post offers some solutions to...</summary>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 87 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-087/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days (November 22, 2020). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Longest Consecutive Sequences</h2>

<p><em>You are given an unsorted array of integers @N.</em></p>

<p><em>Write a script to find the longest consecutive sequence. Print 0 if none sequence found.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @N = (100, 4, 50, 3, 2)
Output: (2, 3, 4)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @N = (20, 30, 10, 40, 50)
Output: 0
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @N = (20, 19, 9, 11, 10)
Output: (9, 10, 11)
</code></pre>

<p>We&#8217;re given an unsorted array, but there is nothing preventing us from starting by sorting the array. Once the input is sorted, the solution is quite easy. Note that, if Raku or Perl did not have a built-in <code>sort</code> function, the first thing I would do is probably to implement a <code>sort</code> subroutine. I have shown elsewhere that a quick sort or merge sort subroutine can be written in about half a dozen code lines, both in Raku and in Perl, with a functional programming approach. For example, this is a quick sort implementation in Raku:</p>

<pre><code>sub quicksort (@input) {
    return @input if @input.elems &lt;= 1;
    my $pivot = @input[@input.elems div 2];
    return flat quicksort(grep {$_ &lt; $pivot}, @input), 
        (grep {$_ == $pivot}, @input), 
        quicksort(grep {$_ &gt; $pivot}, @input);
}
</code></pre>

<h3>Longest Consecutive Sequences in Raku</h3>

<p>We use three input arrays for our tests. For each test case, we simply sort the input array and scan the sorted results for consecutive sequences. Consecutive sequences are stored in the <code>@sequences</code> array of arrays and we finally display the longest sequence:</p>

<pre><code>use v6;

my @tests = [ 100, 4, 50, 3, 2 ],
            [ 20, 30, 10, 40, 50 ],
            [ 20, 19, 9, 11, 10 ];

for @tests -&gt; @t {
    my @in = sort @t;
    my $last = @in[0];
    my @sequences;
    my $index = 0;
    push @sequences[$index], $last;
    for 1..@in.end -&gt; $i {
        my $current = @in[$i];
        $index++ if $current != $last + 1;
        push @sequences[$index], $current;
        $last = $current;
    }
    my @sorted_seq = sort { $^b.elems &lt;=&gt; $^a.elems }, @sequence;
    if @sorted_seq[0] &gt; 1 {
        say @sorted_seq[0];
    } else {
        say 0;
    }
}
</code></pre>

<p>This displays the following output:</p>

<pre><code>[2 3 4]
0
[9 10 11]
</code></pre>

<h3>Longest Consecutive Sequences in Perl</h3>

<p>In this Perl version, we also use three input arrays for our tests. For each test case, we simply sort the input array and scan the sorted results for consecutive sequences. Consecutive sequences are stored in the <code>@sequences</code> array of arrays and we simply output the longest sequence:</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;

my @tests = ( [ 100, 4, 50, 3, 2 ],
              [ 20, 30, 10, 40, 50 ],
              [ 20, 19, 9, 11, 10 ]
            );

for my $t_ref (@tests) {
    my @in = sort { $a &lt;=&gt; $b } @$t_ref;
    my $last = $in[0];
    my @sequences;
    my $index = 0;
    push @{$sequences[$index]}, $last;
    for my $i (1..$#in) {
        my $current = $in[$i];
        $index++ if $current != $last + 1;
        push @{$sequences[$index]}, $current;
        $last = $current;
    }
    my @sorted_seq = sort { scalar @$b &lt;=&gt; scalar @$a } @sequences;
    if (scalar @{$sorted_seq[0]} &gt; 1) {
        say "@{$sorted_seq[0]}";
    } else {
        say 0;
    }
}
</code></pre>

<p>This is the output displayed by this script:</p>

<pre><code>$ perl longest-seq.pl
2 3 4
0
9 10 11
</code></pre>

<h2>Task 2: Largest Rectangle</h2>

<p><em>You are given matrix m x n with 0 and 1.</em></p>

<p><em>Write a script to find the largest rectangle containing only 1. Print 0 if none found.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input:
    [ 0 0 0 1 0 0 ]
    [ 1 1 1 0 0 0 ]
    [ 0 0 1 0 0 1 ]
    [ 1 1 1 1 1 0 ]
    [ 1 1 1 1 1 0 ]

Output:
    [ 1 1 1 1 1 ]
    [ 1 1 1 1 1 ]
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input:
    [ 1 0 1 0 1 0 ]
    [ 0 1 0 1 0 1 ]
    [ 1 0 1 0 1 0 ]
    [ 0 1 0 1 0 1 ]

Output: 0
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input:
    [ 0 0 0 1 1 1 ]
    [ 1 1 1 1 1 1 ]
    [ 0 0 1 0 0 1 ]
    [ 0 0 1 1 1 1 ]
    [ 0 0 1 1 1 1 ]

Output:
    [ 1 1 1 1 ]
    [ 1 1 1 1 ]
</code></pre>

<p>At first glance, this seemed to be a fairly easy task. It turned out to be much more complicated than I expected.</p>

<p>My initial idea was to scan the matrix from top left to bottom right, and, for any 1 found, to try to expand this position into a region toward the right and toward the bottom. When starting to think about the implementation, I found that this approach was going to be complicated, painful, and probably quite clumsy.</p>

<p>So, I decided to proceed in a different way: generate all rectangles toward the right and the bottom of any position with a 1, then eliminate those containing at least one zero, and find the largest remaining rectangle. In both the Raku and the Perl programs below, a rectangle consists of at least two contiguous 1s, and is uniquely defined by its top left and bottom right corners.</p>

<p>As both the Raku and the Perl programs described below are a bit complicated, I will avoid abusing the expressive power of the programming language ans will describe separately the main steps of the algorithm before providing the full program.</p>

<h3>Largest Rectangle in Raku</h3>

<p>For this program, we&#8217;ll use six matrices as test cases:</p>

<pre><code>my @matrices = 
    [ [ &lt;0 1 0 1&gt; ], [ &lt;0 0 1 0&gt; ], [ &lt;1 1 0 1&gt; ], [ &lt;1 1 0 1&gt; ] ], 
    [ [ &lt;1 1 0 1&gt; ], [ &lt;1 1 0 0&gt; ], [ &lt;0 1 1 1&gt; ], [ &lt;1 0 1 1&gt; ] ],
    [ [ &lt;0 1 0 1&gt; ], [ &lt;1 0 1 0&gt; ], [ &lt;0 1 0 0&gt; ], [ &lt;1 0 0 1&gt; ] ],

    [ [ &lt;1 1 0 1 1 1&gt; ], [ &lt;1 1 1 0 1 0&gt; ], 
        [ &lt;1 1 0 1 0 1&gt; ], [ &lt;1 1 1 0 0 1&gt; ] 
    ],

    [ [ &lt;0 0 0 1 0 0&gt; ], [ &lt;1 1 1 0 0 0&gt; ], 
      [ &lt;0 0 1 0 0 1&gt; ], [ &lt;1 1 1 1 1 0&gt; ], [ &lt;1 1 1 1 1 0&gt;],
    ],

    [ [ &lt;0 0 0 1 1 1&gt; ], [ &lt;1 1 1 1 1 1&gt; ], 
      [ &lt;0 0 1 0 0 1&gt; ], [ &lt;0 0 1 1 1 1&gt; ], 
      [ &lt;0 0 1 1 1 1&gt; ],
    ];
</code></pre>

<p>The first step will be to iterate over the six test cases and for each test matrix, to call the <code>print-matrix</code> subroutine (which pretty-prints the input matrix) and the <code>find-rect</code> subroutine, which does most of the work and will be described in greater detail below.</p>

<pre><code>for @matrices -&gt; @m {
    print-matrix @m;
    find-rect @m;
}
</code></pre>

<p>The <code>print-matrix</code> reads the input matrix line by line and prints a formated version of all such lines:</p>

<pre><code>sub print-matrix (@matrix) {
    say "[ $_ ]" for @matrix;
    say "";
}
</code></pre>

<p>For our first test matrix:</p>

<pre><code>[ [ &lt;0 1 0 1&gt; ], [ &lt;0 0 1 0&gt; ], [ &lt;1 1 0 1&gt; ], [ &lt;1 1 0 1&gt; ] ]
</code></pre>

<p>this subroutine prints this:</p>

<pre><code>[ 0 1 0 1 ]
[ 0 0 1 0 ]
[ 1 1 0 1 ]
[ 1 1 0 1 ]
</code></pre>

<p>As said before, the <code>find-rect</code> does the bulk of the work.</p>

<p>First, we make a <code>@positions</code> array of all positions (defined by their coordinates) in the matrix that contain a value equal to 1. For this, we use the <a href="https://docs.raku.org/routine/X">X</a> infix cross operator to generate a Cartesian product of all positions and filter out positions whose value in the matrix is not equal to 1:</p>

<pre><code>my $max-h = @m.end;
my $max-w = @m[0].end;
my @positions =  ((0..$max-h) X  (0..$max-w))
    .grep({@m[$_[0]][$_[1]] == 1});
</code></pre>

<p>For the first test matrix, the list of valid positions is this:</p>

<pre><code>[(0 1) (0 3) (1 2) (2 0) (2 1) (2 3) (3 0) (3 1) (3 3)]
</code></pre>

<p>The next step is to create a <code>@pairs</code> list of pairs of positions (which will represent the top left and bottom right corners of each rectangle). For this, we use the <a href="https://docs.raku.org/routine/combinations">combinations</a> built-in routine of Raku:</p>

<pre><code>    my @pairs = @positions.combinations: 2;
</code></pre>

<p>For our first test matrix, this generates a data structure like so (slightly reformatted for clarity):</p>

<pre><code>[((0 1) (0 3))  ((0 1) (1 2))  ((0 1) (2 0))  ((0 1) (2 1)) 
 ((0 1) (2 3))  ((0 1) (3 0))  ((0 1) (3 1))  ((0 1) (3 3)) 
 [content omitted for brevity]
 ((2 1) (3 1))  ((2 1) (3 3))  ((2 3) (3 0))  ((2 3) (3 1)) 
 ((2 3) (3 3))  ((3 0) (3 1))  ((3 0) (3 3))  ((3 1) (3 3))]
</code></pre>

<p>Note that, at this point, the rectangles represented by those point pairs may contain some 0s (we only know that the point pairs themselves are 1s). For example, the first point pair above:</p>

<pre><code>((0 1) (0 3))
</code></pre>

<p>corresponds to the following rectangle in the input matrix:</p>

<pre><code>1 0 1
</code></pre>

<p>As it can be seen, the bounds are 1s, but the middle item if 0. This is not a valid rectangle candidate. </p>

<p>In addition, the <code>((0 1) (3 0))</code> pair in the second line doesn&#8217;t define a valid rectangle because the second coordinate of the first pair (1) is larger than its counterpart in second pair, and we said that the first pair must represent the top left and the second pair the bottom right points of the rectangle. Here, the second point is to the left of the first. We need to eliminate these malformed rectangles.</p>

<p>The next step is therefore to keep only valid rectangles rectangles and store them into the <code>@eligible</code> array:</p>

<pre><code>my @eligible = gather {
    for @pairs -&gt; $p {
        # Remove malformed rectangles
        next if $p[0][0] &gt; $p[1][0] or $p[0][1] &gt; $p[1][1];
        # remove rectangles containing 0s.
        next if @m[$p[0][0]..$p[1][0];$p[0][1]..$p[1][1]].any == 0; 
        take $p;
    }
}
</code></pre>

<p>Note that the following expression (using a semi-colon to separate the coordinate ranges) :
    @m[$p[0][0]..$p[1][0];$p[0][1]..$p[1][1]]</p>

<p>flattens the input rectangle into a flat list, so that we can use a simple <code>any</code> <a href="https://docs.raku.org/type/Junction">junction</a> to detect any 0 item.</p>

<p>If the <code>@eligible</code> array is empty, then we did not find any suitable rectangle. In such a case, we print 0 and exit the subroutine.</p>

<pre><code>say "0\n" and return unless @eligible;
</code></pre>

<p>In the case of our first test matrix, there are six eligible rectangles:</p>

<pre><code>[((2 0) (2 1))  ((2 0) (3 0))  ((2 0) (3 1))  
 ((2 1) (3 1))  ((2 3) (3 3))  ((3 0) (3 1))
]
</code></pre>

<p>We now need to pick the largest rectangle. For this, we simply sort in descending order according to their area size. In Raku, when the code object passed as the first parameter to the <code>sort</code> subroutine takes only one parameter, then it is not a comparison code block, but a code object implementing the transformation to be applied to all items before applying the default <code>cmp</code>comparison subroutine. Here, we use this code block:</p>

<pre><code>{($_[1][0] - $_[0][0] + 1) * ($_[1][1] - $_[0][1] + 1)}
</code></pre>

<p>in order to compute the area of the rectangle and use it for the comparison. So the sort block looks like this:</p>

<pre><code>my $rect = (reverse sort { 
        ($_[1][0] - $_[0][0] + 1) * ($_[1][1] - $_[0][1] + 1) 
        }, @eligible)[0];
</code></pre>

<p>Now, we&#8217;re done, we have the largest rectangle, we only need to display the result.</p>

<p>This is the full code of the program:</p>

<pre><code>use v6;

my @matrices = 
    [ [ &lt;0 1 0 1&gt; ], [ &lt;0 0 1 0&gt; ], [ &lt;1 1 0 1&gt; ], [ &lt;1 1 0 1&gt; ] ], 
    [ [ &lt;1 1 0 1&gt; ], [ &lt;1 1 0 0&gt; ], [ &lt;0 1 1 1&gt; ], [ &lt;1 0 1 1&gt; ] ],
    [ [ &lt;0 1 0 1&gt; ], [ &lt;1 0 1 0&gt; ], [ &lt;0 1 0 0&gt; ], [ &lt;1 0 0 1&gt; ] ],

    [ [ &lt;1 1 0 1 1 1&gt; ], [ &lt;1 1 1 0 1 0&gt; ], 
        [ &lt;1 1 0 1 0 1&gt; ], [ &lt;1 1 1 0 0 1&gt; ] 
    ],

    [ [ &lt;0 0 0 1 0 0&gt; ], [ &lt;1 1 1 0 0 0&gt; ], 
      [ &lt;0 0 1 0 0 1&gt; ], [ &lt;1 1 1 1 1 0&gt; ], [ &lt;1 1 1 1 1 0&gt;],
    ],

    [ [ &lt;0 0 0 1 1 1&gt; ], [ &lt;1 1 1 1 1 1&gt; ], 
      [ &lt;0 0 1 0 0 1&gt; ], [ &lt;0 0 1 1 1 1&gt; ], 
      [ &lt;0 0 1 1 1 1&gt; ],
    ];

for @matrices -&gt; @m {
    print-matrix @m;
    find-rect @m;
}
sub print-matrix (@matrix) {
    say "[ $_ ]" for @matrix;
    say "";
}

sub find-rect (@m) {
    my $max-h = @m.end;
    my $max-w = @m[0].end;
    my @positions =  ((0..$max-h) X  (0..$max-w))
        .grep({@m[$_[0]][$_[1]] == 1});
    # say @positions;
    my @pairs = @positions.combinations: 2;
    # say @pairs;
    my @eligible = gather {
        for @pairs -&gt; $p {
            next if $p[0][0] &gt; $p[1][0] or $p[0][1] &gt; $p[1][1];
            next if @m[$p[0][0]..$p[1][0];$p[0][1]..$p[1][1]].any == 0; 
            take $p;
        }
    }
    say "0\n" and return unless @eligible;
    my $rect = (reverse sort { 
            ($_[1][0] - $_[0][0] + 1) * ($_[1][1] - $_[0][1] + 1) 
            }, @eligible)[0];
    say  "Rectangle corners: ", $rect;
    for $rect[0][0]..$rect[1][0] -&gt; $row {
        say @m[$row][$rect[0][1]..$rect[1][1]];
    }
    say "";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku rectangular-matrix.raku
[ 0 1 0 1 ]
[ 0 0 1 0 ]
[ 1 1 0 1 ]
[ 1 1 0 1 ]

Rectangle corners: ((2 0) (3 1))
(1 1)
(1 1)

[ 1 1 0 1 ]
[ 1 1 0 0 ]
[ 0 1 1 1 ]
[ 1 0 1 1 ]

Rectangle corners: ((2 2) (3 3))
(1 1)
(1 1)

[ 0 1 0 1 ]
[ 1 0 1 0 ]
[ 0 1 0 0 ]
[ 1 0 0 1 ]

0

[ 1 1 0 1 1 1 ]
[ 1 1 1 0 1 0 ]
[ 1 1 0 1 0 1 ]
[ 1 1 1 0 0 1 ]

Rectangle corners: ((0 0) (3 1))
(1 1)
(1 1)
(1 1)
(1 1)

[ 0 0 0 1 0 0 ]
[ 1 1 1 0 0 0 ]
[ 0 0 1 0 0 1 ]
[ 1 1 1 1 1 0 ]
[ 1 1 1 1 1 0 ]

Rectangle corners: ((3 0) (4 4))
(1 1 1 1 1)
(1 1 1 1 1)

[ 0 0 0 1 1 1 ]
[ 1 1 1 1 1 1 ]
[ 0 0 1 0 0 1 ]
[ 0 0 1 1 1 1 ]
[ 0 0 1 1 1 1 ]

Rectangle corners: ((3 2) (4 5))
(1 1 1 1)
(1 1 1 1)
</code></pre>

<h3>Largest Rectangle in Perl</h3>

<p>For this program, we&#8217;ll use seven matrices for our test cases:</p>

<pre><code>my @matrices = 
    ( [ [ qw &lt;0 1 0 1&gt; ], [ qw &lt;0 0 1 0&gt; ], 
        [ qw &lt;1 1 0 1&gt; ], [ qw &lt;1 1 0 1&gt; ] 
      ], 

      [ [ qw &lt;1 1 0 1&gt; ], [ qw &lt;1 1 0 0&gt; ], 
        [ qw &lt;0 1 1 1&gt; ], [ qw &lt;1 0 1 1&gt; ] 
      ],

      [ [ qw &lt;0 1 0 1&gt; ], [ qw &lt;1 0 1 0&gt; ], 
        [ qw &lt;0 1 0 0&gt; ], [ qw &lt;1 0 0 1&gt; ] 
      ],

      [ [ qw &lt;1 1 0 1 1 1&gt; ], [ qw &lt;1 1 1 0 1 0&gt; ], 
          [ qw &lt;1 1 0 1 0 1&gt; ], [ qw &lt;1 1 1 0 0 1&gt; ] 
      ],

      [ [ qw &lt;0 0 0 1 0 0&gt; ], [ qw &lt;1 1 1 0 0 0&gt; ], 
          [ qw &lt;0 0 1 0 0 1&gt; ], [ qw &lt;1 1 1 1 1 0&gt; ], 
          [ qw &lt;1 1 1 1 1 0&gt;],
      ],
      [ [ qw &lt;1 0 1 0 1 0&gt; ], [ qw &lt;0 1 0 1 0 1&gt; ], 
          [ qw &lt;1 0 1 0 1 0&gt; ], [ qw &lt;0 1 0 1 0 1&gt; ],
      ],
      [ [ qw &lt;0 0 0 1 1 1&gt; ], [ qw &lt;1 1 1 1 1 1&gt; ], 
          [ qw &lt;0 0 1 0 0 1&gt; ], [ qw &lt;0 0 1 1 1 1&gt; ], 
          [ qw &lt;0 0 1 1 1 1&gt; ],
      ],
    );
</code></pre>

<p>The first step will be to iterate over the seven test cases and for each test matrix, to call the <code>print_matrix</code> subroutine (which pretty-prints the input matrix) and the <code>find_rect</code> subroutine, which does most of the work and will be described in detail below.</p>

<pre><code>for my $m_ref (@matrices) {
    print_matrix($m_ref);
    find_rect($m_ref);
}

sub print_matrix {
    my @matrix = @{$_[0]};
    say "";
    say "[ @$_ ]" for @matrix;
    say "";
}
</code></pre>

<p>For our first sample matrix:</p>

<pre><code>             [ [ qw &lt;0 1 0 1&gt; ], [ qw &lt;0 0 1 0&gt; ], 
               [ qw &lt;1 1 0 1&gt; ], [ qw &lt;1 1 0 1&gt; ] 
             ],
</code></pre>

<p>the <code>print_matrix</code> subroutine displays this:</p>

<pre><code>[ 0 1 0 1 ]
[ 0 0 1 0 ]
[ 1 1 0 1 ]
[ 1 1 0 1 ]
</code></pre>

<p>As said before, the <code>find-rect</code> does the bulk of the work.</p>

<p>First, we make a <code>@positions</code> array of all positions (defined by their coordinates) in the matrix that contain a value equal to 1. For this, we use a nested <code>for</code> loop:</p>

<pre><code>my @positions;
for my $i (0..$#m) {
    for my $j (0..$#{$m[0]}) {
        push @positions, [$i, $j] unless $m[$i][$j] == 0;
    }
}
</code></pre>

<p>For the first test matrix, we obtain the following non-zero positions:</p>

<pre><code>(0 1) (0 3) (1 2) (2 0) (2 1) (2 3) (3 0) (3 1) (3 3)
</code></pre>

<p>Then we use another nested <code>for</code> loop to find all the point pairs:</p>

<pre><code>my @pairs;
for my $k (0..$#positions) {
    for my $n ($k+1..$#positions) {
        push @pairs, [ [@{$positions[$k]}], [@{$positions[$n]}] ];
    }
}
</code></pre>

<p>Note that, at this point, the rectangles represented by those point pairs may contain some 0s (we only know that the point pairs themselves are 1s). For example, the first point pair generated:</p>

<pre><code>((0 1) (0 3))
</code></pre>

<p>corresponds to the following rectangle in the matrix:</p>

<pre><code>1 0 1
</code></pre>

<p>As it can be seen, the bounds are 1s, but the middle item is 0. This is not a valid rectangle candidate. </p>

<p>In addition, we obtain pairs such as <code>((0 1) (3 0))</code> , which doesn&#8217;t define a valid rectangle because the second coordinate of the first pair (1) is larger than its counterpart in second pair, and we said earlier that the first pair must represent the top left point and the second pair the bottom right point of the rectangle. Here, the second point is to the left of the first. We need to eliminate these malformed rectangles.</p>

<p>The code below eliminates invalid rectangles and stores the others in the <code>@eligible</code> array:</p>

<pre><code>my @eligible;
for my $p_ref (@pairs) {
    my @p = @$p_ref;
    # Remove malformed rectangles
    next if $p[0][0] &gt; $p[1][0] or $p[0][1] &gt; $p[1][1];
    # Remove rectangles containing 0s
    my $only_ones = 1;
    for my $i ($p[0][0].. $p[1][0]) {
        for my $j ($p[0][1]..$p[1][1]) {
            if ($m[$i][$j] == 0) {
                $only_ones = 0;
                next;
            }
        }
    }
     push @eligible, $p_ref if $only_ones;
}
</code></pre>

<p>If the <code>@eligible</code> array is empty, then we did not find any suitable rectangle. So, we print out 0 and exit the subroutine.</p>

<pre><code>say "0\n" and return unless @eligible;
</code></pre>

<p>In the case of our first test matrix, there are six eligible rectangles left:</p>

<pre><code>((2 0) (2 1))  ((2 0) (3 0))  ((2 0) (3 1))  ((2 1) (3 1))  ((2 3) (3 3))  ((3 0) (3 1))
</code></pre>

<p>We now need to find the largest rectangle. For this, we sort the eligible rectangles in descending order according to their area size and pick the first one in the sorted list. Since the comparison routine computing the rectangle area is somewhat complicated, we use a <a href="https://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian Transform</a> for the sort:</p>

<pre><code>my @sorted = map { $_-&gt;[0] } 
             sort { $b-&gt;[1] &lt;=&gt; $a-&gt;[1] }
             map { [$_, ($_-&gt;[1][0] - $_-&gt;[0][0] + 1) 
                   * ($_-&gt;[1][1] - $_-&gt;[0][1] + 1)] } 
                   @eligible;
my $rect = $sorted[0];
</code></pre>

<p>Now that we have found the largest rectangle, we only need to display the result.</p>

<p>This is the full code of the program:</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;

my @matrices = 
    ( [ [ qw &lt;0 1 0 1&gt; ], [ qw &lt;0 0 1 0&gt; ], 
        [ qw &lt;1 1 0 1&gt; ], [ qw &lt;1 1 0 1&gt; ] 
      ], 

      [ [ qw &lt;1 1 0 1&gt; ], [ qw &lt;1 1 0 0&gt; ], 
        [ qw &lt;0 1 1 1&gt; ], [ qw &lt;1 0 1 1&gt; ] 
      ],

      [ [ qw &lt;0 1 0 1&gt; ], [ qw &lt;1 0 1 0&gt; ], 
        [ qw &lt;0 1 0 0&gt; ], [ qw &lt;1 0 0 1&gt; ] 
      ],

      [ [ qw &lt;1 1 0 1 1 1&gt; ], [ qw &lt;1 1 1 0 1 0&gt; ], 
          [ qw &lt;1 1 0 1 0 1&gt; ], [ qw &lt;1 1 1 0 0 1&gt; ] 
      ],

      [ [ qw &lt;0 0 0 1 0 0&gt; ], [ qw &lt;1 1 1 0 0 0&gt; ], 
          [ qw &lt;0 0 1 0 0 1&gt; ], [ qw &lt;1 1 1 1 1 0&gt; ], 
          [ qw &lt;1 1 1 1 1 0&gt;],
      ],
      [ [ qw &lt;1 0 1 0 1 0&gt; ], [ qw &lt;0 1 0 1 0 1&gt; ], 
          [ qw &lt;1 0 1 0 1 0&gt; ], [ qw &lt;0 1 0 1 0 1&gt; ],
      ],
      [ [ qw &lt;0 0 0 1 1 1&gt; ], [ qw &lt;1 1 1 1 1 1&gt; ], 
          [ qw &lt;0 0 1 0 0 1&gt; ], [ qw &lt;0 0 1 1 1 1&gt; ], 
          [ qw &lt;0 0 1 1 1 1&gt; ],
      ],
    );

for my $m_ref (@matrices) {
    print_matrix($m_ref);
    find_rect($m_ref);
}

sub print_matrix {
    my @matrix = @{$_[0]};
    say "";
    say "[ @$_ ]" for @matrix;
    say "";
}

sub find_rect {
    my @m = @{$_[0]};
    my $max_h = scalar @m;
    my $max_w = scalar @{$m[0]};
    my @positions;
    for my $i (0..$#m) {
        for my $j (0..$#{$m[0]}) {
            push @positions, [$i, $j] unless $m[$i][$j] == 0;
        }
    }
    my @pairs;
    for my $k (0..$#positions) {
        for my $n ($k+1..$#positions) {
            push @pairs, [ [@{$positions[$k]}], [@{$positions[$n]}] ];
        }
    }

    my @eligible;
    for my $p_ref (@pairs) {
        my @p = @$p_ref;
        next if $p[0][0] &gt; $p[1][0] or $p[0][1] &gt; $p[1][1];
        my $only_ones = 1;
        for my $i ($p[0][0].. $p[1][0]) {
            for my $j ($p[0][1]..$p[1][1]) {
                if ($m[$i][$j] == 0) {
                    $only_ones = 0;
                    next;
                }
            }
        }
         push @eligible, $p_ref if $only_ones;
    } 

    say 0 and return unless @eligible;

my @sorted = map { $_-&gt;[0] } 
             sort { $b-&gt;[1] &lt;=&gt; $a-&gt;[1] }
             map { [$_, ($_-&gt;[1][0] - $_-&gt;[0][0] + 1) 
                   * ($_-&gt;[1][1] - $_-&gt;[0][1] + 1)] } 
                   @eligible;
    my $rect = $sorted[0];
    say "Rectangle corners: ";
    say "@$_" for @$rect; 
    say "\nRectangle:";

    for my $row ($rect-&gt;[0][0]..$rect-&gt;[1][0]) {
        say "@{$m[$row]}[$rect-&gt;[0][1]..$rect-&gt;[1][1]]";
    }
    say "";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  rectangular-matrix.pl

[ 0 1 0 1 ]
[ 0 0 1 0 ]
[ 1 1 0 1 ]
[ 1 1 0 1 ]

Rectangle corners:
2 0
3 1

Rectangle:
1 1
1 1


[ 1 1 0 1 ]
[ 1 1 0 0 ]
[ 0 1 1 1 ]
[ 1 0 1 1 ]

Rectangle corners:
0 0
1 1

Rectangle:
1 1
1 1


[ 0 1 0 1 ]
[ 1 0 1 0 ]
[ 0 1 0 0 ]
[ 1 0 0 1 ]

0

[ 1 1 0 1 1 1 ]
[ 1 1 1 0 1 0 ]
[ 1 1 0 1 0 1 ]
[ 1 1 1 0 0 1 ]

Rectangle corners:
0 0
3 1

Rectangle:
1 1
1 1
1 1
1 1


[ 0 0 0 1 0 0 ]
[ 1 1 1 0 0 0 ]
[ 0 0 1 0 0 1 ]
[ 1 1 1 1 1 0 ]
[ 1 1 1 1 1 0 ]

Rectangle corners:
3 0
4 4

Rectangle:
1 1 1 1 1
1 1 1 1 1


[ 1 0 1 0 1 0 ]
[ 0 1 0 1 0 1 ]
[ 1 0 1 0 1 0 ]
[ 0 1 0 1 0 1 ]

0

[ 0 0 0 1 1 1 ]
[ 1 1 1 1 1 1 ]
[ 0 0 1 0 0 1 ]
[ 0 0 1 1 1 1 ]
[ 0 0 1 1 1 1 ]

Rectangle corners:
3 2
4 5

Rectangle:
1 1 1 1
1 1 1 1
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, November, 29, 2020. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6534935039608101899</id>
    <published>2020-11-21T15:29:00.000+01:00</published>
    <updated>2020-11-21T15:29:12.133+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxvi) 11 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MHX/Convert-Binary-C-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Convert::Binary::C&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Binary Data Conversion using C Types &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.79 was 6 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.56&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 7.54 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.62' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.62&lt;/strong&gt; on 2020-11-16&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.61 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20201120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20201120&lt;/strong&gt; on 2020-11-20&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20201020 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Moo-2.004003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Moo&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Minimalist Object Orientation (with Moose compatibility) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.004003&lt;/strong&gt; on 2020-11-21&lt;/li&gt;  &lt;li&gt;Votes: 277&lt;/li&gt;  &lt;li&gt;Previous version: 2.004000 was 7 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.29&lt;/strong&gt; on 2020-11-18&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.28 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.025&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 2.024 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KHW/Pod-Simple-3.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - framework for parsing Pod &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.42&lt;/strong&gt; on 2020-11-14&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.41 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0927' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0927&lt;/strong&gt; on 2020-11-20&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0926 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-YouTube-Download-0.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::YouTube::Download&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - WWW::YouTube::Download - Very simple YouTube video download interface &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.65&lt;/strong&gt; on 2020-11-19&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.64 was 1 month, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.067' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.067&lt;/strong&gt; on 2020-11-16&lt;/li&gt;  &lt;li&gt;Votes: 36&lt;/li&gt;  &lt;li&gt;Previous version: 1.066 was 3 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6534935039608101899/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6534935039608101899"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6534935039608101899"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxvi-11-cpan-great-modules-released.html" title="(cccxvi) 11 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4707156040209215882</id>
    <published>2020-11-21T15:23:00.004+01:00</published>
    <updated>2020-11-21T15:23:49.775+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxliii) metacpan weekly report - Tickit::Widgets</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 60&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Tickit::Widgets"&gt;Tickit::Widgets&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2020/11/21 14:22:09 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ShouldUpdate" target="_blank"&gt;File::ShouldUpdate&lt;/a&gt; - should files be rebuilt?&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SAML" target="_blank"&gt;Mojo::SAML&lt;/a&gt; - A SAML2 toolkit using the Mojo toolkit&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SockAddr" target="_blank"&gt;Net::SockAddr&lt;/a&gt; - Socket address OO-wrapper with Perl and C++ interface.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco::Lite::App" target="_blank"&gt;Zydeco::Lite::App&lt;/a&gt; - use Zydeco::Lite to quickly develop command-line apps&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AI::Genetic::Pro" target="_blank"&gt;AI::Genetic::Pro&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::HTTPThis" target="_blank"&gt;App::HTTPThis&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argon" target="_blank"&gt;Argon&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Diff" target="_blank"&gt;Array::Diff&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Child" target="_blank"&gt;Child&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CLDR::Number" target="_blank"&gt;CLDR::Number&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/common::sense" target="_blank"&gt;common::sense&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Changes" target="_blank"&gt;CPAN::Changes&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Digger" target="_blank"&gt;CPAN::Digger&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Daemon::Control" target="_blank"&gt;Daemon::Control&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Moonpig" target="_blank"&gt;DateTime::Moonpig&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTimeX::Immutable" target="_blank"&gt;DateTimeX::Immutable&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::RunSQL" target="_blank"&gt;DBIx::RunSQL&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla" target="_blank"&gt;Dist::Zilla&lt;/a&gt; (+1=175)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Excel::Writer::XLSX" target="_blank"&gt;Excel::Writer::XLSX&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Fsdb" target="_blank"&gt;Fsdb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Kingpin" target="_blank"&gt;Getopt::Kingpin&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Lucid" target="_blank"&gt;Getopt::Lucid&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::ImageView" target="_blank"&gt;Gtk3::ImageView&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gtk3::WebKit2" target="_blank"&gt;Gtk3::WebKit2&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Guard" target="_blank"&gt;Guard&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Daemon" target="_blank"&gt;HTTP::Daemon&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny::Multipart" target="_blank"&gt;HTTP::Tiny::Multipart&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Import::Base" target="_blank"&gt;Import::Base&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lexical::Var" target="_blank"&gt;Lexical::Var&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Any" target="_blank"&gt;Log::Any&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mail::Toaster" target="_blank"&gt;Mail::Toaster&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Log::Any" target="_blank"&gt;Mojolicious::Plugin::Log::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::SecurityHeader" target="_blank"&gt;Mojolicious::Plugin::SecurityHeader&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::NATS::Client" target="_blank"&gt;Net::NATS::Client&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Dist" target="_blank"&gt;PAR::Dist&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL::CCS" target="_blank"&gt;PDL::CCS&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=120)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PkgConfig" target="_blank"&gt;PkgConfig&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Usage" target="_blank"&gt;Pod::Usage&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+2=73)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ShellQuote" target="_blank"&gt;String::ShellQuote&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Animation" target="_blank"&gt;Term::Animation&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Levenshtein::Damerau" target="_blank"&gt;Text::Levenshtein::Damerau&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit" target="_blank"&gt;Tickit&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widget::Statusbar" target="_blank"&gt;Tickit::Widget::Statusbar&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit::Widgets" target="_blank"&gt;Tickit::Widgets&lt;/a&gt; (+3=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Serialiser" target="_blank"&gt;Types::Serialiser&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/use" target="_blank"&gt;use&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=84)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4707156040209215882/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4707156040209215882"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4707156040209215882"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdxliii-metacpan-weekly-report.html" title="(cdxliii) metacpan weekly report - Tickit::Widgets"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-589584677403667493</id>
    <published>2020-11-21T15:13:00.005+01:00</published>
    <updated>2020-11-21T15:13:42.647+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxviii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2020-11-21 14:12:14 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64935422" target="_blank"&gt;How to avoid "deep recursion" error/warning in Type::Tiny::_build_coercion&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64884488" target="_blank"&gt;perl shebang: `Too late for "-Mstrict"`&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64935211" target="_blank"&gt;How can I operate on a list which is identified by a string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64882530" target="_blank"&gt;500 Can't connect to url with lwp in perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64880685" target="_blank"&gt;Using FIND &amp;amp; EXEC to execute a filename-required Perl script over multiple files&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64861826" target="_blank"&gt;How can I get the directory two levels up in a path in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64862592" target="_blank"&gt;Perl: parsing text output into array of hashes&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64863881" target="_blank"&gt;How can I assign STDOUT to a var and print to that while using 'use strict'?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64873766" target="_blank"&gt;Is possible iteration over undefined dereferenced array a bug or a feature?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/64907212" target="_blank"&gt;How to catch ctrl+c and close file descriptor in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/589584677403667493/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxviii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/589584677403667493"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/589584677403667493"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cdlxviii-stackoverflow-perl-report.html" title="(cdlxviii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Weekly Challenge 087</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-087-6mj" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-087/"&gt;Challenge&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-longest-consecutive-sequence" class="anchor"&gt;
  &lt;/a&gt;
  TASK #1 › Longest Consecutive Sequence
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given an unsorted array of integers &lt;code&gt;@N&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to find the longest consecutive sequence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;Print 0 if none sequence found&lt;br&gt;
This was relatively straight forward. Once I checked that we have one or more integer values, I then loop through a sorted list of numbers.&lt;/p&gt;

&lt;p&gt;I have an array &lt;code&gt;@current&lt;/code&gt; that stores the current run. This gets reset if the last number is not one less than the current number. I then set &lt;code&gt;@largest&lt;/code&gt; to store the largest sequence of integers.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;@largest&lt;/code&gt; contains at least two numbers I print that array, otherwise I print zero.&lt;/p&gt;

&lt;p&gt;On a programming note, I know that I can use &lt;code&gt;if (@a &amp;lt; @b) {&lt;/code&gt;, but I still prefer to use &lt;code&gt;if (scalar(@a) &amp;lt; scalar(@b) {&lt;/code&gt;. That way it is pretty clear want I meant, rather than Perl novices needed to know Perl will return the size of an array in a scalar context.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl 100 4 50 3 2
Output: (2, 3, 4)

» ./ch-1.pl 20 30 10 40 50
Output: 0

» ./ch-1.pl 20 19 9 11 10
Output: (9, 10, 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#task-2-largest-rectangle" class="anchor"&gt;
  &lt;/a&gt;
  TASK #2 › Largest Rectangle
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given matrix &lt;code&gt;m x n&lt;/code&gt; with &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to find the largest rectangle containing only 1. Print &lt;code&gt;0&lt;/code&gt; if none found.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;This is similar to the '&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-084/#TASK2"&gt;Find Square&lt;/a&gt;' task of challenge 084.&lt;/p&gt;

&lt;p&gt;I probably over comment my code in PWC tasks. Mainly as it helps others follow my logic. So using nothing other the comment lines, here's how I solved this task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    # Process the input
    # Sanity check
    # Go through each rows and column
    # The top left of a square cannot be on the right or bottom row (hence -2)
            # No rectangle if this row has &amp;lt; 2 zeros
            # Find the maximum rectangle size
                # No more rectangles can be made from this starting point
                # Update the largest rectangle if this one is bigger
    # Display the output
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl '[ 0 0 0 1 0 0 ]' '[ 1 1 1 0 0 0 ]' '[ 0 0 1 0 0 1 ]' '[ 1 1 1 1 1 0 ]' '[ 1 1 1 1 1 0 ]'
[ 1 1 1 1 1 ]
[ 1 1 1 1 1 ]

» ./ch-2.pl '[ 1 0 1 0 1 0 ]' '[ 0 1 0 1 0 1 ]' '[ 1 0 1 0 1 0 ]' '[ 0 1 0 1 0 1 ]'
Output: 0

» ./ch-2.pl '[ 0 0 0 1 1 1 ]' '[ 1 1 1 1 1 1 ]' '[ 0 0 1 0 0 1 ]' '[ 0 0 1 1 1 1 ]' '[ 0 0 1 1 1 1 ]'
[ 1 1 1 1 ]
[ 1 1 1 1 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-087-6mj</id>
    <published>2020-11-21T05:52:18Z</published>
    <updated>2020-11-21T05:52:18Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="weeklychanllenge"/>
  </entry>
  <entry>
    <title>Where is Rob?</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/alex1/2020/11/where-is-rob.html"/>
    <id>tag:blogs.perl.org,2020:/users/alex1//2058.9949</id>

    <published>2020-11-20T21:34:57Z</published>
    <updated>2020-11-20T21:40:33Z</updated>

    <summary>Does anybody know Rob Seegel (aka RCS), the author/maintainer of Tk::MListbox? I tried to contact the author by e-mail but didn't get any feedback so far. I would like to adopt the module Tk::MListbox (and the other packages)....</summary>
    <author>
        <name>Alex</name>
        <uri>http://www.perltk.de</uri>
    </author>
    
        <category term="CPAN" scheme="http://www.sixapart.com/ns/types#category"/>
    
    <category term="cpan" label="CPAN" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/alex1/">
        <![CDATA[<p>Does anybody know Rob Seegel (aka RCS), the author/maintainer of Tk::MListbox?</p>

<p>I tried to contact the author by e-mail but didn't get any feedback so far. <br />
I would like to adopt the module Tk::MListbox (and the other packages).</p>]]>
        
    </content>
</entry>
  <entry>
  <title>GitLab CI Pipeline for Perl DBD::Mock using Module::Build</title>
  <summary type="html"><![CDATA[<p>
<a href="https://gitlab.com/">GitLab</a> provides an integrated <a href="/ci">CI system</a> that is driven by a single <a href="/yaml">YAML</a> based configuration.
This example is based on the configuration file of the <a href="https://metacpan.org/pod/DBD::Mock">DBD::Mock</a> module.
<p>
I have copied it here and removed some of the repetitions. Visit the repo of that project to see the file they have.
<p>
]]></summary>
  <updated>2020-11-20T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/gitlab-ci-module-build"/>  <id>https://perlmaven.com/gitlab-ci-module-build</id>
  <content type="html"><![CDATA[<p>
<a href="https://gitlab.com/">GitLab</a> provides an integrated <a href="/ci">CI system</a> that is driven by a single <a href="/yaml">YAML</a> based configuration.
This example is based on the configuration file of the <a href="https://metacpan.org/pod/DBD::Mock">DBD::Mock</a> module.
<p>
I have copied it here and removed some of the repetitions. Visit the repo of that project to see the file they have.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>TPF Meeting Minutes for October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tpf-minutes-202010"/>
  <id>tag:news.perlfoundation.org,2020-11-19:/post/tpf-minutes-202010</id>
  <published>2020-11-19T12:14:39</published>
  <updated>2020-11-19T12:14:39</updated>
  <summary>
  <![CDATA[
     TPF Board members and the community leaders meet every month and here are the minutes from the October 2020 meeting. Part 1 Community Attendees  Board: Stuart Mackintosh, Peter Krawczyk, Dan Wright, Dave Rolsky, Ricardo Signes, Makoto Nozaki  Leaders: Jason Crome, Samantha McVey, Alex Beamish, Sawyer X, Todd Rinaldo, Matthias Bloch  Admin: Nic Evans  Confirmed absence: Mark Keating, Curtis Poe Grants  One grant approved needs funding 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>TPF Board members and the community leaders meet every month and here are the minutes from the October 2020 meeting.</p>

<h2>Part 1 - Community</h2>

<ul>
<li><p>Attendees</p>

<ul>
<li>Board: Stuart Mackintosh, Peter Krawczyk, Dan Wright, Dave Rolsky, Ricardo Signes, Makoto Nozaki (late) </li>
<li>Leaders: Jason Crome, Samantha McVey, Alex Beamish, Sawyer X, Todd Rinaldo, Matthias Bloch</li>
<li>Admin: Nic Evans</li>
<li>Confirmed absence: Mark Keating, Curtis Poe</li>
</ul></li>
<li><p>Grants</p>

<ul>
<li>One grant approved - needs funding as there's no budget</li>
<li>Another grant was approved earlier but no work started 
<ul>
<li>Should have been canceled / resubmitted already according to the charter</li>
</ul></li>
<li>Working with Nic on website updates - close to completion</li>
<li>Main issue - no working budget
<ul>
<li>Possibly review previous budgets and consider how this can be increased per year</li>
<li>Funds are sectioned to languages (GC, Perl and Raku)</li>
<li>Pete looking to rearrange fund 'pots' to enable easier tracking next year</li>
</ul></li>
<li>Discussion around grants funding for funds - Can/should there be different pots? Can sponsors request specific support for each language - this needs further discussion - Jason Crome to follow up</li>
<li>Grant suggestions from the committee are available on the web</li>
</ul></li>
<li><p>Marketing</p>

<ul>
<li>Brief survey carried out regarding brand of The Perl Foundation</li>
<li>Highlighted need for wider survey, putting together budget proposal</li>
<li>Filled in creative brief for TPF</li>
<li>Promotion of TPF via Google Ads - discussion going on</li>
<li>z/OS article was mentioned as a good addition to marketing</li>
<li>Website improvements, bugs/issues list created</li>
</ul></li>
<li><p>The Perl/Raku Conference (USA)</p>

<ul>
<li>The contract of 2020/2021 is active</li>
</ul></li>
<li><p>EU Conference</p>

<ul>
<li>Discussion points: Organizers and sponsorship</li>
<li>Organizers
<ul>
<li>Andrew mentioned possibility of Perl/Raku conference</li>
<li>Should we talking about making EU conference a TPF event?</li>
<li>There is currently no immediate visible interest in having funding of an EU conference in Europe taken over by TPF</li>
<li>Historically YEF was formed because TPF didn't have the people to do this. Also EPO was formed</li>
<li>We need to talk to the key people to organize an event in Europe</li>
<li>The nature of conferences may be different going forward, we don't know when they will return to how they used to be. We need to look at our future - do we want more virtual conferences? Are there other opportunities for physical?</li>
</ul></li>
<li><p>Sponsorship</p>

<ul>
<li>Costs might be lower for virtual - how easy to get sponsors for virtual versus physical conferences?</li>
<li><p>We need to be clear with sponsors if we have both a US and an EU conference</p></li>
<li><p>Opinions:</p>

<ul>
<li>We have obligations to control how money is spent. There must be set guidelines. Whenever we create a special bucket for sponsorship we have an obligation to spend money on that bucket. We cannot then spend it on something else. What if we collect funds for a conference and it doesn't happen? We would have to give the money back. Currently we ask sponsors to give money to TPF (general funds) for this reason.</li>
<li>I want to make sure when I talk to sponsors to steer away from where money is going to 'this is TPF and we have various things we want to spend money on'. We need to avoid earmarked funds . Do not encourage sponsorship for specific items such as a conference.</li>
<li>I see this as more of an opportunity to get more money especially when the conference is held in a city where a major sponsor is located - need to find a way around legal issues - otherwise a missed opportunity</li>
</ul></li>
<li>Could have a soft earmarking with disclaimer such as 'should event not happen, it will be moved to general funds.'</li>
</ul></li>
<li>To continue discussion at next meeting</li>
</ul></li>
<li><p>Raku</p>

<ul>
<li>The Raku steering council formed recently, elected by core developers.</li>
<li>Question: How does CAT relate to Raku community?</li>
<li>Stuart: joint decision taken to keep Raku with TPF for now - longer term vision keen to progress recognised resources. These must adhere to set of recognised quality standards. CAT was established to do this, so should also provide support to Raku communities. Although sounds like marketing, it is a governance function. So we should support Raku Steering Council in any conduct issues. We need a recognised Raku presence within the organisation. </li>
<li>Action: invite member of Raku community to attend the Community leaders meeting - let them know TPF will support Raku community</li>
</ul></li>
<li><p>Perl</p>

<ul>
<li>Governance work to try and over time figure out a proper governance structure that is understood, accepted and supported by the community. </li>
<li>Stuart: this is about creating a process that will help the technical ecosystem for a long time. If it takes a long time, it needs to be done right/as best it can be - follow up again next month</li>
</ul></li>
<li><p>Infrastructure</p>

<ul>
<li>Trying to get a coherent list of what needs to be done</li>
<li>Discussion on getting perl web infrastructure managed under same system</li>
<li>All the essential password are documented</li>
<li>We need to look at Github tracker and see that issues are closed</li>
<li>Feedback at moment is positive - need to promote the committee exists when it is in a good position.</li>
</ul></li>
</ul>

<h2>Part 2 - Board</h2>

<h3>Attendees</h3>

<ul>
<li>Stuart Mackintosh, Dave Rolsky, Dan Wright, Ricardo Signes, Pete Krawczyk, Makoto Nozaki, Nic Evans (admin)</li>
</ul>

<h3>Meeting topics</h3>

<p>Note: the second part of the meeting (the board only) was short as the first part overran.</p>

<ul>
<li>TPRC 2020 Transparency Report was drafted. It will be reviewed and posted.</li>
<li>Advisory Board - action items below.
<ul>
<li>Define the charter and procedure to "retire" people from the board</li>
<li>Think whether we could invite somebody to the Advisory Board even if they are not a board member</li>
<li>Announce the Advisory Board with inaugural members</li>
</ul></li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
  <title>What is CI and why is it good for you?</title>
  <summary type="html"><![CDATA[<p>
A Continuous Integration system (aka CI) can shorten the feedback cycle for your code.
It will usually run all your tests immediately after you push the code to your cloud-based Git host.
<p>
You can run your code on various Operating Systems and multiple versions of Perl.
<p>
]]></summary>
  <updated>2020-11-18T23:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/what-is-ci"/>  <id>https://perlmaven.com/what-is-ci</id>
  <content type="html"><![CDATA[<p>
A Continuous Integration system (aka CI) can shorten the feedback cycle for your code.
It will usually run all your tests immediately after you push the code to your cloud-based Git host.
<p>
You can run your code on various Operating Systems and multiple versions of Perl.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Github Actions for Module::Install and showing error log on Linux, Mac OSX, and Windows</title>
  <summary type="html"><![CDATA[<p>
Earlier we saw how to create <a href="/github-actions-running-on-3-operating-systems">GitHub Actions to run on Linux, Windows, and Mac OSX</a>.
I used that idea on an old module of I maintain that is uses <a href="https://metacpan.org/pod/Module::Install">Module::Install</a> for packaging.
<p>
At first it failed due to missing Module::Install, and even though I had a guess of the source of the problem, I thought it would be a good
opportunity to check how could I see the content of the cpanm log files after a failing installation.
<p>
]]></summary>
  <updated>2020-11-16T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/github-actions-showing-error-log-on-linux-mac-windows"/>  <id>https://perlmaven.com/github-actions-showing-error-log-on-linux-mac-windows</id>
  <content type="html"><![CDATA[<p>
Earlier we saw how to create <a href="/github-actions-running-on-3-operating-systems">GitHub Actions to run on Linux, Windows, and Mac OSX</a>.
I used that idea on an old module of I maintain that is uses <a href="https://metacpan.org/pod/Module::Install">Module::Install</a> for packaging.
<p>
At first it failed due to missing Module::Install, and even though I had a guess of the source of the problem, I thought it would be a good
opportunity to check how could I see the content of the cpanm log files after a failing installation.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Perl Weekly Challenge 086</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/15#pwc086" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of integers &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt; and an integer $A. Write a script to find find if there exists a pair of elements in the array whose difference is $A. Print 1 if exists otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an array of integers @N and an integer $A.
# Write a script to find find if there exists a pair of elements 
# in the array whose difference is $A.
# Print 1 if exists otherwise 0.
##
use boolean;
use Math::Combinatorics;

sub build_constraints{
    my @constraints;
    my $a_not_equal_b = sub { $_[0] != $_[1] };
    my $difference_equal_n = sub { $_[0] - $_[1] == $_[2] };
    return (
       $a_not_equal_b,
       $difference_equal_n
    );
}

MAIN:{
    my $combinations = Math::Combinatorics-&gt;new(
                           count =&gt; 2,
                           data =&gt; [@ARGV[1 .. @ARGV - 1]],
                       );
    my $found = false;  
    my ($check_equal, $check_difference) = build_constraints();           
    while(my @combination = $combinations-&gt;next_combination()){  
        if($check_equal-&gt;(@combination) &amp;&amp; $check_difference-&gt;(@combination, $ARGV[0])){
            $found = true;
            print "1\n"; last;
        }
    }
    print "0\n" if(!$found);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 15 10 30 20 50 40
0
$ perl perl/ch-1.pl 7 10 8 12 15 5
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a fairly silly use of the &lt;em&gt;constraint programming&lt;/em&gt; approach I used &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2020/11/08"&gt;last week&lt;/a&gt;. Like last time I generate all combinations and test them using a filtering approach. The filter is an array of constraint functions. Here we just have two simple constraints though!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given Sudoku puzzle (9x9). Write a script to complete the puzzle&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I didn’t have a chance to implement a solution in Perl. I would have used a similar constraint approach if I did. This is a natural use for Prolog and if you’re interested in reading in my Prolog implementation you can go &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2020/11/15"&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc086</id>
    <published>2020-11-15T23:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-396088014950910316</id>
    <published>2020-11-14T15:21:00.000+01:00</published>
    <updated>2020-11-14T15:21:52.549+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxv) 11 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOKUHIROM/Amon2-6.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Amon2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - lightweight web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.15&lt;/strong&gt; on 2020-11-09&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 6.14 was 6 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ROBM/Cache-FastMmap-1.51' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cache::FastMmap&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uses an mmap'ed file to act as a shared memory interprocess cache &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.51&lt;/strong&gt; on 2020-11-11&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.50 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-1.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A date and time object for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.53&lt;/strong&gt; on 2020-11-09&lt;/li&gt;  &lt;li&gt;Votes: 196&lt;/li&gt;  &lt;li&gt;Previous version: 1.52 was 8 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIKIHOSHI/Devel-Cover-Report-Coveralls-0.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::Cover::Report::Coveralls&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - coveralls backend for Devel::Cover &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.20&lt;/strong&gt; on 2020-11-08&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.15 was 6 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.54&lt;/strong&gt; on 2020-11-12&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 7.52 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2020-11-09&lt;/li&gt;  &lt;li&gt;Votes: 32&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.44&lt;/strong&gt; on 2020-11-09&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.43 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.61&lt;/strong&gt; on 2020-11-08&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.60 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/JSON-MaybeXS-1.004003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::MaybeXS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Use Cpanel::JSON::XS with a fallback to JSON::XS and JSON::PP &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004003&lt;/strong&gt; on 2020-11-13&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 1.004002 was 5 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.65' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.65&lt;/strong&gt; on 2020-11-11&lt;/li&gt;  &lt;li&gt;Votes: 435&lt;/li&gt;  &lt;li&gt;Previous version: 8.64 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/WWW-Mechanize-2.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.03&lt;/strong&gt; on 2020-11-10&lt;/li&gt;  &lt;li&gt;Votes: 84&lt;/li&gt;  &lt;li&gt;Previous version: 2.02 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/396088014950910316/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxv-11-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/396088014950910316"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/396088014950910316"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxv-11-cpan-great-modules-released.html" title="(cccxv) 11 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grant Proposals: November 2020 </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_nov_2020"/>
  <id>tag:news.perlfoundation.org,2020-11-13:/post/grant_proposals_nov_2020</id>
  <published>2020-11-13T22:52:29</published>
  <updated>2020-11-13T22:52:29</updated>
  <summary>
  <![CDATA[
     We received no grant proposals for Perl or Raku in time for the November voting round. The next round of voting will be held starting in early January. But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read How to Write a Proposal, GC Charter, Rules of Operation and Running Grants List will also help you understand how the grant process 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We received no grant proposals for Perl or Raku in time for the November voting round. The next round of voting will be held starting in early January.</p>

<p>But... there's no need to wait until then. We accept grant proposals all year round. To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Weekly Challenge #086 Task #2 :: (Raku) </title>
    <link rel="alternate" href="https://dev.to/jeongoon/weekly-challenge-086-task-2-raku-23n0" type="text/html"/>
    <content type="html"></content>
    <author>
      <name>Myoungjin Jeon</name>
    </author>
    <id>https://dev.to/jeongoon/weekly-challenge-086-task-2-raku-23n0</id>
    <published>2020-11-13T11:41:48Z</published>
    <updated>2020-11-13T11:41:48Z</updated>
    <category term="perlweeklychallenge"/>
    <category term="challenge"/>
    <category term="raku"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Hacktoberfest 2020 report</title>
    <link rel="alternate" href="https://dev.to/zakame/hacktoberfest-2020-report-1p6i" type="text/html"/>
    <content type="html">&lt;p&gt;FPBP!&lt;/p&gt;

&lt;p&gt;So, I'm rather new here at dev.to and since Hacktoberfest 2020 has come and gone, I might as well get started doing a new blog here.  I've been doing Hacktoberfests for maybe a couple of years now, and while this year has seen &lt;a href="https://joel.net/how-one-guy-ruined-hacktoberfest2020-drama"&gt;quite the kerfuffle&lt;/a&gt;, that alone should not be enough reason to stop doing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;I work primarily with #perl stuff with bits of #docker and other tools in between, so most of my previous Hacktoberfests have focused on contributing to these.  For this year though, I wanted to learn and use #nix some more, especially as I found the idea of &lt;a href="https://nixos.org/guides/declarative-and-reproducible-developer-environments.html"&gt;reproducible developer environments&lt;/a&gt; across different machines to be interesting, and I've tried doing similar things (to mixed results) with Docker.&lt;/p&gt;

&lt;p&gt;To help both Nix and Perl efforts, I thought learning enough of Nixpkgs to port missing CPAN modules I want or need would be a good idea to start...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributions" class="anchor"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h3&gt;

&lt;p&gt;The Hacktoberfest game approved these PRs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/spwhitt/nix-zsh-completions/pull/37"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Add --dry-run completion to nix-build and nix-shell
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#37&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/spwhitt/nix-zsh-completions/pull/37"&gt;&lt;time&gt;Oct 02, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;nix-build explicitly documents --dry-run in its --help, while nix-shell
passes it onto nix-store --realise.&lt;/p&gt;

&lt;h1&gt;&lt;/h1&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/spwhitt/nix-zsh-completions/pull/37"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This got me started as I'm using zsh as my default shell, but the Nix tooling uses bash.  Having become an avid user of &lt;code&gt;nix-shell&lt;/code&gt;, I used the &lt;code&gt;--dry-run&lt;/code&gt; flag (which it passes down to &lt;code&gt;nix-store --realise&lt;/code&gt;) for estimating download sizes of stuff I want in the shell.  Since this particular flag was missing in the completion, it seemed easy enough to add it in with this PR, despite some other note about changing the implementation entirely for the new &lt;code&gt;nix&lt;/code&gt; command interface.&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/NixOS/nixpkgs/pull/100652"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        perlPackages.FutureAsyncAwait: init at 0.44
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#100652&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/NixOS/nixpkgs/pull/100652"&gt;&lt;time&gt;Oct 15, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h6&gt;
&lt;a id="user-content-motivation-for-this-change" class="anchor" href="#motivation-for-this-change"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation for this change&lt;/h6&gt;
&lt;p&gt;This adds &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords to Perl to enhance the use of &lt;a href="https://search.nixos.org/packages?show=perl532Packages.Future&amp;amp;query=Future&amp;amp;from=0&amp;amp;size=30&amp;amp;sort=relevance&amp;amp;channel=unstable#disabled" rel="nofollow"&gt;Future&lt;/a&gt;-using code.&lt;/p&gt;
&lt;p&gt;This also adds &lt;a href="https://metacpan.org/release/XS-Parse-Sublike" rel="nofollow"&gt;XS::Parse::Sublike&lt;/a&gt; as a dependency of this package.&lt;/p&gt;
&lt;h6&gt;
&lt;a id="user-content-things-done" class="anchor" href="#things-done"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Things done&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;[x] Tested using sandboxing (&lt;a href="https://nixos.org/nixos/manual/options.html#opt-nix.useSandbox" rel="nofollow"&gt;nix.useSandbox&lt;/a&gt; on NixOS, or option &lt;code&gt;sandbox&lt;/code&gt; in &lt;a href="https://nixos.org/nix/manual/#sec-conf-file" rel="nofollow"&gt;&lt;code&gt;nix.conf&lt;/code&gt;&lt;/a&gt; on non-NixOS linux)&lt;/li&gt;
&lt;li&gt;Built on platform(s)
&lt;ul&gt;
&lt;li&gt;[x] NixOS&lt;/li&gt;
&lt;li&gt;[ ] macOS&lt;/li&gt;
&lt;li&gt;[x] other Linux distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested via one or more NixOS test(s) if existing and applicable for the change (look inside &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/tests"&gt;nixos/tests&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Tested compilation of all pkgs that depend on this change using &lt;code&gt;nix-shell -p nixpkgs-review --run "nixpkgs-review wip"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested execution of all binary files (usually in &lt;code&gt;./result/bin/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Determined the impact on package closure size (by running &lt;code&gt;nix path-info -S&lt;/code&gt; before and after)&lt;/li&gt;
&lt;li&gt;[ ] Ensured that relevant documentation is up to date&lt;/li&gt;
&lt;li&gt;[x] Fits &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/NixOS/nixpkgs/pull/100652"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;At my work, we're using &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; heavily, so I missed this somewhat in Nixpkgs enough to get me started learning how to port it from CPAN to Nixpkgs.  Porting is somewhat easy to do using &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/maintainers/scripts/nix-generate-from-cpan.pl"&gt;nix-generate-from-cpan&lt;/a&gt;, but the other half of work is testing if it actually builds using &lt;code&gt;nix-build&lt;/code&gt; to make additional changes if needed, and testing builds of other packages depending on it with &lt;a href="https://github.com/Mic92/nixpkgs-review"&gt;nixpkgs-review&lt;/a&gt; preferably on both Nix-enhanced Linux installs as well as on native NixOS and macOS.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://github.com/stigtsp"&gt;stigtsp&lt;/a&gt; for showing me the ropes!&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/NixOS/nixpkgs/pull/100820"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        perlPackages.IOAsyncSSL: init at 0.22
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#100820&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/NixOS/nixpkgs/pull/100820"&gt;&lt;time&gt;Oct 17, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h6&gt;
&lt;a id="user-content-motivation-for-this-change" class="anchor" href="#motivation-for-this-change"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation for this change&lt;/h6&gt;
&lt;p&gt;This pure-Perl addon for &lt;a href="https://search.nixos.org/packages?show=perl532Packages.IOAsync&amp;amp;query=IOAsync&amp;amp;from=0&amp;amp;size=30&amp;amp;sort=relevance&amp;amp;channel=unstable#disabled" rel="nofollow"&gt;IO::Async&lt;/a&gt; extends it to allow creating TLS/SSL servers or clients via &lt;a href="https://search.nixos.org/packages?show=perl532Packages.IOSocketSSL&amp;amp;query=IOSocketSSL&amp;amp;from=0&amp;amp;size=30&amp;amp;sort=relevance&amp;amp;channel=unstable#disabled" rel="nofollow"&gt;IO::Socket::SSL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a somewhat required module for other IO::Async-based code that connect/serve TLS/SSL resources, such as those in the &lt;a href="https://metacpan.org/search?size=20&amp;amp;q=Net%3A%3AAsync" rel="nofollow"&gt;Net::Async namespace&lt;/a&gt;.&lt;/p&gt;
&lt;h6&gt;
&lt;a id="user-content-things-done" class="anchor" href="#things-done"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Things done&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;[x] Tested using sandboxing (&lt;a href="https://nixos.org/nixos/manual/options.html#opt-nix.useSandbox" rel="nofollow"&gt;nix.useSandbox&lt;/a&gt; on NixOS, or option &lt;code&gt;sandbox&lt;/code&gt; in &lt;a href="https://nixos.org/nix/manual/#sec-conf-file" rel="nofollow"&gt;&lt;code&gt;nix.conf&lt;/code&gt;&lt;/a&gt; on non-NixOS linux)&lt;/li&gt;
&lt;li&gt;Built on platform(s)
&lt;ul&gt;
&lt;li&gt;[x] NixOS&lt;/li&gt;
&lt;li&gt;[ ] macOS&lt;/li&gt;
&lt;li&gt;[X] other Linux distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested via one or more NixOS test(s) if existing and applicable for the change (look inside &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/tests"&gt;nixos/tests&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Tested compilation of all pkgs that depend on this change using &lt;code&gt;nix-shell -p nixpkgs-review --run "nixpkgs-review wip"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested execution of all binary files (usually in &lt;code&gt;./result/bin/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Determined the impact on package closure size (by running &lt;code&gt;nix path-info -S&lt;/code&gt; before and after)&lt;/li&gt;
&lt;li&gt;[ ] Ensured that relevant documentation is up to date&lt;/li&gt;
&lt;li&gt;[X] Fits &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/NixOS/nixpkgs/pull/100820"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Pretty much anything external that one can substantially reach with &lt;a href="https://metacpan.org/pod/IO::Async"&gt;IO::Async&lt;/a&gt; needs TLS/SSL, so missing this in Nixpkgs seems odd.  Adding it here seems a no-brainer, and would help in upcoming packages like &lt;code&gt;Net::Async::HTTP&lt;/code&gt; and &lt;code&gt;Net::Async::WebSocket&lt;/code&gt; (with the latter having pretty much a hard dependency for IO::Async::SSL anyway for working on anything non-trivial.)&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/mojolicious/mojo/pull/1579"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Convert t/mojolicious/exception_lite_app.t to use subtests
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1579&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/mojolicious/mojo/pull/1579"&gt;&lt;time&gt;Oct 18, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h3&gt;
&lt;a id="user-content-summary" class="anchor" href="#summary"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Summary&lt;/h3&gt;
&lt;p&gt;As the title says.&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-motivation" class="anchor" href="#motivation"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation&lt;/h3&gt;
&lt;p&gt;I was already in the area for #1578 so might as well convert the test!&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-references" class="anchor" href="#references"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p&gt;For #1520.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mojolicious/mojo/pull/1579"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This was a PR derived from an earlier more substantial work which was merged later, beyond the Hacktoberfest cutoff:&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/mojolicious/mojo/pull/1578"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Replace prettify.js with highlight.js
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1578&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/mojolicious/mojo/pull/1578"&gt;&lt;time&gt;Oct 17, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h3&gt;
&lt;a id="user-content-summary" class="anchor" href="#summary"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Summary&lt;/h3&gt;
&lt;p&gt;This replaces the old prettify.js highlighter with highlight.js.&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-motivation" class="anchor" href="#motivation"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation&lt;/h3&gt;
&lt;p&gt;prettify.js has long been abandoned by Google so we need to replace it.&lt;/p&gt;
&lt;p&gt;That said, highlight.js is also somewhat dormant (&lt;a href="https://github.com/highlightjs/highlight.js/issues/1678"&gt;https://github.com/highlightjs/highlight.js/issues/1678&lt;/a&gt;) but still sees enough activity to get around.&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-references" class="anchor" href="#references"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p&gt;This is an update of #737, fixes #1544.&lt;/p&gt;
&lt;p&gt;Most of the work was already done by @dotandimet, please give credit where due. I just updated it for latest Mojo and highlight.js 💪&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mojolicious/mojo/pull/1578"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I also made a few followup PRs to Nixpkgs that Hacktoberfest counted as bonus:&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/NixOS/nixpkgs/pull/101118"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        perlPackages.Future: 0.45 -&amp;gt; 0.46
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#101118&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/NixOS/nixpkgs/pull/101118"&gt;&lt;time&gt;Oct 20, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h6&gt;
&lt;a id="user-content-motivation-for-this-change" class="anchor" href="#motivation-for-this-change"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation for this change&lt;/h6&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/release/PEVANS/Future-0.46" rel="nofollow"&gt;https://metacpan.org/release/PEVANS/Future-0.46&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
&lt;a id="user-content-things-done" class="anchor" href="#things-done"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Things done&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;[x] Tested using sandboxing (&lt;a href="https://nixos.org/nixos/manual/options.html#opt-nix.useSandbox" rel="nofollow"&gt;nix.useSandbox&lt;/a&gt; on NixOS, or option &lt;code&gt;sandbox&lt;/code&gt; in &lt;a href="https://nixos.org/nix/manual/#sec-conf-file" rel="nofollow"&gt;&lt;code&gt;nix.conf&lt;/code&gt;&lt;/a&gt; on non-NixOS linux)&lt;/li&gt;
&lt;li&gt;Built on platform(s)
&lt;ul&gt;
&lt;li&gt;[x] NixOS&lt;/li&gt;
&lt;li&gt;[ ] macOS&lt;/li&gt;
&lt;li&gt;[X] other Linux distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested via one or more NixOS test(s) if existing and applicable for the change (look inside &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/tests"&gt;nixos/tests&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Tested compilation of all pkgs that depend on this change using &lt;code&gt;nix-shell -p nixpkgs-review --run "nixpkgs-review wip"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested execution of all binary files (usually in &lt;code&gt;./result/bin/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Determined the impact on package closure size (by running &lt;code&gt;nix path-info -S&lt;/code&gt; before and after)&lt;/li&gt;
&lt;li&gt;[ ] Ensured that relevant documentation is up to date&lt;/li&gt;
&lt;li&gt;[X] Fits &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/NixOS/nixpkgs/pull/101118"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/NixOS/nixpkgs/pull/101182"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        perlPackages.LinuxInotify2: add description/license to meta
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#101182&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/NixOS/nixpkgs/pull/101182"&gt;&lt;time&gt;Oct 20, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h6&gt;
&lt;a id="user-content-motivation-for-this-change" class="anchor" href="#motivation-for-this-change"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation for this change&lt;/h6&gt;
&lt;p&gt;Applying my suggestion from &lt;a href="https://github.com/NixOS/nixpkgs/pull/101122#discussion_r508457565"&gt;https://github.com/NixOS/nixpkgs/pull/101122#discussion_r508457565&lt;/a&gt; to update package meta/documentation.  No functional changes.&lt;/p&gt;
&lt;h6&gt;
&lt;a id="user-content-things-done" class="anchor" href="#things-done"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Things done&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;[X] Tested using sandboxing (&lt;a href="https://nixos.org/nixos/manual/options.html#opt-nix.useSandbox" rel="nofollow"&gt;nix.useSandbox&lt;/a&gt; on NixOS, or option &lt;code&gt;sandbox&lt;/code&gt; in &lt;a href="https://nixos.org/nix/manual/#sec-conf-file" rel="nofollow"&gt;&lt;code&gt;nix.conf&lt;/code&gt;&lt;/a&gt; on non-NixOS linux)&lt;/li&gt;
&lt;li&gt;Built on platform(s)
&lt;ul&gt;
&lt;li&gt;[X] NixOS&lt;/li&gt;
&lt;li&gt;[ ] macOS&lt;/li&gt;
&lt;li&gt;[ ] other Linux distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested via one or more NixOS test(s) if existing and applicable for the change (look inside &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/tests"&gt;nixos/tests&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Tested compilation of all pkgs that depend on this change using &lt;code&gt;nix-shell -p nixpkgs-review --run "nixpkgs-review wip"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested execution of all binary files (usually in &lt;code&gt;./result/bin/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Determined the impact on package closure size (by running &lt;code&gt;nix path-info -S&lt;/code&gt; before and after)&lt;/li&gt;
&lt;li&gt;[ ] Ensured that relevant documentation is up to date&lt;/li&gt;
&lt;li&gt;[X] Fits &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/NixOS/nixpkgs/pull/101182"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/NixOS/nixpkgs/pull/101402"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        perlPackages.FutureAsyncAwait: 0.44 -&amp;gt; 0.45
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#101402&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/NixOS/nixpkgs/pull/101402"&gt;&lt;time&gt;Oct 22, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h6&gt;
&lt;a id="user-content-motivation-for-this-change" class="anchor" href="#motivation-for-this-change"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation for this change&lt;/h6&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.45" rel="nofollow"&gt;https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.45&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
&lt;a id="user-content-things-done" class="anchor" href="#things-done"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Things done&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;[ ] Tested using sandboxing (&lt;a href="https://nixos.org/nixos/manual/options.html#opt-nix.useSandbox" rel="nofollow"&gt;nix.useSandbox&lt;/a&gt; on NixOS, or option &lt;code&gt;sandbox&lt;/code&gt; in &lt;a href="https://nixos.org/nix/manual/#sec-conf-file" rel="nofollow"&gt;&lt;code&gt;nix.conf&lt;/code&gt;&lt;/a&gt; on non-NixOS linux)&lt;/li&gt;
&lt;li&gt;Built on platform(s)
&lt;ul&gt;
&lt;li&gt;[ ] NixOS&lt;/li&gt;
&lt;li&gt;[ ] macOS&lt;/li&gt;
&lt;li&gt;[X] other Linux distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested via one or more NixOS test(s) if existing and applicable for the change (look inside &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/nixos/tests"&gt;nixos/tests&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Tested compilation of all pkgs that depend on this change using &lt;code&gt;nix-shell -p nixpkgs-review --run "nixpkgs-review wip"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[ ] Tested execution of all binary files (usually in &lt;code&gt;./result/bin/&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;[ ] Determined the impact on package closure size (by running &lt;code&gt;nix path-info -S&lt;/code&gt; before and after)&lt;/li&gt;
&lt;li&gt;[ ] Ensured that relevant documentation is up to date&lt;/li&gt;
&lt;li&gt;[X] Fits &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/.github/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/NixOS/nixpkgs/pull/101402"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;There's also a few other PRs that didn't make the count, like the one for Mojo above, and these:&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/mojolicious/mojolicious.org/pull/22"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Replace prettify.js with highlight.js
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#22&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/mojolicious/mojolicious.org/pull/22"&gt;&lt;time&gt;Oct 24, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;h3&gt;
&lt;a id="user-content-summary" class="anchor" href="#summary"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Summary&lt;/h3&gt;
&lt;p&gt;This replaces the old prettify.js highlighter with highlight.js.&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-motivation" class="anchor" href="#motivation"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Motivation&lt;/h3&gt;
&lt;p&gt;prettify.js has long been abandoned by Google so we need to replace it.&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-references" class="anchor" href="#references"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/mojolicious/mojo/issues/1544"&gt;https://github.com/mojolicious/mojo/issues/1544&lt;/a&gt;
&lt;a href="https://github.com/mojolicious/mojo/pull/1578"&gt;https://github.com/mojolicious/mojo/pull/1578&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mojolicious/mojolicious.org/pull/22"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This change is now live at both &lt;a href="https://mojolicious.org"&gt;https://mojolicious.org&lt;/a&gt; and &lt;a href="https://docs.mojolicious.org"&gt;https://docs.mojolicious.org&lt;/a&gt; (though still keeping an eye on the highlightjs stuff, should they need more updating.)&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/guibou/nixGL/pull/64"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        nixGL.nix: Add libGLX_indirect.so.0 symlink for nixGLIntel
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#64&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/guibou/nixGL/pull/64"&gt;&lt;time&gt;Oct 28, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;This aids discovery of GLX capabilities on Intel-based setups for
e.g. glxinfo, alacritty, kitty.&lt;/p&gt;
&lt;p&gt;Not sure if using &lt;code&gt;runCommand&lt;/code&gt; here is the right way, let me know if this needs revising, but it seems to work well enough for me...&lt;/p&gt;
&lt;p&gt;Ref #24&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/guibou/nixGL/pull/64"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This one came about as I was looking to replace KDE4 Konsole on my Slackware 14.2 with a more modern terminal, and tried both &lt;a href="https://github.com/alacritty/alacritty"&gt;Alacritty&lt;/a&gt; and &lt;a href="https://sw.kovidgoyal.net/kitty"&gt;Kitty&lt;/a&gt;.  I eventually went with Kitty, but since this requires GPU acceleration I needed nixGL and Nixpkgs' own mesa_drivers as well.&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/docker-library/docs/pull/1822"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        perl: Add note about coexisting with Debian's /usr/bin/perl
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1822&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zakame"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJfvHSHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/110625%3Fv%3D4" alt="zakame avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zakame"&gt;zakame&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/docker-library/docs/pull/1822"&gt;&lt;time&gt;Oct 28, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;A few users of docker-perl have stumbled upon (and getting confused
with) the default /usr/bin/perl shipped by Debian, so put a short note
here explaining why it remains and also better describe how docker-perl
and its tooling is installed/configured.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Perl/docker-perl/issues/26"&gt;https://github.com/Perl/docker-perl/issues/26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Perl/docker-perl/issues/93"&gt;https://github.com/Perl/docker-perl/issues/93&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Perl/docker-perl/issues/94"&gt;https://github.com/Perl/docker-perl/issues/94&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/docker-library/docs/pull/1822"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This was a somewhat longstanding documentation issue on docker-perl (which I maintain for sometime now,) and since it was flaring up on and off again, might as well make the time to document this issue so people using the docker-perl image know what to expect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progress" class="anchor"&gt;
  &lt;/a&gt;
  Progress
&lt;/h3&gt;

&lt;p&gt;I was able to do a good many more PRs this year than in previous years, but at the same time many of them weren't eligible for this time due to the changes in the Hacktoberfest game that supposedly ruined it for everyone.  OTOH, I never really actively sought for the reward(s), but rather the experience of this yearly adventure to do a bit more for Free and Open Source Software than what I usually do regularly.&lt;/p&gt;

&lt;p&gt;Another thing that tempers my expectation for rewards is that I'd have to go waiting a few more months to receive it, &lt;em&gt;and&lt;/em&gt; go through post office procedures which take a good hour or two to complete, which in this pandemic clown world would be a risk I'd rather not take...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reflections" class="anchor"&gt;
  &lt;/a&gt;
  Reflections
&lt;/h3&gt;

&lt;p&gt;Learning Nix and Nixpkgs through porting Perl modules to it was a great experience, and I hope to continue doing so beyond Hacktoberfest.  I'm particularly interested in making a reproducible Perl development environment more easier to do in Nix, maybe with some insight with sister languages like Ruby &lt;a href="https://github.com/nix-community/bundix"&gt;Bundix&lt;/a&gt; or Python &lt;a href="https://github.com/cript0nauta/pynixify"&gt;pynixify&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll also be continuing some &lt;a href="https://github.com/Perl/docker-perl"&gt;docker-perl&lt;/a&gt; work, especially as frameworks like Mojolicious are keen to get onto the &lt;em&gt;cloud-native&lt;/em&gt; bandwagon (if not so already) in order to do easy, reproducible app deployments to Docker or Kubernetes; Nix may help yet again with that too, as it already has the tooling for exporting to Docker or OCI image formats.&lt;/p&gt;

</content>
    <author>
      <name>Zak B. Elep</name>
    </author>
    <id>https://dev.to/zakame/hacktoberfest-2020-report-1p6i</id>
    <published>2020-11-13T09:41:19Z</published>
    <updated>2020-11-13T09:41:19Z</updated>
    <category term="hacktoberfest"/>
    <category term="perl"/>
    <category term="nix"/>
    <category term="mojolicious"/>
  </entry>
  <entry>
  <title>Github Actions for Perl running on Windows, Mac OSX, and Ubuntu Linux</title>
  <summary type="html"><![CDATA[<p>
In order to configure GitHub Actions for a Perl project, all you need is to create a directory called <span class="inline_code">.github/workflows</span> and
put a <a href="/yaml">YAML</a> file in it. The name of the file does not matter much, as long as it has the <b>yml</b> extension.
<p>
This example was copied from the <a href="https://github.com/davorg/array-compare/">repostory of Array::Compare</a> by
<a href="https://davecross.co.uk/">Dave Cross</a>. It was called <span class="inline_code">.github/workflows/perltest.yml</span> there.
<p>
Then it was slightly changed and annotated with explanations.
<p>
]]></summary>
  <updated>2020-11-13T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/github-actions-running-on-3-operating-systems"/>  <id>https://perlmaven.com/github-actions-running-on-3-operating-systems</id>
  <content type="html"><![CDATA[<p>
In order to configure GitHub Actions for a Perl project, all you need is to create a directory called <span class="inline_code">.github/workflows</span> and
put a <a href="/yaml">YAML</a> file in it. The name of the file does not matter much, as long as it has the <b>yml</b> extension.
<p>
This example was copied from the <a href="https://github.com/davorg/array-compare/">repostory of Array::Compare</a> by
<a href="https://davecross.co.uk/">Dave Cross</a>. It was called <span class="inline_code">.github/workflows/perltest.yml</span> there.
<p>
Then it was slightly changed and annotated with explanations.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Bang Bang</title>
    <link rel="alternate" href="https://www.perl.com/article/bang-bang/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;img src="https://www.perl.com/images/bang-bang/blackmagic.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Interpreters read and execute scripts (whereas shells are more like a kitchen pass-through and can either execute or hand over to another interpreter). When we specify interpreter on the command line, it is the one that will be used. For instance &lt;code&gt;Rscript script.R&lt;/code&gt; will execute &lt;em&gt;script.R&lt;/em&gt; using the &lt;code&gt;Rscript&lt;/code&gt; interpreter.&lt;/p&gt;

&lt;p&gt;When we execute a file without explicitly giving an interpreter (for instance, like &lt;code&gt;./myscript.pl&lt;/code&gt;), it is the job of the &amp;ldquo;shebang&amp;rdquo; to tell to the shell/OS which interpreter to use. The shebang is that first line of a text file that starts with &lt;code&gt;#!&lt;/code&gt; and is followed by the interpreter path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes we see the &lt;code&gt;env&lt;/code&gt; program, which finds the the first &lt;code&gt;perl&lt;/code&gt; in our path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;env&lt;/code&gt; does not split args therefore we can&amp;rsquo;t add options:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!/usr/bin/env perl -w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And, &lt;code&gt;env&lt;/code&gt; is not always located in &lt;code&gt;/usr/bin/env&lt;/code&gt; so it can guarantee some portability at machine/distribution level but not always between distributions.&lt;/p&gt;

&lt;h2 id="perl-is-nice"&gt;Perl is nice&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;perl&lt;/code&gt; is not like other interpreters—its nice, even with challenges. &lt;code&gt;perl&lt;/code&gt; inspects the shebang to check if it&amp;rsquo;s really for it (and if not it hands our program over to another interpreter).&lt;/p&gt;

&lt;p&gt;For instance the file &lt;em&gt;i-am-python.pl&lt;/em&gt; contains a Python program, which is definitely not Perl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;span style="color:#f92672"&gt;import&lt;/span&gt; time

&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;I&amp;#39;m a snake : &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;environ[&lt;span style="color:#e6db74"&gt;&amp;#34;SHELL&amp;#34;&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;environ[&lt;span style="color:#e6db74"&gt;&amp;#34;_&amp;#34;&lt;/span&gt;])

&lt;span style="color:#75715e"&gt;# Keep it alive to have time to inspect with ps&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; True:
    time&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously we don&amp;rsquo;t care about the extension as it does not mean any kind of file association (although some systems let you associate it). So we have a &lt;em&gt;.pl&lt;/em&gt; file and we execute it with &lt;code&gt;perl&lt;/code&gt; but inside we have a &lt;code&gt;python&lt;/code&gt; shebang and some python code. It&amp;rsquo;s clearly not a valid Perl file.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t believe me, check this with a quick syntax check &lt;code&gt;perl -c i-am-python.pl&lt;/code&gt; that tells us it isn&amp;rsquo;t valid Perl:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -c i-am-python.pl
syntax error at i-am-python.pl line 3, near &amp;quot;import time&amp;quot;
i-am-python.pl had compilation errors.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we execute this file with perl, surprisingly, everything goes fine. How did that happen? &lt;code&gt;perl&lt;/code&gt; is smart enough to give the script to &lt;code&gt;python&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl i-am-python.pl
I'm a snake : /bin/bash /usr/bin/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we want to check which interpreter really runs this script, we can look in the process table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ ps aux | grep &lt;span style="color:#e6db74"&gt;&amp;#34;i-am-pytho[n].pl&amp;#34;&lt;/span&gt;
tduponc+  &lt;span style="color:#ae81ff"&gt;5647&lt;/span&gt;  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;.0  &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;.0  &lt;span style="color:#ae81ff"&gt;33208&lt;/span&gt;  &lt;span style="color:#ae81ff"&gt;7024&lt;/span&gt; pts/0    S    &lt;span style="color:#ae81ff"&gt;13&lt;/span&gt;:04   &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:00 /usr/bin/python i-am-python.pl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;i-am-pytho[n].pl&lt;/code&gt; with the brackets, which puts the &lt;code&gt;n&lt;/code&gt; in a character class. That&amp;rsquo;s a nifty trick so &lt;code&gt;grep&lt;/code&gt; finds the line with &lt;code&gt;python&lt;/code&gt; but not the &lt;code&gt;grep&lt;/code&gt; process itself because that pattern won&amp;rsquo;t match a literal &lt;code&gt;[&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t forget to kill the program since it&amp;rsquo;s sleeping forever!&lt;/p&gt;

&lt;p&gt;Now, what if we want to test the converse and run Perl code with a &lt;code&gt;python&lt;/code&gt; interpreter?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;I&amp;#39;m a jewel&amp;#34;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;$str : $ENV{SHELL} $ENV{_}\n&amp;#34;&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) { sleep &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a valid Perl file but the &lt;code&gt;python&lt;/code&gt; interpreter does not hand over to &lt;code&gt;perl&lt;/code&gt; and just returns a Python error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ python i-am-perl.py
  File &lt;span style="color:#e6db74"&gt;&amp;#34;iamperl.py&amp;#34;&lt;/span&gt;, line &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
    my $str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;I&amp;#39;m a jewel&amp;#34;&lt;/span&gt;;
       ^
SyntaxError: invalid syntax&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is special to Python. Try it yourself with bash, Ruby, or something else.&lt;/p&gt;

&lt;h2 id="i-have-something-for-you"&gt;I have something for you&lt;/h2&gt;

&lt;p&gt;Having the correct interpreter on the command line does not mean that the shebang is totally ignored. &lt;code&gt;perl&lt;/code&gt; is once again super smart and behaves exactly as we can imagine (DWIM). For instance, what if we put a warning switch (&lt;code&gt;-w&lt;/code&gt;) in the shebang, like in this file &lt;em&gt;override-bang.pl&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -w&lt;/span&gt;

$str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;will produce a warning&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even though we don&amp;rsquo;t put the &lt;code&gt;-w&lt;/code&gt; on the command line, we still get warnings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl override-bang.pl
Name &lt;span style="color:#e6db74"&gt;&amp;#34;main::str&amp;#34;&lt;/span&gt; used only once: possible typo at override-bang.pl line &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="plenty-is-no-plague"&gt;Plenty is no plague&lt;/h2&gt;

&lt;p&gt;Now, what if we specify some switches on the command line and some others in the shebang? &lt;strong&gt;SPOILER&lt;/strong&gt;: they are simply merged together.&lt;/p&gt;

&lt;p&gt;When we run &lt;code&gt;perl -c overridebang.pl&lt;/code&gt; to check a syntactically-valid file, we get the switches from the command line and the shebang line. We get a &lt;code&gt;perl -cw&lt;/code&gt; execution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;Name &lt;span style="color:#e6db74"&gt;&amp;#34;main::str&amp;#34;&lt;/span&gt; used only once: possible typo at override-bang.pl line &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;.
override-bang.pl syntax OK&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if we have conflicting options like &lt;code&gt;-w&lt;/code&gt; to enable warnings and &lt;code&gt;-X&lt;/code&gt; to disable them? Here&amp;rsquo;s &lt;em&gt;enable-warnings.pl&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -w&lt;/span&gt;

$str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;will produce a warning&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run this on its own, we get a warning as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl enable-warnings.pl
Name &amp;quot;main::str&amp;quot; used only once: possible typo at warnings.pl line 3.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we add &lt;code&gt;-X&lt;/code&gt; on the command line, there is no output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -X enable-warnings.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How about the other way around with &lt;code&gt;-X&lt;/code&gt; on the shebang? Here&amp;rsquo;s &lt;em&gt;disable-warnings.pl&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -X&lt;/span&gt;

$str &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;will produce a warning&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run this with &lt;code&gt;-w&lt;/code&gt;, we still don&amp;rsquo;t get output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -X enable-warnings.pl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-X&lt;/code&gt; always turns off warnings.&lt;/p&gt;

&lt;p&gt;The shebang (&lt;code&gt;-X&lt;/code&gt;) is taken in priority versus the command line and no warning is reported. It&amp;rsquo;s the same if we execute the file with &lt;code&gt;perl -W disable-warnings.pl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could imagine that&amp;rsquo;s a rule to resolve conflicts with &amp;ldquo;last seen&amp;rdquo; parameter but wait, it&amp;rsquo;s not that simple.&lt;/p&gt;

&lt;p&gt;How about &lt;code&gt;-X&lt;/code&gt; versus &lt;code&gt;-W&lt;/code&gt;, which enables all warnings? Who wins then? It turns out that the last on defined wins. We can see that right on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ perl -W -X -e '$str = &amp;quot;will produce a warning&amp;quot;'
$ perl -X -W -e '$str = &amp;quot;will produce a warning&amp;quot;'
Name &amp;quot;main::str&amp;quot; used only once: possible typo at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an exercise for the reader, try the different combinations of taint checking options: &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-U&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="a-magic-incantation"&gt;A magic incantation&lt;/h2&gt;

&lt;p&gt;Sometimes we see some odd lines at the beginning of Perl programs. What the hell is this black magic? This is actually very smart opening is &amp;ldquo;polyglot&amp;rdquo; and correct for both shells (with or without shebang support) and &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
    if $running_under_some_shell;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we start the script with &lt;code&gt;perl&lt;/code&gt;, the job is done and &lt;code&gt;perl&lt;/code&gt; executes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
if $running_under_some_shell;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That &lt;code&gt;$running_under_some_shell&lt;/code&gt; has no value, so the code translate to a false conditional. This line is ignored and the rest of the file is interpreted normally.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;} if 0;'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if we start the script with a shell that recognizes the shebang? The shell does the handover to &lt;code&gt;perl&lt;/code&gt;, which then reads the first line (shebang then &lt;code&gt;eval ...&lt;/code&gt;). The execution flow is then the same than above (magic incantation does nothing and file is interpreted). Nothing surprising there.&lt;/p&gt;

&lt;p&gt;But what if we started the script with a shell that does not recognize the shebang so no handover occurs right away? This is actually where this magic is useful. The shell will ignore first line and will never reach third line. Why will it never reach third line? A newline terminates the shell command and &lt;code&gt;exec&lt;/code&gt; will replace the current execution by &lt;code&gt;perl&lt;/code&gt;. The rest of the script doesn&amp;rsquo;t matter after that &lt;code&gt;exec&lt;/code&gt;. Our code changes from this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
    if $running_under_some_shell;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to effectively this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eval 'exec /usr/bin/perl -S $0 ${1+&amp;quot;$@&amp;quot;}'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those &lt;code&gt;$0&lt;/code&gt; and &lt;code&gt;$@&lt;/code&gt; are shell words for the script name and arguments
and the &lt;code&gt;-S&lt;/code&gt; tells &lt;code&gt;perl&lt;/code&gt; look for the value in &lt;code&gt;$0&lt;/code&gt; using PATH environment variable. (&lt;a href="https://perldoc.perl.org/perlrun.html#Command-Switches"&gt;perldoc&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id="x-is-fun"&gt;-x is fun&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve had fun with the &lt;code&gt;perl&lt;/code&gt; interpreter and the shebang, but &lt;code&gt;perl&lt;/code&gt; has a &lt;code&gt;-x&lt;/code&gt; which is already fun by design. This option tells Perl that the program to execute is actually embedded in a larger chunk of unrelated text to ignore. Perhaps the Perl program is in the middle of an email message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;I do not know if it is what you want, but it is what you get.
        -- Larry Wall&amp;quot;

#!/usr/bin/env perl

print &amp;quot;perl -x ignores everything before shebang\n&amp;quot;;
print &amp;lt;DATA&amp;gt;;

__END__

&amp;quot;Fortunately, it is easier to keep an old interpreter around than an
old computer.
        -- Larry Wall&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing this as a program is a syntax error because the Larry Wall quote before the shebang is not valid Perl. When we execute this code with &lt;code&gt;perl -x&lt;/code&gt;, everything before the shebang is ignored and it works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -x email.txt
perl -x ignores everything before shebang

&lt;span style="color:#e6db74"&gt;&amp;#34;Fortunately, it is easier to keep an old interpreter around than an
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;old computer.
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;        -- Larry Wall&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Out of curiosity, what if we tried to go one step further? How about multiple shebangs in a file, where one of them has a &lt;code&gt;-x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/perl -x&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!/usr/bin/perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it only produces an error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Can't emulate -x on #! line.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is however a trick to achieve this, by using shell &lt;code&gt;eval&lt;/code&gt;. That &lt;code&gt;perl -x&lt;/code&gt; is now executed in a shell process and not interpreted by perl binary like previously.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!/bin/sh&lt;/span&gt;
eval &lt;span style="color:#e6db74"&gt;&amp;#39;exec perl -x $0 ${1+&amp;#34;$@&amp;#34;}&amp;#39;&lt;/span&gt;
die &lt;span style="color:#e6db74"&gt;&amp;#34;another day&amp;#34;&lt;/span&gt;; exit &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!perl&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;print&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;$]\n&amp;#34;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="startperl"&gt;startperl&lt;/h2&gt;

&lt;p&gt;This article would not be complete without discussing a bit about the config variable &lt;code&gt;$Config{startperl}&lt;/code&gt;. This variable comes from &lt;em&gt;Config.pm&lt;/em&gt;  that provides information about configuration environment (which you also see with &lt;code&gt;perl -V&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -e &lt;span style="color:#e6db74"&gt;&amp;#39;use Config; print $Config{startperl}&amp;#39;&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!/usr/bin/perl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is actually built during compilation from defaults or user/vendor provided configs. What if we want a different value? Simply specify the value of this during the &lt;code&gt;./Configure&lt;/code&gt; step, the configure option is &lt;code&gt;-Dstartperl='...'&lt;/code&gt;. We then need to rebuild &lt;code&gt;perl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ ./Configure -des -Dstartperl&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;#!/my/shebang&amp;#39;&lt;/span&gt;
$ make test install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our custom value is the default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -e &lt;span style="color:#e6db74"&gt;&amp;#39;use Config; print $Config{startperl}&amp;#39;&lt;/span&gt;
&lt;span style="color:#75715e"&gt;#!/my/shebang&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/ExtUtils::MakeMaker
"&gt;ExtUtils::MakeMaker&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Module::Build
"&gt;Module::Build&lt;/a&gt; seems also to use &lt;code&gt;startperl&lt;/code&gt; among other methods to fix modules shebangs.&lt;/p&gt;

&lt;p&gt;Take care to use an interpreter or a program that behaves like a &lt;code&gt;perl&lt;/code&gt; interpreter! Some CPAN modules use &lt;code&gt;startperl&lt;/code&gt; to write first line of generated perl tests. The &lt;code&gt;/usr/bin/env&lt;/code&gt; limitation still apply here.&lt;/p&gt;

&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.in-ulm.de/~mascheck/various/shebang/"&gt;The #! magic, details about the shebang/hash-bang mechanism on various Unix flavours&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/29608/why-is-it-better-to-use-usr-bin-env-name-instead-of-path-to-name-as-my"&gt;Why it is better to usr /usr/bin/env interpreter instead of /path/to/interpreter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/450509/could-someone-explain-this-shebang-line-which-uses-sh-and-then-does-exec-perl"&gt;Could someone explain this shebang line which uses sh and then does exec perl?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A tiny portion comes from &lt;a href="https://linuxfr.org/news/sortie-de-perl-5-30-0"&gt;Sortie de Perl 5.30.0&lt;/a&gt; (en français).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <id>https://www.perl.com/article/bang-bang/</id>
    <published>2020-11-11T11:04:40Z</published>
    <updated>2020-11-11T11:04:40Z</updated>
  </entry>
  <entry>
    <title>Perl-Schulungen vor dem Deutschen Perl-/Raku-Workshop 2021 in Leipzig</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-11-10-gpw-schulungen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Auch während der aktuell hohen Infektionszahlen in der Corona-Pandemie schauen wir nach vorne. Nach aktuellem Stand findet der Deutsche Perl-/Raku-Workshop 2021 Ende März in Leipzig statt (sollte die Corona-Situation das nicht hergeben, wird da mit Sicherheit reagiert).</div>
    </content>
    <id>https://blog.perl-academy.de/2020-11-10-gpw-schulungen</id>
    <published>2020-11-10T10:00:00Z</published>
    <updated>2020-11-10T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 085</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2020/11/08#pwc085" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of real numbers greater than zero. Write a script to find if there exists a triplet (a,b,c) such that 1 &amp;lt; a+b+c &amp;lt; 2. Print 1 if you succeed otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given an array of real numbers greater than zero.
# Write a script to find if there exists a triplet (a,b,c) 
# such that 1 &lt; a+b+c &lt; 2. Print 1 if you succeed otherwise 0.
##
use boolean;
use Math::Combinatorics;

sub build_constraints{
    my @constraints;
    my $a_not_equal_b = sub { $_[0] != $_[1] };
    my $a_not_equal_c = sub { $_[0] != $_[2] };
    my $b_not_equal_c = sub { $_[1] != $_[2] };
    my $sum_greater_than_1 = sub { 1 &lt; ($_[0] + $_[1] + $_[2]) };
    my $sum_less_than_2 = sub { 2 &gt; ($_[0] + $_[1] + $_[2]) };
    return (
       $a_not_equal_b,
       $a_not_equal_c,
       $b_not_equal_c,
       $sum_greater_than_1,
       $sum_less_than_2
    );
}

MAIN:{
    my $combinations = Math::Combinatorics-&gt;new(
                           count =&gt; 3,
                           data =&gt; [@ARGV],
                       );
    my $found;                  
    while(my @combination = $combinations-&gt;next_combination()){  
        $found = true;  
        for my $constraint (build_constraints()){
            if(!$constraint-&gt;(@combination)){
                $found = false;
                last;
            }
        }
        do{ print "1\n"; last; } if($found);
    }
    print "0\n" if(!$found);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl 0.1 1.2 3.4 0.2
1
$ perl perl/ch-1.pl 1.1 1.2 3.4 0.2
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I decided to try a &lt;em&gt;constraint programming&lt;/em&gt; approach for this. While there are several modules for doing this available on CPAN I didn’t want to quite go so deep down that rabbithole. Instead I took the simpler path of implementing each constraint as a subroutine stored in an array. For each candidate combination the constraints are tests. Since all constraints must be satisfied if any one returns a false value then we can move immediately to the next combination.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a positive integer $N. Write a script to find if it can be expressed as a ** b where a &amp;gt; 0 and b &amp;gt; 1. Print 1 if you succeed otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a positive integer $N.
# Write a script to find if it can be expressed
# as a ^ b where a &gt; 0 and b &gt; 1. 
# Print 1 if you succeed otherwise 0.
##
use boolean;

sub log_a{
    my($a, $n) = @_;
    return log($n)/log($a);
}

MAIN:{
    my $N = $ARGV[0];
    my $found = false;                  
    for my $a (2 .. $N){ 
        my $b = log_a($a, $N);
        if($b =~ /^[-]?\d+$/ &amp;&amp; $b &gt; 1){ 
            print "1\n";
            $found = true;
            last;
        }
    }
    print "0\n" if(!$found);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl 7
0
$ perl perl/ch-2.pl 9
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;I was tempted to repeat roughly the same design as Part 1 and use constraints but that really would be over engineering it! Instead here we just loop over all possible values &lt;code&gt;$a&lt;/code&gt; and test using logarithms to see if &lt;code&gt;$b&lt;/code&gt; holds an integer value. There seems to be a number of ways to do the test to determine if a scalar holds an integer but a regex seems maybe the most idiomatically Perlish way.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc085</id>
    <published>2020-11-08T16:20:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5489131903259232051</id>
    <published>2020-11-07T20:03:00.000+01:00</published>
    <updated>2020-11-07T20:03:11.759+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxiv) 20 CPAN great modules released last week</title>
    <content type="html">This is a list of &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.37&lt;/strong&gt; on 2020-11-02&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.33 was 1 month, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.994' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.994&lt;/strong&gt; on 2020-11-07&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 0.993 was 5 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ROBM/Cache-FastMmap-1.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Cache::FastMmap&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uses an mmap'ed file to act as a shared memory interprocess cache &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.50&lt;/strong&gt; on 2020-11-06&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.49 was 7 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PABLROD/Chart-Plotly-0.041' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Chart::Plotly&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate html/javascript charts from perl data using javascript library plotly.js &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.041&lt;/strong&gt; on 2020-11-01&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.040 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.44&lt;/strong&gt; on 2020-11-06&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.43 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.017' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.017&lt;/strong&gt; on 2020-11-03&lt;/li&gt;  &lt;li&gt;Votes: 174&lt;/li&gt;  &lt;li&gt;Previous version: 6.015 was 5 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.52&lt;/strong&gt; on 2020-11-04&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 7.50 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/File-Path-2.18' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Path&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create or remove directory trees &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.18&lt;/strong&gt; on 2020-11-05&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 2.17 was 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9708' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9708&lt;/strong&gt; on 2020-11-06&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.9707 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.43&lt;/strong&gt; on 2020-11-07&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.41 was 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.60&lt;/strong&gt; on 2020-11-04&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.59 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Markdent-0.38' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Markdent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An event-based Markdown parser toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.38&lt;/strong&gt; on 2020-11-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.37 was 4 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.22' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.22&lt;/strong&gt; on 2020-11-06&lt;/li&gt;  &lt;li&gt;Votes: 66&lt;/li&gt;  &lt;li&gt;Previous version: 4.21 was 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.64' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.64&lt;/strong&gt; on 2020-11-06&lt;/li&gt;  &lt;li&gt;Votes: 435&lt;/li&gt;  &lt;li&gt;Previous version: 8.63 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.47&lt;/strong&gt; on 2020-11-03&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.46 was 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/REHSACK/Params-Util-1.102' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Params::Util&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Simple, compact and correct param-checking functions &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.102&lt;/strong&gt; on 2020-11-02&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.101 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RWSTAUNER/Pod-Markdown-3.300' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Markdown&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Convert POD to Markdown &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.300&lt;/strong&gt; on 2020-10-31&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 3.200 was 1 year, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/FERKI/Rex-1.13.1' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Rex&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - the friendly automation framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13.1&lt;/strong&gt; on 2020-11-05&lt;/li&gt;  &lt;li&gt;Votes: 72&lt;/li&gt;  &lt;li&gt;Previous version: 1.13.0 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0926' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0926&lt;/strong&gt; on 2020-11-06&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0924 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.61' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.61&lt;/strong&gt; on 2020-11-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.60 was 2 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5489131903259232051/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxiv-20-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5489131903259232051"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5489131903259232051"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2020/11/cccxiv-20-cpan-great-modules-released.html" title="(cccxiv) 20 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>CPAN Dashboard</title>
  <summary type="html"><![CDATA[<p>
The <a href="https://code.perlhacks.com/">CPAN Dashboard</a> shows the status of the GitHub repositories of the CPAN projects of <a href="https://davecross.co.uk/">Dave Cross</a>.
<p>
]]></summary>
  <updated>2020-11-07T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/cpan-dashboard"/>  <id>https://perlmaven.com/cpan-dashboard</id>
  <content type="html"><![CDATA[<p>
The <a href="https://code.perlhacks.com/">CPAN Dashboard</a> shows the status of the GitHub repositories of the CPAN projects of <a href="https://davecross.co.uk/">Dave Cross</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Call for Grant Proposals (November 2020 Round)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grant_proposals_nov_2020"/>
  <id>tag:news.perlfoundation.org,2020-11-06:/post/call_for_grant_proposals_nov_2020</id>
  <published>2020-11-06T16:56:50</published>
  <updated>2020-11-06T16:56:50</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 November 13 2020, UTC. We will publish the received applications, get community feedback through November 19th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 November 13 2020, UTC. We will publish the received applications, get community feedback through November 19th, and we will conclude the process shortly thereafter.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community.</p>

<p>We will confirm the receipt of application by November 13th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Final Grant Report: Establishing Documentation Standards for the Perl 7 Era, October 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/final_grant_report_establishing_documentation_standards_perl7_october_2020"/>
  <id>tag:news.perlfoundation.org,2020-11-06:/post/final_grant_report_establishing_documentation_standards_perl7_october_2020</id>
  <published>2020-11-06T16:42:18</published>
  <updated>2020-11-06T16:42:18</updated>
  <summary>
  <![CDATA[
     Jason McIntosh has shared his progress on Perl 7 documentation standards for the month of October, and has delivered his final report on the grant: *"October saw me very busy with the documentation standards project. After continuing the research I began in September, I spent much of the month writing a draft style guide to which I’ve given the filename “perldocstyle.pod”. Per my project proposal, I did seek comment on 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Jason McIntosh has shared his progress on Perl 7 documentation standards for the month of October, and has delivered his final report on the grant:</p>

<p><em>"October saw me very busy with the documentation standards project. After continuing the research I began in September, I spent much of the month writing a draft style guide to which I’ve given the filename “perldocstyle.pod”. Per my project proposal, I did seek comment on it from both within and outside the Perl community; this included my hiring a freelance style-guide editor to review the document.</em></p>

<p><em>"Midway through the month, I shared a request-for-comments report with P5P, including a couple of examples where I apply the proposed standards two two extant Perl man pages. This is at https://jmac.org/misc/perldoc/. In that RFC, I also propose the creation of a new documentation-focused sub-project within the larger Perl project, which would have its own dedicated team or manager. Obviously, I’m keeping the deliverables of this project scoped to just the style guide—but since I noticed that literally every project other than Perl that I visited during my research paired its style guide with a dedicated documentation team, I felt obliged to attach this recommendation to the project at hand.</em></p>

<p><em>"At month’s end, I submitted perldocstyle.pod as a pull request to the Perl project, proposing it as a new porting document. I have responded to code-review comments that porters have offered so far, and intend to continue working with P5P to see this file through to whatever its ultimate fate in the Perl repository might be. I’ve meanwhile declined to make additional pull requests from my updated-document examples, since doing so before these new standards’ ratification (via permanent acceptance into the repository) seems premature.</em></p>

<p><em>"As such, I consider this project delivered.</em></p>

<p><em>"Feedback from the community has been quite positive. Most people who have commented on the proposal express support for a focused documentation project within Perl. Several people stated a willingness to be part of whatever documentation-focused sub-project might result. Lively discussion and debate occurred on the P5P mailing list over the specifics of some of the proposed standards, which I take as a positive sign that Perl’s present stewards care very much about the quality of the language’s core documentation, and wish to actively improve it rather than simply let it passively accrue."</em></p>

    ]]>
  </content>
</entry>
</feed>
