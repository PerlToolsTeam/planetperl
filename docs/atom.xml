<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2023-05-06T00:56:17Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76183920</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">bash perl options for one expression, others for another, in the same command</title>
            <category scheme="https://stackoverflow.com/tags" term="bash"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="delimiter"/>
        <author>
            <name>Mario Palumbo</name>
            <uri>https://stackoverflow.com/users/9704496</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76183920/bash-perl-options-for-one-expression-others-for-another-in-the-same-command"/>
        <published>2023-05-05T15:47:10Z</published>
        <updated>2023-05-05T21:41:28Z</updated>
        <summary type="html">
            &lt;p&gt;I have file1.txt&lt;/p&gt;
&lt;pre class="lang-none prettyprint-override"&gt;&lt;code&gt;text1
text1
text1
text2
text2
text2
text1
text1
text1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and file2.txt&lt;/p&gt;
&lt;pre class="lang-none prettyprint-override"&gt;&lt;code&gt;text1
text2
text2
text1
text1
text1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have a command with pipe:&lt;/p&gt;
&lt;pre class="lang-bash prettyprint-override"&gt;&lt;code&gt;perl -pe 's/text2$/text4/' file1.txt file2.txt | perl -0pe 's/text1$/text3/'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That gives me the output:&lt;/p&gt;
&lt;pre class="lang-none prettyprint-override"&gt;&lt;code&gt;text1
text1
text1
text4
text4
text4
text1
text1
text1    #EOF file1.txt
text1
text4
text4
text1
text1
text3    #EOF file2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but I want:&lt;/p&gt;
&lt;pre class="lang-none prettyprint-override"&gt;&lt;code&gt;text1
text1
text1
text4
text4
text4
text1
text1
text3    #EOF file1.txt
text1
text4
text4
text1
text1
text3    #EOF file2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I tried this command:&lt;/p&gt;
&lt;pre class="lang-bash prettyprint-override"&gt;&lt;code&gt;perl -pe 's/text2$/text4/; ' -0e 's/text1$/text3/' file1.txt file2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which unexpectedly applies the &amp;quot;null&amp;quot; record delimiter to both expressions and not just the last one, resulting in:&lt;/p&gt;
&lt;pre class="lang-none prettyprint-override"&gt;&lt;code&gt;text1
text1
text1
text2
text2
text2
text1
text1
text3    #EOF file1.txt
text1
text2
text2
text1
text1
text3    #EOF file2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, as you can see, &amp;quot;text2&amp;quot; is never found on the last line, so it is not replaced by &amp;quot;text4&amp;quot;, which would have happened if the &amp;quot;null&amp;quot; record delimiter had been applied only to the last of the two expressions.&lt;/p&gt;
&lt;p&gt;How do I make it apply only to the last one?&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76185167</id>
        <re:rank scheme="https://stackoverflow.com">3</re:rank>
        <title type="text">Add custom function to Tpage (Template::Toolkit)</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="template-toolkit"/>
        <author>
            <name>Nazar</name>
            <uri>https://stackoverflow.com/users/3071003</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76185167/add-custom-function-to-tpage-templatetoolkit"/>
        <published>2023-05-05T18:53:36Z</published>
        <updated>2023-05-05T20:24:08Z</updated>
        <summary type="html">
            &lt;p&gt;I am using Tpage (a command line wrapper for the Template Toolkit) and the &lt;a href="http://www.template-toolkit.org/docs/manual/VMethods.html#section_Defining_Custom_Virtual_Methods" rel="nofollow noreferrer"&gt;documentation&lt;/a&gt; describes how to create custom virtual methods for scalar, list or hash variables, which would then be called as &lt;code&gt;variable.custom_method()&lt;/code&gt;. However, I would like define some independent functions within the template that could be used directly. The idea is as follows:&lt;/p&gt;
&lt;p&gt;This is my functions.tt file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[%- PERL -%]

sub int2hex{
 my $intvar = shift;
 return sprintf(&amp;quot;%X&amp;quot;, $intvar);
};

[%- END -%]

[% myInteger=18 %]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is my template.tt file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Some text
The value of [%myInteger%] in hexadecimal is [% int2hex(myInteger) %]
More text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would then call the template toolkit from the command line as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tpage --eval_perl --pre_process=functions.tt template.tt &amp;gt; result.f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expectation is that the &lt;code&gt;function.tt&lt;/code&gt; file would be processed first and the &lt;code&gt;int2hex()&lt;/code&gt; subroutine become available for the &lt;code&gt;template.tt&lt;/code&gt; file. However, I get an error saying that &lt;code&gt;undef error - int2hex is undefined&lt;/code&gt;. On the other hand, it does not complain about the &lt;code&gt;myInteger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looks like the &lt;code&gt;[% PERL %][% END %]&lt;/code&gt; portion of the file does not add the &lt;code&gt;int2hex&lt;/code&gt; function to the list of methods. It is not straight-forward to implement this with the MACRO or Plugins as described &lt;a href="https://stackoverflow.com/questions/1285441/calling-outside-subs-and-modules-in-template-toolkit-without-plugins"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Is there a simpler approach to define the functions in the template files directly?&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <author>
      <name>/u/oalders</name>
      <uri>https://www.reddit.com/user/oalders</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/oalders"&gt; /u/oalders &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://cpanmeta.grinnz.com/packages"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/138uobm/module_index_search_cpan_meta_browser/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_138uobm</id>
    <link href="https://www.reddit.com/r/perl/comments/138uobm/module_index_search_cpan_meta_browser/"/>
    <updated>2023-05-05T16:58:22+00:00</updated>
    <published>2023-05-05T16:58:22+00:00</published>
    <title>Module Index Search - CPAN Meta Browser</title>
  </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76179024</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Perl threaded server not working as expected</title>
            <category scheme="https://stackoverflow.com/tags" term="multithreading"/>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="sockets"/>
        <author>
            <name>buchi</name>
            <uri>https://stackoverflow.com/users/3406765</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76179024/perl-threaded-server-not-working-as-expected"/>
        <published>2023-05-05T05:17:51Z</published>
        <updated>2023-05-05T16:42:28Z</updated>
        <summary type="html">
            &lt;p&gt;Need help regarding this threaded Perl code. Here I am trying to create a server inside a thread. This server code is receiving and sending the messages as expected, but it is working only sometimes. Sometimes it is not receiving and sending the messages.&lt;/p&gt;
&lt;p&gt;here is the server code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
use strict;
use warnings;
use utf8;
use experimentals;
use threads;

sub main() {
    async {
        use IO::Socket qw(AF_INET SOCK_STREAM SHUT_WR);
        my $server = IO::Socket-&amp;gt;new(
            Domain =&amp;gt; AF_INET,
            Type =&amp;gt; SOCK_STREAM,
            Proto =&amp;gt; 'tcp',
            LocalHost =&amp;gt; '0.0.0.0',
            LocalPort =&amp;gt; 8447,
            ReusePort =&amp;gt; 1,
            Listen =&amp;gt; 10,
        ) or say &amp;quot;cannot create socket&amp;quot;;

        say &amp;quot;listening on 8447&amp;quot;;

        while(1) {
            my $client = $server-&amp;gt;accept();
            my $clientAddress = $client-&amp;gt;peerhost();
            my $clientPort = $client-&amp;gt;peerport();
            say &amp;quot;Connection from $clientAddress: $clientPort&amp;quot;;

            my $data = &amp;quot;&amp;quot;;
            $client-&amp;gt;recv($data, 1024);
            say &amp;quot;recieved data: &amp;quot;, $data, &amp;quot;\n&amp;quot;;

            $data = &amp;quot;Thread id: &amp;quot; . threads-&amp;gt;self-&amp;gt;tid();
            $client-&amp;gt;send($data);
            $client-&amp;gt;close();
        }

        $server-&amp;gt;close();
    };
}

my $monitorThread = async { 
    while(1) {
        foreach my $thread (threads-&amp;gt;list(threads::joinable)) {
            $thread-&amp;gt;detach();
        }
        sleep(1);
    }
};

main();

while(1) {
    my @threads = threads-&amp;gt;list(threads::all);
    if(scalar @threads == 1) {
        $monitorThread-&amp;gt;detach();
        last;
    } else {
        sleep(1);
    }
}

exit();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here is the client code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use strict;
use warnings;
use utf8;
use experimentals;
use IO::Socket qw(AF_INET SOCK_STREAM SHUT_WR);

my $client = IO::Socket-&amp;gt;new(
    Domain =&amp;gt; AF_INET,
    Type =&amp;gt; SOCK_STREAM,
    Proto =&amp;gt; 'tcp',
    PeerPort =&amp;gt; 8447,
    PeerHost =&amp;gt; '0.0.0.0',
) or say &amp;quot;Cannot create socket: &amp;quot;, $IO::Socket::errstr;

my $size = $client-&amp;gt;send(&amp;quot;Hello World!&amp;quot;);
say &amp;quot;Sent data of length: &amp;quot;, $size;

my $buffer;
$client-&amp;gt;recv($buffer, 1024);
say &amp;quot;Got back: &amp;quot;, $buffer;

$client-&amp;gt;close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please, help me in writing the proper server code inside the thread.&lt;/p&gt;
&lt;p&gt;Edit section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use strict;
use warnings;
use utf8;
use experimentals;
use threads;

$| = 1;

sub clientConnection($client) {
    async {
        my $clientAddress = $client-&amp;gt;peerhost();
        my $clientPort = $client-&amp;gt;peerport();
        say &amp;quot;Connection from $clientAddress: $clientPort&amp;quot;;

        my $data = &amp;quot;&amp;quot;;
        $client-&amp;gt;recv($data, 1024);
        say &amp;quot;recieved data: &amp;quot;, $data, &amp;quot;\n&amp;quot;;

        my $tid = &amp;quot;Thread id: &amp;quot; . threads-&amp;gt;self-&amp;gt;tid();
        $client-&amp;gt;send($tid);
        $client-&amp;gt;close();
    };
}

sub main() {
    async {
        use IO::Socket;
        my $server = IO::Socket-&amp;gt;new(
            Domain =&amp;gt; IO::Socket::AF_INET,
            Type =&amp;gt; IO::Socket::SOCK_STREAM,
            Proto =&amp;gt; 'tcp',
            LocalHost =&amp;gt; '0.0.0.0',
            LocalPort =&amp;gt; 8449,
            ReusePort =&amp;gt; 1,
            Listen =&amp;gt; 10,
        ) or say &amp;quot;cannot create socket&amp;quot;;

        say &amp;quot;listening on 8449&amp;quot;;

        while(1) {
            my $client = $server-&amp;gt;accept();
            clientConnection($client);
        }

        $server-&amp;gt;close();
    };
}

my $signalThread = async {
    use sigtrap 'handler' =&amp;gt; \&amp;amp;signalHandler, qw(INT);
};
sub signalHandler($signalName) {
    say &amp;quot;got an intterupt, print some info&amp;quot;;
    my @threads = threads-&amp;gt;list(threads::all);
    say &amp;quot;remaining threads: &amp;quot;, scalar @threads;
}

my $monitorThread = async { 
    while(1) {
        foreach my $thread (threads-&amp;gt;list(threads::joinable)) {
            $thread-&amp;gt;detach();
        }
        sleep(1);
    }
};

main();

while(1) {
    my @threads = threads-&amp;gt;list(threads::all);
    if(scalar @threads == 1) {
        $monitorThread-&amp;gt;detach();
        last;
    } else {
        sleep(1);
    }
}

exit();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit using Socket module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use strict;
use warnings;
use utf8;
use experimentals;
use threads;

sub clientConnection($client, $newSocket) {
    async {
        my ($clientPort, $clientAddr) = unpack_sockaddr_in($client);
        my $tid = threads-&amp;gt;self-&amp;gt;tid();
        print $newSocket &amp;quot;a message from server $tid&amp;quot;;
        print &amp;quot;Connection recieved from &amp;quot;, inet_ntoa($clientAddr),
                        &amp;quot;: &amp;quot;, $clientPort , &amp;quot;\n&amp;quot;;
        close $newSocket;
    };
}

sub main() {
    async {
        use Socket;

        my $port = 8459;
        my $proto = getprotobyname('tcp');
        my $server = &amp;quot;localhost&amp;quot;;

        socket(SOCKET, AF_INET, SOCK_STREAM, $proto) 
                    or say &amp;quot;cannot open socket $!&amp;quot;;
        setsockopt(SOCKET, SOL_SOCKET, SO_REUSEADDR, 1) 
                    or say &amp;quot;cannot set socket option to SO_REUSEADDR $!&amp;quot;;

        bind(SOCKET, pack_sockaddr_in($port, inet_aton($server)))
                    or say &amp;quot;Cannot bind to port &amp;quot;, $port;
        
        listen(SOCKET, 5) or say &amp;quot;listen Error: $!&amp;quot;;
        say &amp;quot;Server started on port &amp;quot;, $port;

        my $newSocket;
        while(my $client = accept($newSocket, SOCKET)) {
            clientConnection($client, $newSocket);
        }
    };
}

my $signalThread = async {
    use sigtrap 'handler' =&amp;gt; \&amp;amp;signalHandler, qw(INT);
};
sub signalHandler($signalName) {
    say &amp;quot;got an intterupt, print some info&amp;quot;;
    my @threads = threads-&amp;gt;list(threads::all);
    say &amp;quot;remaining threads: &amp;quot;, scalar @threads;
}

my $monitorThread = async { 
    while(1) {
        foreach my $thread (threads-&amp;gt;list(threads::joinable)) {
            $thread-&amp;gt;detach();
        }
        sleep(1);
    }
};

main();

while(1) {
    my @threads = threads-&amp;gt;list(threads::all);
    if(scalar @threads == 1) {
        $monitorThread-&amp;gt;detach();
        last;
    } else {
        sleep(1);
    }
}

exit();
&lt;/code&gt;&lt;/pre&gt;

        </summary>
    </entry>
  <entry>
    <title>Early May Perl Software Releases 2023</title>
    <link rel="alternate" href="https://blogs.perl.org/users/dean/2023/05/early-may-perl-software-releases-2023.html"/>
    <id>tag:blogs.perl.org,2023:/users/dean//558.11090</id>
    <published>2023-05-05T15:59:12Z</published>
    <updated>2023-05-05T16:16:52Z</updated>
    <author>
        <name>Dean</name>
        <uri>https://www.facebook.com/groups/perlprogrammers/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/dean/">
        <![CDATA[<p>This is not exhaustive at all and is based on github release notifications rather than MetaCPAN <a href="https://metacpan.org/recent">recent</a>. If your perl project uses github releases please let me know so I subscribe to them. I also post them to <a href="https://www.facebook.com/groups/perlprogrammers/">Perl Programmers</a>.</p>

<p><strong>EPrints 3.4.5-rc1</strong></p>

<p>EPrints is a document management system aimed at Higher Educational institutions and individuals. EPrints has been used to provide Open Access to research results, sharing of educational resources and providing portfolios of work. It has a flexible metadata and workflow model to support varied business needs as well as interaction with other Web and institutional systems.<br />
<a href="https://github.com/eprints/eprints3.4/releases/tag/v3.4.5-rc1"><br />
EPrints 3.4.5 release candidate 1</a> is now available on GitHub. Full release is planned for release shortly. </p>

<p><strong>Request Tracker 5.0.4</strong></p>

<p>RT is an enterprise-grade issue tracking system. It allows organizations<br />
to keep track of what needs to get done, who is working on which tasks,<br />
what's already been done, and when tasks were (or weren't) completed.</p>

<p>RT 5.0.4 is now available for general use. The list of changes<br />
included with this release is <a href="https://github.com/bestpractical/rt/releases/tag/rt-5.0.4">here</a>.</p>

<p><strong>Ravada v1.8.10</strong></p>

<p>Ravada is a software that allows the user to connect to a remote virtual desktop. Ravada is meant for sysadmins who have some background in GNU/Linux, and want to deploy a VDI project.</p>

<p>Its back-end has been designed and implemented in order to allow future hypervisors to be added to the framework. Currently, it supports KVM and LXC is in the works.</p>

<p>The client only requirements are: a web-browser and a remote viewer supporting the spice protocol.</p>

<p>Changes and release on <a href="https://github.com/UPC/ravada/releases/tag/v1.8.10">github</a></p>

<p><strong>Perl5-IDEA 2023.1.1</strong></p>

<p>A bundle of Perl5-related plugins for JetBrains IDEs.</p>

<p>Changes and release on <a href="https://github.com/Camelcade/Perl5-IDEA/releases/tag/2023.1.1">github</a><br />
</p>]]>
        
    </content>
</entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76168499</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">Perl - Hash of hashes - is the only option to use "eval" to access variable length key-sequences? {k[0]}=&gt;{k[1]}=&gt;</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="hash-of-hashes"/>
        <author>
            <name>pkrauss6171</name>
            <uri>https://stackoverflow.com/users/18842805</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76168499/perl-hash-of-hashes-is-the-only-option-to-use-eval-to-access-variable-leng"/>
        <published>2023-05-03T23:01:45Z</published>
        <updated>2023-05-05T14:21:32Z</updated>
        <summary type="html">
            &lt;p&gt;I am going to keep my question high level, because that is me, that is my style, and that is what I need answer for.&lt;/p&gt;
&lt;p&gt;I have a multi-level hash to work with (hash of hashes).
I also have algorithms that give me a sequence of keys in @key
(to various values to look up).&lt;/p&gt;
&lt;p&gt;My technique to access individual values is:&lt;/p&gt;
&lt;p&gt;Simply build an expression looking like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $h-&amp;gt; {$key[0] }=&amp;gt; {$key[1]} =&amp;gt; ... e.t.c.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then &amp;quot;eval&amp;quot; that expression.&lt;/p&gt;
&lt;p&gt;Are there better techniques to deal with variable key sequences, without eval?&lt;/p&gt;
&lt;p&gt;( The hash is a mirror of a directory structure.  Values are individual files, and my program needs to read the content of those files.)&lt;/p&gt;
&lt;p&gt;I tried and it works with the eval option.&lt;/p&gt;

        </summary>
    </entry>
  <entry xmlns:re="http://purl.org/atompub/rank/1.0">
        <id>https://stackoverflow.com/q/76180397</id>
        <re:rank scheme="https://stackoverflow.com">0</re:rank>
        <title type="text">No package perl(URL::Normalize) available</title>
            <category scheme="https://stackoverflow.com/tags" term="perl"/>
            <category scheme="https://stackoverflow.com/tags" term="centos"/>
            <category scheme="https://stackoverflow.com/tags" term="redhat"/>
            <category scheme="https://stackoverflow.com/tags" term="yum"/>
            <category scheme="https://stackoverflow.com/tags" term="cpan"/>
        <author>
            <name>mohamed didi</name>
            <uri>https://stackoverflow.com/users/12226810</uri>
        </author>
        <link rel="alternate" href="https://stackoverflow.com/questions/76180397/no-package-perlurlnormalize-available"/>
        <published>2023-05-05T08:48:42Z</published>
        <updated>2023-05-05T13:12:21Z</updated>
        <summary type="html">
            &lt;p&gt;I want to install the perl module URL::Normalize via yum by running the following command :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y  &amp;quot;perl(URL::Normalize)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here what I get as result :&lt;/p&gt;
&lt;p&gt;`Loaded plugins: product-id, search-disabled-repos, subscription-manager&lt;/p&gt;
&lt;p&gt;This system is not registered with an entitlement server. You can use subscription-manager to register.&lt;/p&gt;
&lt;p&gt;No package perl(URL::Normalize) available.
Error: Nothing to do
`&lt;/p&gt;
&lt;p&gt;I 'am on red hat 7.&lt;/p&gt;
&lt;p&gt;I tried to use cpan to install the module, the installation was completed with succes.&lt;/p&gt;
&lt;p&gt;[root@mdamp525-2 StratacacheConstellation]# cpanm URL::Normalize
URL::Normalize is up to date. (0.43)&lt;/p&gt;
&lt;p&gt;The issues is yum does not noticed the installation by cpan.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y  &amp;quot;perl(URL::Normalize)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;==&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;No package perl(URL::Normalize) available.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;How can I do in order install yum install -y  &amp;quot;perl(URL::Normalize)&amp;quot; succeed ?&lt;/p&gt;
&lt;p&gt;Thank you,&lt;/p&gt;

        </summary>
    </entry>
  <entry>
    <title type="html">PTS 2023: more PAUSE work (3/5)</title>
    <link href="https://rjbs.cloud/blog/2023/05/pts-2023-more-pause-work-3-5/" rel="alternate" type="text/html" title="PTS 2023: more PAUSE work (3/5)"/>
    <published>2023-05-05T12:07:01+00:00</published>
    <updated>2023-05-05T12:07:01+00:00</updated>
    <id>https://rjbs.cloud/blog/2023/05/pts-2023-more-pause-work-3-5</id>
    <content type="html" xml:base="https://rjbs.cloud/blog/2023/05/pts-2023-more-pause-work-3-5/">&lt;p&gt;In past years, one of my big areas of work at PTS has been PAUSE.  If you’re
not a CPAN wonk, here’s a tiny explainer:  PAUSE is the Perl Author Upload
SErver.  It’s where you go to upload new software to the CPAN, and to manage
the permissions on packages for which you’re the administrator.  It’s got a
number of interrelated pieces, but the two easiest units to describe are the
web interface and the indexer.&lt;/p&gt;

&lt;p&gt;The web interface lets you log in, update your profile, manage permissions, and
some other things like that.  For the most part, the business logic and model
code is directly written into the web app, which has been a Mojolicious app
since 2017.  I barely know anything about the web app, although I did get a
test instance of it running with Docker, thanks to Kenichi Ishigaki’s work this
year.&lt;/p&gt;

&lt;p&gt;The indexer is the part I know well.  It looks at newly-uploaded archives and
decides whether they may be written to the index.  I can upload a new
version of ExtUtils::MakeMaker, but it won’t show up in the index, which means
nobody will get it unless they specifically ask to get the file I uploaded.&lt;/p&gt;

&lt;p&gt;The indexer works by inspecting the contents of the uploaded archive, looking
at the META.json file (or META.yml), examining the Perl source code files, and
looking at the CPAN module permissions database.  Conceptually, it’s simple.
In practice, it’s pretty complicated.  Part of this is because it wants to
statically analyze Perl source (good luck!) and part of this is that the
implementation is not very componentized.  Now, maybe what I should say is that
this means it’s complicated &lt;em&gt;for me&lt;/em&gt;.  I like breaking things into small
reusable pieces that I can test in isolation.  This is especially valuable for
me as somebody who came to this project when it was already at least ten years
old.&lt;/p&gt;

&lt;p&gt;So, lots of my work on PAUSE goes in a cycle.  First, I see what I want to
improve or change, then I figure out what existing code I need to refactor to
make those changes easy enough for me to succeed at making them.&lt;/p&gt;

&lt;p&gt;When I arrived this year, I thought the big changes I made would be related to
installing new instances, but as I wrote in my last entry, that work was mostly
already done when I got there!  I had some other things in mind that would be
worth working on, but I started by categorizing the &lt;a href="https://github.com/andk/pause/issues/"&gt;PAUSE issue
tracker&lt;/a&gt;.  I started with about 115 open
issues and went through the list, getting a sense for which were already done,
which ones were easy wins, and which ones formed big chunks of work to
consider.  Every once in a while, I leaned over to Matthew Horsfall and said,
“Hey, look at this one with me,” but mostly he was sorting out a really nasty
deadlock and I tried to leave him be.&lt;/p&gt;

&lt;p&gt;By the end of the process, I’d closed thirty issues or more as already fixed,
duplicates, or things we agreed to do.  The rest, I categorized like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Issues needing a decision from Andreas on how we would proceed&lt;/strong&gt;:  There
were about a dozen, and the next day Andreas sat down with me and we made
decisions.  Some we rejected, some we documented what we’d do.  Some of those
got done, too!  As we made decisions, I removed the label, so sadly I can’t
link to the list.  Most of these were in the form, “I don’t like the behavior
of the indexer and think it should change.”  About half the time Andreas
agreed, and about half the time he didn’t.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/andk/pause/issues?q=is%3Aissue+label%3Apermissions"&gt;Issues with permissions&lt;/a&gt;&lt;/strong&gt;:  These were things like “sometimes when I upload
a distribution, the permissions seem to get broken.”  Some were like “it
should be easier to do some common but tedious action.”  Some were “it should
be harder to do some easy but dangerous action.”  I didn’t end up touching
many of these.  Kenichi Ishigaki dealt with a few.  I believe that a number
of the weird bugs were related to an interaction of the database deadlock
Matthew Horsfall was working on with a bit of code that ran outside of a
database transaction instead of inside.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Issue with emails, indexing, and error reporting&lt;/strong&gt;:  I ended up spending my
time on these, so I’ll write more below!  (If you want to go look at these,
they’re labeled with
&lt;em&gt;&lt;a href="https://github.com/andk/pause/issues?q=is%3Aissue+label%3Aindexer+"&gt;indexer&lt;/a&gt;&lt;/em&gt;
and
&lt;em&gt;&lt;a href="https://github.com/andk/pause/issues?q=is%3Aissue+label%3Ametadata"&gt;metadata&lt;/a&gt;&lt;/em&gt;
and
&lt;em&gt;&lt;a href="https://github.com/andk/pause/issues?q=is%3Aissue+label%3Aemail"&gt;email&lt;/a&gt;&lt;/em&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="email-indexing-and-error-reporting"&gt;Email, indexing, and error reporting&lt;/h2&gt;

&lt;p&gt;First, I’ll say that there were two bits of work in this bucket: a bunch of
little bug fixes and enhancements, and also one big pile of work related to
making fixing these kinds of things easier.  I’ll write about the big pile in
another post.  For now, the little stuff.&lt;/p&gt;

&lt;p&gt;I updated all the email code to &lt;a href="https://github.com/andk/pause/pull/389"&gt;use Email::Sender to send
mail&lt;/a&gt;.  Sometimes it used Mail::Send,
which is what it all used ten years ago.  This makes it just a little easier to
write automated tests that can see all the mail that would’ve been sent by
PAUSE.  I also tweaked some of Matthew Horsfall’s work from a couple years ago,
making it easier to say “run tests and let them see all the mail they’d send,
but &lt;em&gt;also&lt;/em&gt; save a copy to disk.”  This is useful when I want to compare the
exact emails sent before and after patching PAUSE.  I can write a test that the
things I expect are there, but it’s nice to check the exact emails, to avoid
surprise content (or blank space)!&lt;/p&gt;

&lt;p&gt;There was an 18 year old hack to support some weird packaging in mod_perl 1.
&lt;a href="https://github.com/andk/pause/pull/402"&gt;I removed this without regret&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I learned that there was a short list of files that you &lt;em&gt;can&lt;/em&gt; replace after
uploading on PAUSE.  If you upload &lt;code class="language-plaintext highlighter-rouge"&gt;Perfect-Project-1.234.tar.gz&lt;/code&gt;, you can’t
upload it again, even if you realize that you screwed up and included your
GitHub API token in the release.  You have to upload a new file and delete the
old one.  You can replace things like &lt;code class="language-plaintext highlighter-rouge"&gt;README&lt;/code&gt; or &lt;code class="language-plaintext highlighter-rouge"&gt;documentation.pdf&lt;/code&gt;, though.
I &lt;a href="https://github.com/andk/pause/pull/393"&gt;made that code a little easier to
read&lt;/a&gt;, in furtherance of allowing
Markdown files.  I mostly did this because I stumbled across the code when
talking about the “CPAN index for ancient version of Perl” idea.&lt;/p&gt;

&lt;p&gt;I nudged Andreas to upgrade the SSL bindings on PAUSE, meaning we &lt;em&gt;should&lt;/em&gt; stop
seeing PAUSE fail to retrieve files from URLs at stricter hosts.&lt;/p&gt;

&lt;p&gt;I finally flipped the switch on a years-old decision: &lt;a href="https://github.com/andk/pause/pull/401"&gt;all distributions must
have a META file&lt;/a&gt; (JSON or YAML) to be
indexed.  It isn’t carefully validated yet, but that will come next.  Last
year, only about a half of a percent of all uploads were missing a META file.
Looking into the thirteen distributions, most of them appeared to have made a
mistake in their MANIFEST.  (Once again, MANIFEST causes hassle!)&lt;/p&gt;

&lt;h2 id="modulefaker-changes"&gt;Module::Faker changes&lt;/h2&gt;

&lt;p&gt;That last change to PAUSE, requiring a META file, broke a bunch of tests.  That
didn’t mean the code was broken.  It exposed that some of the early tests
were written such that they indexed tarballs stored in the repository, built by
hand, with the minimum set of files to make the test go.  They needed
rebuilding.&lt;/p&gt;

&lt;p&gt;I converted those to use Module::Faker directly.  I &lt;a href="/blog/2019/04/pts-2019-module-faker-3-5/"&gt;wrote about Module::Faker
after last PTS&lt;/a&gt;, when I
added the ability to specify what the faked-up distribution should look like.
I was easy to handle removing the META file, but some of the distributions
needed weirder changes, like bogus version declarations.&lt;/p&gt;

&lt;p&gt;I made a new 0.025 release of Module::Faker that includes more options for how
to build a fake distribution with weird properties.  Some aren’t so weird.
You can now build a &lt;code class="language-plaintext highlighter-rouge"&gt;perlclass&lt;/code&gt;-style package for testing, like this:&lt;/p&gt;

&lt;div class="language-perl highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nv"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;iSnack&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All this is still a bit underdocumented.  I should fix that, but I’m a bit
nervous about committing to the interface I’ve provided.  Still, it’s very
useful to have it coded, and I used it to simplify a lot of the code!&lt;/p&gt;</content>
    <author>
      <name>Ricardo Signes</name>
    </author>
    <category term="perl"/>
    <category term="programming"/>
    <summary type="html">In past years, one of my big areas of work at PTS has been PAUSE. If you’re not a CPAN wonk, here’s a tiny explainer: PAUSE is the Perl Author Upload SErver. It’s where you go to upload new software to the CPAN, and to manage the permissions on packages for which you’re the administrator. It’s got a number of interrelated pieces, but the two easiest units to describe are the web interface and the indexer.</summary>
  </entry>
  <entry>
    <title>PWC215 - Number Placement</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/05/05/pwc215-number-placement/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>On with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-215/#TASK2">TASK #2</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a> <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-215/">#215</a>.
Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of numbers having just 0 and 1. You are also
given placement count (&gt;=1).</p>

  <p>Write a script to find out if it is possible to replace 0 with 1 in
the given list. The only condition is that you can only replace when
there is no 1 on either side. Print 1 if it is possible otherwise 0.</p>

  <p><strong>Example 1:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (1,0,0,0,1), $count = 1
Output: 1

You are asked to replace only one 0 as given count is 1.
We can easily replace middle 0 in the list i.e. (1,0,1,0,1).
</code></pre></div>  </div>

  <p><strong>Example 2:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (1,0,0,0,1), $count = 2
Output: 0

You are asked to replace two 0's as given count is 2.
It is impossible to replace two 0's.
</code></pre></div>  </div>

  <p><strong>Example 3:</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @numbers = (1,0,0,0,0,0,0,0,1), $count = 3
Output: 1
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p>The puzzle is a bit cryptic, e.g. I initially thought that <code class="language-plaintext highlighter-rouge">10</code> or
<code class="language-plaintext highlighter-rouge">10101</code> could be valid numbers in the list, as they have just 0 and 1.
The examples seem to hint that the numbers <em>themselves</em> can only be 0 or
1.</p>

<p>Then the placement count should be used to assess whether it’s possible
to do <em>that many</em> replacements. So it’s a <em>replacement</em> count maybe?</p>

<blockquote>
  <p>I wonder how ChatGPT would generate code based on this prompt!</p>
</blockquote>

<p>Last, and <em>most</em>, there’s the question of how these replacements should
happen <em>chronologically</em>. There are at least two approaches:</p>

<ul>
  <li>
    <p><em>sequential</em>: we do one replacement, decrease the replacement count by
1, then start again if the count is still greater than 0.</p>
  </li>
  <li>
    <p><em>parallel</em>: we assess the possibility to replace each <code class="language-plaintext highlighter-rouge">0</code> all at once.</p>
  </li>
</ul>

<p>The latter approach is what usually comes out of simulations, like e.g.
<a href="/ETOOBUSY/2020/04/23/conway-life/">Conway’s Game of Life</a>: the state of a cell in the <em>next</em> step is
solely determined by the state of the cell and its surroundings in the
<em>current</em> step.</p>

<p>As an example, given this input:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$count = 2;
@numbers = (1, 0, 0, 0, 0, 1);
</code></pre></div></div>

<p>we would get a <code class="language-plaintext highlighter-rouge">0</code> with the <em>sequential</em> approach, and a <code class="language-plaintext highlighter-rouge">1</code> with the
<em>parallel</em> (which would generate <code class="language-plaintext highlighter-rouge">1 0 1 1 0 1</code>).</p>

<p>So my question is… <em>which of the two?!?</em></p>

<h1 id="the-solution">The solution</h1>

<p>Both the <em>sequential</em> and the <em>parallel</em> approaches are valid, so let’s
address them both. Especially considering that they can be both solved
starting from the same pre-computation over the input numbers, i.e. the
list of counts of zeros in consecutive streaks.</p>

<p>As an example, the following input:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 0 1 0 0 0 1 0 0
</code></pre></div></div>

<p>contains three streaks of zeros, with counts <code class="language-plaintext highlighter-rouge">(1, 3, 2)</code>.</p>

<p>In the <em>sequential</em> case, each streak of $n$ zeros can only accomodate
$\lfloor \frac{n - 1}{2} \rfloor$ replacements, because we have to keep
one boundary on the left (the $-1$) and then one on the right for each
replacement (i.e. we need two zeros for each replacement).</p>

<p>In the <em>parallel</em> case, we only have to make sure to keep a boundary <code class="language-plaintext highlighter-rouge">0</code>
on the left and another one on the right; all other zeros are good for
replacement. This rules out streaks with a single zero.</p>

<p>Let’s start with <a href="https://www.perl.org/">Perl</a>:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>
<span class="k">use</span> <span class="nn">List::</span><span class="nv">Util</span> <span class="p">'</span><span class="s1">sum</span><span class="p">';</span>

<span class="k">my</span> <span class="nv">@args</span> <span class="o">=</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">split</span> <span class="sr">m{[\s,]*}mxs</span> <span class="p">}</span> <span class="nv">@ARGV</span><span class="p">;</span>
<span class="nv">@args</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">unless</span> <span class="nv">@args</span><span class="p">;</span>
<span class="nv">say</span> <span class="nv">number_placement_sequential</span><span class="p">(</span><span class="nv">@args</span><span class="p">);</span>
<span class="nv">say</span> <span class="nv">number_placement_parallel</span><span class="p">(</span><span class="nv">@args</span><span class="p">);</span>

<span class="k">sub </span><span class="nf">number_placement_sequential</span> <span class="p">($count, @numbers) {</span>
   <span class="k">my</span> <span class="nv">$av</span> <span class="o">=</span> <span class="nv">sum</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">int</span><span class="p">((</span><span class="vg">$_</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="p">}</span> <span class="nv">zero_streaks_counts</span><span class="p">(</span><span class="nv">@numbers</span><span class="p">);</span>
   <span class="k">return</span> <span class="nv">$count</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="nv">$av</span> <span class="sr">//</span> <span class="mi">0</span><span class="p">)</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">number_placement_parallel</span> <span class="p">($count, @numbers) {</span>
   <span class="k">my</span> <span class="nv">$av</span> <span class="o">=</span> <span class="nv">sum</span> <span class="nb">map</span> <span class="p">{</span> <span class="vg">$_</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="p">?</span> <span class="vg">$_</span> <span class="o">-</span> <span class="mi">2</span> <span class="p">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="nv">zero_streaks_counts</span><span class="p">(</span><span class="nv">@numbers</span><span class="p">);</span>
   <span class="k">return</span> <span class="nv">$count</span> <span class="o">&lt;=</span> <span class="nv">$av</span> <span class="p">?</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">zero_streaks_counts</span> <span class="p">(@numbers) {</span>
   <span class="k">my</span> <span class="nv">@retval</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$n</span> <span class="p">(</span><span class="nv">@numbers</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span><span class="p">)</span> <span class="p">{</span> <span class="nb">push</span> <span class="nv">@retval</span><span class="p">,</span> <span class="mi">0</span> <span class="k">if</span> <span class="nv">$retval</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">}</span>
      <span class="k">else</span>    <span class="p">{</span> <span class="nv">$retval</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span>                  <span class="p">}</span>
   <span class="p">}</span>
   <span class="nb">pop</span> <span class="nv">@retval</span> <span class="k">while</span> <span class="nv">@retval</span> <span class="o">&amp;&amp;</span> <span class="nv">$retval</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">return</span> <span class="nv">@retval</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://raku.org/">Raku</a>:</p>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) {
   my $count = @args.shift;
   put number-placement-sequential(@args, $count);
   put number-placement-parallel(@args, $count);
}

sub number-placement-sequential (@numbers, $count) {
   my $av = zero-streaks-count(@numbers)
      .map({ (($_ - 1) / 2).Int })
      .sum;
   return $count &lt;= $av ?? 1 !! 0;
}

sub number-placement-parallel (@numbers, $count) {
   my $av = zero-streaks-count(@numbers)
      .map({ $_ &gt; 1 ?? $_ - 2 !! 0 })
      .sum;
   return $count &lt;= $av ?? 1 !! 0;
}

sub zero-streaks-count (@numbers) {
   my @retval = 0,;
   for @numbers -&gt; $n {
      if $n.Int { @retval.push: 0 if @retval[*-1] }
      else      { @retval[*-1]++                  }
   }
   @retval.pop while @retval &amp;&amp; @retval[*-1] == 0;
   return @retval;
}
</code></pre>

<p>I guess this is everything for this challenge, stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/05/05/pwc215-number-placement/</id>
    <published>2023-05-05T06:00:00+02:00</published>
    <updated>2023-05-05T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <author>
      <name>/u/nobono</name>
      <uri>https://www.reddit.com/user/nobono</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I guess &lt;a href="https://www.fast.ai/posts/2023-05-03-mojo-launch.html"&gt;this&lt;/a&gt; will make it harder to search for &lt;a href="https://mojolicious.org/"&gt;Mojo(licious)&lt;/a&gt;-related stuff. 😩&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/nobono"&gt; /u/nobono &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/137mox0/mojo_may_be_the_biggest_programming_language/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/137mox0/mojo_may_be_the_biggest_programming_language/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_137mox0</id>
    <link href="https://www.reddit.com/r/perl/comments/137mox0/mojo_may_be_the_biggest_programming_language/"/>
    <updated>2023-05-04T14:28:45+00:00</updated>
    <published>2023-05-04T14:28:45+00:00</published>
    <title>Mojo may be the biggest programming language advance in decades</title>
  </entry>
  <entry>
    <title type="html">PTS 2023: The Lyon Amendment (minimum perl) (2/5)</title>
    <link href="https://rjbs.cloud/blog/2023/05/pts-2023-lyon-amendment-2-5/" rel="alternate" type="text/html" title="PTS 2023: The Lyon Amendment (minimum perl) (2/5)"/>
    <published>2023-05-04T12:09:01+00:00</published>
    <updated>2023-05-04T12:09:01+00:00</updated>
    <id>https://rjbs.cloud/blog/2023/05/pts-2023-lyon-amendment-2-5</id>
    <content type="html" xml:base="https://rjbs.cloud/blog/2023/05/pts-2023-lyon-amendment-2-5/">&lt;p&gt;Ten years ago, the “toolchain gang” who manage the libraries most central to
deploying and testing CPAN libraries came to &lt;a href="https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md"&gt;an
agreement&lt;/a&gt;
on the minimum supported version of perl.  Nobody needed to keep maintaining
v5.6, and everyone who hadn’t already, moved to v5.8.  That was ten years ago,
but the toolchain was still pinned to v5.8.  I am not enthusiastic about
targeting v5.8, and have &lt;a href="/blog/2023/01/leaving-perl-v5.8-behind/"&gt;written about this before&lt;/a&gt;.  I bumped some modules to v5.12,
earlier this year.  I got some feedback, both positive and negative, but I felt
good about it.&lt;/p&gt;

&lt;p&gt;This year, a number of people wanted to talk about bumping the maximum target
version for toolchain.  To me, the interesting question wasn’t about the
toolchain per se, but about what version of perl people feel they can rely upon
in CPAN without being a pain to others.  I didn’t have strong feelings, coming
into this conversation, but I thought it would be nice if the version number
moved.&lt;/p&gt;

&lt;p&gt;There were a few positions voiced in these conversations:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Supporting v5.8 should continue, in part because any change in required
version may inconvenience people, and in part because it makes bisecting
changes in how code behaves more difficult (you can’t, for example, test a
library on v5.8 if it &lt;code class="language-plaintext highlighter-rouge"&gt;configure_requires&lt;/code&gt; v5.22).&lt;/li&gt;
  &lt;li&gt;We should provide an alternative CPAN index or repository that will only
index code known to work with older versions of Perl.  If you use that
version of CPAN, you won’t ever get the newer Test-Deep, but you can get the
last one that worked on v5.8.&lt;/li&gt;
  &lt;li&gt;We should agree to a newer minimum, both for the convenience of the
toolchain authors in coding, but also in debugging: it takes real time to
work around issues in perl that were fixed 12 years ago.&lt;/li&gt;
  &lt;li&gt;The new version shouldn’t be a one-time bump, but a policy about what
version we support over time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The short version here is that the last two positions won out, and many people
were interested in the “alternative index” idea.  For my part, I saw many
complications in making something reliable and long-lived, so my goal was to
&lt;em&gt;not&lt;/em&gt; couple the idea of a new version to the existence of this system.  As for
the first position, basically it was outvoted.  I do like that Perl has a long
tradition of backward compatibility, but for me, it can only go so far.  All
the way back to 2003 is too far.&lt;/p&gt;

&lt;p&gt;In the end, we wrote an &lt;a href="https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lyon-amendment.md"&gt;amendment to the Lancaster
consensus&lt;/a&gt;,
stating that the toolchain would track the perl of 10 years ago.  That would
mean that this year we’d target v5.18 — but we also said we’d let Red Hat v7
reach end of maintenance support before moving past its version of perl, v5.16.&lt;/p&gt;

&lt;p&gt;That means v5.16 this year, v5.20 next, then v5.22.  To my mind, this is huge
progress.  I’m not in a rush to go change everything, but I will definitely
freely update my code when I touch it.  CPAN::Meta::Requirements is likely to
get an update soon, requiring at least v5.10, maybe v5.12.  Test::Deep may
follow on toward newer versions over time.&lt;/p&gt;

&lt;p&gt;If you want to see older versions of perl continue to have &lt;code class="language-plaintext highlighter-rouge"&gt;cpan Some::Library&lt;/code&gt;
work (by finding an older version of that library), keep an eye out for news
about projects to make that possible.  I don’t really plan to follow that work.&lt;/p&gt;</content>
    <author>
      <name>Ricardo Signes</name>
    </author>
    <category term="perl"/>
    <category term="programming"/>
    <summary type="html">Ten years ago, the “toolchain gang” who manage the libraries most central to deploying and testing CPAN libraries came to an agreement on the minimum supported version of perl. Nobody needed to keep maintaining v5.6, and everyone who hadn’t already, moved to v5.8. That was ten years ago, but the toolchain was still pinned to v5.8. I am not enthusiastic about targeting v5.8, and have written about this before. I bumped some modules to v5.12, earlier this year. I got some feedback, both positive and negative, but I felt good about it.</summary>
  </entry>
  <entry>
    <title type="html">PTS 2023: Lyon and changing plans (1/5)</title>
    <link href="https://rjbs.cloud/blog/2023/05/pts-2023-lyon-1-5/" rel="alternate" type="text/html" title="PTS 2023: Lyon and changing plans (1/5)"/>
    <published>2023-05-04T11:41:01+00:00</published>
    <updated>2023-05-04T11:41:01+00:00</updated>
    <id>https://rjbs.cloud/blog/2023/05/pts-2023-lyon-1-5</id>
    <content type="html" xml:base="https://rjbs.cloud/blog/2023/05/pts-2023-lyon-1-5/">&lt;p&gt;It’s been three years since &lt;a href="/blog/2019/04/pts-2019-marlow-1-5/"&gt;the last Perl Toolchain Summit&lt;/a&gt;.  In 2019, I wasn’t sure whether I would go.
This time, I was sure that I would.  It had been too long since I saw everyone,
and there were some useful discussions to be had.  I think that overall the
summit was a success, and I’m happy with the outcomes.  We left with a few
loose threads, but I’m feeling hopeful that they can, mostly, get tied up.&lt;/p&gt;

&lt;p&gt;I’ll be posting updates over the next week or two, I suspect, because I’m not
sure I can get everything down on paper right away.  As I do, I’ll update this
post with links into those.  In the meantime, here is a brief overview of the
event, my agenda, and what happened.&lt;/p&gt;

&lt;p&gt;This was the third Perl Toolchain Summit held in Lyon.  I was there for the
first, but missed the second.  The event hotel was right across from the train
station and we did our work in meeting rooms in the hotel.  The venue was
great, and I have no complaints.&lt;/p&gt;

&lt;center&gt;
&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/rjbs/52868599556/in/album-72177720307993761/" title="Lyon skyline"&gt;&lt;img src="https://live.staticflickr.com/65535/52868599556_9513582b93_z.jpg" width="640" height="480" alt="Lyon skyline" /&gt;&lt;/a&gt;&lt;script async="" src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/center&gt;

&lt;p&gt;I arrived the day before the conference, like most attendees, and my first
order of business was getting a shower.  No, wait, it was getting a beer,
&lt;em&gt;then&lt;/em&gt; a shower.  In the evening, we went to dinner at a place that served
tartines.  I was surprised, when we went in, that I remembered it.  We’d eaten
there once before.  I suspect I may have had exactly the same seat as last
time.  Different food, though.  Last time, I had something with soft cheese,
honey, and walnuts.  This time, sardines and capers.  It was good!&lt;/p&gt;

&lt;p&gt;I didn’t really spend much time out in the city.  I wrote code and talked to my
fellow summit attendees.  Once the event was over, I was right off to Germany
for a few days visting family.  While it would’ve been nice to look around Lyon
more, I have no regrets.  My family visit was great.&lt;/p&gt;

&lt;h2 id="what-i-planned-to-do-making-pause-portable"&gt;What I planned to do: Making PAUSE Portable&lt;/h2&gt;

&lt;p&gt;My big goal on this trip was to make it possible to reinstall PAUSE from
scratch for use in production.  I told Robert Spier, who provides hosting for
PAUSE, that I planned to produce a setup program to do things.  He said,
“That’s a start, by why not make it Docker or something?”  I said, “Mostly
because I don’t know Docker very well yet.”&lt;/p&gt;

&lt;p&gt;It turns out that I didn’t need to worry.  Kenichi had gotten a test version of
PAUSE working with &lt;code class="language-plaintext highlighter-rouge"&gt;docker compose&lt;/code&gt; just a bit before the event, and we used
that as a starting point.  I did a very small amount of rejiggering to help me
test and configure it, much of which was about tweaks to the email code.  The
real work on this front was done by &lt;a href="https://metacpan.org/author/WOLFSAGE"&gt;Matthew
Horsfall&lt;/a&gt;, who took the existing test
configuration and parameterized it to work for testing a production
environment.&lt;/p&gt;

&lt;p&gt;The work isn’t quite done, but I think that the main next steps are going to be
related to the actual data transfer, setup, and cutover to a new PAUSE
environment.  I’m excited for this for a number of reasons, mostly related to
the testability, reliability, and maintainability of PAUSE — all of which are
related, of course.&lt;/p&gt;

&lt;h2 id="things-i-actually-did-at-the-summit"&gt;Things I &lt;em&gt;actually&lt;/em&gt; did at the summit&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;More posts will come here for a bit before I have finished…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="/blog/2023/05/pts-2023-lyon-amendment-2-5/"&gt;changing the version floor on the Perl toolchain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="/blog/2023/05/pts-2023-more-pause-work-3-5/"&gt;PAUSE improvements: this and that&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="thanks-to-our-sponsors-and-organizers"&gt;Thanks to our sponsors and organizers&lt;/h2&gt;

&lt;p&gt;The Perl Toolchain Summit is one of the most important events in the year for
Perl.  It’s how we make progress on a lot of our key software, either by
finding time to code together or by getting into one place to make tough
decisions.  Doing that means having a place to go and a means to get people
there.  Our sponsors and organizers make that possible.  Our sponsors provide
much-needed money to the organizers, and the organizers turn that money into
concrete things like “meeting rooms” and “plane tickets”.&lt;/p&gt;

&lt;p&gt;I offer my sincere thanks to our organizers: Laurent Boivin and Philippe
Bruhat; and to &lt;a href="http://perltoolchainsummit.org/pts2023/sponsors.html"&gt;our
sponsors&lt;/a&gt;:
&lt;a href="https://www.booking.com"&gt;Booking.com&lt;/a&gt;, &lt;a href="https://deriv.com"&gt;Deriv&lt;/a&gt;, &lt;a href="https://www.grantstreet.com"&gt;Grant
Street Group&lt;/a&gt;,
&lt;a href="https://www.fastmail.com"&gt;Fastmail&lt;/a&gt;, &lt;a href="https://cpanel.com"&gt;cPanel&lt;/a&gt;, &lt;a href="https://perl.careers/"&gt;Perl
Careers&lt;/a&gt;, &lt;a href="https://www.maxmind.com/en/home"&gt;MaxMind&lt;/a&gt;,
&lt;a href="https://fastly.com"&gt;Fastly Inc.&lt;/a&gt;, &lt;a href="https://perlmaven.com"&gt;Perl Maven&lt;/a&gt;,
&lt;a href="https://opencagedata.com"&gt;OpenCage&lt;/a&gt;, &lt;a href="https://www.perl-services.de"&gt;Perl
Services&lt;/a&gt;,
&lt;a href="https://www.oetiker.ch"&gt;Oetiker+Partner&lt;/a&gt;, and
&lt;a href="https://www.procura.nl"&gt;Procura&lt;/a&gt;.&lt;/p&gt;</content>
    <author>
      <name>Ricardo Signes</name>
    </author>
    <category term="perl"/>
    <category term="programming"/>
    <summary type="html">It’s been three years since the last Perl Toolchain Summit. In 2019, I wasn’t sure whether I would go. This time, I was sure that I would. It had been too long since I saw everyone, and there were some useful discussions to be had. I think that overall the summit was a success, and I’m happy with the outcomes. We left with a few loose threads, but I’m feeling hopeful that they can, mostly, get tied up.</summary>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #215 - Bad Words and Looking For Zeros</title>
    <link rel="alternate" href="https://blogs.perl.org/users/oldtechaa/2023/05/perl-weekly-challenge-215---bad-words-and-looking-for-zeros.html"/>
    <id>tag:blogs.perl.org,2023:/users/oldtechaa//4258.11088</id>
    <published>2023-05-04T04:49:56Z</published>
    <updated>2023-05-04T05:20:59Z</updated>
    <author>
        <name>oldtechaa</name>
        <uri>https://github.com/oldtechaa/SeekMIDI</uri>
    </author>
    <category term="Perl Weekly Challenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perlweeklychallenge" label="#perlweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/oldtechaa/">
        <![CDATA[<p>Hello everybody! Back this week for weekly challenge 215, where we look for unsorted words and sets of zeros. This week both challenges took me only about 10-15 minutes each. The usual disclaimer about an early post, so don't read spoilers if you want to do the challenge yourself.</p>

<h4>Odd One Out</h4>

<p>This one's a very simple task to print the number of words that are not alphabetically sorted. Here's the code:</p>

<pre><code>#!/usr/bin/perl

use strict;
use v5.24;

my $removed = 0;
foreach (@ARGV) {if ($_ ne join('', sort(split(//, $_)))) {$removed++}}
say $removed;
</code></pre>

<p>It's that simple. We just make a variable to count the number of non-alphabetical words, then for each word in the list we split it, sort the letters, and see if the resulting word matches the word we're testing. If not, we add it to the count. 3 lines essentially, not including the boilerplate. It might be possible to make it look cleaner, but in this one it was so easy to make it compact that I didn't see a point in cleaning it up.</p>

<h4>Number Placement</h4>

<p>In this task, you're provided with a number of how many zeros you want to remove. We print out a binary value, 1 or 0, of whether it's possible to remove that many zeros. Technically we don't remove the zeros, we change them to 1, but it can only happen if the adjacent numbers are also zero. Here's the solution:</p>

<pre><code>#!/usr/bin/perl

use strict;
use v5.24;

my $count = shift;
say 'You chose a count of 0, please provide a different count.' and exit if $count == 0;
say 'There are not enough elements, please provide more elements to replace.' and exit if @ARGV &lt; 3;
for (my $i = 1; $i &lt; $#ARGV - 1; $i++) {
    if (!($ARGV[$i - 1] + $ARGV[$i] + $ARGV[$i + 1])) {$ARGV[$i] = 1 and $count--}
}
say ($count &gt; 0 ? '0' : '1');
</code></pre>

<p>This one I decided to do a little error-checking on zero counts and not having at least 3 elements. Also, I take the count as the first argument provided. I iterate through the numbers provided with a cursor starting at the second position looping to the second to last. If the cursor and its adjacent numbers are all 0, then we switch the cursor element to 1 and subtract from the remaining number to be found. If we haven't found all of them by the time we're done we print a failure 0, and if we have we print a success 1.</p>

<p>That's it for this week! Have a good week everybody and I'll probably see you next week!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>PWC215 - Odd One Out</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/05/04/pwc215-odd-one-out/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Here we are with <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-215/#TASK1">TASK #1</a> from <a href="https://theweeklychallenge.org/">The Weekly Challenge</a>
<a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-215/">#215</a>. Enjoy!</p>
</blockquote>

<h1 id="the-challenge">The challenge</h1>

<blockquote>
  <p>You are given a list of words (alphabetic characters only) of same
size.</p>

  <p>Write a script to remove all words not sorted alphabetically and print
the number of words in the list that are not alphabetically sorted.</p>

  <p><strong>Example 1</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @words = ('abc', 'xyz', 'tsu')
Output: 1

The words 'abc' and 'xyz' are sorted and can't be removed.
The word 'tsu' is not sorted and hence can be removed.
</code></pre></div>  </div>

  <p><strong>Example 2</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @words = ('rat', 'cab', 'dad')
Output: 3

None of the words in the given list are sorted.
Therefore all three needs to be removed.
</code></pre></div>  </div>

  <p><strong>Example 3</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: @words = ('x', 'y', 'z')
Output: 0
</code></pre></div>  </div>
</blockquote>

<h1 id="the-questions">The questions</h1>

<p><strong>I strongly oppose to the considerations in the second example</strong>: the
<code class="language-plaintext highlighter-rouge">rat</code> is being discriminated.</p>

<p>Just to nit-pick a bit more:</p>

<ul>
  <li>we’re assuming the latin alphabet without accents and other stuff,
right?</li>
  <li>two equal words in sequence are considered sorted, right?</li>
</ul>

<p>I also wonder… why specify that the words are of the same size?</p>

<h1 id="the-solution">The solution</h1>

<p>We’ll keep a <em>cursor index variable</em> to point to the latest word that
was in correct order, then move ahead to find the next one that is still
correctly sorted with respect to the cursor. For each of them:</p>

<ul>
  <li>if sorted correctly, we just advance the cursor</li>
  <li>otherwise, we mark one tick up.</li>
</ul>

<pre><code class="language-raku">#!/usr/bin/env raku
use v6;
sub MAIN (*@args) { put count-odd-one-out(@args) }

sub count-odd-one-out (@words) {
   my $i = 0;
   return sum gather for ^@words {
      if @words[$i] le @words[$_] { $i = $_ }
      else                        { take 1  }
   }
}
</code></pre>

<p>If we really want to let the second example make sense, then we can
easily wrap this within the following:</p>

<pre><code class="language-raku">sub count-odd-one-out-but-not-really (@words) {
    my $candidate = count-odd-one-out(@words);
    my $total-words = @words.elems;
    return $total-words if $total-words - $candidate &lt;= 1;
    return $candidate;
}
</code></pre>

<p>i.e. we do one additional remove if only one word would be left.</p>

<p>Again, I can’t see how this fits the description.</p>

<p>Moving on to <a href="https://www.perl.org/">Perl</a>, we do basically the same thing, only counting
things a bit differently because there’s no <code class="language-plaintext highlighter-rouge">gather</code>/<code class="language-plaintext highlighter-rouge">take</code> around:</p>

<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env perl</span>
<span class="k">use</span> <span class="nv">v5</span><span class="mf">.24</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nv">experimental</span> <span class="p">'</span><span class="s1">signatures</span><span class="p">';</span>

<span class="nv">say</span> <span class="nv">count_odd_one_out</span><span class="p">(</span><span class="nv">@ARGV</span> <span class="p">?</span> <span class="nv">@ARGV</span> <span class="p">:</span> <span class="sx">qw&lt; abc xyz def &gt;</span><span class="p">);</span>

<span class="k">sub </span><span class="nf">count_odd_one_out</span> <span class="p">(@words) {</span>
   <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">for</span> <span class="k">my</span> <span class="nv">$j</span> <span class="p">(</span><span class="mi">1</span> <span class="o">..</span> <span class="nv">$#words</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nv">$words</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="ow">le</span> <span class="nv">$words</span><span class="p">[</span><span class="nv">$j</span><span class="p">])</span> <span class="p">{</span> <span class="nv">$i</span> <span class="o">=</span> <span class="nv">$j</span> <span class="p">}</span>
      <span class="k">else</span>                          <span class="p">{</span> <span class="o">++</span><span class="nv">$sum</span>  <span class="p">}</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="nv">$sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The adaptation for example 2 is left as an easy exercise for the reader 🙄</p>

<p>Stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/05/04/pwc215-odd-one-out/</id>
    <published>2023-05-04T06:00:00+02:00</published>
    <updated>2023-05-04T06:00:00+02:00</updated>
    <category term="the weekly challenge"/>
    <category term="Perl"/>
    <category term="RakuLang"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #215 - Bad Words and Looking For Zeros</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-215-bad-words-and-looking-for-zeros-3ihg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hello everybody! Back this week for weekly challenge 215, where we look for unsorted words and sets of zeros. This week both challenges took me only about 10-15 minutes each. The usual disclaimer about an early post, so don't read spoilers if you want to do the challenge yourself.</p>

<h4>
  
  
  Odd One Out
</h4>

<p>This one's a very simple task to print the number of words that are not alphabetically sorted. Here's the code:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.24;

my $removed = 0;
foreach (@ARGV) {if ($_ ne join('', sort(split(//, $_)))) {$removed++}}
say $removed;
</code></pre>

</div>

<p>It's that simple. We just make a variable to count the number of non-alphabetical words, then for each word in the list we split it, sort the letters, and see if the resulting word matches the word we're testing. If not, we add it to the count. 3 lines essentially, not including the boilerplate. It might be possible to make it look cleaner, but in this one it was so easy to make it compact that I didn't see a point in cleaning it up.</p>

<h4>
  
  
  Number Placement
</h4>

<p>In this task, you're provided with a number of how many zeros you want to remove. We print out a binary value, 1 or 0, of whether it's possible to remove that many zeros. Technically we don't remove the zeros, we change them to 1, but it can only happen if the adjacent numbers are also zero. Here's the solution:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.24;

my $count = shift;
say 'You chose a count of 0, please provide a different count.' and exit if $count == 0;
say 'There are not enough elements, please provide more elements to replace.' and exit if @ARGV &lt; 3;
for (my $i = 1; $i &lt; $#ARGV - 1; $i++) {
    if (!($ARGV[$i - 1] + $ARGV[$i] + $ARGV[$i + 1])) {$ARGV[$i] = 1 and $count--}
}
say ($count &gt; 0 ? '0' : '1');
</code></pre>

</div>

<p>This one I decided to do a little error-checking on zero counts and not having at least 3 elements. Also, I take the count as the first argument provided. I iterate through the numbers provided with a cursor starting at the second position looping to the second to last. If the cursor and its adjacent numbers are all 0, then we switch the cursor element to 1 and subtract from the remaining number to be found. If we haven't found all of them by the time we're done we print a failure 0, and if we have we print a success 1.</p>

<p>That's it for this week! Have a good week everybody and I'll probably see you next week!</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-215-bad-words-and-looking-for-zeros-3ihg</id>
    <published>2023-05-04T00:20:48Z</published>
    <updated>2023-05-04T00:20:48Z</updated>
    <category term="perl"/>
    <category term="sort"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 215: Odd One Out and Number Placement</title>
    <link rel="alternate" href="https://blogs.perl.org/users/laurent_r/2023/05/perl-weekly-challenge-215-odd-one-out-and-number-placement.html"/>
    <id>tag:blogs.perl.org,2023:/users/laurent_r//3226.11087</id>
    <published>2023-05-03T22:45:41Z</published>
    <updated>2023-05-03T22:52:24Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 215 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-215/">Perl Weekly Challenge</a> organized by <a href="https://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on May 7, 2023 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Odd One Out</h2>

<p><em>You are given a list of words (alphabetic characters only) of same size.</em></p>

<p><em>Write a script to remove all words not sorted alphabetically and print the number of words in the list that are not alphabetically sorted.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @words = ('abc', 'xyz', 'tsu')
Output: 1

The words 'abc' and 'xyz' are sorted and can't be removed.
The word 'tsu' is not sorted and hence can be removed.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @words = ('rat', 'cab', 'dad')
Output: 3

None of the words in the given list are sorted.
Therefore all three needs to be removed.
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @words = ('x', 'y', 'z')
Output: 0
</code></pre>

<p>First, I&#8217;ll assume that &#8220;sorted alphabetically&#8221; means sorted in ascending alphabetic order, as alphabetic order almost always means ascending alphabetic order (unless explicitly specified otherwise).</p>

<p>Second, we&#8217;re requested to remove from the list all words not sorted alphabetically, but should print only the number of words in the list that are not alphabetically sorted. We don&#8217;t really need to remove words not sorted alphabetically to count them.</p>

<p>Last, but not least, the specification is quite ambiguous, but I disagree with example 2: I consider that &#8216;cab&#8217; and &#8216;dad&#8217; are properly sorted, just like the two first words of example 1 are sorted. Otherwise, if we had a list of, say, 100 sorted words preceded with just 1 word out of order, we would have to declare that none of the words in the given list are sorted, which hardly makes sense. So, to me, the output for example 2 should be one, as only one word (&#8216;rat&#8217;) needs to be removed (or possibly relocated) to obtain a sorted list.</p>

<h3>Odd One Out in Raku</h3>

<p>This program counts the number of times a word is less than its predecessor in the alphabetic order.</p>

<pre><code>sub find-non-sorted (@in) {
    my @out = @in[0];
    my $count = 0;
    for 1..@in.end -&gt; $i {
        if @in[$i] lt @in[$i-1] {
            $count++;
        } else {
            push @out, @in[$i];
        }
    }
  say @out;
    return $count;
}
for &lt;abc xyz tsu&gt;, &lt;rat cab dad&gt;, &lt;x y z&gt; -&gt; @test {
    printf "%-15s =&gt; ", ~@test;
    say find-non-sorted @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./odd-one-out.raku
abc xyz tsu     =&gt; 1
rat cab dad     =&gt; 1
x y z           =&gt; 0
</code></pre>

<h3>Odd One Out in Perl</h3>

<p>This program counts the number of times a word is less than its predecessor in the alphabetic order.</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub find_non_sorted {
    my @in = @_;
    my @out = $in[0];
    my $count = 0;
    for my $i (1..$#in) {
        if ($in[$i] lt $in[$i-1]) {
            $count++;
        } else {
            push @out, $in[$i];
        }
    }
    # say @out;
    return $count;
}

for my $test ([&lt;abc xyz tsu&gt;], [&lt;rat cab dad&gt;], [&lt;x y z&gt;]) {
    printf "%-15s =&gt; ", "@$test";
    say find_non_sorted @$test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./odd-one-out.pl
abc xyz tsu     =&gt; 1
rat cab dad     =&gt; 1
x y z           =&gt; 0
</code></pre>

<h2>Task 2: Number Placement</h2>

<p><em>You are given a list of numbers having just 0 and 1. You are also given placement count (<code>&gt;=1</code>).</em></p>

<p><em>Write a script to find out if it is possible to replace 0 with 1 in the given list. The only condition is that you can only replace when there is no 1 on either side. Print 1 if it is possible, otherwise 0.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @numbers = (1,0,0,0,1), $count = 1
Output: 1

You are asked to replace only one 0 as given count is 1.
We can easily replace middle 0 in the list i.e. (1,0,1,0,1).
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @numbers = (1,0,0,0,1), $count = 2
Output: 0

You are asked to replace two 0's as given count is 2.
It is impossible to replace two 0's.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @numbers = (1,0,0,0,0,0,0,0,1), $count = 3
Output: 1
</code></pre>

<p>Expressing &#8220;there is no 1 on either side&#8221; in Raku or Perl code is a bit of a pain in the neck, as there are numerous edge cases, notably when the zero or zeros to be removed are at the very beginning or very end of the input list. For example, if we&#8217;re trying to remove two zeros, if could be done in lists such as (0,0), (1,0,0,0), or (1,0,0,0,0,1). So, depending on the situation, we may need two, three, or four consecutive zeros to be able to remove two zeros. </p>

<p>To me, the simplest is to convert the input list into a string and to let the regex engine do the bulk of the work, which can be expressed in a single and simple code line both in Raku and Perl..</p>

<h3>Number Placement in Raku</h3>

<p>We convert the input digits into a string and use the regexes&#8217; negative <a href="https://docs.raku.org/language/regexes#Lookaround_assertions">lookaround assertions</a> to express the &#8220;there is no 1 on either side&#8221; rule. In the</p>

<pre><code>/ &lt;!after 1&gt; [0 ** {$count}] &lt;!before 1&gt;/
</code></pre>

<p>regex, <code>&lt;!after 1&gt;</code> is a negative lookbehind assertion, which means that the group of zeros matched by <code>[0 ** {$count}]</code> should not be preceded by a 1 (it can be either preceded by another zero, or at the beginning of the string. Similarly, <code>&lt;!before 1&gt;</code> is a negative lookahead assertion, meaning that the group of zeros matched by <code>[0 ** {$count}]</code> should not be followed by a 1.</p>

<pre><code>sub find-zeros (@in, $count) {
    return False if $count == 0 or @in.elems &lt; $count;
    my $str = join "", @in;
    return so ($str ~~ / &lt;!after 1&gt; [0 ** {$count}] &lt;!before 1&gt;/)
}

for &lt;0 0 0 1&gt;, &lt;0 0&gt;, &lt;1 0 0 1&gt;, &lt;1 0 0 0 1&gt;, 
    &lt;1 0 0 0 0 0 0 1&gt; -&gt; @test {
    for 0..5 -&gt; $cnt {
        printf "%d - %-16s =&gt; ", $cnt, "@test[]";
        say + find-zeros @test, $cnt;
  }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./number-placement.raku
0 - 0 0 0 1          =&gt; 0
1 - 0 0 0 1          =&gt; 1
2 - 0 0 0 1          =&gt; 1
3 - 0 0 0 1          =&gt; 0
4 - 0 0 0 1          =&gt; 0
5 - 0 0 0 1          =&gt; 0
0 - 0 0              =&gt; 0
1 - 0 0              =&gt; 1
2 - 0 0              =&gt; 1
3 - 0 0              =&gt; 0
4 - 0 0              =&gt; 0
5 - 0 0              =&gt; 0
0 - 1 0 0 1          =&gt; 0
1 - 1 0 0 1          =&gt; 0
2 - 1 0 0 1          =&gt; 0
3 - 1 0 0 1          =&gt; 0
4 - 1 0 0 1          =&gt; 0
5 - 1 0 0 1          =&gt; 0
0 - 1 0 0 0 1        =&gt; 0
1 - 1 0 0 0 1        =&gt; 1
2 - 1 0 0 0 1        =&gt; 0
3 - 1 0 0 0 1        =&gt; 0
4 - 1 0 0 0 1        =&gt; 0
5 - 1 0 0 0 1        =&gt; 0
0 - 1 0 0 0 0 0 0 1  =&gt; 0
1 - 1 0 0 0 0 0 0 1  =&gt; 1
2 - 1 0 0 0 0 0 0 1  =&gt; 1
3 - 1 0 0 0 0 0 0 1  =&gt; 1
4 - 1 0 0 0 0 0 0 1  =&gt; 1
5 - 1 0 0 0 0 0 0 1  =&gt; 0
</code></pre>

<h3>Number Placement in Perl</h3>

<p>This a port to Perl of the Raku program above. Please refer to the previous section for additional explanations. We convert the input digits into a string and use the regexes&#8217; negative lookaround assertions. In Perl, <code>(?&lt;!1)</code> is a negative lookbehind assertion (no 1 before), and <code>(?!1)</code> a negative lookahead assertion (no 1 after).</p>

<pre><code>use strict;
use warnings;
use feature 'say';

sub find_zeros {
    my @in = @{$_[0]};
    my $count = $_[1];
    return 0 if $count == 0 or @in &lt; $count;
    my $str = join "", @in;
    return 1 if $str =~ /(?&lt;!1)0{$count}(?!1)/;
    0;
}

for my $test ([&lt;0 0 0 1&gt;], [&lt;0 0&gt;], [&lt;1 0 0 1&gt;], [&lt;1 0 0 0 1&gt;],
         [&lt;1 0 0 0 0 0 0 1&gt;]) {
    for my $cnt (0..5) {
        printf "%d - %-16s =&gt; ", $cnt, "@$test";
        say find_zeros $test, $cnt;
  }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./number-placement.pl
0 - 0 0 0 1          =&gt; 0
1 - 0 0 0 1          =&gt; 1
2 - 0 0 0 1          =&gt; 1
3 - 0 0 0 1          =&gt; 0
4 - 0 0 0 1          =&gt; 0
5 - 0 0 0 1          =&gt; 0
0 - 0 0              =&gt; 0
1 - 0 0              =&gt; 1
2 - 0 0              =&gt; 1
3 - 0 0              =&gt; 0
4 - 0 0              =&gt; 0
5 - 0 0              =&gt; 0
0 - 1 0 0 1          =&gt; 0
1 - 1 0 0 1          =&gt; 0
2 - 1 0 0 1          =&gt; 0
3 - 1 0 0 1          =&gt; 0
4 - 1 0 0 1          =&gt; 0
5 - 1 0 0 1          =&gt; 0
0 - 1 0 0 0 1        =&gt; 0
1 - 1 0 0 0 1        =&gt; 1
2 - 1 0 0 0 1        =&gt; 0
3 - 1 0 0 0 1        =&gt; 0
4 - 1 0 0 0 1        =&gt; 0
5 - 1 0 0 0 1        =&gt; 0
0 - 1 0 0 0 0 0 0 1  =&gt; 0
1 - 1 0 0 0 0 0 0 1  =&gt; 1
2 - 1 0 0 0 0 0 0 1  =&gt; 1
3 - 1 0 0 0 0 0 0 1  =&gt; 1
4 - 1 0 0 0 0 0 0 1  =&gt; 1
5 - 1 0 0 0 0 0 0 1  =&gt; 0
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on May 14, 2023. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/493e62880e0752dbcca1bed2e1db29bef29edc39</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/493e62880e0752dbcca1bed2e1db29bef29edc39"/>
    <title>
        Remove duplicate "the" in comments
    </title>
    <updated>2023-05-03T17:29:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/68062695?s=30&amp;v=4"/>
    <author>
      <name>rwp0</name>
      <uri>https://github.com/rwp0</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Remove duplicate &amp;quot;the&amp;quot; in comments

Fix spelling on various files pertaining to core Perl.&lt;/pre&gt;
    </content>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/034a96a9c8546c2e080a802babba5ed9bc6c7798</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/034a96a9c8546c2e080a802babba5ed9bc6c7798"/>
    <title>
        Add MS Build Tools links
    </title>
    <updated>2023-05-03T17:19:53Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/68062695?s=30&amp;v=4"/>
    <author>
      <name>rwp0</name>
      <uri>https://github.com/rwp0</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Add MS Build Tools links

Add new section on Microsoft Build Tools, improve formatting.

MSBT provides CLI compiler and other related tools (without the overhead of the Visual Studio IDE) to compile programs on Windows.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <author>
      <name>/u/fucketyfuckingfuck</name>
      <uri>https://www.reddit.com/user/fucketyfuckingfuck</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I recently found some of my perl scripts are running much more slowly on Windows 10, I believe after an upgrade. Nothing else has changed.&lt;/p&gt; &lt;p&gt;If I restart Windows and run my scripts immediately, while Windows is still loading other background services, the scripts are very fast, until the full set of background processes have loaded, then it slows down. &lt;/p&gt; &lt;p&gt;Has anyone else experienced this problem recently? Does anyone have a good reference on how to strip down the Windows background and configure for optimal Perl performance?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/fucketyfuckingfuck"&gt; /u/fucketyfuckingfuck &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/136th97/configure_windows_pc_for_optimal_perl_command/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/136th97/configure_windows_pc_for_optimal_perl_command/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_136th97</id>
    <link href="https://www.reddit.com/r/perl/comments/136th97/configure_windows_pc_for_optimal_perl_command/"/>
    <updated>2023-05-03T17:17:14+00:00</updated>
    <published>2023-05-03T17:17:14+00:00</published>
    <title>configure Windows PC for optimal Perl command line performance</title>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/4d9b15204f627d9337665bd88adc71cd3bd1ca55</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/4d9b15204f627d9337665bd88adc71cd3bd1ca55"/>
    <title>
        perlapi: Fix strftime inaccuracies, clarify
    </title>
    <updated>2023-05-03T17:16:34Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106911?s=30&amp;v=4"/>
    <author>
      <name>khwilliamson</name>
      <uri>https://github.com/khwilliamson</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;perlapi: Fix strftime inaccuracies, clarify

The deficiency mention removed by this commit was fixed earlier, but the
documentation did not get updated.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>PWC 215 Odd One Out, Number Placement</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-215-odd-one-out-number-placement-2cc9" type="text/html"/>
    <content type="html">&lt;p&gt;Perl is a great language for many problems, and the Perl Weekly Challenge is a good excuse to try out language features.  Week 215 offers two relatively easy challenges; one that scratches the surface of textual processing, and another that exercises arrays.&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-215/#TASK1"&gt;Task 1: Odd One Out&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are given a list of words (alphabetic characters only)
of same size.

Write a script to remove all words not sorted alphabetically
and print the number of words in the list that are not
alphabetically sorted.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Example 1
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Input: @words = ('abc', 'xyz', 'tsu')&lt;br&gt;
Output: 1&lt;br&gt;
&lt;em&gt;The words 'abc' and 'xyz' are sorted and can't be removed.&lt;br&gt;
The word 'tsu' is not sorted and hence can be removed.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like many of the challenges, the description has its ambiguities. It's not obvious why the words all have to be the same length, but it's in the specification, so we'll use that as a restriction.  All the given examples are lowercase strings; should we use ordinary alphabetic ordering, or strict lexicographic ordering?  Let's start by assuming, for simplicity, that we have strings limited to the English alphabet and it should be case-independent.&lt;/p&gt;

&lt;p&gt;The problem seems easy enough.  Iterate over the &lt;code&gt;@words&lt;/code&gt; array, and count each one that meets some criteria.  In Perl, the first thing to reach for when we see "select from list" is the &lt;code&gt;grep&lt;/code&gt; function.  Conveniently, it returns the number of matches in scalar context, so the core of our solution is going to look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$removeCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;isOrdered&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The challenge then shifts to defining an &lt;code&gt;isOrdered&lt;/code&gt; function for a single word.  One way to do it is to sort the letters of the word, and then compare against the word.  One of Perl's strengths is the number of built-in operators and functions that manipulate text. The &lt;code&gt;lc&lt;/code&gt; function will convert a string to lowercase; the &lt;code&gt;split&lt;/code&gt; function will give us an array of letters; the &lt;code&gt;join&lt;/code&gt; function will turn an array into a string; and the &lt;code&gt;sort&lt;/code&gt; function sorts in lexicographical order by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$inOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;("",&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;$inOrder&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose we want to avoid the sort and do our own check in some misguided attempt at premature optimization. The word will be in alphabetic order if the character value of each subsequent character is an ascending sequence.   Perl has &lt;code&gt;ord()&lt;/code&gt; available to get the numeric value of a character (and the inverse &lt;code&gt;chr()&lt;/code&gt;, but that's not going to come up this week).&lt;/p&gt;

&lt;p&gt;So, now we want to iterate over pairs of elements in an array.  This comes up a lot in Perl Weekly Challenge problems.  There's a library function, &lt;code&gt;List::MoreUtils::slide&lt;/code&gt; that encapsulates this, but I like an idiom that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# do something with $first and $next&lt;/span&gt;
    &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going through the array explicitly gives us the opportunity to quit as soon as we see it isn't going to work, unlike the &lt;code&gt;slide&lt;/code&gt; function which would always go through the whole array. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;shift&lt;/code&gt; operator consumes the array, so this may not be appropriate if we need to keep the array around for other purposes, but it will work in this case because the array of characters is temporary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;isOrdered&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;word&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@char&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@char&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What if the alphabet isn't limited to English 'a' to 'z'? Let's not go too wild, but think about European languages like German and Spanish.  What if there were some Unicode characters like 'ñ' or 'ß'?  Perl has a long history of dealing with Unicode and UTF-8.  A good introduction to the problem is this classic (in the Perl world) &lt;a href="https://www.perl.com/pub/2011/08/whats-wrong-with-sort-and-how-to-fix-it.html/"&gt;article about sorting&lt;/a&gt; and the &lt;a href="https://stackoverflow.com/questions/6162484/why-does-modern-perl-avoid-utf-8-by-default/6163129#6163129"&gt;Stackoverflow answer about Unicode&lt;/a&gt; that it references.&lt;/p&gt;

&lt;p&gt;That's a rabbit hole that could consume the entire week, so I'll cut to the chase.  Fortunately, most string operations in Perl are aware of UTF-8 and do the right thing, mostly.  For instance, &lt;code&gt;split&lt;/code&gt; will return characters, not just bytes, and &lt;code&gt;lc&lt;/code&gt; will intelligently use locales.  &lt;code&gt;ord&lt;/code&gt; is not quite as magically smart. &lt;a href="https://perldoc.perl.org/Unicode::Collate"&gt;Unicode::Collate&lt;/a&gt; is the module we need to do a least-effort attempt to handle a wider range than simple ASCII.  Use the &lt;code&gt;state&lt;/code&gt; feature to initialize a collator object just once, and replace the &lt;code&gt;ord&lt;/code&gt; comparison with a smarter method from the module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;isOrdered&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;word&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Unicode::&lt;/span&gt;&lt;span class="nv"&gt;Collate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$Collator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Unicode::&lt;/span&gt;&lt;span class="nv"&gt;Collate&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@char&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="nv"&gt;@char&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$Collator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="ow"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete solution to the task is on &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-215/bob-lied/perl/ch-1.pl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 2: Number Placement
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are given a list of numbers having just 0 and 1.
You are also given placement count (&amp;gt;=1).

Write a script to find out if it is possible to replace 0
with 1 in the given list. The only condition is that you
can only replace when there is no 1 on either side.
Print 1 if it is possible otherwise 0.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  
  
  Example
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Input: @numbers = (1,0,0,0,0,0,0,0,1), $count = 3&lt;br&gt;
Output: 1&lt;br&gt;
&lt;em&gt;It is possible to place 3 ones into the sequence like this: (1,0,&lt;strong&gt;1&lt;/strong&gt;,0,&lt;strong&gt;1&lt;/strong&gt;,0,&lt;strong&gt;1&lt;/strong&gt;,0,1)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tackling this problem by brute force will bog down in testing for boundary conditions, but there's an insight that makes it almost trivial:  what if we had three consecutive values in hand? Then we could see if they are all zeroes and replace the middle one.&lt;/p&gt;

&lt;p&gt;Accordingly, instead of starting from the front of the array, let's jump ahead to element &lt;code&gt;$numbers[2]&lt;/code&gt; and look backward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;numberPlacement&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="c1"&gt;#* ; $i++ )&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nv"&gt;$count&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By starting at 2, we handle the special cases of arrays less than 3 long.  Counting down with &lt;code&gt;$count&lt;/code&gt; and using it in the for-loop condition gives us a concise test for success at the end.  Perl gives us the last index of the array (&lt;code&gt;$list-&amp;gt;$#*&lt;/code&gt;), which makes a concise loop termination condition (and a good reason to look back instead of forward).&lt;/p&gt;

&lt;p&gt;One thing we might consider here is that we are modifying the original array.  If the problem requires us to answer the question without actually doing the operation, we could operate on a copy of the numbers list instead.&lt;/p&gt;

&lt;p&gt;This solution would look similar in C, Java, or really any language with ALGOL ancestry.  It's a strength of Perl that it uses recognizable constructs from other languages to make it accessible to new learners.  But of course, Perl is its own language and learning by analogy has its pitfalls.&lt;/p&gt;

&lt;p&gt;The problem says the input list consists only of 1s and 0s.  We should probably validate that, especially if taking input from the command line.  Validation is another common thing that Perl does well.  We can use a regular expression applied to each argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;usage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Usage: $0 -c COUNT [1|0]...&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@ARGV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="bp"&gt;STDERR&lt;/span&gt; &lt;span class="nv"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;@list&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="sr"&gt;/^[01]$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nv"&gt;@list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In learning natural languages, we speak of "false friends" -- words that look recognizable, but actually mean something completely different.  For instance, an English speaker might look at the Spanish word "embarrazada" and think "embarrassed."  Unfortunately, the word's primary meaning is "pregnant".  Hilarity ensues.&lt;/p&gt;

&lt;p&gt;I've used &lt;code&gt;do&lt;/code&gt; here because I want to execute two statements in case the validation fails. The &lt;code&gt;do&lt;/code&gt; statement in Perl is a false friend to C and Java programmers.  In those languages, it introduces a loop that will be executed at least once, because the condition for the &lt;code&gt;while&lt;/code&gt; loop is evaluated at the end.  In Perl, &lt;code&gt;do&lt;/code&gt; just encapsulates a group of statements.  It &lt;em&gt;may&lt;/em&gt; be followed by a &lt;code&gt;while&lt;/code&gt; clause, but it can also be used anywhere that a code block is useful instead of a simple expression. And if &lt;code&gt;do&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; followed by &lt;code&gt;while&lt;/code&gt;, hilarity ensues.  The &lt;code&gt;while&lt;/code&gt; condition is evaluated first, just like in an ordinary while loop.&lt;/p&gt;

&lt;p&gt;The complete solution to the task is on &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-215/bob-lied/perl/ch-2.pl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-215-odd-one-out-number-placement-2cc9</id>
    <published>2023-05-03T15:14:22Z</published>
    <updated>2023-05-03T15:14:22Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="pwc"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/05e20b67a8c9b144a80337d9478ec0cb9a5b2374</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/05e20b67a8c9b144a80337d9478ec0cb9a5b2374"/>
    <title>
        autodoc.pl: strftime format functions can use short names
    </title>
    <updated>2023-05-03T15:14:21Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/106911?s=30&amp;v=4"/>
    <author>
      <name>khwilliamson</name>
      <uri>https://github.com/khwilliamson</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;autodoc.pl: strftime format functions can use short names

It was saying you had to use the Perl_foo(aTHX_ ...) form, which isn&amp;#39;t
true.&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <author>
      <name>/u/kodridrocl</name>
      <uri>https://www.reddit.com/user/kodridrocl</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Is there a one liner for doing something as such:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$var = methodThatMayReturnSomething(); return $var if $var; #otherwise continue with code &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/kodridrocl"&gt; /u/kodridrocl &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/136gl8u/what_is_the_one_liner_for_returning_a_variable/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/136gl8u/what_is_the_one_liner_for_returning_a_variable/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <id>t3_136gl8u</id>
    <link href="https://www.reddit.com/r/perl/comments/136gl8u/what_is_the_one_liner_for_returning_a_variable/"/>
    <updated>2023-05-03T10:25:54+00:00</updated>
    <published>2023-05-03T10:25:54+00:00</published>
    <title>What is the one liner for returning a variable only if it was set by the calling function?</title>
  </entry>
  <entry>
    <title>Posterior Predictive</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/05/03/posterior-predictive/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>A note about <a href="https://youtu.be/R1vcdhPBlXA?list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus&amp;t=3841">this video section</a> on Posterior Predictive.</p>
</blockquote>

<p>I’m looking at the lectures in <a href="https://www.youtube.com/playlist?list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus">Statistical Rethinking 2023</a> by
<a href="https://www.youtube.com/@rmcelreath">Richard McElreath</a> and I was hit by <a href="https://youtu.be/R1vcdhPBlXA?list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus&amp;t=3841">this video section</a>.</p>

<p>Initially, I could not make heads or tails with it. I mean, the process
was clear <em>enough</em> after viewing it some three-four times, but <em>why</em> was
too above my head.</p>

<p>So I headed to <a href="https://xcelab.net/rm/statistical-rethinking/">the book</a> and to <a href="https://www.youtube.com/watch?v=guTdrfycW2Q&amp;t=3443s">the previous version of the
section</a> (from 2022) and ideas started forming in my head… I hope I
got them right and my dear future me will be able to remeber that I’m
writing them here.</p>

<ol>
  <li>
    <p>This is an <em>example</em>. The basic question is “how about predicting the
future if we want to draw 9 more values?”. There’s really nothing
special in the number 9, <em>but</em> the interesting thing is that we put the
Posterior distribution (which is about the water proportion $p$) into a
prediction about <em>something different although related</em>, i.e. how many
more <em>water</em>s we can expect if we want to do 9 more draws. Put in
another way: the $x$ axis of the Posterior distribution is $p$, the $x$
axis of the Posterior Predictive in this example is <em>number of Ws</em>.</p>
  </li>
  <li>
    <p>The Posterior Predictive might have been about something else, even
for the same Posterior distribution. E.g. about the number of land
draws. Or about the number of water draws in a run of 20. So, again,
it’s an example.</p>
  </li>
  <li>
    <p>The whole point of doing all the draws and accumulations is to remind
the user that <em>distributions matter</em>. Summarizing them with very few
numbers can be useful, but very often misleading. So even in the
predictions, let’s build a distribution and get a real feel for the
simulated stuff.</p>
  </li>
  <li>
    <p>Doing the calculation of the Posterior Predictive <em>transfers the
uncertainty in the Posterior on to the Prediction</em>. Which also means: if
we have a very tight Posterior, we will get a tight Posterior
Predictive. If we have a spread Posterior, we will get a spread
Posterior Predictive. So it’s <em>important</em> that we have a tool that
allows us to do the <em>transfer</em> from the former to the latter.</p>
  </li>
</ol>

<p>And now… that’s all I understood and I want to write about it. Cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/05/03/posterior-predictive/</id>
    <published>2023-05-03T06:00:00+02:00</published>
    <updated>2023-05-03T06:00:00+02:00</updated>
    <category term="bayes"/>
    <category term="statistics"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <author>
      <name>/u/oalders</name>
      <uri>https://www.reddit.com/user/oalders</uri>
    </author>
    <category term="perl" label="r/perl"/>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://www.reddit.com/r/perl/comments/135tb3g/perl_toolchain_summit_the_lyon_amendment_to_the/"&gt; &lt;img src="https://external-preview.redd.it/xAwDQj_asS_L7YP3j9ZcB30hELJCgZ7CnjcRNytCgN8.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=26b526965fdcc9335de16fb87106d3b021c6849c" alt="Perl Toolchain Summit: The Lyon Amendment to the Lancaster Consensus" title="Perl Toolchain Summit: The Lyon Amendment to the Lancaster Consensus" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://www.reddit.com/user/oalders"&gt; /u/oalders &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href="https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lyon-amendment.md"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://www.reddit.com/r/perl/comments/135tb3g/perl_toolchain_summit_the_lyon_amendment_to_the/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <id>t3_135tb3g</id>
    <media:thumbnail url="https://external-preview.redd.it/xAwDQj_asS_L7YP3j9ZcB30hELJCgZ7CnjcRNytCgN8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=26b526965fdcc9335de16fb87106d3b021c6849c"/>
    <link href="https://www.reddit.com/r/perl/comments/135tb3g/perl_toolchain_summit_the_lyon_amendment_to_the/"/>
    <updated>2023-05-02T16:45:53+00:00</updated>
    <published>2023-05-02T16:45:53+00:00</published>
    <title>Perl Toolchain Summit: The Lyon Amendment to the Lancaster Consensus</title>
  </entry>
  <entry>
    <title>Reinstalling R</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/05/02/reinstalling-r/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>A few notes about reinstalling <a href="https://www.r-project.org/">R</a>.</p>
</blockquote>

<p>I’m following the excellent lectures <a href="https://www.youtube.com/playlist?list=PLDcUM9US4XdPz-KxHM4XHt7uUVGWWVSus">Statistical Rethinking 2023</a> by
<a href="https://www.youtube.com/@rmcelreath">Richard McElreath</a>. They’re just… <em>wow</em>, although I definitely have
some dust to remove (I hope the book will help along with the lectures).</p>

<p>To follow the examples and do the exercises, I decided to download and
install <a href="https://www.r-project.org/">R</a>. I’m using Windows in this period, so it’s actually
<em>re-installing</em> <a href="https://www.r-project.org/">R</a>, because I’ve used it in MacOS previously.</p>

<p>I got this so far:</p>

<ul>
  <li><a href="https://cran.mirror.garr.it/CRAN/bin/windows/base/">The base package</a>.</li>
  <li><a href="https://posit.co/download/rstudio-desktop/">RStudio</a>.</li>
  <li><a href="https://cran.r-project.org/bin/windows/Rtools/">RTools</a> (<a href="https://cran.r-project.org/bin/windows/Rtools/rtools43/rtools.html">version 4.3</a>).</li>
</ul>

<p>At this point, I headed to <a href="https://github.com/rmcelreath/rethinking/">rethinking</a>, which implied:</p>

<ul>
  <li><a href="https://mc-stan.org/users/interfaces/rstan.html">RStan</a>.</li>
  <li><a href="https://mc-stan.org/cmdstanr/">cmdstanr</a>.</li>
</ul>

<p>Here I got stuck because apparently <code class="language-plaintext highlighter-rouge">CmdStan</code> (I don’t even know what
it’s about) requires <a href="https://cran.r-project.org/bin/windows/Rtools/rtools42/rtools.html">RTools version 4.2</a>, or installing it via
<code class="language-plaintext highlighter-rouge">conda</code>. I tried:</p>

<ul>
  <li><a href="https://cran.r-project.org/bin/windows/Rtools/rtools42/rtools.html">RTools version 4.2</a>.</li>
</ul>

<p>and it seems to have worked with <a href="https://mc-stan.org/cmdstanr/">the instructions</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
install_cmdstan(cores = 2)
</code></pre></div></div>

<p>Hopefully, support for <a href="https://cran.r-project.org/bin/windows/Rtools/rtools43/rtools.html">RTools version 4.3</a> will be added soon,
but in the meantime… Now on with:</p>

<ul>
  <li><a href="https://github.com/rmcelreath/rethinking/">rethinking</a>.</li>
</ul>

<p>At this point, as strange as it might seem… we’re done!</p>

<p>Stay safe and cheers!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/05/02/reinstalling-r/</id>
    <published>2023-05-02T06:00:00+02:00</published>
    <updated>2023-05-02T06:00:00+02:00</updated>
    <category term="R"/>
    <category term="statistics"/>
  </entry>
  <entry xmlns:media="http://search.yahoo.com/mrss/">
    <id>tag:github.com,2008:Grit::Commit/6bbe21a508a82ef4a3849bd69a435b3cf8d5bf40</id>
    <link type="text/html" rel="alternate" href="https://github.com/Perl/perl5/commit/6bbe21a508a82ef4a3849bd69a435b3cf8d5bf40"/>
    <title>
        Still cleaning up Y2K residue
    </title>
    <updated>2023-05-01T13:15:42Z</updated>
    <media:thumbnail height="30" width="30" url="https://avatars.githubusercontent.com/u/1230959?s=30&amp;v=4"/>
    <author>
      <name>jidanni</name>
      <uri>https://github.com/jidanni</uri>
    </author>
    <content type="html">
      &lt;pre style='white-space:pre-wrap;width:81ex'&gt;Still cleaning up Y2K residue

Else... you&amp;#39;ll get something recognizable back last century (e.g., 99 for 1999) , but what currently (123) looks more like https://en.wikipedia.org/wiki/Republic_of_China_calendar (112) than anything anyone else on the planet would understand!

Also, my correction ensures the man page will still be correct after the year 9999!&lt;/pre&gt;
    </content>
  </entry>
  <entry>
    <title>The Perl Toolchain Summit 2023</title>
    <link rel="alternate" href="https://blogs.perl.org/users/paul_johnson/2023/04/the-perl-toolchain-summit-2023.html"/>
    <id>tag:blogs.perl.org,2023:/users/paul_johnson//528.11086</id>
    <published>2023-05-01T03:56:39Z</published>
    <updated>2023-05-01T12:37:14Z</updated>
    <author>
        <name>Paul Johnson</name>
        <uri>http://www.pjcj.net</uri>
    </author>
    <category term="pts2023" label="PTS2023" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/paul_johnson/">
        <![CDATA[<p>After a break of four years, it has been my privilege to attend the <a href="https://perltoolchainsummit.org/pts2023/">13th Perl Toolchain Summit</a> (née Perl QA Hackathon).  This is the third time the summit has been held in Lyon and the tenth summit I have been able to attend.  PTS is a really important event in the Perl calendar where those working on the Perl toolchain and in Perl QA get to meet together for four days of discussions, decisions on the future of Perl, and hacking.</p>

<p>Arriving late on Wednesday evening, I had an overfull list of things I wanted to talk to people about and work I wanted to do.  In the end I didn't even get half way though my list, but that was expected.</p>

<p>I spent much of Thursday just getting things up and running again.  It turns out that spending four years barely keeping a <a href="http://cpancover.com/latest/index.html">project</a> alive leads to a fair amount of bitrot.  So I updated servers and software and keys and did all sort of unglamorous stuff that I had just been putting off.</p>

<p>One thing I had thought was urgent was finding new hosting for <a href="http://cpancover.com/latest/index.html">cpancover</a>.  So I discussed this with the nice metacpan folk.  They're in the process of worrying about all this sort of stuff and, since the requirements for cpancover have turned out to be less urgent than they initially seemed, I'm just going to let the metacpan folk do their stuff.  I'll prepare cpancover and then, hopefully, when we're all ready, just piggyback on their hard work.</p>

<p>Almost since the start, cpancover has generated coverage data in containers, for security, to constrain resources and for ease.  In order to move to new infrastructure it will be easiest if the rest of cpancover is containerised too.  I didn't get a chance to work on this during the summit, but this is now high on the priority list.</p>

<p>Devel::Cover has a very close relationship with the perl core.  Most of the logic for collecting coverage data is written in XS (C code which calls perl internal functions).  This makes it rather susceptible to changes in the perl core.  Perl has an annual release schedule and the 5.38.0 release is imminent.  Fortunately, PTS is scheduled for shortly before the release which gives me the opportunity to make any changes necessary in Devel::Cover to account for the updates in the new release.  On Friday I made a release of Devel::Cover which passes all its tests and so will allow people to use it with 5.38.0.  But some of the behaviour has changed due to changes in perl's optree.  During the rest of the summit I was able to restore the full functionality and make another release which won't artificially reduce coverage numbers.  In this I was greatly helped by other summit attendees who were able to point me in the right direction or just directly tell me the changes I needed to make based on their knowledge of the core.</p>

<p>This is one of the major benefits of PTS.  When there are problems to be solved, people who can help are often sitting just a few feet away and are ready to assist.</p>

<p>One of the discussions held during PTS was about how far back the toolchain and other tools should continue working.  Based on this, and the current minimum versions of Devel::Cover dependencies, I raised the minimum perl version supported by Devel::Cover from 5.10 to 5.12.  The toolchain is currently targeting 5.16 but I don't need to move there yet.</p>

<p>During the summit I also merged in all the outstanding PRs, and worked on a number of open tickets.  One particularly interesting ticket related to uncoverable code which gets executed.  Devel::Cover marks such code as in error, which reduces the coverage figures.  But it turns out there are legitimate use cases where this is unwanted.  So I added an option <code>ignore_covered_err</code> which can be applied globally or per uncoverable directive.  This option will ensure that covered code never generates an error in the coverage.</p>

<p>Beyond the technical value of the summit, the majority of the attendees are regulars and it was lovely to see old friends again, to chat and catch up, as well as to meet the new attendees.  I'm grateful for the <a href="https://blogs.perl.org/users/book/2023/02/the-perl-toolchain-summit-2023-has-a-covid-policy.html">COVID policy</a> the organisers put in place which allowed me to safely attend, and for the willingness of the attendees to abide by it.  And a special thank-you goes out to the organisers who did a magnificent job despite not having the time to do so, and to all the sponsors, without whom the whole summit would not have been possible.</p>

<p><a href="https://www.booking.com">Booking.com</a>,
<a href="https://deriv.com">Deriv</a>,
<a href="https://www.grantstreet.com">Grant Street Group</a>,
<a href="https://www.fastmail.com">FastMail</a>,
<a href="https://cpanel.com">cPanel</a>,
<a href="https://perl.careers/">Perl Careers</a>,
<a href="https://www.maxmind.com/en/home">MaxMind</a>,
<a href="https://fastly.com">Fastly Inc.</a>,
<a href="https://perlmaven.com">Perl Maven</a>,
<a href="https://opencagedata.com">OpenCage</a>,
<a href="https://www.perl-services.de">Perl Services</a>,
<a href="https://www.oetiker.ch">Oetiker+Partner</a>,
<a href="https://www.procura.nl">Procura</a>.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly #614 - Why not Perl?</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-weekly-614-why-not-perl-cng" type="text/html"/>
    <content type="html">&lt;p&gt;Originally published at &lt;a href="https://perlweekly.com/archive/614.html"&gt;Perl Weekly 614&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;Few days ago, I found this article, &lt;a href="https://two-wrongs.com/why-perl"&gt;Why Perl?&lt;/a&gt; shared on Facebook. To be honest, there was nothing new in the article, same old bits discussed. Depending on who you ask the question, the chance you might get crispy answer. Well here we have &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/29/why-perl"&gt;one&lt;/a&gt; by &lt;strong&gt;Flavio Poletti&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In my career of &lt;strong&gt;over 25&lt;/strong&gt; years, I have been part of team building robust application using &lt;strong&gt;Perl&lt;/strong&gt; in the nearly every domain under the sun. At my current work place, I got the opportunity to work on a really huge system mostly built using &lt;strong&gt;Perl&lt;/strong&gt;. Having said, I do agree that not many people talk about the power of &lt;strong&gt;Perl&lt;/strong&gt;. We should all take the collective responsibility and make sure we don't miss a single opportunity to promote &lt;strong&gt;Perl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Did you know that &lt;strong&gt;Perl Toolchain Summit 2023&lt;/strong&gt; is back?&lt;/p&gt;

&lt;p&gt;Altough I am not as active on social platforms as before, I hardly seen any news about it. I just happen to see some activities on &lt;strong&gt;GitHub&lt;/strong&gt; by a friend of mine and realised the big event is back after a gap of &lt;strong&gt;4 years&lt;/strong&gt;. One of the participant, &lt;strong&gt;Paul Johnson&lt;/strong&gt; already shared the &lt;a href="https://blogs.perl.org/users/paul_johnson/2023/04/the-perl-toolchain-summit-2023.html"&gt;event report&lt;/a&gt; if you are interested. I am hoping few more in coming days by other participants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perl&lt;/strong&gt; is rarely discussed in the field of &lt;strong&gt;Artificial Intelligence (AI)&lt;/strong&gt;, right?&lt;/p&gt;

&lt;p&gt;Now we have a project, &lt;strong&gt;PerlGPT&lt;/strong&gt; supported by &lt;a href="https://news.perlfoundation.org/post/perlgpt"&gt;The Perl Foundation&lt;/a&gt;. We should all promote the project and help in any possible ways.&lt;/p&gt;

&lt;p&gt;Similarly there was another big news about latest release of &lt;a href="https://www.reddit.com/r/perl/comments/1344vs5/pdl_2083_released_and_updates_from_a_year_of"&gt;PDL 2.083&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last but not least, in few weeks time we are going to have a much awaiting release of &lt;a href="https://github.com/Perl/perl5/blob/275f4e511457b9578602fc7a19a23cde36fe66bb/Porting/release_schedule.pod?plain=1#L54"&gt;Perl v5.38&lt;/a&gt;. I am confident it would silence the negative voices. Till then enjoy the rest of the newsletter.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
  Your editor: Mohammad S. Anwar.&lt;/p&gt;

&lt;h2&gt;
  
  
  Announcements
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-105.html"&gt;This Week in PSC (105)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The Perl Steering Council met up in person in Lyon for the Perl Toolchain Summit 2023.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/lordfeck/rsru"&gt;RSRU Release 3.2&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A static catalogue website and blog builder written in Perl.&lt;/p&gt;




&lt;h2&gt;
  
  
  Articles
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/paul_johnson/2023/04/the-perl-toolchain-summit-2023.html"&gt;The Perl Toolchain Summit 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The first event report made public by Paul Johnson.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blogs.perl.org/users/mikko_koivunalho/2023/04/assert-your-environment.html"&gt;Dot Your Environment&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Find out more about Env::Dot ...&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/29/why-perl/"&gt;Why Perl?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Find the answer to the most common question ....&lt;/p&gt;




&lt;h2&gt;
  
  
  Web
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/24/tracciatore-starting-point/"&gt;Tracciatore - starting point&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Work in progress on data collection API.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/25/will-probably-resume-latex/"&gt;I'll probably resume LaTeX&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/26/latex-in-alpine/"&gt;LaTeX in Alpine Linux&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  The Weekly Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/"&gt;The Weekly Challenge&lt;/a&gt; by &lt;a href="http://www.manwar.org/"&gt;Mohammad Anwar&lt;/a&gt; will help you step out of your comfort-zone. You can even win prize money of $50 Amazon voucher by participating in the weekly challenge. We pick one winner at the end of the month from among all of the contributors during the month. The monthly prize is kindly sponsored by Peter Sergeant of &lt;a href="https://perl.careers/"&gt;PerlCareers&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-215"&gt;The Weekly Challenge - 215&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Welcome to a new week with a couple of fun tasks: "Odd one Out" and "Number Placement". If you are new to the weekly challenge, why not join us and have fun every week? For more information, please read the &lt;a href="https://theweeklychallenge.org/faq"&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/recap-challenge-214"&gt;RECAP - The Weekly Challenge - 214&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Rank Score" and "Collect Points" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/meet-the-champion-2023-02"&gt;Meet The Champion - Solathian&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Find out more about the champion Solathian.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://theweeklychallenge.org/blog/meet-the-champion-2023-03"&gt;Meet The Champion - David Ferrone&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Find out more about the champion David Ferrone.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://raku-musings.com/bagging-scorepoints.html"&gt;Bagging Scorepoints&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice use of Bag and cool comparison with regular hash. Something new for everyone as always. Keep it up great work.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/oldtechaa/perl-weekly-challenge-214-rank-score-3n2m"&gt;Perl Weekly Challenge #214 - Rank Score&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Love the narratives, plain and simple. Every bit explained in details. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://dev.to/boblied/pwc-214-1-rank-score-2-collect-points-3-4-profit-4adh"&gt;PWC 214 (1) Rank Score, (2) Collect Points, (3) ..., (4) Profit!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Cool little introduction to indirection but in-depth discussion. Worth checking out, thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/27/pwc214-rank-score/"&gt;PWC214 - Rank Score&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;No question this week, just the solutions in Perl and Raku. Nice attempt, keep it up.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.polettix.it/ETOOBUSY/2023/04/28/pwc214-collect-points/"&gt;PWC214 - Collect Points&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Brute force to get the job done this week. A rather long winded solution. Thanks for sharing.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-214/james-smith#readme"&gt;Another one rides the bus!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You are never short of solutions. This week too, we got simple and complext solutions to the task. You pick your favourite.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://wlmb.github.io/2023/04/24/PWC214/"&gt;Perl Weekly Challenge 214&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Using sort and map can be deadly combination as shown by Luis. Thanks for sharing knowledge with us.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://ccgi.campbellsmiths.force9.co.uk/challenge/214"&gt;All about points&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Peter made the task appears simpler and easy to follow by his simple discussion. Bonus you get to play with his solution. Well done.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://blog.firedrake.org/archive/2023/04/The_Weekly_Challenge_214__A_Rank_Collection.html"&gt;A Rank Collection&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nice comparison and discussion of different languages. Too good to miss it, highly recommended.&lt;/p&gt;




&lt;h2&gt;
  
  
  Rakudo
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://rakudoweekly.blog/2023/04/24/2023-17-releaseperiod/"&gt;2023.17 ReleasePeriod&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  
  
  Weekly collections
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="http://niceperl.blogspot.com/"&gt;NICEPERL's lists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/cdxlii-21-great-cpan-modules-released.html"&gt;Great CPAN modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2023/04/dliv-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  
  
  Events
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://tprc2023.sched.com/"&gt;The Perl and Raku Conference 2023&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;July 11-13, 2023, Toronto, Canada&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://perlkohacon.fi/"&gt;Perl and Koha&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;August 14-18, 2023, Helsinki, Finland&lt;/p&gt;




&lt;h2&gt;
  
  
  &lt;a href="https://perl.careers/?utm_source=perlweekly&amp;amp;utm_campaign=perlweekly&amp;amp;utm_medium=perlweekly"&gt;Perl Jobs by Perl Careers&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/exo"&gt;Senior Perl Developer with Cross-Trained Chops. UK Remote Perl Role&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The best senior developers know that variety is the spice of life. Sure, you’ve got Perl chops for days, but that’s not all you can do — and that’s why our client wants to meet you. They’re looking for senior Perl developers, Node engineers, and those with mighty Python and SQL skills to lead their team.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/suv"&gt;Adventure! Senior Perl roles in Malaysia, Dubai and Malta&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Clever folks know that if you’re lucky, you can earn a living and have an adventure at the same time. Enter our international client: online trading is their game, and they’re looking for Perl people with passion, drive, and an appreciation for new experiences.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;a href="https://job.perl.careers/7s4"&gt;C, C++, and Perl Software Engineers, Let’s Keep the Internet Safe&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A leading digital safeguarding solutions provider is looking for a software engineer experienced in C, C++, or Perl. You’ll have strong Linux knowledge and a methodical approach to problem solving that you use to investigate, replicate, and address customer issues. Your keen understanding of firewalls, proxies, Iptables, Squid, VPNs/IPSec and HTTP(S) will be key to your success at this company.&lt;/p&gt;




&lt;p&gt;You joined the Perl Weekly to get weekly e-mails about the Perl programming language and related topics.&lt;/p&gt;

&lt;p&gt;Want to see more? See the &lt;a href="https://perlweekly.com/archive/"&gt;archives&lt;/a&gt; of all the issues.&lt;/p&gt;

&lt;p&gt;Not yet subscribed to the newsletter? &lt;a href="https://perlweekly.com/subscribe.html"&gt;Join us free of charge&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;(C) Copyright &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt;&lt;br&gt;
The articles are copyright the respective authors.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-weekly-614-why-not-perl-cng</id>
    <published>2023-05-01T04:48:32Z</published>
    <updated>2023-05-01T04:48:32Z</updated>
    <category term="perl"/>
    <category term="news"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Romeo - interface consistency</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2023/05/01/romeo-interface-consistency/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><strong>TL;DR</strong></p>

<blockquote>
  <p>Some thoughts about interface consistency.</p>
</blockquote>

<p>Most commands in [Romeo][] accept inputs and provide outputs. Most times,
inputs come from files, but from time to time they might come directly from
the command line.</p>

<p>One such example is the sub-command for validating the <em>Codice Fiscale</em>, an
identification code that is used in Italy for several “official” reasons.</p>

<p>I initially designed the interface for the whole set of commands like this:</p>

<ul>
  <li>output is specified with option <code class="language-plaintext highlighter-rouge">-o</code>/<code class="language-plaintext highlighter-rouge">--output</code></li>
  <li>inputs are straight command-line arguments (i.e. those without a switch).</li>
</ul>

<p>This works fine for most “read many and transform” commands, but it’s
sub-optimal for stuff like the <em>Codice Fiscale</em> validation because it’s way
easier and intuitive to write this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>romeo cf bcadfe70a01h501j
</code></pre></div></div>

<p>instead of any of these:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># explicit command-line switch
romeo cf -c bcadfe70a01h501j

# read standard input
echo bcadfe70a01h501j | romeo cf

# shell redirection
romeo cf &lt;( echo bcadfe70a01h501j )
</code></pre></div></div>

<p>Plus, having a difference in how inputs and outputs are handled always made
me uneasy in other scenarios, like ImageMagick or ffmpeg. Should I put <code class="language-plaintext highlighter-rouge">-i</code>
for inputs or <code class="language-plaintext highlighter-rouge">-o</code> for outputs? I always have to look how to do it.</p>

<p>So, I eventually switched to using explicit command-line switches for inputs
and outputs, at the expense of providing multiple inputs with multiple
occurrences of <code class="language-plaintext highlighter-rouge">-i</code>/<code class="language-plaintext highlighter-rouge">--input</code>. Which is totally fine, I think.</p>

<p>Cheers and… stay safe!</p>

</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2023/05/01/romeo-interface-consistency/</id>
    <published>2023-05-01T06:00:00+02:00</published>
    <updated>2023-05-01T06:00:00+02:00</updated>
    <category term="romeo"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2023</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2023/05/01/list-of-new-cpan-distributions-apr-2023/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>abstract</th>
<th>date</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Testing-BadPackages-WithRootdir">Acme-Testing-BadPackages-WithRootdir</a></td>
<td><a href="https://metacpan.org/author/GARU">GARU</a></td>
<td/>
<td>2023-04-27T14:30:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Testing-BadPackages-WithoutRootdir">Acme-Testing-BadPackages-WithoutRootdir</a></td>
<td><a href="https://metacpan.org/author/GARU">GARU</a></td>
<td/>
<td>2023-04-27T14:28:36</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AcmeTestingBadPackagesWithoutRootdir">AcmeTestingBadPackagesWithoutRootdir</a></td>
<td><a href="https://metacpan.org/author/GARU">GARU</a></td>
<td/>
<td>2023-04-28T07:15:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-FluentBit">Alien-FluentBit</a></td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>libfluent-bit.so and fluent-bit commandline tool</td>
<td>2023-04-20T09:20:35</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ActivityPubClient">App-ActivityPubClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-04-04T15:54:04</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ApClient">App-ApClient</a></td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>CLI-based client / toolbox for ActivityPub Client-to-Server</td>
<td>2023-04-04T15:28:44</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ArduinoBuilder">App-ArduinoBuilder</a></td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>Build system for Arduino programs</td>
<td>2023-04-24T22:08:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Prove-Plugin-KohaBootstrap">App-Prove-Plugin-KohaBootstrap</a></td>
<td><a href="https://metacpan.org/author/JAJM">JAJM</a></td>
<td>prove plugin to run Koha tests on a separate database</td>
<td>2023-04-04T08:25:47</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PythonToPerl">App-PythonToPerl</a></td>
<td><a href="https://metacpan.org/author/WBRASWELL">WBRASWELL</a></td>
<td>translates Python source code into Perl source code</td>
<td>2023-04-10T04:58:20</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Test-DWG-LibreDWG-DwgRead">App-Test-DWG-LibreDWG-DwgRead</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Application to test DWG files by LibreDWG dwgread command.</td>
<td>2023-04-26T21:07:51</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Wikidata-Print">App-Wikidata-Print</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Command line tool for print Wikidata item.</td>
<td>2023-04-28T18:37:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-diff_spreadsheets">App-diff_spreadsheets</a></td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>Diff spreadsheets (or CSVs) showing changed cells</td>
<td>2023-04-05T07:09:10</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-diroctopus">App-diroctopus</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>shows the longest directory branch paths (most apart each other) of a given directory.</td>
<td>2023-04-06T04:39:16</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirstrata">App-dirstrata</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>「何階層潜った所から最大何階層下までディレクトリを持つディレクトリが何個存在するか」を三角行列状に示す。</td>
<td>2023-04-06T15:52:46</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-dirstrata1">App-dirstrata1</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>Shows the longest directory branch paths (most apart each other) of a given directory.</td>
<td>2023-04-07T08:24:58</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-rdapper">App-rdapper</a></td>
<td><a href="https://metacpan.org/author/GBROWN">GBROWN</a></td>
<td>A simple console-based RDAP client.</td>
<td>2023-04-18T16:08:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Sort-Key-Top">Bencher-Scenario-Sort-Key-Top</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Sort::Key::Top</td>
<td>2023-04-02T00:05:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-String-Interpolate">Bencher-Scenario-String-Interpolate</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark string interpolation</td>
<td>2023-04-16T00:05:46</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-String-PodQuote">Bencher-Scenario-String-PodQuote</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark String::PodQuote</td>
<td>2023-04-09T00:05:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-String-SimpleEscape">Bencher-Scenario-String-SimpleEscape</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark String::SimpleEscape</td>
<td>2023-04-23T00:05:52</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-Text-sprintfn">Bencher-Scenario-Text-sprintfn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>Benchmark Text::sprintfn vs sprintf()</td>
<td>2023-04-30T00:05:13</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cosmoloj-UnitSimple">Cosmoloj-UnitSimple</a></td>
<td><a href="https://metacpan.org/author/COSMOLOJ">COSMOLOJ</a></td>
<td>representation of an abstract unit</td>
<td>2023-04-25T21:33:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Argon2-AES">Crypt-Passphrase-Argon2-AES</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A peppered AES-encrypted Argon2 encoder for Crypt::Passphrase</td>
<td>2023-04-07T14:31:12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Argon2-HSM">Crypt-Passphrase-Argon2-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>HSM encrypted Argon2 hashes for Crypt::Passphrase</td>
<td>2023-04-21T14:38:19</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-HSM">Crypt-Passphrase-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A hasher using hardware for Crypt::Passphrase</td>
<td>2023-04-19T23:13:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Passphrase-Pepper-HSM">Crypt-Passphrase-Pepper-HSM</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>A pepper-wrapper using hardware for Crypt::Passphrase</td>
<td>2023-04-07T12:41:22</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Password-zxcvbn-AuthorTools">Data-Password-zxcvbn-AuthorTools</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>collection of tools to simplify building zxcvbn distributions</td>
<td>2023-04-03T14:04:26</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Password-zxcvbn-French">Data-Password-zxcvbn-French</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>Dropbox's password estimation logic, with French defaults</td>
<td>2023-04-03T14:11:55</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Password-zxcvbn-German">Data-Password-zxcvbn-German</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>Dropbox's password estimation logic, with German defaults</td>
<td>2023-04-03T14:41:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Ref-JSON">Data-Ref-JSON</a></td>
<td><a href="https://metacpan.org/author/JKSTILL">JKSTILL</a></td>
<td>Walk a referenced arbitrary data structure and provide the reference to access values</td>
<td>2023-04-13T06:10:34</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Maple">Evo-Maple</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>Perl extension for a numerical analysis package with Evolutionary Computation somewhat parsed</td>
<td>2023-04-06T09:29:32</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Evo-Parser">Evo-Parser</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>Perl extension for Parsing Systems of Math, Equations and stuff.</td>
<td>2023-04-05T10:51:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-MagicPP">File-MagicPP</a></td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td/>
<td>2023-04-25T14:05:42</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-MultiTemp">File-MultiTemp</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>manage a hash of temporary files</td>
<td>2023-04-08T11:09:11</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Fluent-LibFluentBit">Fluent-LibFluentBit</a></td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>Directly use libfluent-bit.so for high performance logging</td>
<td>2023-04-20T09:23:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-SIMD">JSON-SIMD</a></td>
<td><a href="https://metacpan.org/author/PJUHASZ">PJUHASZ</a></td>
<td>JSON serialising/deserialising, done correctly and faster</td>
<td>2023-04-17T17:13:41</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JavonetPerlSdk">JavonetPerlSdk</a></td>
<td><a href="https://metacpan.org/author/JAVONET">JAVONET</a></td>
<td>Javonet SDK for Perl</td>
<td>2023-04-17T13:43:05</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Log-Any-Progress">Log-Any-Progress</a></td>
<td><a href="https://metacpan.org/author/LARRYL">LARRYL</a></td>
<td>log incremental progress using Log::Any</td>
<td>2023-04-02T20:16:33</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Permutation">Math-Permutation</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>pure Perl implementation of functions related to the permutations</td>
<td>2023-04-06T13:36:47</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MooX-Role-EventEmitter">MooX-Role-EventEmitter</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>Event emitter role</td>
<td>2023-04-16T18:07:09</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Museum-MetropolitanMuseumArt">Museum-MetropolitanMuseumArt</a></td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>A simple interface to the Metropolitan Museum of Art's API</td>
<td>2023-04-24T22:04:02</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenAPI-Client-OpenAI">OpenAPI-Client-OpenAI</a></td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>A client for the OpenAI API</td>
<td>2023-04-11T16:57:40</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OpenAPI-Client-Pinecone">OpenAPI-Client-Pinecone</a></td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>A client for the Pinecone API</td>
<td>2023-04-11T10:54:56</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Types">Perl-Types</a></td>
<td><a href="https://metacpan.org/author/WBRASWELL">WBRASWELL</a></td>
<td>enable Perl data types</td>
<td>2023-04-10T03:42:24</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-CipherMailHeaders">RT-Extension-CipherMailHeaders</a></td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>RT-Extension-CipherMailHeaders Extension</td>
<td>2023-04-18T11:17:50</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SMS-Send-CZ-Smseagle">SMS-Send-CZ-Smseagle</a></td>
<td><a href="https://metacpan.org/author/RADIUSCZ">RADIUSCZ</a></td>
<td>SMS::Send driver for SMSEagle – Czech Republic </td>
<td>2023-04-20T15:02:14</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Resource-Libpng">SPVM-Resource-Libpng</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>The Resource of The libpng Library</td>
<td>2023-04-05T01:41:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Future-IO-Impl">Test-Future-IO-Impl</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>acceptance tests for Future::IO implementations</td>
<td>2023-04-25T12:01:17</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TimeZone-TimeZoneDB">TimeZone-TimeZoneDB</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>Interface to <a href="https://timezonedb.com" rel="nofollow">https://timezonedb.com</a> for looking up Timezone data</td>
<td>2023-04-07T15:43:00</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Unit-Simple">Unit-Simple</a></td>
<td><a href="https://metacpan.org/author/COSMOLOJ">COSMOLOJ</a></td>
<td>representation of an unit defined by itself</td>
<td>2023-04-25T20:45:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wikibase-Cache">Wikibase-Cache</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Wikibase cache.</td>
<td>2023-04-05T21:27:59</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wikibase-Cache-Backend">Wikibase-Cache-Backend</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Wikibase cache backend abstract class.</td>
<td>2023-04-13T07:25:06</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Wikibase-Cache-Backend-Basic">Wikibase-Cache-Backend-Basic</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>Wikibase cache backend to local static basic ids (units, common properties).</td>
<td>2023-04-05T21:32:03</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAMLStar">YAMLStar</a></td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>A cross-language, common API YAML reference framework</td>
<td>2023-04-19T13:42:21</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/jacode">jacode</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>Perl program for Japanese character code conversion</td>
<td>2023-04-15T11:23:18</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/mimedefang">mimedefang</a></td>
<td><a href="https://metacpan.org/author/GBECHIS">GBECHIS</a></td>
<td>Plugin to monitor various MIMEDefang statistics.</td>
<td>2023-04-04T09:17:43</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>56</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>33</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GARU">GARU</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/LANODAN">LANODAN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/NFERRAZ">NFERRAZ</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/WBRASWELL">WBRASWELL</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/COSMOLOJ">COSMOLOJ</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GBECHIS">GBECHIS</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/LARRYL">LARRYL</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JAJM">JAJM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/PJUHASZ">PJUHASZ</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/RADIUSCZ">RADIUSCZ</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/JAVONET">JAVONET</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/INGY">INGY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/RSHEAT">RSHEAT</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/LENDL">LENDL</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/JIMAVERA">JIMAVERA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/LSKATZ">LSKATZ</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/JKSTILL">JKSTILL</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/GBROWN">GBROWN</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author abstract date Acme-Testing-BadPackages-WithRootdir GARU 2023-04-27T14:30:03 Acme-Testing-BadPackages-WithoutRootdir GARU 2023-04-27T14:28:36 AcmeTestingBadPackagesWithoutRootdir GARU 2023-04-28T07:15:05 Alien-FluentBit NERDVANA libfluent-bit.so and fluent-bit commandline tool 2023-04-20T09:20:35 App-ActivityPubClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-04-04T15:54:04 App-ApClient LANODAN CLI-based client / toolbox for ActivityPub Client-to-Server 2023-04-04T15:28:44 App-ArduinoBuilder MATHIAS Build system for Arduino programs 2023-04-24T22:08:03 App-Prove-Plugin-KohaBootstrap JAJM prove plugin to run … <a href="https://perlancar.wordpress.com/2023/05/01/list-of-new-cpan-distributions-apr-2023/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2023</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2057</id>
    <published>2023-05-01T00:50:56Z</published>
    <updated>2023-05-01T00:50:56Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>This Week in PSC (105)</title>
    <link rel="alternate" href="https://blogs.perl.org/users/psc/2023/04/this-week-in-psc-105.html"/>
    <id>tag:blogs.perl.org,2023:/users/psc//4112.11085</id>
    <published>2023-04-30T16:54:48Z</published>
    <updated>2023-04-30T17:01:27Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="https://blogs.perl.org/users/psc/">
        <![CDATA[<p>Today, the PSC met up … <em>in person!</em>  We're all in Lyon for the Perl Toolchain Summit.</p>

<p><img alt="psc-2023-04-28.jpg" src="https://blogs.perl.org/users/psc/psc-2023-04-28.jpg" width="2048" height="1365" class="mt-image-none" style="" /></p>

<p>Meantime, although we had a very long conversation, it boils down to just a couple things:</p>

<ul>
<li>We talked a very long time (well, 45m) about GitHub issues labeled "BBC" and marking them "needs triage" (meaning: more info) or "not a release blocker" or "release blocker".  This will require more work, but we made good progress.</li>
<li>We discussed HTTP::Tiny, security, and how best to bootstrap CPAN and stay secure.  More soon.</li>
<li>We discussed Test2 in core, which is now its own thread on p5p, enjoy!</li>
</ul>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-228646925335539339</id>
    <published>2023-04-29T21:40:00.003+02:00</published>
    <updated>2023-04-29T21:40:37.729+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlii) 21 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/OLIVER/App-Netdisco-2.061001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.061001&lt;/strong&gt; on 2023-04-27, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.061000 was 29 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/OLIVER"&gt;OLIVER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ANDK/CPAN-2.35" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CPAN&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - query, download and build perl modules from CPAN sites
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.35&lt;/strong&gt; on 2023-04-27, with 38 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.34 was 1 year, 10 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ANDK"&gt;ANDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/MIK/CryptX-0.078" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.078&lt;/strong&gt; on 2023-04-28, with 49 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.077 was 8 months, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/MIK"&gt;MIK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/PJCJ/Devel-Cover-1.39" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Devel::Cover&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Code coverage metrics for Perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2023-04-28, with 100 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.38 was 10 months, 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/PJCJ"&gt;PJCJ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/MIKIHOSHI/Devel-Cover-Report-Coveralls-0.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Devel::Cover::Report::Coveralls&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - coveralls backend for Devel::Cover
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.32&lt;/strong&gt; on 2023-04-25, with 18 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.31 was 1 year, 2 months, 25 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/MIKIHOSHI"&gt;MIKIHOSHI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/SIMBABQUE/libwww-perl-6.69" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;6.69&lt;/strong&gt; on 2023-04-29, with 162 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 6.68 was 2 months, 2 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/LEONT/Module-Build-0.4234" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build and install Perl modules
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.4234&lt;/strong&gt; on 2023-04-28, with 45 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.4232 was 4 months, 20 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/LEONT/Module-Build-Tiny-0.044" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Build::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny replacement for Module::Build
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.044&lt;/strong&gt; on 2023-04-28, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.043 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/LEONT"&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/BINGOS/Module-CoreList-5.20230423" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230423&lt;/strong&gt; on 2023-04-23, with 42 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230420 was 3 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/BINGOS"&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ETHER/Module-Install-1.21" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Install&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Standalone, extensible Perl module installer
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.21&lt;/strong&gt; on 2023-04-28, with 19 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.19 was 5 years, 4 months, 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ETHER/Module-Metadata-1.000038" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::Metadata&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Gather package and POD information from perl module files
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.000038&lt;/strong&gt; on 2023-04-28, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.000037 was 3 years, 7 months, 21 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/release/SHAY/perl-5.36.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- The Perl 5 language interpreter
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.036001&lt;/strong&gt; on 2023-04-23, with 407 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.36.0 was 10 months, 26 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SHAY"&gt;SHAY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/RJBS/Perl-PrereqScanner-1.100" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Perl::PrereqScanner&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a tool to scan your Perl code for its prerequisites
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.100&lt;/strong&gt; on 2023-04-27, with 22 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.025 was 3 months, 26 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/RJBS"&gt;RJBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.971008" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.971008&lt;/strong&gt; on 2023-04-27, with 29 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.971002 was 6 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/ETHER/Sub-Name-0.27" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Sub::Name&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - (Re)name a sub
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.27&lt;/strong&gt; on 2023-04-29, with 29 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.26 was 3 years, 6 months, 24 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/ETHER"&gt;ETHER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/KUERBIS/Term-Choose-1.761" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Term::Choose&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Choose items from a list interactively.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.761&lt;/strong&gt; on 2023-04-28, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.760 was 22 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/KUERBIS"&gt;KUERBIS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/EXODIST/Test-Simple-1.302195" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test::Simple&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Basic utilities for writing tests.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.302195&lt;/strong&gt; on 2023-04-28, with 184 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.302194 was 1 month, 14 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/EXODIST/Test2-Harness-1.000152" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.000152&lt;/strong&gt; on 2023-04-29, with 14 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.000151 was 1 month, 21 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/EXODIST/Test2-Suite-0.000155" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework.
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.000155&lt;/strong&gt; on 2023-04-28, with 41 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.000150 was 1 month, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/EXODIST"&gt;EXODIST&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/SIMBABQUE/URI-5.18" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative)
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.18&lt;/strong&gt; on 2023-04-29, with 108 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.17 was 5 months, 27 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.17" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.17&lt;/strong&gt; on 2023-04-27, with 96 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.16 was 2 months, 16 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/228646925335539339/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxlii-21-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/228646925335539339"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/228646925335539339"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxlii-21-great-cpan-modules-released.html" title="(cdxlii) 21 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-530349129339638376</id>
    <published>2023-04-29T21:35:00.000+02:00</published>
    <updated>2023-04-29T21:35:09.773+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dliv) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 95&lt;/p&gt;
&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/29 19:33:29 GMT&lt;/p&gt;&lt;br/&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AsciiDB::TagFile" target="_blank"&gt;AsciiDB::TagFile&lt;/a&gt; - Tie class for a simple ASCII database&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Closure::Attributes" target="_blank"&gt;autobox::Closure::Attributes&lt;/a&gt; - closures are objects are closures&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Ceph::Rados" target="_blank"&gt;Ceph::Rados&lt;/a&gt; - Perl wrapper to librados.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Simple" target="_blank"&gt;Class::Simple&lt;/a&gt; - Simple Object-Oriented Base Class&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/EV::Hiredis" target="_blank"&gt;EV::Hiredis&lt;/a&gt; - Asynchronous redis client using hiredis and EV&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::Cluster" target="_blank"&gt;Exporter::Cluster&lt;/a&gt; - Extension for easy multiple module imports.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Exporter::NoWork" target="_blank"&gt;Exporter::NoWork&lt;/a&gt; - an easier way to export functions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Extension" target="_blank"&gt;File::Extension&lt;/a&gt; - Lookup file extensions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::MagicPP" target="_blank"&gt;File::MagicPP&lt;/a&gt; - &lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Hadoop::HDFS::Command" target="_blank"&gt;Hadoop::HDFS::Command&lt;/a&gt; - Wrappers for various hadoop hdfs cli commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Lingua::LinkParser" target="_blank"&gt;Lingua::LinkParser&lt;/a&gt; - Perl module implementing the Link Grammar Parser by Sleator, Temperley and Lafferty at CMU.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Macro::Simple" target="_blank"&gt;Macro::Simple&lt;/a&gt; - preprocessor-like macros in Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MCDB_File" target="_blank"&gt;MCDB_File&lt;/a&gt; - Perl extension for access to mcdb constant databases &lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/ModsPragma" target="_blank"&gt;ModsPragma&lt;/a&gt; - easy one-stop module shopping&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Noid" target="_blank"&gt;Noid&lt;/a&gt; - nice opaque identifier generator commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Repository::Simple" target="_blank"&gt;Repository::Simple&lt;/a&gt; - Simple heirarchical repository for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/rig" target="_blank"&gt;rig&lt;/a&gt; - Bundle up your favorite modules and imports into one call&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Secret::Simple" target="_blank"&gt;Secret::Simple&lt;/a&gt; - Secure secrets in configurations and code&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SHA256" target="_blank"&gt;SHA256&lt;/a&gt; - a module that implements the NIST SHA-256 hash&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Spreadsheet::Perl" target="_blank"&gt;Spreadsheet::Perl&lt;/a&gt; - Pure Perl implementation of a spreadsheet engine&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Contract" target="_blank"&gt;Sub::Contract&lt;/a&gt; - Pragmatic contract programming for Perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::VisualPrintf" target="_blank"&gt;Text::VisualPrintf&lt;/a&gt; - printf family functions to handle Non-ASCII characters&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Alias" target="_blank"&gt;Tie::Alias&lt;/a&gt; - create aliases in pure perl&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Comma" target="_blank"&gt;Tie::Comma&lt;/a&gt; - A simple and easy way to format numbers with commas, using a tied hash.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Coupler" target="_blank"&gt;Tie::Coupler&lt;/a&gt; - Tie based implementation of coupled scalars&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Hash::Array::CustomStorage" target="_blank"&gt;Tie::Hash::Array::CustomStorage&lt;/a&gt; - Tie array and value storage&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::OffsetArray" target="_blank"&gt;Tie::OffsetArray&lt;/a&gt; - Tie one array to another, with index offset&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Subset" target="_blank"&gt;Tie::Subset&lt;/a&gt; - Tie an array or hash to a subset of another array or hash, respectively&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::SymlinkTree" target="_blank"&gt;Tie::SymlinkTree&lt;/a&gt; - fast searches through complex perl structures/ties&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Util" target="_blank"&gt;Tie::Util&lt;/a&gt; - Utility functions for fiddling with tied variables&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Value::Object" target="_blank"&gt;Value::Object&lt;/a&gt; - Base class for minimal Value Object classes&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=274)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=65)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Nopaste" target="_blank"&gt;App::Nopaste&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Utils" target="_blank"&gt;Array::Utils&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Attean" target="_blank"&gt;Attean&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox" target="_blank"&gt;autobox&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Base64" target="_blank"&gt;autobox::Base64&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Core" target="_blank"&gt;autobox::Core&lt;/a&gt; (+1=22)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Junctions" target="_blank"&gt;autobox::Junctions&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autobox::Transform" target="_blank"&gt;autobox::Transform&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/autodie" target="_blank"&gt;autodie&lt;/a&gt; (+1=60)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=99)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Carmel" target="_blank"&gt;Carmel&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=120)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Alias" target="_blank"&gt;Data::Alias&lt;/a&gt; (+1=17)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Domain" target="_blank"&gt;Data::Domain&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Simple" target="_blank"&gt;Date::Simple&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=284)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Doit" target="_blank"&gt;Doit&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dot" target="_blank"&gt;Dot&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/FFI::Platypus" target="_blank"&gt;FFI::Platypus&lt;/a&gt; (+1=59)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ExtAttr" target="_blank"&gt;File::ExtAttr&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin::libs" target="_blank"&gt;FindBin::libs&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Lambda" target="_blank"&gt;IO::Lambda&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lazy" target="_blank"&gt;lazy&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::xi" target="_blank"&gt;lib::xi&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/match::simple" target="_blank"&gt;match::simple&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mem" target="_blank"&gt;mem&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Method::Signatures" target="_blank"&gt;Method::Signatures&lt;/a&gt; (+1=39)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=61)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Load" target="_blank"&gt;Module::Load&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SMTP::Client" target="_blank"&gt;Mojo::SMTP::Client&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=325)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/namespace::autoclean" target="_blank"&gt;namespace::autoclean&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::::RabbitMQ" target="_blank"&gt;Net::::RabbitMQ&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Hadoop::WebHDFS" target="_blank"&gt;Net::Hadoop::WebHDFS&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Subnet" target="_blank"&gt;Net::Subnet&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/NetAddr::IP" target="_blank"&gt;NetAddr::IP&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/P" target="_blank"&gt;P&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=177)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=407)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/POD2::RU" target="_blank"&gt;POD2::RU&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Reply" target="_blank"&gt;Reply&lt;/a&gt; (+1=59)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=24)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::Autobox" target="_blank"&gt;Shell::Autobox&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Simple::Accessor" target="_blank"&gt;Simple::Accessor&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=43)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/SPVM" target="_blank"&gt;SPVM&lt;/a&gt; (+1=29)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Junction" target="_blank"&gt;Syntax::Keyword::Junction&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/System::Sub" target="_blank"&gt;System::Sub&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=184)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Levenshtein::Flexible" target="_blank"&gt;Text::Levenshtein::Flexible&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ParseWords" target="_blank"&gt;Text::ParseWords&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::SaveLater" target="_blank"&gt;Tie::SaveLater&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Simple" target="_blank"&gt;Tie::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Piece" target="_blank"&gt;Time::Piece&lt;/a&gt; (+1=55)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Var::Pairs" target="_blank"&gt;Var::Pairs&lt;/a&gt; (+1=11)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Want" target="_blank"&gt;Want&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize" target="_blank"&gt;WWW::Mechanize&lt;/a&gt; (+1=96)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/XXX" target="_blank"&gt;XXX&lt;/a&gt; (+1=14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/530349129339638376/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/530349129339638376"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/530349129339638376"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliv-metacpan-weekly-report.html" title="(dliv) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>PWC 214 (1) Rank Score, (2) Collect Points, (3) ..., (4) Profit!</title>
    <link rel="alternate" href="https://dev.to/boblied/pwc-214-1-rank-score-2-collect-points-3-4-profit-4adh" type="text/html"/>
    <content type="html">&lt;p&gt;Another week, another weekly challenge. For week 214, we get to practice indirection, and an opportunity for recursion.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 1:  Rank Score
&lt;/h2&gt;

&lt;p&gt;Task 1, &lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/#TASK1"&gt;Rank Score&lt;/a&gt; is to assign medals to players in a contest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are given a list of scores (&amp;gt;=1).

Write a script to rank each score in descending order.
First three will get medals i.e. G (Gold), S (Silver) 
and B (Bronze). Rest will just get the ranking number.

Using the standard model of giving equal scores equal rank,
then advancing that number of ranks.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also given an example so that we can infer how to treat ties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: @scores = (2,5,2,1,7,5,1)
Output: (4,S,4,6,G,S,6)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to preserve the order of the players in the &lt;code&gt;@scores&lt;/code&gt; array.  We're going to need the information that the highest score (gold) is in position 5, the next two (silver) are in positions 1 and 6, and so on.&lt;/p&gt;

&lt;p&gt;It is a cliche that all problems in computer science are solved by adding a level of indirection, and that is true here. The first indirection is that we want to sort not the scores themselves, but the indexes of the scores.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;$#scores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the condition for sorting will be a comparison of the scores at that index. The sort is in descending order, so that the index of the highest score (gold) will be at the front of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;@scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;@scores&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#scores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Taking a simpler example, let's look at &lt;code&gt;@scores = (1,2,4,3,5)&lt;/code&gt;.  Our sort will give us a mapping between the index in &lt;code&gt;@scores&lt;/code&gt; and the assignment of the rank:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nv"&gt;@score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;  &lt;span class="nv"&gt;@position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;   &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#GOAL: @ranked = ( 5   4   S   B   G )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells us that the gold medal winner is at &lt;code&gt;@position[0]&lt;/code&gt;, which is index 4 in &lt;code&gt;@score&lt;/code&gt;.  Therefore, we will assign 'G' to position 4 in the ranked score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;@ranked&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;@position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;G&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have to keep track of gold, silver, and bronze as well as checking for ties, a lot of convoluted logic is going to emerge. Time for another indirection. Let's set up the possible ranks in advance.  The rankings will be 1 to the size of &lt;code&gt;@score&lt;/code&gt;, except that the first three places will be 'G', 'S', and 'B'.  Let's also set up a cursor in this ranking list, which will start at gold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sx"&gt;qw(G S B)&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will iterate over the &lt;code&gt;@position&lt;/code&gt; array.  If we find a tie, we don't move &lt;code&gt;$r&lt;/code&gt;; but if the subsequent score is different, then we can update the &lt;code&gt;$r&lt;/code&gt; cursor to jump ahead in &lt;code&gt;@rank&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The first position is always gold.&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$ranked&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$place&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$rank&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="nv"&gt;$#position&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$place&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Lower score, so advance rank&lt;/span&gt;
        &lt;span class="nv"&gt;$r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$ranked&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$rank&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$place&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete code is in &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-214/bob-lied/perl/ch-1.pl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  
  
  Task 2: Collect Points
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-214/#TASK2"&gt;The second task&lt;/a&gt; is a classic problem of searching for an optimal answer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are given a list of numbers.
You will perform a series of removal operations.
For each operation, you remove from the list N (one or more)
equal and consecutive numbers, and add to your score N × N.
Determine the maximum possible score.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are given a few examples to expound on the idea&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1: Input: @numbers = (2,4,3,3,3,4,5,4,2) Output: 23
   We see three 3's next to each other so let us remove
   that first and collect 3 x 3 points.
   So now the list is (2,4,4,5,4,2).
   Let us now remove 5 so that all 4's can be next to each
   other and collect 1 x 1 point.
   So now the list is (2,4,4,4,2).
   Time to remove three 4's and collect 3 x 3 points.
   Now the list is (2,2).
   Finally remove both 2's and collect 2 x 2 points.
   So the total points collected is 9 + 1 + 9 + 4 =&amp;gt; 23.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a naturally recursive problem. At each step, we remove a span of equal numbers, then repeat the same logic with a smaller list of numbers, while accruing a total score.&lt;/p&gt;

&lt;p&gt;Recursion can sometimes be problematic.  We need to be certain that the recursion will terminate, and that the recursion will not go so deep that it runs out of memory.  We're safe here. Since each step removes at least one number from the list, we will eventually terminate when the list is down to one or zero members. How deep will the recursion go?  The worst case is that all N numbers in the list are unique, so that we have to repeat the process N times.  For lists in the dozens to hundreds, probably even thousands, that recursion should be safe.&lt;/p&gt;

&lt;p&gt;So, onward.  First of all, we need to be able to find spans of numbers that are the same, so that we can remove them from the list.  Let's represent a span as a pair of (position, length).&lt;br&gt;
Then we can write a subroutine that gives us a list of such pairs for any array of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Return pairs of [offset, length] for each span of equal values in list&lt;/span&gt;
  &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;findSpan&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$beg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$listLength&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="c1"&gt;#* &amp;amp;&amp;amp; $list-&amp;gt;[$end+1] == $list-&amp;gt;[$end] )&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nv"&gt;$end&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nv"&gt;$len&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$beg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="nv"&gt;$beg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nv"&gt;$len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@span&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our function dispatches a couple of trivial cases first, and then makes one pass over the list, extending the span while the values remain the same, and starting a new span when the value changes.  The return value will be a reference to an array, where each element of the array is a reference to a (position, length) pair.  For example, for the list &lt;code&gt;(1,2,2,2,2,1)&lt;/code&gt;, the set of spans would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [0][1][2][3][4][5]&lt;/span&gt;
&lt;span class="c1"&gt;#  1  2  2  2  2  1&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# position 0, length 1 (1)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# position 1, length 4 (2,2,2,2)&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;# position 5, length 1 (1)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that function available to us, the logic of collection will be simpler.  For each span, calculate the score of the span (which is just the length squared), then remove it and recursively call the same routine again.  That will find spans in the smaller list, and then try to remove each of those in turn.&lt;/p&gt;

&lt;p&gt;The recursive collect subroutine needs to have a base case that terminates the recursion.  That happens when the list is empty, or has just one element left.  We can also slightly optimize and also stop the recursion when there are only two elements left, since that score is easy to calculate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;_collect&lt;/span&gt;&lt;span class="err"&gt;($&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;scoreSoFar&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@$list&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$numLen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can find the set of spans that might be removed, and try each one in turn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$spanList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;findSpan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$bestScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$span&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;@$spanList&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$beg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$span&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;# Remove the span from the list and recurse&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nb"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$beg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;_collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;@copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$bestScore&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$bestScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$score&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$scoreSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$bestScore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;splice&lt;/code&gt; function is very handy here, because it does the list manipulation for us.  We have to be careful to operate on a copy of the list, however, since &lt;code&gt;splice&lt;/code&gt; will change the array, and we need it intact for the next iteration.&lt;/p&gt;

&lt;p&gt;The other tricky bit in the algorithm is accumulating the score. We pass the score into each recursive call, effectively stacking it up and returning it up the stack when we finally reach the empty list.  At each level in the recursion, we save only the best score from each possible span removal.&lt;/p&gt;

&lt;p&gt;A slightly harder problem would be to record the sequence of moves that achieves the best score.  That would use a similar technique, building a stack of moves that are passed to each recursive call through a reference to an array.  The best move at each level would be added to the stack.&lt;/p&gt;

&lt;p&gt;The code for Task 2 is in in &lt;a href="https://github.com/boblied/perlweeklychallenge-club/tree/master/challenge-214/bob-lied/perl/ch-2.pl"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Bob Lied</name>
    </author>
    <id>https://dev.to/boblied/pwc-214-1-rank-score-2-collect-points-3-4-profit-4adh</id>
    <published>2023-04-28T20:05:19Z</published>
    <updated>2023-04-28T20:05:19Z</updated>
    <category term="perl"/>
    <category term="pwc"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #214 - Rank Score</title>
    <link rel="alternate" href="https://dev.to/oldtechaa/perl-weekly-challenge-214-rank-score-3n2m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Just one weekly challenge entry this week, because I am lacking in time and have no idea how to efficiently solve the second challenge.</p>

<p>So here goes:</p>

<h4>
  
  
  Rank Score
</h4>

<p>First, the code:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>#!/usr/bin/perl

use strict;
use v5.24;

my @sorted = reverse sort @ARGV;
my %hash;
my @table = ('G', 'S', 'B');
my $curr;

foreach (@sorted) {
    if ($curr &lt;= 2) {
        $hash{$_} //= $table[$curr];
    } else {
        $hash{$_} //= $curr + 1;
    }
    $curr++;
}

say $hash{$_} for @ARGV;
</code></pre>

</div>

<p>At first, I thought this challenge was something totally different, I don't know why, but it still turned out quite simply. We want to keep the output in the same order as the input, so we obviously can't just sort and replace the inputs. The easiest way is then to use each score as the key of a hash, where the value is the rank. Since all equal scores will be equally ranked, this sorts the scores from highest to lowest and iteratively assigns ranks. For any duplicates, the index counter continues counting but the defined-or ranks that entry in the hash as the first appropriate rank. For the first 3 ranks, the table of podium winners is used.</p>

<p>That's all for this week! As usual, if you have any comments by all means post them. I'll look forward to seeing the other solutions to challenge 2.</p>

</div>
    </content>
    <author>
      <name>oldtechaa</name>
    </author>
    <id>https://dev.to/oldtechaa/perl-weekly-challenge-214-rank-score-3n2m</id>
    <published>2023-04-28T13:08:33Z</published>
    <updated>2023-04-28T13:08:33Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
  <title>Grant Application-PerlGPT</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perlgpt"/>
  <id>tag:news.perlfoundation.org,2023-04-26:/post/perlgpt</id>
  <published>2023-04-26T14:44:28</published>
  <updated>2023-04-26T14:44:28</updated>
  <summary>
  <![CDATA[
     Grant application for an AI that speaks in Perl
   ]]>
  </summary>
  <author>
    <name>Saif Ahmed</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/3c57300b73a107443c2f16ddff3a108e63c40701/PerlGPT.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p><img src="_ra-rel-mnt_/simplecas/fetch_content/3c57300b73a107443c2f16ddff3a108e63c40701/PerlGPT.png" style="max-width:30%;" /></p>

<p>We have another grant application from <a href="https://metacpan.org/author/JJNAPIORK">John Napiorkowski</a> you may recall being involved in getting Perl Bindings for Tensor Flow, and the inimitable <a href="https://metacpan.org/author/WBRASWELL">Will Braswell</a> also involved in TF Perl, amongst many other projects integral to Perl and RPerl.    This time they have paired up to create an AI that speaks in Perl: Perl-GPT.</p>

<p><strong>Applicants</strong>
John Napiorkowski &amp; Will Braswell </p>

<p><strong>Amount Requested:</strong></p>

<p>The budget for this project is $8,800 USD</p>

<p><strong>Synopsis</strong></p>

<p>This grant proposal is for <em>phase 1</em> only of the development of PerlGPT, a large language model (LLM) comparable to ChatGPT 3.5/4.0 or Stanford Alpaca, and trained on Perl-related content only.</p>

<p>PerlGPT will be based on Meta's LLaMa language models, with all new components implemented in Perl where possible and released as 100% free-and-open-source software (FOSS), unlike ChatGPT and other proprietary LLM systems.</p>

<p>Phase 1 consists of training a 7B input language model using Perl-related request/response pairs curated from Perl Monks, Stack Overflow, GitLab, GitHub, and other public Perl-specific data sources.  Phase 1 will deliver an LLM capable of generating pure-Perl source code in collaboration with a Perl programmer.</p>

<p>Optionally, MetaCPAN may be upgraded to include a live running instance of the phase 1 PerlGPT LLM.  In addition to the traditional keyword search query producing a list of CPAN distributions, PerlGPT will enable MetaCPAN to also accept free-form search queries and plain-English written questions, which then spawns a new interactive chat session with specific Perl module suggestions and custom source code examples.</p>

<p>Each phase includes additional request/response training pairs encompassing the modern best practices related to that phase's specific tasks.</p>

<ul>
<li>Phase 1     7B model; train on Perl; generate new CPAN dists</li>
<li>Phase 2    13B model; train on XS, C, C++, FFI::Platypus; generate new optimized CPAN dists</li>
<li>Phase 3    33B model; train on software development; generate refactored existing CPAN dists</li>
<li>Phase 4    65B model; train on computer science &amp; Perl internals; generate refactored interpreter, new language features</li>
</ul>

<p><strong>Benefits to the Perl Community</strong></p>

<p>Benefits for each of the 4 project phases are listed below; please be aware this grant proposal is for phase 1 development ONLY.</p>

<p><em>Phase 1</em> implements PerlGPT v1.0 and benefits the Perl community by enabling the creation of new pure-Perl libraries and applications on CPAN.  PerlGPT v1.0 is trained on pure-Perl source code examples and high-quality POD documentation from CPAN, GitLab, GitHub, and Bitbucket.  All versions of PerlGPT are further trained on plain-English technical discussions pertaining to their respective feature set, gathered from Perl Monks and Stack Overflow.  For example, a programmer may want to create a new Perl API for some 3rd party web platform such as the Amazon cloud.  The programmer can write a plain-English description of their desired API features and functionality for accessing the Amazon cloud.  They can also specify design decisions such as whether or not to utilize an MVC framework like Catalyst or Mojolicious, and they can even start stubbing out some Perl classes and subroutines with comments included where source code should be added.  PerlGPT v1.0 will work with the programmer to iteratively implement their desired Amazon cloud API in pure Perl, including a full-coverage test suite and POD documentation, etc.  Once the API is working well enough for public release, the PerlGPT v1.0 LLM can even help the programmer execute the correct Dist::Zilla commands to build and upload the software to CPAN.  Finally, many new independent Perl projects can be created with access to the Amazon cloud, thanks to the Perl API created and uploaded to CPAN with the help of PerlGPT v1.0!  The same benefits apply to any other non-Amazon API which somebody may want to create in Perl, or to any pure-Perl library or application that a programmer can think up.  The sky is the limit!  PerlGPT v1.0 dramatically increases the effectiveness and efficiency of creating new pure-Perl software.</p>

<p>Optionally, MetaCPAN may be upgraded to PerlGPT v1.0, which will benefit the Perl community by allowing anyone on the Internet to utilize the power of interactively generating Perl source code as described above.  PerlGPT v1.0 is trained on CPAN's high-quality POD, as described above.  For example, a user with little or no previous Perl experience may visit MetaCPAN and type a query asking ""how can I swap all the rows and columns in an Excel spreadsheet?""  The MetaCPAN website launches an interactive chat session, where the PerlGPT LLM starts out by selecting one of the most popular and stable CPAN distributions for Excel spreadsheet manipulation, and quickly writes a well-commented prototype application as the user watches in real time.  PerlGPT also provides a plain-English explanation of the generated source code, and continues to chat with the user if they have any further questions or requests to change the source code in any way.  PerlGPT offers to run the custom Perl source code via the user's platform of choice, including PerlBanjo, WebPerl, or Perl on a cloud system such as Amazon.  PerlGPT also offers to help the user download and install their own local copy of Perl, if they so choose.  In the matter of just a few short minutes, a new Perl user has succeeded in implementing their first custom Perl application and solving their own real-world problem!  This use of PerlGPT on MetaCPAN can serve as both a recruiting tool for new-to-Perl developers, as well as a retention tool for experienced Perl developers who want to leverage the power of CPAN to the fullest extent possible.</p>

<p><em>Phase 2</em> implements PerlGPT v2.0 and will benefit the Perl community by enabling the creation of new optimized Perl libraries and applications on CPAN.  PerlGPT v2.0 is trained on source code and documentation related to XS, C, C++, and FFI::Platypus.  For example, a programmer may want to create a Perl video game, however pure Perl is not fast or efficient enough for the shading and texturing subroutines to run during gameplay.  Similar to the work flow of PerlGPT v1.0, the programmer writes a plain-English description of exactly how they want the video game to be implemented, including use of specific graphical libraries, etc.  After the entire project is written and running slowly in pure Perl, then the programmer and PerlGPT v2.0 can work together to determine the specific shading and texturing subroutines which need to be rewritten into XS and/or C or C++.  The programmer instructs the PerlGPT v2.0 LLM if there are any design preferences such as whether or not to use FFI::Platypus, etc.  PerlGPT generates the new performance-optimized shading and texturing subroutines as directed, and runs the already-existing test suite to ensure the optimized code is functionally equivalent to the un-optimized pure-Perl code.  Once the optimized code is working as desired, the video game can be released onto CPAN as with PerlGPT v1.0.  The same benefits apply to any Perl project which values performance optimization, such as scientific algorithms, machine learning, video rendering, etc.</p>

<p><em>Phase 3</em> implements PerlGPT v3.0 and will benefit the Perl community by enabling the refactoring and upgrading of already-existing CPAN distributions based on software engineering principles and modern best practices.  PerlGPT v3.0 is trained on educational texts related to software development principles and modern Perl best practices.  For example, a programmer may want to upgrade one of their existing CPAN distributions to utilize the Amazon cloud API described in phase 1 above.  In order to achieve this, several outdated or obsolete Perl software components will need to be either removed or substantially rewritten.  Similar to the work flows of PerlGPT v1.0 and v2.0, the programmer writes a plain-English description of precisely how they want their code to be upgraded, starting with the desired new behavior of which Amazon cloud features should be utilized in what ways.  The programmer goes on to specify which Amazon cloud API calls should be utilized in which subroutines, wherever possible, to assist PerlGPT v3.0 in most effectively achieving the upgrade and refactor goals.  They can even add comments into their existing Perl source code, directing PerlGPT v3.0 to focus on certain software components or design strategies.  PerlGPT generates the requested upgrades, including all appropriate changes to the existing test suite to reflect the new Amazon cloud features.  The upgraded test suite is executed, to ensure both the new features and the remaining old features are all working correctly.  Once the upgraded code is working as desired, the new Amazon-enabled Perl distribution can be released onto CPAN.  The same benefits apply to any Perl project in need of refactoring or upgrading, such as converting old Perl code to use the new Corinna object-oriented framework, or adopting somebody else's abandoned CPAN distribution and fixing a back-log of bug reports.</p>

<p><em>Phase 4</em> implements PerlGPT v4.0 and will benefit the Perl community by enabling the Perl Steering Council (PSC) and the Perl 5 Porters (P5P) to introduce major new features and upgrades into the Perl interpreter itself.  PerlGPT v4.0 is trained on Perl internals documentation, P5P technical discussions, and the Perl interpreter's own source code, written in C89 and C macros.  For example, the PSC may request a P5P developer to refactor the Perl interpreter's threading subsystem and thereby introduce new Perl language features pertaining to parallel and asynchronous programming.  PSC requests these changes to be made without breaking the Perl interpreter's long-venerated backward compatibility with already-existing Perl software.  In order to achieve this, several other subsystems of the Perl interpreter will be affected, and will need to be upgraded accordingly.  Similar to the work flows of PerlGPTv3.0 and earlier, the P5P developer writes a plain-English description of the new desired threading behavior, along with source code samples showing the new threading keywords or other syntax.  The programmer can also add comments into the Perl interpreter source code, indicating refactoring design decisions or stubbing out new threading behaviors.  PerlGPT v4.0 generates the requested upgrades to the Perl interpreter, including modifications to both the normal C source code as well as the C macro source code.  PerlGPT v4.0 also adds new tests to the Perl interpreter test suite.  PerlGPT does not modify existing tests, in order to maintain backward compatibility with previous versions of the Perl interpreter and already-existing Perl software.  The upgraded test suite is executed, to ensure the new threading features work correctly and all previously-existing Perl features are unchanged.  Once complete, the new Perl interpreter may be released as a testing version or prototype for PSC and P5P to review, and eventually released as a stable Perl version.  The same benefits apply to any change or upgrade to the Perl interpreter, such as expanding the new Corinna OO framework, upgrading 'use constant' to allow arrays &amp; hashes, or adding native exceptions.</p>

<p><strong>Deliverables</strong></p>

<ol>
<li>An implementation of the PerlGPT v1.0 large language model based on the LLaMa language model, configured and built using Dist::Zilla.</li>
<li>A comprehensive Perl test suite with automatically-provable coverage for 100% of the PerlGPT v1.0 LLM, using Test2 from CPAN.</li>
<li>A carefully-written and explanatory collection of documentation with coverage for 100% of the PerlGPT v1.0 LLM, using normal POD fully compatible with CPAN.</li>
<li>A small collection of user-friendly example Perl applications, using PerlGPT v1.0 LLM components to effectively showcase this project.</li>
<li>A public GitLab repository with all source code and components of the PerlGPT v1.0 LLM, including unstable or experimental components.</li>
<li>A public CPAN distribution with all stable source code and components of the PerlGPT v1.0 LLM.</li>
<li>A public DockerHub (or equivalent) repository with all stable source code and components of the PerlGPT v1.0 LLM, along with all dependencies, ready to run out-of-the-box.</li>
</ol>

<p>The PerlGPT v1.0 LLM does NOT yet support anything other than pure Perl source code.  These features will be addressed in future grant proposals.</p>

<p>This grant proposal specifically does NOT include PerlGPT phase 2 or beyond, such as XS or C or Perl internals, which is far beyond the scope of a single grant and will be addressed in future proposals.</p>

<p><strong>Project Details</strong></p>

<p>We will generate the PerlGPT language model by training a LLaMa foundational language model.  This training will be done using a combination of both manually-curated and automatically-selected request/response pairs, collected from public websites and data sources.  We will not utilize any proprietary data or request/response training sets taken from other proprietary language models, such as OpenAI's ChatGPT, etc.</p>

<p>Most of the technical details of how to train the PerlGPT language model can be found in the following papers:</p>

<p><a href="https://arxiv.org/pdf/2203.02155.pdf">Training Language Models to Follow Instructions with Human Feedback, 3-4-2022</a></p>

<p><a href="https://arxiv.org/pdf/2304.05128.pdf">Teaching Large Language Models to Self-Debug, 4-11-2023</a></p>

<p><a href="https://arxiv.org/pdf/2302.13971.pdf">LLaMA: Open and Efficient Foundation Language Models, 2-27-2023</a></p>

<p><strong>Project Schedule</strong></p>

<p>Total development time is estimated at 3 to 6 month, with the normal disclaimer about the difficulty of predicting software project durations.</p>

<p>During the first work cycle of approximately 1 to 2 months, curate and implement the initial PerlGPT v1.0 training data set.</p>

<p>During the second work cycle, run the LLM training procedure and implement the Perl test suite.</p>

<p>During the third work cycle, write the Perl documentation and implement the Perl example applications.</p>

<p>If a fourth work cycle is required, continue until the public releases on CPAN and DockerHub are complete.</p>

<p><strong>Completeness Criteria</strong></p>

<p>This grant is deemed complete when all the above-listed deliverables are reviewed and accepted by the official TPF-assigned grant manager.</p>

<p><strong>Bio</strong></p>

<p>We are both professional CPAN authors (  <a href="https://metacpan.org/author/JJNAPIORK">John Napiorkowski</a> and <a href="https://metacpan.org/author/WBRASWELL">Will Braswell</a> )  , with a current total of 106 CPAN distributions between the two of us.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Application to Develop a Modern IDE for Perl 5  </title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tree-sitter"/>
  <id>tag:news.perlfoundation.org,2023-04-26:/post/tree-sitter</id>
  <published>2023-04-26T11:22:28</published>
  <updated>2023-04-26T11:22:28</updated>
  <summary>
  <![CDATA[
     Grant Applcation from Ganesan  Arjuna Maharaja to hep develope a "Modern IDE for Perl 5"
   ]]>
  </summary>
  <author>
    <name>Saif Ahmed</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/9c68111fffb1a046635a39ce992973f9ed90ed1b/treesitter.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p><img src="_ra-rel-mnt_/simplecas/fetch_content/9c68111fffb1a046635a39ce992973f9ed90ed1b/treesitter.png" style="max-width:30%;" /></p>

<p>We have received a Grant Applcation from <a href="https://github.com/ganezdragon">Ganesan Arjuna Maharaja</a> to help develop a "Modern IDE for Perl 5". This is for work he has been doing for a couple of years, and he already has 28 stars on Github.</p>

<p>The application is outlined below</p>

<p><strong>Applicant</strong>: Ganesan Arjuna Maharaja</p>

<p><strong>Amount requested</strong> : $10,000USD (Please provide an advance if possible for the work that I have already done. It was a huge first step for me)</p>

<p><strong>Project</strong>
A modern Perl IDE   Perl Core Development   A modern better IDE for perl, that  ues LSP (Language Server Protocol), which enables it to be used across modern IDEs like vscode, atom, and even legacies like vim, neovim etc. This would internally require a parser, for which tree-sitter-perl is needed (which is also developed by me)    Tree sitter (https://tree-sitter.github.io/tree-sitter/) would be able to parse perl, which would mean Perl  could be understood by other languages such as Javascript, which enables online IDEs, online syntax highlighting, and so on. The applications are limitless.</p>

<p><strong>Deliverables</strong>
There are two tools which require support from the foundation
1. tree-sitter-perl - (https://github.com/ganezdragon/tree-sitter-perl)
2. Perl IDE (for vscode, atom, neovim etc) - (https://github.com/ganezdragon/perl-language-server)</p>

<p><em>Tree sitter</em> is a wonderful tool that could provide you with a parser for any language and could run on most popular languages via binds (like Javascript, Rust, C etc).</p>

<p>Using this tool, I have also generated the grammar for perl 5. This could be found in the github provided above. It is already used by few users from neovim, so I'm continuing to support it.</p>

<p>List of deliverables for this tool:
1. grammar for perl 5
2. parser that could run on Javascript , Rust, C etc
3. Binding will be used directly on neovim to provide LSP features.
4. a npm package, that will be used in the next vs code extension. (it can be used in other places as well)</p>

<p><em>Perl IDE</em>
I'm aiming to provide the lsp first to vscode, however, developers could easily import it to their favorite IDEs which supports LSP like atom, neovim, etc. And since vscode is among the popular IDEs it will reach  a wide number of developers, which would make their lives easier coding with Perl.</p>

<p>Its currently very beta, providing only syntax check. It uses webAssembly to run on any machine.</p>

<p>List of deliverables for this tool:
1. a full IDE environment for perl that could run on any machine, with no other Perl libraries as dependencies to be installed.</p>

<p>Links:
- the parser - https://github.com/ganezdragon/tree-sitter-perl
- the IDE / the language server - https://github.com/ganezdragon/perl-language-server
- the beta extension - https://marketplace.visualstudio.com/items?itemName=ganezdragon.perl-language-server</p>

<p>I have completed 70% overall, in which "the parser" is the heavy one which does all of parsing, and has most of the logic. I even currently have few   neovim users who use this tree-sitter (https://tree-sitter.github.io/tree-sitter/) for their syntax highlighting, and error highlighting. If you aren't familiar with tree-sitter, it is a great tool :)</p>

<p><strong>Advantages over others:</strong>
There is an existing extension here - https://marketplace.visualstudio.com/items?itemName=3Drichterger.perl, but that needs a lot of installation, and version compatibilities, and it can't be ported to other editors like atom  or neovim. But, this tree-sitter based implementation is very much portable :) . It can be installed in any machine  in which nodeJS is running or can be installed. (or vscode)</p>

<p><strong>Timeline</strong> ~1 year for production ready vscode extension</p>

<p><strong>Bio</strong>
Hi, let me introduce myself. I'm Ganesan Arjuna Maharaja. I'm a full time developer at athenahealth, and working on this personal project on my leisure time. I have been busy lately with my personal work (recently got married), but I'm planning to get back into this work.</p>

<p>I have been working on perl for ~8 years now and would love to contribute back to the community. I personally feel Perl can be hard to read, but I have a lot of respect for Perl, for its nifty features, so I would like future developers to onboard to it with ease. And what better way, than having a full fledged JS parser and a IDE :)</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8746119144817944657</id>
    <published>2023-04-22T21:56:00.000+02:00</published>
    <updated>2023-04-22T21:56:56.827+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxli) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAUKE/Function-Parameters-2.002003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Function::Parameters&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - define functions and methods with parameter lists ("subroutine signatures")
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;2.002003&lt;/strong&gt; on 2023-04-19, with 57 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 2.002002 was 18 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAUKE'&gt;MAUKE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/LEONT/Module-Build-Tiny-0.043' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::Build::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A tiny replacement for Module::Build
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.043&lt;/strong&gt; on 2023-04-19, with 15 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.039 was 8 years, 6 months, 7 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/LEONT'&gt;LEONT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20230420' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.20230420&lt;/strong&gt; on 2023-04-20, with 42 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.20230320 was 30 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/BINGOS'&gt;BINGOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/MAREKR/Pod-Parser-1.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pod::Parser&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Modules for parsing/translating POD format documents
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;1.66&lt;/strong&gt; on 2023-04-22, with 12 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 1.65 was 11 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/MAREKR'&gt;MAREKR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 62 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 23 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-5.004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;5.004&lt;/strong&gt; on 2023-04-19, with 22 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 5.003 was 2 months, 11 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/YVES'&gt;YVES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.971002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.971002&lt;/strong&gt; on 2023-04-22, with 28 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.9705 was 9 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/KIMOTO'&gt;KIMOTO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v9.2.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;v9.2.0&lt;/strong&gt; on 2023-04-17, with 16 votes&lt;/li&gt;
  &lt;li&gt;Previous version: v9.0.0 was 3 months, 1 day before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/DANBERR'&gt;DANBERR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='https://metacpan.org/release/CORION/WWW-Mechanize-Chrome-0.71' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize::Chrome&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - automate the Chrome browser
&lt;ul&gt;
  &lt;li&gt;Version: &lt;strong&gt;0.71&lt;/strong&gt; on 2023-04-22, with 20 votes&lt;/li&gt;
  &lt;li&gt;Previous version: 0.70 was 23 days before&lt;/li&gt;
  &lt;li&gt;Author: &lt;a href='https://metacpan.org/author/CORION'&gt;CORION&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8746119144817944657/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8746119144817944657"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/cdxli-10-great-cpan-modules-released.html" title="(cdxli) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7735320647946670040</id>
    <published>2023-04-22T21:52:00.001+02:00</published>
    <updated>2023-04-22T21:52:55.784+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dliii) metacpan weekly report - Getopt::Long &amp; Dash</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 75&lt;/p&gt;
&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Getopt::Long"&gt;Getopt::Long&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&amp;amp;&lt;b&gt; &lt;a href="https://metacpan.org/module/Dash"&gt;Dash&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Build date: 2023/04/22 19:49:48 GMT&lt;/p&gt;&lt;br /&gt;
&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Modify" target="_blank"&gt;Env::Modify&lt;/a&gt; - affect Perl %ENV from subshell&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/POE::Component::Win32::Service" target="_blank"&gt;POE::Component::Win32::Service&lt;/a&gt; - A POE component that provides non-blocking access to Win32::Service.
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Rest::Client::Builder" target="_blank"&gt;Rest::Client::Builder&lt;/a&gt; - Base class to build simple object-oriented REST clients&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Shell::GetEnv" target="_blank"&gt;Shell::GetEnv&lt;/a&gt; - extract the environment from a shell after executing commands&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadPassword::Win32" target="_blank"&gt;Term::ReadPassword::Win32&lt;/a&gt; - Asking the user for a password (for Win32)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Win32::PEPM" target="_blank"&gt;Acme::Win32::PEPM&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=159)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=43)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=30)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Devel" target="_blank"&gt;Catalyst::Devel&lt;/a&gt; (+1=27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Plotly" target="_blank"&gt;Chart::Plotly&lt;/a&gt; (+2=16)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Perl::Releases" target="_blank"&gt;CPAN::Perl::Releases&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Curses::UI" target="_blank"&gt;Curses::UI&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Dash" target="_blank"&gt;Dash&lt;/a&gt; (+3=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Util" target="_blank"&gt;Data::Util&lt;/a&gt; (+1=10)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Digest::HMAC" target="_blank"&gt;Digest::HMAC&lt;/a&gt; (+1=11)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env" target="_blank"&gt;Env&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Env::Dot" target="_blank"&gt;Env::Dot&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Event" target="_blank"&gt;Event&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/experimental" target="_blank"&gt;experimental&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Fennec" target="_blank"&gt;Fennec&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Find::Rule" target="_blank"&gt;File::Find::Rule&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Forks::Super" target="_blank"&gt;Forks::Super&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Frost" target="_blank"&gt;Frost&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Gepok" target="_blank"&gt;Gepok&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::App" target="_blank"&gt;Getopt::App&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+3=117)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=53)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Mini" target="_blank"&gt;Getopt::Mini&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Message" target="_blank"&gt;HTTP::Message&lt;/a&gt; (+1=63)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Request::FromCurl" target="_blank"&gt;HTTP::Request::FromCurl&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline" target="_blank"&gt;Inline&lt;/a&gt; (+1=38)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::CPP" target="_blank"&gt;Inline::CPP&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/jmx4perl" target="_blank"&gt;jmx4perl&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/lib::projectroot" target="_blank"&gt;lib::projectroot&lt;/a&gt; (+1=5)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=162)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=102)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/mb" target="_blank"&gt;mb&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=97)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Build::Tiny" target="_blank"&gt;Module::Build::Tiny&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Starter" target="_blank"&gt;Module::Starter&lt;/a&gt; (+1=32)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/MooX::LvalueAttribute" target="_blank"&gt;MooX::LvalueAttribute&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Fastly" target="_blank"&gt;Net::Fastly&lt;/a&gt; (+1=4)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/OrePAN2" target="_blank"&gt;OrePAN2&lt;/a&gt; (+1=13)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Padre" target="_blank"&gt;Padre&lt;/a&gt; (+1=39)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=42)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Pepper" target="_blank"&gt;Pepper&lt;/a&gt; (+1=9)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Piper" target="_blank"&gt;Piper&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=57)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Proc::Background" target="_blank"&gt;Proc::Background&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Sepia" target="_blank"&gt;Sepia&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/String::ProgressBar" target="_blank"&gt;String::ProgressBar&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Tangram" target="_blank"&gt;Tangram&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::File" target="_blank"&gt;Test::File&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Simple" target="_blank"&gt;Test::Simple&lt;/a&gt; (+1=183)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::ANSITable" target="_blank"&gt;Text::ANSITable&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/TUWF" target="_blank"&gt;TUWF&lt;/a&gt; (+1=3)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::API" target="_blank"&gt;Twitter::API&lt;/a&gt; (+1=7)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32" target="_blank"&gt;Win32&lt;/a&gt; (+1=12)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Daemon" target="_blank"&gt;Win32::Daemon&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Exe" target="_blank"&gt;Win32::Exe&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Mechanize::NotepadPlusPlus" target="_blank"&gt;Win32::Mechanize::NotepadPlusPlus&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::OLE" target="_blank"&gt;Win32::OLE&lt;/a&gt; (+1=15)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Packer" target="_blank"&gt;Win32::Packer&lt;/a&gt; (+1=6)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::Pipe" target="_blank"&gt;Win32::Pipe&lt;/a&gt; (+1=2)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/Win32::ShellQuote" target="_blank"&gt;Win32::ShellQuote&lt;/a&gt; (+1=8)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=20)&lt;/li&gt;
&lt;/ul&gt;
</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7735320647946670040/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7735320647946670040"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dliii-metacpan-weekly-report.html" title="(dliii) metacpan weekly report - Getopt::Long &amp; Dash"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8619909316773646777</id>
    <published>2023-04-22T21:48:00.000+02:00</published>
    <updated>2023-04-22T21:48:13.429+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlxxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;
Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;
Build date: 2023-04-22 19:47:15 GMT&lt;/p&gt;
&lt;hr /&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76030424" target="_blank"&gt;How do I quote the special character + and a one-letter-plus-two-digit string?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76027200" target="_blank"&gt;How can I refer to blessed block of code using reference to the object?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76052075" target="_blank"&gt;Difference between calling named anonymous function and regular subroutine&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76048997" target="_blank"&gt;Replace next line after match in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/76060678" target="_blank"&gt;Perl - Unexpected behavior: Iterating thru an array "foreach $r (@a)" if iterator $r is changed via regex - the array elements themselves are changed&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;
&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8619909316773646777/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8619909316773646777"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2023/04/dlxxix-stackoverflow-perl-report.html" title="(dlxxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>A Simple Guide to Extract GPS Information from GoPro Photos and Videos</title>
    <link rel="alternate" href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1727/1*zNI5ysYb953nYHc4HfHWaA.png" width="1727"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Many people have a consumer grade camera like GoPro, these cameras are nice and resistant to create action videos and shots in the water&amp;#x2026;&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://medium.com/@jrballesteros/a-simple-guide-to-extract-gps-information-from-gopro-photos-and-videos-cf6edf6dc601?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>John R. Ballesteros</name>
    </author>
    <id>https://medium.com/p/cf6edf6dc601</id>
    <published>2023-04-16T22:20:32Z</published>
    <updated>2023-04-16T22:24:38.457000Z</updated>
    <category term="gps"/>
    <category term="gis"/>
    <category term="gopro"/>
    <category term="geotag"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Technical Log of Open Source Contribution: Quine in Perl</title>
    <link rel="alternate" href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <div class="medium-feed-item">
          <p class="medium-feed-snippet">Overview:</p>
          <p class="medium-feed-link">
            <a href="https://medium.com/@gustavohigueram/technical-log-of-open-source-contribution-quine-in-perl-6d9b5c47bae1?source=rss------perl-5">Continue reading on Medium »</a>
          </p>
        </div>
      </div>
    </content>
    <author>
      <name>Gustavo Higuera Mayoral</name>
    </author>
    <id>https://medium.com/p/6d9b5c47bae1</id>
    <published>2023-04-12T05:20:35Z</published>
    <updated>2023-04-12T05:20:35.691000Z</updated>
    <category term="quine"/>
    <category term="open-source"/>
    <category term="perl"/>
    <category term="contribution"/>
  </entry>
  <entry>
    <title>The Top 3 Worst Programming Languages in March 2023</title>
    <link rel="alternate" href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5" type="text/html"/>
    <content type="html">&lt;div class="medium-feed-item"&gt;&lt;p class="medium-feed-image"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;&lt;img src="https://cdn-images-1.medium.com/max/1384/1*H05geM04SX-7-TDYG2PKrQ.png" width="1384"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p class="medium-feed-snippet"&gt;Are you an outdated programming loser? If so&amp;#x200A;&amp;#x2014;&amp;#x200A;this article is for you!&lt;/p&gt;&lt;p class="medium-feed-link"&gt;&lt;a href="https://techtrendtracker.medium.com/the-top-3-worst-programming-languages-in-march-2023-7ce6936bea62?source=rss------perl-5"&gt;Continue reading on Medium »&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
    <author>
      <name>TechTrendTracker</name>
    </author>
    <id>https://medium.com/p/7ce6936bea62</id>
    <published>2023-04-06T23:02:15Z</published>
    <updated>2023-04-06T23:02:15.233000Z</updated>
    <category term="software-development"/>
    <category term="programming"/>
    <category term="technology"/>
    <category term="perl"/>
    <category term="python"/>
  </entry>
</feed>
