<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-11-26T16:43:55Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>An objective criteria for deprecating community platforms</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2022/11/an-objective-criteria-for-deprecating-community-platforms.html"/>
    <id>tag:blogs.perl.org,2022:/users/dean//558.10955</id>
    <published>2022-11-26T07:21:04Z</published>
    <updated>2022-11-26T08:01:52Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>Perl has been around for a couple of years longer than Python and Linux. Perl 5 was released in 1993, the same year as FreeBSD and NetBSD.</p>

<p>In the 90's for Open Source projects the  "community platforms" where Usenet newsgroups and mailing lists run on Listserv or Majordomo (Mailman didn't show up until 1999). IRC was used for text based chat but without SSL!. CVS was the open source version control system of choice or you might have been unlucky enough to use Visual Source Safe at work, whilst Subversion wouldn't show up until 2000.</p>

<p>But the 90's are more than 20 years in the past and IPv6 is actually seeing <a href="http://www.google.com/intl/en/ipv6/statistics.html">meaningful adoption now</a>. Many of the above technologies are as completely foreign to people with 10+ years of industry experience as Compact Cassettes, VHS, LaserDisc and maybe CDs or even DVDs.</p>

<p>As people have embraced Git and even now IPv6 - we too can and must embrace newer platforms that offer a better experience for us humans as we work together on Perl related projects. </p>

<p>This will mean making some difficult and dispassionate decisions to deprecate long cherished platforms, as we embrace contemporary alternatives.</p>

<p>I think a reasonable decision criteria would be:</p>

<p>1. Will a newcomer have a satisfactory experience? <br />
Which includes more than:</p>

<p>1a. How discoverable is it?<br />
1b. How high/low is the barrier of entry?<br />
1c. How familiar is the interface to newcomers?<br />
1d. How intuitive and effective is the user interface?<br />
1e. Will questions be taken seriously and answered in a timely manner?<br />
1f. Is the platform providing reasonable privacy and moderation controls?</p>

<p>2. How much time will admins spend maintaining the platform compared to maintaining the community on the platform?</p>

<p>3. Would it be set up now if it didn't already exist?</p>

<p>Mailing lists are a good example which we can compare to my criteria.</p>

<p>If you can find the right list, you subscribe and send your question. Your email address is blasted out to all subscribers which aren't visible to you, whilst your inbox is already being filled with all discussion on the list even if you're not interested- assuming there is any discussion. </p>

<p>Good luck finding old questions or discussions to contribute or update on. </p>

<p>Once something is sent it can never be edited or removed from recipients. Users have each others email addresses so can contact each other without moderation. You can set up filters in your email if you care to, but this is an inconsistent user interface that is user dependent and you're still having to maintain the folder's unread messages. Emails themselves become dominated by reply text, making reviewing threads high effort and low signal compared to interfaces like reddit or even a classic but inferior webforum layout.</p>

<p>If I started a new community I wouldn't create an email list.</p>

<p>Run IRC through the above criteria and its even worse! To have a good experience users need to connect continuously or set up something that does. Then try to sift through the stream of content to find some signal. If there's any significant activity, questions and comments will get lost in the stream or conflated with other discussion.</p>

<p>So let's not, metaphorically speaking, hand new Perl programmers an audio cassette saying "this really is the best way to listen to music" and then expect them to take Perl seriously or to conclude that it is anything other than a dead language.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Kephra: Select All</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2022/11/kephra-select-all.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10954</id>
    <published>2022-11-26T00:41:45Z</published>
    <updated>2022-11-26T00:43:10Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="Kephra" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>To continue my <a href="http://blogs.perl.org/users/lichtkind/2022/09/course-change-for-kephra.html">previous post</a> about Kephra, please let me ramble about just one seemingly little feature. It is interesting in its own right - but also an example for the design principles I employ: </p>

<p>1. max productivity</p>

<p>2. max consistency (less to memorize)</p>

<p>3. breaking habits and customs only when 1 and 2 demand it.</p>

<p>As soon graphics plays a greater role I will add max beauty as new 2.</p>]]>
        <![CDATA[<p>The feature is called incremental selection and there are a few fancy editors who implement it. It is an extension on an idea already present in nearly all editors; when you click on text : the first left click moves the cursor to this position. The second on same position selects the word and third the whole line. That I meant by "an expanding selection" and I find it crazy that even that  functionality is not available from keyboard. I'm a strong believer in the UI principle that every function should be available from every input method (unless very good reasons).</p>

<p><em>Atom</em> has a rich <strong>Selection</strong> menu. But this is only an excellent and fast documentation - not something fur intuitively and fast usage. And since there are more things you want to select than key combinations you want to learn - why not put them all on one. Repeating the same key stroke doesn't cost much finger movement and expanding selection is kinda the same thing over and over.</p>

<p>The only key combo which is already universally used to select something is &lt;Ctrl&gt;+&lt;A&gt and we all know how seldom its actually used. Even select one word/variable/command is more often needed So lets put that on &lt;Ctrl&gt;+&lt;A&gt. And (long live Huffman - Coding) if you press it four times you still end up selecting the document (after selected line and block). </p>

<p>But we can go even crazier since there is really not much difference to press it four or 6 times right. Since were programmer - we often want to get a quoted string without much cursor navigation - or a complete loop with head and body. This would also avoid the hassle of finding free key bindings for syntax scheme dependent commands. Why not blend their functionality into the existing commands? And the good thing (since &lt;Ctrl&gt;+&lt;Shift&gt;+&lt;A&gt is also still free) we could use that key combo to revert the expansion in case you pressed it one time to many.</p>]]>
    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Maxima, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-11-26T00:00:00Z</published>
    <updated>2022-11-26T00:00:00Z</updated>
  </entry>
  <entry>
    <title>This Week in PSC (088)</title>
    <link rel="alternate" href="http://blogs.perl.org/users/psc/2022/11/this-week-in-psc-088.html"/>
    <id>tag:blogs.perl.org,2022:/users/psc//4112.10953</id>
    <published>2022-11-25T21:54:56Z</published>
    <updated>2022-11-25T21:58:37Z</updated>
    <author>
        <name>Perl Steering Council</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/psc/">
        <![CDATA[<p>A smaller-than-usual meeting because of the US Holiday; only Paul and Philippe today.</p>

<ul>
<li>We remembered we still need to write the announcement for deprecating smartmatch
<li>We need to resync with Neil about how "SSL in Core" investigations are going
<li>Reviewed RFCs and found a shortlist of "soon to expire" ones. A nudge email will be sent to the RFC sponsors.
</ul>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Dancer #3 - Hello World</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-dancer-3-hello-world-3ikg" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qK9tDFTvHlo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video first we check what happened to the installation and then if it was successful then we are going to write our first Dancer-based web application.&lt;/p&gt;

&lt;p&gt;Then I can go to the Command Prompt or the Power Shell if I was on Windows, or if I was on Linux or Mac I'd go to the terminal and type in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;perl &lt;span class="nt"&gt;-MDancer2&lt;/span&gt; &lt;span class="nt"&gt;-e1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run &lt;code&gt;perl&lt;/code&gt;. &lt;code&gt;*-MDancer2&lt;/code&gt; will make it try to load the &lt;code&gt;Dancer2&lt;/code&gt; module into memory and &lt;code&gt;-e1&lt;/code&gt; just tells perl to execute the program&lt;br&gt;
consisting of the number &lt;code&gt;1&lt;/code&gt; which is a non-operation. It basically tells perl to do nothing.&lt;br&gt;
The goal here is to see if perl can find and load the Dancer2 module.&lt;/p&gt;

&lt;p&gt;If there is no output to the screen that means everything is fine. Unlike in the previous case when this command failed.&lt;/p&gt;

&lt;p&gt;This, not having any output, means that Dancer2 is installed.&lt;/p&gt;

&lt;p&gt;If, however, we try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;perl &lt;span class="nt"&gt;-MDancer3&lt;/span&gt; &lt;span class="nt"&gt;-e1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll get something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Can't locate Dancer3.pm in @INC (you may need to install the Dancer3 module) (@INC contains:
/home/gabor/perl5/lib/perl5/5.34.0/x86_64-linux-gnu-thread-multi
/home/gabor/perl5/lib/perl5/5.34.0
/home/gabor/perl5/lib/perl5/x86_64-linux-gnu-thread-multi
/home/gabor/perl5/lib/perl5
/etc/perl
/usr/local/lib/x86_64-linux-gnu/perl/5.34.0
/usr/local/share/perl/5.34.0
/usr/lib/x86_64-linux-gnu/perl5/5.34
/usr/share/perl5
/usr/lib/x86_64-linux-gnu/perl-base
/usr/lib/x86_64-linux-gnu/perl/5.34
/usr/share/perl/5.34
/usr/local/lib/site_perl).
BEGIN failed--compilation aborted.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This failed obviously because Dancer3 is not installed because it does not even exist.&lt;/p&gt;

&lt;p&gt;It told me that it can't locate Dancer3 and that I should install it.&lt;/p&gt;

&lt;p&gt;Of course perl does not know that my problem here is not the lack of installation, but that I made a mistake (on purpose) in the name of the module.&lt;/p&gt;

&lt;h2&gt;
  
  
  Course slides
&lt;/h2&gt;

&lt;p&gt;The other thing that we left at the end of the previous video was the unzipping of the course material.&lt;br&gt;
If you switch to the other window - the file explorer - where you started the unzip, you'll see a folder (directory) called &lt;code&gt;slides-main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;slides-main&lt;/code&gt; you will find a folder for each training course I have.&lt;/p&gt;

&lt;p&gt;The Dancer2 course material is within the &lt;code&gt;perl&lt;/code&gt; course and thus in the &lt;code&gt;perl&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;perl&lt;/code&gt; folder you'll find the example files from the slides by following the path that you can see above each example on the slides.&lt;br&gt;
For example &lt;a href="https://code-maven.com/slides/dancer/hello-world-with-dancer"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then I switched to the Command Prompt/Terminal and typed in &lt;code&gt;cd&lt;/code&gt; (change directory) and then the path where I wanted to switch to.&lt;/p&gt;

&lt;p&gt;I can go to the file-explorer, click on the "address bar" and then it will show me the full path to the directory I am viewing.&lt;br&gt;
I can copy that by pressing &lt;code&gt;Ctrl-C&lt;/code&gt; then I can paste it to the terminal window my clicking on the right button of the mouse.&lt;/p&gt;

&lt;p&gt;hen I can press the &lt;code&gt;Home&lt;/code&gt; key to jump to the beginning of the line and type in &lt;code&gt;cd&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd c:\course\slides-main\perl\examples\dancer\hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By pressing &lt;code&gt;ENTER&lt;/code&gt; I'll jump to the selected folder.&lt;/p&gt;

&lt;p&gt;If now I type in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I can see the files that are in that directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;... app.psgi
... test.out
... test.t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Switching to the file-explorer I can see the same.&lt;/p&gt;

&lt;p&gt;Among the 3 files in the directory: &lt;code&gt;app.psgi&lt;/code&gt; is the file that we'll actually need now. That's where our "application" is.&lt;br&gt;
&lt;code&gt;test.t&lt;/code&gt; is the test file that is checking that our code works properly.&lt;/p&gt;

&lt;p&gt;Then you'll find all kinds of extra files with &lt;code&gt;.out&lt;/code&gt; extension that you won't have in a real application.&lt;br&gt;
I only have them to store the output of various commands so I can include it in the slides.&lt;br&gt;
You don't have to worry about those files.&lt;/p&gt;
&lt;h2&gt;
  
  
  Hello World
&lt;/h2&gt;

&lt;p&gt;The content of the &lt;code&gt;app.psgi&lt;/code&gt; file can be seen here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Dancer2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;App&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to_app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you need to do at this point is type in the Command Prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plackup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will print something like this on the screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTP::Server::PSGI: Accepting connections at http://0:5000/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells us that the server is running and accepting connection on port 5000.&lt;/p&gt;

&lt;p&gt;If you are using Windows, you'll probably also see a pop-up of the &lt;code&gt;Windows Defender Firewall&lt;/code&gt; saying that it has blocked&lt;br&gt;
some features of this app.&lt;/p&gt;

&lt;p&gt;This happens if you have the Windows Firewall on your computer that will limit the access to your computer.&lt;/p&gt;

&lt;p&gt;It has two checkboxes, one to enable access on &lt;code&gt;Private networks&lt;/code&gt;, the other to enable access on &lt;code&gt;Public networks&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For some reason on my computer the Public networks was checked. I prefer to only allow access on Private networks so I checked that box&lt;br&gt;
and unchecked the box of the Public networks.&lt;/p&gt;

&lt;p&gt;Then I clicked &lt;code&gt;Allow access&lt;/code&gt;. It took a couple of seconds to make the pop-up disappear.&lt;br&gt;
It might have been slow because I was recording the video on a Windows running in a Virtual Box while the video-recording was running.&lt;br&gt;
So my computer was already busy.&lt;/p&gt;

&lt;p&gt;Then I can open my browser to the URL that was listed on the terminal window: &lt;a href="http://0:5000/"&gt;http://0:5000/&lt;/a&gt;. (you should be able to just click on this link)&lt;/p&gt;

&lt;p&gt;If that does not work you can also try to type in &lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt; which is going to "localhost" which is your computer.&lt;/p&gt;

&lt;p&gt;Finally you can try &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the video you can see that I tried all of these using the browser that came with Windows (I think it was Edge).&lt;/p&gt;
&lt;h2&gt;
  
  
  Install Firefox or Chrome
&lt;/h2&gt;

&lt;p&gt;So because I could not convince Edge to work I decided to download &lt;a href="https://www.mozilla.org/en-US/firefox/new/"&gt;Firefox&lt;/a&gt;. Which is Open Source so I like it.&lt;/p&gt;

&lt;p&gt;While I was waiting for Firefox to be installed I tried Edge again and this time it worked.&lt;/p&gt;

&lt;p&gt;Either I did something incorrectly earlier or Edge just got scared when it saw I am downloading Firefox and started to work.&lt;/p&gt;
&lt;h2&gt;
  
  
  Finally it works!
&lt;/h2&gt;

&lt;p&gt;So we can see in the browser &lt;em&gt;Hello World1&lt;/em&gt;. It's not much of a web application, but it works and it is ours!&lt;/p&gt;

&lt;p&gt;In the terminal/Command Prompt window you can see the access log. Apparently also the previous attempts showed up even though we did not get a response in the browser.&lt;/p&gt;
&lt;h2&gt;
  
  
  The code
&lt;/h2&gt;

&lt;p&gt;Let's go over the code now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just the declaration of the Perl package. The name &lt;code&gt;App&lt;/code&gt; isn't really important here. You can put there virtually anything.&lt;br&gt;
As long as at the end of the code you use the same name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Dancer2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This loads the Dancer2 module. (This is what the &lt;code&gt;-MDaner2&lt;/code&gt; did on the command line.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is called a &lt;code&gt;route&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The way Dancer works is that we need to map URL pathes to anonymous functions. (You could also use named functions, but they are usually anonymous.)&lt;/p&gt;

&lt;p&gt;The "path" is the part that comes in the URL after the name of web site. So in case of this URL: "&lt;a href="https://code-maven.com/slides/dancer/hello-world-with-dancer"&gt;https://code-maven.com/slides/dancer/hello-world-with-dancer&lt;/a&gt;"&lt;br&gt;
The part "/slides/dancer/hello-world-with-dancer" is the path.&lt;/p&gt;

&lt;p&gt;In case of "&lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;"  the path is just "/" though when I typed it in the browser hid it.&lt;/p&gt;

&lt;p&gt;I could also type in some longer path, for example I tried "&lt;a href="http://localhost:5000/hello"&gt;http://localhost:5000/hello&lt;/a&gt;" and I got a &lt;code&gt;Error 404 - Not Found&lt;/code&gt; message.&lt;br&gt;
That's because the path &lt;code&gt;/hello&lt;/code&gt; has not been defined in this application.&lt;/p&gt;

&lt;p&gt;After the &lt;code&gt;get&lt;/code&gt; keyword is the path we are mapping.&lt;/p&gt;

&lt;p&gt;After the fat-arrow &lt;code&gt;=&amp;gt;&lt;/code&gt; you can see the anonymous subroutine. Whatever it returns is sent back to the browser.&lt;/p&gt;

&lt;p&gt;It can return some HTML to make a nice page, but in our case we only returned the plain text "Hello World!" and the browser displayed it.&lt;/p&gt;

&lt;p&gt;The code with the fat-arrow might look a bit strange, especially if you know Perl, but it is basically just a key-value pair&lt;br&gt;
where the path is the key and the anonymous function is the value.&lt;/p&gt;

&lt;p&gt;Just don't forget the semi-colon at the end of that block! This is one of the cases when after the closing of curly braces you have to put a semi-colon&lt;br&gt;
because this is a statement and not just a block.&lt;/p&gt;

&lt;p&gt;The same as this code written slightly differently might help you understand what's really going on here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We imported the &lt;code&gt;get&lt;/code&gt; function from the Dancer2 module. This function gets two parameters. The first one is the path and the second one is the function to be executed when someone requests that path.&lt;/p&gt;

&lt;h2&gt;
  
  
  Stop the application
&lt;/h2&gt;

&lt;p&gt;To stop the application you need to switch to the  terminal/command prompt again and press &lt;code&gt;Ctrl-C&lt;/code&gt;. Windows will ask you for confirmation. Type Y.&lt;/p&gt;

&lt;h2&gt;
  
  
  Testing
&lt;/h2&gt;

&lt;p&gt;Then remains the question, how do we know that this actually works. Without manually starting the whole thing and then visiting the web site?&lt;/p&gt;

&lt;p&gt;This is what we'll see in the next video.&lt;/p&gt;

</content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-dancer-3-hello-world-3ikg</id>
    <published>2022-11-25T05:25:00Z</published>
    <updated>2022-11-25T05:25:00Z</updated>
    <category term="perl"/>
    <category term="tutorial"/>
    <category term="webdev"/>
    <category term="beginners"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 192:  Binary Flip and Equal Distribution</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/11/perl-weekly-challenge-192-binary-flip-and-equal-distribution.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10952</id>
    <published>2022-11-24T23:11:51Z</published>
    <updated>2022-11-24T23:17:35Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 192 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-192/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on November, 27, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Binary Flip</h2>

<p><em>You are given a positive integer, <code>$n</code>.</em></p>

<p><em>Write a script to find the binary flip.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: $n = 5
Output: 2

First find the binary equivalent of the given integer, 101.
Then flip the binary digits 0 -&gt; 1 and 1 -&gt; 0 and we get 010.
So Binary 010 =&gt; Decimal 2.
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $n = 4
Output: 3

Decimal 4 = Binary 100
Flip 0 -&gt; 1 and 1 -&gt; 0, we get 011.
Binary 011 = Decimal 3
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: $n = 6
Output: 1

Decimal 6 = Binary 110
Flip 0 -&gt; 1 and 1 -&gt; 0, we get 001.
Binary 001 = Decimal 1
</code></pre>

<p>In theory, we should probably use the binary operators to solve this problem. In practice, it will be easier (and also faster), both in Raku and in Perl, to convert the input integer into a binary string, perform the binary flip as a string operation, and then convert the resulting binary string into an integer.</p>

<h3>Binary Flip in Raku</h3>

<p>We can use the built-in <a href="https://docs.raku.org/routine/base">base</a> method to convert the input integer into a binary string, and the built-in <a href="https://docs.raku.org/routine/parse-base">parse-base</a> method to perform the opposite conversion. Then we use the <code>tr///</code> <a href="https://docs.raku.org/language/operators#tr///_in-place_transliteration">in-place transliteration</a> operator to transform 0s into 1s and vice-versa.</p>

<pre><code>sub flip (Int $n) {
    my $bin = $n.base(2);
    $bin ~~ tr/10/01/;
    return $bin.parse-base(2);
}

for 5, 4, 6 -&gt; $test {
    say "$test =&gt; ", flip($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./bin-flip.raku
5 =&gt; 2
4 =&gt; 3
6 =&gt; 1
</code></pre>

<p>This program is so simple that it can easily be coded as a Raku one-liner:</p>

<pre><code>$ raku -e 'say (TR/10/01/ given (+@*ARGS[0]).base(2)).parse-base(2);' 5
2

$ raku -e 'say (TR/10/01/ given (+@*ARGS[0]).base(2)).parse-base(2);' 4
3

$ raku -e 'say (TR/10/01/ given (+@*ARGS[0]).base(2)).parse-base(2);' 6
1
</code></pre>

<h3>Binary Flip in Perl</h3>

<p>In Perl, we can use <code>sprintf</code> to convert the input integer into a binary string, and <code>oct</code> for the reverse conversion. The <code>oct</code> function:</p>

<blockquote>
  <p>Interprets EXPR as an octal string and returns the corresponding value. (If EXPR happens to start off with &#8220;0x&#8221;, interprets it as a hex string. If EXPR starts off with &#8220;0b&#8221;, it is interpreted as a binary string.) </p>
</blockquote>

<p>So we only need to prefix the flipped string with <code>0b</code>. And we use the <code>tr///</code> operator to perform the binary flip:</p>

<p>use strict;
    use warnings;
    use feature qw/say/;</p>

<pre><code>sub flip {
    my $bin = sprintf "%b", shift;
    $bin =~ tr/10/01/;
    return oct("0b" . $bin);
}

for my $test (5, 4, 6) {
    say "$test =&gt; ", flip($test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./bin-flip.pl
5 =&gt; 2
4 =&gt; 3
6 =&gt; 1
</code></pre>

<h2>Task 2: Equal Distribution</h2>

<p><em>You are given a list of integers greater than or equal to zero, <code>@list</code>.</em></p>

<p><em>Write a script to distribute the number so that members are same. If you succeed then print the total moves otherwise print -1.</em></p>

<p><em>Please follow the rules (as suggested by Neils van Dijke (2022-11-21 13:00):</em></p>

<p><em>>1) You can only move a value of &#8216;1&#8217; per move</em>
<em>>2) You are only allowed to move a value of &#8216;1&#8217; to a direct neighbor/adjacent cell</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: @list = (1, 0, 5)
Output: 4

Move #1: 1, 1, 4
(2nd cell gets 1 from the 3rd cell)

Move #2: 1, 2, 3
(2nd cell gets 1 from the 3rd cell)

Move #3: 2, 1, 3
(1st cell get 1 from the 2nd cell)

Move #4: 2, 2, 2
(2nd cell gets 1 from the 3rd cell)
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: @list = (0, 2, 0)
Output: -1

It is not possible to make each same.
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: @list = (0, 3, 0)
Output: 2

Move #1: 1, 2, 0
(1st cell gets 1 from the 2nd cell)

Move #2: 1, 1, 1
(3rd cell gets 1 from the 2nd cell)
</code></pre>

<p>First, it should be pretty obvious that there is a solution if and only if the sum of the digits of the input list is evenly divisible by the number of items in the list. Thus, in the second example provided with the task, there is no solution because the sum of the list elements is 2, which is not a multiple of 3, the number of items in the list.</p>

<p>Second, the final solution will have all their elements set to the average of the list items. For instance, in the case of example 1, all elements of the final list are equal to 2, i.e. <code>(1 + 0 + 5) / 3</code>.</p>

<p>Finally, the least number of moves to equalize <code>(1, 0, 5)</code> is the same as the least number of moves to equalize <code>(5, 0, 1)</code> (it is sort of commutative). This means that we can always start from the left and move to the right (and don&#8217;t need to try in the other direction). So, if we start from the left, we need to add 1 to 1 to get the target value of 2. For this move to be legal, we need to carry over the change, i.e. subtract 1 from the next value, and, after this first move, we get <code>(2, -1, 5)</code>. We don&#8217;t care about temporary negative values, and we can see that we&#8217;ll need three additional moves to get the center value to 2. At that point, the most right value will have been decremented 3 times and will be equal to 2. Job done, we need in total 4 moves. We only need to generalize this to any number of items.</p>

<h3>Equal Distribution in Raku</h3>

<p>We simply implement the process described in the comments on the task description just above.</p>

<pre><code>sub equalize (@nums is copy) {
    my $sum = [+] @nums;
    return -1 if $sum % @nums.elems;
    my $target = $sum / @nums.elems;
    my $count = 0;
    my $carry = 0;
    for @nums &lt;-&gt; $num {
        $num -= $carry;
        $carry = $target - $num;
        $count += $carry.abs;
    }
    return $count;
}

for &lt;1 0 5&gt;, &lt;0 2 0&gt;, &lt;0 3 0&gt;, &lt;3 0 3&gt;, &lt;2 2 2&gt;, 
    &lt;1 0 5 2&gt;, &lt;2 5 0 1&gt;, &lt;1 0 5 3&gt;, &lt;6 0 0&gt; -&gt; @test {
    say @test, " \t -&gt; ", equalize @test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./equal-dist.raku
(1 0 5)          -&gt; 4
(0 2 0)          -&gt; -1
(0 3 0)          -&gt; 2
(3 0 3)          -&gt; 2
(2 2 2)          -&gt; 0
(1 0 5 2)        -&gt; 4
(2 5 0 1)        -&gt; 4
(1 0 5 3)        -&gt; -1
(6 0 0)          -&gt; 6
</code></pre>

<h3>Equal Distribution in Perl</h3>

<p>We also simply implement the process described above in the discussion of the task.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;


sub equalize {
    my @nums = @{$_[0]};
    my $sum = 0;
    $sum += $_ for @nums;
    return -1 if $sum % scalar @nums;
    my $target = $sum / scalar @nums;
    my $count = 0;
    my $carry = 0;
    for my $num (@nums) {
        $num -= $carry;
        $carry = $target - $num;
        $count += abs $carry;
    }
    return $count;
}
for my $test ([&lt;1 0 5&gt;], [&lt;0 2 0&gt;], [&lt;0 3 0&gt;], 
              [&lt;3 0 3&gt;], [&lt;2 2 2&gt;], [&lt;1 0 5 2&gt;], 
              [&lt;2 5 0 1&gt;], [&lt;1 0 5 3&gt;], [&lt;6 0 0&gt;]) {
    say "@$test\t -&gt; ", equalize $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./equal-dist.pl
1 0 5    -&gt; 4
0 2 0    -&gt; -1
0 3 0    -&gt; 2
3 0 3    -&gt; 2
2 2 2    -&gt; 0
1 0 5 2  -&gt; 4
2 5 0 1  -&gt; 4
1 0 5 3  -&gt; -1
6 0 0    -&gt; 6
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on December 4, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Raku Advent Calendar submission deadline approaching!</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/rakuadvent"/>
  <id>tag:news.perlfoundation.org,2022-11-24:/post/rakuadvent</id>
  <published>2022-11-24T13:36:27</published>
  <updated>2022-11-24T13:36:27</updated>
  <summary>
  <![CDATA[
     The Christmas season is almost here, and that means a fresh batch of Raku Advent Calendar posts. Every year since 2009, the Raku community has hosted an annual Advent event, in the spirit of Perl and other projects, consisting of daily articles starting on the 1st of December and ending on the 25th. The Raku community has had so many great posts and, hopefully, this year will live up to 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>
  <category term="Raku Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Christmas season is almost here, and that means a fresh batch of
Raku Advent Calendar posts.  Every year since 2009, the Raku community
has hosted an annual Advent event, in the spirit of Perl and other
projects, consisting of daily articles starting on the 1st of December and ending
on the 25th.  The Raku community has had so many great posts and, hopefully, this year will live up to that same high standard.</p>

<p>But, to do that, Raku needs your help: If you'd like to write a post,
please <strong>sign up on the Raku Advent Calendar <a href="https://github.com/Raku/advent/blob/master/raku-advent-2022/authors.md">GitHub
repo</a></strong>.
  The deadline for post submission is December 1st (next week!).  However,
if you would like to post but cannot meet that deadline, please sign up
anyway and reach out about when you can submit a post – it's likely that we can make the timing work.</p>

<p>Let’s all write some great posts and have a Merry Raku Advent indeed!</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>5 cool Perl/Programming links</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/5-cool-perlprogramming-links-1da6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h4>
  
  
  1. <a href="https://www.activestate.com/blog/introduction-to-perl-ecosystem/">Everything you ever wanted to know about the Perl ecosystem</a>
</h4>

<h4>
  
  
  2. <a href="https://dev.to/nicholasbhubbard">Nicholas Hubbard's posts (Perl)</a>
</h4>

<h4>
  
  
  3. <a href="http://phpsadness.com/">PHP Sadness</a>
</h4>

<h4>
  
  
  4. <a href="https://perladvent.org">Perl Advent Calendar</a> (<a href="https://perladvent.org/2020/">2020</a>)
</h4>

<h4>
  
  
  5. <a href="https://beza1e1.tuxen.de/articles/faster_than_C.html">Faster than C</a>
</h4>

<p>Enjoy! 😀</p>

</div>
    </content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/5-cool-perlprogramming-links-1da6</id>
    <published>2022-11-24T08:34:45Z</published>
    <updated>2022-11-24T08:34:45Z</updated>
    <category term="perl"/>
    <category term="fortran"/>
    <category term="programming"/>
  </entry>
  <entry>
    <title>Q. What is Python/Django testintg frame work for Perl?</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/q-what-is-pythondjango-testintg-frame-work-for-perl-2nd6" type="text/html"/>
    <content type="html">&lt;p&gt;A. &lt;a href="https://metacpan.org/pod/Test::Mojo"&gt;Test::Mojo&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Test::More;
use Test::Mojo;

my $t = Test::Mojo-&amp;gt;new('MyApp');

# HTML/XML
$t-&amp;gt;get_ok('/welcome')-&amp;gt;status_is(200)-&amp;gt;text_is('div#message' =&amp;gt; 'Hello!');

# JSON
$t-&amp;gt;post_ok('/search.json' =&amp;gt; form =&amp;gt; {q =&amp;gt; 'Perl'})
  -&amp;gt;status_is(200)
  -&amp;gt;header_is('Server' =&amp;gt; 'Mojolicious (Perl)')
  -&amp;gt;header_isnt('X-Bender' =&amp;gt; 'Bite my shiny metal ass!')
  -&amp;gt;json_is('/results/4/title' =&amp;gt; 'Perl rocks!')
  -&amp;gt;json_like('/results/7/title' =&amp;gt; qr/Perl/);

# WebSocket
$t-&amp;gt;websocket_ok('/echo')
  -&amp;gt;send_ok('hello')
  -&amp;gt;message_ok
  -&amp;gt;message_is('echo: hello')
  -&amp;gt;finish_ok;

done_testing();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Yuki Kimoto -- Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/q-what-is-pythondjango-testintg-frame-work-for-perl-2nd6</id>
    <published>2022-11-24T08:05:09Z</published>
    <updated>2022-11-24T08:05:09Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="django"/>
    <category term="mojolicious"/>
  </entry>
  <entry>
    <title>Perl Club's Website Got to Have Global Contents Now</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/perl-clubs-website-got-to-have-global-contents-now-1dhg" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Perl Club's website got to have global contents Now.</p>

<p><a href="https://perlclub.net/">https://perlclub.net/</a></p>

</div>
    </content>
    <author>
      <name>Yuki Kimoto -- Perl Club</name>
    </author>
    <id>https://dev.to/yukikimoto/perl-clubs-website-got-to-have-global-contents-now-1dhg</id>
    <published>2022-11-24T07:59:10Z</published>
    <updated>2022-11-24T07:59:10Z</updated>
    <category term="perl"/>
    <category term="perlclub"/>
  </entry>
  <entry>
    <title>Perl Dancer #2: Install Perl on Linux and Mac OSX</title>
    <link rel="alternate" href="https://dev.to/szabgab/perl-dancer-2-install-perl-on-linux-and-mac-osx-268k" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Still just warming up so we will be able to build a web application.</p>

<p><iframe width="710" height="399" src="https://www.youtube.com/embed/_Y3B6pev1Og">
</iframe>
</p>

</div>
    </content>
    <author>
      <name>Gabor Szabo</name>
    </author>
    <id>https://dev.to/szabgab/perl-dancer-2-install-perl-on-linux-and-mac-osx-268k</id>
    <published>2022-11-23T16:21:00Z</published>
    <updated>2022-11-23T16:21:00Z</updated>
    <category term="perl"/>
    <category term="tutorial"/>
    <category term="webdev"/>
    <category term="beginners"/>
  </entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) October 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_october_2022"/>
  <id>tag:news.perlfoundation.org,2022-11-23:/post/maintaining_perl_tonyc_october_2022</id>
  <published>2022-11-23T09:01:16</published>
  <updated>2022-11-23T09:01:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/10/01 Saturday  0.12 github notifications  0.22 #20355 comment  0.13 #20362 ask for more info  0.47 2022/10/03 Monday  1.05 #20207 LogFile::Read, Nagios::Cmd patches  0.23 #20207 Log::Procmail patch  0.05 #20346 Text::PerlPP look at test report and comment  1.33 2022/10/06 Thursday  0.07 github notifications  0.67 #20355 long comment  1.03 #20362 review new info, research and comment  0.80 #20026 research 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/10/01      Saturday
 0.12           github notifications
 0.22           #20355 comment</p>

<h1> 0.13           #20362 ask for more info</h1>

<p> 0.47</p>

<p>2022/10/03      Monday
 1.05           #20207 LogFile::Read, Nagios::Cmd patches
 0.23           #20207 Log::Procmail patch</p>

<h1> 0.05           #20346 Text::PerlPP - look at test report and comment</h1>

<p> 1.33</p>

<p>2022/10/06      Thursday
 0.07           github notifications
 0.67           #20355 long comment
 1.03           #20362 review new info, research and comment
 0.80           #20026 research and comment
 0.18           #20356 review and approve
 0.30           #20290 review testing (was going to merge, but) comment on
                test noise
 0.23           #20367 review and approve</p>

<h1> 0.30           #20309 review and comment</h1>

<p> 3.58</p>

<p>2022/10/10      Monday
 0.23           #20290 review updates and apply to blead, perldelta
 0.23           #20372 testing, comment
 0.70           #20370 review and approve
 0.17           #20380 review and approve
 2.00           #20362 re-work test-dist-modules (based on Bram’s PR)
 2.83           #20362 fix, restart, not using system perl, add missing
                file for threads, threads-shared, debugging, move file
                data to <strong>DATA</strong>, testing</p>

<h1> 0.05           #20362 fixes and push  for more CI</h1>

<p> 6.21</p>

<p>2022/10/11      Tuesday
 1.72           #20362 clean up commits, add more logging, testing
 3.28           #20362 look into failures, fix build issue with threads,
                threads-shared, fix probing bug on darwin, try fix for
                emulation not happening (macos system perl doesn’t -</p>

<h1>                DPERL_DARWIN)</h1>

<p> 5.00</p>

<p>2022/10/12      Wednesday
 0.75           #20372 research and comment (and some #p5p discussion)
 2.98           #20362 look into EU:PXS failure and update EU::CBuilder,
                commit clean up, polish</p>

<h1> 1.78           #20362 more polish, final test, post PR #20385</h1>

<p> 5.51</p>

<p>2022/10/13      Thursday
 0.08           #20304 review and approve
 0.68           github notifications
 0.28           #20362 changes to avoid conflict with #20304
 0.30           #20388 review, research and comment briefly
 0.52           #20390 review and comment
 0.30           #20387 review, research and approve</p>

<h1> 1.75           #20346 testing, debugging</h1>

<p> 3.91</p>

<p>2022/10/17      Monday
 0.35           #20362/#20385 follow-up on PR comments
 0.13           #20403 review and approve
 0.35           #20388 review and comment
 0.40           #20402 review and approve
 0.50           #20404 review, research and approve
 0.33           #20393 review and comment
 0.60           #20351 apply to blead, perldelta
 1.45           look into blead test failure (Test::More related?), cannot
                reproduce</p>

<h1> 0.35           look over RFC discussions</h1>

<p> 4.46</p>

<p>2022/10/18      Tuesday
 0.30           github notifications
 0.40           #20199 apply to blead, perldelta and open related #20408
 0.47           #20397 review and approve
 0.38           #20408 comment</p>

<h1> 1.97           #19964 re-work, testing</h1>

<p> 3.52</p>

<p>2022/10/19      Wednesday
 0.92           #19964 fixes, testing, push for CI
 0.13           github notifications
 0.68           #20409 why hasn’t this been an issue before - testing,
                only in miniperl, comment
 0.20           rfc pr #30 review and comments
 0.43           #20399 research
 0.43           #19964 look into test failures</p>

<h1> 0.95           #20412 review, research and comment</h1>

<p> 3.74</p>

<p>2022/10/20      Thursday
 1.70           #20411 reproduce, debugging
 2.83           #20411 look into why the save stack is getting so large,
                try some fixes, look into supplied solution, work on</p>

<h1>                better solution, testing</h1>

<p> 4.53</p>

<p>2022/10/24      Monday
 0.38           github notifications
 0.85           rfc #17 review and comments
 0.13           #20417 review and approve
 0.65           #20398 review
 0.10           #20398 more review and comment
 0.08           #20429 review and approve
 0.18           #20428 review and comment
 0.03           #20424 review and approve with comment
 0.67           #20415 review and approve
 0.57           #20385 rebase, testing and apply manually to blead
 0.42           #20363 recheck, issues with blead, fix B::Op_private</p>

<h1>                version, investigate other problems</h1>

<p> 4.06</p>

<p>2022/10/25      Tuesday
 0.33           github notifications
 0.22           #20427 review and comment
 0.58           look into dist-modules macos failures, make PR 20436
 0.35           rfc #17 look at changes
 0.57           #20434 review and comment</p>

<h1> 0.50           #20435 review and comments</h1>

<p> 2.55</p>

<p>2022/10/26      Wednesday
 1.37           #20440 review, testing, long comment
 0.65           #20427 follow-up, some #p5p discussion
 0.03           #20435 briefly comment
 0.68           #20365 review
 1.03           #20365 try to track down issue, more testing, comments
 0.80           #20346 look over still failing modules, retest
                Mojolicioous::Plugin::RenderCGI and comment
 0.33           #20427 discussion, review patch and approve</p>

<h1> 0.12           #20440 approve modified PR</h1>

<p> 5.01</p>

<p>2022/10/27      Thursday
 2.53           #20365 alt branch review, testing, comments at
                https://github.com/Perl/perl5/commit/d6b8be71272aafbbaa17b
                b27be4ac484f8726651</p>

<h1> 1.43           #20411 try to make patch crash</h1>

<p> 3.96</p>

<p>2022/10/28      Friday</p>

<h1> 0.85           #20446 review updates, testing, comments</h1>

<p> 0.85</p>

<p>2022/10/31      Monday
 1.88           #19814 review, performance testing, comment
 1.30           #20446 review updates, minor comments
 0.58           #20457 review, comments
 0.32           #20459 comment
 0.37           #20460 review discussion and comment
 0.22           #20378 review, research and comment
 0.25           #20451 review and comment
 0.62           #20411 polish, testing, push for CI</p>

<h1> 0.87           security list - research, comment</h1>

<p> 6.41</p>

<p>Which I calculate is 65.1 hours.</p>

<p>Approximately 51 tickets were reviewed or worked on, and 4 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Read dates from Excel file using Perl</title>
  <summary type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></summary>
  <updated>2022-11-23T05:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/read-dates-from-excel"/>  <id>https://perlmaven.com/read-dates-from-excel</id>
  <content type="html"><![CDATA[<p>
There are several modules on CPAN that help your <a href="/read-an-excel-file-in-perl">read an Excel file</a>.
In this article we'll look at handling dates that are in Excel files.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Return of Kephra</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2022/11/return-of-kephra.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10947</id>
    <published>2022-11-23T00:17:20Z</published>
    <updated>2022-11-22T05:39:49Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="Kephra" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl 5" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="WxPerl" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>Juhuu, released Kephra 0.401 in the spirit release early - release often. It is the start of a complete rewrite. So it's back to zero: now it can only edit one file at a time and has only Perl highlighting and UTF-8 or ASCII encoding. But some of you will still want to use it (beside vi, emacs, VStudio or atom - I know) because of the comfort in basic editing it provides. The following article explains what I mean by that.</p>]]>
        <![CDATA[<p>Basic editing  means writing, crafting, forming a text without big IDE features like refactoring, linting and such. It  is surprising how deficient, especially big IDE are in that field, where a little coding and much attention to details works wonders.</p>

<p>It starts with tiny things like: in Perl $ @ % are word character because part of an identifier. And when you navigate the next you want skip a whole var at once or select it, without additional key twiddling. You want also navigate between matching braces, from block to block or from sub so sub or just easily return to place you just wrote something (Ctrl+E).<br />
All that by just holding Ctrl for minimal finger movement.</p>

<p>Speaking of selecting. Sometimes its not even needed, because many functions like copy take in Kephra the current line if nothing is selected instead of doing nothing (what a waste of key mapping space). But if you want to select something, just press Ctrl+A. The selection will grow from word to line to block to document. But while doing that it will also select quoted strings, expressions or loops. You know all the hassle and navigation just to select something specific to copy paste and adapt indention. Why not right away move a block with the cursor keys (including page up and page down) and while on it adjust indention with left and right.</p>

<p>When putting something in quotes or braces: why not select first and write the first brace char. Auto-indention, brace highlight including brace bad light for braces without partner. Easily duplicate lines or words, but that's pretty standard nowadays. rectangular editing. Smart commenting of blocks that is immune to regular commenting. Such things add up and when combined and used strategically - programming becomes a lot faster.</p>

<p>Then we have a full featured search bar that expands to a replace bar (never hides any document text). It has some nice extras, including navigating the finds with up and down (as one more option). But if you prefer you can do almost all his functionality without entering the bar. F3 just hops to the next occurrence of the selected text.</p>

<p>And the cherry on top : talk to me - maybe it can implemented in several minutes or hack you favorite featureit yourself in Perl and make a pull request.</p>]]>
    </content>
</entry>
  <entry>
    <title>#591 - Less than 50% use CI</title>
    <link rel="alternate" href="https://perlweekly.com/archive/591.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>One of the best things about programming is that you can get almost immediate feedback from your work. The compiler tells you immediately if your code has syntax errors. Your tests can tell you within minutes if your code does what you expected on your computer. Your CI system can tell you within another few minutes if your code works on various other environments.</p>
<p>In the Perl community writing test became the norm. You rarely find any Open Source Perl code without tests. People write test even for code that only they use. Even for code they consider 'toys'. Yet with CI we are still far from it. On our <a href="https://perlweekly.com/metacpan.html">stats page</a> you can see that 12% are missing their link to VCS (some of those do have VCS they are just missing the link), but 45-60% (depending on the week) of CPAN releases have no CI configured.</p>
<p>From experience I know that corporations are way behind the curve in terms of test writing. So I can only imagine how few use Continuous Integration. There is a lot of work to be done.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/591.html</id>
    <published>2022-11-21T10:00:00Z</published>
    <updated>2022-11-21T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Twice Largest Once Cute </title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/20#pwc191" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given list of integers, @list. Write a script to find out whether the largest 
item in the list is at least twice as large as each of the other items.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub twice_largest{
    my(@list_integers) = @_;
    my @sorted_integers = sort {$a &lt;=&gt; $b} @list_integers;
    for my $i (@sorted_integers[0 .. @sorted_integers - 1]){
        unless($sorted_integers[@sorted_integers - 1] == $i){
            return -1 unless $sorted_integers[@sorted_integers - 1] &gt;= 2 * $i; 
        }
    }
    return 1;
}

MAIN:{
    say twice_largest(1, 2, 3, 4);
    say twice_largest(1, 2, 0, 5);
    say twice_largest(2, 6, 3, 1);
    say twice_largest(4, 5, 2, 3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
-1
1
1
-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;For Part 1 I at first couldn't see how to avoid a basic O(n^2) nested for loop. After I 
took a nap I think the best approach is what I have here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;sort the list O(n log n)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;get the max element from the sorted list O(1)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iterate over the sorted list, stop and return false if at any point an element times 
two is not less then max. return true if all elements (other than $max itself) pass the 
test. O(n)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So total worst case dominated by the sort O(n log n). &lt;/p&gt;

&lt;p&gt;(And the nap was required because I was on an overnight camping trip with my son's Cub 
Scout pack the previous day and barely slept at all!)&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an integer, 0 &amp;lt; $n &amp;lt;= 15. Write a script to find the number of orderings 
of numbers that form a cute list.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Hash::MultiKey;

sub cute_list{
    my($n) = @_;
    my %cute;
    tie %cute, "Hash::MultiKey";
    for my $i (1 .. $n){
        $cute{[$i]} = undef;
    }
    my $i = 1;
    {
        $i++;
        my %cute_temp;
        tie %cute_temp, "Hash::MultiKey";
        for my $j (1 .. $n){
            for my $cute (keys %cute){
                if(0 == grep {$j == $_} @{$cute}){
                    if(0 == $j % $i || 0 == $i % $j){
                        $cute_temp{[@{$cute}, $j]} = undef;
                    }    
                }
            }
        }
        %cute = %cute_temp;
        untie %cute_temp;
        redo unless $i == $n;
    }
    return keys %cute;
}

MAIN:{
    say cute_list(2) . q//;
    say cute_list(3) . q//;
    say cute_list(5) . q//;
    say cute_list(10) . q//;
    say cute_list(11) . q//;
    say cute_list(15) . q//;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2
3
10
700
750
24679
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution with a dynamic programming style approach seems to work pretty well. 
cute(11) runs in less than a second (perl 5.34.0, M1 Mac Mini 2020) which is pretty good
compared to some other reported run times that have been posted to social media this week.&lt;/p&gt;

&lt;p&gt;Some may notice that the solution here bears a striking resemblance to the one for 
&lt;a href="http://rabbitfarm.com/cgi-bin/blosxom/2021/06/20"&gt;TWC 117&lt;/a&gt;! The logic there was a bit 
more complicated, since multiple paths could be chosen. The overall idea is the same 
though: as we grow the possible lists we are able to branch and create new lists (paths).&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-191/"&gt;Challenge 191&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc191</id>
    <published>2022-11-20T21:50:00-05:00</published>
    <updated>2022-11-20T21:50:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 191</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-191/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-191/</id>
    <published>2022-11-21T00:00:00Z</published>
    <updated>2022-11-21T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 192</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-192/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Binary Flip 10. TASK #2: Equal Distribution HEADLINES  Welcome to the Week #192 of The Weekly Challenge.
Another busy week with 100+ contributions. This is the record in the history of The Weekly Challenge, we achieved the target for the 8th consecutive weeks. Thank you Team PWC for the support and encouragement.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-192/</id>
    <published>2022-11-21T00:00:00Z</published>
    <updated>2022-11-21T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6021651782995698234</id>
    <published>2022-11-19T23:20:00.000+01:00</published>
    <updated>2022-11-19T23:20:42.799+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxix) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Code-TidyAll-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Code::TidyAll&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Engine for tidyall, your all-in-one code tidier and validator &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2022-11-19&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 0.82 was 7 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.12&lt;/strong&gt; on 2022-11-16&lt;/li&gt;  &lt;li&gt;Votes: 180&lt;/li&gt;  &lt;li&gt;Previous version: 6.11 was 1 year, 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-2.05' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.05&lt;/strong&gt; on 2022-11-16&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 2.04 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JV/Getopt-Long-2.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Getopt::Long&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Module to handle parsing command line options &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.54&lt;/strong&gt; on 2022-11-17&lt;/li&gt;  &lt;li&gt;Votes: 114&lt;/li&gt;  &lt;li&gt;Previous version: 2.52 was 2 years, 2 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.076' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.076&lt;/strong&gt; on 2022-11-14&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 2.075 was 2 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYOHEX/Minilla-v3.1.20' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.20&lt;/strong&gt; on 2022-11-13&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.19 was 5 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Mozilla-CA-20221114' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mozilla::CA&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mozilla's CA cert bundle in PEM format &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20221114&lt;/strong&gt; on 2022-11-14&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 20211001 was 1 year, 1 month, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SSIMMS/PDF-API2-2.044' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create, modify, and examine PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.044&lt;/strong&gt; on 2022-11-16&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.043 was 11 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GRICHTER/Perl-LanguageServer-2.4.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::LanguageServer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Language Server and Debug Protocol Adapter for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v2.4.0&lt;/strong&gt; on 2022-11-18&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 2.3.0 was 1 year, 1 month, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9662' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9662&lt;/strong&gt; on 2022-11-15&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9659 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6021651782995698234/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/cdxix-10-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6021651782995698234"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6021651782995698234"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/cdxix-10-great-cpan-modules-released.html" title="(cdxix) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7908737354148367546</id>
    <published>2022-11-19T23:18:00.000+01:00</published>
    <updated>2022-11-19T23:18:03.632+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxii) metacpan weekly report - Perl::Dist::APPerl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 39&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl"&gt;Perl::Dist::APPerl&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/11/19 22:16:45 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Plugin::Session::Store::Cookie" target="_blank"&gt;Catalyst::Plugin::Session::Store::Cookie&lt;/a&gt; - Store session data in the client cookie&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Food::Ratio" target="_blank"&gt;Food::Ratio&lt;/a&gt; - calculate ingredient ratios&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Libwebsockets" target="_blank"&gt;Net::Libwebsockets&lt;/a&gt; - libwebsockets in Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Greylist" target="_blank"&gt;Plack::Middleware::Greylist&lt;/a&gt; - throttle requests with different rates based on net blocks&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::VariousBits" target="_blank"&gt;Test::VariousBits&lt;/a&gt; - Various test helpers.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Benchmark::Perl::Formance" target="_blank"&gt;Benchmark::Perl::Formance&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cpanel::JSON::XS" target="_blank"&gt;Cpanel::JSON::XS&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CryptX" target="_blank"&gt;CryptX&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=64)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::PluginBundle::TestingMania" target="_blank"&gt;Dist::Zilla::PluginBundle::TestingMania&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::ReadBackwards" target="_blank"&gt;File::ReadBackwards&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+2=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Blitz" target="_blank"&gt;HTML::Blitz&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=99)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Keyword::Declare" target="_blank"&gt;Keyword::Declare&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=159)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=99)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mason" target="_blank"&gt;Mason&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=475)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MooseX::XSAccessor" target="_blank"&gt;MooseX::XSAccessor&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Dist::APPerl" target="_blank"&gt;Perl::Dist::APPerl&lt;/a&gt; (+3=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::AsyncAwait" target="_blank"&gt;Promise::AsyncAwait&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::MultiSub" target="_blank"&gt;Syntax::Keyword::MultiSub&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tcl::pTk" target="_blank"&gt;Tcl::pTk&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Choose" target="_blank"&gt;Term::Choose&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Menus" target="_blank"&gt;Term::Menus&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Script" target="_blank"&gt;Test::Script&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::SimpleTable::AutoWidth" target="_blank"&gt;Text::SimpleTable::AutoWidth&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Japanese" target="_blank"&gt;Unicode::Japanese&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X::Tiny" target="_blank"&gt;X::Tiny&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7908737354148367546/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/dxxxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7908737354148367546"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7908737354148367546"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/dxxxii-metacpan-weekly-report.html" title="(dxxxii) metacpan weekly report - Perl::Dist::APPerl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2609444479968952901</id>
    <published>2022-11-19T23:16:00.000+01:00</published>
    <updated>2022-11-19T23:16:01.988+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlx) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-11-19 22:15:27 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74452428" target="_blank"&gt;How do I define a subclass in Perl when I'm using a closure to limit access to the properties?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74455602" target="_blank"&gt;In Perl, are user-provided format specifiers always safe?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74465247" target="_blank"&gt;Split() on newline AND space characters?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74496411" target="_blank"&gt;Does Python have a maximum group refer for regex (like Perl)?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74480228" target="_blank"&gt;How to extract coding between two tags using RegEx in perlscript&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2609444479968952901/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/dlx-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2609444479968952901"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2609444479968952901"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/dlx-stackoverflow-perl-report.html" title="(dlx) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#590 - Perl &amp; Corinna</title>
    <link rel="alternate" href="https://perlweekly.com/archive/590.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Congratulation to all England cricket team fans for the T20I world cup trophy. You played like a champion in the final. Although you beat us (India) in the semi final, still I am very happy for you.</p>
<p><strong>Did you hear any update about Corinna recently?</strong></p>
<p>We used to get regular update earlier and I really enjoyed the discussion about the Corinna. Last week <strong>Curtis</strong> shared a <a href="https://twitter.com/OvidPerl/status/1590247361384792065">tweet</a> where he mentioned that code example has been added to <a href="https://github.com/Ovid/Cor/blob/master/README.md">README.md</a>. I am sure you are going to love it. Thank you <strong>Curtis</strong> and the entire team of <strong>Corinna</strong> for all the hard work. We are waiting for it patiently.</p>
<p>There was one more <a href="https://twitter.com/OvidPerl/status/1591119906510077963">tweet</a> by <strong>Curtis</strong> that made my day about the proposed feature of <strong>Perl v5.38</strong> where you no longer need to end module with true value. In my career of <strong>23 years</strong>, I have come across many creative ways to return true values in the module. I welcome this change and thanks the entire team.</p>
<p>I am keeping the editorial short this week as I am running short of time. Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/590.html</id>
    <published>2022-11-14T10:00:00Z</published>
    <updated>2022-11-14T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Capital Detection Decode</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/13#pwc190" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a string with alphabetic characters only: A..Z and a..z. Write a script to 
find out if the usage of Capital is appropriate if it satisfies at least one of the 
rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use boolean;

sub capital_detection{
    {my($s) = @_; return true if length($s) == $s =~ tr/A-Z//d;}
    {my($s) = @_; return true if length($s) == $s =~ tr/a-z//d;}
    {
        my($s) = @_; 
        $s =~ m/(^.{1})(.*)$/;
        my $first_letter = $1;
        my $rest_letters = $2;
        return true if $first_letter =~ tr/A-Z//d == 1 &amp;&amp;
                       length($rest_letters) == $rest_letters =~ tr/a-z//d;
    }
    return false;
}

MAIN:{
    say capital_detection(q/Perl/);
    say capital_detection(q/TPF/);
    say capital_detection(q/PyThon/);
    say capital_detection(q/raku/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
1
0
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules to be satisfied are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1) Only first letter is capital and all others are small.

2) Every letter is small.

3) Every letter is capital.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did a bit of experimenting with &lt;code&gt;tr&lt;/code&gt; this week. Somewhat relatedly I also reminded 
myself of &lt;em&gt;scope&lt;/em&gt; issues in Perl. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tr&lt;/code&gt; function has a nice feature where it returns the number of characters changed, or
as was the case here, deleted. Here we delete all upper or lower case letters and if the
number of letters deleted is equal to original length we know that the original contained
all upper/lower case letters as required by the rules. One catch is that &lt;code&gt;tr&lt;/code&gt; when used 
this way alters the original string. One way around that would be to use temporary 
variables. Another option is to contain each of these rules checks in their own block!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an encoded string consisting of a sequence $s of numeric characters: 0..9. 
Write a script to find the all valid different decodings in sorted order.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use AI::Prolog;
use Hash::MultiKey;

my $prolog_code;
sub init_prolog{
    $prolog_code = do{
        local $/;
        &amp;lt;DATA&amp;gt;;
    };
}

sub decoded_list{
    my($s) = @_;
    my $prolog = $prolog_code;
    my @alphabet = qw/A B C D E F G H I J K L M N O P Q R S T U V W X Y Z/;
    my @encoded;
    my @decoded;
    my $length = length($s);
    $prolog =~ s/_LENGTH_/$length/g;
    $prolog = AI::Prolog-&gt;new($prolog); 
    $prolog-&gt;query("sum(Digits).");
    my %h;
    tie %h, "Hash::MultiKey";
    while(my $result = $prolog-&gt;results){
        $h{$result-&gt;[1]} = undef;
    }
    for my $pattern (keys %h){
        my $index = 0;
        my $encoded = [];
        for my $i (@{$pattern}){
            push @{$encoded}, substr($s, $index, $i);
            $index += $i;
        }
        push @encoded, $encoded if 0 == grep { $_ &gt; 26 } @{$encoded};
    }
    @decoded = sort { $a cmp $b } map { join("", map { $alphabet[$_ - 1] } @{$_}) } @encoded;
}

MAIN:{
    init_prolog;
    say join(", ", decoded_list(11));
    say join(", ", decoded_list(1115));
    say join(", ", decoded_list(127));
}

__DATA__
member(X,[X|_]).
member(X,[_|T]) :- member(X,T).

digits([1, 2]).

sum(Digits):-
    sum([], Digits, 0).

sum(Digits, Digits, _LENGTH_). 

sum(Partial, Digits, Sum):-   
    Sum &lt; _LENGTH_, 
    digits(L),
    member(X,L),
    S is Sum + X,
    sum([X | Partial], Digits, S). 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
AA, K
AAAE, AAO, AKE, KAE, KO
ABG, LG
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;There is an element of this task which reminded me of a much older problem presented back
in &lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-075/"&gt;TWC 075&lt;/a&gt;. In brief,
the question was how many ways could coins be used in combination to form a target sum. My 
&lt;a href="https://adamcrussell.livejournal.com/17614.html"&gt;solution&lt;/a&gt; used a mix of Prolog and Perl
since Prolog is especially well suited for elegant solutions to these sorts of 
combinatorial problems.&lt;/p&gt;

&lt;p&gt;I recognized that this week we have a similar problem in how we may separate the given
encoded string into different possible chunks for decoding. Here we know that no chunk
may have value greater than 26 and so we can only choose one or two digits at a time. How 
many ways we can make these one or two digit chunks is the exact same problem, somewhat in 
hiding, as in TWC 075!&lt;/p&gt;

&lt;p&gt;I re-use almost the exact same Prolog code as used previously. This is used to identify 
the different combinations of digits for all possible chunks. Once that is done we need 
only map the chunks to letters and &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perl.plover.com/FAQs/Namespaces.html"&gt;Scoping in Perl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-190/"&gt;Challenge 190&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc190</id>
    <published>2022-11-13T21:12:00-05:00</published>
    <updated>2022-11-13T21:12:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 190</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-190/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-190/</id>
    <published>2022-11-14T00:00:00Z</published>
    <updated>2022-11-14T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 191</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-191/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Twice Largest 10. TASK #2: Cute List HEADLINES  Welcome to the Week #191 of The Weekly Challenge.
Last week, I forgot to announce the champion as it was the first Monday of the month. Apology.
Today, we announce our next champion, Feng Chang, from Beijing, China.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-191/</id>
    <published>2022-11-14T00:00:00Z</published>
    <updated>2022-11-14T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2559493940179584105</id>
    <published>2022-11-12T23:50:00.001+01:00</published>
    <updated>2022-11-12T23:50:56.727+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxviii) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90130' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catalyst::Runtime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Catalyst Framework Runtime &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.90130&lt;/strong&gt; on 2022-11-09&lt;/li&gt;  &lt;li&gt;Votes: 152&lt;/li&gt;  &lt;li&gt;Previous version: 5.90129 was 3 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Dist-Zilla-6.028' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dist::Zilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - distribution builder; installer not included! &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.028&lt;/strong&gt; on 2022-11-09&lt;/li&gt;  &lt;li&gt;Votes: 178&lt;/li&gt;  &lt;li&gt;Previous version: 6.025 was 5 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DDICK/Firefox-Marionette-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Firefox::Marionette&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Automate the Firefox browser with the Marionette protocol &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2022-11-08&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 3 years, 4 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.50' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.50&lt;/strong&gt; on 2022-11-09&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 12.42 was 5 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-9.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;9.29&lt;/strong&gt; on 2022-11-11&lt;/li&gt;  &lt;li&gt;Votes: 475&lt;/li&gt;  &lt;li&gt;Previous version: 9.28 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.142' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.142&lt;/strong&gt; on 2022-11-09&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 0.130 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHANCOCK/Perl-Tidy-20221112' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Perl::Tidy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - indent and reformat perl scripts &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;20221112&lt;/strong&gt; on 2022-11-11&lt;/li&gt;  &lt;li&gt;Votes: 129&lt;/li&gt;  &lt;li&gt;Previous version: 20220613 was 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAYASHI/Term-ReadLine-Gnu-1.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::ReadLine::Gnu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for the GNU Readline/History Library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.44&lt;/strong&gt; on 2022-11-06&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.43 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2559493940179584105/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/cdxviii-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2559493940179584105"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2559493940179584105"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/cdxviii-8-great-cpan-modules-released.html" title="(cdxviii) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7319560541059676972</id>
    <published>2022-11-12T23:48:00.004+01:00</published>
    <updated>2022-11-12T23:48:52.468+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxxi) metacpan weekly report - Getopt::Long</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 37&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Getopt::Long"&gt;Getopt::Long&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/11/12 22:47:36 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::BatParser" target="_blank"&gt;App::BatParser&lt;/a&gt; - Parse DOS .bat and .cmd files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::XLSX::Parser" target="_blank"&gt;Data::XLSX::Parser&lt;/a&gt; - faster XLSX parser&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nginx::Log::Entry" target="_blank"&gt;Nginx::Log::Entry&lt;/a&gt; - This class represents a single line from the Nginx combined access log (the default access log format). It provides methods to extract information from the log entry, such as the browser, operating system, request type, ip address and more. If you want to gather statistics about an Nginx log, consider using Nginx::Log::Statistics which uses this class.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OpenSSH::Fingerprint" target="_blank"&gt;OpenSSH::Fingerprint&lt;/a&gt; - The great new OpenSSH::Fingerprint!&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Porbo" target="_blank"&gt;Porbo&lt;/a&gt; - Porbo HTTP development psgi server&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Quiq" target="_blank"&gt;Quiq&lt;/a&gt; - Class library for rapid development&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Wx::WidgetMaker" target="_blank"&gt;Wx::WidgetMaker&lt;/a&gt; - a CGI.pm-like library for wxPerl&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Astro::Sunrise" target="_blank"&gt;Astro::Sunrise&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Runtime" target="_blank"&gt;Catalyst::Runtime&lt;/a&gt; (+2=152)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cookie" target="_blank"&gt;Cookie&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Holidays" target="_blank"&gt;Date::Holidays&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::CheckOS" target="_blank"&gt;Devel::CheckOS&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=180)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::Sender" target="_blank"&gt;Email::Sender&lt;/a&gt; (+1=47)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/experimentals" target="_blank"&gt;experimentals&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+3=114)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Validator" target="_blank"&gt;JSON::Validator&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=99)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MediaWiki::API" target="_blank"&gt;MediaWiki::API&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::AccessControl" target="_blank"&gt;Mojolicious::Plugin::AccessControl&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::CIDR::Lite" target="_blank"&gt;Net::CIDR::Lite&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IP::Match::Trie" target="_blank"&gt;Net::IP::Match::Trie&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PathTools" target="_blank"&gt;PathTools&lt;/a&gt; (+1=77)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Builder" target="_blank"&gt;PDF::Builder&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prima" target="_blank"&gt;Prima&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Grammars" target="_blank"&gt;Regexp::Grammars&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Socket" target="_blank"&gt;Socket&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::Key" target="_blank"&gt;Sort::Key&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQLite_File" target="_blank"&gt;SQLite_File&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Choose" target="_blank"&gt;Term::Choose&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Menus" target="_blank"&gt;Term::Menus&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/VCF" target="_blank"&gt;VCF&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7319560541059676972/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/11/dxxxi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7319560541059676972"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7319560541059676972"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/11/dxxxi-metacpan-weekly-report.html" title="(dxxxi) metacpan weekly report - Getopt::Long"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#589 - GitHub Actions for Perl modules</title>
    <link rel="alternate" href="https://perlweekly.com/archive/589.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Winter has arrived to us as well. After many months, yesterday was the first day I had to put on long trousers and socks. Tomorrow we might even get some rain. Anyway...</p>
<p>It is still a bit surprising to me that only about 50% of the distributions recently uploaded to CPAN have any CI configured. Look at the <a href="https://perlweekly.com/metacpan.html">stats</a> and look at the <a href="https://cpan-digger.perlmaven.com/">detailed report</a>. Clearly we, in the Perl community, have been spoiled by the excellent work of the <a href="http://cpantesters.org/">CPAN Testers</a> and thus people feel less need to enable GitHub Actions. On the other hand by enabling GitHub Actions they could reduce the load from the (very few) CPAN testers. They could get feedback much faster. In some ways they could do even do more diverse testing.</p>
<p>I just saw the <a href="https://github.com/FGasper/perl-github-action-tips">Tips for testing Perl modules via GitHub</a> of Felipe Gaspar. There are some excellent suggestions on how to test your module on some special versions of perl and on other platforms such as Cygwin, FreeBSD, OpenBSD. Just to name a few. I'd like to also reiterate my offer. If you'd like to get help adding GitHub Actions to your project, open an issue on your GitHub project and tag me (@szabgab) so I'll be notified. I'll be happy to help and maybe even create a <a href="https://perlmaven.com/os">blog post and record a video</a> about your module. I keep a <a href="https://perlmaven.com/ci-for-cpan-modules">journal</a> of the recent PRs I sent with some comments and links.</p>
<p>The Perl community embraced automated tests. Every Perl module comes with lots of tests. Let's now embrace Continuous Integration that runs on every push and executes these test to get very quick feedback!</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/589.html</id>
    <published>2022-11-07T10:00:00Z</published>
    <updated>2022-11-07T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>To a Greater Degree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/11/06#pwc189" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of characters (a..z) and a target character. Write a script to 
find out the smallest character in the given array lexicographically greater than the 
target character.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub greatest_character{
    my($characters, $target) = @_;
    return [sort {$a cmp $b} grep {$_ gt $target} @{$characters}]-&gt;[0] || $target;
}

MAIN:{
    say greatest_character([qw/e m u g/], q/b/);
    say greatest_character([qw/d c e f/], q/a/);
    say greatest_character([qw/j a r/],   q/o/);
    say greatest_character([qw/d c a f/], q/a/);
    say greatest_character([qw/t g a l/], q/v/);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
e
c
r
c
v
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Practically a one liner! Here we use &lt;code&gt;grep&lt;/code&gt; to filter out all the characters greater than 
the target. The results are then sorted and we return the first one. If all that yields no
result, say there are no characters greater than the target, the just return the target.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of 2 or more non-negative integers. Write a script to find out the 
smallest slice, i.e. contiguous subarray of the original array, having the degree of the 
given array.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub array_degree{
    my(@integers) = @_;
    my @counts;
    map { $counts[$_]++ } @integers;
    @counts = grep {defined} @counts;
    return [sort {$b &lt;=&gt; $a} @counts]-&gt;[0];
}

sub least_slice_degree{
    my(@integers) = @_;
    my @minimum_length_slice;
    my $minimum_length = @integers;
    my $array_degree = array_degree(@integers);
    for my $i (0 .. @integers - 1){
        for my $j ($i + 1 .. @integers - 1){
            if(array_degree(@integers[$i .. $j]) == $array_degree &amp;&amp; @integers[$i .. $j] &lt; $minimum_length){
                @minimum_length_slice = @integers[$i .. $j];
                $minimum_length = @minimum_length_slice;
            }
        }
    }
    return @minimum_length_slice;
}

MAIN:{
    say "(" . join(", ", least_slice_degree(1, 3, 3, 2)) . ")";
    say "(" . join(", ", least_slice_degree(1, 2, 1)) . ")";
    say "(" . join(", ", least_slice_degree(1, 3, 2, 1, 2)) . ")";
    say "(" . join(", ", least_slice_degree(1, 1 ,2 ,3, 2)) . ")";
    say "(" . join(", ", least_slice_degree(2, 1, 2, 1, 1)) . ")";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
(3, 3)
(1, 2, 1)
(2, 1, 2)
(1, 1)
(1, 2, 1, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I view this problem in two main pieces:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Compute the degree of any given array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate all contiguous slices of the given array and looking for a match on the 
criteria.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, with that in mind we perform (1) in &lt;code&gt;sub array_degree&lt;/code&gt; and then think of how we might 
best compute all those contiguous slices. Here we use a nested &lt;code&gt;for&lt;/code&gt; loop. Since we also
need to check to see if any of the computed slices have an array degree equal to the 
starting array we just do that inside the nested loop as well. This way we don't need to 
use any extra storage. Instead we just track the minimum length slice with matching array
degree. Once the loops exit we return that minimum length slice.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-189/"&gt;Challenge 189&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc189</id>
    <published>2022-11-06T18:58:00-05:00</published>
    <updated>2022-11-06T18:58:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Separate release branch for App::Puppet::Environment::Updater</title>
  <summary type="html"><![CDATA[<p>
The <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> provides a list of recently uploaded Perl modules and indicates,
among several other things, if they have some kind of a Continuous Integration configured. That's how I arrived to
<a href="https://metacpan.org/pod/App::Puppet::Environment::Updater">App::Puppet::Environment::Updater</a> and it took me quite some time
till I noticed that it has GitHub Action configured, but not in the default branch.
<p>
]]></summary>
  <updated>2022-11-06T11:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/separate-release-branch-for-app-puppet-environment-updater"/>  <id>https://perlmaven.com/separate-release-branch-for-app-puppet-environment-updater</id>
  <content type="html"><![CDATA[<p>
The <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> provides a list of recently uploaded Perl modules and indicates,
among several other things, if they have some kind of a Continuous Integration configured. That's how I arrived to
<a href="https://metacpan.org/pod/App::Puppet::Environment::Updater">App::Puppet::Environment::Updater</a> and it took me quite some time
till I noticed that it has GitHub Action configured, but not in the default branch.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>TPRF to support FOSDEM Participation</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem"/>
  <id>tag:news.perlfoundation.org,2022-11-04:/post/fosdem</id>
  <published>2022-11-04T18:59:25</published>
  <updated>2022-11-04T18:59:25</updated>
  <summary>
  <![CDATA[
     One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. To apply for a mini grant please send a completed 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. To apply for a mini grant please send a completed <a href="https://docs.google.com/document/d/1y2Aj7bByeuLJ2V3y0SPFKO0W_xlUVerfYl0ROhlOnjI/copy">application</a> to  fosdem2023-grants@perlfoundation.org. </p>

<p>Please note that grants will be awarded only to those applicants whose talks are selected for FOSDEM. TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) September 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_september_2022"/>
  <id>tag:news.perlfoundation.org,2022-11-01:/post/maintaining_perl_tonyc_september_2022</id>
  <published>2022-11-01T09:08:07</published>
  <updated>2022-11-01T09:08:07</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/09/01 Thursday  1.60 #20204 write up some tests, start on implementation  2.43 #20204 more work on implementation  4.03 2022/09/05 Monday  0.47 github notifications  0.55 #20143 research, comment  0.55 #17831 follow-up  0.50 #20207 review discussion, comment  1.72 #20204 more work on implementation  3.79 2022/09/06 Tuesday  0.15 review Coverity scan results and ask khw about it  0.40 github notifications 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/09/01      Thursday
 1.60           #20204 write up some tests, start on implementation</p>

<h1> 2.43           #20204 more work on implementation</h1>

<p>4.03</p>

<p>2022/09/05      Monday
 0.47           github notifications
 0.55           #20143 research, comment
 0.55           #17831 follow-up
 0.50           #20207 review discussion, comment</p>

<h1> 1.72           #20204 more work on implementation</h1>

<p>3.79</p>

<p>2022/09/06      Tuesday
 0.15           review Coverity scan results and ask khw about it
 0.40           github notifications
 0.60           #20189 write up a patch in branch 20189-setjmp, push for</p>

<h1>                CI</h1>

<p>1.15</p>

<p>2022/09/07      Wednesday
 0.17           #20189 look at CI failure, rebase, resubmit
 1.62           #20255 review discussion, testing, research, comment
 0.20           #20189 review CI results, make into PR 20264
 0.83           #20204 work on following the symlink chain
 3.10           #20204 testing, debugging, try to handle block devices too
                and fail, for now... (still need to do better symlink</p>

<h1>                chain tests)</h1>

<p>5.92</p>

<p>2022/09/08      Thursday
 0.23           review github notifications
 2.03           #20204 review CI results, test/debug/fix mingw failure,
                time for more tests, debugging, #20130 cleanup
 2.82           #20204 debug symlink following, debug strange result from</p>

<h1>                readlink, lrn2use readlink, fix issues, start full test</h1>

<p>5.08</p>

<p>2022/09/12      Monday
 1.05           github notifications
 1.02           #20204 look into CI failures, try to reproduce locally
 2.30           #20204 more try to reproduce, testing with DrMemory,
                repeated testing, restarting CI job (it mostly fails but
                occasionally succeeds)</p>

<h1> 0.65           #20128 review, research and briefly comment</h1>

<p>5.02</p>

<p>2022/09/13      Tuesday
 0.13           github notifications
 0.95           #20204 work on debugging code, can’t get unmodified code
                to fail in CI
 1.73           check if cygwin’s newlocale fix, fixed. Testing and</p>

<h1>                apparently it did fix, push for CI.</h1>

<p>2.81</p>

<p>2022/09/14      Wednesday
 0.05           cygwin: open PR 20299
 0.67           #20204 try to get it to fail again, local test to check if
                we can distinguish broken link from a missing file (we
                can’t in the initial CreateFileA)
 0.05           #20288 review and briefly comment</p>

<h1> 1.38           #20295 review logs and code, research and comment</h1>

<p>2.15</p>

<p>2022/09/15      Thursday
 1.27           github notifications
 1.03           look at moving lexical sub setup to pad setup time -
                research
 0.12           look at moving lexical sub setup to pad setup time -
                research
 1.13           #20204 fix missing SKIP:, modify win32_readlink() a bit,</p>

<h1>                testing, push</h1>

<p>3.55</p>

<p>2022/09/19      Monday
 1.10           #20271 review comments, comment
 1.20           #20310/#20180 review problem, proposed PR, comments
 0.18           #20314 review and approve
 0.08           #20315 review and approve
 0.35           #20199 fix a minor test issue
 0.27           #20199 re-word and expand commit message
 0.43           #20316 review and comments
 0.23           #20313 review and apply to blead
 0.20           #20312 review and apply to blead
 0.35           look into new build warnings, make pr 20318
 0.25           #20317 review and approve</p>

<h1> 0.17           #20311 review and comment</h1>

<p>4.81</p>

<p>2022/09/20      Tuesday
 0.28           #20322 review and comment
 0.70           #20311 follow-up
 0.73           look at coverity reported defect, work up fix and push for
                CI</p>

<h1> 0.07           check CI results and make PR 20323</h1>

<p>1.78</p>

<p>2022/09/21      Wednesday
 0.63           github notifications
 0.52           #20316 research, comment
 1.27           #20307 testing, debugging
 1.57           #20307 try to work out a test (existing tests don’t deal</p>

<h1>                with stdin)</h1>

<p>3.99</p>

<p>2022/09/22      Thursday
 0.50           github notifications
 1.28           #20307 re-work a bit, testing
 1.57           #20207 debug log4perl problem and make PR</p>

<h1>                https://github.com/mschilli/log4perl/pull/119</h1>

<p>3.35</p>

<p>2022/09/26      Monday
 0.17           github notifications
 0.40           #20307 rebase, retest and make PR #20351
 0.55           #20207 look into File::AptFetch failures
 1.58           #20207 work out the problem (error rather than eof unlike
                the other modules the original patch had an effect on),
                and supply a patch to the module
 0.22           #20350 review, research and comment
 1.02           #20344 review, get confused by macros, research, comment
 0.33           #19776 review, testing and comment
 0.18           #20329 review
 2.50           #16856 work through possible const fixes, find a</p>

<h1>                PL_splitstr bug and make PR #20352</h1>

<p>6.95</p>

<p>2022/09/27      Tuesday
 0.57           look at coverity reported defect and create PR 20353
 0.22           github notifications</p>

<h1> 0.28           #16856</h1>

<p>1.07</p>

<p>2022/09/28      Wednesday
 0.25           review mailing list discussion
 1.53           #20026 review, testing, comment
 3.32           #20291 / #20346 debugging failing modules (mostly
                BenchmarkAnything::Schema)</p>

<h1> 1.33           #20291 / #20346 debugging failing modules</h1>

<p>6.43</p>

<p>2022/09/29      Thursday
 0.37           github notifications
 0.13           #20344 review and approve
 0.58           read through RFC discussion
 0.38           #20355 review discussion and comment
 0.77           #20354 debugging</p>

<h1> 0.60           feature-class - review code, discussions</h1>

<p>2.83</p>

<p>2022/09/30      Friday
 0.22           comment on “not exists” thread
 0.33           look into current build warnings, only one, fix and push
                for CI
 0.40           fix preprocessor conditions for build warnin fix, testing
 0.45           #20354 debugging
 2.08           #20354 debugging, testing
 0.45           #20348 testing and comment</p>

<h1> 0.22           #20362 review discussion and T::HiRes Makefile.PL, comment</h1>

<p>4.15</p>

<p>Which I calculate is 68.86 hours.</p>

<p>Approximately 32 tickets were reviewed or worked on, and 2 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Dancer2: Skeleton</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-11-01T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-skeleton"/>  <id>https://perlmaven.com/dancer2-skeleton</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>List of new CPAN distributions – Oct 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/11/01/list-of-new-cpan-distributions-oct-2022/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AI-ParticleSwarmOptimization-MCE"&gt;AI-ParticleSwarmOptimization-MCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STRZELEC"&gt;STRZELEC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;1.002&lt;/td&gt;
&lt;td&gt;Particle Swarm Optimization (object oriented) with support for multi-core processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AI-ParticleSwarmOptimization-Pmap"&gt;AI-ParticleSwarmOptimization-Pmap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STRZELEC"&gt;STRZELEC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;1.005&lt;/td&gt;
&lt;td&gt;Particle Swarm Optimization (object oriented) with support for multi-core processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-CPANModules-WorkingWithCSV"&gt;Acme-CPANModules-WorkingWithCSV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Working with CSV (comma-separated value) data in Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-CPANModules-WorkingWithXLS"&gt;Acme-CPANModules-WorkingWithXLS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Working with Excel formats (XLS, XLSX) or other spreadsheet formats like LibreOffice Calc (ODS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-Color-Rust"&gt;Acme-Color-Rust&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Color example class using Rust + FFI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-Bazel"&gt;Alien-Bazel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WBRASWELL"&gt;WBRASWELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or build bazel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-CSFML"&gt;Alien-CSFML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SANKO"&gt;SANKO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.7&lt;/td&gt;
&lt;td&gt;Build and provide access to the official binding of SFML for the C language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-ghostunnel"&gt;Alien-ghostunnel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or install ghostunnel TLS proxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-SeismicUnixGui"&gt;App-SeismicUnixGui&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GLLORE"&gt;GLLORE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.80.0&lt;/td&gt;
&lt;td&gt;v0.80.0&lt;/td&gt;
&lt;td&gt;A graphical user interface for Seismic Unix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-UniqUtils"&gt;App-UniqUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Utilities related to unique lines and/or Unix uniq utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-WebSearchUtils"&gt;App-WebSearchUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;CLI utilites related to searching with search engines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Yabsm"&gt;App-Yabsm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NHUBBARD"&gt;NHUBBARD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3.11&lt;/td&gt;
&lt;td&gt;3.14&lt;/td&gt;
&lt;td&gt;a btrfs snapshot and backup management system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-denomfind"&gt;App-denomfind&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.250&lt;/td&gt;
&lt;td&gt;0.313&lt;/td&gt;
&lt;td&gt;&amp;auml;&amp;cedil;&amp;#8249;&amp;egrave;&amp;uml;&amp;#732;&amp;atilde;&amp;reg;2&amp;aring;&amp;#8364;&amp;#8249;&amp;atilde;&amp;reg;&amp;atilde;&amp;#8218;&amp;sup3;&amp;atilde;&amp;#402;&amp;#382;&amp;atilde;&amp;#402;&amp;sup3;&amp;atilde;&amp;#402;&amp;#8240;&amp;atilde;&amp;uml;&amp;atilde;&amp;atilde;&amp;reg;&amp;aelig;&amp;copy;&amp;#376;&amp;egrave;&amp;#402;&amp;frac12;&amp;atilde;&amp;#8218;&amp;#8217;&amp;aelig;&amp;auml;&amp;frac34;&amp;#8250;&amp;atilde;&amp;#8482;&amp;atilde;&amp;#8218;&amp;#8249;&amp;atilde;&amp;#8364;&amp;#8218;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-expskip"&gt;App-expskip&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.113&lt;/td&gt;
&lt;td&gt;0.113&lt;/td&gt;
&lt;td&gt;To see a large text file, 1st, 10th, 100th, 1000th .. lines are shown to see fewer lines. Output lines can be specifed by the options.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-ipchgmon"&gt;App-ipchgmon&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAVIES"&gt;DAVIES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.0.0&lt;/td&gt;
&lt;td&gt;1.0.6&lt;/td&gt;
&lt;td&gt;Watches for changes to public facing IP addresses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-numero2bgc"&gt;App-numero2bgc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;td&gt;Put colors on the background of each number from input text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-remotediff"&gt;App-remotediff&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KALDOR"&gt;KALDOR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.10&lt;/td&gt;
&lt;td&gt;1.10&lt;/td&gt;
&lt;td&gt;remote diff over rsync&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ArrayData-Lingua-Word-EN-Medical-Glutanimate"&gt;ArrayData-Lingua-Word-EN-Medical-Glutanimate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;Medical word list (English)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Author-Daemon-Site-Ptr-Bond"&gt;Author-Daemon-Site-Ptr-Bond&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAEMON"&gt;DAEMON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BmltClient-ApiClient"&gt;BmltClient-ApiClient&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BMLT"&gt;BMLT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;a Moose role for the BMLT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Chemistry-File-OPTIMADE"&gt;Chemistry-File-OPTIMADE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MERKYS"&gt;MERKYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;0.11&lt;/td&gt;
&lt;td&gt;OPTIMADE reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron"&gt;CryptoTron&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;Perl extension for blah blah blah&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-GetAccountJsonStr"&gt;CryptoTron-GetAccountJsonStr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Perl extension for use with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-GetAccount_JsonStr"&gt;CryptoTron-GetAccount_JsonStr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl extension for use with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-JsonHttp"&gt;CryptoTron-JsonHttp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Perl extension for use of with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-JsonRpc"&gt;CryptoTron-JsonRpc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Perl extension for use with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DB-SimpleKV"&gt;DB-SimpleKV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/YHPENG"&gt;YHPENG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Simple k/v interface to text configuration file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBIx-Class-ResultClass-TrackColumns"&gt;DBIx-Class-ResultClass-TrackColumns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001001&lt;/td&gt;
&lt;td&gt;0.001001&lt;/td&gt;
&lt;td&gt;Track changed columns original storage value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-RPC-RESTISH"&gt;Dancer2-Plugin-RPC-RESTISH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.01_02&lt;/td&gt;
&lt;td&gt;2.02&lt;/td&gt;
&lt;td&gt;Helper Test module that imports useful stuff.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Combination"&gt;Data-Combination&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DRCLAW"&gt;DRCLAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Hash and Array element combination generator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Commons-Image"&gt;Data-Commons-Image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Data object for Wikimedia Commons image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Image"&gt;Data-Image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Data object for image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Page-Nav"&gt;Data-Page-Nav&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LUCAS"&gt;LUCAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Module for pages navigation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Validate-OpenAPI"&gt;Data-Validate-OpenAPI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MERKYS"&gt;MERKYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;Validate and untaint input parameters via OpenAPI schema&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Devel-DieHandler-DumpDieArgs"&gt;Devel-DieHandler-DumpDieArgs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Dump content of die arguments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Device-Serial-SLuRM"&gt;Device-Serial-SLuRM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;communicate the SL&amp;Atilde;&amp;#8218;&amp;Acirc;&amp;micro;RM protocol over a serial port&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Exception-FFI-ErrorCode"&gt;Exception-FFI-ErrorCode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Exception class based on integer error codes common in C code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FFI-Platypus-Lang-Zig"&gt;FFI-Platypus-Lang-Zig&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Documentation and tools for using Platypus with the Zig programming language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Filesys-Notify-Win32-ReadDirectoryChanges"&gt;Filesys-Notify-Win32-ReadDirectoryChanges&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CORION"&gt;CORION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;read/watch directory changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Finance-Exchange"&gt;Finance-Exchange&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;represents a financial stock exchange object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Finance-MIFIR-CONCAT"&gt;Finance-MIFIR-CONCAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;provides CONCAT code generation out of client data according to MIFIR rules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Finance-YieldCurve"&gt;Finance-YieldCurve&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Handles interpolation on yield curves for interest rates and dividends&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Format-JSON-Stream"&gt;Format-JSON-Stream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;a stream of JSON data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Future-Queue"&gt;Future-Queue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.49&lt;/td&gt;
&lt;td&gt;0.49&lt;/td&gt;
&lt;td&gt;a FIFO queue of values that uses Futures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GFX-Tools"&gt;GFX-Tools&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.12&lt;/td&gt;
&lt;td&gt;v0.1.12&lt;/td&gt;
&lt;td&gt;several command line graphics tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GFX-Tools-Buffer"&gt;GFX-Tools-Buffer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.8&lt;/td&gt;
&lt;td&gt;v0.1.8&lt;/td&gt;
&lt;td&gt;array code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Game-NURBS"&gt;Game-NURBS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;v0.1.13&lt;/td&gt;
&lt;td&gt;Perl extension for manipulating NURBS curves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Game-Ninja"&gt;Game-Ninja&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.4&lt;/td&gt;
&lt;td&gt;v0.1.6&lt;/td&gt;
&lt;td&gt;Perl extension for making ninja games, e.g. beat &amp;#039;em ups like Double Dragon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Game-SDL"&gt;Game-SDL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;Perl extension for making games with SDL(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Geo-TCX"&gt;Geo-TCX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PATJOL"&gt;PATJOL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;Parse and edit and TCX activity and course files from GPS training devices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Graphics-ColorNames-Pantone"&gt;Graphics-ColorNames-Pantone&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LICHTKIND"&gt;LICHTKIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.50&lt;/td&gt;
&lt;td&gt;0.54&lt;/td&gt;
&lt;td&gt;RGB values of Pantone colors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Graphics-Toolkit-Color"&gt;Graphics-Toolkit-Color&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LICHTKIND"&gt;LICHTKIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.99_0&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;color palette creation tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/IO-FD"&gt;IO-FD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DRCLAW"&gt;DRCLAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.2&lt;/td&gt;
&lt;td&gt;faster accept, socket, listen, read, write and friends with file descriptors, not handles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LWP-Protocol-clipboard"&gt;LWP-Protocol-clipboard&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Get/set clipboard content through LWP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Lilith"&gt;Lilith&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;Work with Suricata/Sagan EVE logs and PostgreSQL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Math-Numerical"&gt;Math-Numerical&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MATHIAS"&gt;MATHIAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Algorithms for numerical functions (root findings, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Memcached-RateLimit"&gt;Memcached-RateLimit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Sliding window rate limiting with Memcached&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-Log-Role-Format"&gt;Mojo-Log-Role-Format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Add sprintf logging to Mojo::Log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-ShareDir"&gt;Mojo-ShareDir&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Shared files and directories as Mojo::File objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Tag-TO_HASH"&gt;MooX-Tag-TO_HASH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Controlled translation of Moo objects into Hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooseX-Types-Parameterized"&gt;MooseX-Types-Parameterized&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;td&gt;Create your own Parameterizable Types for Moose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-Gemini"&gt;Net-Gemini&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;a small gemini client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Org-To-ANSIText"&gt;Org-To-ANSIText&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Export Org document to text with ANSI color codes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Parse-H"&gt;Parse-H&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BOGDRO"&gt;BOGDRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;0.11&lt;/td&gt;
&lt;td&gt;A parser for C header files that calls the given subroutines when a symbol of a specified type is encountered.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pg-SQL-PrettyPrinter"&gt;Pg-SQL-PrettyPrinter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEPESZ"&gt;DEPESZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;Pretty printer for SQL queries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/REFECO-Blockchain-Contract-Solidity-ABI-Encoder"&gt;REFECO-Blockchain-Contract-Solidity-ABI-Encoder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/REFECO"&gt;REFECO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Contract Application Binary Interface argument encoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RF-Component"&gt;RF-Component&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.001&lt;/td&gt;
&lt;td&gt;1.001&lt;/td&gt;
&lt;td&gt;Compose RF component circuits and calculate values from objects (L, C, ESR, etc).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Sah-Schemas-Data-Sah"&gt;Sah-Schemas-Data-Sah&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Sah schemas related to Data::Sah&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Shell-Var-Reader"&gt;Shell-Var-Reader&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;Runs a sh or bash script and returns the variables that have been set as well as their values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SpecioX-XS"&gt;SpecioX-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;speed boost for Specio using Type::Tiny::XS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TableDataBundle-Business-ID-BPOM"&gt;TableDataBundle-Business-ID-BPOM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20221027.0.0&lt;/td&gt;
&lt;td&gt;20221027.0.0&lt;/td&gt;
&lt;td&gt;Collection of TableData:: modules related to Indonesia&amp;#039;s BPOM (Badan Pengawas Obat dan Makanan, or the National Agency or Drug and Food Control)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tags-HTML-Image-Grid"&gt;Tags-HTML-Image-Grid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Tags helper class for image grid.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Test-Spy"&gt;Test-Spy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BRTASTIC"&gt;BRTASTIC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;build mocked interfaces and examine call data easily&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Test2-Tools-Rustfmt"&gt;Test2-Tools-Rustfmt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Test that bundled Rust code is formatted according to Rust style guidelines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebFetch-RSS"&gt;WebFetch-RSS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/IKLUFT"&gt;IKLUFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.3.0&lt;/td&gt;
&lt;td&gt;0.3.0&lt;/td&gt;
&lt;td&gt;compatibility mode to access WebFetch::RSS under its previous name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebService-MyJSONs"&gt;WebService-MyJSONs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/POLETTIX"&gt;POLETTIX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Perl SDK to consume the MyJSONs web service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Wikibase-API"&gt;Wikibase-API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Wikibase API class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Wikibase-Datatype-Print"&gt;Wikibase-Datatype-Print&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Wikibase data types print.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WordList-EN-Medical-Glutanimate"&gt;WordList-EN-Medical-Glutanimate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;Medical word list (English)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/YAML-yq-Helper"&gt;YAML-yq-Helper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Wrapper for yq for various common tasks so YAML files can be manipulated in a manner to preserve comments and version header.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/pEFL"&gt;pEFL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLMAX"&gt;PERLMAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;Perl bindings for the Enlightenment Foundation Libraries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/sms-send-in-nicsms"&gt;sms-send-in-nicsms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INDRADG"&gt;INDRADG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Regional context SMS::Send driver to send messages via NIC&amp;#039;s SMS Gateway ( &lt;a href="https://smsgw.sms.gov.in" rel="nofollow"&gt;https://smsgw.sms.gov.in&lt;/a&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;82&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;42&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DRCLAW"&gt;DRCLAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LICHTKIND"&gt;LICHTKIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MERKYS"&gt;MERKYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STRZELEC"&gt;STRZELEC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAVIES"&gt;DAVIES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MATHIAS"&gt;MATHIAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SANKO"&gt;SANKO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BMLT"&gt;BMLT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/YHPENG"&gt;YHPENG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NHUBBARD"&gt;NHUBBARD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GLLORE"&gt;GLLORE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CORION"&gt;CORION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LUCAS"&gt;LUCAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KALDOR"&gt;KALDOR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WBRASWELL"&gt;WBRASWELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEPESZ"&gt;DEPESZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAEMON"&gt;DAEMON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INDRADG"&gt;INDRADG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BOGDRO"&gt;BOGDRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/POLETTIX"&gt;POLETTIX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BRTASTIC"&gt;BRTASTIC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PATJOL"&gt;PATJOL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/REFECO"&gt;REFECO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLMAX"&gt;PERLMAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/IKLUFT"&gt;IKLUFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-ParticleSwarmOptimization-MCE STRZELEC 1.000 1.002 Particle Swarm Optimization (object oriented) with support for multi-core processing AI-ParticleSwarmOptimization-Pmap STRZELEC 1.000 1.005 Particle Swarm Optimization (object oriented) with support for multi-core processing Acme-CPANModules-WorkingWithCSV PERLANCAR 0.001 0.001 Working with CSV (comma-separated value) data in Perl Acme-CPANModules-WorkingWithXLS PERLANCAR 0.001 0.001 Working with Excel formats (XLS, XLSX) … <a href="https://perlancar.wordpress.com/2022/11/01/list-of-new-cpan-distributions-oct-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Oct 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2000</id>
    <published>2022-11-01T00:12:26Z</published>
    <updated>2022-11-01T00:12:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#588 - TRPF, what’s in a name?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/588.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Few days ago, I came across the <a href="https://news.perlfoundation.org/post/announcements">official announcement</a> with regard to the name change. I saw mixed reaction on Facebook groups for <strong>Perl</strong> fans.</p>
<p><strong>So what is my (personal) view on the topic?</strong></p>
<p>I understand name change is not an easy decision, it must have been going on for days if not months. My view is to keep <strong>Perl</strong> and <strong>Raku</strong> separate. Having said, I like the name change at least it is better than what it was before. Since we are talking about name change, my suggestion is why not change it back to <strong>"Yet Another Society (YAS)"</strong> as it was before if I am not mistaken. Then have two separate board under its wings i.e. <strong>"The Perl Foundation (TPF)"</strong> and <strong>"The Raku Foundation (TRF)"</strong>. Also allow the individual board to decide the path they want to follow. This way we don't cross each others path and stay friendly. It sounds simple, isn't it? Not sure if it is easy to implement.</p>
<p>This name change brought back memories when I decided to change the name <strong>Perl Weekly Challenge</strong>. As you all know, right from day one, we decided to have both <strong>Perl</strong> and <strong>Raku</strong> as the main contributing languages. A few months later after the launch, I found the name not reflecting what actual happens on the ground. But I already had the domain <strong>perlweeklychallenge.org</strong> registered and all the actions were happening under the same domain. After discussing with some of my close friends, I decided to change it to a new domain, <strong>theweeklychallenge.org</strong>. To me, it makes more sense as we gradually opened up to many more languages, <strong>92</strong> to be precise as of today. It wasn't an easy decision for me to change the name and move everything to new domain. <strong>Gabor Szabo</strong> helped me with the domain switch and patch the old domain to divert trafic to the new domain. Everthing seems to be stable now but I still refer the team as <strong>Team PWC</strong> as it is very close to my heart.</p>
<p><strong>How was your experience with Hacktoberfest 2022?</strong></p>
<p>My contributions this time didn't meet the minimum requirement of the event. Although I submitted <strong>4 Pull Requests</strong> and all of them were accepted and merged by the author but only <strong>2 PR</strong> were counted as the other two PR were part of non-participating repositories. Having said, I am happy many of the <strong>Team PWC</strong> members got more than <strong>4 Pull Requests</strong> this time. Congratulations <strong>Team PWC</strong>.</p>
<p>If you want to have fun and share your knowledge every week with others then please do join us here on <a href="https://theweeklychallenge.org">The Weekly Challenge</a>. Also please don't forget to checkout the experience of our <a href="https://theweeklychallenge.org/champions">champions</a>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/588.html</id>
    <published>2022-10-31T10:00:00Z</published>
    <updated>2022-10-31T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Pairs Divided by Zero</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/10/30#pwc188" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given list of integers @list of size $n and divisor $k. Write a script to 
find out count of pairs in the given list that satisfies a set of rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub divisible_pairs{
    my($numbers, $k) = @_;
    my @pairs;
    for my $i (0 .. @{$numbers} - 1){
        for my $j ($i + 1 .. @{$numbers} - 1){
            push @pairs, [$i, $j] if(($numbers-&gt;[$i] + $numbers-&gt;[$j]) % $k == 0);
        }
    }
    return @pairs;
}

MAIN:{
    my @pairs;
    @pairs = divisible_pairs([4, 5, 1, 6], 2);
    print @pairs . "\n";
    @pairs = divisible_pairs([1, 2, 3, 4], 2);
    print @pairs . "\n";
    @pairs = divisible_pairs([1, 3, 4, 5], 3);
    print @pairs . "\n";
    @pairs = divisible_pairs([5, 1, 2, 3], 4);
    print @pairs . "\n";
    @pairs = divisible_pairs([7, 2, 4, 5], 4);
    print @pairs . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
2
2
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules, if not clear from the above code are : the pair (i, j) is eligible if and only 
if&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;0 &amp;lt;= i &amp;lt; j &amp;lt; len(list)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list[i] + list[j] is divisible by k&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While certainly possible to develop a more complicated looking solution using &lt;code&gt;map&lt;/code&gt; and 
&lt;code&gt;grep&lt;/code&gt; I found myself going with nested &lt;code&gt;for&lt;/code&gt; loops. The construction of the loop indices 
takes care of the first condition and the second is straightforward.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive integers $x and $y. Write a script to find out the number of 
operations needed to make both ZERO.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub count_zero{
    my($x, $y) = @_;
    my $count = 0;
    {
        my $x_original = $x;
        $x = $x - $y if $x &gt;= $y;
        $y = $y - $x_original if $y &gt;= $x_original;
        $count++;
        redo unless $x == 0 &amp;&amp; $y == 0;
    }
    return $count;
}

MAIN:{
    say count_zero(5, 4);
    say count_zero(4, 6);
    say count_zero(2, 5);
    say count_zero(3, 1);
    say count_zero(7, 4);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
5
3
4
3
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The operations are dictated by these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$x = $x - $y if $x &amp;gt;= $y&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$y = $y - $x if $y &amp;gt;= $x (using the original value of $x)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This problem seemed somewhat confusingly stated at first. I had to work through the first
given example &lt;a href="https://discord.com/channels/860900767665487872/860900767665487877/1036365182093496531"&gt;by hand&lt;/a&gt; 
to make sure I really understood what was going on. &lt;/p&gt;

&lt;p&gt;After a little analysis I realized this is not as confusing as I first thought. The main
problem I ran into was not properly accounting for the changed value of &lt;code&gt;$x&lt;/code&gt; using a 
temporary variable &lt;code&gt;$x_original&lt;/code&gt;. If you see my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2022/10/23"&gt;Prolog Solutions&lt;/a&gt; for this 
problem you can see how Prolog's immutable variables obviate this issue!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-188/"&gt;Challenge 188&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc188</id>
    <published>2022-10-30T19:24:00-04:00</published>
    <updated>2022-10-30T19:24:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Things I learned at PGConf.EU 2022</title>
    <link href="http://domm.plix.at/perl/2022_10_things_i_learned_at_pgconfeu.html"/>
    <id>http://domm.plix.at/perl/2022_10_things_i_learned_at_pgconfeu.html</id>
    <updated>2022-10-28T10:35:16+00:00</updated>
    <category term="perl"/>
    <summary>The biggest yearly European Postgres, PGConf.EU took place from 26th to 28th October in Berlin. As I have a bunch of friends in Berlin and like Postgres, I decided to attend. I also submitted a talk ...</summary>
    <content type="html">&lt;p&gt;The biggest yearly European &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt;, &lt;a href="https://2022.pgconf.eu/"&gt;PGConf.EU&lt;/a&gt; took place from 26th to 28th October in Berlin. As I have a bunch of friends in Berlin and like Postgres, I decided to attend. I also submitted a talk but wasn't accepted (which in the end did not surprise me, as they got more than 260 submissions and could only accept ~80). So after a nice and productive 8h train ride from Vienna to Berlin, I spend three very informative days at the conference, met up with my &lt;a href="https://berlin.pm.org/"&gt;Perl friends&lt;/a&gt; in a nice beer garden with a gigantic chestnut tree, and also spend a few nice evenings / breakfasts with various old friends who moved to Berlin ages ago. I got to cycle around quite a lot (very nice), but missed the Critical Mass on Friday (hanging around with friends was nicer...)&lt;/p&gt;

&lt;p&gt;Here are my slightly edited notes about what I learned (or at least try to remember) and/or found funny, directly from the train ride back to Vienna. The notes might contain errors and misunderstandings, so please do check out the slides of the talks, which are hopefully linked from the respective talk pages.&lt;/p&gt;

&lt;h3&gt;Day1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4072-efficient-graph-analysis-with-sqlpgq/"&gt;Efficient Graph Analysis with SQL/PGQ&lt;/a&gt; - Peter Boncz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Happy that I don't have enough data to worry about CPU cache hits&lt;/li&gt;
&lt;li&gt;Cypher (graph query language) looks .. complex&lt;/li&gt;
&lt;li&gt;"ASCII Art graph syntax" : &lt;code&gt;MATCH (x:Account)−[:isLocatedIn]−&amp;gt;(g:City)&amp;lt;−[:isLocatedIn]−(y:Account)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQL/PGQ is a new standard based on Cypher and similar prior art&lt;/li&gt;
&lt;li&gt;could be done with &lt;code&gt;with recursive&lt;/code&gt; but comparable recursive queries are much more complex&lt;/li&gt;
&lt;li&gt;But it would be nice to have it in Postgres (and I think it's planned?)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3831-changelog-vs-two-dimensional-time-what-works-better/"&gt;Changelog vs Two-dimensional time - what works better?&lt;/a&gt; - Henrietta Dombrovskaya&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Similar to "Temporal Tables" (which is an SQL standard to limit the validity of data to a given time range), but with one more dimension (hence "bi-temporal")&lt;/li&gt;
&lt;li&gt;https://github.com/hettie-d/pg_bitemporal&lt;/li&gt;
&lt;li&gt;Can be done in Postgres thanks to support for range types, infinity and GIST index&lt;/li&gt;
&lt;li&gt;"You can do that easily in one gigantic CTE"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT * FROM bitemp WHERE now()&amp;lt;@asserted and now()&amp;lt;@effective&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3864-brin-improvements-and-new-opclasses/"&gt;BRIN improvements and new opclasses&lt;/a&gt; - Tomas Vondra&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BTREEs are nice and useful, but large (on disk)&lt;/li&gt;
&lt;li&gt;BRIN only works (well) with proper data, eg append-only timestamps&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax_multi&lt;/code&gt; to work around outliers destorying index performance&lt;/li&gt;
&lt;li&gt;bloom-filter, good for uuid (do we need that for access-by-uuid? - not for primary key, so still need to check)&lt;/li&gt;
&lt;li&gt;"It's all about being smarter by not doing work that doesn't need to be done"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3936-performance-tips-you-have-never-seen-before/"&gt;Performance tips you have never seen before&lt;/a&gt; - Hans-Jürgen Schönig&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;latency matters (connect via localhost vs socket)&lt;/li&gt;
&lt;li&gt;column order matters for storage (first fixed size (int) due to "alignment", then relevant (esp for broad tables))&lt;/li&gt;
&lt;li&gt;index: &lt;code&gt;hashtext(email)&lt;/code&gt;, then &lt;code&gt;select ... where hashtext(email) = hashtext('serach@email') and email ='search@email'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pgstattuple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FDW fetch_size&lt;/li&gt;
&lt;li&gt;Fulltext index needs vacuum regularly (because new entries will be put into a pending list, which has to be seqscanned after checking the index and is only merged during vacuum)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3902-understanding-the-impact-of-materialized-ctes/"&gt;Understanding the impact of Materialized CTEs&lt;/a&gt; - Divya Sharma&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CTE always materialized to temporary table (before 12), 12+ has conditional materialization&lt;/li&gt;
&lt;li&gt;work_mem, enable_master&lt;/li&gt;
&lt;li&gt;recursive (or multiple references), "with sideeffect", &lt;code&gt;MATERIALZE&lt;/code&gt; =&gt; always materialize&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_series&lt;/code&gt; is not only used by consultants (as suggested by Hans-Jürgen Schönig earlier), but in ~50% of talks at pgconfeu :-)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOT MATERIALIZED&lt;/code&gt; -&gt; inline even though planer would not inline, which can be faster depending on indexes and the CTE. "It depends"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3985-no-array-of-sunshine-an-introduction-to-data-types-from-a-data-quality-perspective/"&gt;No Array of Sunshine: an Introduction to Data Types from a Data Quality Perspective&lt;/a&gt; - Renee Phillips&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Goldilocks and the tree data types =&gt; other talk to check out?&lt;/li&gt;
&lt;li&gt;Postgres is using 1-based array&lt;/li&gt;
&lt;li&gt;Don't use "NULL" as your vanity license plate&lt;/li&gt;
&lt;li&gt;True duplicates vs fake duplicates (eg times without timezone on timezone change)&lt;/li&gt;
&lt;li&gt;"You solve one problem, you create at least one more"&lt;/li&gt;
&lt;li&gt;Good talks, but a bit to basic for me&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3962-inside-the-machine-room-of-a-world-map-postgresql-and-openstreetmap/"&gt;Inside the machine room of a world map: PostgreSQL and OpenStreetMap&lt;/a&gt; - Sarah Hoffmann&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OSM is not using PostGIS!!&lt;/li&gt;
&lt;li&gt;it has three main data types: node, way, relation&lt;/li&gt;
&lt;li&gt;OSM is "a experiment to get away with as little as possible to achieve world domination"&lt;/li&gt;
&lt;li&gt;it is BIG!&lt;/li&gt;
&lt;li&gt;World-Dump takes ~2 days, so they are generated from a restored backup&lt;/li&gt;
&lt;li&gt;tileID bit-interleaved lat/lon&lt;/li&gt;
&lt;li&gt;9.5, because of index in transaction-id (which is not allowed after 9.6)&lt;/li&gt;
&lt;li&gt;osm2pgsql&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4015-a-comparison-of-postgresql-backup-tools/"&gt;A comparison of PostgreSQL backup tools&lt;/a&gt; - Matt Pearson&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't store backups on same partition as the data&lt;/li&gt;
&lt;li&gt;pg_dump for migrations but not (good) backup, slow&lt;/li&gt;
&lt;li&gt;pg_dumpall: all databases, includes roles&lt;/li&gt;
&lt;li&gt;Barman&lt;/li&gt;
&lt;li&gt;pgBackRest&lt;/li&gt;
&lt;li&gt;Unfortunately there were a few easily avoidable speaker errors: very small font size on the flowchart, don't turn back on audience&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3811-how-to-handle-1000-application-users/"&gt;How to handle 1000 application users&lt;/a&gt; - Laurenz Albe&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;always nice to hear Austrian English accents&lt;/li&gt;
&lt;li&gt;connection to DB is expensive, takes lot of server resources&lt;/li&gt;
&lt;li&gt;lot of connections makes SQL statements more expensive (because each idle connection has to be checked&lt;/li&gt;
&lt;li&gt;work_mem is per connections, so one cannot have high work_mem with lots of connection&lt;/li&gt;
&lt;li&gt;pg_stats_activity wait_events is probably bad&lt;/li&gt;
&lt;li&gt;no way to limit the number of active connections&lt;/li&gt;
&lt;li&gt;=&gt; connection pool&lt;/li&gt;
&lt;li&gt;less active connection = less CPU task switching&lt;/li&gt;
&lt;li&gt;prepared statements cannot be use with transactional pooling. Fix: put statement into PLSQL function&lt;/li&gt;
&lt;li&gt;application server pooling possible (but probably not for plack when we fork lots of processes)&lt;/li&gt;
&lt;li&gt;pgBouncer&lt;/li&gt;
&lt;li&gt;no more active connections than CPU-Cores / parallel I/O requests&lt;/li&gt;
&lt;li&gt;short queries; idle_in_transaction time should be short&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"How do you put an elephant in a container in 3 steps?"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;room full, so could not attend&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3934-neon-cloud-native-storage-backend-for-postgresql/"&gt;Neon, cloud-native storage backend for PostgreSQL&lt;/a&gt; - Heikki Linnakangas&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"postgres without storage" / separate compute from storage&lt;/li&gt;
&lt;li&gt;not in Postgres, needs patches and extension&lt;/li&gt;
&lt;li&gt;very cool, but probably not something I'll use&lt;/li&gt;
&lt;li&gt;"works very well on the powerpoint platform" :-)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3789-mvcc-unmasked/"&gt;MVCC Unmasked&lt;/a&gt; - Bruce Momjian&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi Version Concurrency Control&lt;/li&gt;
&lt;li&gt;reader don't block writers, writers don't block readers&lt;/li&gt;
&lt;li&gt;function vs procedure: all functions use same snapshot, procedures can "commit" snapshots&lt;/li&gt;
&lt;li&gt;very nice snapshot rule / row visibility slide&lt;/li&gt;
&lt;li&gt;transaction (ids) have an "aborted" flag, so the txnid still is in xmax, but ignored&lt;/li&gt;
&lt;li&gt;another nice slide about page layout, item-pointer, data; dead items, index pointer&lt;/li&gt;
&lt;li&gt;Very good talk explaining MVCC very well!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3860-google-alloydb-vs-amazon-aurora-vs-azure-hyperscale-comparison-of-databases-build-for-clouds/"&gt;Google AlloyDB vs. Amazon Aurora vs. Azure Hyperscale: comparison of databases build for clouds&lt;/a&gt; - Taras Kloba&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice summary slide at the start (with different types of cars)&lt;/li&gt;
&lt;li&gt;Each provider seem to change quite a bit in Postgres, not sure I like that&lt;/li&gt;
&lt;li&gt;Not too relevant for me, to cloudy&lt;/li&gt;
&lt;li&gt;But I found a power outlet and migrated my mastodon account to (https://social.linux.pizza/@domm)[https://social.linux.pizza/@domm]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time-series, PostgreSQL, and You&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;small room, lots of persons =&gt; this conf needs a better "query planner" :-)&lt;/li&gt;
&lt;li&gt;again I could not attend&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4033-what-happens-when-stack-overflow-doesnt-have-an-answer-comparing-st_within-h3-for-spatial-queries/"&gt;What happens when stack overflow doesn’t have an answer? comparing ST_within &amp;amp; H3 for spatial queries&lt;/a&gt; - Kshitij Purwar&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Power plant emission stats by analysing arial / satelite images and  checking exhausts plumes, very smart!&lt;/li&gt;
&lt;li&gt;Use H3 (by Uber) to improve performance of a spatial query&lt;/li&gt;
&lt;li&gt;uses a hexagonal grid&lt;/li&gt;
&lt;li&gt;H3 is hard to install&lt;/li&gt;
&lt;li&gt;audience comment: alternatives could be st_simplified / st_subdivide&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Berlin.pm&lt;/h3&gt;

&lt;p&gt;At the Berlin.pm meeting I had a nice few hours of chats, good food and drinks (well, Fassbrause), found a big fan of &lt;a href="https://oe1.orf.at"&gt;oe1.orf.at&lt;/a&gt; and a wrench to fix my bike and also learned about
  * &lt;a href="https://f4maps.com"&gt;F4Maps&lt;/a&gt;
  * The Critical Mass mobile app which allows you to share your current location and see the location of other riders in the area, so you can find where the CM is currently (nice if you missed the start or want to wait until they pass by your current location).&lt;/p&gt;

&lt;h3&gt;Day 3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3950-full-page-writes-in-postgresql-critical-evil-or-both-why-you-should-care-and-how-to-optimize/"&gt;Full Page Writes in PostgreSQL - Critical, Evil or Both - Why you should care and how to optimize&lt;/a&gt; - Grant McAlister&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you turn off &lt;code&gt;full_pages_writes&lt;/code&gt;, your database will be much faster. But you'll have data corruption :-)&lt;/li&gt;
&lt;li&gt;I know nothing about WAL/pagewrites/checkpoints, ...&lt;/li&gt;
&lt;li&gt;touching pages is bad, inserting/indexing uuids touches a lot of pages because they are random&lt;/li&gt;
&lt;li&gt;nice slide on partitioning to reduce block size&lt;/li&gt;
&lt;li&gt;I should read some intro docs...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3999-practical-transactions-theory-for-postgresql-users/"&gt;Practical transactions theory for PostgreSQL users&lt;/a&gt; -  Ilya Kosmodemiansky&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ACID (ACI = memory, D = disk)&lt;/li&gt;
&lt;li&gt;Phase Locking: slow, deadlock ("Reißverschlussverfahren")&lt;/li&gt;
&lt;li&gt;Multi Version 2 Phase Locking = MVCC&lt;/li&gt;
&lt;li&gt;hah, more page explanation: data in 8kb chunks&lt;/li&gt;
&lt;li&gt;xmin/xmax again :-)&lt;/li&gt;
&lt;li&gt;still hard to read xmax not as xmas&lt;/li&gt;
&lt;li&gt;transaction handling happens in SharedMem, so Postgres processes one one machine can talk to each other fast&lt;/li&gt;
&lt;li&gt;"An elephant never forgets"&lt;/li&gt;
&lt;li&gt;Advisory locks for rare critical cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select xmin from table&lt;/code&gt; just works, I thought it needs some magic, but those fields are just invisible internal columns&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3999-practical-transactions-theory-for-postgresql-users/"&gt;Breaking the sound barrier - Applications at light speed&lt;/a&gt; -  Henrietta Dombrovskaya, Jan Karremans&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data -&gt; program -&gt; data (punchcards)&lt;/li&gt;
&lt;li&gt;programs &amp;lt;-&gt; data, needs DBMS (concurrency, security, ..)&lt;/li&gt;
&lt;li&gt;DBMS = "specialised software designed to manage data in the most efficient way"&lt;/li&gt;
&lt;li&gt;"Database agnostic Apps" are a hoax, no one switches databases (my comment: But there are database agnostic apps like CMS that target multiple DBMS)&lt;/li&gt;
&lt;li&gt;3Ps: Performance, Performance, Performance&lt;/li&gt;
&lt;li&gt;Devs: "Database is the source of all slowness"; DBAs: "Yes, if devs write stupid queries or let even stupider ORMs generate the stupidest SQL" (my words)&lt;/li&gt;
&lt;li&gt;Relational DB and OO App hate each other = object relation impedance mismatch&lt;/li&gt;
&lt;li&gt;Business Logic split into "Application business logic" (in the app) and "Data business logic" (in the DBMS)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hettie-d/NORM"&gt;NORM - No ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;App &amp;lt;=&gt; Transfer Model (JSON) &amp;lt;=&gt; DB&lt;/li&gt;
&lt;li&gt;Generate DB functions from JSON Schema&lt;/li&gt;
&lt;li&gt;Audience Comment: Devs don't think with the relation model, Maybe relational DBMS are the problem?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lunch break&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are the odds of two people meeting at 600 person conference that not only know about &lt;a href="https://www.loc.gov/marc/bibliographic/bd034.html"&gt;MARC21 034$s + $t&lt;/a&gt;, but have recently submitted &lt;a href="https://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=31652"&gt;some&lt;/a&gt; &lt;a href="https://github.com/postgis/postgis/pull/659"&gt;patches&lt;/a&gt; regarding this field?&lt;/li&gt;
&lt;li&gt;Whatever the odds, it did happen :-)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4034-table-partitioning-transparent-but-no-magic/"&gt;Table Partitioning - Transparent but No Magic&lt;/a&gt; - Boriss Mejias&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first known partitioning implementation was Moses receiving the 10 commandments on two stone tablets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timestamp(0)&lt;/code&gt; - no milliseconds, not needed for a lot of things, smaller tables, better&lt;/li&gt;
&lt;li&gt;Very nice use of a game controller to illustrate that an index does not fix into RAM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[di, dj[&lt;/code&gt; - inclusive range vs exclusive range&lt;/li&gt;
&lt;li&gt;partitions are transparent, so &lt;code&gt;select count(*)&lt;/code&gt; has to go through all partitioned tables&lt;/li&gt;
&lt;li&gt;dynamic pruning: &lt;code&gt;select where date &amp;gt; now() - 1 month&lt;/code&gt; will pick Oct and Sept&lt;/li&gt;
&lt;li&gt;partition key does not need to be in where clause, could be in order_by&lt;/li&gt;
&lt;li&gt;might plan all the partition, but does not execute all of them ("only clean up kitchen")&lt;/li&gt;
&lt;li&gt;getting the query right is fundamental, CTEs help, but actual values seem to have to be used via subselect instead of join&lt;/li&gt;
&lt;li&gt;partition large table when the have a logical partition key; need to use that key!!&lt;/li&gt;
&lt;li&gt;partition by hash (eg hashed user id, modulo(n))&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3819-the-curious-case-of-the-point-of-sales-and-why-we-still-need-pglogical/"&gt;The curious case of the point of sales, and why we still need pglogical&lt;/a&gt; - Jaime Casanova&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replication data to a lot of POS over bad network&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pglogical.forward_origins&lt;/code&gt; as a very weird data structure (empty array, or empty array with exactly one value &lt;code&gt;all&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;central&lt;/code&gt; is not enough, add another &lt;code&gt;central2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"oh du lieber execute, alles ist hin"&lt;/li&gt;
&lt;li&gt;faceting, roaring bitmaps =&gt; pgfaceting&lt;/li&gt;
&lt;li&gt;There are Postgres shibboleth in hiring (just like in PERL^wperl^wPerl)&lt;/li&gt;
&lt;li&gt;pg_crash - if your database is too reliable: "crash as a service"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert .. on conflict&lt;/code&gt; does nothing, whereas &lt;code&gt;insert&lt;/code&gt; with error generates dead tuples (which is bad for page writes etc)&lt;/li&gt;
&lt;li&gt;postgres.conf settings should be adapted for modern hard drives (because defaults target the lowest common denominator)&lt;/li&gt;
&lt;li&gt;random_page_cost (1 or 1.1) &gt;= seq_page_count&lt;/li&gt;
&lt;li&gt;max_wal_size should be bigger than 1G ? but my DB is only 10GB?&lt;/li&gt;
&lt;li&gt;autovacuum_vacuum_cost_delay 2ms&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;General notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scheduling is hard
&lt;ul&gt;
&lt;li&gt;There weren't a lot of beginner talks (but I guess the conference is not targeted at beginners..)&lt;/li&gt;
&lt;li&gt;Some talks referenced each other, but where in the "wrong order", i.e. a very detailed talk before a more general introduction.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I need to talk with the orgas if we (Perl) can use their conference software for our events&lt;/li&gt;
&lt;li&gt;Some stats from the closing speech:
&lt;ul&gt;
&lt;li&gt;600 attendees, 599 showed up (I just wonder if these where the same 599 people...)&lt;/li&gt;
&lt;li&gt;150 speakers / 260 talks submitted&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;My new varifocal glasses (yes, I'm that old) don't work well with the setup in the smaller rooms (flat floor and low hanging monitors) because I have to tilt my head to see above the heads in front of me, which results in me viewing through the "near" zone of the multifocals, which makes the slides (which are not near..) hard to read.&lt;/li&gt;
&lt;li&gt;Is it now considered polite to thank speakers for their talk when asking a question, or is this a Postgresconf thing?&lt;/li&gt;
&lt;li&gt;Lot of DBAs, few devs, and they (DBAs) don't like us (Devs) very much :-)&lt;/li&gt;
&lt;li&gt;I used to mostly attend Perl conferences, where I'm quite well known and know a lot of people (inside jokes), and spend less time in talks and more in the hallway track. It's an interesting experience to once again attend an event as some random person with hardly any connections to other attendees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always: A big Thank-you to the orgas, speakers, sponsors and attendees!&lt;/p&gt;
</content>
    <category term="event"/>
    <category term="PostgreSQL"/>
  </entry>
</feed>
