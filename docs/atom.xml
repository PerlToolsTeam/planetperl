<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-02-09T00:58:24Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>#550 - Perl &amp; Unicode</title>
    <link rel="alternate" href="https://perlweekly.com/archive/550.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Are you Unicode fan?</p>
<p>Personally, I am not. Reason, I still struggle to get my head around it. During my early days of learning, I never got the opportunity to work with Unicode. So far, I never had to extensively deal with Unicode characters. There is so much information available on internet. I remember, long time ago, I was dealing with well known warning <strong>Wide character in print</strong>. After a quick search, I came across this <a href="https://stackoverflow.com/questions/15210532/use-of-use-utf8-gives-me-wide-character-in-print">thread</a> by <strong>Dave Cross</strong>. I have kept it bookmark for future reference. I am repeating myself as I remember talking about in the <a href="https://perlweekly.com/archive/498.html">weekly newsletter</a> earlier. It is worth sharing with the readers again and again.</p>
<p>However, there is another reason why I am talking about it today. Let me share gem of an <a href="https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7">article</a> by <strong>David Cantrell</strong>. The article gives us inside out knowledge about Unicode, specially for a Perl developer. It has cleared most of my doubts, so a big thanks to <strong>David</strong> for such a great article. It also introduced me to a new word, <strong>Mojibake</strong>. A friend of mine on Facebook, suggested a CPAN module, <a href="https://metacpan.org/pod/Test::Mojibake">Test::Mojibake</a> which is very handy. I wish there was dedicated book on Perl and Unicode. Having said, I found this <a href="https://en.wikibooks.org/wiki/Perl_Programming/Unicode_UTF-8">Wikibook</a> on the subject, you may want to explore.</p>
<p>I came across <a href="https://www.youtube.com/watch?v=MijmeoH9LT4">YouTube video</a> that explains the Unicode in general that any layman can easily understand as well. I loved it the way it is explain in a casual way. The guy in the video makes it so simple.</p>
<p>Let's talk about regex in Perl.</p>
<p>I am sure you have used regex in Perl at some point in your career. Few days ago, I found out a clever piece of regex shared by Abigail. The use of //g in list context. It completely blown me away. Later someone pointed me to the official Perl <a href="https://perldoc.perl.org/perlre#Repeated-Patterns-Matching-a-Zero-length-Substring">documentation</a> talking about it. If you are curious to know more about it then I would suggest you please take a look at his <a href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-150-1.html">blog post</a>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/550.html</id>
    <published>2022-02-07T10:00:00Z</published>
    <updated>2022-02-07T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Hello World</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-02-07T08:00:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-hello-world"/>  <id>https://perlmaven.com/dancer2-hello-world</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>TWC 150: bAbAbbAb and a few Composites</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2022/02/twc-150-bababbab-and-a-few-composites.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10664</id>
    <published>2022-02-07T03:26:35Z</published>
    <updated>2022-02-07T04:45:48Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="Dart" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="dart" label="Dart" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="Raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which we see Leonardo outside his native Nums, and that the World is not made of Ones.</p>

<p>(Placeholder; still editing)</p>

<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/#TASK1">Fibonacci Words</a></h1>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-150/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-150/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-150/bruce-gray/dart/ch-1.dart">Dart</a></h2>

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/#TASK2">Square-free Integer</a></h1>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-150/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-150/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-150/bruce-gray/dart/ch-2.dart">Dart</a></h2>
]]>
        

    </content>
</entry>
  <entry>
    <title>Fibonacci Words That Yearn to Be Squarefree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/02/06#pwc150" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two strings having the same number of digits, $a and $b. Write a script to 
generate Fibonacci Words by concatenation of the previous two strings. Print the 51st &lt;br /&gt;
of the first term having at least 51 digits.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub _fibonacci_words_51{
    my($accumulated) = @_;
    my $i = @{$accumulated} - 1;
    my $next = $accumulated-&gt;[$i - 1] . $accumulated-&gt;[$i];
    return substr($next, 51 - 1, 1) if length($next) &gt;= 51;
    push @{$accumulated}, $next;
    _fibonacci_words_51($accumulated);
}

sub fibonacci_words{
    my($u, $v) = @_;
    return _fibonacci_words_51([$u, $v]);
}

MAIN:{
    print fibonacci_words(q[1234], q[5678]) . "\n";    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
7
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Fibonacci sequences are often an introductory example of recursion. This solution keeps 
with that recursive tradition. &lt;code&gt;sub _fibonacci_words_51&lt;/code&gt; takes a single argument, an array 
reference which stores the sequence terms. At each recursive step the next term is 
computed and checked for the terminating condition.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate all square-free integers &amp;lt;= 500.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant LIMIT =&gt; 500;

sub prime_factor{
    my $x = shift(@_); 
    my @factors;    
    for (my $y = 2; $y &lt;= $x; $y++){
        next if $x % $y;
        $x /= $y;
        push @factors, $y;
        redo;
    }
    return @factors;  
}

sub square_free{
    my @square_free;
    for my $x (1 .. LIMIT){
        my @factors = prime_factor($x);
        my @a;
        map {$a[$_]++} @factors;
        @a = grep {$_ &amp;&amp; $_ &gt; 1} @a;
        push @square_free, $x if !@a;
    }
    return @square_free;
}

main:{
    print join(", ", square_free()) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 46, 47, 51, 53, 55, 57, 58, 59, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 77, 78, 79, 82, 83, 85, 86, 87, 89, 91, 93, 94, 95, 97, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 122, 123, 127, 129, 130, 131, 133, 134, 137, 138, 139, 141, 142, 143, 145, 146, 149, 151, 154, 155, 157, 158, 159, 161, 163, 165, 166, 167, 170, 173, 174, 177, 178, 179, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 205, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 241, 246, 247, 249, 251, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 267, 269, 271, 273, 274, 277, 278, 281, 282, 283, 285, 286, 287, 290, 291, 293, 295, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 313, 314, 317, 318, 319, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 337, 339, 341, 345, 346, 347, 349, 353, 354, 355, 357, 358, 359, 362, 365, 366, 367, 370, 371, 373, 374, 377, 379, 381, 382, 383, 385, 386, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 409, 410, 411, 413, 415, 417, 418, 419, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 449, 451, 453, 454, 455, 457, 458, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 478, 479, 481, 482, 483, 485, 487, 489, 491, 493, 494, 497, 498, 499
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This solution makes use of &lt;code&gt;sub prime_factor&lt;/code&gt; which frequently comes in handy in these
challenges. Beyond getting the prime factors the only other requirement is to determine
that none are repeated. This is done by a counting array, created with a &lt;code&gt;map&lt;/code&gt; and then
checked with &lt;code&gt;grep&lt;/code&gt; for any entries greater than 1. If such an entry exists then we know
that there was a duplicate prime factor and that number is not square free.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/"&gt;Challenge 150&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Squarefree.html"&gt;Squarefree Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc150</id>
    <published>2022-02-06T17:00:00-05:00</published>
    <updated>2022-02-06T17:00:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Dist::Zilla::Plugin::SignReleaseNotes version 0.0006</title>
    <link rel="alternate" href="https://dev.to/timlegge/distzillapluginsignreleasenotes-version-00006-4dcd" type="text/html"/>
    <content type="html">&lt;p&gt;Dist::Zilla::Plugin::SignReleaseNotes is a perl module to automatically create and gpg sign release notes as part of a Dist::Zilla release flow.&lt;/p&gt;

&lt;p&gt;The release notes include all of the commits between the most recent tags in your git repository.  It assumes that your Dist::Zilla flow is tagging the repo as part of the release process.&lt;/p&gt;

&lt;p&gt;The produced Release-{version} file is created in the root of the module directory and includes the sha-256 hash of the file that is released to CPAN. &lt;/p&gt;

&lt;p&gt;The use case is to simplify creating release notes on github and similar and to have a developer certified (via a gpg signature) sha256 hash of the file as it was uploaded to cpan.  There has been more attention being paid to ensuring the authenticity of releases and this module is my way of helping that (but mostly simplifying my release process).&lt;/p&gt;

&lt;p&gt;The following is a sample of the release notes created:&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
-----BEGIN PGP SIGNED MESSAGE-----&lt;br&gt;
Hash: RIPEMD160&lt;/p&gt;

&lt;p&gt;Dist::Zilla::Plugin::SignReleaseNotes&lt;/p&gt;

&lt;p&gt;Release 0.0006&lt;/p&gt;

&lt;p&gt;Change Log&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1e5d7ed v0.0006&lt;/li&gt;
&lt;li&gt;dd458e2 Update version&lt;/li&gt;
&lt;li&gt;3249fd6 Fix typo in sample&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SHA256 hash of CPAN release&lt;/p&gt;

&lt;p&gt;0266e366e2c975adc03a4de9109d80cb9aac8fc897419e8f3a72d54c60fb3a0b *Dist-Zilla-Plugin-SignReleaseNotes-0.0006.tar.gz&lt;/p&gt;

&lt;p&gt;-----BEGIN PGP SIGNATURE-----&lt;br&gt;
iQIzBAEBAwAdFiEEMguXHBCUSzAt6mNu1fh7LgYGpfkFAmH/6XAACgkQ1fh7LgYG&lt;br&gt;
pflnUA/+LzT9YMkjNebM3TP2SAAxl4tYbOi/WvE8ipOLq1LLnIihjEvRL+ajtfGP&lt;br&gt;
F75MwkjZvy8FpDZXYUKt5JQykT9aqvB9zVb2IoqOCcUOp3OZKefMZbHQzDfckaSC&lt;br&gt;
H7O65bAXWM6AVCmXr6OmHegvbODi92DAB7YPDoWEVl5OT29hIhmBeK3QwFi/cnJo&lt;br&gt;
7k/le8AcarxXCnRMNMs8Tr9yCYjHyExMyhEPkk6TzHVyFerFV12S57X2yKR5gk/H&lt;br&gt;
XO1r+K3vCow68Q3TcxRcM1K7eJ0pr+gdulvZImy+12OhVddTkeZ3UEDIjSdRI4Av&lt;br&gt;
hFT8PahaINgif0KAMJovwlwolX3T06cHMTgo4CdQPm/wCgYaU5twAUKv+KesgakR&lt;br&gt;
8KKESMqO8EJBm7ig2WIBqUS2NZEel7Q4DEqlG6qQKh4WDiNs+IgyEfxssuh5CKAq&lt;br&gt;
Edat5YN4reQxrLDNNkrzdHGKemM6PEb4GZeK9o9ougQv3rwV+D8XZuz3bO8HlurN&lt;br&gt;
cIpby/5kZXveAypOf34p98612YmjN800t3UDeeNsvzM9eqolDPycfCljHEB4Vp3I&lt;br&gt;
y35xT3+tnbn0I3TFZfz/O7AZh4/0ELgWeBAK5VltqyXL2BVd3u1DcP4m4DtYVxhy&lt;br&gt;
G2uKvRgZI3PfbtrDUQj3VGG5Vb8wj3L9PNKghhLmm3hR3gV8m9o=&lt;br&gt;
=UGb3&lt;br&gt;
-----END PGP SIGNATURE-----&lt;br&gt;
`&lt;/p&gt;

</content>
    <author>
      <name>Timothy Legge</name>
    </author>
    <id>https://dev.to/timlegge/distzillapluginsignreleasenotes-version-00006-4dcd</id>
    <published>2022-02-06T15:52:05Z</published>
    <updated>2022-02-06T15:52:05Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 150</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-150-4fmn" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-150/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-150/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-fibonacci-words">
  </a>
  TASK #1 › Fibonacci Words
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given two strings having same number of digits, <code>$a</code> and <code>$b</code>.</p>

<p>Write a script to generate Fibonacci Words by concatenation of the previous two strings. Finally print 51st digit of the first term having at least 51 digits.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>So there is probably some numbers theory about determining which character is the 51st character in a Fibonacci word, but given the small size we are dealing with, it's just easier to do the calculation.</p>

<p>After some basic error checking (we have two strings of the same size), I loop (at least once) adding the two last strings together until we have a string at least 51 characters long. Then I get the fifty first character and display it.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 1234 5678
7

$ ./ch-1.pl 1234 5678
7
</code></pre>

</div>



<h2>
  <a href="#task-2-squarefree-integer">
  </a>
  TASK #2 › Square-free Integer
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>Write a script to generate all square-free integers &lt;= 500.</p>

<p>In mathematics, a square-free integer is an integer which is divisible by no perfect square other than 1. That is, its prime factorization has exactly one factor for each prime that appears in it. For example, 10 = 2 × 5 is square-free, but 18 = 2 × 3 × 3 is not, because 18 is divisible by 9 = 3<sup>2</sup>.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>There is usually a fine line between optimization, and over-optimization, especially when dealing with small numbers. Hopefully I have the right balance here. There are 21 squares between 2 and 500. Of those, only 8 are from primenumbers. The rest are composites of two other squares. For example, 6<sup>2</sup> = 2<sup>2</sup> × 3<sup>2</sup>. Regardless, I put all squares in a list (array in Perl) called <code>sqaures</code>.</p>

<p>I then work through all numbers from 1 to 500 and add them to the <code>solutions</code> list if the number is not perfectly divisible by the values in the <code>squares</code> array.</p>

<p>I probably could have used the lambda call (map in Perl) for even tighter code, but this would reduce the readability of the code.</p>

<h3>
  <a href="#example">
  </a>
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 
1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 46, 47, 51, 53, 55, 57, 58, 59, 61, 62, 65, 66, 67, 69, 70, 71, 73, 74, 77, 78, 79, 82, 83, 85, 86, 87, 89, 91, 93, 94, 95, 97, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 118, 119, 122, 123, 127, 129, 130, 131, 133, 134, 137, 138, 139, 141, 142, 143, 145, 146, 149, 151, 154, 155, 157, 158, 159, 161, 163, 165, 166, 167, 170, 173, 174, 177, 178, 179, 181, 182, 183, 185, 186, 187, 190, 191, 193, 194, 195, 197, 199, 201, 202, 203, 205, 206, 209, 210, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 226, 227, 229, 230, 231, 233, 235, 237, 238, 239, 241, 246, 247, 249, 251, 253, 254, 255, 257, 258, 259, 262, 263, 265, 266, 267, 269, 271, 273, 274, 277, 278, 281, 282, 283, 285, 286, 287, 290, 291, 293, 295, 298, 299, 301, 302, 303, 305, 307, 309, 310, 311, 313, 314, 317, 318, 319, 321, 322, 323, 326, 327, 329, 330, 331, 334, 335, 337, 339, 341, 345, 346, 347, 349, 353, 354, 355, 357, 358, 359, 362, 365, 366, 367, 370, 371, 373, 374, 377, 379, 381, 382, 383, 385, 386, 389, 390, 391, 393, 394, 395, 397, 398, 399, 401, 402, 403, 406, 407, 409, 410, 411, 413, 415, 417, 418, 419, 421, 422, 426, 427, 429, 430, 431, 433, 434, 435, 437, 438, 439, 442, 443, 445, 446, 447, 449, 451, 453, 454, 455, 457, 458, 461, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 478, 479, 481, 482, 483, 485, 487, 489, 491, 493, 494, 497, 498, 499
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-150-4fmn</id>
    <published>2022-02-06T10:47:38Z</published>
    <updated>2022-02-06T10:47:38Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5756284421212247983</id>
    <published>2022-02-05T21:14:00.000+01:00</published>
    <updated>2022-02-05T21:14:35.702+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxviii) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052001&lt;/strong&gt; on 2022-02-01&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.052000 was 2 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/CGI-4.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CGI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handle Common Gateway Interface requests and responses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.54&lt;/strong&gt; on 2022-02-03&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.53 was 8 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIKIHOSHI/Devel-Cover-Report-Coveralls-0.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::Cover::Report::Coveralls&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - coveralls backend for Devel::Cover &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.31&lt;/strong&gt; on 2022-01-31&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.30 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/Dios-0.002012' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dios&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Declarative Inside-Out Syntax &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.002012&lt;/strong&gt; on 2022-02-04&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.002011 was 4 years, 5 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/GD-2.76' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GD&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the gd2 graphics library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.76&lt;/strong&gt; on 2022-02-01&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 2.75 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/Minilla-v3.1.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.15&lt;/strong&gt; on 2022-01-31&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.14 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SHAY/mod_perl-2.0.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;mod_perl2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Apache mod_perl changes logfile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.0.12&lt;/strong&gt; on 2022-01-30&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 2.0.11 was 2 years, 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.60&lt;/strong&gt; on 2022-02-02&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.59 was 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.072' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.072&lt;/strong&gt; on 2022-01-30&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.019 was 3 years, 8 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/PPI-1.272' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse, Analyze and Manipulate Perl (without perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.272&lt;/strong&gt; on 2022-02-02&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.271 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9501' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9501&lt;/strong&gt; on 2022-02-04&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9132 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5756284421212247983/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxviii-11-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5756284421212247983"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5756284421212247983"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/ccclxxviii-11-great-cpan-modules.html" title="(ccclxxviii) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6291340396609703861</id>
    <published>2022-02-05T21:10:00.002+01:00</published>
    <updated>2022-02-05T21:10:54.003+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcvii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 40&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/02/05 20:10:35 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Barcode::ZBar" target="_blank"&gt;Barcode::ZBar&lt;/a&gt; - Perl interface to the ZBar Barcode Reader&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Catalyst::Plugin::DetachIfNotModified" target="_blank"&gt;Catalyst::Plugin::DetachIfNotModified&lt;/a&gt; - Short-circuit requests with If-Modified-Since headers&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Prereqs::From::cpmfile" target="_blank"&gt;Dist::Zilla::Plugin::Prereqs::From::cpmfile&lt;/a&gt; - Register prereqs from cpmfile&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::PMFile" target="_blank"&gt;Parse::PMFile&lt;/a&gt; - parses .pm file as PAUSE does&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Policy::PreferredModules" target="_blank"&gt;Perl::Critic::Policy::PreferredModules&lt;/a&gt; - Provide custom package recommendations&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::Const" target="_blank"&gt;Types::Const&lt;/a&gt; - Types that coerce references to read-only&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Dex" target="_blank"&gt;App::Dex&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::plx" target="_blank"&gt;App::plx&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Iterator" target="_blank"&gt;Array::Iterator&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autocroak" target="_blank"&gt;autocroak&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Business::Tax::VAT::Validation" target="_blank"&gt;Business::Tax::VAT::Validation&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Const::Fast" target="_blank"&gt;Const::Fast&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Bcrypt" target="_blank"&gt;Crypt::Bcrypt&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Natural" target="_blank"&gt;DateTime::Format::Natural&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::mysql" target="_blank"&gt;DBD::mysql&lt;/a&gt; (+1=50)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::ODBC" target="_blank"&gt;DBD::ODBC&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI::Shell" target="_blank"&gt;DBI::Shell&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Milla" target="_blank"&gt;Dist::Milla&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::Depends" target="_blank"&gt;ExtUtils::Depends&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::CPANfile" target="_blank"&gt;Module::CPANfile&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::cpmfile" target="_blank"&gt;Module::cpmfile&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=468)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mouse" target="_blank"&gt;Mouse&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::GitHub" target="_blank"&gt;Net::GitHub&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs2" target="_blank"&gt;OptArgs2&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::Pipes" target="_blank"&gt;Parallel::Pipes&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=388)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pithub" target="_blank"&gt;Pithub&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=224)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Tree" target="_blank"&gt;Pod::Tree&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Prometheus::Tiny" target="_blank"&gt;Prometheus::Tiny&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=158)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Random" target="_blank"&gt;String::Random&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tickit" target="_blank"&gt;Tickit&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Duration" target="_blank"&gt;Time::Duration&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::Duration::Parse" target="_blank"&gt;Time::Duration::Parse&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6291340396609703861/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/cdxcvii-metacpan-weekly-report-perl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6291340396609703861"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6291340396609703861"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/cdxcvii-metacpan-weekly-report-perl.html" title="(cdxcvii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7959065492467029425</id>
    <published>2022-02-05T21:09:00.001+01:00</published>
    <updated>2022-02-05T21:09:25.784+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxx) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-02-05 20:08:58 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70917631" target="_blank"&gt;How do I group values from a file into a hash according to specific Regular Expressions in Perl?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70982033" target="_blank"&gt;Perl list in boolean (scalar) context in while loop&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70959803" target="_blank"&gt;What is the correct onliner for a column filter expression using Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70945672" target="_blank"&gt;Perl Sorting Hash by Value of Value&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70965391" target="_blank"&gt;Dogecoin Address generation - Address not valid&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7959065492467029425/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxx-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7959065492467029425"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7959065492467029425"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/02/dxx-stackoverflow-perl-report.html" title="(dxx) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>My Favorite Modules: re</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/02/my-favorite-modules-re.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10663</id>
    <published>2022-02-04T22:09:40Z</published>
    <updated>2022-02-04T22:12:23Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>The <a href=" https://perldoc.perl.org/re.html">re</a> module provides functionality relating to Perl's regular expressions. It is either a module in the sense of potentially exporting stuff into your name space or a pragma in the sense of modifying the behavior of Perl within a lexical scope, or both, depending on how you <code>use</code> it.</p>

<p>The pragmatic functionality tweaks the regular expressions themselves in various ways:</p>

<dl>

<p>    <dt><code>use re 'taint';</code></dt><br />
    <dd>Within the scope of this pragma, capture buffers are tainted if tainting is active and the regular expression matched a tainted value.</dd></p>

<p>    <dt><code>use re 'eval';</code></dt><br />
    <dd>Within the scope of this pragma, scalars interpolated into regular expressions are allowed to contain the <code>(?{ ... })</code> and <code>(??{ ... })</code> constructions. These are normally disallowed because they are the moral equivalent of a stringy <code>eval</code>, and therefore a security risk. They are always disallowed when matching tainted data. The exception to all of this is a scalar containing a compiled Regexp, which is always allowed no matter what it contains.</dd></p>

<p>    <dt><code>use re 'strict';</code></dt><br />
    <dd>This experimental (as of Perl 5.34.0) feature turns on additional checks and diagnostics when compiling regular expressions. The documentation contains warnings that no promise of backward compatibility is made, and that the interface to this functionality (whatever form it takes) may change.</dd></p>

<p>    <dt><code>use re '/flags';</code></dt><br />
    <dd>The <code>/flags</code> are the flags that can appear at the end of a regex, and are applied by default to all regular expressions compiled in the scope of the pragma. For example, <code>use re '/i';</code> makes all regular expressions in its scope case-blind by default.</dd></p>

<p>    <dt><code>use re 'debug';</code></dt><br />
    <dd>This causes regular expressions compiled and executed within its scope to produce debugging output showing the compiled program and how the matching is executed.</dd></p>

<p>    <dt><code>use re 'Debug';</code></dt><br />
    <dd>Basically this is <code>use re 'debug';</code> with control over exactly what output is generated,</dd></p>

</dl>

<p>As of Perl 5.9.5, this module can also export a number of regular-expression-related functions. The following list is not exhaustive, but is simply the ones that caught my eye.</p>

<dl>

<p>    <dt><code>is_regexp( $ref )</code></dt><br />
    <dd>This function returns true if the argument is a compiled regex, and false otherwise. Unlike <code>ref()</code>, this is not fooled by blessing or re-blessing.</dd></p>

<p>    <dt><code>regexp_pattern( $ref )</code></dt><br />
    <dd>This function returns the pattern of a compiled regexp. It is not fooled by blessing or overloading. If called in scalar context, you get the stringification of the regexp. If called in list context, you get two elements: the regexp itself, and its modifiers separately.</dd></p>

<p>    <dt><code>regname( $name, $all )</code></dt><br />
    <dd>This function returns the contents of the named capture buffer <code>$name</code> from the most-recent successful match. If <code>$all</code> is true it returns a list of all buffers with that name; otherwise it returns only the first defined buffer with that name.</dd></p>

<p>    <dt><code>regnames( $all )</code></dt><br />
    <dd>This function returns the names of named captures from the last successful match. If <code>$all</code> is true you get the names of all named captures defined by the regexp; otherwise you get only those actually involved in the match.</dd></p>

</dl>

<p>Previous entries in this series:</p>

<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-modules-if.html"><code>if</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-modules-diagnostics-one.html"><code>diagnostics</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-modules-termreadlineperl.html"><code>Term::ReadLine::Perl</code></a></li>
</ol>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 150: Fibonacci Words and Square Free Integers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/02/perl-weekly-challenge-150-fibonacci-words-and-square-free-integers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10661</id>
    <published>2022-02-04T04:32:02Z</published>
    <updated>2022-02-04T04:34:19Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 149 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-150/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on February 6, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Fibonacci Words</h2>

<p><em>You are given two strings having same number of digits, <code>$a</code> and <code>$b</code>.</em></p>

<p><em>Write a script to generate Fibonacci Words by concatenation of the previous two strings. Finally print 51st digit of the first term having at least 51 digits.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $a = '1234' $b = '5678'
Output: 7

Fibonacci Words:

'1234'
'5678'
'12345678'
'567812345678'
'12345678567812345678'
'56781234567812345678567812345678'
'1234567856781234567856781234567812345678567812345678'

The 51st digit in the first term having at least 51 digits '1234567856781234567856781234567812345678567812345678' is 7.
</code></pre>

<p>So, Fibonacci words are similar to Fibonacci numbers, except that any value is generated by concatenating (instead of adding) the two previous values.</p>

<p>Since we can easily find how many digits we add each time through the iteration, there is certainly a way to find directly the requested digit without even computing the sequence&#8217;s words, but it is much simpler to iteratively compute the words and pick up the 51st digit once we have enough digits for that.</p>

<h3>Fibonacci Words in Raku</h3>

<p>Here, we use the <a href="https://docs.raku.org/language/operators#index-entry-sequence_operator">sequence operator</a> to generate a sequence of Fibonacci words. We stop the sequence with the <code>*.chars &gt;= 51</code> expression. We then just take the digit at index 50 (corresponding to position 51) of the last word.</p>

<pre><code>use v6;

sub fibonacci (Int $a, Int $b where $a.chars == $b.chars) {
    my ($c, $d) = $a &lt; $b ?? ($a, $b) !! ($b, $a);
    my @fib = $c, $d, * ~ * ... *.chars &gt;= 51;
    # say @fib;
}
say (fibonacci 1234, 5678)[*-1].comb[50];
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./Fibonacci_words.raku
7
</code></pre>

<h3>Fibonacci Words in Perl</h3>

<p>Same idea as above, except that we build the sequence of Fibonacci words with a <code>for</code> loop.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub fibonacci {
    my ($a, $b) = @_;
    my @fib = $a &lt; $b ? ($a, $b) : ($b, $a);
    for my $i (1..20) {
        push @fib, $fib[-2] . $fib[-1];
        next if length $fib[-1] &lt; 51;
        say $fib[-1];
        return $fib[-1];
    }
}
say substr fibonacci(1234, 5678), 50, 1;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./Fibonacci_words.pl
1234567856781234567856781234567812345678567812345678
7
</code></pre>

<h2>Task 2: Square-Free Integers</h2>

<p><em>Write a script to generate all square-free integers &lt;= 500.</em></p>

<blockquote>
  <p><em>In mathematics, a square-free integer (or squarefree integer) is an integer which is divisible by no perfect square other than 1. That is, its prime factorization has exactly one factor for each prime that appears in it. For example, 10 = 2 x 5 is square-free, but 18 = 2 x 3 x 3 is not, because 18 is divisible by 9 = 3</em><em>2.</em></p>
</blockquote>

<p><em>Example:</em></p>

<p><em>The smallest positive square-free integers are:</em></p>

<pre><code>1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 23, 26, 29, 30, ...
</code></pre>

<p>The first idea that might come to mind would be to perform prime factorization of all integers between 2 and 500, and to retain all those whose all exponents are 1. But that&#8217;s a lot of computing work, much of which is in fact useless. It is much better to try to divide the input integers by perfect squares. Why would you want to test twice division by 2 when it is enough to test once division by 4? Only six squares of prime numbers may occur in prime factorization of integers below 500: 4, 9, 25, 49, 121, 169. There are some other squares (such as 16, 36, 64, 81, 100, 144, 196, and 225), but these are not squares of prime numbers and numbers containing these squares will all have been found to contain squares when we test 4, 9, and 25. </p>

<h3>Square-Free Integers in Raku</h3>

<p>We first need to build a list of squares of prime numbers less than the square root of 500/2. For each integer between 1 and 500, we test whether any of the squares evenly divides that integer. A small easy optimization is that we can stop the process whenever we reach a square larger than the integer being tested.</p>

<pre><code>my @squares = map { $_² }, grep {.is-prime}, 2..250.sqrt.Int;
# say @squares; # [4 9 25 49 121 169] squares of prime integers
NEXT_I: for 1..500 -&gt; $i {
    for @squares -&gt; $j {
        next NEXT_I if $i %% $j;
        last if $j &gt; $i;
    }
    print "$i ";
}
say "\nDuration: ", now - INIT now;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./square-free.raku

</code></pre>

<p>Duration: 0.12648938</p>

<p>We compute and display the duration just to check that the program runs fast enough.</p>

<h3>Square-Free Integers in Perl</h3>

<p>This is the same idea as explained above. A slight change is that this program doesn&#8217;t test for primality of the numbers that will be squared, because anyone with only basic math knowledge can list prime numbers between 1 and 15. So we don’t need to compute them, we simply hard-code them.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @squares = map { $_ * $_ } 2, 3, 5, 7, 11, 13;
# say "@squares"; # 4 9 25 49 121 169 - squares of prime integers
NEXT_I: for my $i (1..500) {
    for my $j (@squares) {
        next NEXT_I if $i % $j == 0;
        last if $j &gt; $i;
    }
    print "$i ";
}
say " ";
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./square-free.pl

</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on February 13, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Jan 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/02/04/list-of-new-cpan-distributions-jan-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-Interop-Ruby">Acme-CPANModules-Interop-Ruby</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules/applications that help interoperate with the Ruby world</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-KitchenSinks">Acme-CPANModules-KitchenSinks</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Kitchen sink libraries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-Signature-Arity">Acme-Signature-Arity</a></td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>0.001</td>
<td>0.003</td>
<td>find out how a piece of code expects to be called</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-Graphs-TransitiveClosure-Tiny">Algorithm-Graphs-TransitiveClosure-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>1.00</td>
<td>Calculate the transitive closure.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Amazon-SecretsManager">Amazon-SecretsManager</a></td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>AWS Secrets Manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-DesktopOpenUtils">App-DesktopOpenUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Utilities related to Desktop::Open</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Greple-jq">App-Greple-jq</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.02</td>
<td>0.05</td>
<td>greple module for jq frontend</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-PerlReleaseUtils">App-PerlReleaseUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Collection of utilities related to Perl distribution releases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-sizecheck">App-sizecheck</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.061</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-wsgetmail">App-wsgetmail</a></td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>0.05</td>
<td>0.05</td>
<td>Fetch mail from the cloud using webservices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-BagIt-Fast">Archive-BagIt-Fast</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.090</td>
<td>0.090</td>
<td>A module to use IO::AIO to get better performance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Archive-BagIt-Plugin-SHA256">Archive-BagIt-Plugin-SHA256</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>0.003</td>
<td>The role to load the sha256 plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Audit-Log">Audit-Log</a></td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>0.001</td>
<td>0.003</td>
<td>auditd log parser with no external dependencies, using no perl features past 5.12</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CBI-Wrapper">CBI-Wrapper</a></td>
<td><a href="https://metacpan.org/author/RESSAM">RESSAM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Handle the Italian CBI fixed length file format.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDS">CDS</a></td>
<td><a href="https://metacpan.org/author/LOCHMATT">LOCHMATT</a></td>
<td>0.22</td>
<td>0.24</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-CL">CWB-CL</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.33</td>
<td>v3.4.33</td>
<td>Perl interface to the low-level C API of the IMS Open Corpus Workbench</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-CQI">CWB-CQI</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.0.0</td>
<td>v3.0.0</td>
<td>launch private CQPserver on local machine</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB-Web">CWB-Web</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.0</td>
<td>v3.4.1</td>
<td>A simple shared cache for CQP query results</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CWB">CWB</a></td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>v3.4.0</td>
<td>v3.4.0</td>
<td>Perl toolbox for the IMS Corpus Workbench</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Callable">Callable</a></td>
<td><a href="https://metacpan.org/author/ALTOMRU">ALTOMRU</a></td>
<td>0.01</td>
<td>0.02</td>
<td>make different things callable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Console-ProgressBar">Console-ProgressBar</a></td>
<td><a href="https://metacpan.org/author/OAUVERLOT">OAUVERLOT</a></td>
<td>1.01</td>
<td>1.01</td>
<td>A simple progress bar for Perl console applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Cipher-Vigenere">Crypt-Cipher-Vigenere</a></td>
<td><a href="https://metacpan.org/author/BOREKL">BOREKL</a></td>
<td>0.01</td>
<td>0.03</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Digest-Scrypt">Crypt-Digest-Scrypt</a></td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Scrypt key derivation function</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-PK-ECC-Schnorr">Crypt-PK-ECC-Schnorr</a></td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Public key cryptography based on EC with Schnorr signatures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-CryptPassphrase">Dancer2-Plugin-CryptPassphrase</a></td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Crupt::Passphrase plugin for Dancer2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Gimei">Data-Gimei</a></td>
<td><a href="https://metacpan.org/author/YOUPONG">YOUPONG</a></td>
<td>v0.0.4</td>
<td>v0.0.4</td>
<td>a Perl port of Ruby's gimei.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PERLSRVDE">Dist-Zilla-PERLSRVDE</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>The plugin bundle we use at Perl-Services.de</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Data-Sah">Dist-Zilla-Plugin-Data-Sah</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.005</td>
<td>0.005</td>
<td>Plugin for building Data-Sah and Data-Sah-* distributions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-Upload-OrePAN2">Dist-Zilla-Plugin-Upload-OrePAN2</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.0001</td>
<td>0.0001</td>
<td>Dist::Zilla release plugin to inject into a local OrePAN2 repository</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-Author-GEEKRUTH">Dist-Zilla-PluginBundle-Author-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0100</td>
<td>1.0200</td>
<td>Be like GeekRuthie when you build your dists</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-GEEKRUTH">Dist-Zilla-PluginBundle-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0000</td>
<td>1.0001</td>
<td>Be like GeekRuthie when you build your dists</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-PluginBundle-GitLab">Dist-Zilla-PluginBundle-GitLab</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>1.0</td>
<td>1.0002</td>
<td>Access GitLab functionality to maintain distros from Dist::Zilla</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Excel-ValueWriter-XLSX">Excel-ValueWriter-XLSX</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>0.1</td>
<td>0.2</td>
<td>generating data-only Excel workbooks in XLSX format, fast</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Form-Tiny-Plugin-Diva">Form-Tiny-Plugin-Diva</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>1.01</td>
<td>Form::Diva integration for Form::Tiny</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Git-Critic">Git-Critic</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.1</td>
<td>0.4</td>
<td>Only run Perl::Critic on lines changed in the current branch</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Object">HTML-Object</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.1</td>
<td>HTML Parser, Modifier and Query Interface</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Koha-Contrib-ValueBuilder-RepeatableAutocomplete">Koha-Contrib-ValueBuilder-RepeatableAutocomplete</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>1.000</td>
<td>1.003</td>
<td>Repeatable autcomplete value-builder for Koha</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HEX">Lang-HEX</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HEX-Export">Lang-HEX-Export</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL">Lang-HL</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.03</td>
<td>5.001</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Lang-HL-Export">Lang-HL-Export</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.01</td>
<td>0.16</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-ACL-Attachments">Mail-Exim-ACL-Attachments</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.001</td>
<td>Reject email attachments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-ACL-Geolocation">Mail-Exim-ACL-Geolocation</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.001</td>
<td>Map IP addresses to country codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Netdata">Mojo-Netdata</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>0.03</td>
<td><a href="https://netdata.cloud" rel="nofollow">https://netdata.cloud</a> plugin for Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Command-coverage">Mojolicious-Command-coverage</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.0.1</td>
<td>v0.0.1</td>
<td>Start you mojo app in coverage mode</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Geolocation-MMDB">Mojolicious-Plugin-Geolocation-MMDB</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Look up location information by IP address</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Connector">Net-Connector</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.005</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-DNS-Resolver-Unbound">Net-DNS-Resolver-Unbound</a></td>
<td><a href="https://metacpan.org/author/RWF">RWF</a></td>
<td>1.01</td>
<td>1.05</td>
<td>Unbound resolver base for Net::DNS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Fortinet-FortiManager">Net-Fortinet-FortiManager</a></td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>0.001000</td>
<td>0.002000</td>
<td>Fortinet FortiManager REST API client library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-SMPP-SSL">Net-SMPP-SSL</a></td>
<td><a href="https://metacpan.org/author/SSTUEHRM">SSTUEHRM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>SSL support for Net::SMTP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-mbedTLS">Net-mbedTLS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.01_01</td>
<td>mbedTLS in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Path-Util">Path-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.000001</td>
<td>0.000002</td>
<td>Path functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-PreferredModules">Perl-Critic-Policy-PreferredModules</a></td>
<td><a href="https://metacpan.org/author/ATOOMIC">ATOOMIC</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Custom package recommendations</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl5-Dist-Backcompat">Perl5-Dist-Backcompat</a></td>
<td><a href="https://metacpan.org/author/JKEENAN">JKEENAN</a></td>
<td>0.01</td>
<td>0.06</td>
<td>Will changes to dist/ build on older perls?</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-Auth-SSO-OIDC">Plack-Auth-SSO-OIDC</a></td>
<td><a href="https://metacpan.org/author/NJFRANCK">NJFRANCK</a></td>
<td>0.01</td>
<td>0.01</td>
<td>implementation of OpenID Connect for Plack::Auth::SSO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Podman">Podman</a></td>
<td><a href="https://metacpan.org/author/TSCHAEFER">TSCHAEFER</a></td>
<td>20220129.0</td>
<td>20220203.0</td>
<td>Library of bindings to use the RESTful API of Podman.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Regex-Object">Regex-Object</a></td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1.00</td>
<td>1.24</td>
<td>Solves problems with global Regex variables side effects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Set-IntSpan-Util">Set-IntSpan-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utility routines related to integer spans</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sodium-FFI">Sodium-FFI</a></td>
<td><a href="https://metacpan.org/author/CAPOEIRAB">CAPOEIRAB</a></td>
<td>0.001</td>
<td>0.001</td>
<td>FFI implementation of libsodium</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Speech-Recognition-Vosk">Speech-Recognition-Vosk</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.01</td>
<td>offline voice recognition using the Vosk toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/String-Eertree">String-Eertree</a></td>
<td><a href="https://metacpan.org/author/CHOROBA">CHOROBA</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Build the palindromic tree aka Eertree for a string</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-BeLike-GEEKRUTH">Task-BeLike-GEEKRUTH</a></td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>0.0001</td>
<td>1.0000</td>
<td>TIMTOWTDI, but this works for GeekRuthie</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Text-Hyphen-PT">Text-Hyphen-PT</a></td>
<td><a href="https://metacpan.org/author/LEOLCA">LEOLCA</a></td>
<td>1.02</td>
<td>1.03</td>
<td>determine hyphenation positions in portuguese words</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Venus">Venus</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>0.03</td>
<td>OO Library for Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/uSAC-MIME">uSAC-MIME</a></td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>v0.1</td>
<td>v0.2</td>
<td>MIME Type database with concise lookups</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>65</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>45</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/GEEKRUTH">GEEKRUTH</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/SCHTEPF">SCHTEPF</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/GUL">GUL</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/RESSAM">RESSAM</a></td>
<td>1</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/TSCHAEFER">TSCHAEFER</a></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/YOUPONG">YOUPONG</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/JKEENAN">JKEENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ABRAXXA">ABRAXXA</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/ATOOMIC">ATOOMIC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NJFRANCK">NJFRANCK</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/ALEXPAN">ALEXPAN</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/BOREKL">BOREKL</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/OAUVERLOT">OAUVERLOT</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RWF">RWF</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/DRCLAW">DRCLAW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/LOCHMATT">LOCHMATT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/ALTOMRU">ALTOMRU</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/TEODESIAN">TEODESIAN</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/CHOROBA">CHOROBA</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/TEAM">TEAM</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/LEOLCA">LEOLCA</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/SSTUEHRM">SSTUEHRM</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/BPS">BPS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/BIGFOOT">BIGFOOT</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/SYSPETE">SYSPETE</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/CAPOEIRAB">CAPOEIRAB</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract Acme-CPANModules-Interop-Ruby PERLANCAR 0.001 0.001 Modules/applications that help interoperate with the Ruby world Acme-CPANModules-KitchenSinks PERLANCAR 0.001 0.001 Kitchen sink libraries Acme-Signature-Arity TEAM 0.001 0.003 find out how a piece of code expects to be called Algorithm-Graphs-TransitiveClosure-Tiny AAHAZRED 0.01 1.00 Calculate the transitive closure. Amazon-SecretsManager BIGFOOT v1.0.0 v1.0.0 AWS Secrets Manager App-DesktopOpenUtils … <a href="https://perlancar.wordpress.com/2022/02/04/list-of-new-cpan-distributions-jan-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jan 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1982</id>
    <published>2022-02-03T23:49:26Z</published>
    <updated>2022-02-03T23:49:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>The difficult road to Perl</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/the-difficult-road-to-perl-3o5f" type="text/html"/>
    <content type="html">&lt;p&gt;Around 2010, I was in the middle of my CS studies and I was a pythonista. 👏 🐍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmWWgL0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/getblu2zkitswfpaxbsn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmWWgL0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/getblu2zkitswfpaxbsn.jpg" alt="Python" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At that time, it was &lt;strong&gt;python 2.6&lt;/strong&gt; dominating but some people were starting to use the new &lt;strong&gt;python 2.7&lt;/strong&gt; 🆕&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;python 2&lt;/strong&gt; was far not as good as &lt;strong&gt;python 3&lt;/strong&gt; is today (who have been impressively improved 😱)... but it was so cool! And I loved it! &lt;/p&gt;

&lt;p&gt;Python language was &lt;em&gt;my&lt;/em&gt; thing ❤️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-was-another-era"&gt;
  &lt;/a&gt;
  It was another era...
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;python 3&lt;/strong&gt; was out but nobody was using it.&lt;/p&gt;

&lt;p&gt;People were posting in forums, do you remember? 😁&lt;/p&gt;

&lt;p&gt;Python had still the reputation of not doing breaking changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXNIkKeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuslhak5kxr9fex4exug.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXNIkKeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuslhak5kxr9fex4exug.gif" alt="Lol" width="220" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(only Ruby was assuming this mindset)&lt;/p&gt;

&lt;p&gt;I think that list comprehension existed (looking at &lt;a href="https://docs.python.org/3/whatsnew/2.0.html#list-comprehensions"&gt;python 2.0 changelog&lt;/a&gt;) but I don't remember using it (?).&lt;/p&gt;

&lt;p&gt;It was possible to type &lt;code&gt;print "hello world"&lt;/code&gt; without parenthesis... 👍&lt;/p&gt;

&lt;p&gt;I remember some pain points, like &lt;code&gt;easy_install&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt; concatenation or UTF-8.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-python-2-pain-points"&gt;
  &lt;/a&gt;
  Some python 2 pain points
&lt;/h2&gt;

&lt;p&gt;First, there was no fstrings 😱 therefore you would fall often into the trap: &lt;code&gt;TypeError: cannot concatenate 'str' and 'NoneType' objects&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;UTF-8 file encoding was not default then leading to this annoying error:&lt;br&gt;
&lt;code&gt;SyntaxError: Non-ASCII character '\xc3' in file utf8.py on line 1, but no encoding declared;&lt;/code&gt; (and commenting the line would not save you!)&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;"There should be one-- and preferably only one --obvious way to do it."&lt;/a&gt; was often more a curse than a blessing. It's terrible how you can spend 15 minutes on understanding a construction when you're just experimenting. &lt;/p&gt;

&lt;p&gt;And the toolchain...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-what-a-weird-choice"&gt;
  &lt;/a&gt;
  &lt;em&gt;"Perl?"&lt;/em&gt; What a weird choice
&lt;/h2&gt;

&lt;p&gt;At that time I gave some talks and helped organizing &lt;a href="https://jm2l.linux-azur.org/"&gt;JM2L&lt;/a&gt;, an open source event organized by &lt;a href="https://www.linux-azur.org/"&gt;Linux Azur&lt;/a&gt; near Cannes/Antibes (France).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSqUjLVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2hgyenypvmfom5xfdpr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSqUjLVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2hgyenypvmfom5xfdpr.png" alt="Linux Azur" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I remember contacting speakers (CFP) and in particular one email thread with a regular speaker. I was asking details about "his" free software, he told me it was in Perl. I hesitated... then asked him anyway:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why it is written in Perl, such a weird choice ?! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I really asked this way)&lt;/p&gt;

&lt;p&gt;He answered me gently that "It was the language of choice when he started the project".&lt;/p&gt;

&lt;p&gt;Long time later, I wonder even how I dared asking this question. It's judging, useless and not professional (even if we were not in a professional exchange).&lt;/p&gt;

&lt;p&gt;At that time, I hadn't ever seen any line of Perl, I was judging, without any reason. &lt;/p&gt;

&lt;p&gt;I was just ANTI-Perl. One more soldier in the army of &lt;a href="https://dev.to/thibaultduponchelle/the-hate-of-perl-in-memes-469e"&gt;Perl haters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3GuIMwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r15jw4unakhmvp2nhj86.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3GuIMwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r15jw4unakhmvp2nhj86.jpeg" alt="Perl WTF" width="240" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I was so sure of myself and so sure that everybody shared the same evidence, that I asked this question.&lt;/p&gt;

&lt;p&gt;This judgement is probably something that appeared and consolidated during my studies through contact with school friends (?) or communities of programmers in general (?)&lt;/p&gt;

&lt;p&gt;Because in my older memory (1998-2008), my view of Perl was not so bad. I remember Perl having a reputation of hacker's choice, legendary coders, super heroes of command line and UNIX, smart but mad peoples. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---t0dYWCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx2ip12gkonvhsq86rwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---t0dYWCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx2ip12gkonvhsq86rwj.png" alt="Mad" width="671" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a coder's mind, it was more something fascinating. &lt;/p&gt;

&lt;p&gt;I was seeing the community around Perl like a "sect" (e.g. mongers...) like the &lt;a href="https://dev.to/thibaultduponchelle/perl-programmers-are-mandalorians-l0b"&gt;Mandalorians&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sEukq7CC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yc04wpgxswh12otxxm7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEukq7CC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yc04wpgxswh12otxxm7.jpeg" alt="Mandalorian" width="714" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mandalorians respect the creed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-perl"&gt;
  &lt;/a&gt;
  Introduction to Perl
&lt;/h2&gt;

&lt;p&gt;Then I joined my job in 2013. I remember people studying me in the first days (they confessed they had looked for my name in Google before I joined). I had a first meeting with my team leader. He explained the very high level architecture of my department and technologies. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a lot of C, some bash and a lot of Perl...&lt;/li&gt;
&lt;li&gt;I don't know Perl at all, I said&lt;/li&gt;
&lt;li&gt;You will learn!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was then introduced to Perl like this, &lt;em&gt;by constraint&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I'm lucky enough since it became for years my language of choice and this was the first time I studied so deep programming languages principles, thanks to Perl but largely beyond Perl (hello Python 👋, hello Ruby 👋, hello Raku 👋, hello &lt;a href="https://ruslanspivak.com/lsbasi-part1/"&gt;lsbasi&lt;/a&gt; 👋, etc...).&lt;/p&gt;

&lt;p&gt;But even if I changed my view on Perl (proving that I'm open minded 😉 or just respecting the hierarchy 😌), I wanted to share how &lt;strong&gt;the road to (learning) Perl is full of obstacles&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Please take a moment to think about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-enjoy-perl"&gt;
  &lt;/a&gt;
  I enjoy Perl
&lt;/h2&gt;

&lt;p&gt;If you read my posts, you know that most of my current posts talk about Perl. It has several qualities that I cherish (stable, robust, &lt;a href="https://metacpan.org/"&gt;CPAN&lt;/a&gt;...) that are maybe not super trendy in the current "ship fast and break things" world but talk to me.&lt;/p&gt;

&lt;p&gt;And it is fun to write!&lt;/p&gt;

&lt;p&gt;What I found in Perl was the freedom, less boilerplate and a very close integration in Linux. And also maybe a more "artistic" approach of programming.&lt;/p&gt;

&lt;p&gt;But I consider myself as a polyglot programmer, &lt;a href="https://dev.to/davorg/don-t-be-a-perl-programmer-4h2d"&gt;I don't call myself a Perl programmer&lt;/a&gt; (why would I do? It's not my first neither my last language). I enjoy it and I don't like how reputation is more important than actual qualities. This is something I liked between programmers, how we don't judge that much by appearance.&lt;/p&gt;

&lt;p&gt;Today I do much more Python than Perl, and each time I switch from Python to Perl I see Perl defects (OOP, REPL, collections containers...) the same way when I switch from Perl to Python I see Python pain points (toolchain, strictness...), but luckily I enjoy much more the qualities than I suffer the imperfections! 😁😁😁&lt;/p&gt;

&lt;p&gt;Having dodged the python 2 to 3 migration frustration, and with all sweets of python 3, I'm still close to be a kind of pythonista somewhere inside but since I said "I'm not a Perl programmer" there is no reason I would consider myself as a "Python programmer" neither. And while I used, I'm using and I will use Python a lot for a long time, I can't say that I was ever &lt;em&gt;involved&lt;/em&gt; in Python while it's clear that I &lt;em&gt;cared&lt;/em&gt; about Perl 🐫&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/the-difficult-road-to-perl-3o5f</id>
    <published>2022-02-03T15:39:50Z</published>
    <updated>2022-02-03T15:39:50Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="discuss"/>
  </entry>
  <entry>
    <title>Release 1.58 of perl-workflow, a maintenance release</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-158-of-perl-workflow-a-maintenance-release-3ed9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Finally we were able to _squeeze out another maintenance release of the Perl distribtution <a href="https://metacpan.org/pod/Workflow">Workflow</a>.</p>

<p>We have one outstanding discussion on the forthcoming 2.0 release, should we merge <em>validators</em> and <em>conditionals</em>, I hope we will be able to conclude something, so our first development releases of 2.0 can be shipped. Do see issue <a href="https://github.com/jonasbn/perl-workflow/issues/137">#137</a> for discussion and proposal.</p>

<p>More information on the roadmap to 2.0 can be found here:</p>

<ul>
<li>The <a href="https://github.com/jonasbn/perl-workflow/milestone/14">2.0 milestone</a>, as in a list of PRs and issues</li>
<li>And the <a href="https://github.com/jonasbn/perl-workflow/projects/1">2.0 projected road map</a> as a set of notes and issues.</li>
</ul>

<p>If you are interested in Workflow and possibly contributing, do not hesitate to reach out.</p>

<p>Here follows the change log of release 1.58.</p>

<h2>
  <a href="#change-log">
  </a>
  Change Log
</h2>

<p>The original is <a href="https://github.com/jonasbn/perl-workflow/releases/tag/1.58">available on GitHub</a></p>

<h2>
  <a href="#158-20220202-maintenance-release-update-not-required">
  </a>
  1.58 2022-02-02 Maintenance release, update not required
</h2>

<ul>
<li>Addressed violations of <a href="https://metacpan.org/pod/Perl::Critic">Perl::Critic</a> policies:

<ul>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef">Subroutines::ProhibitExplicitReturnUndef</a></li>
<li><a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitMixedBooleanOperators">ValuesAndExpressions::ProhibitMixedBooleanOperators</a></li>
</ul>


</li>
</ul>

<p>Adjustments to Perl::Critic resourcefile (<code>t/perlcriticrc</code>), this somewhat addresses issue <a href="https://github.com/jonasbn/perl-workflow/issues/43">#43</a>, there is more work to be done in this area, this will be adressed eventually</p>

<p>By Jonas Brømsø (<a class="mentioned-user" href="https://dev.to/jonasbn">@jonasbn</a>)</p>

<ul>
<li><p>Requirement for Perl 5.14 has been made more explicit, see also PR <a href="https://github.com/jonasbn/perl-workflow/pull/185">#185</a> by Erik Huelsmann (<a class="mentioned-user" href="https://dev.to/ehuelsmann">@ehuelsmann</a>)</p></li>
<li><p>Delay of instantation, prevents additional loggings attempts, this makes logging less noisy when running tests. Via PR <a href="https://github.com/jonasbn/perl-workflow/pull/174">#174</a> from Erik Huelsmann (<a class="mentioned-user" href="https://dev.to/ehuelsmann">@ehuelsmann</a>)</p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-158-of-perl-workflow-a-maintenance-release-3ed9</id>
    <published>2022-02-02T18:32:47Z</published>
    <updated>2022-02-02T18:32:47Z</updated>
    <category term="opensource"/>
    <category term="release"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Annual Report - 2021</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2022/01/annual-report---2021.html"/>
    <id>tag:blogs.perl.org,2022:/users/mohammad_s_anwar//990.10660</id>
    <published>2022-02-01T00:31:35Z</published>
    <updated>2022-02-01T01:12:43Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmonthlyreport" label="perl monthly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-12.jpg"/></p>

<p><strong>Good bye 2021 and Welcome 2022 !!!</strong></p>

<p>Time to look back and review how the year 2021 was for me. </p>

<h1>Perl Weekly newsletter</h1>

<p>As you all know, I have been editing <strong>Perl weekly newsletter</strong every alternate week alongside the chief editor, <strong>Gabor Szabo</strong>. We agreed, I edit the even numbered newsletter and <strong>Gabor</strong> would do odd numbered ones. So that way, I got the honour to edit the <strong>500th</strong> edition of the weekly newsletter. I am now looking forward to my personal,  <strong>100th</strong> edition. As of today, I have edited <strong>96</strong> in total.</p>

<h1>The [Perl] Weekly Challenge</h1>

<p>Thanks to the <strong>Team PWC</strong>, I completed one more year of weekly challenge. It may not sound a big deal but for me it is. I wouldn't have done without the support of the team. I would like to mention one name, <strong>Colin Crain</strong>, our in-house, <strong>Perl</strong> reviewer for the hard work in reviewing <strong>Perl</strong> solutions every week without fail for so many months now.</p>

<p>There are some of the sharpest brain in our team and we are proud of them. Every week, I get to learn from them, technical or otherwise. You know who I am talking about.</p>

<p>On <strong>15th Feb 2021</strong>, we completed <strong>100 weeks</strong>. It is unbelievable even today that we have reached so far. Today we achieved another milestone as we are now in the <strong>week 150</strong>.</p>

<h1>Programming Languages</h1>

<p>Last year, I final gathered the courage to contribute in <strong>Raku</strong>. I faced tough time initially but with so many friends ready to help <strong>24x7</strong>, I sailed through. I feel comfortable now. I can read code written by some of great experts of the language.</p>

<p>I started sharing solutions to the weekly challenge in <strong>Python</strong>, <strong>Java</strong> and <strong>Swift</strong>. Having done for sometimes now, I can now proudly say, I can read/write in <strong>5 different programming languages</strong>. Having said, we have, <strong>Abigail</strong> in the team who can code in, <strong>30+</strong>, different languages.</p>

<h1>Oleeo Limited</h1>

<p>Having worked with some of the great Perl brain at <strong>NTT Limited</strong> for nearly <strong>9 years</strong>, I decided to move on. With the help and guidance from a very close friend of mine, <strong>Julien</strong>, I joined <a href="https://www.oleeo.com/">Oleeo Limited</a>. I must admit, it was the best decision of my entire career. I am so happy to have found such a cool and friendly team. I have been lucky to have very understanding and approachable managers in the past as well. I am very lucky once again to have found cool manager. In a short time so far, I already feel like I am part of the team. Above all, it feels great when my contribution is appreciated.</p>

<h1>1000 days FREE T-shirt campaign</h1>

<p>On <strong>18th Dec 2021</strong>, <a href="">The Weekly Challenge</a> completed 1000 days. I wanted to celebrate the moment in a big way. I shared my ideas with the team and general public. I am pleasantly surprised by the support I received so far. The support came within the team and outside. The best part was when our monthly prize sponsor, <strong>Pete Sergeant</strong>, came forward to top up the fund to cover the cost of FREE gift. You can find out the details in the <a href="https://theweeklychallenge.org/blog/1000-days/">blog here</a>.</p>

<h1>Pull Request Club</h1>

<p>I have been member of the club from day one. As you all know, being a member, you get assigned a distribution and you are requested to make at least one contribution. So far, I have managed to complete all my assignments without fail. I would like to mention one thing here, my contributions are mostly limited to documentation improvement. So it doesn't take long to find something to contribute. I am also grateful to all who accepted my contributions. </p>

<h1>Change of domain name</h1>

<p>As you all know, <strong>Perl Weekly Challenge</strong> has been renamed to <strong>The Weekly Challenge</strong>. I had bought the new domain <strong>theweeklychallenge.org</strong> long time ago but I was still using the old domain name <strong>perlweeklychallenge.org</strong> as I didn't have the courage and knowledge to move over to new domain name. <strong>Gabor Szabo</strong> offered to help me with domain switch. One Sunday afternoon, he helped me to switch the domain over Skype. Thank you, <strong>Gabor</strong>, for everything.</p>

<h1>YouTube Channel</h1>

<p>I started <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a> to share my contributions to the weekly challenge. Although I am not being regular but I do share live coding session as and when I find time. As of today, I have got <strong>163 subscribers</strong>. I know, it is not big number but I am proud of myself. There are some very well known names in the Perl community following my YouTube channel. I would like to thank each and every subscriber for the support and encouragement.</p>

<p>Last but not the least, the start of the year didn't go the way I wanted. I am presenting the monthly report on the last day of the month instead of day one. The only grace is I did manage to share and  not skipped it altogether. There are couple of things I skipped purposely as it would embaras me, sorry.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Past Monthly Reports</a></li>
<li><a href="#j">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>5 Pull Requests</strong> submitted in the month of <strong>December 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-12.png"/></p>

<p><strong>2374 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-12.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>718 commits</strong> recorded in the month of <strong>December 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-12.png"/></p>

<p>Overall <strong>8171 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-12.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>December 2021</strong>:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-142">Challenge #142</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-143">Challenge #143</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-144">Challenge #144</a></li>
<li><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-145">Challenge #145</a></li>
</ul>

<p>And <strong>RECAPS</strong> are listed as below:</p>

<ul>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-141">RECAP Challenge #141</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-142">RECAP Challenge #142</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-143">RECAP Challenge #143</a></li>
<li><a href="https://theweeklychallenge.org/blog/recap-challenge-144">RECAP Challenge #144</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>Last month, I created <strong>6 videos</strong> as listed below. You can take a look at all my past videos on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. </p>

<h4>The Weekly Challenge - 141 (Task #1: Number Divisors)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/tevgYBpKk7M" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 140 (Task #1: Add Binary)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DzkSojqFvaA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 138 (Task #1: Workdays)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/yntQpjmS4ho" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 137 (Task #1: Long Year)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/U-FeZ8LPjd8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>The Weekly Challenge - 143 (Task #1: Calculator)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Ch1C1HYytdU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h4>Revisit The Weekly Challenge - 075 (Task #1: Coins Sum)</h4>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Q8UPvDMYqJA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p><br />
If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://theweeklychallenge.org/blog/meet-the-champion-2021-11">W. Luis Mochan</a> as the Champion of <strong>The Weekly Challenge</strong>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://theweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/pod/OPM::Maker::Command::sopm">OPM::Maker::Command::sopm</a> by <strong>Renee Baecker</strong>. I submitted <a href="https://github.com/PerlServices/OPM-Maker-Command-sopm/pull/3">one</a> Pull Request and it has been accepted and merged already.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-12.png"/></p>

<p>Overall participation to <strong>Pull Request Club</strong></p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-summary-2021-12.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/12/monthly-report---november-3.html">Monthly Report - November</a>.</p>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited three editions of the <strong>Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/536.html">Issue #536</a>, <a href="http://perlweekly.com/archive/538.html">Issue #538</a> and <a href="http://perlweekly.com/archive/540.html">Issue #540</a>.</p>

<hr id="i"/>
<h2>Past Monthly Reports</h2>

<p><strong>Year 2021</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/02/monthly-report---january-2.html">Jan</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/03/monthly-report---february-2.html">Feb</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/04/monthly-report---march-2.html">Mar</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/05/monthly-report---april-2.html">Apr</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/06/monthly-report---may-2.html">May</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/07/monthly-report---june-2.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/08/monthly-report---july-2.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/09/monthly-report---august-2.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/10/monthly-report---september-2.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/11/monthly-report---october-3.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/12/monthly-report---november-3.html">Nov</a>. </p>

<p><strong>Year 2020</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/02/monthly-report---january-1.html">Jan</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/03/monthly-report---february-1.html">Feb</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/04/monthly-report---march-1.html">Mar</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/05/monthly-report---april-1.html">Apr</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/06/monthly-report---may-1.html">May</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/07/monthly-report---june-1.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/08/monthly-report---july-1.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/09/monthly-report---august-1.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/10/monthly-report---september-1.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/11/monthly-report---october-2.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/12/monthly-report---november-2.html">Nov</a>,  <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html">Dec</a>. </p>

<p><strong>Year 2019</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/02/monthly-report---january.html">Jan</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/03/monthly-report---february.html">Feb</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/04/monthly-report---march.html">Mar</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/05/monthly-report---april.html">Apr</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/06/monthly-report---may.html">May</a>,  <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/07/monthly-report---june.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/08/monthly-report---july.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/09/monthly-report---august.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/10/monthly-report---september.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/11/monthly-report---october-1.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/12/monthly-report---november-1.html">Nov</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2020/01/annual-report---2019.html">Dec</a>. </p>

<p><strong>Year 2018</strong>: <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/06/why-may-2018-is-so-special.html">May</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/07/how-i-performed-in-june-2018-as-compared-to-may-2018.html">Jun</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/08/comparative-analysis---report-july-2018.html">Jul</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/09/performance-report---august-2018.html">Aug</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/10/hacktoberfest-challenge-2018.html">Sep</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/11/monthly-report---october.html">Oct</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2018/12/monthly-report---november.html">Nov</a>, <a href="http://blogs.perl.org/users/mohammad_s_anwar/2019/01/monthly-report---december.html">Dec</a>. </p>

<hr id="j"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>December 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by their generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-12.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>A brief guide to perl character encoding</title>
    <link rel="alternate" href="https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;I originally wrote this at work, after my team spent far too many days yelling at the computer because of &lt;a href="https://en.wikipedia.org/wiki/Mojibake"&gt;Mojibake&lt;/a&gt;. Thanks to my employer for allowing me to publish it, and the several colleagues who provided helpful feedback. Any errors are, naturally, not their fault.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#gratuitous-pi-reference"&gt;12:45. Restate my assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-royal-road"&gt;The Royal Road&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#characters-representations-and-strings"&gt;Characters, representations, and strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-use-utf8-is-bad"&gt;Source code encoding, the utf8 pragma, and why you shouldn’t use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#input-and-output"&gt;Input and output&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#perlio-layers"&gt;PerlIO layers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-encode-module"&gt;The Encode module&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#encode-encode"&gt;Encode::encode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encode-decode"&gt;Encode::decode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encode-everything-else"&gt;Encode:: everything else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#debugging"&gt;Debugging&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-utf8-flag"&gt;The UTF8 flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#devel-peek"&gt;Devel::Peek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hexdump"&gt;hexdump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#perlio-getlayers"&gt;PerlIO::get_layers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#many-ways"&gt;The many ways of writing a character&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#string-literals"&gt;String literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-chr-function"&gt;The chr function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#octal"&gt;Octal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hexadecimal"&gt;Hexadecimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#by-codepoint-name"&gt;By codepoint name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-hexadecimal"&gt;Other hexadecimal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-regular-expressions"&gt;In regular expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ascii-encoded-json"&gt;ASCII-encoded JSON strings in your code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-characters"&gt;Accented character vs character + combining accent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1245-restate-my-assumptions"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;12:45. Re-state my assumptions
&lt;/h2&gt;

&lt;p&gt;We will normally want to read and write UTF-8 encoded data. Therefore you should make sure that your terminal can handle it. While we will occasionally have to deal with other encodings, and will often want to look at the byte sequences that we are reading and writing and not just the characters they represent, your life will still be much easier if you have a UTF-8 capable terminal. You can test your terminal thus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'binmode(STDOUT, ":encoding(UTF-8)"); say "\N{GREEK SMALL LETTER LAMDA}"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should print &lt;code&gt;λ&lt;/code&gt;, a letter that looks a bit like a lower-case &lt;code&gt;y&lt;/code&gt; mirrored through the horizontal axis.&lt;/p&gt;

&lt;p&gt;And if you pipe the output from that into &lt;code&gt;hexdump -C&lt;/code&gt; you should see the byte sequence &lt;code&gt;0xce 0xbb 0x0a&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-royal-road"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The Royal Road
&lt;/h2&gt;

&lt;p&gt;Ideally, your code will only have to care about any of this at the edges - that is, where data enters and leaves the application. That could be when reading or writing a file, sending/receiving data across the network, making system calls, or talking to a database. And in many of these cases - especially talking to a database - you will be using a library which already handles everything for you. In a brand new code-base which doesn’t have to deal with any legacy baggage you should, in theory, only have to read this first section of this document.&lt;/p&gt;

&lt;p&gt;Alas, most real programming is a habitation of devils, who will beset you from all around and make you have to care about the rest of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#characters-representations-and-strings"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Characters, representations, and strings
&lt;/h3&gt;

&lt;p&gt;Perl can work with strings containing any character in Unicode. Characters are written in source code either as a literal character such as "m" or in several other ways. These are all equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;m&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x6d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# or chr(109), of course&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{6d}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{U+6d}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{LATIN SMALL LETTER M}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As are these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3bb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{3bb}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{U+3bb}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{GREEK SMALL LETTER LAMDA}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Non-ASCII characters can also appear as literals in your code, for example &lt;code&gt;"λ"&lt;/code&gt;, but this is not recommended - see the discussion of the &lt;code&gt;utf8&lt;/code&gt; pragma below. You can also use octal - &lt;code&gt;"\154"&lt;/code&gt; - but this too is not recommended as hexadecimal encodings are marginally more familiar and easier to read.&lt;/p&gt;

&lt;p&gt;Internally, characters have a &lt;em&gt;representation&lt;/em&gt;, a sequence of bytes that is unique for a particular combination of character and encoding. Most modern languages default to using UTF-8 for that representation, but perl is old enough to pre-date UTF-8 - and indeed to pre-date any concern for most character sets. For backward-compatibility reasons, and for compatibility with the many C libraries for which perl bindings exist, it was decided when perl sprouted its Unicode tentacle that the default representation should be ISO-Latin-1. This is a single-byte character set that covers most characters used in most modern Western European languages, and is a strict superset of ASCII.&lt;/p&gt;

&lt;p&gt;Any string consisting solely of characters in ISO-Latin-1 will by default be represented internally in ISO-Latin-1. Consider these strings:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Release the raccoon!&lt;/strong&gt; - consists solely of ASCII characters. ASCII is a subset of ISO-Latin-1, so the string’s internal representation is an ISO-Latin-1-encoded string of bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Libérez le raton laveur!&lt;/strong&gt; - consists solely of characters that exist in ISO-Latin-1, so the string’s internal representation is an ISO-Latin-1-encoded string of bytes. The "é" character has &lt;em&gt;code point&lt;/em&gt; 0xe9 and is represented as the byte 0xe9 internally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rhyddhewch y racŵn!&lt;/strong&gt; - the "ŵ" does not exist in ISO-Latin-1. But it does exist in Unicode, with code point 0x175. As soon as perl sees a non-ISO-Latin-1 character in a string, it switches to using something UTF-8-ish, so code point 0x175 is represented by &lt;em&gt;byte sequence&lt;/em&gt; 0xc5 0xb5. Note that while valid characters’ internal representations are valid UTF-8 byte sequences, this can also encode &lt;em&gt;invalid&lt;/em&gt; characters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Libérez le raton laveur! Rhyddhewch y racŵn!&lt;/code&gt; - this contains both an "é" (which is in ISO-Latin-1) and a "ŵ" (which is not), so the whole string is UTF-8 encoded. The "ŵ" is as before encoded as byte sequence 0xc5 0xb5, but the "é" must also be UTF-8 encoded instead of ISO-Latin-1-encoded, so becomes byte sequence 0xc3 0xa9.&lt;/p&gt;

&lt;p&gt;But notice that ISO-Latin-1 not only contains ASCII, and characters like "é" (at code point 0xe9, remember), it also contains characters "Ã" (capital A with a tilde, code point 0xc3) and "©" (copyright symbol, code point 0xa9). So how do we tell the difference between the ISO-Latin-1 byte sequence 0xc3 0xa9 representing "Ã©" and the UTF-8 byte sequence 0xc3 0xa9 representing "é"? Remember that a representation is "a sequence of bytes that is unique for a particular combination of character and encoding". So perl stores the encoding as well as the byte sequence. It is stored as a single bit flag. If the flag is unset then the sequence is ISO-Latin-1, if it is set then it is UTF-8.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code-encoding-the-utf8-pragma-and-why-you-shouldnt-use-it"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Source code encoding, the utf8 pragma, and why you shouldn’t use it
&lt;/h3&gt;

&lt;p&gt;It is possible to put non-ASCII characters into your source code. For example, consider this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;é&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$string&lt;/span&gt;&lt;span class="s2"&gt; contains &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; characters&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;from which some problems arise. First, if the file is encoded in UTF-8, how can perl tell when it comes across the byte sequence 0xc3 0xa9 what encoding that is? Is it ISO-Latin-1? Well, it could be. Is it UTF-8? Again, it could be. In general, it isn’t possible to tell from a sequence of bytes what encoding is in use. For backward-compatibility reasons, perl assumes ISO-Latin-1.&lt;/p&gt;

&lt;p&gt;If you save that file encoded in UTF-8, and have a UTF-8-savvy terminal, that code will output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;é contains 2 characters
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which is quite clearly wrong. It interpreted the 0xc3 0xa9 as two characters, but then when it spat those two characters out your terminal treated them as one.&lt;/p&gt;

&lt;p&gt;We can tell perl that the file contains UTF-8-encoded source code by adding a &lt;code&gt;use utf8&lt;/code&gt;. We also need to fix the output encoding - &lt;code&gt;use utf8&lt;/code&gt; doesn’t do that for you, it only asserts that the source file is UTF-8 encoded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;utf8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;binmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;é&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$string&lt;/span&gt;&lt;span class="s2"&gt; contains &lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; character&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(For more on output encoding see the next section)&lt;/p&gt;

&lt;p&gt;And now we get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;é contains 1 character
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hurrah!&lt;/p&gt;

&lt;p&gt;At this point a second problem arises. Some editors aren’t very clever about encodings and even if they correctly read a file that is encoded in UTF-8, they will save it in ISO-Latin-1. VSCode for example is known to do this at least some of the time. If that happens, you’re still asserting via &lt;code&gt;use utf8&lt;/code&gt; that the file is UTF-8, but the &lt;code&gt;"é"&lt;/code&gt; in the sample file will be encoded as byte 0xe9, and the following double-quote and semicolon as 0x22 0x3b. This results in a fatal error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Malformed UTF-8 character: \xe9\x22\x3b (unexpected non-continuation byte 0x22,
immediately after start byte 0xe9; need 3 bytes, got 1) at ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So given that you’re basically screwed if you have non-ASCII source code no matter whether you use utf8 or not, I recommend that you just don’t do it. If you need a non-ASCII character in your code, use any of the many other ways of specifying it, and if necessary put a comment nearby so that whoever next has to fiddle with the code knows what it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xe9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;# e-acute&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#input-and-output"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Input and output
&lt;/h3&gt;

&lt;p&gt;Strings aren’t the only things that have encodings. File handles do too. Just like how perl defaults to assuming that your source code is encoded in ISO-Latin-1, it assumes unless told otherwise that file handles similarly are ISO-Latin-1, and so if you try to print "é" to a a handle, what actually gets written is the byte 0xe9.&lt;/p&gt;

&lt;p&gt;Even if your source code has the &lt;code&gt;use utf8&lt;/code&gt; pragma, and your code contains the byte sequence 0xc3 0xa9, which will internally by decoded as the character "é", your handles are still ISO-Latin-1 and you'll get a single byte for that character. For how this happens see "PerlIO layers" below.&lt;/p&gt;

&lt;p&gt;Things get a bit more interesting if you try to send a non-ISO-Latin-1 character to an ISO-Latin-1 handle. Perl does the best it can and sends the internal representation - which is UTF-8, remember - to the handle and emits a warning "Wide character in print". Pay attention to the warnings!&lt;/p&gt;

&lt;p&gt;This behaviour is another common source of bugs. If you send the two strings "Libérez le raton laveur!" followed by "Rhyddhewch y racŵn!" to an ISO-Latin-1 handle, then the first one will sail through, correctly encoded, but the second will also go through. You’ve now got two different character encodings in your output stream and no matter what encoding is expected at the other end you’ll get mojibake.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#perlio-layers"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;PerlIO layers
&lt;/h4&gt;

&lt;p&gt;We’ve seen how by default input and output is assumed to be in ISO-Latin-1. But that can be changed. Perl has supported different encodings for I/O since the dawn of time - since at least perl 3.016. That’s when it started to automatically convert "\n" into "\r\n" and vice versa on MSDOS, and the &lt;code&gt;binmode()&lt;/code&gt; function was introduced in case you wanted to open a file on DOS without any translation.&lt;/p&gt;

&lt;p&gt;These days this is implemented via PerlIO layers, which allows you to open a file with all kinds of translation layers, including those which you write yourself or grab from the CPAN (see for example &lt;a href="https://metacpan.org/pod/File::BOM"&gt;File::BOM&lt;/a&gt;). You can also add and remove layers from an already open handle.&lt;/p&gt;

&lt;p&gt;In general these days, you always want to read/write UTF-8 or raw binary, so will open files something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some.log&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;

&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;:raw&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image.jpg&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or to change the encoding of an already open handle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;binmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:encoding(UTF-8)&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(&lt;strong&gt;NB&lt;/strong&gt; that encodings applied to bare-word file handles such as STDOUT have global effect!)&lt;/p&gt;

&lt;p&gt;Provided that we don’t have to worry about Windows, we generally will only ever have one layer doing anything significant on a handle (on Windows the &lt;code&gt;:crlf&lt;/code&gt; layer is useful in addition to any others, to cope with Windows’s endearing backward-compatibility with &lt;a href="https://en.wikipedia.org/wiki/CP/M"&gt;CP/M&lt;/a&gt;), but it's possible to have more. In general, when a handle is opened for reading, encodings are applied to data in the order that they are specified in the &lt;code&gt;open()&lt;/code&gt; function call, from left to right. When writing, they are applied from right to left.&lt;/p&gt;

&lt;p&gt;If you ever think you need more than one layer, or want a layer other than those in the examples above, see &lt;a href="https://metacpan.org/pod/PerlIO"&gt;PerlIO&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-encode-module"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The Encode module
&lt;/h2&gt;

&lt;p&gt;The above explains the "royal road", where you are in complete control of how data gets into and out of your code. In that situation, you should never need to re-encode data, as it will always be Just A Bunch Of Characters whose underlying representation you don’t care about. That is, however, often not the case in the real world where we are beset by demons. We sometimes have to deal with libraries that do their own encoding/decoding and expect us to supply them with a byte stream (&lt;a href="https://metacpan.org/pod/XML::LibXML"&gt;XML::LibXML&lt;/a&gt;, for example), or which have had incorrect or partial bug fixes applied for any of the problems mentioned above and for which we can’t easily provide a proper fix because of other code now relying on the buggy behaviour (by for example having work-arounds to correct badly-encoded data).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encodeencode"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Encode::encode
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Encode::encode()&lt;/code&gt; function takes a string of characters and returns a string of bytes that represent that string in your desired encoding. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Libérez le raton laveur!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;FB_CROAK&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;LEAVE_SRC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will return a string where the character "é" has been replaced by the two bytes  0xc3 0xa9. If the original string was encoded in UTF-8 then the underlying representation of the input and output strings will be the same, but their encodings (as stored in the single bit flag we mentioned earlier) will be different, and the output will be reported as being one character longer by the &lt;code&gt;length()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Encode::encode&lt;/code&gt; can sometimes for Complicated Internals Optimisation Reasons modify its input. To avoid this set the &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; bit in its third argument.&lt;/p&gt;

&lt;p&gt;If you are encoding to anything other than UTF-8 or your string may contain characters outside of Unicode then you should consider telling &lt;code&gt;encode()&lt;/code&gt; to be strict about characters that it can't encode, such as if you try to encode "ŵ" into a ISO-Latin-1 byte sequence. That's what the &lt;code&gt;Encode::FB_CROAK&lt;/code&gt; bit is about in the example - in real code the encode should be in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block to deal with the exception that may arise. &lt;code&gt;Encode&lt;/code&gt;'s documentation has a whole section on &lt;a href="https://metacpan.org/pod/Encode#Handling-Malformed-Data"&gt;handling malformed data&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encodedecode"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Encode::decode
&lt;/h3&gt;

&lt;p&gt;It is quite common for us to receive data, either from a network connection or from a library, which is a UTF-8-encoded byte stream. Naively treating this as &lt;em&gt;ISO-Latin-1 characters&lt;/em&gt; will lead to doom and disaster, as the byte sequence 0xc3 0xa9 will, as already explained, be interpreted as the characters "Ã" and "©". &lt;code&gt;Encode::decode()&lt;/code&gt; takes a bunch of bytes and turns them into characters assuming that they are in a specified encoding. For example, this will return a "é" character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xc3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xa9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;FB_CROAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should consider how to handle a byte stream that turns out to not be valid in your desired encoding and again I recommend use of &lt;code&gt;Encode::FB_CROAK&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encode-everything-else"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Encode:: everything else
&lt;/h3&gt;

&lt;p&gt;The "Encode" module provides some other functions that, on the surface, look useful. They are, mostly, not.&lt;/p&gt;

&lt;p&gt;Remember how waaaay back I briefly mentioned that perl’s internal representation for non-ISO-Latin-1 characters was UTF-8-ish and how they could contain invalid characters? That’s why you shouldn’t use &lt;code&gt;encode_utf8&lt;/code&gt; or &lt;code&gt;decode_utf8&lt;/code&gt;. You may be tempted to use &lt;code&gt;Encode::is_utf8()&lt;/code&gt; to check a string's encoding. Don't, for the same reason.&lt;/p&gt;

&lt;p&gt;You will generally not be calling &lt;code&gt;encode()&lt;/code&gt; with a string literal as its input, but with a variable as its input. However, any errors like "Modification of a read-only value attempted" are your fault, you should have told it to &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don't even think about using the &lt;code&gt;_utf8_on&lt;/code&gt; and &lt;code&gt;_utf8_off&lt;/code&gt; functions. They are only useful for deliberately breaking things at a lower level than you should care about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Debugging
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-utf8-flag"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;the UTF8 flag
&lt;/h3&gt;

&lt;p&gt;The UTF8 flag &lt;em&gt;is&lt;/em&gt; a reliable indicator that the underlying representation uses multiple bytes per non-ASCII character, but that’s about it. It is &lt;em&gt;not&lt;/em&gt; a reliable indicator whether a string’s underlying representation is valid UTF-8 or that the string is valid Unicode.&lt;/p&gt;

&lt;p&gt;The result of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;UTF-8&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xe9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is a string whose underlying representation is valid UTF-8 but the flag is off.&lt;/p&gt;

&lt;p&gt;This, on the other hand has the flag on but the underlying representation is not valid UTF-8 because the character is out of range:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2097153&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an invalid character in Unicode, but perl encodes it (it has to encode it so it can store it) and turns the UTF8 flag on (so that it knows how the underlying representation is encoded):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xfff8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, this variable that someone else’s broken code might pass to you contains an invalid encoding of a valid character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xf0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x82&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x82&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x1c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nn"&gt;Encode::&lt;/span&gt;&lt;span class="nv"&gt;_utf8_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#develpeek"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Devel::Peek
&lt;/h3&gt;

&lt;p&gt;This is a very useful module for looking at the internals of perl variables, in particular for looking at what perl thinks the characters are and what their underlying representation is. It exports a &lt;code&gt;Dump()&lt;/code&gt; function, which prints details about its argument’s internal structure to STDERR. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -MDevel::Peek -E 'Dump(chr(0xe9))'
SV = PV(0x7fa98980b690) at 0x7fa98a00bf90
  REFCNT = 1
  FLAGS = (PADTMP,POK,READONLY,PROTECT,pPOK)
  PV = 0x7fa989408170 "\351"\0
  CUR = 1
  LEN = 10

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the purposes of debugging character encoding issues, the two important things to look at are the lines beginning with &lt;code&gt;FLAGS =&lt;/code&gt; and &lt;code&gt;PV =&lt;/code&gt;. Note that there is no UTF8 flag set, indicating that the string uses the single-byte ISO-Latin-1 encoding. And the string’s underlying representation is shown (in octal, annoyingly), as &lt;code&gt;"\351"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And here’s what it looks like when the string contains code points outside ISO-Latin-1, or has been decoded from a byte stream into UTF-8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -MDevel::Peek -E 'Dump(chr(0x3bb))'
SV = PV(0x7ff37e80b090) at 0x7ff388012390
  REFCNT = 1
  FLAGS = (PADTMP,POK,READONLY,PROTECT,pPOK,UTF8)
  PV = 0x7ff37f907350 "\316\273"\0 [UTF8 "\x{3bb}"]
  CUR = 2
  LEN = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the UTF8 flag has appeared, and that we are shown both the underlying representation as two octal bytes &lt;code&gt;"\316\273"&lt;/code&gt; and the characters (in hexadecimal if necessary - mmm, consistency) that those bytes represent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hexdump"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;hexdump
&lt;/h3&gt;

&lt;p&gt;For debugging input and output I recommend the external &lt;code&gt;hexdump&lt;/code&gt; utility. Feed it a file and it will show you the bytes therein, avoiding any clever UTF-8-decoding that your terminal might do if you were to simply &lt;code&gt;cat&lt;/code&gt; the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat greek
αβγ
$ hexdump -C greek
00000000  ce b1 ce b2 ce b3 0a                              |.......|
00000007
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can of course also read from STDIN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#perliogetlayers"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;PerlIO::get_layers
&lt;/h3&gt;

&lt;p&gt;Once you’re sure that your code isn’t doing anything perverse, but your data is still getting screwed up on input/output you can see what encoding layers are in use on a handle with the &lt;code&gt;PerlIO::get_layers&lt;/code&gt; function. &lt;code&gt;PerlIO&lt;/code&gt; is a Special built-in namespace, you don’t need to &lt;code&gt;use&lt;/code&gt; it. Indeed, if you do try to &lt;code&gt;use&lt;/code&gt; it you will fail, as it doesn’t exist as a module. Layers are returned in an array, in the order that you would tell &lt;code&gt;open()&lt;/code&gt; about them.&lt;/p&gt;

&lt;p&gt;Layers can apply to any handle, not just file handles. If you’re dealing with a socket then remember that they have both an input side and an output side which may have different layers - see &lt;a href="https://metacpan.org/pod/PerlIO"&gt;the PerlIO manpage&lt;/a&gt; for details. And also see the doco if you care about the difference between &lt;code&gt;:utf8&lt;/code&gt; and &lt;code&gt;:encoding(UTF-8)&lt;/code&gt; - although if you diligently follow the sage advice in this document you won’t care, because you won’t use &lt;code&gt;:utf8&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-many-ways-of-writing-a-character"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The many ways of writing a character
&lt;/h2&gt;

&lt;p&gt;There are numerous different ways of representing a character in your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#string-literals"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;String literals
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;m&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the reasons outlined above please only use this for ASCII characters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-chr-function"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;The chr function
&lt;/h3&gt;

&lt;p&gt;This function takes a number as its argument and returns the character with the corresponding codepoint. For example, &lt;code&gt;chr(0x3bb)&lt;/code&gt; returns &lt;code&gt;λ&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#octal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Octal
&lt;/h3&gt;

&lt;p&gt;You can use up to three octal digits &lt;code&gt;"\155"&lt;/code&gt; for ISO-Latin-1 characters only but please don’t. It’s a less familiar encoding than hexadecimal so hex is marginally easier to read, and it also suffers from the “how long is this number” problem described below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hexadecimal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Hexadecimal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{e9}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can put any number of hexadecimal digits between the braces. There is also a version of this which doesn’t use braces: &lt;code&gt;"\xe9"&lt;/code&gt;. It can only take one or two hexadecimal digits and so is only valid for ISO-Latin-1 characters. The lack of delimiters can lead to confusion and error. Consider &lt;code&gt;"\xa9"&lt;/code&gt;. Brace-less &lt;code&gt;\x&lt;/code&gt; can take one or two hex digits, so is that &lt;code&gt;\xa&lt;/code&gt; (a line-feed character) followed by the digit &lt;code&gt;9&lt;/code&gt;, or is it &lt;code&gt;\xa9&lt;/code&gt;, the copyright symbol? Brace-less &lt;code&gt;\x&lt;/code&gt; is greedy, so if it looks like there are two hex digits it will assume that there are. Only if the first digit is followed by the end-of-string or by a non-hex-digit will it assume that you meant to use the single digit form. This means that &lt;code&gt;\xap&lt;/code&gt;, for example, is a single hex digit, so is equivalent to &lt;code&gt;\x{0a}p&lt;/code&gt;, a new line followed by the letter &lt;code&gt;p&lt;/code&gt;. I think you will agree that use of braces makes things much clearer, so the brace-less variant is deprecated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#by-codepoint-name"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;By codepoint name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{GREEK SMALL LETTER LAMDA}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may sometimes be preferable to providing the (hexa)decimal codepoint with an associated comment, but it gets awful wordy awful fast. By default the name must correspond &lt;em&gt;exactly&lt;/em&gt; to that in the Unicode standard. Shorter aliases are available if you ask for them, via the &lt;code&gt;charnames&lt;/code&gt; pragma. The documentation only mentions this for the Greek and Cyrillic scripts, but they are available for all scripts which have letters. For example, these are equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\x{5d0}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;

&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;HEBREW&lt;/span&gt; &lt;span class="nv"&gt;LETTER&lt;/span&gt; &lt;span class="nv"&gt;ALEF&lt;/span&gt;&lt;span class="p"&gt;}"&lt;/span&gt;&lt;span class="s2"&gt;

use charnames qw(hebrew);
&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;N&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;ALEF&lt;/span&gt;&lt;span class="p"&gt;}"&lt;/span&gt;&lt;span class="s2"&gt;                  # א
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful if you ask for character-set-specific aliases as there may be name clashes. Both Arabic and Hebrew have a letter called "alef", for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;charnames&lt;/span&gt; &lt;span class="sx"&gt;qw(arabic)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{ALEF}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;                  &lt;span class="c1"&gt;# ا&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;charnames&lt;/span&gt; &lt;span class="sx"&gt;qw(arabic hebrew)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{ALEF}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;                  &lt;span class="c1"&gt;# Always Hebrew, no matter the order of the imports!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A happy medium ground is to ask for &lt;code&gt;:short&lt;/code&gt; aliases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;charnames&lt;/span&gt; &lt;span class="sx"&gt;qw(:short)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{ALEF}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;                           &lt;span class="c1"&gt;# error&lt;/span&gt;
&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{hebrew:alef}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\N{arabic:alef}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;    &lt;span class="c1"&gt;# does what it says on the tin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-hexadecimal"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Other hexadecimal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\N{U+3bb}&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This notation looks a little bit more like the U-ish hexadecimal notations used in other languages while also being a bit like the &lt;code&gt;\N{...}&lt;/code&gt; notation for codepoint names. Unless you want to mix hexadecimal along with codepoint names you should probably not use this, and prefer &lt;code&gt;\x{...}&lt;/code&gt; which is more familiar to perl programmers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-regular-expressions"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;In regular expressions
&lt;/h3&gt;

&lt;p&gt;You can use any of the &lt;code&gt;\x&lt;/code&gt; and &lt;code&gt;\N{...}&lt;/code&gt; variants in regular expressions. You may also see &lt;code&gt;\p&lt;/code&gt;, &lt;code&gt;\P&lt;/code&gt;, and &lt;code&gt;\X&lt;/code&gt; as well. See &lt;a href="https://metacpan.org/dist/perl/view/pod/perlunicode.pod"&gt;perlunicode&lt;/a&gt; and &lt;a href="https://metacpan.org/dist/perl/view/pod/perlrebackslash.pod"&gt;perlrebackslash&lt;/a&gt;. You should consider use of the &lt;code&gt;/a&lt;/code&gt; modifier as that does things like force &lt;code&gt;\d&lt;/code&gt; to only match ASCII and not, say, &lt;code&gt;৪&lt;/code&gt; which looks like &lt;code&gt;8&lt;/code&gt; but is actually &lt;code&gt;BENGALI DIGIT FOUR&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asciiencoded-json-strings-in-your-code"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;ASCII-encoded JSON strings in your code
&lt;/h3&gt;

&lt;p&gt;You may need to embed JSON strings in your code, especially in tests. I recommend that JSON should always be ASCII-encoded as this minimises the chances of it getting mangled anywhere. This introduces yet another annoying way of embedding a bunch of hex digits into text. This example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x3c0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will produce the string &lt;code&gt;"\u03c0"&lt;/code&gt;. That’s the sequence of eight characters &lt;code&gt;"&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;u&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; &lt;code&gt;3&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; &lt;code&gt;"&lt;/code&gt;. The double quotes are how JSON says “this is a string”, and the two characters &lt;code&gt;\&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt; are how JSON says “here comes a hexadecimal code point”. If you want to put ASCII-encoded JSON in your code then you need to be careful about quoting and escaping.&lt;/p&gt;

&lt;p&gt;Perl will treat the character sequence &lt;code&gt;\&lt;/code&gt; &lt;code&gt;u&lt;/code&gt; as a real back-slash followed by the letter when it is single-quoted, but in general it is always good practice to escape a back-slash that you want to be a real back-slash, to avoid confusion to the reader who may not have been paying attention to whether you’re single- or double-quoting, or in case you later change the code to use double-quotes and interpolate some variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"I like &lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;u03c0, especially Greek pie"&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# or double-quoted with interpolation&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;qq{"I like \\u03c0, especially $nationality pie"}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accented-character-vs-character-combining-accent"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Accented character vs character + combining accent
&lt;/h3&gt;

&lt;p&gt;For many characters there are two different valid ways of representing them. &lt;code&gt;chr(0xe9)&lt;/code&gt; is &lt;code&gt;LATIN SMALL LETTER E WITH ACUTE&lt;/code&gt;. The same character can be obtained with the two codepoints &lt;code&gt;"e".chr(0x301)&lt;/code&gt; - that is &lt;code&gt;LATIN SMALL LETTER E&lt;/code&gt; and &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Whether those should sort the same, compare the same, or one should be converted to t’other will vary depending on your application, so the best I can do is point you at &lt;a href="https://metacpan.org/pod/Unicode::Normalize"&gt;Unicode::Normalize&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>David Cantrell</name>
    </author>
    <id>https://dev.to/drhyde/a-brief-guide-to-perl-character-encoding-if7</id>
    <published>2022-01-31T18:43:59Z</published>
    <updated>2022-01-31T18:43:59Z</updated>
    <category term="perl"/>
    <category term="unicode"/>
    <category term="mojibake"/>
  </entry>
  <entry>
    <title>#549 - Wordle</title>
    <link rel="alternate" href="https://perlweekly.com/archive/549.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Probably many of you have seen people posting their Wordle results. It is a nice little game that originally was written fo English speakers. Then several open source versions popped up that were then forked to create versions in many languages.</p>
<p>I have a <a href="https://wordle.szabgab.com/">partial list of Wordle clones</a>. I was hoping the author of one of these open source versions would make it easy to add other languages and then people would not need to host their own translated versions. So far I have not seen that happen.</p>
<p>Anyway, this has nothing to do with Perl.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/549.html</id>
    <published>2022-01-31T10:00:00Z</published>
    <updated>2022-01-31T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>TWC 149: Limited Fibs, and Bases of Unusual Size</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2022/01/twc-149-limited-fibs-and-bases-of-unusual-size.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10658</id>
    <published>2022-01-31T03:19:38Z</published>
    <updated>2022-01-31T03:43:49Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="C" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="c" label="C" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="Raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>(<strong>Currently editing</strong>)</p>

<p>In which we see that you don't need <em>all</em> the Fibs, and have trouble turning 21.</p>

<h1>TWC Task #1 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-149/#TASK1">Fibonacci Digit Sum</a></h1>

<p>Given an input $N, generate the first $N numbers for which the sum of their digits is a Fibonacci number.</p>

<p>(i.e. Generate <a href="https://oeis.org/A028840">OEIS A028840</a>)</p>

<h2>Observations:</h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/raku/ch-1.raku">Raku</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/perl/ch-1.pl">Perl</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/c/ch-1.c">C</a></h2>

<h1>TWC Task #2 - <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-149/#TASK2">Largest Square</a></h1>

<p>(i.e. Generate <a href="https://oeis.org/A287298">OEIS A287298</a>)</p>

<p>Given a number base, derive the largest perfect square with no repeated digits and return it as a string. (For base>10, use ‘A’..‘Z’.)</p>

<h2>Observations:</h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/raku/ch-2.raku">Raku</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/perl/ch-2.pl">Perl</a></h2>

<h2><a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-149/bruce-gray/c/ch-2.c">C</a></h2>
]]>
        

    </content>
</entry>
  <entry>
    <title>Calling a Python Function From Perl</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/29#expect_perl_python" type="text/html"/>
    <content type="html">
&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Recently the question came up of how to call a Python function from Perl. Here is one
way to do it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The method here is to use Expect.pm to create a subprocess containing the Python repl.
Python code is then loaded and called interactively. In my experience this is good for
calling, say, a BERT model on some text from Perl. This approach is minimalistic as 
compared to other solutions such as standing up a Fast API instance to serve the model.
Furthermore, this same pattern can be used for any arbitrary Python code you may need to 
call from Perl.&lt;/p&gt;

&lt;p&gt;While this works well it does introduce additional complexity to an application. If at all
possible it is preferable to re-write the Python functionality in Perl. An ideal use case
would be where it would be too laborious to re-implement the Python code in Perl. Imagine,
say, we want to use KeyBERT to extract keywords from a given body of text. In this case we
may be doing substantial data and text processing in Perl and merely need to call out to 
Python for this single function. If at some point KeyBERT were to become available 
natively to Perl, perhaps through the Apache MXNet bindings, then that interface should
be preferred. If nothing else, the performance improvement would be dramatic.&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# A simple example of calling a Python function
# from a Perl script using a Python repl started
# as a subprocess.
##
use Expect;
use boolean;
use constant TIMEOUT =&gt; 0.25; 
use constant PYTHON =&gt; q[/usr/bin/python];

sub create_python{
    my($io) = @_;
    my $python = do{
        local $/;
        &lt;DATA&gt;;
    };
    $$io = new Expect();
    $$io-&gt;log_stdout(false);
    $$io-&gt;raw_pty(true);
    $$io-&gt;spawn(PYTHON);
    $$io-&gt;send("$python\n\n");
    $$io-&gt;expect(TIMEOUT, q[-re] , q|m/[0-9]*/|);
    $$io-&gt;clear_accum();
}

sub call_python_sample{
    my($io, $arg) = @_;
    print $$io-&gt;send("sample(" . $arg . ")\n");
    $$io-&gt;expect(TIMEOUT, q[-re], qr[\d+]);
    my $r = $$io-&gt;exp_match();
    $$io-&gt;clear_accum();
    return $r;
}

MAIN:{
    my($io);
    create_python(\$io);
    print call_python_sample(\$io, 1) . "\n";
    print call_python_sample(\$io, 9) . "\n";
}

__DATA__
import os
os.system("stty -echo")
def sample(a):
    print(str(a + 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The results&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl call_python_.pl
2
10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The code here is a minimum working example. Well, fairly minimal in that I could have 
avoided breaking things up into multiple subroutines. In terms of cleanliness and 
explainability these divisions make sense, with only the added need to pass a reference to
an Expect object back and forth as a parameter.&lt;/p&gt;

&lt;p&gt;For a self-contained example the Python code we are going to run is contained in the DATA
section. For more complex use cases it would make sense to have the Python code in 
separate files which could be read in and loaded. They could also be specified directly as
arguments to the Python interpreter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sub create_python&lt;/code&gt; instantiates a new Expect object, sets some parameters for the 
object, and spawns the Python repl. We also clear the Expect buffers so that upon the next
invocation we need not worry about the Python header messages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sub call_python_sample&lt;/code&gt; calls the function of interest. Here it is just &lt;code&gt;sample()&lt;/code&gt; 
which takes a single argument, adds 1 to the argument, and prints out the result.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Effectively what we are doing is interprocess communication using text passed between the
two processes. Perl knows nothing of the state of the Python code, and vice versa. If you
call a Python function which does not print a value to STDOUT then you will need to add
your own print() call. This is not actually so bad a situation since Expect works by 
pattern matching on the expected (pun intended!) output. To ensure you are collecting the 
right values some massaging of what the Python code is doing is to be anticipated 
(pun avoided!). For example, suppose we want to call the KeyBERT function to extract key 
words from some given text. We might consider writing a wrapper function which takes
the output from &lt;code&gt;KeyBERT.extract_keywords&lt;/code&gt; (a list of tuples, each tuple a pair: key 
phrase and a distance) and concatenates and prints each of the pairs to STDOUT on a single
line. In this way our Perl regex can most easily pick up the phrase/distance pairs.&lt;/p&gt;

&lt;p&gt;Expect is a very mature tool, with a generous set of options and abilities. This sort of 
use is really just the tip of the iceberg. In terms of Perl being a "Glue Language" 
consider Expect to be a key ingredient that causes the glue to stick. Peruse the 
documentation for further inspiration.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Expect"&gt;Expect.pm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maartengr.github.io/KeyBERT/index.html"&gt;KeyBERT&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/expect_perl_python</id>
    <published>2022-01-29T16:30:00-05:00</published>
    <updated>2022-01-29T16:30:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7829319208382793807</id>
    <published>2022-01-29T21:39:00.000+01:00</published>
    <updated>2022-01-29T21:39:56.696+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxvii) 10 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/AnyEvent-Fork-1.32' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;AnyEvent::Fork&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - everything you wanted to use fork() for, but couldn't &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.32&lt;/strong&gt; on 2022-01-26&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.31 was 5 years, 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/App-cpanminus-1.7045' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpanminus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - get, unpack, build and install modules from CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.7045&lt;/strong&gt; on 2022-01-27&lt;/li&gt;  &lt;li&gt;Votes: 260&lt;/li&gt;  &lt;li&gt;Previous version: 1.7044 was 3 years, 9 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SCHUBIGER/DateTime-Format-Natural-1.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Natural&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse informal natural language date/time strings &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13&lt;/strong&gt; on 2022-01-23&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.12 was 10 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2022-01-26&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 1 year, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.56&lt;/strong&gt; on 2022-01-26&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.55 was 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/GD-2.75' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GD&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the gd2 graphics library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.75&lt;/strong&gt; on 2022-01-25&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 2.73 was 1 year, 4 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.054' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.054&lt;/strong&gt; on 2022-01-27&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 1.052 was 1 year, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.070' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.070&lt;/strong&gt; on 2022-01-28&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.068 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/PPI-1.271' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse, Analyze and Manipulate Perl (without perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.271&lt;/strong&gt; on 2022-01-25&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 1.270 was 2 years, 6 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9132' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9132&lt;/strong&gt; on 2022-01-28&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 0.9126 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7829319208382793807/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvii-10-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7829319208382793807"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7829319208382793807"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvii-10-great-cpan-modules.html" title="(ccclxxvii) 10 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-718234730276066767</id>
    <published>2022-01-29T21:36:00.000+01:00</published>
    <updated>2022-01-29T21:36:12.072+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxix) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-01-29 20:35:53 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70868805" target="_blank"&gt;Why does Perl allow functions to be declared without being defined?&lt;/a&gt; - [&lt;b&gt;18&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70827168" target="_blank"&gt;Why does combining Perl hashes in and each expression not work?&lt;/a&gt; - [&lt;b&gt;5&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70837207" target="_blank"&gt;Cpan, address already in use error when installing IO::Socket::Timeout&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70892478" target="_blank"&gt;Perl numeric comparison of numeric strings understanding and debugging&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70818333" target="_blank"&gt;How to not export all functions/methods from a package in perl?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/718234730276066767/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxix-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/718234730276066767"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/718234730276066767"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxix-stackoverflow-perl-report.html" title="(dxix) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Grant Report 2021-12/2022-01 Raku CI Bot by Patrick Böker</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant-report-raku-ci-bot-2022-01"/>
  <id>tag:news.perlfoundation.org,2022-01-29:/post/grant-report-raku-ci-bot-2022-01</id>
  <published>2022-01-29T10:45:20</published>
  <updated>2022-01-29T10:45:20</updated>
  <summary>
  <![CDATA[
     Regarding the progress on his Raku CI Bot grant, Patrick Böker writes: In December and January I worked in different areas of RCB: I fixed smaller errors in all parts of the stack, so that now testing on the OBS backend works, ignoring errors caused by the still open bugs listed below. I started work on the website which currently allows viewing test status and results of a given test 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding the progress on his Raku CI Bot grant, Patrick Böker writes:</p>

<hr />

<p>In December and January I worked in different areas of RCB:</p>

<ul>
<li>I fixed smaller errors in all parts of the stack, so that now testing on the OBS backend works, ignoring errors caused by the still open bugs listed below.</li>
<li>I started work on the website which currently allows viewing test status and results of a given test set and downloading of the source archive the build was based on.</li>
<li>I fixed MoarVM#1614 which turned out to be a long standing bug in the Raku OpenSSL library. I had a lot of help with debugging MoarVM from niner++.</li>
</ul>

<p>Red#537 is making me nervous. It's a bug in Red, which causes Red to mix up different queries in a concurrent setting. The cause is that dynamic variables don't survive through supply / react / whenever blocks and Red relies on several dynamic variables to communicate its state through the stack. Currently the Red author is out of ideas of how to solve this.</p>

<h2>Bug rooster</h2>

<p>Solved:</p>

<ul>
<li>MoarVM#1614: NativeCall error <a href="https://github.com/MoarVM/MoarVM/issues/1614">#1614</a> (Severity: Medium)</li>
</ul>

<p>New:</p>

<ul>
<li>Cro::WebApp#62: <code>&lt;:use&gt;</code> doesn't see route level template locations https://github.com/croservices/cro-webapp/issues/62) (Severity: Low, workaround available)</li>
</ul>

<p>Unchanged:</p>

<ul>
<li>Red#537: Unknown columns in query in concurrent setting <a href="https://github.com/FCO/Red/issues/537">#537</a> (Severity: High)</li>
<li>Red#527: Enum on Pg: invalid input syntax for type integer: \"a\" [#527] (https://github.com/FCO/Red/issues/527) (Severity: High)</li>
<li>Cro::HTTP#161: Implement remote window handling <a href="https://github.com/croservices/cro-http/pull/161">#161</a> (Severity: High, PR: me)</li>
<li>Red#495: SELECTing enums generates broken WHERE in most cases <a href="https://github.com/FCO/Red/issues/495">#495</a> (Severity: Low, workaround available)</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>#548 - Perl Books Collection</title>
    <link rel="alternate" href="https://perlweekly.com/archive/548.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Do you have a Perl books collection?</p>
<p>I am sure most of us own the <strong>Camel</strong> book. As you know, there have been hardly any new <strong>Perl</strong> books published in recent years. I recently bought two very popular <strong>Perl</strong> books <strong>"Extending and Embedding Perl"</strong> and <strong>"Network Programming with Perl"</strong>. I have realised there are two distinct views about good old <strong>Perl</strong> books. One view is that the recommendations in these books are no longer in use, since we have better choices available on <strong>CPAN</strong> now. I fully agree with this view but I also agree to the other view that it is still relevant in terms of base knowledge of the subject. Above all, there is a sentimental values attached to each <strong>Perl</strong> book that I own.</p>
<p>How about you?</p>
<p>Last week, <strong>Gabor</strong>, spoke about learning languages in his editorial. Being an <strong>Indian</strong> by birth, I know more than just the national language of India, <strong>Hindi</strong>. I can understand, to be precise, <strong>six human languages</strong>. Nowadays, I am learning <strong>Spanish</strong> from my daughter as she is learning as part of her school curriculum. But here I would like to know how many programming languages one can fluently code in. Recently in <a href="https://theweeklychallenge.org">The Weekly Challenge</a> contest, we have received loads of solutions in different languages. In <strong>week 147</strong>, we received <strong>100+</strong> solutions. One member who stands out front the crowd is <strong>Abigail</strong>, who has contributed in <strong>30 different programming languages</strong>. To me it seems impossible, but he did it.</p>
<p>How many programming languages do I know? Well thanks to the weekly challenge, I have had the opportunity to code in <strong>Raku</strong>, <strong>Python</strong>, <strong>Java</strong> and <strong>Swift</strong> as well as <strong>Perl</strong>, of course. Do you want to try some new languages? Please give it a try.</p>
<p>Enjoy the week and stay safe.</p></div>
    </content>
    <id>https://perlweekly.com/archive/548.html</id>
    <published>2022-01-24T10:00:00Z</published>
    <updated>2022-01-24T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 2</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" type="text/html"/>
    <content type="html">&lt;p&gt;Continuing from the &lt;a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/"&gt;first part&lt;/a&gt;, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. &lt;/p&gt;
&lt;table border&gt;
&lt;tr&gt;
&lt;td&gt;Period&lt;/td&gt;
&lt;td&gt;CPAN releases&lt;/td&gt;
&lt;td&gt;CPAN authors&lt;/td&gt;
&lt;td&gt;Hackage releases&lt;/td&gt;
&lt;td&gt;Hackage authors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jan 2021&lt;/td&gt;
&lt;td&gt;1184&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;574&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Feb 2021&lt;/td&gt;
&lt;td&gt;1016&lt;/td&gt;
&lt;td&gt;223&lt;/td&gt;
&lt;td&gt;737&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mar 2021&lt;/td&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;783&lt;/td&gt;
&lt;td&gt;258&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2021&lt;/td&gt;
&lt;td&gt;979&lt;/td&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;540&lt;/td&gt;
&lt;td&gt;193&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jun 2021&lt;/td&gt;
&lt;td&gt;982&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;491&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jul 2021&lt;/td&gt;
&lt;td&gt;951&lt;/td&gt;
&lt;td&gt;187&lt;/td&gt;
&lt;td&gt;562&lt;/td&gt;
&lt;td&gt;195&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt; Draw the conclusion yourself. I end my curiosity here, but might compare again in the future.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Continuing from the first part, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. Period CPAN releases CPAN authors Hackage releases Hackage authors … <a href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 2</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1979</id>
    <published>2022-01-21T04:45:23Z</published>
    <updated>2022-01-21T04:45:23Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Grant Proposal: Optree Optimsiations for Performance Gains</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_optree_optimisation_paul_evans"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/grant_proposal_optree_optimisation_paul_evans</id>
  <published>2022-01-20T19:20:01</published>
  <updated>2022-01-20T19:20:01</updated>
  <summary>
  <![CDATA[
     Synopsis Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates. Project Details Inside a 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates.</p>

<h2>Project Details</h2>

<p>Inside a running <code>perl</code> interpreter, source code is compiled into a more direct representation of its behaviour, called an optree. This is comprised of individual elements called ops. Each is executed in sequence, and performs a small specific part of work involved in executing the program as a whole.</p>

<p>Due to the small nature of the specific ops, there are several optimisations that are performed by the interpreter before it starts executing a program; mostly on a theme of combining the effects of several small ops into fewer, larger ones. This allows them to overall work more efficiently as they can either share intermediate results, or can avoid the various data-passing overheads between them.</p>

<p>This project aims to look at three new ideas on this theme of skipping certain elements of the optree by combining their effects together. A full description of each is given in the appendix section below. Each of the three ideas were first mentioned on the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262094.html">Perl5-Porters mailing list</a>.</p>

<h2>Timeline</h2>

<p>Each of the three optimisations would process through the following stages: </p>

<p><em>*1. Create an "ideal-case" benchmark test *</em></p>

<p>Begin by creating a benchmark containing some simple code that is entirely composed of one particular kind of operation, which is the target of the 
optimisation. Measure this benchmark case in order to obtain a baseline performance measurement.  </p>

<p><em>*2. Implement the optimisation *</em></p>

<p>Apply code to the Perl interpreter by defining new opcode flags, adjusting the peephole optimiser, or whatever other techniques may be required to achieve it. </p>

<p>Take a second measurement of performance with the optimisation applied. This should give an indication of the maximal possible gain that could be achieved.</p>

<p><strong>3. Analyse large programs to estimate extent of application</strong></p>

<p>While the figure gained in the above step gives a best-case value, it is unlikely that real-world programs would be able to gain as much benefit. It would be useful to analyse the generated optree of real-world programs to get an estimate of how likely these optimisations are to be hit, and a guess at what proportion of the potential benefit could actually be achieve in a real case.</p>

<p>Actually this step could be performed first, for each of the three optimisations, to get a suggestion on which of them are likely to be the most useful, and thus how to assign the remaining project time to each of them.</p>

<h2>Author Information</h2>

<p>I am Paul Evans, PEVANS on <a href="https://metacpan.org/author/PEVANS">CPAN</a> and current member of the Perl Steering Committee.</p>

<p>I have been a CPAN maintainer for over 12 years, and currently have over 200 distributions under my name. Recently I have been working on a variety of perl core features; adding the <code>isa</code> operator to Perl 5.32, <code>try/catch</code> syntax to 5.34, and the <code>builtin::</code> namespace of additional core functions expected to be part of the upcoming 5.36 release.</p>

<p>I have successfully completed two TPF projects before, to improve the implementation of the <code>Future::AsyncAwait</code> module; and to create bindings for the <code>libuv</code> event system. </p>

<h2>Amount Requested</h2>

<p>$3,980 USD</p>

<h2>Appendix</h2>

<p>The three optimisations described in more detail:</p>

<h3><code>OA_TARGLEX</code> on <code>OP_CONST</code></h3>

<p>Give the <code>OP_CONST</code> opcode the <code>OA_TARGLE</code> flag, meaning that code such as
<code>
    $var = 123;
</code>
gains a performance optimisation, discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> which is normally used to implement scalar lexical variable assignment from a constant, leaving just a single <code>OP_CONST</code> in its place.</p>

<h3><code>OA_TARGLEX</code> with <code>OPpLVAL_INTRO</code></h3>

<p>Create a new <code>OA_...</code> constant, or adjust the semantics of the existing <code>OA_TARGLEX</code>, such that it can also apply in <code>OPpLVAL_INTRO</code> situations. This would allow the (currently fairly-rare) <code>OA_TARGLEX</code> optimisation to
also apply on variables introduced in <code>my</code> expressions, such as
<code>
    my $zero = 0;
</code>
by once again discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> ops.</p>

<h3>Fold away <code>OP_PADSV</code> arguments to <code>UNOP</code>s</h3>

<p>Create a similar optimisation to the <code>-&amp;gt;targ</code> opcode field, applicable to <code>UNOP</code>s to contain the pad offset of a lexical variable argument for arguments being passed into <code>UNOP</code>s. Thus for example a statement like
<code>
    sleep $time;
</code>
could discard the <code>OP_PADSV</code> of its incoming argument, and similarly avoid using the stack for the lexical variable.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Call for Grants: January 2022 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_jan_2022"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/call_for_grants_jan_2022</id>
  <published>2022-01-20T19:14:01</published>
  <updated>2022-01-20T19:14:01</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 Jan 31, 2022, UTC. We will publish the received applications, get community feedback through February 7th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 Jan 31, 2022, UTC. We will publish the received applications, get community feedback through February 7th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than February 1st.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#547 - Learning a human language vs. a programming language</title>
    <link rel="alternate" href="https://perlweekly.com/archive/547.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Learning a programming language is not easy, but have you tried learning a human language? You don't have a compiler to tell you when you make a syntax error. You have a lot more words and rules and a lot more exceptions than in a programming language. Mostly however, the lack of quick feedback is what makes it hard. However, after a few months work you start to be able to speak to people in their native language.</p>
<p>As you might have read I've started to learn Ladino - the language spoken by the Jews who were expelled from the Iberian peninsula more than 500 years ago. It is a mix of medieval Spanish, Portuguese, Italian, French, Turkish, Serb, Arabic, and Hebrew. It is a fantastic exercise and it involves programming as well. Join me!</p>
<p>Something else: In Israel every Saturday evening, once the Shabbat ends, and throughout Sunday people say 'have a good week'. Referring to the week that starts on Sunday, the first day of our work-week. I don't recall ever hearing that or anything similar in Hungary. Not even on Sunday or Monday. I wonder, do you use any similar expression in whatever country and language environment you live in? Let me know and...</p>
<p>Have a good week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/547.html</id>
    <published>2022-01-17T10:00:00Z</published>
    <updated>2022-01-17T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Primes and Pentagonals</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/16#pwc147" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 left-truncatable prime numbers in base 10.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;
use constant N =&gt; 10_000; 

sub sieve_atkin{
    my($n) = @_;
    my @primes = (2, 3, 5);
    my $upper_bound = int($n * log($n) + $n * log(log($n)));
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound;
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub truncatable{
    my($prime, $primes) = @_;
    return false if $prime =~ m/0/;
    my @truncatable = map { my $p = substr($prime, -1 * $_, $_); grep {$p == $_} @{$primes}} 1 .. length($prime);
    return @truncatable == length($prime);
}

sub first_n_truncatable_primes{
    my($n) = @_;
    my @primes = sieve_atkin(N);
    my @truncatable;
    for my $prime (@primes){
        push @truncatable, $prime if truncatable($prime, \@primes);
        last if @truncatable == $n;
    }
    return @truncatable;
}

MAIN:{
    print join(", ", first_n_truncatable_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2, 3, 5, 7, 13, 17, 23, 37, 43, 47, 53, 67, 73, 83, 97, 113, 137, 167, 173, 197
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First off, I am re-using the Sieve of Atkin code I wrote for a previous challenge. These
challenges somewhat frequently have a prime number component so, if I get a chance, I'll
compose that code into it's own module. If it weren't for the copy/paste of the Sieve of 
Atkin code then this solution would be very short! This sort of string manipulation is 
where Perl excels and the determination of whether a number is left truncatable takes
only a few lines.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the first pair of Pentagon Numbers whose sum and difference are 
also a Pentagon Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant N =&gt; 10_000;

sub n_pentagon_numbers{
    my($n) = @_;
    my @pentagon_numbers;
    my $x = 1;
    my %h;
    do{
        my $pentagon = $x * (3 * $x - 1) / 2;
        push @pentagon_numbers, $pentagon;
        $h{"$pentagon"} = $x;
        $x++;
    }while(@pentagon_numbers &lt; $n);
    return (\@pentagon_numbers, \%h);
}

sub pairs_pentagon{
    my($n) = @_;
    my($pentagons, $lookup) = n_pentagon_numbers(N);
    my @pairs;
    for my $x (0 .. @{$pentagons} - 1){
        for my $y (0 .. @{$pentagons} - 1){
            unless($x == $y){
                my($sum, $difference) = ($pentagons-&gt;[$x] + $pentagons-&gt;[$y], abs($pentagons-&gt;[$x] - $pentagons-&gt;[$y]));
                 if($lookup-&gt;{$sum} &amp;&amp; $lookup-&gt;{$difference}){
                     my($s, $t) = ($x + 1, $y + 1);
                     push @pairs, ["P($s)", "P($t)"]
                 }
            }
            last if @pairs == $n;
        }
        last if @pairs == $n;
    }
    return @pairs;
}

sub first_pair_pentagon{
    return [pairs_pentagon(1)];
}

MAIN:{
    print join(", ", @{first_pair_pentagon()-&gt;[0]}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
P(1020), P(2167)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This second part of the challenge proceeds in mostly the same way as the first. We 
generate a large list of candidates and then search for those exhibiting the property in 
question. It is somewhat unexpected that the first pair of Pentagonal Numbers that have 
this property are so deeply located. Many times in these challenges the solution is 
emitted without quite as much searching! &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-147/"&gt;Challenge 147&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/glossary/page.php?sort=LeftTruncatablePrime"&gt;Left Truncatable Primes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PentagonalNumber.html"&gt;Pentagonal Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc147</id>
    <published>2022-01-16T13:29:00-05:00</published>
    <updated>2022-01-16T13:29:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>New year, new impetus for Perl Foundation Marketing Committee</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/marketing-support-2022"/>
  <id>tag:news.perlfoundation.org,2022-01-15:/post/marketing-support-2022</id>
  <published>2022-01-15T04:03:19</published>
  <updated>2022-01-15T04:03:19</updated>
  <summary>
  <![CDATA[
     The TPF Marketing Committee wants to raise USD$100,000 to fund Perl and Raku development and make 2022 the year of Perl and Raku. But we can only do this with community support. In 2022 the Perl Foundation Marketing Committee aims to: Achieve a fundraising target of $100,000 through improved fundraising efforts Improve and sustain the perception of Perl Address feature gaps from community feedback Demonstrate why people should use Perl 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The TPF Marketing Committee wants to raise USD$100,000 to fund Perl and Raku development and make 2022 the year of Perl and Raku. But we can only do this with community support.</p>

<p>In 2022 the Perl Foundation Marketing Committee aims to:
* Achieve a fundraising target of $100,000 through improved fundraising efforts
* Improve and sustain the perception of Perl
* Address feature gaps from community feedback
* Demonstrate why people should use Perl
* Increase adoption of the language</p>

<p>These goals are just words without your help.</p>

<p>We need everyone in the community to share our news and updates via your social media and other channels.</p>

<p>We ask you to use <a href="https://smile.amazon.com/gp/chpf/homepage/ref=smi_chpf_redirect/138-2474394-5588856?ie=UTF8&amp;ein=38-3536536&amp;ref_=smi_ext_ch_38-3536536_cl">Amazon Smile</a> when purchasing from Amazon, providing a percentage donation at no extra cost.</p>

<p>Can you ask your employer to make a donation, or maybe you could make a personal donation to <a href="https://www.perlfoundation.org/donate.html">The Perl Foundation</a>?</p>

<p>Please get involved and coordinate activities at the monthly committee meetings. Come along with your ideas and willing hands so we can take action together.</p>

<p>The meeting dates for 2022 are listed below - all at 1730UTC via Zoom - join <a href="https://join.slack.com/share/enQtMjk0NzkzNjM4NzI5OS05MmE5OGRjNmEzYTNhZmUwMzllNmE2ZDMwMDk1YWMwMzI0NWNmMGM2NWRlM2Q5MzJkMmY4NmEwOTVhNzU2ZTFk">the Marketing Slack channel</a> to keep up to date.</p>

<ul>
<li>10 February</li>
<li>10 March</li>
<li>7 April</li>
<li>12 May</li>
<li>9 June</li>
<li>7 July</li>
<li>11 August</li>
<li>8 September</li>
<li>13 October</li>
<li>10 November</li>
<li>8 December</li>
</ul>

<p>Thank you for your help and we look forward to seeing you!</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#546 - Perl Books</title>
    <link rel="alternate" href="https://perlweekly.com/archive/546.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Welcome to my first edition of 2022 and <strong>95th edition</strong> overall.</p>
<p>I remember there was a time when the <strong>O'Reilly</strong> group published many Perl books. Then came a few other publishing houses like <strong>Manning</strong> publications. I am sure you must have owned a handful of Perl books from these publishers. In recent times not many Perl books have been written, except one or two by <strong>brian d foy</strong>. A friend of mine donated all his Perl books to a local library as he is moving to Python. It is a sad state to be honest. Recently, I came across a <strong>Facebook</strong> post by a friend of mine about a Perl book called <strong>Extending and Embedding Perl</strong>. I knew about it but I had never had the chance to read it. So I decided to buy a used copy from <strong>Amazon</strong>. I must confess I was missing a great deal. If you haven't read it then you must check it out. By the way, I have kept all my Perl books safe. I like to read physical books and not online versions.</p>
<p>With a new year, there is a tradition of new year resolutions. As far as I am concerned, I stopped making any resolutions two years ago. But this year, I decided to make one and stick to it. And the resolution is to get the draft of my first Perl book out as soon as possible. It has been going on for months now. It is embarassing now to even talk about it. There are so many things going on at the same time, I hardly find time for the book. Please wish me luck.</p>
<p>A long time ago, <strong>Gabor</strong> started a campaign to make live videos about Perl. He even did few pair-programming sessions and they were very popular. But then there has been no noise on that front in recent times. I used to make <strong>YouTube</strong> videos for the Weekly Challenge during the middle of last year and then I also stopped because of lack of time. Last month, I started making videos again for the Weekly Challenge. It gives me immense pleasure when I see comments on my videos. Someone recently commented on one video and requested I should make videos of past challenges as well. I have to manage my time carefully otherwise my first book would be neglected again. Having said that, I am not giving up on making videos for the Weekly Challenge. If you are interested then please do check out my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>.</p>
<p>There is one piece of good news shared by <strong>Curtis</strong> - that the MMVP (minimally minimal viable product) RFC for Corinna has been sent to P5P. I am keeping my fingers crossed.</p>
<p>Last but not least, please look after yourself and your loved ones.</p></div>
    </content>
    <id>https://perlweekly.com/archive/546.html</id>
    <published>2022-01-10T10:00:00Z</published>
    <updated>2022-01-10T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Install Perl on Linux and Mac OSX</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-01-10T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-install-perl-on-linux"/>  <id>https://perlmaven.com/dancer2-install-perl-on-linux</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Sieve of Atkin / Curious Fraction Tree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/09#pwc146" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the 10001st prime number.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean; 
use Getopt::Long;
use LWP::UserAgent;

use constant N =&gt; 10_001;   
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)];
        }
    }
    return @primes;
}

sub sieve_atkin{
    my($n) = @_;
    my @primes = (2, 3, 5);
    my $upper_bound = int($n * log($n) + $n * log(log($n)));
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub get_nth_prime{
    my($n, $generate) = @_; 
    my @primes;
    unless($generate){
        @primes = get_primes;
    }
    else{
        @primes = sieve_atkin($n);
    }
    return $primes[$n - 1]; 
}


MAIN:{
    my $n = N;
    my $generate = false;
    GetOptions("n=i" =&gt; \$n, generate =&gt; \$generate);
    print get_nth_prime($n, $generate) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
104743
$ perl perl/ch-1.pl --generate
104743
$ perl perl/ch-1.pl --generate
104743
$ perl perl/ch-1.pl --generate --n 101
547
$ perl perl/ch-1.pl --generate --n 11
31
$ perl perl/ch-1.pl --n 10001
104743
$ perl perl/ch-1.pl --n 11
31
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I've mentioned it before, but for anything that asks for or needs prime numbers I always
ust grab them from one of several convenient online sources, rather than generate them 
myself.&lt;/p&gt;

&lt;p&gt;This time around I figured it'd be sporting to generate them myself, but maybe in an
interesting way. Here I implement a sieve method for determining prime numbers. This
&lt;em&gt;Sieve of Atkin&lt;/em&gt;_ has a claim to fame of being the most performant among prime number
generating sieve techniques. The code is a bit convoluted looking, I will admit, but is 
a faithful Perl representation of the algorithm (follow the reference link for 
pseudocode). Also, rather than try and explain the algorithm myself anyone interested
can find full in depth treatments elsewhere. A background in number theory helps for 
some of the details.&lt;/p&gt;

&lt;p&gt;Since I have some existing code for getting the pre-computed primes I figured I would
use that as a check and extra feature. Command line options allow for the default
behavior (fetch pre-computed primes for an N of 10,001) to be overridden.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Given a fraction return the parent and grandparent of the fraction from the Curious 
Fraction Tree.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use constant ROOT =&gt; "1/1";
use constant SEPARATOR =&gt; "/";

sub initialize{
    my($member) = @_;
    my $graph = new Graph();
    $graph-&gt;add_vertex(ROOT);
    my @next = (ROOT);
    my @changes = ([0, 1], [1, 0]);
    my $level = 0;
    {
        my @temp_next;
        my @temp_changes;
        do{
            $level++;
            my $next = shift @next;
            my($top, $bottom) = split(/\//, $next);
            my $change_left = shift @changes;
            my $change_right = shift @changes;
            my $v_left = ($top + $change_left-&gt;[0]) . SEPARATOR . ($bottom + $change_left-&gt;[1]);
            my $v_right = ($top + $change_right-&gt;[0]) . SEPARATOR . ($bottom + $change_right-&gt;[1]);    
            $graph-&gt;add_edge($next, $v_left);
            $graph-&gt;add_edge($next, $v_right);
            push @temp_next, $v_left, $v_right;
            push @temp_changes, $change_left;
            push @temp_changes, [$level + 1, 0], [0, $level + 1];
            push @temp_changes, $change_right;
        }while(@next &amp;&amp; !$graph-&gt;has_vertex($member));
        @next = @temp_next;
        @changes = @temp_changes; 
        redo if !$graph-&gt;has_vertex($member);
    }
    return $graph;
}

sub curious_fraction_tree{
    my($member) = @_;
    my $graph = initialize($member);
    my($parent) = $graph-&gt;predecessors($member);
    my($grandparent) = $graph-&gt;predecessors($parent);
    return ($parent, $grandparent);
}

MAIN:{
    my($member, $parent, $grandparent);
    $member = "3/5";
    ($parent, $grandparent) = curious_fraction_tree($member);
    print "member = '$member'\n";
    print "parent = '$parent' and grandparent = '$grandparent'\n";
    print "\n";
    $member = "4/3";
    ($parent, $grandparent) = curious_fraction_tree($member);
    print "member = '$member'\n";
    print "parent = '$parent' and grandparent = '$grandparent'\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
member = '3/5'
parent = '3/2' and grandparent = '1/2'

member = '4/3'
parent = '1/3' and grandparent = '1/2'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My thought process on this problem started somewhat backwards. After reading the problem
statement I thought of the Graph module and remembered that it defines a function
&lt;code&gt;predecessors()&lt;/code&gt; which would be very useful for this. After convincing myself to 
&lt;code&gt;use Graph;&lt;/code&gt; I then probably spent the majority of the time for this just getting my 
head around how to define new vertices at each level of the tree. Like all trees there is
some recursiveness to the structure, but an iterative implementation still looks clean as
well.&lt;/p&gt;

&lt;p&gt;Once the graph is constructed the solution as required comes from calling &lt;code&gt;predecessors()&lt;/code&gt;
to get the parent and grandparent vertices.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-146/"&gt;Challenge 146&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/prime-number-algorithms"&gt;Sieve of Atkin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/"&gt;Prime Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Graph"&gt;Graph&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc146</id>
    <published>2022-01-09T17:32:00-05:00</published>
    <updated>2022-01-09T17:32:00-05:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
