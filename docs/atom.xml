<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-01-21T16:49:22Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>My Favorite Warnings: qw</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-qw.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10644</id>
    <published>2022-01-21T07:05:03Z</published>
    <updated>2022-01-21T07:06:13Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>When I first came to Perl I thought the <code>qw{}</code> construction was pretty neat. Give it a bunch of white-space-delimited text and it gives you back a list separated on the blanks. So</p>

<pre>
say for qw{ Fee fie foe fum! };
</pre>

<p>prints <code>'Fee'</code>, <code>'fie'</code>, <code>'foe'</code>, and <code>'fum!'</code>, each on its own line. But if you add punctuation, and warnings are enabled,</p>

<pre>
say for qw{ Fee, fie, foe, fum! };
</pre>

<p>gets you <code>'Possible attempt to separate words with commas ...'</code>.</p>

<p><br />
<p>For a while, I was dealing with this using a weird assortment of quoting techniques. But then I discovered how to tell Perl I meant to do that:</p></p>

<pre>
no warnings 'qw';
</pre>

<p>I do not do this by default, simply because it has caught problems when converting lists from more-usual program literals to <code>qr{}</code> form. For similar reasons I try to restrict the size of the scope of the <code>no warnings</code>.</p>

<p>There is another diagnostic in this warnings category: <code>'Possible attempt to put comments in qw() list ...'</code>. As you can imagine, this is triggered by something like</p>

<pre>
say for qw{
    Fee  # First word
    fie  # Second word
    foe  # Third word
    fum! # Fourth word
};
</pre>

<p>which actually prints sixteen lines rather than four.</p>

<p>Previous entries in this series:</p>
<ol>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-a-belated-introduction.html">A Belated Introduction</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-once.html"><code>once</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-redundant-and-missing.html"><code>redundant</code> and <code>missing</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/09/my-favorite-warnings-exiting.html"><code>exiting</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-uninitialized.html"><code>uninitialized</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/10/my-favorite-warnings-redefine-sooner.html"><code>redefine</code></a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings---ex-warnings.html">Ex-Warnings</a></li>
    <li><a href="http://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-deprecated.html"><code>deprecated</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/11/my-favorite-warnings-experimental.html"><code>experimental</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-shadow.html"><code>shadow</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-syntax.html"><code>syntax</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2021/12/my-favorite-warnings-ambiguous.html"><code>ambiguous</code></a></li>
    <li><a href="https://blogs.perl.org/users/tom_wyant/2022/01/my-favorite-warnings-closure.html"><code>closure</code></a></li>
</ol>
]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 147: Truncatable Primes and Pentagon Numbers</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/01/perl-weekly-challenge-147-truncatable-primes-and-pentagon-numbers.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10624</id>
    <published>2022-01-12T04:11:59Z</published>
    <updated>2022-01-21T04:57:33Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 147 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-147/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on January 16, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Truncatable Prime</h2>

<p><em>Write a script to generate first 20 left-truncatable prime numbers in base 10.</em></p>

<blockquote>
  <p><em>In number theory, a left-truncatable prime is a prime number which, in a given base, contains no 0, and if the leading left digit is successively removed, then all resulting numbers are primes.</em></p>
</blockquote>

<p><em>Example:</em></p>

<pre><code>9137 is one such left-truncatable prime since 9137, 137, 37 and 7 are all prime numbers.
</code></pre>

<h3>Truncatable Prime in Raku</h3>

<p>We first build an infinite lazy list (<code>@el-primes</code>) of primes with no 0 digit. For each integer in the list, we then try to truncate the left-most digit and check whether the truncated number is prime, and so one until we get to the last digit. The process stops when  20 such primes have been generated.</p>

<pre><code>my @truncatables;
my $count = 0;
my @el-primes = grep {.is-prime and not /0/}, 2..Inf;
for @el-primes -&gt; $candidate {
    my $length = $candidate.chars;
    my $is-truncatable = True; 
    for 1..$length -&gt; $i {
        my $truncated = substr $candidate, $length - $i;
        $is-truncatable = False, last unless $truncated.is-prime;
    }
    if $is-truncatable {
        push @truncatables, $candidate;
        $count++;
    }
    last if $count &gt;= 20;
}
say @truncatables;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>raku ./truncatable.raku
[2 3 5 7 13 17 23 37 43 47 53 67 73 83 97 113 137 167 173 197]
</code></pre>

<h3>Truncatable Prime in Perl</h3>

<p>This Perl program is based on essentially the same idea as the Raku implementation, except that we build a hash of primes along the way. We need to check primality only when we meet a new number the first time: for the truncated numbers, we simply check their primality by looking up into the hash.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MAX =&gt; 20;

my @primes = (2, 3, 5);
my %primes_h = map {$_ =&gt; 1} @primes;
my @truncatables = @primes;;
my $candidate = $primes[-1];
my $count = scalar @truncatables;;
while ($count &lt; MAX) {
    $candidate += 2;
    my $not_prime = 0;
    next if $candidate =~ /0/;
    my $sq_cand = sqrt $candidate;
    for my $i (@primes) {
        $not_prime = 1, last unless $candidate % $i;
        last if $i &gt; $sq_cand;
    }
    next if $not_prime;
    push @primes, $candidate;
    $primes_h{$candidate} = 1;
    # now check if truncatable prime
    my $length = length $candidate;
    my $is_truncatable = 1; 
    for my $i (1..$length) {
        my $truncated = substr $candidate, $length - $i;
        $is_truncatable = 0, last unless exists $primes_h{$truncated};
    }
    if ($is_truncatable) {
        push @truncatables, $candidate;
        $count++;
    }
}
say "@truncatables";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl  ./truncatable.pl
2 3 5 7 13 17 23 37 43 47 53 67 73 83 97 113 137 167 173 197
</code></pre>

<h3>Truncatable Prime in Ring</h3>

<p>I continue here my exploration of <a href="https://ring-lang.sourceforge.io/">Ring</a>, a quite recent programming language. The program below is a port to Ring of the Perl program above.</p>

<pre><code>max = 20
primes = [2, 3, 5]
primes_h = []
count = len(primes)
for i = 1 to count
    primes_h[string(primes[i])] = i
next
truncatables = primes
candidate = primes[count]
while count &lt; max
    candidate += 2
    not_prime = false
    pos = substr(string(candidate), "0")
    if pos &gt; 0 loop ok
    sq_cand = floor(sqrt(candidate))
    for i in primes
        if candidate % i = 0
            not_prime = true
            exit
        ok
        if i &gt; sq_cand exit ok
    next
    if not_prime loop ok
    add (primes, candidate)
    primes_h[string(candidate)] = 1
    // We've found a prime, now check if truncatable prime
    length = len(string(candidate))
    is_truncatable = true
    for i = 1 to length
        truncated = right(string(candidate), i)
        if isnull(primes_h[truncated])
            is_truncatable = false
            exit
        ok
    next
    if is_truncatable
        add(truncatables, candidate);
        count += 1
    ok

end
for val in truncatables see "" + val + " " next
see " " + nl
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./truncatable.ring
2 3 5 7 13 17 23 37 43 47 53 67 73 83 97 113 137 167 173 197
</code></pre>

<h2>Task 2: Pentagon Numbers</h2>

<p><em>Write a script to find the first pair of Pentagon Numbers whose sum and difference are also a Pentagon Number.</em></p>

<blockquote>
  <p><em>Pentagon numbers can be defined as P(n) = n(3n - 1)/2.</em></p>
</blockquote>

<p><em>Example:</em></p>

<p><em>The first 10 Pentagon Numbers are: 1, 5, 12, 22, 35, 51, 70, 92, 117 and 145.</em></p>

<pre><code>P(4) + P(7) = 22 + 70 = 92 = P(8)
but
P(4) - P(7) = |22 - 70| = 48 is not a Pentagon Number.
</code></pre>

<h3>Pentagon Numbers in Raku</h3>

<p>We&#8217;ve decided to use the built-in <a href="https://docs.raku.org/routine/combinations">combinations</a> method to generate the pairs of pentagon numbers. Note that we cannot use an infinite list of pentagon numbers because the <code>combinations</code> routine cannot operate on an infinite list. So I just tried various increasing values for the <code>$max</code> variable until I obtained a result satisfying the criteria. Note that I use a <code>%penta</code> hash to store the pentagon values, so the verifying whether and sum and the difference values are pentagon number is just a matter of a fast hash lookup.</p>

<pre><code>my $max = 4000;
my @pentanums = map { (3 * $_² - $_)/2 }, 1..$max;
my %penta = map {@pentanums[$_] =&gt; $_+1}, 0..$max-1;
for @pentanums.combinations(2) -&gt; $comb {
    next unless %penta{$comb.sum}:exists;
    next unless %penta{$comb[1]-$comb[0]}:exists;
    say $comb, " = Pentagon numbers N° %penta{$comb[0]} and %penta{$comb[1]}";
    say "Sum is ", $comb.sum, " (Pentagon number ", %penta{$comb.sum}, ")";
    say "Difference is ", $comb[1]-$comb[0], " (Pentagon number ", %penta{$comb[1]-$comb[0]}, ")";
    last;
}
say now - INIT now, " seconds";
</code></pre>

<p>This script displays the following output:</p>

<pre><code>raku ./pentanums.raku
(1560090 7042750) = Pentagon numbers N° 1020 and 2167
Sum is 8602840 (Pentagon number 2395)
Difference is 5482660 (Pentagon number 1912)
101.7166579 seconds
</code></pre>

<p>This program is relatively slow (101 seconds execution time). I found that using two nested loops (as in the Perl program below) rather than the <code>combinations</code> routine make the program at least 20 times faster (only a few seconds). So it seems that the <code>combinations</code> routine is quite slow. This is a bit unfortunate as <code>combinations</code> is really useful and makes the code simpler and cleaner. I still prefer to present this version, but if you need better performance, then use two nested loops as in the Perl implementation below.</p>

<h3>Pentagon Numbers in Perl</h3>

<p>This is essentially the same idea as the Raku program above. However, as mentioned above, we don&#8217;t have <code>combinations</code> routine in Perl, so we use two nested loops to generate all the combinations. The advantage is that this runs much faster.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MAX =&gt; 4000;

my @pentanums = map { $_ * (3 * $_ - 1)/2 } 1..MAX;
my %penta_h = map {$pentanums[$_] =&gt; $_+1 } 0..MAX-1;
# say Dumper \%penta_h;

OUTER: for my $i (0..MAX-1) {
    for my $j ($i+1..MAX-1) {
        my $sum = $pentanums[$i] + $pentanums[$j];
        next unless exists $penta_h{$sum};
        my $diff = $pentanums[$j] - $pentanums[$i];
        next unless exists $penta_h{$diff};
        say "First pair of pentagon numbers is $pentanums[$i] (rank ", $i+1, ") and $pentanums[$j] (rank ", $j+1, ")";
        say "Sum is $sum (rank $penta_h{$sum}) and difference is $diff (rank $penta_h{$diff})";
        last OUTER;
    }
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl  ./pentanums.pl
First pair of pentagon numbers is 1560090 (rank 1020) and 7042750 (rank 2167)
Sum is 8602840 (rank 2395) and difference is 5482660 (rank 1912)

real    0m2,043s
user    0m1,703s
sys     0m0,108s
</code></pre>

<h3>Pentagon Numbers in Ring</h3>

<p>Again a port to Ring of the Perl implementation:</p>

<pre><code>max = 3000
pentanums = []
for i = 1 to max 
    add (pentanums,  i * (3 * i - 1) / 2)
next
// see pentanums + nl
penta_h = []
for i = 1 to max
    penta_h[ string(pentanums[i])] = i
next
for i = 1 to max
    for j = i+1 to max
        diff = pentanums[j] - pentanums[i]
        diff_s = string(diff)
        if isnull(penta_h[diff_s]) loop ok
        sum = pentanums[i] + pentanums[j]
        sum_s = string(sum)
        if isnull(penta_h[sum_s]) loop ok
        see "" + diff + " " + sum + " " + pentanums[i] + " " + pentanums[j] + nl
    next
next
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./pentanums.ring
5482660 8602840 1560090 7042750
</code></pre>

<h3>Pentagon Numbers in Julia</h3>

<pre><code>max = 4000
pentanums = map((x) -&gt; Int(x * (3 * x -1)/2), 1:max)
penta_h = Dict(map((x) -&gt; Int(x * (3 * x -1)/2) =&gt; x, 1:max))
for i in 1:4000-1
    for j in (i + 1):4000-1
        sum = pentanums[i] + pentanums[j]
        if (haskey(penta_h, Int(sum)) == 0)
            continue
        end
        diff = pentanums[i] - pentanums[j]
        # if (haskey(penta_h, Int(diff)) == 0)
        #    continue
        # end
        println(i, " ", j, " ", pentanums[i], " ", pentanums[j], " ", sum)
    end
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia pentanums.jl
Indices 1020 and 2167 ; Pentanums: 1560090 7042750; Sum: 8602840; Diff: 5482660
1020 2167
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 23, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 2</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" type="text/html"/>
    <content type="html">&lt;p&gt;Continuing from the &lt;a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/"&gt;first part&lt;/a&gt;, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. &lt;/p&gt;
&lt;table border&gt;
&lt;tr&gt;
&lt;td&gt;Period&lt;/td&gt;
&lt;td&gt;CPAN releases&lt;/td&gt;
&lt;td&gt;CPAN authors&lt;/td&gt;
&lt;td&gt;Hackage releases&lt;/td&gt;
&lt;td&gt;Hackage authors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jan 2021&lt;/td&gt;
&lt;td&gt;1184&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;574&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Feb 2021&lt;/td&gt;
&lt;td&gt;1016&lt;/td&gt;
&lt;td&gt;223&lt;/td&gt;
&lt;td&gt;737&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mar 2021&lt;/td&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;229&lt;/td&gt;
&lt;td&gt;783&lt;/td&gt;
&lt;td&gt;258&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2021&lt;/td&gt;
&lt;td&gt;979&lt;/td&gt;
&lt;td&gt;230&lt;/td&gt;
&lt;td&gt;540&lt;/td&gt;
&lt;td&gt;193&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jun 2021&lt;/td&gt;
&lt;td&gt;982&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;491&lt;/td&gt;
&lt;td&gt;170&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jul 2021&lt;/td&gt;
&lt;td&gt;951&lt;/td&gt;
&lt;td&gt;187&lt;/td&gt;
&lt;td&gt;562&lt;/td&gt;
&lt;td&gt;195&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt; Draw the conclusion yourself. I end my curiosity here, but might compare again in the future.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Continuing from the first part, I managed to collect data from Jan to Jul 2021 but unfortunately in the middle of August my VM got rebooted and I forgot to re-run the collecting script so these are all the full months 2021 data that I have. Period CPAN releases CPAN authors Hackage releases Hackage authors … <a href="https://perlancar.wordpress.com/2022/01/21/cpan-vs-hackage-releases-part-2/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 2</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1979</id>
    <published>2022-01-21T04:45:23Z</published>
    <updated>2022-01-21T04:45:23Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Rother OSS GmbH / OTOBO unterstützt den Deutschen Perl/Raku-Workshop 12/01/22</title>
    <link rel="alternate" href="http://blogs.perl.org/users/max_maischein/2022/01/rother-oss-gmbh-otobo-unterstutzt-den-deutschen-perlraku-workshop-120122.html"/>
    <id>tag:blogs.perl.org,2022:/users/max_maischein//227.10643</id>
    <published>2022-01-20T20:58:24Z</published>
    <updated>2022-01-20T20:59:50Z</updated>
    <author>
        <name>Max Maischein</name>
        <uri>https://corion.net</uri>
    </author>
    <category term="conferences" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="sponsorgpw2022workshop" label="sponsor gpw2022 workshop" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/max_maischein/">
        <![CDATA[<p>Seit 2011 setzt die <a href="https://otobo.de/rother-oss/">Rother OSS GmbH</a> mit Sitz in Süddeutschland und über das ganze Land verteiltem Team auf die Kombination aus OS-Ticketsystem und Business Services vom Experten. Konkret: Consulting, Entwicklung und Support zu den freien OTRS-Versionen.<br />
</p>]]>
        <![CDATA[<p><br />
Als Reaktion auf deren geänderte Release-Strategie haben wir Anfang 2020 unseren Fork <a href="https://otobo.de/">OTOBO</a> veröffentlicht.</p>

<p>Der ist wieder 100% frei und Open Source, baut auf eine starke Community und kombiniert breite Funktionalität im Standard mit einem modernen Serviceportal.</p>

<p>Wir wachsen und freuen uns über <a href="https://otobo.de/jobs/">Mitstreiter</a> für unser OS-Projekt!</p>]]>
    </content>
</entry>
  <entry>
  <title>Grant Proposal: Optree Optimsiations for Performance Gains</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_optree_optimisation_paul_evans"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/grant_proposal_optree_optimisation_paul_evans</id>
  <published>2022-01-20T19:20:01</published>
  <updated>2022-01-20T19:20:01</updated>
  <summary>
  <![CDATA[
     Synopsis Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates. Project Details Inside a 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Apply some efficiency optimisations to generated optrees in order to gain faster runtime performance. There are three ideas covered by this proposal; any or all of them can be created independently. In each case, it is hard to estimate upfront whether it would actually provide a measurable benefit to programs in practice, so part of the project involves attempting to measure the impact it creates.</p>

<h2>Project Details</h2>

<p>Inside a running <code>perl</code> interpreter, source code is compiled into a more direct representation of its behaviour, called an optree. This is comprised of individual elements called ops. Each is executed in sequence, and performs a small specific part of work involved in executing the program as a whole.</p>

<p>Due to the small nature of the specific ops, there are several optimisations that are performed by the interpreter before it starts executing a program; mostly on a theme of combining the effects of several small ops into fewer, larger ones. This allows them to overall work more efficiently as they can either share intermediate results, or can avoid the various data-passing overheads between them.</p>

<p>This project aims to look at three new ideas on this theme of skipping certain elements of the optree by combining their effects together. A full description of each is given in the appendix section below. Each of the three ideas were first mentioned on the <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/12/msg262094.html">Perl5-Porters mailing list</a>.</p>

<h2>Timeline</h2>

<p>Each of the three optimisations would process through the following stages: </p>

<p><em>*1. Create an "ideal-case" benchmark test *</em></p>

<p>Begin by creating a benchmark containing some simple code that is entirely composed of one particular kind of operation, which is the target of the 
optimisation. Measure this benchmark case in order to obtain a baseline performance measurement.  </p>

<p><em>*2. Implement the optimisation *</em></p>

<p>Apply code to the Perl interpreter by defining new opcode flags, adjusting the peephole optimiser, or whatever other techniques may be required to achieve it. </p>

<p>Take a second measurement of performance with the optimisation applied. This should give an indication of the maximal possible gain that could be achieved.</p>

<p><strong>3. Analyse large programs to estimate extent of application</strong></p>

<p>While the figure gained in the above step gives a best-case value, it is unlikely that real-world programs would be able to gain as much benefit. It would be useful to analyse the generated optree of real-world programs to get an estimate of how likely these optimisations are to be hit, and a guess at what proportion of the potential benefit could actually be achieve in a real case.</p>

<p>Actually this step could be performed first, for each of the three optimisations, to get a suggestion on which of them are likely to be the most useful, and thus how to assign the remaining project time to each of them.</p>

<h2>Author Information</h2>

<p>I am Paul Evans, PEVANS on <a href="https://metacpan.org/author/PEVANS">CPAN</a> and current member of the Perl Steering Committee.</p>

<p>I have been a CPAN maintainer for over 12 years, and currently have over 200 distributions under my name. Recently I have been working on a variety of perl core features; adding the <code>isa</code> operator to Perl 5.32, <code>try/catch</code> syntax to 5.34, and the <code>builtin::</code> namespace of additional core functions expected to be part of the upcoming 5.36 release.</p>

<p>I have successfully completed two TPF projects before, to improve the implementation of the <code>Future::AsyncAwait</code> module; and to create bindings for the <code>libuv</code> event system. </p>

<h2>Amount Requested</h2>

<p>$3,980 USD</p>

<h2>Appendix</h2>

<p>The three optimisations described in more detail:</p>

<h3><code>OA_TARGLEX</code> on <code>OP_CONST</code></h3>

<p>Give the <code>OP_CONST</code> opcode the <code>OA_TARGLE</code> flag, meaning that code such as
<code>
    $var = 123;
</code>
gains a performance optimisation, discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> which is normally used to implement scalar lexical variable assignment from a constant, leaving just a single <code>OP_CONST</code> in its place.</p>

<h3><code>OA_TARGLEX</code> with <code>OPpLVAL_INTRO</code></h3>

<p>Create a new <code>OA_...</code> constant, or adjust the semantics of the existing <code>OA_TARGLEX</code>, such that it can also apply in <code>OPpLVAL_INTRO</code> situations. This would allow the (currently fairly-rare) <code>OA_TARGLEX</code> optimisation to
also apply on variables introduced in <code>my</code> expressions, such as
<code>
    my $zero = 0;
</code>
by once again discarding the <code>OP_PADSV</code> and <code>OP_SASSIGN</code> ops.</p>

<h3>Fold away <code>OP_PADSV</code> arguments to <code>UNOP</code>s</h3>

<p>Create a similar optimisation to the <code>-&amp;gt;targ</code> opcode field, applicable to <code>UNOP</code>s to contain the pad offset of a lexical variable argument for arguments being passed into <code>UNOP</code>s. Thus for example a statement like
<code>
    sleep $time;
</code>
could discard the <code>OP_PADSV</code> of its incoming argument, and similarly avoid using the stack for the lexical variable.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Call for Grants: January 2022 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_jan_2022"/>
  <id>tag:news.perlfoundation.org,2022-01-20:/post/call_for_grants_jan_2022</id>
  <published>2022-01-20T19:14:01</published>
  <updated>2022-01-20T19:14:01</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 Jan 31, 2022, UTC. We will publish the received applications, get community feedback through February 7th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 Jan 31, 2022, UTC. We will publish the received applications, get community feedback through February 7th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than February 1st.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Get out early with Perl statement modifiers</title>
    <link rel="alternate" href="https://dev.to/mjgardner/get-out-early-with-perl-statement-modifiers-db1" type="text/html"/>
    <content type="html">&lt;p&gt;When I first started writing Perl in my early 20’s, I tended to follow a lot of the &lt;a href="https://en.wikipedia.org/wiki/Structured_programming"&gt;structured programming&lt;/a&gt; conventions I had learned in school through &lt;a href="https://en.wikipedia.org/wiki/Pascal_(programming_language)"&gt;Pascal&lt;/a&gt;, especially the notion that every function has a &lt;a href="https://wiki.c2.com/?SingleFunctionExitPoint"&gt;single point of exit&lt;/a&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;double_even_number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# not using signatures, this is mid-1990's code&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could get pretty convoluted, especially if I was doing something like validating multiple arguments. And at the time I didn’t yet grok how to handle &lt;a href="https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/"&gt;exceptions&lt;/a&gt; with &lt;a href="https://perldoc.perl.org/functions/eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;die&lt;/code&gt;, so I’d end up with code like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;print_postal_address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# too many arguments, I know&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$street1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$street2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# also this notion of addresses is naive and US-centric&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no name&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$name&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$street1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no street&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$street1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$street2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$street2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no city&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$city&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no state&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$state&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no ZIP code&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$zip&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What a mess. Want to count all those braces to make sure they’re balanced? This is sometimes called the &lt;a href="https://wiki.c2.com/?ArrowAntiPattern"&gt;arrow anti-pattern&lt;/a&gt;, with the arrowhead(s) being the most nested statement. The default &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitDeepNests"&gt;ProhibitDeepNests &lt;code&gt;perlcritic&lt;/code&gt; policy&lt;/a&gt; is meant to keep you from doing that.&lt;/p&gt;

&lt;p&gt;The way out (literally) is &lt;a href="https://wiki.c2.com/?GuardClause"&gt;guard clauses&lt;/a&gt;: checking early if something is valid and bailing out quickly if not. The above example could be written:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;print_postal_address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$street1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$street2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no name&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$street1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no street1&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no city&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no state&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no zip&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
      &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nv"&gt;$street1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nv"&gt;$street2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$street2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$city&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;$state&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$zip&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Perl’s &lt;a href="https://perldoc.perl.org/perlsyn#Statement-Modifiers"&gt;statement modifiers&lt;/a&gt; (sometimes called postfix controls) we can do even better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no street1&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$street1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no city&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$city&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no state&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no zip&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$zip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Why &lt;code&gt;if&lt;/code&gt; instead of &lt;code&gt;unless&lt;/code&gt;? Because the latter &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitUnlessBlocks"&gt;can be confusing with double-negatives&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Guard clauses aren’t limited to the beginnings of functions or even exiting functions entirely. Often you’ll want to skip or even exit early conditions in a loop, like this example that processes files from standard input or the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/^SKIP THIS LINE: /&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;last&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/^END THINGS HERE$/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, if you are validating function arguments, you should consider using actual &lt;a href="https://perldoc.perl.org/perlsub#Signatures"&gt;subroutine signatures&lt;/a&gt; if you have a Perl newer than v5.20 (released in 2014), or one of the &lt;a href="https://phoenixtrap.com/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/"&gt;other type validation solutions&lt;/a&gt; if not. Today I would write that postal function like this, using &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt; for validation and named arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="sx"&gt;qw(say state)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;compile_named&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;print_postal_address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;name&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;street1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;street2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;city&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;state&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;zip&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
      &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;street1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;street2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;street2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{city}, &lt;/span&gt;&lt;span class="si"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{state} &lt;/span&gt;&lt;span class="si"&gt;$arg&lt;/span&gt;&lt;span class="s2"&gt;-&amp;gt;{zip}&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;print_postal_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;name&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;J. Random Hacker&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;street1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123 Any Street&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;city&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Somewhereville&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;state&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TX&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;zip&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that was this part of a larger program, I’d wrap that &lt;code&gt;print_postal_address&lt;/code&gt; call in a &lt;a href="https://perldoc.perl.org/perlsyn#Try-Catch-Exception-Handling"&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; block and &lt;code&gt;catch&lt;/code&gt; exceptions such as those thrown by the code reference &lt;code&gt;$check&lt;/code&gt; generated by &lt;a href="https://metacpan.org/pod/Type::Params#compile_named(@spec)"&gt;&lt;code&gt;compile_named&lt;/code&gt;&lt;/a&gt;. This highlights one concern of guard clauses and other &lt;a href="https://medium.com/swlh/return-early-pattern-3d18a41bba8"&gt;“return early” patterns&lt;/a&gt;: depending on how much has already occurred in your program, you may have to perform some resource cleanup either in a &lt;code&gt;catch&lt;/code&gt; block or something like &lt;a href="https://metacpan.org/pod/Syntax::Keyword::Try#finally"&gt;Syntax::Keyword::Try’s &lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; block if you need to tidy up after both success and failure.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/get-out-early-with-perl-statement-modifiers-db1</id>
    <published>2022-01-19T15:00:00Z</published>
    <updated>2022-01-19T15:00:00Z</updated>
    <category term="perl"/>
    <category term="exceptions"/>
    <category term="patterns"/>
    <category term="antipatterns"/>
  </entry>
  <entry>
    <title>TWC 147: Prime without Left, and Pent without Quad</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2022/01/twc-147-prime-without-left-and-pent-without-quad.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10639</id>
    <published>2022-01-17T03:25:55Z</published>
    <updated>2022-01-17T10:48:31Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <category term="Perl" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="Raku" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="TheWeeklyChallenge" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="perl" label="Perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="Raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="twc" label="TWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>In which we bravely overcome ambiguity, and dodge two approaches in the face of (O³).</p>
]]>
        <![CDATA[<h1><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-147/#TASK1">TWC Task #1, Truncatable Prime</a></h1>

<h2>Observations:</h2>

<p>"Left-truncatable prime" is not fully defined by the task; are leading zeros valid? <br />
e.g. 103 -> 03 -> 3 ; all are prime, but is <code>03</code> considered a "number"?  </p>

<p><strong>UPDATE</strong>: <a href="https://www.meetup.com/San-Francisco-Perl/">SF.pm's Raku Study Group</a> just pointed out that task description <em>does</em> <em>say</em> "contains no 0", so the task <em>was</em> fully defined, and I had no need for the "filter" half of the solutions below. Mea culpa!</p>

<p><a href="http://oeis.org/">OEIS</a> has separate pages for each definition, but both start with: <br />
(2, 3, 5, 7, 13, 17, 23, 37, 43, 47):  </p>

<p><a href="http://oeis.org/A033664">A033664</a> …, 53, 67, 73, 83, 97, 103, 107, 113, … <br />
<a href="http://oeis.org/A024785">A024785</a> …, 53, 67, 73, 83, 97,           113, …  </p>

<p>Since one definition is more easily written as a filter, and the other definition is best written as a generator, I wrote both.</p>

<h2>Raku</h2>

<p>My <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-147/bruce-gray/raku/ch-1.raku">Raku program</a> starts with the "filter" approach:</p>

<pre><code>sub is-left-truncatable-prime ( UInt \N --&gt; Bool ) {
    return (0 ..^ N.chars)          # Start of each substring
        .map(  { N.substr($_) })    # All left-truncated substrings
        .first({ .is-prime.not })   # Find the first non-prime
        .defined.not;               # If no non-primes, then True
}
constant @LTP_A033664 = grep &amp;is-left-truncatable-prime, ^Inf;
</code></pre>

<p>The <code>.first</code> method, combined with the laziness of the <code>.map</code> method, allows an early <code>return</code> without <code>.substr</code> having to generate every single substring.
Rephrasing to use <code>.all</code> is only <em>slightly</em> clearer, so I used <code>.first</code>.</p>

<p>The "generator" approach starts with the single digit primes as the first "generation", and pre-pends 1..9 to each element of gen#1 (and filters out non-primes) to create all-double-digit gen#2. Gen#3 will all be triple-digits, and so on.</p>

<pre><code>my @LTP_A024785 = lazy gather loop {
    state @current_gen = grep &amp;is-prime, ^10;
    .take for @current_gen;
    @current_gen = grep &amp;is-prime, ((1..9) X~ @current_gen);
}
</code></pre>

<p>Since each number in a generation has the same number digits, and the first generation is in numeric order, each subsequent <code>(1..9) X~ @current_gen</code> generation will also be in order.</p>

<p>Both arrays are lazy, so they get their elements populated on demand. Final output is just:</p>

<pre><code>put @LTP_A033664.head(20);
put @LTP_A024785.head(20);

2 3 5 7 13 17 23 37 43 47 53 67 73 83 97 103 107 113 137 167
2 3 5 7 13 17 23 37 43 47 53 67 73 83 97 113 137 167 173 197
</code></pre>

<h2>Perl</h2>

<p>My <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-147/bruce-gray/perl/ch-1.pl">Perl program</a> is just a conversion of the Raku, with adaptations to loosely replace the laziness that Perl lacks.</p>

<p>The <a href="https://metacpan.org/pod/ntheory">ntheory</a> (Number Theory) module has <code>is_prime</code>, which saves me much code.</p>

<h1><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-147/#TASK2">TWC Task #2, Pentagon Numbers</a></h1>

<h2>Observations:</h2>

<p>Some obvious problems:</p>

<ul>
<li>Not only do we need to scan all 2-combinations (O²) of a list, we also have to scan the list of pents to find the difference and the sum (O³ and bigger, unless we binary search and/or hash).</li>
<li>Unless we pre-build the list to a pre-known limit (which we could only do if we already knew the answer), then at the time that we want to check <code>A+B</code> for presence in the list of pents, the value will not <em>exist</em> in the list yet.</li>
<li>We need all 2-combinations, and Raku has a <code>.combinations</code> method that we can invoke with <code>(2)</code>, but it will not work with the lazy infinite list that idiomatic for <code>@pents</code>.</li>
</ul>

<p>If we <em>did</em> already know how big to pre-build the pents, then the solution would be simple:</p>

<pre><code>constant @pents = map { $_ * (3 * $_  -  1) div 2 }, 1..*;
my %p = @pents.head(2400).Set;
say @pents.head(2400).combinations(2).first: {
    %p{  [+] .list } and
    %p{ [R-] .list }
};
</code></pre>

<p>I don't want to do that.</p>

<p>If we "solve" the pent equation of <code>n(3n-1)/2 = P</code> via quadratic formula (a=3,b=-1,c=-2P), we can write a <code>is_pentagon_number</code> sub, which would solve the first two problems!</p>

<pre><code>sub is-pentagon-number ( \p ) {
    my \inner = 24 * p + 1;
    my \near_root = inner.sqrt.round;

    return near_root ** 2 == inner
        &amp;&amp; near_root %  6 == 5
}
</code></pre>

<p>This would work perfectly. <br />
I chose not to do that, either.</p>

<p>Instead, let's call the sum of the two pents "A", and the difference "D". Then re-arrange like so:</p>

<pre><code># Where A,B,C,D are all pentagonal numbers:
# B + C == A      ,  B - C == D     Original problem statement
#     C == A - B  ,  B - C == D     Rearranged as two differences
#     C == A - B  ,  B-(A-B)==D     (C,D), expressed only in A and B
</code></pre>

<p>So, if we find any two pentagonal numbers A,B where A-B is pentagonal and B-(A-B) is pentagonal, then we have a solution. The desired numbers will be the inner two: (B,C).</p>

<p>With this reorganization, we will always be "looking backwards" into parts of <code>@pent</code> that have already been generated. The cost will be in generating all the way to A; a solution using <code>is-pentagon-number</code> would only need to generate to B.</p>

<h2>Raku</h2>

<p>My <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-147/bruce-gray/raku/ch-2.raku">Raku program</a> uses <code>for @pents.kv</code> as a outer loop, and <code>for @pents.head(i)</code> as the inner loop, to replicate the disallowed <code>.combinations(2)</code>.</p>

<pre><code>sub find-first-plus-and-minus-pentagon_numbers ( ) {
    constant @pents = map -&gt;\n { n *(3*n - 1) div 2 }, 1..*;

    my %p;
    for @pents.kv -&gt; \i, \A {
        %p{A} = 1;

        for @pents.head(i) -&gt; \B {
            my \D = A - B;
            my \C = B - D;
            return B, C if %p{C} and %p{D};
        }
    }
}
put find-first-plus-and-minus-pentagon_numbers();
</code></pre>

<p>The three body lines of the inner loop could be replace with one line (<code>return B, C if %p{A - B} and %p{B - (A - B)}</code>), and then the whole inner loop could become a <code>return … with first {…}</code> statement, but then I suspect it would "spark joy" in no one.</p>

<p>Aside: <a href="https://www.meetup.com/San-Francisco-Perl/">SF.pm's Raku Study Group</a> just pointed out that the <code>constant</code> line uses a sigil-less <code>n</code>, which means it gets defined as <code>-&gt; \n</code>, which confusingly looks like a <em>newline</em> character. Good point!</p>

<h2>Perl</h2>

<p>My <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-147/bruce-gray/perl/ch-2.pl">Perl solution</a> needed almost no structural changes from the Raku, because the lazy generation of the pents can just be appended at the same pace as the outer loop.</p>

<pre><code>sub find_first_plus_and_minus_pentagon_numbers ( ) {
    my @pents;
    my %p;
    for ( my $i = 1 ; ; $i++ ) {
        my $A = $i * (3*$i - 1) / 2; # Pentagon number

        for my $B (@pents) {
            my $D = $A - $B;
            my $C = $B - $D;
            return $B, $C if $p{$C} and $p{$D};
        }

        $p{$A} = 1; 
        push @pents, $A;
    }
}
say join ' ', find_first_plus_and_minus_pentagon_numbers();
</code></pre>

<p><em>Five is right out.</em> -- Monty Python and the Holy Grail</p>
]]>
    </content>
</entry>
  <entry>
    <title>#547 - Learning a human language vs. a programming language</title>
    <link rel="alternate" href="https://perlweekly.com/archive/547.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi,</p>
<p>Learning a programming language is not easy, but have you tried learning a human language? You don't have a compiler to tell you when you make a syntax error. You have a lot more words and rules and a lot more exceptions than in a programming language. Mostly however, the lack of quick feedback is what makes it hard. However, after a few months work you start to be able to speak to people in their native language.</p>
<p>As you might have read I've started to learn Ladino - the language spoken by the Jews who were expelled from the Iberian peninsula more than 500 years ago. It is a mix of medieval Spanish, Portuguese, Italian, French, Turkish, Serb, Arabic, and Hebrew. It is a fantastic exercise and it involves programming as well. Join me!</p>
<p>Something else: In Israel every Saturday evening, once the Shabbat ends, and throughout Sunday people say 'have a good week'. Referring to the week that starts on Sunday, the first day of our work-week. I don't recall ever hearing that or anything similar in Hungary. Not even on Sunday or Monday. I wonder, do you use any similar expression in whatever country and language environment you live in? Let me know and...</p>
<p>Have a good week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/547.html</id>
    <published>2022-01-17T10:00:00Z</published>
    <updated>2022-01-17T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>TWC 146: 10K Prime and CW Trees (redirect)</title>
    <link rel="alternate" href="http://blogs.perl.org/users/bruce_gray/2022/01/twc-146-10k-prime-and-cw-trees-redirect.html"/>
    <id>tag:blogs.perl.org,2022:/users/bruce_gray//532.10629</id>
    <published>2022-01-17T03:14:37Z</published>
    <updated>2022-01-17T03:18:18Z</updated>
    <author>
        <name>Bruce Gray</name>
        <uri>https://github.com/Util/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bruce_gray/">
        <![CDATA[<p>Please go <a href="http://blogs.perl.org/users/bruce_gray/2022/01/twc-146-10k-prime-and-cw-trees.html">here</a> instead.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Primes and Pentagonals</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/16#pwc147" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 left-truncatable prime numbers in base 10.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;
use constant N =&gt; 10_000; 

sub sieve_atkin{
    my($n) = @_;
    my @primes = (2, 3, 5);
    my $upper_bound = int($n * log($n) + $n * log(log($n)));
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound;
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub truncatable{
    my($prime, $primes) = @_;
    return false if $prime =~ m/0/;
    my @truncatable = map { my $p = substr($prime, -1 * $_, $_); grep {$p == $_} @{$primes}} 1 .. length($prime);
    return @truncatable == length($prime);
}

sub first_n_truncatable_primes{
    my($n) = @_;
    my @primes = sieve_atkin(N);
    my @truncatable;
    for my $prime (@primes){
        push @truncatable, $prime if truncatable($prime, \@primes);
        last if @truncatable == $n;
    }
    return @truncatable;
}

MAIN:{
    print join(", ", first_n_truncatable_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2, 3, 5, 7, 13, 17, 23, 37, 43, 47, 53, 67, 73, 83, 97, 113, 137, 167, 173, 197
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;First off, I am re-using the Sieve of Atkin code I wrote for a previous challenge. These
challenges somewhat frequently have a prime number component so, if I get a chance, I'll
compose that code into it's own module. If it weren't for the copy/paste of the Sieve of 
Atkin code then this solution would be very short! This sort of string manipulation is 
where Perl excels and the determination of whether a number is left truncatable takes
only a few lines.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find the first pair of Pentagon Numbers whose sum and difference are 
also a Pentagon Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use constant N =&gt; 10_000;

sub n_pentagon_numbers{
    my($n) = @_;
    my @pentagon_numbers;
    my $x = 1;
    my %h;
    do{
        my $pentagon = $x * (3 * $x - 1) / 2;
        push @pentagon_numbers, $pentagon;
        $h{"$pentagon"} = $x;
        $x++;
    }while(@pentagon_numbers &lt; $n);
    return (\@pentagon_numbers, \%h);
}

sub pairs_pentagon{
    my($n) = @_;
    my($pentagons, $lookup) = n_pentagon_numbers(N);
    my @pairs;
    for my $x (0 .. @{$pentagons} - 1){
        for my $y (0 .. @{$pentagons} - 1){
            unless($x == $y){
                my($sum, $difference) = ($pentagons-&gt;[$x] + $pentagons-&gt;[$y], abs($pentagons-&gt;[$x] - $pentagons-&gt;[$y]));
                 if($lookup-&gt;{$sum} &amp;&amp; $lookup-&gt;{$difference}){
                     my($s, $t) = ($x + 1, $y + 1);
                     push @pairs, ["P($s)", "P($t)"]
                 }
            }
            last if @pairs == $n;
        }
        last if @pairs == $n;
    }
    return @pairs;
}

sub first_pair_pentagon{
    return [pairs_pentagon(1)];
}

MAIN:{
    print join(", ", @{first_pair_pentagon()-&gt;[0]}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
P(1020), P(2167)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This second part of the challenge proceeds in mostly the same way as the first. We 
generate a large list of candidates and then search for those exhibiting the property in 
question. It is somewhat unexpected that the first pair of Pentagonal Numbers that have 
this property are so deeply located. Many times in these challenges the solution is 
emitted without quite as much searching! &lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-147/"&gt;Challenge 147&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/glossary/page.php?sort=LeftTruncatablePrime"&gt;Left Truncatable Primes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PentagonalNumber.html"&gt;Pentagonal Numbers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc147</id>
    <published>2022-01-16T13:29:00-05:00</published>
    <updated>2022-01-16T13:29:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6360004389402147567</id>
    <published>2022-01-15T21:48:00.000+01:00</published>
    <updated>2022-01-15T21:48:51.235+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxv) 9 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.53' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.53&lt;/strong&gt; on 2022-01-15&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.52 was 4 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.05' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.05&lt;/strong&gt; on 2022-01-14&lt;/li&gt;  &lt;li&gt;Votes: 96&lt;/li&gt;  &lt;li&gt;Previous version: 4.04 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CHRISN/Net-SSLeay-1.92' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::SSLeay&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl bindings for OpenSSL and LibreSSL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.92&lt;/strong&gt; on 2022-01-12&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.90 was 11 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.068' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.068&lt;/strong&gt; on 2022-01-14&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 2.019 was 3 years, 8 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-Stats-0.81' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL::Stats&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a collection of statistics modules in Perl Data Language, with a quick-start guide for non-PDL people. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.81&lt;/strong&gt; on 2022-01-11&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.80 was 3 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMS/Redis-1.999' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Redis&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl binding for Redis database &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.999&lt;/strong&gt; on 2022-01-14&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 1.998 was 1 year, 4 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9120' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9120&lt;/strong&gt; on 2022-01-14&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9112 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v8.0.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v8.0.0&lt;/strong&gt; on 2022-01-14&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.10.0 was 1 month, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETHER/Test-LWP-UserAgent-0.035' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::LWP::UserAgent&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A LWP::UserAgent suitable for simulating and testing network calls &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.035&lt;/strong&gt; on 2022-01-15&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.034 was 1 year, 10 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6360004389402147567/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxv-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6360004389402147567"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6360004389402147567"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxv-9-great-cpan-modules-released.html" title="(ccclxxv) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2055401822345466427</id>
    <published>2022-01-15T21:44:00.006+01:00</published>
    <updated>2022-01-15T21:44:57.765+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxcv) metacpan weekly report - Crypt::Passphrase</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 56&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Crypt::Passphrase"&gt;Crypt::Passphrase&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/01/15 20:43:56 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Bcrypt" target="_blank"&gt;Crypt::Bcrypt&lt;/a&gt; - A modern bcrypt implementation&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::Verify" target="_blank"&gt;Crypt::OpenSSL::Verify&lt;/a&gt; - OpenSSL Verify certificate verification in XS.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::CompactReadonly" target="_blank"&gt;Data::CompactReadonly&lt;/a&gt; - a description of CompactReadonly data format, version 0.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Defer" target="_blank"&gt;Feature::Compat::Defer&lt;/a&gt; - make defer syntax available&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::Log::Dispatch::Simple" target="_blank"&gt;MojoX::Log::Dispatch::Simple&lt;/a&gt; - Simple Log::Dispatch replacement of Mojo::Log&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ReturnValue" target="_blank"&gt;ReturnValue&lt;/a&gt; - A structured return value for failure or success&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/String::Interpolate::Named" target="_blank"&gt;String::Interpolate::Named&lt;/a&gt; - Interpolated named arguments in string&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tree::RB::XS" target="_blank"&gt;Tree::RB::XS&lt;/a&gt; - Red/Black Tree container with similar API to Tree::RB&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::H2O" target="_blank"&gt;Util::H2O&lt;/a&gt; - Hash to Object: turns hashrefs into objects with accessors for keys&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::Parser" target="_blank"&gt;YAML::Parser&lt;/a&gt; - Generated Reference Parser for YAML 1.2&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::Build" target="_blank"&gt;Alien::Build&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Promises" target="_blank"&gt;AnyEvent::Promises&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=56)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/autocroak" target="_blank"&gt;autocroak&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Autoload::AUTOCAN" target="_blank"&gt;Autoload::AUTOCAN&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart::Clicker" target="_blank"&gt;Chart::Clicker&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Code::TidyAll" target="_blank"&gt;Code::TidyAll&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::Passphrase" target="_blank"&gt;Crypt::Passphrase&lt;/a&gt; (+3=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::PathSimple" target="_blank"&gt;Data::PathSimple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::IPerl" target="_blank"&gt;Devel::IPerl&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Fetch" target="_blank"&gt;File::Fetch&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurper" target="_blank"&gt;File::Slurper&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::XDG" target="_blank"&gt;File::XDG&lt;/a&gt; (+2=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gazelle" target="_blank"&gt;Gazelle&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GD" target="_blank"&gt;GD&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::HTML5::Parser" target="_blank"&gt;HTML::HTML5::Parser&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Path" target="_blank"&gt;JSON::Path&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::MoreUtils" target="_blank"&gt;List::MoreUtils&lt;/a&gt; (+1=110)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Dispatch" target="_blank"&gt;Log::Dispatch&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::BigInt" target="_blank"&gt;Math::BigInt&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=54)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=466)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=320)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Open::This" target="_blank"&gt;Open::This&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parse::nm" target="_blank"&gt;Parse::nm&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=167)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=388)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=123)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Markdown" target="_blank"&gt;Pod::Markdown&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Markdown::Github" target="_blank"&gt;Pod::Markdown::Github&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sentry::SDK" target="_blank"&gt;Sentry::SDK&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Construct" target="_blank"&gt;Syntax::Construct&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Amuse" target="_blank"&gt;Text::Amuse&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=94)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=128)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::LineBreak" target="_blank"&gt;Unicode::LineBreak&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Normalize" target="_blank"&gt;Unicode::Normalize&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::PP" target="_blank"&gt;YAML::PP&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2055401822345466427/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/cdxcv-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2055401822345466427"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2055401822345466427"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/cdxcv-metacpan-weekly-report.html" title="(cdxcv) metacpan weekly report - Crypt::Passphrase"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8729437789268626905</id>
    <published>2022-01-15T21:43:00.000+01:00</published>
    <updated>2022-01-15T21:43:10.811+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxvii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-01-15 20:42:04 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70702953" target="_blank"&gt;Using Perl look-ahead assertion to find individual list&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70659708" target="_blank"&gt;Perl - Correcting char encoding on command line input&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70676350" target="_blank"&gt;Using foreach instead of map and grep in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70688097" target="_blank"&gt;How to interrupt a read of a lexical filehandle in Perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70700055" target="_blank"&gt;Appropriate way to return an arrayref from a sub with optional sorting in Perl version 5.20&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8729437789268626905/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxvii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8729437789268626905"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8729437789268626905"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxvii-stackoverflow-perl-report.html" title="(dxvii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>New year, new impetus for Perl Foundation Marketing Committee</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/marketing-support-2022"/>
  <id>tag:news.perlfoundation.org,2022-01-15:/post/marketing-support-2022</id>
  <published>2022-01-15T04:03:19</published>
  <updated>2022-01-15T04:03:19</updated>
  <summary>
  <![CDATA[
     The TPF Marketing Committee wants to raise USD$100,000 to fund Perl and Raku development and make 2022 the year of Perl and Raku. But we can only do this with community support. In 2022 the Perl Foundation Marketing Committee aims to: Achieve a fundraising target of $100,000 through improved fundraising efforts Improve and sustain the perception of Perl Address feature gaps from community feedback Demonstrate why people should use Perl 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The TPF Marketing Committee wants to raise USD$100,000 to fund Perl and Raku development and make 2022 the year of Perl and Raku. But we can only do this with community support.</p>

<p>In 2022 the Perl Foundation Marketing Committee aims to:
* Achieve a fundraising target of $100,000 through improved fundraising efforts
* Improve and sustain the perception of Perl
* Address feature gaps from community feedback
* Demonstrate why people should use Perl
* Increase adoption of the language</p>

<p>These goals are just words without your help.</p>

<p>We need everyone in the community to share our news and updates via your social media and other channels.</p>

<p>We ask you to use <a href="https://smile.amazon.com/gp/chpf/homepage/ref=smi_chpf_redirect/138-2474394-5588856?ie=UTF8&amp;ein=38-3536536&amp;ref_=smi_ext_ch_38-3536536_cl">Amazon Smile</a> when purchasing from Amazon, providing a percentage donation at no extra cost.</p>

<p>Can you ask your employer to make a donation, or maybe you could make a personal donation to <a href="https://www.perlfoundation.org/donate.html">The Perl Foundation</a>?</p>

<p>Please get involved and coordinate activities at the monthly committee meetings. Come along with your ideas and willing hands so we can take action together.</p>

<p>The meeting dates for 2022 are listed below - all at 1730UTC via Zoom - join <a href="https://join.slack.com/share/enQtMjk0NzkzNjM4NzI5OS05MmE5OGRjNmEzYTNhZmUwMzllNmE2ZDMwMDk1YWMwMzI0NWNmMGM2NWRlM2Q5MzJkMmY4NmEwOTVhNzU2ZTFk">the Marketing Slack channel</a> to keep up to date.</p>

<ul>
<li>10 February</li>
<li>10 March</li>
<li>7 April</li>
<li>12 May</li>
<li>9 June</li>
<li>7 July</li>
<li>11 August</li>
<li>8 September</li>
<li>13 October</li>
<li>10 November</li>
<li>8 December</li>
</ul>

<p>Thank you for your help and we look forward to seeing you!</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Roles</title>
    <link rel="alternate" href="https://dev.to/dragostrif/perl-roles-54ff" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;1. Roles Definition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A role is a set of methods that provide extra behavior to a class. Roles can't be used independently they need a class to consume them. Roles are a good alternative to inheritance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. A sample role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A role is declared in a  *.pm file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="sx"&gt;qw( data )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Consuming a role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous example the Role::JSON &lt;em&gt;requires&lt;/em&gt;&lt;br&gt;
 the consuming class to have a method named &lt;em&gt;data&lt;/em&gt;().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;make_immutable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you could just call the method defined in the role in your program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# And that prints the following JSON&lt;/span&gt;
&lt;span class="c1"&gt;# { foo : 'bar' }&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Checking if class consumes a role&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because roles are not inherited you cannot use isa() to check if a class consumes a role instead you should use does():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;does&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Roles without Moose/Moo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cpan module Role::Tiny allows you to use roles with vanilla OOP not just with Moose or Moo. Like Moose or Moo, Role::Tiny  applies strict and warnings to the caller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::Foo&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Role::Tiny makes available to your role the following method modifiers: &lt;em&gt;before&lt;/em&gt;, &lt;em&gt;around&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt;.&lt;br&gt;
In this example when $self-&amp;gt;data is called the around block executes and you get JSON returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;requires&lt;/span&gt; &lt;span class="sx"&gt;qw( data )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="s"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;encode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$orig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Compositional safety&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Roles attempt to guarantee compositional safety. So, if two roles have the same method defined and you try to consume them in the same class, you will get an error message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt; &lt;span class="nv"&gt;Due&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;conflicts&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;roles&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just remember that in order to trigger the error message you need to consume all the roles at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;# good&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::XML&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="c1"&gt;# bad second method is ignored&lt;/span&gt;
&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::Tiny::&lt;/span&gt;&lt;span class="nv"&gt;With&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::XML&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt; 
&lt;span class="nv"&gt;with&lt;/span&gt;  &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role::JSON&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. How to fix method collision&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;implement the methods yourself in your class, thus causing the corresponding role methods to be ignored&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For Moose use the &lt;em&gt;excludes&lt;/em&gt; key word&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Moose::&lt;/span&gt;&lt;span class="nv"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Role::Serializable::&lt;/span&gt;&lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nn"&gt;Role::Serializable::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;excludes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For Role::Tiny use  namespace::clean
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Role::&lt;/span&gt;&lt;span class="nv"&gt;Tiny&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;serialize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;# serialize() will not be imported in the consuming class&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;namespace::&lt;/span&gt;&lt;span class="nv"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;8. Bibliography&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Beginning-Perl-Curtis-Poe-ebook-dp-B009K92D9I/dp/B009K92D9I/ref=mt_other?_encoding=UTF8&amp;amp;me=&amp;amp;qid="&gt;Beginning Perl by Curtis 'Ovid' Poe &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://modernperlbooks.com/"&gt;Modern Perl by Chromatic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.perl.com/article/47/2013/11/11/Use-roles-in-object-oriented-Perl-with-Role-Tiny/"&gt;Use roles in object oriented Perl with Role::Tiny by David Farrell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>DragosTrif</name>
    </author>
    <id>https://dev.to/dragostrif/perl-roles-54ff</id>
    <published>2022-01-14T15:34:14Z</published>
    <updated>2022-01-14T15:34:14Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="oop"/>
    <category term="role"/>
  </entry>
  <entry>
    <title>Look mum, no inputs 😛</title>
    <link rel="alternate" href="https://dev.to/simongreennet/look-mum-no-inputs-3lon" type="text/html"/>
    <content type="html">&lt;h2&gt;
  &lt;a href="#weekly-challenge-147"&gt;
  &lt;/a&gt;
  Weekly Challenge 147
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-147/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-147/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unless I'm mistaken, this is the first week where both challenges have had no inputs. It is always tempted to use a single print statement, but that defeats the purpose of why we do them, isn't it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-1-truncatable-prime"&gt;
  &lt;/a&gt;
  TASK #1 › Truncatable Prime
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Write a script to generate first 20 left-truncatable prime numbers in base 10.&lt;/p&gt;

&lt;p&gt;In number theory, a left-truncatable prime is a prime number which, in a given base, contains no 0, and if the leading left digit is successively removed, then all resulting numbers are primes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;

&lt;p&gt;Let's start off with the straight forward task. I use the is_prime method that I've used in previous tasks, slightly tweaked because zero is not a prime.&lt;/p&gt;

&lt;p&gt;I then have a is_trunc_prime method that works out if every left truncated number of the number supplied is a prime, and it contains no zeros. To make things as quick as possible, I start with the most truncated number first. As Python treats integers and strings differently, I turn the input into a string to perform the truncation.&lt;/p&gt;

&lt;p&gt;The main method then has a loop that exits when the &lt;code&gt;solutions&lt;/code&gt; list when there are 20 items. Each iteration of the loop increments the number we check by one.&lt;/p&gt;

&lt;p&gt;The Perl code is a transliteration of the Python code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./ch-1.py
2, 3, 5, 7, 13, 17, 23, 37, 43, 47, 53, 67, 73, 83, 97, 113, 137, 167, 173, 197

$ ./ch-1.pl 
2, 3, 5, 7, 13, 17, 23, 37, 43, 47, 53, 67, 73, 83, 97, 113, 137, 167, 173, 197
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#task-2-pentagon-numbers"&gt;
  &lt;/a&gt;
  TASK #2 › Pentagon Numbers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Write a sript[sic] to find the first pair of Pentagon Numbers whose sum and difference are also a Pentagon Number.&lt;/p&gt;

&lt;p&gt;Pentagon numbers can be defined as P(n) = n(3n - 1)/2.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h3&gt;

&lt;p&gt;Let's clear one thing up first. The first solution is likely to be P(0) and P(0) as 0 + 0 and 0 - 0 is zero, which is also P(0). However, I don't think that is the solution we are actually looking for. For the same reason, I'm not comparing identical pentagonal numbers in my solution.&lt;/p&gt;

&lt;p&gt;Thanks to Wikipedia's page on &lt;a href="https://en.wikipedia.org/wiki/Pentagonal_number"&gt;Pentagonal Numbers&lt;/a&gt;, we learn out we can use the calculation below to find out if the number is Pentagonal, and what it's index is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pI74FFjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99cz6lcmfsutvgqugv8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pI74FFjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99cz6lcmfsutvgqugv8g.png" alt="Image description" width="157" height="47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I don't even believe how you get the opposite of (3n2 - n) ÷ 2 to be the above, but it does work. I can tell you after I've done my pull request, I'm straight over to Abigail's blog to see the number theory behind this one :-)&lt;/p&gt;

&lt;p&gt;For this task, I have two methods. The first is &lt;code&gt;pentagon_number&lt;/code&gt;. This turns the index into a number, so 4 into 22 for example. The other method is &lt;code&gt;is_pentagon_number&lt;/code&gt; and does the opposite using the calculation mentioned in the Wikipedia page, so 22 into 4 for example.&lt;/p&gt;

&lt;p&gt;It then becomes a task of finding the first pair. For this I have a counter &lt;code&gt;p1&lt;/code&gt; that starts at two. I then have an inner loop &lt;code&gt;p2&lt;/code&gt; that goes from one to p1 - 1. I work out if the sum and subtraction of the two numbers are also pentagonal values, and if so display the results and exit the loops.&lt;/p&gt;

&lt;p&gt;The Perl solution is also a transliteration of the Python one, with one caveat. In Perl &lt;code&gt;x % y&lt;/code&gt; is always in integer even if x isn't. Therefore I needed to add an addition check to make sure x is an integer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ./ch-2.py 
P(2167) + P(1020) = 7042750 + 1560090 = 8602840 = P(2395)
P(2167) - P(1020) = 7042750 - 1560090 = 5482660 = P(1912)

$ ./ch-2.pl 
P(2167) + P(1020) = 7042750 + 1560090 = 8602840  = P(2395)
P(2167) - P(1020) = 7042750 - 1560090 = 5482660  = P(1912)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/look-mum-no-inputs-3lon</id>
    <published>2022-01-14T04:20:02Z</published>
    <updated>2022-01-14T04:20:02Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Highlighting members of the Perl family</title>
    <link rel="alternate" href="https://dev.to/mjgardner/highlighting-members-of-the-perl-family-1kgi" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>This past year of <a href="https://phoenixtrap.com/tag/perl">blogging</a> has introduced me to a wide variety of people in the <a href="https://www.perl.org/community.html">Perl community</a>. Some I’ve admired from afar for years due to their published work, and even more I’ve “met” interacting on social media and other forums. So this will be the first in an occasional series highlighting not just the code, but the people that make up the Perl family.</p>

<h2>
  <a href="#paul-leonerd-evans">
  </a>
  <a href="http://www.leonerd.org.uk/">Paul “LeoNerd” Evans</a>
</h2>

<p>I first came across Paul’s work during his series last year on <a href="https://phoenixtrap.com/2021/02/01/paul-evans-writing-a-core-perl-feature/">writing a core Perl feature</a>; he’s responsible for <a href="https://perldoc.perl.org/perl5320delta#The-isa-Operator">Perl v5.32’s <code>isa</code> operator</a> and <a href="https://perldoc.perl.org/perl5340delta#Experimental-Try/Catch-Syntax">v5.34’s experimental <code>try</code>/<code>catch</code> exception handling syntax</a>. I <a href="https://www.perl.com/article/interview-trying-to-catch-paul-leonerd-evans/">interviewed him about the latter</a> for Perl.com in March 2021. He’s been <a href="https://metacpan.org/author/PEVANS">active on CPAN</a> for so much longer, though, and <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/07/msg260858.html">joined the Perl Steering Council in July</a>. He’s also often a helpful voice on <a href="https://web.libera.chat/#perl">IRC</a>.</p>

<h2>
  <a href="#elliot-holden">
  </a>
  <a href="https://www.urbanguitarlegend.com/">Elliot Holden</a>
</h2>

<p>Renowned author and trainer <a href="http://www.stonehenge.com/merlyn/">Randal L. “merlyn” Schwartz</a> linked over the weekend in a private Facebook group to Elliot’s impassioned <a href="https://youtu.be/FQXjLG0DjPo">YouTube video about his day job as a Perl web application developer</a>. Through his alter ego <a href="https://www.urbanguitarlegend.com/">Urban Guitar Legend</a> Elliot is also a passionate musician; besides gigging and recording he’s been <a href="https://youtube.com/c/Urbanguitarlegend">posting videos for nine years</a>. (I’m a bit envious since I took a break from <a href="https://phoenixtrap.com/music/">music</a> almost twenty years ago and haven’t managed to recapture it.) Elliot seems like the quintessential needs-to-get-shit-done developer, and Perl is perfect for that.</p>

<h2>
  <a href="#g%C3%A1bor-szab%C3%B3">
  </a>
  <a href="https://szabgab.com">Gábor Szabó</a>
</h2>

<p>Gábor is a polyglot (both in human and computer languages) trainer, consultant, and author, writing about programming and devops on his <a href="https://code-maven.com/">Code Maven</a> and <a href="https://perlmaven.com/">Perl Maven</a> websites. He’s also the founder and co-editor of <a href="https://perlweekly.com/">Perl Weekly</a> and recipient of a <a href="https://www.perl.org/advocacy/white_camel/2008.html">Perl White Camel award in 2008</a> thanks to his organizational and support contributions. Last year he <a href="https://perlmaven.com/course-management-app-in-mojolicious">introduced me to the world of live pair programming</a>, working on a web application using the <a href="https://mojolicious.org/">Mojolicious framework</a>.</p>




<p>If you’re on Twitter and looking to connect with other Perl developers, please consider participating in <a href="https://twitter.com/i/communities/1471579416216145924">the Perl community</a> I’ve set up there. <a href="https://help.twitter.com/en/using-twitter/communities">Twitter Communities</a> are topic-specific moderated discussion groups, unlike the freewheeling <a href="https://help.twitter.com/en/using-twitter/how-to-use-hashtags">#hashtags</a> system that can be diluted by spam or topics that share the same name. Unfortunately, they’re still read-only on the <a href="https://play.google.com/store/apps/details?id=com.twitter.android">Twitter Android app</a>, but you can participate fully on <a href="https://apps.apple.com/us/app/twitter/id333903271">iOS/iPadOS</a> and <a href="https://twitter.com">the website</a>.</p>

</div>
    </content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/highlighting-members-of-the-perl-family-1kgi</id>
    <published>2022-01-11T15:00:00Z</published>
    <updated>2022-01-11T15:00:00Z</updated>
    <category term="perl"/>
    <category term="community"/>
    <category term="cpan"/>
    <category term="twitter"/>
  </entry>
  <entry>
    <title>100 Languages Speedrun: Episode 52: Perl</title>
    <link rel="alternate" href="https://dev.to/taw/100-languages-speedrun-episode-52-perl-pn7" type="text/html"/>
    <content type="html">&lt;p&gt;Perl is a highly influential "kitchen sink" language. Languages like that see an idea that might potentially be useful or just cool, and just add it to the language because why not.&lt;/p&gt;

&lt;p&gt;Other languages with similar design philosophy (or one might say lack of design philosophy) are C++ and Scala. And it's not a coincidence &lt;a href="https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted"&gt;that kitchen sink languages place really high on the charts of most hated languages of all times&lt;/a&gt;. They can be quite productive to write code in, but reading someone else's code, not so much.&lt;/p&gt;

&lt;p&gt;I very much support the "kitchen sink" language design, including new ones like Raku. Among all those features there's usually a few gems that earn their place in more mainstream languages. For example Perl spearheaded first class regular expression support, and that's now simply common sense. Or even such simple things like having hashes (or "dictionaries") and hash literal syntax, or string interpolation (somewhat limited in Perl). These features proved themselves and are now everywhere.&lt;/p&gt;

&lt;p&gt;To celebrate Perl's weirdness, this episode will be mainly about the weird parts of Perl, that never got far.&lt;/p&gt;

&lt;p&gt;I won't get too much into the WATs. Perl is the WAT factory like no other, and it gets very well deserved criticism for that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;But first, the FizzBuzz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="c1"&gt;# $\ specifies what gets printed at the end of print automatically&lt;/span&gt;
&lt;span class="vg"&gt;$\&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# If we don't specify any variable, Perl will use topic variable $_&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# print also defaults to printing topic variable&lt;/span&gt;
    &lt;span class="c1"&gt;# (followed by $\ as always)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This already demonstrates a lot of Perl's unusual features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variables have sigils (prefixes) - &lt;code&gt;$&lt;/code&gt; means scalar, &lt;code&gt;@&lt;/code&gt; means list, &lt;code&gt;%&lt;/code&gt; means hash (dictionary), and there are a few less common ones.&lt;/li&gt;
&lt;li&gt;special variables like &lt;code&gt;$\&lt;/code&gt; can control a lot of Perl's behavior&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$_&lt;/code&gt; topic variable to save you some typing - &lt;a href="https://rosettacode.org/wiki/Topic_variable"&gt;this feature is seen to limited degree in many languages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ranges &lt;code&gt;1..100&lt;/code&gt; go from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt; as they ought to, without the +1 weirdness. You can do &lt;code&gt;1...100&lt;/code&gt; in Perl too, but that just means the same thing as &lt;code&gt;1..100&lt;/code&gt;. In Ruby &lt;code&gt;1...100&lt;/code&gt; is same as &lt;code&gt;1..99&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#say-hello"&gt;
  &lt;/a&gt;
  Say Hello
&lt;/h3&gt;

&lt;p&gt;Let's write code that does this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.pl
Hello Alice Smith
Hello ALICE SMITH! 🎉🎉🎉
Hello Alice Smith
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="vg"&gt;$\&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="c1"&gt;# Say hello to %person&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;say_hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Interpolation only works with variables and&lt;/span&gt;
  &lt;span class="c1"&gt;# a few expressions like $variable{key}&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="si"&gt;$person&lt;/span&gt;&lt;span class="s2"&gt;{name} &lt;/span&gt;&lt;span class="si"&gt;$person&lt;/span&gt;&lt;span class="s2"&gt;{surname}&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Hash variable&lt;/span&gt;
&lt;span class="nv"&gt;%person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alice&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
  &lt;span class="s"&gt;surname&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Be more excited this time!&lt;/span&gt;
&lt;span class="c1"&gt;# local changes are reverted once we exit the block&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$\&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;! 🎉🎉🎉&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;uc&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;uc&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nv"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;# Back to the usual&lt;/span&gt;
&lt;span class="nv"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot going on here!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%person&lt;/code&gt; is a hash variable describing a person. However its elements are not hashes, they're just scalars, so the name of the person is &lt;code&gt;$person{name}&lt;/code&gt; and the surname is &lt;code&gt;$person{surname}&lt;/code&gt;. People find this sigil system very nonintuitive, and in Raku it switched to &lt;code&gt;%person{"name"}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One quite unusual feature in Perl is "dynamic scoping" - we can define something &lt;code&gt;local&lt;/code&gt; to a block - it works sort of like a global variable, but it gets reverted to what it was before once the block ends.&lt;/p&gt;

&lt;p&gt;This way we can change line ending &lt;code&gt;$\&lt;/code&gt; (and honestly without dynamic scoping, those globals changing stuff all over the place would be really bad). But we can also change individual elements of a hash, or current ENV, or many other things.&lt;/p&gt;

&lt;p&gt;Perl has also usual local variables with &lt;code&gt;my&lt;/code&gt; keyword. And a few other kinds, obviously.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contexts"&gt;
  &lt;/a&gt;
  Contexts
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, and so on are not some tiny things. They're actually core to how Perl works. Everything in Perl is in "scalar context" or "list context" (or one of the other contexts).&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="nv"&gt;$first_person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;STDIN&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;@other_people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;STDIN&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;chomp&lt;/span&gt; &lt;span class="nv"&gt;$first_person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;chomp&lt;/span&gt; &lt;span class="nv"&gt;@other_people&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Special welcome to &lt;/span&gt;&lt;span class="si"&gt;$first_person&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Also welcome to &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nb"&gt;join&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;@other_people&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's what it does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./contexts.pl
Alice
Bob
Charlie
Dave
Special welcome to Alice!
Also welcome to Bob, Charlie, Dave!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;STDIN&amp;gt;&lt;/code&gt; reads lines from &lt;code&gt;STDIN&lt;/code&gt;. Annoyingly they always come with the extra &lt;code&gt;\n&lt;/code&gt; and there are no special variables to chop that off, that's such a weird omission. But &lt;code&gt;&amp;lt;STDIN&amp;gt;&lt;/code&gt; does a different thing depending on being in scalar context or list context.&lt;/p&gt;

&lt;p&gt;When we use it in scalar context &lt;code&gt;$first_person = &amp;lt;STDIN&amp;gt;&lt;/code&gt; - it reads one line. When we use in in list context &lt;code&gt;@other_people = &amp;lt;STDIN&amp;gt;&lt;/code&gt; - it reads all the remaining lines.&lt;/p&gt;

&lt;p&gt;A lot of APIs have a lot of pairs of functions &lt;code&gt;getOneX&lt;/code&gt; and &lt;code&gt;getManyXs&lt;/code&gt;. Perl can simplify this with some context awareness.&lt;/p&gt;

&lt;p&gt;Something vaguely similar was done by jQuery where &lt;code&gt;$(selector)&lt;/code&gt; could be used to return one thing or many, while modern browser APIs turned that into &lt;code&gt;.querySelector&lt;/code&gt; and &lt;code&gt;.querySelectorAll&lt;/code&gt;, but jQuery was based on completely different principles.&lt;/p&gt;

&lt;p&gt;If you want your function to support contexts you can check &lt;code&gt;wantarray&lt;/code&gt; keyword, which return &lt;code&gt;true&lt;/code&gt; for list context, &lt;code&gt;false&lt;/code&gt; for scalar context, and &lt;code&gt;undef&lt;/code&gt; for void context when value is not used. &lt;a href="https://docstore.mik.ua/orelly/perl4/prog/ch02_07.htm"&gt;Perl documentation also lists two other contexts, because things are always more complicated than they first seem in Perl&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#golf"&gt;
  &lt;/a&gt;
  Golf
&lt;/h3&gt;

&lt;p&gt;Code Golf is a competition to write a program to do a given task in the fewest characters. Before custom languages for golfing got created, it was dominated by Perl, Ruby, and occasionally APL.&lt;/p&gt;

&lt;p&gt;Here's such "golfed" code for FizzBuzz, &lt;a href="https://codegolf.stackexchange.com/questions/58615/1-2-fizz-4-buzz"&gt;from a Code Golf site&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Fizz&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Buzz&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For some explanations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;words without quotes are treated as strings if there's no better interpretation, so &lt;code&gt;(Fizz)&lt;/code&gt; is a list of one string &lt;code&gt;("Fizz")&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$_%3&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, or &lt;code&gt;2&lt;/code&gt; depending on remainder of &lt;code&gt;$_&lt;/code&gt; modulo &lt;code&gt;3&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;so &lt;code&gt;(Fizz)[$_%3]&lt;/code&gt; returns &lt;code&gt;"Fizz"&lt;/code&gt; or &lt;code&gt;undef&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;and likewise &lt;code&gt;(Buzz)[$_%5]&lt;/code&gt; returns &lt;code&gt;"Buzz"&lt;/code&gt; or &lt;code&gt;undef&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.&lt;/code&gt; is string concatenation and undefined values become empty strings, so &lt;code&gt;(Fizz)[$_%3].(Buzz)[$_%5]&lt;/code&gt; returns &lt;code&gt;"Fizz"&lt;/code&gt;, &lt;code&gt;"Buzz"&lt;/code&gt;, &lt;code&gt;"FizzBuzz"&lt;/code&gt;, or &lt;code&gt;""&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;stuff||$_&lt;/code&gt; means &lt;code&gt;stuff&lt;/code&gt; if it's true, otherwise &lt;code&gt;$_&lt;/code&gt;. As empty string is false in Perl, it gets us &lt;code&gt;"Fizz"&lt;/code&gt;, &lt;code&gt;"Buzz"&lt;/code&gt;, &lt;code&gt;"FizzBuzz"&lt;/code&gt;, or &lt;code&gt;$_&lt;/code&gt;, as by FizzBuzz rules&lt;/li&gt;
&lt;li&gt;that extra &lt;code&gt;+&lt;/code&gt; is a precedence hack to save on some parentheses&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$/&lt;/code&gt; is &lt;code&gt;\n&lt;/code&gt; by default&lt;/li&gt;
&lt;li&gt;so we have &lt;code&gt;print(fizz_buzz_stuff, $/) for 1..100&lt;/code&gt; or &lt;code&gt;for (1..100) { print(fizz_buzz_stuff, "\n") }&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as golfs go, it's not too bad.&lt;/p&gt;

&lt;p&gt;Weirdly Ruby is about equally good for golfing at Perl, without any of the readability issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rename"&gt;
  &lt;/a&gt;
  Rename
&lt;/h3&gt;

&lt;p&gt;I still use Perl for one thing on a regular basis, and that's the &lt;code&gt;rename&lt;/code&gt; script, which used to be bundled with most Linux distributions, &lt;a href="https://github.com/taw/unix-utilities"&gt;and which I included in my &lt;code&gt;unix-utilities&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rename&lt;/code&gt; takes a Perl script as argument, and then a list of file names. Then it runs that Perl script, with &lt;code&gt;$_&lt;/code&gt; set to the file name. If it changed, it then renames the file.&lt;/p&gt;

&lt;p&gt;It of course does sensible things, like dry run mode, verbose mode, checking that it won't accidentally overwrite things, and so on.&lt;/p&gt;

&lt;p&gt;Some random examples of &lt;code&gt;rename&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Replace all spaces by underscores:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rename 's/ /_/g' *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Flatten nested directory structure by one level:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rename 's!/! - ! */*'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rename all &lt;code&gt;.txt&lt;/code&gt; to &lt;code&gt;.md&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rename 's/\.txt$/.md/' *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so on. Most of the time a single regexp replace will do, but sometimes you can run real code there. And for such cases &lt;code&gt;rename --dry-run&lt;/code&gt; is amazing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#autovivification"&gt;
  &lt;/a&gt;
  Autovivification
&lt;/h3&gt;

&lt;p&gt;Normally if you want to build up something iteratively, you need to initialize it first to an empty value. Not in Perl. Because each variable knows if it's a scalar, array, or hash; and each operation knows if it's a string or number operation, Perl can initialize things automatically.&lt;/p&gt;

&lt;p&gt;For example in this script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$counts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sr"&gt;/\w+/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$counts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$counts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="ow"&gt;cmp&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%counts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@top&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;$counts&lt;/span&gt;&lt;span class="s2"&gt;{&lt;/span&gt;&lt;span class="si"&gt;$_&lt;/span&gt;&lt;span class="s2"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can see top ten words in the KJV version of the Bible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s https://www.gutenberg.org/cache/epub/10/pg10.txt | ./wordcount.pl
the: 64305
and: 51762
of: 34843
to: 13680
that: 12927
in: 12727
he: 10422
shall: 9840
for: 8997
unto: 8997
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are so many interesting things going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;autovivification with &lt;code&gt;$counts{lc$_}++&lt;/code&gt; - we didn't have to do &lt;code&gt;%counts={}&lt;/code&gt; and &lt;code&gt;$counts{lc$_} ||= 0&lt;/code&gt; like we would in most other languages&lt;/li&gt;
&lt;li&gt;in Perl scalars work as strings or numbers depending on context, which makes things awkward for sorting. Inside &lt;code&gt;sort{ }&lt;/code&gt; &lt;code&gt;$a&lt;/code&gt; and &lt;code&gt;$b&lt;/code&gt; are elements being compared. In this case we compare values numerically with &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; (which returns -1, 0, or +1), and then (&lt;code&gt;||&lt;/code&gt; only runs right side if left is false, and 0 being equal is false) compare keys as strings with &lt;code&gt;cmp&lt;/code&gt; (which returns -1, 0, or +1). It can work, but I much prefer Ruby version &lt;code&gt;counts.sort_by{|k,v| [-v, k]}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$top[...]&lt;/code&gt; is one element of &lt;code&gt;@top&lt;/code&gt;, but &lt;code&gt;@top[...]&lt;/code&gt; is a list of elements, corresponding to list of indexes we pass.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#function-prototypes"&gt;
  &lt;/a&gt;
  Function Prototypes
&lt;/h3&gt;

&lt;p&gt;Perl is really committed to not having to do parentheses. For example you can declare that a function takes exactly one scalar argument with &lt;code&gt;($)&lt;/code&gt;. Take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;titleize&lt;/span&gt; &lt;span class="p"&gt;($)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lc&lt;/span&gt;&lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$word&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/\b./uc$&amp;amp;/&lt;/span&gt;&lt;span class="nv"&gt;eg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;titleize&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alice SMITH&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./prototypes.pl
Hello Alice Smith!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to the prototype, Perl knows what you meant was this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;titleize&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;alice SMITH&lt;/span&gt;&lt;span class="p"&gt;"),&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And not this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;Hello &lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="nv"&gt;titleize&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;alice SMITH&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lot of Perl builtin functions behave like this, including obviously &lt;code&gt;uc&lt;/code&gt; and &lt;code&gt;lc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is something even Ruby and Raku do not attempt. Ruby achieves its minimal parentheses count by making such one argument functions into methods you can unambiguously call with &lt;code&gt;.method_name&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Hello "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"alice SMITH"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;titleize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another things to notice here, is that Perl functions don't have argument lists. They just get &lt;code&gt;@_&lt;/code&gt; as argument list, and it's up to them to unpack them. Very often the first line of every function is &lt;code&gt;my ($arg1, $arg2, @rest) = @_&lt;/code&gt; or such.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flipping-language-features"&gt;
  &lt;/a&gt;
  Flipping Language Features
&lt;/h3&gt;

&lt;p&gt;Perl has a lot of default like calculations being on floating point numbers, but it's really happy to offer alternatives, which you can select with lexically scoped &lt;code&gt;use feature&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="vg"&gt;$\&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;bigrat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./bigrat.pl
0.142857142857143
1/7
0.142857142857143
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Until recently it offered completely insane &lt;code&gt;$[&lt;/code&gt; which determined if arrays start from 0, from 1, or from something dumb. That got understandably removed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unix-integration"&gt;
  &lt;/a&gt;
  Unix Integration
&lt;/h3&gt;

&lt;p&gt;Perl always meant to completely replace Unix shell scripts. It has absolutely phenomenal Unix integration. Here are just some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="nv"&gt;$os&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;uname -ms&lt;/span&gt;&lt;span class="p"&gt;`;&lt;/span&gt;
&lt;span class="nb"&gt;chomp&lt;/span&gt; &lt;span class="nv"&gt;$os&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;$ENV&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ru_RU&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
  &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;`;&lt;/span&gt;
  &lt;span class="nb"&gt;chomp&lt;/span&gt; &lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You're on &lt;/span&gt;&lt;span class="si"&gt;$os&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;In Russian, date is &lt;/span&gt;&lt;span class="si"&gt;$date&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Number of characters in numbers 1 to 1_000_000 is: &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;|wc -c&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;F&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./system.pl
You're on Darwin x86_64
In Russian, date is вторник, 11 января 2022 г. 06:31:54 (GMT)
Number of characters in numbers 1 to 1_000_000 is:  5888896
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backticks to get output of a simple command&lt;/li&gt;
&lt;li&gt;you can change &lt;code&gt;ENV&lt;/code&gt; by modifyng  &lt;code&gt;%ENV&lt;/code&gt; - and something other languages don't really provide, you can make those changes scoped so they get restored when you exit the block&lt;/li&gt;
&lt;li&gt;you can open pipes from or to your program just like you'd open a file - for bidirectional communication you'd need to use a module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only Ruby and Raku fully endorsed this, and Ruby doesn't have &lt;code&gt;local ENV&lt;/code&gt; trick. On the other hand, Perl doesn't have equivalent of Ruby's block-scoped local directory change with &lt;code&gt;Dir.chdir{ ... }&lt;/code&gt;. In Perl if you change directory with &lt;code&gt;chdir&lt;/code&gt; you need to restore it back manually.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flip-flop-operator"&gt;
  &lt;/a&gt;
  Flip Flop Operator
&lt;/h3&gt;

&lt;p&gt;A flip flop is a pair of condition. When first is true, it turns on the flip flop. When second is true, it turns it off. So there's a bit of hidden state.&lt;/p&gt;

&lt;p&gt;Well, let's parse some HTML with regular expressions, and extract all links from a head section of an HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="vg"&gt;$\&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;curl -s https://en.wikipedia.org/wiki/Perl |&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;head&amp;gt;/&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="sr"&gt;/&amp;lt;\/head&amp;gt;/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sr"&gt;/href="(.*?)"/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./flipflop.pl
/w/load.php?lang=en&amp;amp;amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cjquery.makeCollapsible.styles%7Cskins.vector.styles.legacy%7Cwikibase.client.init&amp;amp;amp;only=styles&amp;amp;amp;skin=vector
/w/load.php?lang=en&amp;amp;amp;modules=site.styles&amp;amp;amp;only=styles&amp;amp;amp;skin=vector
//upload.wikimedia.org
//en.m.wikipedia.org/wiki/Perl
/w/index.php?title=Perl&amp;amp;amp;action=edit
/static/apple-touch/wikipedia.png
/static/favicon/wikipedia.ico
/w/opensearch_desc.php
//en.wikipedia.org/w/api.php?action=rsd
https://creativecommons.org/licenses/by-sa/3.0/
https://en.wikipedia.org/wiki/Perl
//meta.wikimedia.org
//login.wikimedia.org
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we had a lot of HTML documents, the flip flop would keep going on whenever a &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; is matched, and keep going off whenever &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; is matched. It's basically a shortcut notation for saying:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span class="vg"&gt;$\&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;curl -s https://en.wikipedia.org/wiki/Perl |&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="nv"&gt;$in_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$in_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/&amp;lt;head&amp;gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nv"&gt;$in_head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sr"&gt;/&amp;lt;\/head&amp;gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in_head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sr"&gt;/href="(.*?)"/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arguably a flip flop expresses it more cleanly than a state variable and some statements to manage it. Or maybe it doesn't.&lt;/p&gt;

&lt;p&gt;This feature has a good amount of controversy behind it. Like many Perl features it found its way into Ruby, but you'd be hard pressed to find it used much in typical Ruby code. At one point Ruby tried to deprecate it with goal of removing it, but it managed a rare feat and got itself un-deprecated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-perl"&gt;
  &lt;/a&gt;
  Should you use Perl?
&lt;/h3&gt;

&lt;p&gt;Probably not.&lt;/p&gt;

&lt;p&gt;I tried to show Perl in the best light here, and even that wasn't possible without running into a good number of WATs. If you look at real Perl code, there's a really high WAT rate. At the time it could have been argued the WATs are a price worth paying for expressiveness, and it's still way better than shell scripting, but most languages after Perl took many of Perl's best parts, without the WATs.&lt;/p&gt;

&lt;p&gt;Perl has two main spiritual successors, which took different lessons from Perl - Ruby and Raku. Ruby took the "lessons learned" approach, kept the good stuff somewhat selectively, also good stuff from Smalltalk and other languages, and created a thing of beauty. Raku took the opposite "build a better kitchen sink" approach, cleaned up some stuff that clearly wasn't working, and instead piled up a lot of completely new untested ideas, to get a hopefully highly expressive mess. Depending on why you wanted to use Perl, one or the other might be more appealing.&lt;/p&gt;

&lt;p&gt;Other modern languages like Python (or even somewhat JavaScript with Node) are not quite doing what Perl was aiming at, but they're generally adequate as replacement for shell scripting, and they have an advantage that you might already know them.&lt;/p&gt;

&lt;p&gt;Perl is one of the best languages for code golfing, but Ruby is about equally good at it, while being so much more useful overall. And nowadays golfing-specific languages are also very popular.&lt;/p&gt;

&lt;p&gt;Overall if you wanted to use Perl for something, I'd recommend Ruby as a first choice replacement, and one of the other languages I mentioned if that's not quite what you want.&lt;/p&gt;

&lt;p&gt;While writing this episode I also had quite a few moments when I thought some Perl-style Ruby feature originated in Perl (notably &lt;code&gt;Dir.chdir&lt;/code&gt; and &lt;a href="http://t-a-w.blogspot.com/2010/07/another-example-of-ruby-being-awesome-w.html"&gt;&lt;code&gt;%W&lt;/code&gt;&lt;/a&gt;), but it turned out that it was just Ruby extrapolating from the good parts of Perl. The best Perl of today is no longer Perl itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-52-perl"&gt;Code for the Perl episode is available here&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Tomasz Wegrzanowski</name>
    </author>
    <id>https://dev.to/taw/100-languages-speedrun-episode-52-perl-pn7</id>
    <published>2022-01-11T07:13:07Z</published>
    <updated>2022-01-11T07:13:07Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#546 - Perl Books</title>
    <link rel="alternate" href="https://perlweekly.com/archive/546.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Welcome to my first edition of 2022 and <strong>95th edition</strong> overall.</p>
<p>I remember there was a time when the <strong>O'Reilly</strong> group published many Perl books. Then came a few other publishing houses like <strong>Manning</strong> publications. I am sure you must have owned a handful of Perl books from these publishers. In recent times not many Perl books have been written, except one or two by <strong>brian d foy</strong>. A friend of mine donated all his Perl books to a local library as he is moving to Python. It is a sad state to be honest. Recently, I came across a <strong>Facebook</strong> post by a friend of mine about a Perl book called <strong>Extending and Embedding Perl</strong>. I knew about it but I had never had the chance to read it. So I decided to buy a used copy from <strong>Amazon</strong>. I must confess I was missing a great deal. If you haven't read it then you must check it out. By the way, I have kept all my Perl books safe. I like to read physical books and not online versions.</p>
<p>With a new year, there is a tradition of new year resolutions. As far as I am concerned, I stopped making any resolutions two years ago. But this year, I decided to make one and stick to it. And the resolution is to get the draft of my first Perl book out as soon as possible. It has been going on for months now. It is embarassing now to even talk about it. There are so many things going on at the same time, I hardly find time for the book. Please wish me luck.</p>
<p>A long time ago, <strong>Gabor</strong> started a campaign to make live videos about Perl. He even did few pair-programming sessions and they were very popular. But then there has been no noise on that front in recent times. I used to make <strong>YouTube</strong> videos for the Weekly Challenge during the middle of last year and then I also stopped because of lack of time. Last month, I started making videos again for the Weekly Challenge. It gives me immense pleasure when I see comments on my videos. Someone recently commented on one video and requested I should make videos of past challenges as well. I have to manage my time carefully otherwise my first book would be neglected again. Having said that, I am not giving up on making videos for the Weekly Challenge. If you are interested then please do check out my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>.</p>
<p>There is one piece of good news shared by <strong>Curtis</strong> - that the MMVP (minimally minimal viable product) RFC for Corinna has been sent to P5P. I am keeping my fingers crossed.</p>
<p>Last but not least, please look after yourself and your loved ones.</p></div>
    </content>
    <id>https://perlweekly.com/archive/546.html</id>
    <published>2022-01-10T10:00:00Z</published>
    <updated>2022-01-10T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Dancer2: Install Perl on Linux and Mac OSX</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-01-10T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-install-perl-on-linux"/>  <id>https://perlmaven.com/dancer2-install-perl-on-linux</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Sieve of Atkin / Curious Fraction Tree</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/01/09#pwc146" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the 10001st prime number.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean; 
use Getopt::Long;
use LWP::UserAgent;

use constant N =&gt; 10_001;   
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)];
        }
    }
    return @primes;
}

sub sieve_atkin{
    my($n) = @_;
    my @primes = (2, 3, 5);
    my $upper_bound = int($n * log($n) + $n * log(log($n)));
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub get_nth_prime{
    my($n, $generate) = @_; 
    my @primes;
    unless($generate){
        @primes = get_primes;
    }
    else{
        @primes = sieve_atkin($n);
    }
    return $primes[$n - 1]; 
}


MAIN:{
    my $n = N;
    my $generate = false;
    GetOptions("n=i" =&gt; \$n, generate =&gt; \$generate);
    print get_nth_prime($n, $generate) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
104743
$ perl perl/ch-1.pl --generate
104743
$ perl perl/ch-1.pl --generate
104743
$ perl perl/ch-1.pl --generate --n 101
547
$ perl perl/ch-1.pl --generate --n 11
31
$ perl perl/ch-1.pl --n 10001
104743
$ perl perl/ch-1.pl --n 11
31
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I've mentioned it before, but for anything that asks for or needs prime numbers I always
ust grab them from one of several convenient online sources, rather than generate them 
myself.&lt;/p&gt;

&lt;p&gt;This time around I figured it'd be sporting to generate them myself, but maybe in an
interesting way. Here I implement a sieve method for determining prime numbers. This
&lt;em&gt;Sieve of Atkin&lt;/em&gt;_ has a claim to fame of being the most performant among prime number
generating sieve techniques. The code is a bit convoluted looking, I will admit, but is 
a faithful Perl representation of the algorithm (follow the reference link for 
pseudocode). Also, rather than try and explain the algorithm myself anyone interested
can find full in depth treatments elsewhere. A background in number theory helps for 
some of the details.&lt;/p&gt;

&lt;p&gt;Since I have some existing code for getting the pre-computed primes I figured I would
use that as a check and extra feature. Command line options allow for the default
behavior (fetch pre-computed primes for an N of 10,001) to be overridden.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Given a fraction return the parent and grandparent of the fraction from the Curious 
Fraction Tree.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use constant ROOT =&gt; "1/1";
use constant SEPARATOR =&gt; "/";

sub initialize{
    my($member) = @_;
    my $graph = new Graph();
    $graph-&gt;add_vertex(ROOT);
    my @next = (ROOT);
    my @changes = ([0, 1], [1, 0]);
    my $level = 0;
    {
        my @temp_next;
        my @temp_changes;
        do{
            $level++;
            my $next = shift @next;
            my($top, $bottom) = split(/\//, $next);
            my $change_left = shift @changes;
            my $change_right = shift @changes;
            my $v_left = ($top + $change_left-&gt;[0]) . SEPARATOR . ($bottom + $change_left-&gt;[1]);
            my $v_right = ($top + $change_right-&gt;[0]) . SEPARATOR . ($bottom + $change_right-&gt;[1]);    
            $graph-&gt;add_edge($next, $v_left);
            $graph-&gt;add_edge($next, $v_right);
            push @temp_next, $v_left, $v_right;
            push @temp_changes, $change_left;
            push @temp_changes, [$level + 1, 0], [0, $level + 1];
            push @temp_changes, $change_right;
        }while(@next &amp;&amp; !$graph-&gt;has_vertex($member));
        @next = @temp_next;
        @changes = @temp_changes; 
        redo if !$graph-&gt;has_vertex($member);
    }
    return $graph;
}

sub curious_fraction_tree{
    my($member) = @_;
    my $graph = initialize($member);
    my($parent) = $graph-&gt;predecessors($member);
    my($grandparent) = $graph-&gt;predecessors($parent);
    return ($parent, $grandparent);
}

MAIN:{
    my($member, $parent, $grandparent);
    $member = "3/5";
    ($parent, $grandparent) = curious_fraction_tree($member);
    print "member = '$member'\n";
    print "parent = '$parent' and grandparent = '$grandparent'\n";
    print "\n";
    $member = "4/3";
    ($parent, $grandparent) = curious_fraction_tree($member);
    print "member = '$member'\n";
    print "parent = '$parent' and grandparent = '$grandparent'\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
member = '3/5'
parent = '3/2' and grandparent = '1/2'

member = '4/3'
parent = '1/3' and grandparent = '1/2'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;My thought process on this problem started somewhat backwards. After reading the problem
statement I thought of the Graph module and remembered that it defines a function
&lt;code&gt;predecessors()&lt;/code&gt; which would be very useful for this. After convincing myself to 
&lt;code&gt;use Graph;&lt;/code&gt; I then probably spent the majority of the time for this just getting my 
head around how to define new vertices at each level of the tree. Like all trees there is
some recursiveness to the structure, but an iterative implementation still looks clean as
well.&lt;/p&gt;

&lt;p&gt;Once the graph is constructed the solution as required comes from calling &lt;code&gt;predecessors()&lt;/code&gt;
to get the parent and grandparent vertices.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-146/"&gt;Challenge 146&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.baeldung.com/cs/prime-number-algorithms"&gt;Sieve of Atkin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/"&gt;Prime Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Graph"&gt;Graph&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc146</id>
    <published>2022-01-09T17:32:00-05:00</published>
    <updated>2022-01-09T17:32:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-9101445879871898233</id>
    <published>2022-01-08T23:53:00.001+01:00</published>
    <updated>2022-01-08T23:53:59.448+01:00</updated>
    <title type="text">(ccclxxvi) 9 great CPAN modules released last week</title>
    <content type="html"> Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSAVAGE/Config-Tiny-2.28' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Config::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read/Write .ini style files with as little code as possible &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.28&lt;/strong&gt; on 2022-01-04&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 2.27 was 3 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.076' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.076&lt;/strong&gt; on 2022-01-07&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 0.075 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.36' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.36&lt;/strong&gt; on 2022-01-05&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.35 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.074' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.074&lt;/strong&gt; on 2022-01-07&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 2.073 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.05' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.05&lt;/strong&gt; on 2022-01-06&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 5.04 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYOHEX/Minilla-v3.1.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minilla&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - CPAN module authoring tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v3.1.14&lt;/strong&gt; on 2022-01-07&lt;/li&gt;  &lt;li&gt;Votes: 53&lt;/li&gt;  &lt;li&gt;Previous version: v3.1.12 was 9 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9112' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9112&lt;/strong&gt; on 2022-01-07&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9103 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Test-Differences-0.69' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::Differences&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Test strings and data structures and show differences if not ok &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.69&lt;/strong&gt; on 2022-01-07&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.68 was 7 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PERLANCAR/Text-ANSITable-0.607' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::ANSITable&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create nice formatted tables using extended ASCII and ANSI colors &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.607&lt;/strong&gt; on 2022-01-05&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.606 was 4 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/9101445879871898233/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvi-9-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9101445879871898233"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/9101445879871898233"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/ccclxxvi-9-great-cpan-modules-released.html" title="(ccclxxvi) 9 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8629636300786705379</id>
    <published>2022-01-08T23:10:00.001+01:00</published>
    <updated>2022-01-08T23:10:31.655+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-01-08 22:09:37 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70619735" target="_blank"&gt;Capturing group regex with grep&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70629401" target="_blank"&gt;Find nearest option in a Perl Hash&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70615510" target="_blank"&gt;Count trailing newlines with POSIX utilities or Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/5]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70566395" target="_blank"&gt;A 'my' issue, it cannot work even in clear PL rule&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70575195" target="_blank"&gt;How can I get table height from PDF::Table?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70611754" target="_blank"&gt;Perl wrong UTF-8 output&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70622981" target="_blank"&gt;Perl: Repair utf8 xml file which contains octal or hexadecimal codes&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70625083" target="_blank"&gt;Howto sort inline POD entries of a Perl package documentation for IMenu or a final documentation&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70556414" target="_blank"&gt;Perl 5 signatures: Passing multiple arrays&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70619739" target="_blank"&gt;How to get regex to work in a perl script?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8629636300786705379/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8629636300786705379"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8629636300786705379"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/01/dxvi-stackoverflow-perl-report.html" title="(dxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>#545 - Happy, Healthy, and Prosperous New Year!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/545.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi everyone!</p>
<p>Let me start by welcoming you to the new year! Let me also use the opportunity to thank <a href="http://manwar.org/">Mohammad S. Anwar</a> for his dedication in both editing every other edition of the Perl Weekly Newsletter and his very own <a href="https://theweeklychallenge.org/">Weekly Challenge</a>. Let me also thank <a href="https://davecross.co.uk/">Dave Cross</a> for his immense help making our grammar a bit more bearable and the various Open Source projects he creates. (e.g. the <a href="https://cpandashboard.com/">CPAN Dashboard</a> or <a href="https://perl.theplanetarium.org/">The Perl Planetarium</a>). If you also like their work please thank them in an email, a blog post, or by supporting them via <a href="https://www.patreon.com/manwar/">Patreon for Mohammad</a> or via <a href="https://github.com/davorg/">GitHub for Dave</a>. They won't become wealthy from this, but receiving a paycheck every month from tens of supporters give a huge boost to the ego and makes one create even more for the public.</p>
<p>As for me, you might recall I've been learning Spanish for more than 3 years and started to learn Ladino (aka. Judeo-Spanish) a few weeks ago. Learning a foreign language is a totally different experience than learning a programming language. If for nothing else, because you don't get immediate feedback to your mistakes from a compiler. Well. Except if you use an application that helps you. My open source mindset quickly kicked in. I found an Open Source platform called <a href="https://librelingo.app/">LibreLingo</a> that will help you learn languages. It is still in very early version, but started to use that platform to be able to practice Ladino and also started to contribute to the project. I'll share more about it when enough progress was made to show something in public. Until then you are invited to check it out.</p>
<p>Enjoy the year ahead!</p></div>
    </content>
    <id>https://perlweekly.com/archive/545.html</id>
    <published>2022-01-03T10:00:00Z</published>
    <updated>2022-01-03T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/01/01/list-of-new-cpan-distributions-dec-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ACME-Dzil-Test-daemon">ACME-Dzil-Test-daemon</a></td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Module abstract placeholder text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ACME-Dzil-Test-daemon2">ACME-Dzil-Test-daemon2</a></td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Module abstract placeholder text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-ShellCompleters">Acme-CPANModules-ShellCompleters</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Modules that provide shell tab completion for other commands/scripts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WorkingWithURL">Acme-CPANModules-WorkingWithURL</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Working with URL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libmaxminddb">Alien-libmaxminddb</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.000</td>
<td>Find or download and install libmaxminddb</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Apache2-Dummy-RequestRec">Apache2-Dummy-RequestRec</a></td>
<td><a href="https://metacpan.org/author/JFF">JFF</a></td>
<td>0.01</td>
<td>0.03</td>
<td>dummy Apache request record class for testing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Apache2-RequestData">Apache2-RequestData</a></td>
<td><a href="https://metacpan.org/author/JFF">JFF</a></td>
<td>0.01</td>
<td>0.02</td>
<td>collects all query and post parameters in a hash ref</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-optex-rpn">App-optex-rpn</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1.01</td>
<td>1.01</td>
<td>Reverse Polish Notation calculation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ptimeout">App-ptimeout</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v1.0.0</td>
<td>v1.0.0</td>
<td>time out a command, reporting errors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Array-Set-Naive">Array-Set-Naive</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like Array::Set, but uses naive algorithms</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ArrayData-WordList">ArrayData-WordList</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Array data from a WordList::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Avatica-Client">Avatica-Client</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Client for Apache Calcite Avatica</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bio-RNA-BarMap">Bio-RNA-BarMap</a></td>
<td><a href="https://metacpan.org/author/FELIXK">FELIXK</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Parse and query BarMap mappings.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bio-RNA-Barriers">Bio-RNA-Barriers</a></td>
<td><a href="https://metacpan.org/author/FELIXK">FELIXK</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Parse, query and manipulate output of Barriers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bio-RNA-Treekin">Bio-RNA-Treekin</a></td>
<td><a href="https://metacpan.org/author/FELIXK">FELIXK</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Classes for working with Treekin output.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Meta-cp">CLI-Meta-cp</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Metadata for 'cp' Unix commnd</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CLI-Meta-mv">CLI-Meta-mv</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Metadata for 'mv' Unix commnd</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Catalyst-Plugin-CachedUriForAction">Catalyst-Plugin-CachedUriForAction</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>1.000</td>
<td>1.000</td>
<td>drop-in supercharger for uri_for_action</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Crypt-Bcrypt">Crypt-Bcrypt</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>A modern bcrypt implementation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBD-Avatica">DBD-Avatica</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.01.0</td>
<td>0.2.1</td>
<td>Driver for Apache Avatica compatible servers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBD-Phoenix">DBD-Phoenix</a></td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>0.01.0</td>
<td>0.01.0</td>
<td>Driver for Apache Avatica compatible servers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-Agent">Devel-Agent</a></td>
<td><a href="https://metacpan.org/author/AKALINUX">AKALINUX</a></td>
<td>0.001</td>
<td>0.007</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-CCS811">Device-Chip-CCS811</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>chip driver for CCS811</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dist-Zilla-Plugin-SignReleaseNotes">Dist-Zilla-Plugin-SignReleaseNotes</a></td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>0.0001</td>
<td>0.0003</td>
<td>Create and signs a 'Release' notes file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ELab-Client">ELab-Client</a></td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Access the eLabFTW API with Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Symlink-Util">File-Symlink-Util</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Utilities related to symbolic links</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Freecell-Deal-MS">Freecell-Deal-MS</a></td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>0.0.1</td>
<td>0.4.0</td>
<td>deal Windows FreeCell / FC Pro layouts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Git-Background">Git-Background</a></td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Perl interface to run Git commands (in the background)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTML-Inspect">HTML-Inspect</a></td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1.00</td>
<td>1.00</td>
<td>Inspect a HTML document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Health-SHC">Health-SHC</a></td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>0.001</td>
<td>0.004</td>
<td>Extract and verify Smart Haelth Card information</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IP-Geolocation-MMDB">IP-Geolocation-MMDB</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Map IP addresses to country codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-Blacklist-Attachments">Mail-Exim-Blacklist-Attachments</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.007</td>
<td>2.000</td>
<td>Blacklist email attachments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-Blacklist-GeoIP">Mail-Exim-Blacklist-GeoIP</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.001</td>
<td>1.001</td>
<td>Map IP addresses to country codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mail-Exim-Blacklist-Geolocation">Mail-Exim-Blacklist-Geolocation</a></td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>1.000</td>
<td>1.002</td>
<td>Map IP addresses to country codes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojo-Darkpan">Mojo-Darkpan</a></td>
<td><a href="https://metacpan.org/author/RES">RES</a></td>
<td>0.04</td>
<td>0.06</td>
<td>A Mojolicious web service frontend leveraging OrePAN2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OPM-Maker-Command-sopm">OPM-Maker-Command-sopm</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1.0.0</td>
<td>1.1.0</td>
<td>Build .sopm file based on metadata</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SPVM-Math">SPVM-Math</a></td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>0.01</td>
<td>0.05</td>
<td>SPVM Math Functions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Set-CSS">Set-CSS</a></td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>0.0.1</td>
<td>0.2.0</td>
<td>set of CSS classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-HTTP-MockServer-Once">Test-HTTP-MockServer-Once</a></td>
<td><a href="https://metacpan.org/author/IGIBBS">IGIBBS</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Implement a one shot mock HTTP server for use in tests</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Thread-Csp">Thread-Csp</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Communicating sequential processes threading for Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Time-Local-ISO8601">Time-Local-ISO8601</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Compute time (Unix epoch) from YMD/ISO8601 sting</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UI-Various">UI-Various</a></td>
<td><a href="https://metacpan.org/author/DORNER">DORNER</a></td>
<td>0.01</td>
<td>0.09</td>
<td>graphical/non-graphical user interface without external programs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URL-XS">URL-XS</a></td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>v0.2.0</td>
<td>v0.3.1</td>
<td>Parsing URLs with zero-copy and no mallocs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Util-H2O-More">Util-H2O-More</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.0.1</td>
<td>0.0.3</td>
<td>like if bless created accessors for you. Intended for hash reference-based Perl OOP only. This module uses Util::H2O::h2o as the basis for actual object creation; but there's no reason other accessor makers couldn't have been used or can be used. I just really like h2o. <img src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;"/></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-ArrayData">WordList-ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Wordlist from any ArrayData::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WordList-Special-Stdin">WordList-Special-Stdin</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Wordlist from STDIN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-SAX-SVGTransformer">XML-SAX-SVGTransformer</a></td>
<td><a href="https://metacpan.org/author/ISHIGAKI">ISHIGAKI</a></td>
<td>0.01</td>
<td>0.04</td>
<td>SVG transformer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/YAML-PP-Ref">YAML-PP-Ref</a></td>
<td><a href="https://metacpan.org/author/TINITA">TINITA</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Generated Reference Parser backend for YAML::PP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/idi">idi</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0102</td>
<td>Easy Command-line MIDI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/qq">qq</a></td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>0.02</td>
<td>0.02</td>
<td>command line journal app</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>50</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>28</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>10</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/VOEGELAS">VOEGELAS</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/LOGIONIZ">LOGIONIZ</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/FELIXK">FELIXK</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DAEMON">DAEMON</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/SHLOMIF">SHLOMIF</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JFF">JFF</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/SKIRMESS">SKIRMESS</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/MARKOV">MARKOV</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/DORNER">DORNER</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/KIMOTO">KIMOTO</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/ISHIGAKI">ISHIGAKI</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/AKALINUX">AKALINUX</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/RES">RES</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/TINITA">TINITA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/RAJ">RAJ</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/IGIBBS">IGIBBS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract ACME-Dzil-Test-daemon DAEMON 0.001 0.001 Module abstract placeholder text ACME-Dzil-Test-daemon2 DAEMON 0.001 0.001 Module abstract placeholder text Acme-CPANModules-ShellCompleters PERLANCAR 0.001 0.001 Modules that provide shell tab completion for other commands/scripts Acme-CPANModules-WorkingWithURL PERLANCAR 0.001 0.001 Working with URL Alien-libmaxminddb VOEGELAS 1.000 1.000 Find or download and install libmaxminddb Apache2-Dummy-RequestRec JFF 0.01 0.03 … <a href="https://perlancar.wordpress.com/2022/01/01/list-of-new-cpan-distributions-dec-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1959</id>
    <published>2022-01-01T02:25:15Z</published>
    <updated>2022-01-01T02:25:15Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>Advent of Code Day 15 to 24, with some gaps</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_15_to_24_with_gaps.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_15_to_24_with_gaps.html</id>
    <updated>2021-12-31T11:53:02+00:00</updated>
    <category term="perl"/>
    <summary>A few more days of Advent of Code... Day 15 - Chiton Another path finder, this time with different costs for different paths. This screams for Dijkstra, but for part 1 I still did a more stupid ...</summary>
    <content type="html">&lt;p&gt;A few more days of Advent of Code...&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/15"&gt;Day 15&lt;/a&gt; - Chiton&lt;/h4&gt;

&lt;p&gt;Another path finder, this time with different costs for different paths. This screams for &lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;Dijkstra&lt;/a&gt;, but for part 1 I still did a more stupid brute force solution using code similar to Day 12 (but using a stack instead of recursion).&lt;/p&gt;

&lt;p&gt;For part two my brute force solution was too slow, so I actually had to understand / implement Dijkstra, which took a bit of time, the Wikipedia article and &lt;a href="https://www.redblobgames.com/pathfinding/a-star/introduction.html"&gt;this nice page&lt;/a&gt;. It was still rather slow, because I used a plain Perl sort to sort the todo list. Then I thought that I could just group the nodes by cost, thinking (in error) that there would by only 9 buckets, but as each node stores the cumulative cost there are way more buckets. Then I looked into this thing called Heap that was all hot on reddit, and sped up my code a lot by using &lt;a href="https://metacpan.org/pod/Heap::Simple"&gt;Heap::Simple&lt;/a&gt;. Abigail has a very nice and detailed explanation of "Heap" on &lt;a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-15.html"&gt;his post about the 15th&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/15_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/15_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/16"&gt;Day 16&lt;/a&gt; - Packet Decoder&lt;/h4&gt;

&lt;p&gt;Yay, decoding a binary protocol!&lt;/p&gt;

&lt;p&gt;First, I decode the input into a binary string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $bits = join( '', map { sprintf( &amp;quot;%.4b&amp;quot;, hex( '0x' . $_ ) ) } split( //, $ARGV[0] || &amp;lt;&amp;gt; ) );&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading that from right to left, we first either read in a file or take the input directly from the command line, and split it into single characters (&lt;code&gt;split //&lt;/code&gt;), the interpret that char as a hex value (&lt;code&gt;hex('0x'.$_)&lt;/code&gt;) and convert it into a four bit 0/1 string (&lt;code&gt;sprintf( &amp;quot;%.4b&amp;quot;, ..)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then we "just" need to take a few bits of that string (I use &lt;code&gt;substr&lt;/code&gt; to bite of the correct sizes) to get the &lt;code&gt;version&lt;/code&gt; and &lt;code&gt;type_id&lt;/code&gt;, and handle the next bits based on the type. As we're dealing with packets that can contain subpackets, I implemented all of this in a recursive function, where the most fiddly stuff was to make sure that the correct number of bits stay on the input stream.&lt;/p&gt;

&lt;p&gt;I liked it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/16_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/16_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/17"&gt;Day 17&lt;/a&gt; - Trick Shot&lt;/h4&gt;

&lt;p&gt;I spend some time thinking about math-y ways to solve the problem, but only figured out a way to calc the bounds for &lt;code&gt;x&lt;/code&gt;. For part 1, I looped through all &lt;code&gt;y&lt;/code&gt; between shooting straight down and double the max depths, and got my result. For part 2 the same interval also worked, so I just needed to adjust the calculation of the winning shot.&lt;/p&gt;

&lt;p&gt;I liked how I parsed the input, using the return values of the regex:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my ($xfrom, $xto, $yto, $yfrom) = $in =~ /x=(-?\d+)..(-?\d+), y=(-?\d+)..(-?\d+)/;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/17_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/17_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Day 18 &amp;amp; 19&lt;/h4&gt;

&lt;p&gt;I skipped those two days (for now), because they seemed quite complex, and I had family stuff to do on the weekend.&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/20"&gt;Day 20&lt;/a&gt; - Trench Map&lt;/h4&gt;

&lt;p&gt;This was a bit too tricky for me. I got part 1 working quite easily for the test data, but it did not work for the live data (which was the actual tricky bit here). After working through some solutions on reddit I finally figured out how to handle the blinking background, solving both parts with the same code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/20_1.pl"&gt;Part 1 &amp;amp; 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/21"&gt;Day 21&lt;/a&gt; - Dirac Dice&lt;/h4&gt;

&lt;p&gt;Here I found the first part quite easy, though I still have problems implementing a &lt;span cite="http://"&gt;modulo&lt;/span&gt; that works from 1 to 10 instead of 0 to 9:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my $pos = ( $board{$player}-&amp;gt;{pos} + $roll ) % 10;
 $pos = 10 if $pos == 0;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I did not try the second part, because I was busy with Christmas preparations (in my case, producing my &lt;a href="/mixtapes/in_einer_leiwandn_herdn.html"&gt;mixtape&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/21_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/22"&gt;Day 22&lt;/a&gt; - Reactor Reboot&lt;/h4&gt;

&lt;p&gt;I did a quick brute force for part 1, knowing very well that this approach will not work for the second part (where I assumed (correctly) we cannot just ignore the values outside -50:50). I thought a bit about how to intersect cubes, but again had other things to do, and not enough math-power.. So part 2 will have to be solved later&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/22_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/24"&gt;Day 24&lt;/a&gt; - Arithmetic Logic Unit&lt;/h4&gt;

&lt;p&gt;I skipped day 23 and 24 (again because of Christmas..), but spend some time on the 25th to solve day 24.&lt;/p&gt;

&lt;p&gt;Of course I fell for the trap and implemented the &lt;span class="caps"&gt;ALU &lt;/span&gt;(so much simpler than Intcode!) and could output 4 bit numbers easily. But using my virtual machine to brute-force the model number would take ages.&lt;/p&gt;

&lt;p&gt;So after some reading reddit I found &lt;a href="https://github.com/dphilipson/advent-of-code-2021/blob/master/src/days/day24.rs"&gt;this solution&lt;/a&gt; which very nicely explained how to reverse-engineer the input code to figure out which lines in the code where actually relevant. I then used &lt;strong&gt;this&lt;/strong&gt; as my actual task and wrote some code to extract the relevant lines from my input, do the correct stack manipulations and just output the rules for the different numbers (the 5th number has to be 3 larger then the 11th number, etc):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my @stack;
 my %rules;
 for my $i (1..14) {
     my $prog = $progs[$i];
     my $check = $prog-&amp;gt;[5]-&amp;gt;[2];
     my $offset = $prog-&amp;gt;[15]-&amp;gt;[2];
     if ($check &amp;gt; 0) {
         push(@stack,[$i,$offset]);
     }
     else {
         my $old = pop(@stack);
         my $calc = $old-&amp;gt;[1] + $check;
         $rules{$i} = [$old-&amp;gt;[0],$calc];
     }
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then calculated the biggest/smallest serial number by hand.&lt;/p&gt;

&lt;p&gt;But because I had some more appetite for coding, I also implemented an automatic solver:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; my @high=' ';
 my @low= ' ';
 while (my ($pos, $rule) = each %rules) {
     if ($rule-&amp;gt;[1] &amp;lt;= 0) {
         $high[$rule-&amp;gt;[0]] = 9;
         $high[$pos] = 9 + $rule-&amp;gt;[1];
         $low[$pos]=1;
         $low[$rule-&amp;gt;[0]]= 1 - $rule-&amp;gt;[1] ;
     }
     else {
         $high[$pos] = 9;
         $high[$rule-&amp;gt;[0]] = 9 - $rule-&amp;gt;[1];
         $low[$rule-&amp;gt;[0]] = 1;
         $low[$pos] = 1 + $rule-&amp;gt;[1];
     }
 }
 
 say &amp;quot;high: &amp;quot;.join('',@high);
 say &amp;quot;low:  &amp;quot;.join('',@low);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very nice, but I could have never come up with the actual solution on my own.&lt;/p&gt;

&lt;h4&gt;The rest...&lt;/h4&gt;

&lt;p&gt;I do plan to try to tackle the remaining tasks, but it might take some time, as we have a rather big roll-out of a project that has been in the work the last 1.5 years in the next week...&lt;/p&gt;

&lt;p&gt;But it was another very nice Advent of Code. Thanks, Eric, and all the other people who helped make this work, and who posted their solutions and explanations!&lt;/p&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>#544 - Merry Christmas</title>
    <link rel="alternate" href="https://perlweekly.com/archive/544.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>We wish all the readers of the newsletter, <strong>Merry Christmas</strong>. I hope and wish you are all enjoying quality time with your loved ones.</p>
<p>Belated happy birthday to my favourite language, <strong>Perl</strong>, on completing 34 years. <strong>Mark Gardner</strong> used his weekly blogging schedule to celebrate the occassion in his <a href="https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday">blog post</a>.</p>
<p>Do you remember which year you first picked up the <strong>Perl</strong> language?</p>
<p>For me, I was introduced to <strong>Perl</strong> in the year 1998. So technically, I am 23 Perl years old. How about you? I am wondering if anyone other than the creator picked the language in the first year that it existed. If you know their name then please do share it with us. I am sure there must be a handful of people that I am not aware of.</p>
<p>Talking about birthday celebrations, I would like to wish belated Happy Birthday to the mother of our chief editor, <strong>Gabor Szabo</strong>. As per the record, my birthday was last Monday i.e. <strong>20th December</strong>. To date, I have never celebrated my birthday, this year also went without celebration.</p>
<p>I noticed that I am getting close to my <strong>100th edition</strong> of the newsletter. This is my <strong>94th edition</strong>. It would be a big achievement for me, personally, to reach that number. I am looking forward to the <strong>556th edition</strong> of the weekly newsletter as that will be my <strong>100th edition</strong>.</p>
<p>Stay safe and enjoy the holiday break.</p></div>
    </content>
    <id>https://perlweekly.com/archive/544.html</id>
    <published>2021-12-27T10:00:00Z</published>
    <updated>2021-12-27T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Capture STDOUT and STDERR of external program using Capture::Tiny</title>
  <summary type="html"><![CDATA[<p>
In Perl there are many ways to run external programs. Some of the ways will allow you to capture the output of the external program
and some will even make it easy and fun. We are now looking at <a href="https://metacpan.org/pod/Capture::Tiny">Capture::Tiny</a>.
<p>
]]></summary>
  <updated>2021-12-27T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/capture-stdout-stderr-of-external-program"/>  <id>https://perlmaven.com/capture-stdout-stderr-of-external-program</id>
  <content type="html"><![CDATA[<p>
In Perl there are many ways to run external programs. Some of the ways will allow you to capture the output of the external program
and some will even make it easy and fun. We are now looking at <a href="https://metacpan.org/pod/Capture::Tiny">Capture::Tiny</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>A Stocking Full of Numbers: Semiprimes and the Ulam Sequence</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/26#pwc144" type="text/html"/>
    <content type="html">
&lt;h1&gt;Merry Christmas and Happy New Year! May 2022 bring you less COVID and more Perl projects!&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate all Semiprime numbers &amp;lt;= 100.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean; 
use LWP::UserAgent;
use constant N =&gt; 100; 
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)];
        }
    }
    return @primes;
}

sub factor{
    my($n) = @_;
    my @factors = ();
    for  my $j (2 .. sqrt($n)){
        if($j**2 == $n){  
            push @factors, [$j, $j] if $j**2 == $n;
            next; 
        }
        push @factors, [$j, $n / $j] if $n % $j == 0;
    }
    return @factors;
}

sub semiprime{
    my($n, $primes) = @_;
    my @factors = factor($n);
    return false if @factors != 1;  
    my @prime_factors = grep {$factors[0]-&gt;[0] == $_ || $factors[0]-&gt;[1] == $_} @{$primes};     
    return true if @prime_factors == 2 || $prime_factors[0]**2 == $n; 
    return false; 
}

sub semiprime_n{
    my @primes = get_primes; 
    for my $n (1 .. N){
        print "$n " if semiprime($n, \@primes);   
    } 
    print "\n"; 
}

MAIN:{
    semiprime_n;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49 51 55 57 58 62 65 69 74 77 82 85 86 87 91 93 94 95
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I am sticking to the convention that I started a while back to not re-compute prime 
numbers myself, but instead just grab them from one of several convenient online sources.
The URL in the code above requires only a small amount of effort to scrape and parse. I 
hope nobody minds the little bit of extra traffic to their site!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please do check out their main page listed below. It's a fun resource with interesting 
facts and news on prime numbers and related research.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once the list of the first 100k primes is obtained (that's more than enough for any of 
these challenges) we proceed to factor and test candidate numbers. Provided the number
has only two factors (which may be equal) and both of them are prime then it passes the 
semiprime test.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive numbers, $u and $v. Write a script to generate Ulam Sequence 
having at least 10 Ulam numbers where $u and $v are the first 2 Ulam numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant ULAM_LIMIT =&gt; 10;   

sub ulam{
    my($u, $v) = @_;    
    my %pairs; 
    my @ulam = ($u, $v); 
    my $w = $u + $v;  
    push @ulam, $w;  
    $pairs{"$u,$v"} = $w; 
    $pairs{"$u,$w"} = $u + $w; 
    $pairs{"$v,$w"} = $v + $w; 
    do{
        my @sums = sort {$a &lt;=&gt; $b} grep{my $sum = $_; my @values = grep{$sum == $_} values %pairs; $sum if @values == 1 &amp;&amp; $sum &gt; $ulam[@ulam - 1]} values %pairs; 
        my $u = $sums[0]; 
        push @ulam, $u;
        for my $pair (keys %pairs){
            my($s, $t) = split(/,/, $pair);  
            $pairs{"$s,$u"} = $s + $u;
            $pairs{"$t,$u"} = $t + $u;
        }   
    }while(@ulam &lt; ULAM_LIMIT);
    return @ulam;  
}

MAIN:{
    my @ulam;
    @ulam = ulam(1, 2);   
    {
        print shift @ulam;
        print ", ";
        redo if @ulam &gt; 1;
    } 
    print shift @ulam;
    print "\n";

    @ulam = ulam(2, 3);   
    {
        print shift @ulam;
        print ", ";
        redo if @ulam &gt; 1;
    } 
    print shift @ulam;
    print "\n";

    @ulam = ulam(2, 5);   
    {
        print shift @ulam;
        print ", ";
        redo if @ulam &gt; 1;
    } 
    print shift @ulam;
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 2, 3, 4, 6, 8, 11, 13, 16, 18
2, 3, 5, 7, 8, 9, 13, 14, 18, 19
2, 5, 7, 9, 11, 12, 13, 15, 19, 23
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The code here is a pretty direct translation of the definition: the next member of the
sequence must be a sum of two previous members which is greater than the previous member
and only be obtainable one way. Here that is done with a &lt;code&gt;grep&lt;/code&gt; filter, with the sequence
itself being stored in an array, but for convenience the sums of all unique previous pairs
are kept in a hash.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-144/"&gt;Challenge 144&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Semiprime.html"&gt;Semiprime Number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/"&gt;Prime Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/UlamSequence.html"&gt;Ulam Sequence&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc144</id>
    <published>2021-12-26T18:00:00-05:00</published>
    <updated>2021-12-26T18:00:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Season of Docs successful completion</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/season-of-docs-2021-complete"/>
  <id>tag:news.perlfoundation.org,2021-12-24:/post/season-of-docs-2021-complete</id>
  <published>2021-12-24T12:13:32</published>
  <updated>2021-12-24T12:13:32</updated>
  <summary>
  <![CDATA[
     As previously announced, one of The Perl Foundation's initiatives for this year was to participate in Google Season of Docs. I'm pleased to announce that Khawar Latif Khan successfully completed the project. You can read further details at Khawar's Medium article Jason McIntosh's case study In addition, Khawar plans to share his experience at the next Perl and Raku Conference in Houston. I'd like to thank: Khawar for his quality 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>As <a href="https://news.perlfoundation.org/post/season-of-docs-progress">previously announced</a>, one of The Perl Foundation's initiatives for this year was to participate in Google Season of Docs. I'm pleased to announce that Khawar Latif Khan successfully completed the project.</p>

<p>You can read further details at
* <a href="https://uxplanet.org/gsod-2021-perls-content-audit-and-gap-analysis-a2ac8292e9be">Khawar's Medium article</a>
* <a href="https://docs.google.com/document/d/1JXZcsOc46DkTcev85xQkozEmQKZ5NMvkZ3zRF_9pwV4/edit">Jason McIntosh's case study</a></p>

<p>In addition, Khawar plans to share his experience at the next Perl and Raku Conference in Houston.</p>

<p>I'd like to thank:
* Khawar for his quality work
* Jason McIntosh for being the project lead and mentorship
* All others who were involved in this project and provided input to Khawar
* Google Season of Docs team for making this project happen</p>

<p>I'm looking forward to discussing more in Houston.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Supporting TPF – potential tax savings</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/support-tpf-in-2022"/>
  <id>tag:news.perlfoundation.org,2021-12-24:/post/support-tpf-in-2022</id>
  <published>2021-12-24T05:29:22</published>
  <updated>2021-12-24T05:29:22</updated>
  <summary>
  <![CDATA[
     With the end of the year quickly approaching, The Perl Foundation want to thank you for all that you do in supporting us. Your support has allowed us to make significant strides in advancing the Perl and Raku languages, and the software behind them. There is, however, much work that still needs to be done. As you consider your year-end philanthropy, we want to highlight a few strategies that may 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 6 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>(published on behalf of TPF and Marketing Committee)</p>

<p>With the end of the year quickly approaching, The Perl Foundation want to thank you for all that you do in supporting us. Your support has allowed us to make significant strides in advancing the Perl and Raku languages, and the software behind them. There is, however, much work that still needs to be done.</p>

<p>As you consider your year-end philanthropy, we want to highlight a few strategies that may reduce your tax liability. Your gift to The Perl Foundation may be tax-deductible, so now is a great time to help us pave the way for another successful year at TPF.</p>

<p>(Please consult your tax advisor for information on your specific circumstances. This article should not be considered tax or financial advice).</p>

<p><strong>Gifts of Cash - Extensions for 2021</strong></p>

<p>"Above-the-Line" Deduction for Cash Gifts Extended and Expanded in 2021 - The $300 above-the-line deduction established in 2020 for gifts of cash by a non-itemizer (excluding donor advised funds or supporting organizations) has been extended and expanded to $600 for those filing jointly for the 2021 tax year. So, even if you are not planning to itemize your deductions for 2021, you can still take advantage of this tax benefit.  Speak to your accountant and <a href="https://www.perlfoundation.org/payments.html">make donations.</a> </p>

<p><strong>Increase in Charitable Deduction Limit</strong></p>

<p>The increase in the itemized deduction for cash contributions to public charities of 60% to 100% of adjusted gross income has been extended to include the 2021 tax year.  Speak to your accountant and <a href="https://www.perlfoundation.org/payments.html">make donations.</a> </p>

<p><strong>Additional Tax Advantageous Giving Strategies</strong></p>

<p>Gifts of Long-Term Appreciated Securities:  In many cases, a gift of long-term appreciated securities is more tax advantageous than giving cash because capital gains taxes can be avoided. This can be especially useful in optimizing your tax benefits if you are not itemizing deductions in a given year. </p>

<p>IRA Charitable Rollover Gifts: If you are 70 years and six months of age or older, the IRS may allow you to make a qualified charitable distribution of up to $100,000 directly to The Perl Foundation from a traditional Individual Retirement Account (IRA). The benefit of donating through a rollover is that you will be able to avoid reporting the income. </p>

<p>Speak to your accountant to learn more about theses two options.</p>

<p>Thank you for being such an important part of our work at The Perl Foundation. Your support makes it possible for us to do the daily work growing Perl and Raku.</p>

    ]]>
  </content>
</entry>
</feed>
