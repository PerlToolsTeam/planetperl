<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email>dave@theplanetarium.org</email>
  </author>
  <updated>2022-11-05T20:41:07Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nelua, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-11-05T00:00:00Z</published>
    <updated>2022-11-05T00:00:00Z</updated>
  </entry>
  <entry>
  <title>TPRF to support FOSDEM Participation</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/fosdem"/>
  <id>tag:news.perlfoundation.org,2022-11-04:/post/fosdem</id>
  <published>2022-11-04T18:59:25</published>
  <updated>2022-11-04T18:59:25</updated>
  <summary>
  <![CDATA[
     One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. To apply for a mini grant please send a completed 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>One of the goals TPRF would like to achieve, now that conferences are becoming increasingly available in person, is to spread awareness of current Perl and Raku projects. In support of this goal, TPRF will be issuing a limited number of mini grants of up to $300 to participants interested in holding Perl/Raku based talks in FOSDEM 2023 dev rooms. To apply for a mini grant please send a completed <a href="https://docs.google.com/document/d/1y2Aj7bByeuLJ2V3y0SPFKO0W_xlUVerfYl0ROhlOnjI/copy">application</a> to  fosdem2023-grants@perlfoundation.org. </p>

<p>Please note that grants will be awarded only to those applicants whose talks are selected for FOSDEM. TPRF has made an intentional decision to not apply for a dev room, but to encourage talks to be given in other, non-language specific dev rooms instead. This will allow Perl and Raku to be shared with new audiences. </p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Spoken like a 1980s chip</title>
    <link rel="alternate" href="http://blogs.perl.org/users/saif/2022/11/spoken-like-a-1980s-chip.html"/>
    <id>tag:blogs.perl.org,2022:/users/saif//3152.10937</id>
    <published>2022-11-02T23:06:30Z</published>
    <updated>2022-11-02T23:23:30Z</updated>
    <author>
        <name>Saif</name>
        <uri>https://github.com/saiftynet</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/saif/">
        <![CDATA[<h3>In the beginning</h3>

<p>In the beginning there was light.  Of course there was, but a bang must have followed shortly after. It is not unexpected that the communication between organisms, surrounded by a fluid whether it is air or water, is primarily acoustic rather than visual.  While vision remains the king of senses and chemical signals are ubiquitous, interaction using a oscillating pressure producer and a corresponding sensor remains the best compromise to create a versatile rich, abstracted, linear data transfer not requiring line of sight. or any other complex infrastructure apart from a medium that envelops the organism.  Thus, speech.  I recall the early days of my youth my ZXSpectrum had a <a href="https://spectrumcomputing.co.uk/zxsr.php?id=8067">Currah Microspeech</a> module which, with only a 2K ROM, was able to produce an infinite number of raspy, but mostly recognisable words.  Flash-forwards to today, we have far more powerful utilities producing sounds almost indistinguishable from another human. and Perl allows access to these speech engines.  These are powerful, non-trivial utilities, with superior abilities to change intonnation, speed and other forms of expressive audio manipulations.  For those interested polease explore <a href="https://metacpan.org/release/JKAMPHAUS/PerlSpeak-2.01/view/lib/PerlSpeak.pm">PerlSpeak</a>, <a href="https://metacpan.org/pod/Speech::Festival::Synthesiser">Festival</a>, <a href="https://metacpan.org/pod/Speech::eSpeak">e-Speak</a>.  Perl is certainly not short of vocalising options. </p>

<h3>Pure Perl Implementation</h3>

<p>As an old simpleton, however, I can not drag myself away from the genius of the guys who with such limited resources managed so much, into the modern world were memory and processor power limitations are of no real issue.  The SP0256-AL2 is the centre of this remarkable primitive utility, and I took it myself to explore how this worked, to transform it into a simple module that can be imported into any Perl program, with no dependencies apart from a means to transfer data to a speaker.  There indeed many attempts to emulate this little chip, though I have not come across any that specifically use Perl, I do find resources including this one from <a href="https://github.com/greg-kennedy/p5-NRL-TextToPhoneme">Greg Kennedy</a> that allow translation to the allophones used here.</p>

<h3>Re-inventing the wheel?</h3>

<p>Why do things again that far cleverer people have already done, with far more advanced methods? For several reasons.  It helps me learn how things are done. Old methods are not going to be as good as new ones, but use far fewer resources, and this would allow quite a lightweight model for speech synthesis that could be embedded in simple applications and games.  This would not require any installation of any heavy weight back-ends, polluting the system with more and more infrequently used libraries.   So the "plan" is 1) produce a stand-alone speech synthesis module, 2) progressively make the module more accurate and more recognisable 3) eventually have something anyone can use for fun or for real-life needs.</p>

<p>Now I did make a <a href="https://github.com/saiftynet/piano">Piano-like monophonic player</a> (Enable the sound in the embedded video sample to hear), based on a memory of a similar utility I saw many years ago. Most web examples use /dev/dsp for audio transfer to the output device, but this virtual interface no longer exists.  A pipe to padsp does allow the emulation of /dev/dsp, and this is what I have used for Linux OS; Win32::Sound has a Windows equivalent of a sink for the raw audio data, as yet to be figured out.  Thus we have a <a href="https://github.com/saiftynet/SP0256">beginning of a module</a>:-</p>

<p><a href="https://user-images.githubusercontent.com/34284663/199564715-6f7166c4-04fb-4ff9-876b-60613887959c.webm">SP0256.webm</a></p>

<h3>Emulation</h3>

<p>The classic method for emulation of this chip appears (as far as I can tell) to be to record the sounds output from the chip, sampling at much higher frequencies than is output (effectively adding a high pass filter).  This results in errors and distortions.  Such converted data is available as WAV files, and do not have any of the analog filtering that is performed on the original chip, this is actually much lower in quality that the original.  But borrowing this data from various sources enables some semblance of a speech synthesiser, and my   <a href="https://github.com/saiftynet/SP0256/tree/main/SP0256/lib/Speech">experimental modulino</a> represents an early attempt at using unprocessed wave forms. But these wave forms are not only inaccurate and noisy compared to the sounds that came from my 40 year old ZX Spectrum, they take significantly more memory.  The unpacked data in a script took 1/2 MB and packed into a Storable file, still take just under 100kb.  Can't see my Speccy being too impressed.</p>

<h3>Missing the point</h3>

<p>BUT this simple way belies the cleverness of the original chip mode of operation.  To understand how this is managed in 2kb of ROM one has to explore the <a href="https://k1.spdns.de/Vintage/Sinclair/82/Peripherals/Currah%20uSpeech/Technical%20Information/">disassembly</a> of this ingenious device. Unlike modern speech synthesisers with banks of pre recorded audio allophones, the SP0256 actually appears to have built the output waveform on the fly <em>algorythmically</em>, much the same way as <a href="https://github.com/saiftynet/piano/blob/main/piano.pl">piano.pl</a> generates the raw tone data for each of 96 notes. I do need to pore through this code not that I am familiar with the ancient microprocessor (or assembly for that matter) to see how this actually works. It should be entirely possible to create an ultra-lightweight module capable of generating recognisable speech in Pure Perl <em>without</em> any external speech libraries.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 189:  Greater Character and Array Degree</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/11/perl-weekly-challenge-189-greater-character-and-array-degree.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10936</id>
    <published>2022-11-01T21:26:05Z</published>
    <updated>2022-11-01T21:30:02Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 189 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-189/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on November, 6, 2022 at 23:59). This blog post offers some solutions to this challenge. Please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Greater Character</h2>

<p><em>You are given an array of characters <code>(a..z)</code> and a target character.</em></p>

<p><em>Write a script to find out the smallest character in the given array lexicographically greater than the target character.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @array = qw/e m u g/, $target = 'b'
Output: e
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @array = qw/d c e f/, $target = 'a'
Output: c
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @array = qw/j a r/, $target = 'o'
Output: r
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: @array = qw/d c a f/, $target = 'a'
Output: c
</code></pre>

<p><em>Example 5</em></p>

<pre><code>Input: @array = qw/t g a l/, $target = 'v'
Output: v
</code></pre>

<p>Note that when the array has no item larger than the target value, the behavior is undefined. I do not think that the solution provided for the example 5 is valid. I prefer to state clearly that no solution was found. </p>

<h3>Greater Character in Raku</h3>

<p>The <code>greater-char</code> subroutine uses <code>grep</code> to build the list of characters lexicographically greater than the target value and returns the smallest one. The ability to use two (or more) loop variables (<code>$k</code> and <code>@test</code>) in a <code>for</code> pointy block is very practical here.</p>

<pre><code>sub greater-char ($target, @input) {
    return @input.grep({ $_ gt $target }).min;
}
for ('b', &lt;e m u g&gt;), ('a', &lt;d c e f&gt;), ('o', &lt;j a r&gt;),
    ('a', &lt;d c a f&gt;), ('v', &lt;t g a l&gt;)  -&gt;  ($k, @test) {
    say "$k, (@test[]) \t -&gt; ", greater-char($k, @test);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./greater-char.raku
b, (e m u g)     -&gt; e
a, (d c e f)     -&gt; c
o, (j a r)       -&gt; r
a, (d c a f)     -&gt; c
v, (t g a l)     -&gt; Nil
</code></pre>

<h3>Greater Character in Perl</h3>

<p>The <code>greater_char</code> subroutine uses <code>grep</code> to build the list of characters lexicographically greater than the target value and returns the smallest one. Here, we lazily use <code>sort</code> to find the smallest character of the list; this is not the best algorithmic method (and it might not be good for very long lists of characters), but it is the fastest to develop. Saving development time is sometimes better than saving a few CPU cycles.</p>

<p>In the event that the character lists were significantly longer, we could use a <code>min</code> subroutine such as this one developed for a previous Perl Weekly Challenge task:</p>

<pre><code>sub min {
    my $min = shift;
    for (@_) {
        $min = $_ if $_ lt $min;
    }
    return $min;
}
</code></pre>

<p>But this is not really needed here, so we use the built-in <code>sort</code> function.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub greater_char  {
    my @eligible_input = grep { $_ gt $_[0]} @{$_[1]};
    return (sort @eligible_input)[0];
}

for my $test (['b', [&lt;e m u g&gt;]], ['a', [&lt;d c e f&gt;]], 
    ['o', [&lt;j a r&gt;]], ['a', [&lt;d c a f&gt;]], ['v', [&lt;t g a l&gt;]]) {
    say "$test-&gt;[0] (@{$test-&gt;[1]}) \t -&gt; ", greater_char($test-&gt;[0], $test-&gt;[1]);
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl greater-char.pl
b (e m u g)      -&gt; e
a (d c e f)      -&gt; c
o (j a r)        -&gt; r
a (d c a f)      -&gt; c
v (t g a l)      -&gt;
</code></pre>

<h2>Task 2: Array Degree</h2>

<p><em>You are given an array of 2 or more non-negative integers.</em></p>

<p><em>Write a script to find out the smallest slice, i.e. contiguous subarray of the original array, having the degree of the given array.</em></p>

<p><em>> The degree of an array is the maximum frequency of an element in the array.</em></p>

<p><em>Example 1</em></p>

<pre><code>Input: @array = (1, 3, 3, 2)
Output: (3, 3)

The degree of the given array is 2.
The possible subarrays having the degree 2 are as below:
(3, 3)
(1, 3, 3)
(3, 3, 2)
(1, 3, 3, 2)

And the smallest of all is (3, 3).
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @array = (1, 2, 1, 3)
Output: (1, 2, 1)
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @array = (1, 3, 2, 1, 2)
Output: (2, 1, 2)
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: @array = (1, 1, 2, 3, 2)
Output: (1, 1)
</code></pre>

<p><em>Example 5</em></p>

<pre><code>Input: @array = (2, 1, 2, 1, 1)
Output: (1, 2, 1, 1)
</code></pre>

<p>The definition of the degree of an array doesn&#8217;t state what the degree should be when more than one element reaches the maximum frequency. In my implementations, I have changed examples 3 and 4 of the task specification to avoid the problem.</p>

<h3>Array Degree in Raku</h3>

<p>The <code>get-degree</code> subroutine builds an <code>%histogram</code> hash of input integers with their frequency, and returns the histogram key having the highest value. Then, the main part of the program uses twice the built-in <a href="https://docs.raku.org/routine/first">first</a> routine to find the first and last  occurrences of the computed degree in the input list.</p>

<pre><code>sub get-degree (@input) {
    my %histogram;
    %histogram{$_}++ for @input;
    return (%histogram.max({$_.value})).key;
}

for &lt;1 3 3 2&gt;, &lt;1 2 1 3&gt;, &lt;4 3 2 1 2&gt; ,
    &lt;1 1 2 3 4&gt;, &lt;2 1 2 1 1&gt; -&gt; @test {
    my $degree = get-degree(@test);
    my $start = @test.first: * == $degree, :k;
    my $end =   @test.first: * == $degree, :k :end;
    say "@test[] \t =&gt; @test[$start..$end]";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./array-degree.raku
1 3 3 2          =&gt; 3 3
1 2 1 3          =&gt; 1 2 1
4 3 2 1 2        =&gt; 2 1 2
1 1 2 3 4        =&gt; 1 1
2 1 2 1 1        =&gt; 1 2 1 1
</code></pre>

<h3>Array Degree in Perl</h3>

<p>The <code>get_degree</code> subroutine builds an histogram of input integers with their frequency, and returns the histogram key having the highest value. Note that, here again, we lazily use the built-in <code>sort</code> function to find the largest value. Please see my comment in the <em>Greater Character in Perl</em> section above about algorithmically better solutions. In the main part of the program, we just loop once over the list to find the first and last occurrences of the degree in the input list.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub get_degree {
    my %histo;  # histogram
    $histo{$_}++ for @_;
    return (sort { $histo{$b} &lt;=&gt; $histo{$a} } keys %histo)[0]
}

for my $test ([&lt;1 3 3 2&gt;], [&lt;1 2 1 3&gt;], 
    [&lt;4 3 2 1 2&gt;], [&lt;1 1 2 3 4&gt;], [&lt;2 1 2 1 1&gt;]) {
    my @list = @$test;
    my $degree = get_degree @list;
    my ($start, $end);
    for my $i (0..$#list) {
        if ($list[$i] == $degree) {
            $start = $i unless defined $start;
            $end = $i;
        }
    }
    say "@list \t =&gt; @list[$start..$end]";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./array-degree.pl
1 3 3 2          =&gt; 3 3
1 2 1 3          =&gt; 1 2 1
4 3 2 1 2        =&gt; 2 1 2
1 1 2 3 4        =&gt; 1 1
2 1 2 1 1        =&gt; 1 2 1 1
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on November 13, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) September 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_september_2022"/>
  <id>tag:news.perlfoundation.org,2022-11-01:/post/maintaining_perl_tonyc_september_2022</id>
  <published>2022-11-01T09:08:07</published>
  <updated>2022-11-01T09:08:07</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/09/01 Thursday  1.60 #20204 write up some tests, start on implementation  2.43 #20204 more work on implementation  4.03 2022/09/05 Monday  0.47 github notifications  0.55 #20143 research, comment  0.55 #17831 follow-up  0.50 #20207 review discussion, comment  1.72 #20204 more work on implementation  3.79 2022/09/06 Tuesday  0.15 review Coverity scan results and ask khw about it  0.40 github notifications 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/09/01      Thursday
 1.60           #20204 write up some tests, start on implementation</p>

<h1> 2.43           #20204 more work on implementation</h1>

<p>4.03</p>

<p>2022/09/05      Monday
 0.47           github notifications
 0.55           #20143 research, comment
 0.55           #17831 follow-up
 0.50           #20207 review discussion, comment</p>

<h1> 1.72           #20204 more work on implementation</h1>

<p>3.79</p>

<p>2022/09/06      Tuesday
 0.15           review Coverity scan results and ask khw about it
 0.40           github notifications
 0.60           #20189 write up a patch in branch 20189-setjmp, push for</p>

<h1>                CI</h1>

<p>1.15</p>

<p>2022/09/07      Wednesday
 0.17           #20189 look at CI failure, rebase, resubmit
 1.62           #20255 review discussion, testing, research, comment
 0.20           #20189 review CI results, make into PR 20264
 0.83           #20204 work on following the symlink chain
 3.10           #20204 testing, debugging, try to handle block devices too
                and fail, for now... (still need to do better symlink</p>

<h1>                chain tests)</h1>

<p>5.92</p>

<p>2022/09/08      Thursday
 0.23           review github notifications
 2.03           #20204 review CI results, test/debug/fix mingw failure,
                time for more tests, debugging, #20130 cleanup
 2.82           #20204 debug symlink following, debug strange result from</p>

<h1>                readlink, lrn2use readlink, fix issues, start full test</h1>

<p>5.08</p>

<p>2022/09/12      Monday
 1.05           github notifications
 1.02           #20204 look into CI failures, try to reproduce locally
 2.30           #20204 more try to reproduce, testing with DrMemory,
                repeated testing, restarting CI job (it mostly fails but
                occasionally succeeds)</p>

<h1> 0.65           #20128 review, research and briefly comment</h1>

<p>5.02</p>

<p>2022/09/13      Tuesday
 0.13           github notifications
 0.95           #20204 work on debugging code, can’t get unmodified code
                to fail in CI
 1.73           check if cygwin’s newlocale fix, fixed. Testing and</p>

<h1>                apparently it did fix, push for CI.</h1>

<p>2.81</p>

<p>2022/09/14      Wednesday
 0.05           cygwin: open PR 20299
 0.67           #20204 try to get it to fail again, local test to check if
                we can distinguish broken link from a missing file (we
                can’t in the initial CreateFileA)
 0.05           #20288 review and briefly comment</p>

<h1> 1.38           #20295 review logs and code, research and comment</h1>

<p>2.15</p>

<p>2022/09/15      Thursday
 1.27           github notifications
 1.03           look at moving lexical sub setup to pad setup time -
                research
 0.12           look at moving lexical sub setup to pad setup time -
                research
 1.13           #20204 fix missing SKIP:, modify win32_readlink() a bit,</p>

<h1>                testing, push</h1>

<p>3.55</p>

<p>2022/09/19      Monday
 1.10           #20271 review comments, comment
 1.20           #20310/#20180 review problem, proposed PR, comments
 0.18           #20314 review and approve
 0.08           #20315 review and approve
 0.35           #20199 fix a minor test issue
 0.27           #20199 re-word and expand commit message
 0.43           #20316 review and comments
 0.23           #20313 review and apply to blead
 0.20           #20312 review and apply to blead
 0.35           look into new build warnings, make pr 20318
 0.25           #20317 review and approve</p>

<h1> 0.17           #20311 review and comment</h1>

<p>4.81</p>

<p>2022/09/20      Tuesday
 0.28           #20322 review and comment
 0.70           #20311 follow-up
 0.73           look at coverity reported defect, work up fix and push for
                CI</p>

<h1> 0.07           check CI results and make PR 20323</h1>

<p>1.78</p>

<p>2022/09/21      Wednesday
 0.63           github notifications
 0.52           #20316 research, comment
 1.27           #20307 testing, debugging
 1.57           #20307 try to work out a test (existing tests don’t deal</p>

<h1>                with stdin)</h1>

<p>3.99</p>

<p>2022/09/22      Thursday
 0.50           github notifications
 1.28           #20307 re-work a bit, testing
 1.57           #20207 debug log4perl problem and make PR</p>

<h1>                https://github.com/mschilli/log4perl/pull/119</h1>

<p>3.35</p>

<p>2022/09/26      Monday
 0.17           github notifications
 0.40           #20307 rebase, retest and make PR #20351
 0.55           #20207 look into File::AptFetch failures
 1.58           #20207 work out the problem (error rather than eof unlike
                the other modules the original patch had an effect on),
                and supply a patch to the module
 0.22           #20350 review, research and comment
 1.02           #20344 review, get confused by macros, research, comment
 0.33           #19776 review, testing and comment
 0.18           #20329 review
 2.50           #16856 work through possible const fixes, find a</p>

<h1>                PL_splitstr bug and make PR #20352</h1>

<p>6.95</p>

<p>2022/09/27      Tuesday
 0.57           look at coverity reported defect and create PR 20353
 0.22           github notifications</p>

<h1> 0.28           #16856</h1>

<p>1.07</p>

<p>2022/09/28      Wednesday
 0.25           review mailing list discussion
 1.53           #20026 review, testing, comment
 3.32           #20291 / #20346 debugging failing modules (mostly
                BenchmarkAnything::Schema)</p>

<h1> 1.33           #20291 / #20346 debugging failing modules</h1>

<p>6.43</p>

<p>2022/09/29      Thursday
 0.37           github notifications
 0.13           #20344 review and approve
 0.58           read through RFC discussion
 0.38           #20355 review discussion and comment
 0.77           #20354 debugging</p>

<h1> 0.60           feature-class - review code, discussions</h1>

<p>2.83</p>

<p>2022/09/30      Friday
 0.22           comment on “not exists” thread
 0.33           look into current build warnings, only one, fix and push
                for CI
 0.40           fix preprocessor conditions for build warnin fix, testing
 0.45           #20354 debugging
 2.08           #20354 debugging, testing
 0.45           #20348 testing and comment</p>

<h1> 0.22           #20362 review discussion and T::HiRes Makefile.PL, comment</h1>

<p>4.15</p>

<p>Which I calculate is 68.86 hours.</p>

<p>Approximately 32 tickets were reviewed or worked on, and 2 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Dancer2: Skeleton</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-11-01T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-skeleton"/>  <id>https://perlmaven.com/dancer2-skeleton</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>List of new CPAN distributions – Oct 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/11/01/list-of-new-cpan-distributions-oct-2022/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AI-ParticleSwarmOptimization-MCE"&gt;AI-ParticleSwarmOptimization-MCE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STRZELEC"&gt;STRZELEC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;1.002&lt;/td&gt;
&lt;td&gt;Particle Swarm Optimization (object oriented) with support for multi-core processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/AI-ParticleSwarmOptimization-Pmap"&gt;AI-ParticleSwarmOptimization-Pmap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STRZELEC"&gt;STRZELEC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.000&lt;/td&gt;
&lt;td&gt;1.005&lt;/td&gt;
&lt;td&gt;Particle Swarm Optimization (object oriented) with support for multi-core processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-CPANModules-WorkingWithCSV"&gt;Acme-CPANModules-WorkingWithCSV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Working with CSV (comma-separated value) data in Perl&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-CPANModules-WorkingWithXLS"&gt;Acme-CPANModules-WorkingWithXLS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Working with Excel formats (XLS, XLSX) or other spreadsheet formats like LibreOffice Calc (ODS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-Color-Rust"&gt;Acme-Color-Rust&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Color example class using Rust + FFI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-Bazel"&gt;Alien-Bazel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WBRASWELL"&gt;WBRASWELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or build bazel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-CSFML"&gt;Alien-CSFML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SANKO"&gt;SANKO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.7&lt;/td&gt;
&lt;td&gt;Build and provide access to the official binding of SFML for the C language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-ghostunnel"&gt;Alien-ghostunnel&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Find or install ghostunnel TLS proxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-SeismicUnixGui"&gt;App-SeismicUnixGui&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GLLORE"&gt;GLLORE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.80.0&lt;/td&gt;
&lt;td&gt;v0.80.0&lt;/td&gt;
&lt;td&gt;A graphical user interface for Seismic Unix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-UniqUtils"&gt;App-UniqUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Utilities related to unique lines and/or Unix uniq utility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-WebSearchUtils"&gt;App-WebSearchUtils&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;CLI utilites related to searching with search engines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-Yabsm"&gt;App-Yabsm&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NHUBBARD"&gt;NHUBBARD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3.11&lt;/td&gt;
&lt;td&gt;3.14&lt;/td&gt;
&lt;td&gt;a btrfs snapshot and backup management system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-denomfind"&gt;App-denomfind&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.250&lt;/td&gt;
&lt;td&gt;0.313&lt;/td&gt;
&lt;td&gt;&amp;auml;&amp;cedil;&amp;#8249;&amp;egrave;&amp;uml;&amp;#732;&amp;atilde;&amp;reg;2&amp;aring;&amp;#8364;&amp;#8249;&amp;atilde;&amp;reg;&amp;atilde;&amp;#8218;&amp;sup3;&amp;atilde;&amp;#402;&amp;#382;&amp;atilde;&amp;#402;&amp;sup3;&amp;atilde;&amp;#402;&amp;#8240;&amp;atilde;&amp;uml;&amp;atilde;&amp;atilde;&amp;reg;&amp;aelig;&amp;copy;&amp;#376;&amp;egrave;&amp;#402;&amp;frac12;&amp;atilde;&amp;#8218;&amp;#8217;&amp;aelig;&amp;auml;&amp;frac34;&amp;#8250;&amp;atilde;&amp;#8482;&amp;atilde;&amp;#8218;&amp;#8249;&amp;atilde;&amp;#8364;&amp;#8218;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-expskip"&gt;App-expskip&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.113&lt;/td&gt;
&lt;td&gt;0.113&lt;/td&gt;
&lt;td&gt;To see a large text file, 1st, 10th, 100th, 1000th .. lines are shown to see fewer lines. Output lines can be specifed by the options.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-ipchgmon"&gt;App-ipchgmon&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAVIES"&gt;DAVIES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.0.0&lt;/td&gt;
&lt;td&gt;1.0.6&lt;/td&gt;
&lt;td&gt;Watches for changes to public facing IP addresses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-numero2bgc"&gt;App-numero2bgc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;td&gt;0.021&lt;/td&gt;
&lt;td&gt;Put colors on the background of each number from input text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-remotediff"&gt;App-remotediff&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KALDOR"&gt;KALDOR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.10&lt;/td&gt;
&lt;td&gt;1.10&lt;/td&gt;
&lt;td&gt;remote diff over rsync&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/ArrayData-Lingua-Word-EN-Medical-Glutanimate"&gt;ArrayData-Lingua-Word-EN-Medical-Glutanimate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;Medical word list (English)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Author-Daemon-Site-Ptr-Bond"&gt;Author-Daemon-Site-Ptr-Bond&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAEMON"&gt;DAEMON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.008&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/BmltClient-ApiClient"&gt;BmltClient-ApiClient&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BMLT"&gt;BMLT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;a Moose role for the BMLT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Chemistry-File-OPTIMADE"&gt;Chemistry-File-OPTIMADE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MERKYS"&gt;MERKYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;0.11&lt;/td&gt;
&lt;td&gt;OPTIMADE reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron"&gt;CryptoTron&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.08&lt;/td&gt;
&lt;td&gt;Perl extension for blah blah blah&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-GetAccountJsonStr"&gt;CryptoTron-GetAccountJsonStr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Perl extension for use with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-GetAccount_JsonStr"&gt;CryptoTron-GetAccount_JsonStr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Perl extension for use with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-JsonHttp"&gt;CryptoTron-JsonHttp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Perl extension for use of with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CryptoTron-JsonRpc"&gt;CryptoTron-JsonRpc&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;Perl extension for use with the Tron blockchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DB-SimpleKV"&gt;DB-SimpleKV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/YHPENG"&gt;YHPENG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Simple k/v interface to text configuration file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/DBIx-Class-ResultClass-TrackColumns"&gt;DBIx-Class-ResultClass-TrackColumns&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001001&lt;/td&gt;
&lt;td&gt;0.001001&lt;/td&gt;
&lt;td&gt;Track changed columns original storage value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-RPC-RESTISH"&gt;Dancer2-Plugin-RPC-RESTISH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.01_02&lt;/td&gt;
&lt;td&gt;2.02&lt;/td&gt;
&lt;td&gt;Helper Test module that imports useful stuff.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Combination"&gt;Data-Combination&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DRCLAW"&gt;DRCLAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Hash and Array element combination generator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Commons-Image"&gt;Data-Commons-Image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Data object for Wikimedia Commons image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Image"&gt;Data-Image&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Data object for image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Page-Nav"&gt;Data-Page-Nav&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LUCAS"&gt;LUCAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Module for pages navigation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-Validate-OpenAPI"&gt;Data-Validate-OpenAPI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MERKYS"&gt;MERKYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;0.1.0&lt;/td&gt;
&lt;td&gt;Validate and untaint input parameters via OpenAPI schema&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Devel-DieHandler-DumpDieArgs"&gt;Devel-DieHandler-DumpDieArgs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Dump content of die arguments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Device-Serial-SLuRM"&gt;Device-Serial-SLuRM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;communicate the SL&amp;Atilde;&amp;#8218;&amp;Acirc;&amp;micro;RM protocol over a serial port&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Exception-FFI-ErrorCode"&gt;Exception-FFI-ErrorCode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Exception class based on integer error codes common in C code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FFI-Platypus-Lang-Zig"&gt;FFI-Platypus-Lang-Zig&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Documentation and tools for using Platypus with the Zig programming language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Filesys-Notify-Win32-ReadDirectoryChanges"&gt;Filesys-Notify-Win32-ReadDirectoryChanges&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CORION"&gt;CORION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;read/watch directory changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Finance-Exchange"&gt;Finance-Exchange&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;represents a financial stock exchange object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Finance-MIFIR-CONCAT"&gt;Finance-MIFIR-CONCAT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;provides CONCAT code generation out of client data according to MIFIR rules&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Finance-YieldCurve"&gt;Finance-YieldCurve&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Handles interpolation on yield curves for interest rates and dividends&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Format-JSON-Stream"&gt;Format-JSON-Stream&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;a stream of JSON data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Future-Queue"&gt;Future-Queue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.49&lt;/td&gt;
&lt;td&gt;0.49&lt;/td&gt;
&lt;td&gt;a FIFO queue of values that uses Futures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GFX-Tools"&gt;GFX-Tools&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.12&lt;/td&gt;
&lt;td&gt;v0.1.12&lt;/td&gt;
&lt;td&gt;several command line graphics tools&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/GFX-Tools-Buffer"&gt;GFX-Tools-Buffer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.8&lt;/td&gt;
&lt;td&gt;v0.1.8&lt;/td&gt;
&lt;td&gt;array code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Game-NURBS"&gt;Game-NURBS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;v0.1.13&lt;/td&gt;
&lt;td&gt;Perl extension for manipulating NURBS curves&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Game-Ninja"&gt;Game-Ninja&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.4&lt;/td&gt;
&lt;td&gt;v0.1.6&lt;/td&gt;
&lt;td&gt;Perl extension for making ninja games, e.g. beat &amp;#039;em ups like Double Dragon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Game-SDL"&gt;Game-SDL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;v0.1.1&lt;/td&gt;
&lt;td&gt;Perl extension for making games with SDL(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Geo-TCX"&gt;Geo-TCX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PATJOL"&gt;PATJOL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;Parse and edit and TCX activity and course files from GPS training devices&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Graphics-ColorNames-Pantone"&gt;Graphics-ColorNames-Pantone&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LICHTKIND"&gt;LICHTKIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.50&lt;/td&gt;
&lt;td&gt;0.54&lt;/td&gt;
&lt;td&gt;RGB values of Pantone colors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Graphics-Toolkit-Color"&gt;Graphics-Toolkit-Color&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LICHTKIND"&gt;LICHTKIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.99_0&lt;/td&gt;
&lt;td&gt;1.02&lt;/td&gt;
&lt;td&gt;color palette creation tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/IO-FD"&gt;IO-FD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DRCLAW"&gt;DRCLAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.2&lt;/td&gt;
&lt;td&gt;faster accept, socket, listen, read, write and friends with file descriptors, not handles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/LWP-Protocol-clipboard"&gt;LWP-Protocol-clipboard&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Get/set clipboard content through LWP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Lilith"&gt;Lilith&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;Work with Suricata/Sagan EVE logs and PostgreSQL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Math-Numerical"&gt;Math-Numerical&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MATHIAS"&gt;MATHIAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Algorithms for numerical functions (root findings, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Memcached-RateLimit"&gt;Memcached-RateLimit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Sliding window rate limiting with Memcached&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-Log-Role-Format"&gt;Mojo-Log-Role-Format&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Add sprintf logging to Mojo::Log&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-ShareDir"&gt;Mojo-ShareDir&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Shared files and directories as Mojo::File objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Tag-TO_HASH"&gt;MooX-Tag-TO_HASH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Controlled translation of Moo objects into Hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooseX-Types-Parameterized"&gt;MooseX-Types-Parameterized&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;td&gt;0.09&lt;/td&gt;
&lt;td&gt;Create your own Parameterizable Types for Moose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Net-Gemini"&gt;Net-Gemini&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;a small gemini client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Org-To-ANSIText"&gt;Org-To-ANSIText&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Export Org document to text with ANSI color codes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Parse-H"&gt;Parse-H&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BOGDRO"&gt;BOGDRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;0.11&lt;/td&gt;
&lt;td&gt;A parser for C header files that calls the given subroutines when a symbol of a specified type is encountered.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Pg-SQL-PrettyPrinter"&gt;Pg-SQL-PrettyPrinter&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEPESZ"&gt;DEPESZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;Pretty printer for SQL queries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/REFECO-Blockchain-Contract-Solidity-ABI-Encoder"&gt;REFECO-Blockchain-Contract-Solidity-ABI-Encoder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/REFECO"&gt;REFECO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Contract Application Binary Interface argument encoder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RF-Component"&gt;RF-Component&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.001&lt;/td&gt;
&lt;td&gt;1.001&lt;/td&gt;
&lt;td&gt;Compose RF component circuits and calculate values from objects (L, C, ESR, etc).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Sah-Schemas-Data-Sah"&gt;Sah-Schemas-Data-Sah&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Sah schemas related to Data::Sah&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Shell-Var-Reader"&gt;Shell-Var-Reader&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;Runs a sh or bash script and returns the variables that have been set as well as their values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SpecioX-XS"&gt;SpecioX-XS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;speed boost for Specio using Type::Tiny::XS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/TableDataBundle-Business-ID-BPOM"&gt;TableDataBundle-Business-ID-BPOM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20221027.0.0&lt;/td&gt;
&lt;td&gt;20221027.0.0&lt;/td&gt;
&lt;td&gt;Collection of TableData:: modules related to Indonesia&amp;#039;s BPOM (Badan Pengawas Obat dan Makanan, or the National Agency or Drug and Food Control)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Tags-HTML-Image-Grid"&gt;Tags-HTML-Image-Grid&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Tags helper class for image grid.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Test-Spy"&gt;Test-Spy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BRTASTIC"&gt;BRTASTIC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;build mocked interfaces and examine call data easily&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Test2-Tools-Rustfmt"&gt;Test2-Tools-Rustfmt&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;Test that bundled Rust code is formatted according to Rust style guidelines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebFetch-RSS"&gt;WebFetch-RSS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/IKLUFT"&gt;IKLUFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.3.0&lt;/td&gt;
&lt;td&gt;0.3.0&lt;/td&gt;
&lt;td&gt;compatibility mode to access WebFetch::RSS under its previous name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebService-MyJSONs"&gt;WebService-MyJSONs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/POLETTIX"&gt;POLETTIX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Perl SDK to consume the MyJSONs web service&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Wikibase-API"&gt;Wikibase-API&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Wikibase API class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Wikibase-Datatype-Print"&gt;Wikibase-Datatype-Print&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Wikibase data types print.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WordList-EN-Medical-Glutanimate"&gt;WordList-EN-Medical-Glutanimate&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;20220727.0.0&lt;/td&gt;
&lt;td&gt;Medical word list (English)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/YAML-yq-Helper"&gt;YAML-yq-Helper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;Wrapper for yq for various common tasks so YAML files can be manipulated in a manner to preserve comments and version header.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/pEFL"&gt;pEFL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLMAX"&gt;PERLMAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;0.7&lt;/td&gt;
&lt;td&gt;Perl bindings for the Enlightenment Foundation Libraries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/sms-send-in-nicsms"&gt;sms-send-in-nicsms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INDRADG"&gt;INDRADG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;Regional context SMS::Send driver to send messages via NIC&amp;#039;s SMS Gateway ( &lt;a href="https://smsgw.sms.gov.in" rel="nofollow"&gt;https://smsgw.sms.gov.in&lt;/a&gt; )&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;82&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;42&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PLICEASE"&gt;PLICEASE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SKIM"&gt;SKIM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KOBOLDWIZ"&gt;KOBOLDWIZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZTENRETEP"&gt;ZTENRETEP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DERIV"&gt;DERIV&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TULAMILI"&gt;TULAMILI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JJNAPIORK"&gt;JJNAPIORK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DRCLAW"&gt;DRCLAW&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LICHTKIND"&gt;LICHTKIND&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MERKYS"&gt;MERKYS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/STRZELEC"&gt;STRZELEC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAVIES"&gt;DAVIES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MATHIAS"&gt;MATHIAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SHLOMIF"&gt;SHLOMIF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SANKO"&gt;SANKO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BMLT"&gt;BMLT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/YHPENG"&gt;YHPENG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/NHUBBARD"&gt;NHUBBARD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GLLORE"&gt;GLLORE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CORION"&gt;CORION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LUCAS"&gt;LUCAS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KALDOR"&gt;KALDOR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WBRASWELL"&gt;WBRASWELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEPESZ"&gt;DEPESZ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ABELTJE"&gt;ABELTJE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DAEMON"&gt;DAEMON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INDRADG"&gt;INDRADG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BOGDRO"&gt;BOGDRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/POLETTIX"&gt;POLETTIX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BRTASTIC"&gt;BRTASTIC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PATJOL"&gt;PATJOL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/REFECO"&gt;REFECO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLMAX"&gt;PERLMAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/IKLUFT"&gt;IKLUFT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract AI-ParticleSwarmOptimization-MCE STRZELEC 1.000 1.002 Particle Swarm Optimization (object oriented) with support for multi-core processing AI-ParticleSwarmOptimization-Pmap STRZELEC 1.000 1.005 Particle Swarm Optimization (object oriented) with support for multi-core processing Acme-CPANModules-WorkingWithCSV PERLANCAR 0.001 0.001 Working with CSV (comma-separated value) data in Perl Acme-CPANModules-WorkingWithXLS PERLANCAR 0.001 0.001 Working with Excel formats (XLS, XLSX) … <a href="https://perlancar.wordpress.com/2022/11/01/list-of-new-cpan-distributions-oct-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Oct 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=2000</id>
    <published>2022-11-01T00:12:26Z</published>
    <updated>2022-11-01T00:12:26Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#588 - TRPF, what’s in a name?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/588.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Few days ago, I came across the <a href="https://news.perlfoundation.org/post/announcements">official announcement</a> with regard to the name change. I saw mixed reaction on Facebook groups for <strong>Perl</strong> fans.</p>
<p><strong>So what is my (personal) view on the topic?</strong></p>
<p>I understand name change is not an easy decision, it must have been going on for days if not months. My view is to keep <strong>Perl</strong> and <strong>Raku</strong> separate. Having said, I like the name change at least it is better than what it was before. Since we are talking about name change, my suggestion is why not change it back to <strong>"Yet Another Society (YAS)"</strong> as it was before if I am not mistaken. Then have two separate board under its wings i.e. <strong>"The Perl Foundation (TPF)"</strong> and <strong>"The Raku Foundation (TRF)"</strong>. Also allow the individual board to decide the path they want to follow. This way we don't cross each others path and stay friendly. It sounds simple, isn't it? Not sure if it is easy to implement.</p>
<p>This name change brought back memories when I decided to change the name <strong>Perl Weekly Challenge</strong>. As you all know, right from day one, we decided to have both <strong>Perl</strong> and <strong>Raku</strong> as the main contributing languages. A few months later after the launch, I found the name not reflecting what actual happens on the ground. But I already had the domain <strong>perlweeklychallenge.org</strong> registered and all the actions were happening under the same domain. After discussing with some of my close friends, I decided to change it to a new domain, <strong>theweeklychallenge.org</strong>. To me, it makes more sense as we gradually opened up to many more languages, <strong>92</strong> to be precise as of today. It wasn't an easy decision for me to change the name and move everything to new domain. <strong>Gabor Szabo</strong> helped me with the domain switch and patch the old domain to divert trafic to the new domain. Everthing seems to be stable now but I still refer the team as <strong>Team PWC</strong> as it is very close to my heart.</p>
<p><strong>How was your experience with Hacktoberfest 2022?</strong></p>
<p>My contributions this time didn't meet the minimum requirement of the event. Although I submitted <strong>4 Pull Requests</strong> and all of them were accepted and merged by the author but only <strong>2 PR</strong> were counted as the other two PR were part of non-participating repositories. Having said, I am happy many of the <strong>Team PWC</strong> members got more than <strong>4 Pull Requests</strong> this time. Congratulations <strong>Team PWC</strong>.</p>
<p>If you want to have fun and share your knowledge every week with others then please do join us here on <a href="https://theweeklychallenge.org">The Weekly Challenge</a>. Also please don't forget to checkout the experience of our <a href="https://theweeklychallenge.org/champions">champions</a>.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/588.html</id>
    <published>2022-10-31T10:00:00Z</published>
    <updated>2022-10-31T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>On the Perl and Raku Foundation</title>
    <link rel="alternate" href="https://dev.to/lizmat/on-the-perl-and-raku-foundation-d75" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>The <a href="https://news.perlfoundation.org/post/announcements">announcement</a> of a change of name of "The Perl Foundation" to the "The Perl and Raku Foundation" left me feeling puzzled, and I should say disappointed.</p>

<p>Fortunately, after the <a href="https://github.com/Raku/Raku-Steering-Council/blob/main/minutes/20221029.md#rsc-meeting-2022-10-29">last Raku Steering Council meeting</a>, it became clear that my disappointment was unwarranted.  And that my (and probably a lot of other people's) puzzlement was caused by poor wording of the announcement, <strong>not</strong> by what it was trying to convey.</p>

<h2>
  
  
  A little history
</h2>

<p>But before we go on, a little history is in order:</p>

<p>During the mid 1990's, O'Reilly started organizing a yearly "Perl Conference".  Over the years, this morphed into "<strong>OS</strong>CON" focusing on <strong>O</strong>pen <strong>So</strong>urce in general, rather than being just about Perl.  And it became actually quite expensive to attend.</p>

<p>By the end of the 1990's, a group of people decided that it was time to have a proper Perl conference again, being as cheap as possible, organised by local Perl groups.  These conferences became known as "Yet Another Perl Conference" or "YAPC".  The reason that it couldn't be just called "The Perl Conference", was that O'Reilly had the rights to that name, or was at least perceived to have that right.</p>

<p>In order to support people organizing YAPC's in the United States, a foundation was created by the name of "Yet Another Society" (aka "YAS").  Over the years, this foundation added a "doing business as" (aka "dba", also known as "trade name") registration with the name "The Perl Foundation".  And it is mostly known by <em>that</em> name nowadays, rather than its officially business name "Yet Another Society".</p>

<p>As such, The Perl Foundation (aka "TPF") has been supporting Perl (both 5 and 6) over <em>many</em> years already.  But under the hood, it was really "YAS" doing the support.</p>

<h2>
  
  
  Consequences of rename of Perl 6
</h2>

<p>When Perl 6 was renamed to "The Raku Programming Language" in 2019, the consequences of that rename were discussed by yours truly with the then treasurer of YAS.  The conclusion of this discussion was that it would be best to create <em>another</em> "dba" for YAS, called "The Raku Foundation".  This would offer both Perl and Raku communities their own foundation in any Public Relations efforts.  And as such, reduce the misconceptions that people might have about the relationship between Perl and Raku going forward in time.</p>

<p>Unfortunately, it took until the summer of 2022 for this "doing business as" to be finally registered.  So now, YAS is known as "The Perl Foundation", but also as "The Raku Foundation".  With the possibility of creating separate websites geared towards different audiences.</p>

<h2>
  
  
  Rewording the announcement
</h2>

<p>The announcement read as follows:</p>

<blockquote>
<p>The Perl Foundation operates as a nonprofit dedicated to supporting the advancement of the Perl and Raku programming languages. One way The Perl Foundation supports Perl and Raku is through grants. The Perl Foundation has had donations given specifically for both languages. As such, it is important to recognize the relationship the foundation has with not just Perl, but also Raku. This is why, following a vote from the board, The Perl Foundation will now be using a new name, The Perl and Raku Foundation (TPRF), where this is appropriate.</p>
</blockquote>

<p>Now, knowing the background, the following rewording may make it clearer what was actually meant:</p>

<p>"Yet Another Society (aka YAS, of which The Perl Foundation is a "doing business as") operates as a nonprofit dedicated to supporting the advancement of the Perl and Raku programming languages. One way Yet Another Society supports Perl and Raku is through grants. Yet Another Society has had donations given specifically for both languages. As such, it is important to recognize the relationship the foundation has with not just Perl, but also Raku. This is why, following a vote from the board, YAS will be registering a new "doing business as" called "The Perl And Raku Foundation".  And will now be using "The Perl and Raku Foundation" (aka TPRF), where this is appropriate in the future."</p>

<h2>
  
  
  Final words
</h2>

<p>I would like to thank <em>all</em> on the TPRF board for their work for the Perl and Raku Programming Languages.  Specifically I would like to thank <em>Daniel Sockwell</em> for clearing up my puzzlement.  Now let's move this forward!</p>

</div>
    </content>
    <author>
      <name>Elizabeth Mattijsen</name>
    </author>
    <id>https://dev.to/lizmat/on-the-perl-and-raku-foundation-d75</id>
    <published>2022-10-31T08:45:27Z</published>
    <updated>2022-10-31T08:45:27Z</updated>
    <category term="perl"/>
    <category term="raku"/>
    <category term="board"/>
    <category term="foundation"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 188</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-188/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-188/</id>
    <published>2022-10-31T00:00:00Z</published>
    <updated>2022-10-31T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 189</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-189/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Greater Character 10. TASK #2: Array Degree HEADLINES  Welcome to the Week #189 of The Weekly Challenge.
Two new members, Vamsi Meenavilli and Andrew Grangaard joined the Team PWC last week. With this we now have 275 members in the Team PWC.
Thanks Vamsi for your first contributions in Perl and Python.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-189/</id>
    <published>2022-10-31T00:00:00Z</published>
    <updated>2022-10-31T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 188:  Divisible Pairs and Total Zero</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/10/perl-weekly-challenge-188-divisible-pairs-and-total-zero.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10934</id>
    <published>2022-10-30T23:30:30Z</published>
    <updated>2022-10-30T23:32:18Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 188 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-188/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Divisible Pairs</h2>

<p><em>You are given list of integers <code>@list</code> of size <code>$n</code> and divisor <code>$k</code>.</em></p>

<p><em>Write a script to find out count of pairs in the given list that satisfies the following rules.</em></p>

<pre><code>The pair (i, j) is eligible if and only if
a) 0 &lt;= i &lt; j &lt; len(list)
b) list[i] + list[j] is divisible by k
</code></pre>

<p><em>Example 1</em></p>

<pre><code>Input: @list = (4, 5, 1, 6), $k = 2
Output: 2
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: @list = (1, 2, 3, 4), $k = 2
Output: 2
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: @list = (1, 3, 4, 5), $k = 3
Output: 2
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: @list = (5, 1, 2, 3), $k = 4
Output: 2
</code></pre>

<p><em>Example 5</em></p>

<pre><code>Input: @list = (7, 2, 4, 5), $k = 4
Output: 1
</code></pre>

<h3>Divisible Pairs in Raku</h3>

<p>We use 2-item <a href="https://docs.raku.org/routine/combinations">combinations</a> of indice between 0 and the index of the last item of the list to satisfy rule (a). Then we increment <code>$count</code> if the sum of the two items is divisible by the input divisor.</p>

<pre><code>for (2, &lt;4 5 1 6&gt;), (2, &lt;1 2 3 4&gt;),
    (3, &lt;1 3 4 5&gt;), (4, &lt;5 1 2 3&gt;),
    (4, &lt;7 2 4 5&gt;), (2, &lt; 1 2 3 4 5 6 7 &gt;)
        -&gt; ($k, @test) {
    my $count = 0;
    for (0..@test.end).combinations(2) -&gt; @comb {
        $count++ if (@test[@comb[0]] + @test[@comb[1]]) %% $k;
    }
    say "$k  (@test[])  -&gt; ", $count;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./divisible-pairs.raku
2  (4 5 1 6)  -&gt; 2
2  (1 2 3 4)  -&gt; 2
3  (1 3 4 5)  -&gt; 2
4  (5 1 2 3)  -&gt; 2
4  (7 2 4 5)  -&gt; 1
2  (1 2 3 4 5 6 7)  -&gt; 9
</code></pre>

<h3>Divisible Pairs in Perl</h3>

<p>This is essentially the same approach as the Raku program above, except that we generate the combinations with two nested <code>for</code> loops.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ([2, [&lt;4 5 1 6&gt;]], [2, [&lt;1 2 3 4&gt;]],
    [3, [&lt;1 3 4 5&gt;]], [4, [&lt;5 1 2 3&gt;]],
    [4, [&lt;7 2 4 5&gt;]], [2, [&lt; 1 2 3 4 5 6 7 &gt;]]) {
    my $k = $test-&gt;[0];
    my @list = @{$test-&gt;[1]};
    my $count = 0;
    for my $i (0..$#list) {
        for my $j (($i+1) .. $#list) {
            ++$count if ($list[$i] + $list[$j]) % $k == 0;
        }
    }   
    say "$k  (@list)  -&gt; ", $count;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./divisible-pairs.pl
2  (4 5 1 6)  -&gt; 2
2  (1 2 3 4)  -&gt; 2
3  (1 3 4 5)  -&gt; 2
4  (5 1 2 3)  -&gt; 2
4  (7 2 4 5)  -&gt; 1
2  (1 2 3 4 5 6 7)  -&gt; 9
</code></pre>

<h2>Task 2: Total Zero</h2>

<p><em>You are given two positive integers <code>$x</code> and <code>$y</code>.</em></p>

<p><em>Write a script to find out the number of operations needed to make both ZERO. Each operation is made up either of the followings:</em></p>

<pre><code>$x = $x - $y if $x &gt;= $y

or

$y = $y - $x if $y &gt;= $x (using the original value of $x)
</code></pre>

<p><em>Example 1</em></p>

<pre><code>Input: $x = 5, $y = 4
Output: 5
</code></pre>

<p><em>Example 2</em></p>

<pre><code>Input: $x = 4, $y = 6
Output: 3
</code></pre>

<p><em>Example 3</em></p>

<pre><code>Input: $x = 2, $y = 5
Output: 4
</code></pre>

<p><em>Example 4</em></p>

<pre><code>Input: $x = 3, $y = 1
Output: 3
</code></pre>

<p><em>Example 5</em></p>

<pre><code>Input: $x = 7, $y = 4
Output: 5
</code></pre>

<p>This problem could certainly be solved with simple mathematical analysis, but I suspect we might end up with enough edge cases to make the program more complicated than a simple brute-force approach, i.e. iteratively computing the successive values of <code>$x</code> and <code>$y</code>.</p>

<h3>Total Zero in Raku</h3>

<pre><code>sub to-zero ($x, $y) {
    return $x &gt;= $y ?? ($x - $y, $y) !! ($x, $y - $x);
}

for &lt;5 4&gt;, &lt;4 6&gt;, &lt;2 5&gt;, &lt;3 1&gt;, &lt;7 4&gt;, &lt;9 1&gt; -&gt; @test {
    my ($x, $y) = @test;
    my $count = 0;
    while ($x and $y ) {
        ($x, $y) = to-zero $x, $y;
        $count++;
    }
    say "@test[] -&gt; $count";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./total-zero.raku
5 4 -&gt; 5
4 6 -&gt; 3
2 5 -&gt; 4
3 1 -&gt; 3
7 4 -&gt; 5
9 1 -&gt; 9
</code></pre>

<h3>Total Zero in Perl</h3>

<p>This a port to Perl of the Raku program above.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

sub to_zero  {
    my ($x, $y) = @_;
    return $x &gt;= $y ? ($x - $y, $y) : ($x, $y - $x);
}

for my $test ([5, 4], [4, 6], [2, 5], [3, 1], [7, 4], [9, 1]) {
    my ($x, $y) = @$test;
    my $count = 0;
    while ($x and $y ) {
        ($x, $y) = to_zero $x, $y;
        $count++;
    }
    say "@$test -&gt; $count";
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./total-zero.pl
5 4 -&gt; 5
4 6 -&gt; 3
2 5 -&gt; 4
3 1 -&gt; 3
7 4 -&gt; 5
9 1 -&gt; 9
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on November 6, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Pairs Divided by Zero</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/10/30#pwc188" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given list of integers @list of size $n and divisor $k. Write a script to 
find out count of pairs in the given list that satisfies a set of rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub divisible_pairs{
    my($numbers, $k) = @_;
    my @pairs;
    for my $i (0 .. @{$numbers} - 1){
        for my $j ($i + 1 .. @{$numbers} - 1){
            push @pairs, [$i, $j] if(($numbers-&gt;[$i] + $numbers-&gt;[$j]) % $k == 0);
        }
    }
    return @pairs;
}

MAIN:{
    my @pairs;
    @pairs = divisible_pairs([4, 5, 1, 6], 2);
    print @pairs . "\n";
    @pairs = divisible_pairs([1, 2, 3, 4], 2);
    print @pairs . "\n";
    @pairs = divisible_pairs([1, 3, 4, 5], 3);
    print @pairs . "\n";
    @pairs = divisible_pairs([5, 1, 2, 3], 4);
    print @pairs . "\n";
    @pairs = divisible_pairs([7, 2, 4, 5], 4);
    print @pairs . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
2
2
2
2
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The rules, if not clear from the above code are : the pair (i, j) is eligible if and only 
if&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;0 &amp;lt;= i &amp;lt; j &amp;lt; len(list)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list[i] + list[j] is divisible by k&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While certainly possible to develop a more complicated looking solution using &lt;code&gt;map&lt;/code&gt; and 
&lt;code&gt;grep&lt;/code&gt; I found myself going with nested &lt;code&gt;for&lt;/code&gt; loops. The construction of the loop indices 
takes care of the first condition and the second is straightforward.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive integers $x and $y. Write a script to find out the number of 
operations needed to make both ZERO.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub count_zero{
    my($x, $y) = @_;
    my $count = 0;
    {
        my $x_original = $x;
        $x = $x - $y if $x &gt;= $y;
        $y = $y - $x_original if $y &gt;= $x_original;
        $count++;
        redo unless $x == 0 &amp;&amp; $y == 0;
    }
    return $count;
}

MAIN:{
    say count_zero(5, 4);
    say count_zero(4, 6);
    say count_zero(2, 5);
    say count_zero(3, 1);
    say count_zero(7, 4);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
5
3
4
3
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The operations are dictated by these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$x = $x - $y if $x &amp;gt;= $y&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$y = $y - $x if $y &amp;gt;= $x (using the original value of $x)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This problem seemed somewhat confusingly stated at first. I had to work through the first
given example &lt;a href="https://discord.com/channels/860900767665487872/860900767665487877/1036365182093496531"&gt;by hand&lt;/a&gt; 
to make sure I really understood what was going on. &lt;/p&gt;

&lt;p&gt;After a little analysis I realized this is not as confusing as I first thought. The main
problem I ran into was not properly accounting for the changed value of &lt;code&gt;$x&lt;/code&gt; using a 
temporary variable &lt;code&gt;$x_original&lt;/code&gt;. If you see my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2022/10/23"&gt;Prolog Solutions&lt;/a&gt; for this 
problem you can see how Prolog's immutable variables obviate this issue!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-188/"&gt;Challenge 188&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc188</id>
    <published>2022-10-30T19:24:00-04:00</published>
    <updated>2022-10-30T19:24:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Hello and welcome!</title>
    <link rel="alternate" href="http://blogs.perl.org/users/marisag/2022/10/hello-and-welcome.html"/>
    <id>tag:blogs.perl.org,2022:/users/marisag//4201.10933</id>
    <published>2022-10-30T11:16:02Z</published>
    <updated>2022-10-30T11:59:20Z</updated>
    <author>
        <name>MarisaG</name>
        <uri>https://perl.retro-os.live</uri>
    </author>
    <category term="myfansite" label="my fan site" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="welcome" label="welcome" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/marisag/">
        <![CDATA[<p>Perl is my all-time favorite language, and I have been using it since it was released. But I just now decided to create a website for it to share and curate Perl content with other fans. You can check out the <a href="https://perl.retro-os.live">website &amp; community</a> here. Would love to have you join us!</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Weekly Challenge 188</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-188-3477" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-188/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-188/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: Divisible Pairs
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given list of integers <code>@list</code> of size <code>$n</code> and divisor <code>$k</code>.</p>

<p>Write a script to find out count of pairs in the given list that satisfies the following rules.</p>

<p>The pair (i, j) is eligible if and only if</p>

<ol>
<li><code>0 &lt;= i &lt; j &lt; len(list)</code></li>
<li>
<code>list[i] + list[j]</code> is divisible by <code>k</code>.</li>
</ol>

<h3>
  
  
  My solution
</h3>

<p>This seems relatively straight forward. As list is a reserved word in Python, I used <code>nums</code> for the Python version. For this I start with the value of <code>matches</code> as zero. I take the last number off the input using the pop function, and store that as <code>k</code>.</p>

<p>For the <code>i</code> iterator, I start at zero and finish at the second last number. For the <code>j</code> iterator, I start at <code>i+1</code> and end at the last position. I increase <code>matches</code> if the numbers at the relevant position is divisible by <code>k</code>. And then print the result.</p>

<p>I know some clever eggs are going to use map, which is probably going to be a little faster. In the case of these challenges, some times I'll make code easier to understand over speed.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 4 5 1 6 2
2

<span class="nv">$ </span>./ch-1.py 1 2 3 4 2
2

<span class="nv">$ </span>./ch-1.py 1 3 4 5 3
2

<span class="nv">$ </span>./ch-1.py 5 1 2 3 4
2

<span class="nv">$ </span>./ch-1.py 7 2 4 5 4
1
</code></pre>

</div>



<h2>
  
  
  Task 2: Total Zero
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given two positive integers <code>$x</code> and <code>$y</code>.</p>

<p>Write a script to find out the number of operations needed to make both ZERO. Each operation is made up either of the followings:</p>

<ul>
<li>
<code>$x = $x - $y</code> if <code>$x &gt;= $y</code>
</li>
<li>
<code>$y = $y - $x</code> if <code>$y &gt;= $x</code> (using the original value of <code>$x</code>)</li>
</ul>

<h3>
  
  
  My solution
</h3>

<p>The hardest part of this challenge was understanding what was required. In particular 'using the original value of $x'. I took this to mean the value of $x that was provided, but it became clear that it meant $x at this particular iteration.</p>

<p>With that out of the way, the code become straight forward. I have a value called <code>count</code> starting at 0, and a loop that continues until both <code>x</code> and <code>y</code> is 0.</p>

<p>For each iteration, I add one to the <code>count</code> value. If <code>x</code> is greater, I take <code>y</code> of it, likewise if <code>y</code> is grexater I take <code>x</code> off it. If <code>x</code> and <code>y</code> are the same, I set them both to zero, as we know that taking the other value from each would result in this.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 5 4
5

<span class="nv">$ </span>./ch-2.py 4 6
3

<span class="nv">$ </span>./ch-2.py 2 5
4

<span class="nv">$ </span>./ch-2.py 3 1
3

<span class="nv">$ </span>./ch-2.py 7 4
5
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-188-3477</id>
    <published>2022-10-30T11:13:45Z</published>
    <updated>2022-10-30T11:13:45Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2863294494397291726</id>
    <published>2022-10-29T21:21:00.000+02:00</published>
    <updated>2022-10-29T21:21:47.920+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxvi) 16 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.72' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.72&lt;/strong&gt; on 2022-10-26&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.71 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-1.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A date and time object for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.59&lt;/strong&gt; on 2022-10-23&lt;/li&gt;  &lt;li&gt;Votes: 208&lt;/li&gt;  &lt;li&gt;Previous version: 1.58 was 6 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.56&lt;/strong&gt; on 2022-10-29&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.55 was 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Devel-CheckOS-1.95' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::CheckOS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a script to package Devel::AssertOS modules with your code. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.95&lt;/strong&gt; on 2022-10-29&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 1.94 was 3 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-Sender-2.600' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::Sender&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a library for sending email &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.600&lt;/strong&gt; on 2022-10-23&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 2.500 was 1 year, 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.029' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.029&lt;/strong&gt; on 2022-10-25&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.028 was 5 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-2.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.03&lt;/strong&gt; on 2022-10-28&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 2.02 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JACQUESG/Git-Raw-0.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Git::Raw&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl bindings to the Git linkable library (libgit2) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.90&lt;/strong&gt; on 2022-10-27&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.88 was 1 year, 2 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.44' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.44&lt;/strong&gt; on 2022-10-26&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 6.43 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.12&lt;/strong&gt; on 2022-10-26&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 5.11 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.15&lt;/strong&gt; on 2022-10-23&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 10 years, 6 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.70' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical field-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.70&lt;/strong&gt; on 2022-10-29&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.68 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/OpenAPI-Client-1.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OpenAPI::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A client for talking to an Open API powered server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.07&lt;/strong&gt; on 2022-10-26&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.06 was 1 month, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.081' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.081&lt;/strong&gt; on 2022-10-25&lt;/li&gt;  &lt;li&gt;Votes: 47&lt;/li&gt;  &lt;li&gt;Previous version: 2.019 was 4 years, 5 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9659' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9659&lt;/strong&gt; on 2022-10-28&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9657 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Zydeco-0.617' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Zydeco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Jazz up your Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.617&lt;/strong&gt; on 2022-10-23&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.616 was 3 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2863294494397291726/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxvi-16-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2863294494397291726"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2863294494397291726"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxvi-16-great-cpan-modules-released.html" title="(cdxvi) 16 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1871613791048010045</id>
    <published>2022-10-29T21:17:00.002+02:00</published>
    <updated>2022-10-29T21:17:26.963+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxix) metacpan weekly report - Text::Table</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 39&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/10/29 19:17:07 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Color::Rust" target="_blank"&gt;Acme::Color::Rust&lt;/a&gt; - Color example class using Rust + FFI&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memcached::RateLimit" target="_blank"&gt;Memcached::RateLimit&lt;/a&gt; - Sliding window rate limiting with Memcached&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::BachChoralHarmony" target="_blank"&gt;Music::BachChoralHarmony&lt;/a&gt; - Parse the UCI Bach choral harmony data set&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MySQL::Dump::Parser::XS" target="_blank"&gt;MySQL::Dump::Parser::XS&lt;/a&gt; - mysqldump SQL parser&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::TMX::CWB" target="_blank"&gt;XML::TMX::CWB&lt;/a&gt; - TMX interface with Open Corpus Workbench&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Array::Utils" target="_blank"&gt;Array::Utils&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Call::Context" target="_blank"&gt;Call::Context&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Any" target="_blank"&gt;Config::Any&lt;/a&gt; (+1=26)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+1=100)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Page" target="_blank"&gt;Data::Page&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Schema::Loader" target="_blank"&gt;DBIx::Class::Schema::Loader&lt;/a&gt; (+1=45)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Size" target="_blank"&gt;Devel::Size&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FindBin" target="_blank"&gt;FindBin&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long" target="_blank"&gt;Getopt::Long&lt;/a&gt; (+1=111)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=52)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Hooks" target="_blank"&gt;Git::Hooks&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hash::MultiValue" target="_blank"&gt;Hash::MultiValue&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hook::LexWrap" target="_blank"&gt;Hook::LexWrap&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=105)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=159)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::MoreUtils" target="_blank"&gt;List::MoreUtils&lt;/a&gt; (+1=112)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::MoreUtils::XS" target="_blank"&gt;List::MoreUtils::XS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=98)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Usage" target="_blank"&gt;Memory::Usage&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Find" target="_blank"&gt;Module::Find&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Prometheus" target="_blank"&gt;Mojolicious::Plugin::Prometheus&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Params::Validate" target="_blank"&gt;Params::Validate&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Params::ValidationCompiler" target="_blank"&gt;Params::ValidationCompiler&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rose::HTML::Objects" target="_blank"&gt;Rose::HTML::Objects&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Operator::In" target="_blank"&gt;Syntax::Operator::In&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Trap" target="_blank"&gt;Test::Trap&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+3=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=133)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X::Tiny" target="_blank"&gt;X::Tiny&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XML::Twig" target="_blank"&gt;XML::Twig&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1871613791048010045/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxix-metacpan-weekly-report-texttable.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1871613791048010045"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1871613791048010045"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxix-metacpan-weekly-report-texttable.html" title="(dxxix) metacpan weekly report - Text::Table"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7745661618463418625</id>
    <published>2022-10-29T21:16:00.002+02:00</published>
    <updated>2022-10-29T21:16:16.469+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dlvii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-10-29 19:15:24 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74200878" target="_blank"&gt;In Perl POD, what is the proper way to link to an internal function?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74168993" target="_blank"&gt;Regex only inside multiline match&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74241969" target="_blank"&gt;autovivify non-sequential array/list in Python like Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74193091" target="_blank"&gt;Can't run "compgen -c" from perl script&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/74206381" target="_blank"&gt;How can I convert an integer to a float value in Perl?&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7745661618463418625/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/dlvii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7745661618463418625"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7745661618463418625"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/dlvii-stackoverflow-perl-report.html" title="(dlvii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Things I learned at PGConf.EU 2022</title>
    <link href="http://domm.plix.at/perl/2022_10_things_i_learned_at_pgconfeu.html"/>
    <id>http://domm.plix.at/perl/2022_10_things_i_learned_at_pgconfeu.html</id>
    <updated>2022-10-28T10:35:16+00:00</updated>
    <category term="perl"/>
    <summary>The biggest yearly European Postgres, PGConf.EU took place from 26th to 28th October in Berlin. As I have a bunch of friends in Berlin and like Postgres, I decided to attend. I also submitted a talk ...</summary>
    <content type="html">&lt;p&gt;The biggest yearly European &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt;, &lt;a href="https://2022.pgconf.eu/"&gt;PGConf.EU&lt;/a&gt; took place from 26th to 28th October in Berlin. As I have a bunch of friends in Berlin and like Postgres, I decided to attend. I also submitted a talk but wasn't accepted (which in the end did not surprise me, as they got more than 260 submissions and could only accept ~80). So after a nice and productive 8h train ride from Vienna to Berlin, I spend three very informative days at the conference, met up with my &lt;a href="https://berlin.pm.org/"&gt;Perl friends&lt;/a&gt; in a nice beer garden with a gigantic chestnut tree, and also spend a few nice evenings / breakfasts with various old friends who moved to Berlin ages ago. I got to cycle around quite a lot (very nice), but missed the Critical Mass on Friday (hanging around with friends was nicer...)&lt;/p&gt;

&lt;p&gt;Here are my slightly edited notes about what I learned (or at least try to remember) and/or found funny, directly from the train ride back to Vienna. The notes might contain errors and misunderstandings, so please do check out the slides of the talks, which are hopefully linked from the respective talk pages.&lt;/p&gt;

&lt;h3&gt;Day1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4072-efficient-graph-analysis-with-sqlpgq/"&gt;Efficient Graph Analysis with SQL/PGQ&lt;/a&gt; - Peter Boncz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Happy that I don't have enough data to worry about CPU cache hits&lt;/li&gt;
&lt;li&gt;Cypher (graph query language) looks .. complex&lt;/li&gt;
&lt;li&gt;"ASCII Art graph syntax" : &lt;code&gt;MATCH (x:Account)−[:isLocatedIn]−&amp;gt;(g:City)&amp;lt;−[:isLocatedIn]−(y:Account)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SQL/PGQ is a new standard based on Cypher and similar prior art&lt;/li&gt;
&lt;li&gt;could be done with &lt;code&gt;with recursive&lt;/code&gt; but comparable recursive queries are much more complex&lt;/li&gt;
&lt;li&gt;But it would be nice to have it in Postgres (and I think it's planned?)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3831-changelog-vs-two-dimensional-time-what-works-better/"&gt;Changelog vs Two-dimensional time - what works better?&lt;/a&gt; - Henrietta Dombrovskaya&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Similar to "Temporal Tables" (which is an SQL standard to limit the validity of data to a given time range), but with one more dimension (hence "bi-temporal")&lt;/li&gt;
&lt;li&gt;https://github.com/hettie-d/pg_bitemporal&lt;/li&gt;
&lt;li&gt;Can be done in Postgres thanks to support for range types, infinity and GIST index&lt;/li&gt;
&lt;li&gt;"You can do that easily in one gigantic CTE"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT * FROM bitemp WHERE now()&amp;lt;@asserted and now()&amp;lt;@effective&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3864-brin-improvements-and-new-opclasses/"&gt;BRIN improvements and new opclasses&lt;/a&gt; - Tomas Vondra&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BTREEs are nice and useful, but large (on disk)&lt;/li&gt;
&lt;li&gt;BRIN only works (well) with proper data, eg append-only timestamps&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minmax_multi&lt;/code&gt; to work around outliers destorying index performance&lt;/li&gt;
&lt;li&gt;bloom-filter, good for uuid (do we need that for access-by-uuid? - not for primary key, so still need to check)&lt;/li&gt;
&lt;li&gt;"It's all about being smarter by not doing work that doesn't need to be done"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3936-performance-tips-you-have-never-seen-before/"&gt;Performance tips you have never seen before&lt;/a&gt; - Hans-Jürgen Schönig&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;latency matters (connect via localhost vs socket)&lt;/li&gt;
&lt;li&gt;column order matters for storage (first fixed size (int) due to "alignment", then relevant (esp for broad tables))&lt;/li&gt;
&lt;li&gt;index: &lt;code&gt;hashtext(email)&lt;/code&gt;, then &lt;code&gt;select ... where hashtext(email) = hashtext('serach@email') and email ='search@email'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pgstattuple&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;FDW fetch_size&lt;/li&gt;
&lt;li&gt;Fulltext index needs vacuum regularly (because new entries will be put into a pending list, which has to be seqscanned after checking the index and is only merged during vacuum)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3902-understanding-the-impact-of-materialized-ctes/"&gt;Understanding the impact of Materialized CTEs&lt;/a&gt; - Divya Sharma&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CTE always materialized to temporary table (before 12), 12+ has conditional materialization&lt;/li&gt;
&lt;li&gt;work_mem, enable_master&lt;/li&gt;
&lt;li&gt;recursive (or multiple references), "with sideeffect", &lt;code&gt;MATERIALZE&lt;/code&gt; =&gt; always materialize&lt;/li&gt;
&lt;li&gt;&lt;code&gt;generate_series&lt;/code&gt; is not only used by consultants (as suggested by Hans-Jürgen Schönig earlier), but in ~50% of talks at pgconfeu :-)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NOT MATERIALIZED&lt;/code&gt; -&gt; inline even though planer would not inline, which can be faster depending on indexes and the CTE. "It depends"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3985-no-array-of-sunshine-an-introduction-to-data-types-from-a-data-quality-perspective/"&gt;No Array of Sunshine: an Introduction to Data Types from a Data Quality Perspective&lt;/a&gt; - Renee Phillips&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Goldilocks and the tree data types =&gt; other talk to check out?&lt;/li&gt;
&lt;li&gt;Postgres is using 1-based array&lt;/li&gt;
&lt;li&gt;Don't use "NULL" as your vanity license plate&lt;/li&gt;
&lt;li&gt;True duplicates vs fake duplicates (eg times without timezone on timezone change)&lt;/li&gt;
&lt;li&gt;"You solve one problem, you create at least one more"&lt;/li&gt;
&lt;li&gt;Good talks, but a bit to basic for me&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3962-inside-the-machine-room-of-a-world-map-postgresql-and-openstreetmap/"&gt;Inside the machine room of a world map: PostgreSQL and OpenStreetMap&lt;/a&gt; - Sarah Hoffmann&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OSM is not using PostGIS!!&lt;/li&gt;
&lt;li&gt;it has three main data types: node, way, relation&lt;/li&gt;
&lt;li&gt;OSM is "a experiment to get away with as little as possible to achieve world domination"&lt;/li&gt;
&lt;li&gt;it is BIG!&lt;/li&gt;
&lt;li&gt;World-Dump takes ~2 days, so they are generated from a restored backup&lt;/li&gt;
&lt;li&gt;tileID bit-interleaved lat/lon&lt;/li&gt;
&lt;li&gt;9.5, because of index in transaction-id (which is not allowed after 9.6)&lt;/li&gt;
&lt;li&gt;osm2pgsql&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Day 2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4015-a-comparison-of-postgresql-backup-tools/"&gt;A comparison of PostgreSQL backup tools&lt;/a&gt; - Matt Pearson&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't store backups on same partition as the data&lt;/li&gt;
&lt;li&gt;pg_dump for migrations but not (good) backup, slow&lt;/li&gt;
&lt;li&gt;pg_dumpall: all databases, includes roles&lt;/li&gt;
&lt;li&gt;Barman&lt;/li&gt;
&lt;li&gt;pgBackRest&lt;/li&gt;
&lt;li&gt;Unfortunately there were a few easily avoidable speaker errors: very small font size on the flowchart, don't turn back on audience&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3811-how-to-handle-1000-application-users/"&gt;How to handle 1000 application users&lt;/a&gt; - Laurenz Albe&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;always nice to hear Austrian English accents&lt;/li&gt;
&lt;li&gt;connection to DB is expensive, takes lot of server resources&lt;/li&gt;
&lt;li&gt;lot of connections makes SQL statements more expensive (because each idle connection has to be checked&lt;/li&gt;
&lt;li&gt;work_mem is per connections, so one cannot have high work_mem with lots of connection&lt;/li&gt;
&lt;li&gt;pg_stats_activity wait_events is probably bad&lt;/li&gt;
&lt;li&gt;no way to limit the number of active connections&lt;/li&gt;
&lt;li&gt;=&gt; connection pool&lt;/li&gt;
&lt;li&gt;less active connection = less CPU task switching&lt;/li&gt;
&lt;li&gt;prepared statements cannot be use with transactional pooling. Fix: put statement into PLSQL function&lt;/li&gt;
&lt;li&gt;application server pooling possible (but probably not for plack when we fork lots of processes)&lt;/li&gt;
&lt;li&gt;pgBouncer&lt;/li&gt;
&lt;li&gt;no more active connections than CPU-Cores / parallel I/O requests&lt;/li&gt;
&lt;li&gt;short queries; idle_in_transaction time should be short&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"How do you put an elephant in a container in 3 steps?"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;room full, so could not attend&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3934-neon-cloud-native-storage-backend-for-postgresql/"&gt;Neon, cloud-native storage backend for PostgreSQL&lt;/a&gt; - Heikki Linnakangas&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"postgres without storage" / separate compute from storage&lt;/li&gt;
&lt;li&gt;not in Postgres, needs patches and extension&lt;/li&gt;
&lt;li&gt;very cool, but probably not something I'll use&lt;/li&gt;
&lt;li&gt;"works very well on the powerpoint platform" :-)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3789-mvcc-unmasked/"&gt;MVCC Unmasked&lt;/a&gt; - Bruce Momjian&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi Version Concurrency Control&lt;/li&gt;
&lt;li&gt;reader don't block writers, writers don't block readers&lt;/li&gt;
&lt;li&gt;function vs procedure: all functions use same snapshot, procedures can "commit" snapshots&lt;/li&gt;
&lt;li&gt;very nice snapshot rule / row visibility slide&lt;/li&gt;
&lt;li&gt;transaction (ids) have an "aborted" flag, so the txnid still is in xmax, but ignored&lt;/li&gt;
&lt;li&gt;another nice slide about page layout, item-pointer, data; dead items, index pointer&lt;/li&gt;
&lt;li&gt;Very good talk explaining MVCC very well!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3860-google-alloydb-vs-amazon-aurora-vs-azure-hyperscale-comparison-of-databases-build-for-clouds/"&gt;Google AlloyDB vs. Amazon Aurora vs. Azure Hyperscale: comparison of databases build for clouds&lt;/a&gt; - Taras Kloba&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice summary slide at the start (with different types of cars)&lt;/li&gt;
&lt;li&gt;Each provider seem to change quite a bit in Postgres, not sure I like that&lt;/li&gt;
&lt;li&gt;Not too relevant for me, to cloudy&lt;/li&gt;
&lt;li&gt;But I found a power outlet and migrated my mastodon account to (https://social.linux.pizza/@domm)[https://social.linux.pizza/@domm]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time-series, PostgreSQL, and You&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;small room, lots of persons =&gt; this conf needs a better "query planner" :-)&lt;/li&gt;
&lt;li&gt;again I could not attend&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4033-what-happens-when-stack-overflow-doesnt-have-an-answer-comparing-st_within-h3-for-spatial-queries/"&gt;What happens when stack overflow doesn’t have an answer? comparing ST_within &amp;amp; H3 for spatial queries&lt;/a&gt; - Kshitij Purwar&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Power plant emission stats by analysing arial / satelite images and  checking exhausts plumes, very smart!&lt;/li&gt;
&lt;li&gt;Use H3 (by Uber) to improve performance of a spatial query&lt;/li&gt;
&lt;li&gt;uses a hexagonal grid&lt;/li&gt;
&lt;li&gt;H3 is hard to install&lt;/li&gt;
&lt;li&gt;audience comment: alternatives could be st_simplified / st_subdivide&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Berlin.pm&lt;/h3&gt;

&lt;p&gt;At the Berlin.pm meeting I had a nice few hours of chats, good food and drinks (well, Fassbrause), found a big fan of &lt;a href="https://oe1.orf.at"&gt;oe1.orf.at&lt;/a&gt; and a wrench to fix my bike and also learned about
  * &lt;a href="https://f4maps.com"&gt;F4Maps&lt;/a&gt;
  * The Critical Mass mobile app which allows you to share your current location and see the location of other riders in the area, so you can find where the CM is currently (nice if you missed the start or want to wait until they pass by your current location).&lt;/p&gt;

&lt;h3&gt;Day 3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3950-full-page-writes-in-postgresql-critical-evil-or-both-why-you-should-care-and-how-to-optimize/"&gt;Full Page Writes in PostgreSQL - Critical, Evil or Both - Why you should care and how to optimize&lt;/a&gt; - Grant McAlister&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you turn off &lt;code&gt;full_pages_writes&lt;/code&gt;, your database will be much faster. But you'll have data corruption :-)&lt;/li&gt;
&lt;li&gt;I know nothing about WAL/pagewrites/checkpoints, ...&lt;/li&gt;
&lt;li&gt;touching pages is bad, inserting/indexing uuids touches a lot of pages because they are random&lt;/li&gt;
&lt;li&gt;nice slide on partitioning to reduce block size&lt;/li&gt;
&lt;li&gt;I should read some intro docs...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3999-practical-transactions-theory-for-postgresql-users/"&gt;Practical transactions theory for PostgreSQL users&lt;/a&gt; -  Ilya Kosmodemiansky&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ACID (ACI = memory, D = disk)&lt;/li&gt;
&lt;li&gt;Phase Locking: slow, deadlock ("Reißverschlussverfahren")&lt;/li&gt;
&lt;li&gt;Multi Version 2 Phase Locking = MVCC&lt;/li&gt;
&lt;li&gt;hah, more page explanation: data in 8kb chunks&lt;/li&gt;
&lt;li&gt;xmin/xmax again :-)&lt;/li&gt;
&lt;li&gt;still hard to read xmax not as xmas&lt;/li&gt;
&lt;li&gt;transaction handling happens in SharedMem, so Postgres processes one one machine can talk to each other fast&lt;/li&gt;
&lt;li&gt;"An elephant never forgets"&lt;/li&gt;
&lt;li&gt;Advisory locks for rare critical cases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select xmin from table&lt;/code&gt; just works, I thought it needs some magic, but those fields are just invisible internal columns&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3999-practical-transactions-theory-for-postgresql-users/"&gt;Breaking the sound barrier - Applications at light speed&lt;/a&gt; -  Henrietta Dombrovskaya, Jan Karremans&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data -&gt; program -&gt; data (punchcards)&lt;/li&gt;
&lt;li&gt;programs &amp;lt;-&gt; data, needs DBMS (concurrency, security, ..)&lt;/li&gt;
&lt;li&gt;DBMS = "specialised software designed to manage data in the most efficient way"&lt;/li&gt;
&lt;li&gt;"Database agnostic Apps" are a hoax, no one switches databases (my comment: But there are database agnostic apps like CMS that target multiple DBMS)&lt;/li&gt;
&lt;li&gt;3Ps: Performance, Performance, Performance&lt;/li&gt;
&lt;li&gt;Devs: "Database is the source of all slowness"; DBAs: "Yes, if devs write stupid queries or let even stupider ORMs generate the stupidest SQL" (my words)&lt;/li&gt;
&lt;li&gt;Relational DB and OO App hate each other = object relation impedance mismatch&lt;/li&gt;
&lt;li&gt;Business Logic split into "Application business logic" (in the app) and "Data business logic" (in the DBMS)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hettie-d/NORM"&gt;NORM - No ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;App &amp;lt;=&gt; Transfer Model (JSON) &amp;lt;=&gt; DB&lt;/li&gt;
&lt;li&gt;Generate DB functions from JSON Schema&lt;/li&gt;
&lt;li&gt;Audience Comment: Devs don't think with the relation model, Maybe relational DBMS are the problem?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lunch break&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are the odds of two people meeting at 600 person conference that not only know about &lt;a href="https://www.loc.gov/marc/bibliographic/bd034.html"&gt;MARC21 034$s + $t&lt;/a&gt;, but have recently submitted &lt;a href="https://bugs.koha-community.org/bugzilla3/show_bug.cgi?id=31652"&gt;some&lt;/a&gt; &lt;a href="https://github.com/postgis/postgis/pull/659"&gt;patches&lt;/a&gt; regarding this field?&lt;/li&gt;
&lt;li&gt;Whatever the odds, it did happen :-)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/4034-table-partitioning-transparent-but-no-magic/"&gt;Table Partitioning - Transparent but No Magic&lt;/a&gt; - Boriss Mejias&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first known partitioning implementation was Moses receiving the 10 commandments on two stone tablets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timestamp(0)&lt;/code&gt; - no milliseconds, not needed for a lot of things, smaller tables, better&lt;/li&gt;
&lt;li&gt;Very nice use of a game controller to illustrate that an index does not fix into RAM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[di, dj[&lt;/code&gt; - inclusive range vs exclusive range&lt;/li&gt;
&lt;li&gt;partitions are transparent, so &lt;code&gt;select count(*)&lt;/code&gt; has to go through all partitioned tables&lt;/li&gt;
&lt;li&gt;dynamic pruning: &lt;code&gt;select where date &amp;gt; now() - 1 month&lt;/code&gt; will pick Oct and Sept&lt;/li&gt;
&lt;li&gt;partition key does not need to be in where clause, could be in order_by&lt;/li&gt;
&lt;li&gt;might plan all the partition, but does not execute all of them ("only clean up kitchen")&lt;/li&gt;
&lt;li&gt;getting the query right is fundamental, CTEs help, but actual values seem to have to be used via subselect instead of join&lt;/li&gt;
&lt;li&gt;partition large table when the have a logical partition key; need to use that key!!&lt;/li&gt;
&lt;li&gt;partition by hash (eg hashed user id, modulo(n))&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.eu/events/pgconfeu2022/schedule/session/3819-the-curious-case-of-the-point-of-sales-and-why-we-still-need-pglogical/"&gt;The curious case of the point of sales, and why we still need pglogical&lt;/a&gt; - Jaime Casanova&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replication data to a lot of POS over bad network&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pglogical.forward_origins&lt;/code&gt; as a very weird data structure (empty array, or empty array with exactly one value &lt;code&gt;all&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;central&lt;/code&gt; is not enough, add another &lt;code&gt;central2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"oh du lieber execute, alles ist hin"&lt;/li&gt;
&lt;li&gt;faceting, roaring bitmaps =&gt; pgfaceting&lt;/li&gt;
&lt;li&gt;There are Postgres shibboleth in hiring (just like in PERL^wperl^wPerl)&lt;/li&gt;
&lt;li&gt;pg_crash - if your database is too reliable: "crash as a service"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert .. on conflict&lt;/code&gt; does nothing, whereas &lt;code&gt;insert&lt;/code&gt; with error generates dead tuples (which is bad for page writes etc)&lt;/li&gt;
&lt;li&gt;postgres.conf settings should be adapted for modern hard drives (because defaults target the lowest common denominator)&lt;/li&gt;
&lt;li&gt;random_page_cost (1 or 1.1) &gt;= seq_page_count&lt;/li&gt;
&lt;li&gt;max_wal_size should be bigger than 1G ? but my DB is only 10GB?&lt;/li&gt;
&lt;li&gt;autovacuum_vacuum_cost_delay 2ms&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;General notes&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Scheduling is hard
&lt;ul&gt;
&lt;li&gt;There weren't a lot of beginner talks (but I guess the conference is not targeted at beginners..)&lt;/li&gt;
&lt;li&gt;Some talks referenced each other, but where in the "wrong order", i.e. a very detailed talk before a more general introduction.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I need to talk with the orgas if we (Perl) can use their conference software for our events&lt;/li&gt;
&lt;li&gt;Some stats from the closing speech:
&lt;ul&gt;
&lt;li&gt;600 attendees, 599 showed up (I just wonder if these where the same 599 people...)&lt;/li&gt;
&lt;li&gt;150 speakers / 260 talks submitted&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;My new varifocal glasses (yes, I'm that old) don't work well with the setup in the smaller rooms (flat floor and low hanging monitors) because I have to tilt my head to see above the heads in front of me, which results in me viewing through the "near" zone of the multifocals, which makes the slides (which are not near..) hard to read.&lt;/li&gt;
&lt;li&gt;Is it now considered polite to thank speakers for their talk when asking a question, or is this a Postgresconf thing?&lt;/li&gt;
&lt;li&gt;Lot of DBAs, few devs, and they (DBAs) don't like us (Devs) very much :-)&lt;/li&gt;
&lt;li&gt;I used to mostly attend Perl conferences, where I'm quite well known and know a lot of people (inside jokes), and spend less time in talks and more in the hallway track. It's an interesting experience to once again attend an event as some random person with hardly any connections to other attendees.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always: A big Thank-you to the orgas, speakers, sponsors and attendees!&lt;/p&gt;
</content>
    <category term="event"/>
    <category term="PostgreSQL"/>
  </entry>
  <entry>
    <title>The scoop on Windows running Perl</title>
    <link rel="alternate" href="http://blogs.perl.org/users/itcharlie/2022/10/the-scoop-on-windows-running-perl.html"/>
    <id>tag:blogs.perl.org,2022:/users/itcharlie//1220.10931</id>
    <published>2022-10-28T04:07:04Z</published>
    <updated>2022-10-28T04:47:44Z</updated>
    <author>
        <name>Charlie Gonzalez</name>
        
    </author>
    <category term="scoopperlrakurakudo" label="scoop perl raku rakudo" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/itcharlie/">
        <![CDATA[<p><a href="https://scoop.sh/">Scoop </a>is a command-line installer for Windows  that allows you to install a local user copy of Perl and other open source programming languages. </p>

<p>To get started, just install scoop on your windows machine by typing this in a powershell terminal:</p>

<p><br />
irm get.scoop.sh | iex<br />
 <br />
If this doesn't work you might have to set a Powershell execution policy by typing this in your Powershell terminal :</p>

<p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p>

<p>Check the <a href="https://github.com/ScoopInstaller/Install#readme">Readme docs </a>for more information on how it all works. After scoop is installed you can install perl by just typing :</p>

<p>scoop install perl</p>

<p>Here is a screenshot on how it worked for me:</p>

<p><img alt="scoop_install_perl.png" src="http://blogs.perl.org/users/itcharlie/scoop_install_perl.png" width="1100" height="599" class="mt-image-none" style="" /></p>

<p>You can also install <a href="https://rakudo.org/star">Rakudo Star </a>bundle by typing :</p>

<p>scoop install rakudo-star</p>

<p>what will you scoop install on your Windows machine?</p>

<p></p>

<p></p>

<p></p>

<p></p>

<p><br />
 </p>]]>
        
    </content>
</entry>
  <entry>
  <title>November Announcements from the Board - UPDATED</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/announcements"/>
  <id>tag:news.perlfoundation.org,2022-10-26:/post/announcements</id>
  <published>2022-10-26T12:12:57</published>
  <updated>2022-10-26T12:12:57</updated>
  <summary>
  <![CDATA[
     Yet Another Society operates as a nonprofit dedicated to supporting the advancement of the Perl and Raku programming languages. One way Yet Another Society supports Perl and Raku is through grants. Yet Another Society has had donations given specifically for both languages. As such, it is important to recognize the relationship the foundation has with not just Perl, but also Raku. This is why, following a vote from the board, 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Yet Another Society (aka YAS, of which The Perl Foundation is a "doing business as") operates as a nonprofit dedicated to supporting the advancement of the Perl and Raku programming languages. One way Yet Another Society supports Perl and Raku is through grants. Yet Another Society has had donations given specifically for both languages. As such, it is important to recognize the relationship the foundation has with not just Perl, but also Raku. This is why, following a vote from the board, YAS will be registering a new "doing business as" called "The Perl And Raku Foundation". And will now be using "The Perl and Raku Foundation" (aka TPRF), where this is appropriate in the future.. </p>

<p>[Edit] We clarified it’s not a rename of the foundation. We appreciate <a href="https://dev.to/lizmat/on-the-perl-and-raku-foundation-d75">Liz’s edit suggestions</a>.</p>

<p>This decision will be revisited in 3 years. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Dancer2: Template Toolkit</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-10-25T10:10:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-template-toolkit"/>  <id>https://perlmaven.com/dancer2-template-toolkit</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#587 - Continuous Integration for Perl modules</title>
    <link rel="alternate" href="https://perlweekly.com/archive/587.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>For years Perl was a long way ahead of the other languages in terms of testing the modules. The volunteers of the <a href="http://cpantesters.org/">CPAN Testers</a> provide an excellent service. Every time a new module or a new version of an older module is uploaded to CPAN (via <a href="https://pause.perl.org/">PAUSE</a>) within days and sometimes even within hours the CPAN Testers would download the new release, test it on their machines, and send a report to the author. Sometimes they would even open issues/tickets manually to report the problem and help the author(s) fix them.</p>
<p>These days, however, Open Source developers can use a number of free Continuous Integration systems that would give them feedback much sooner: On every push to GitHub or GitLab. They can run the author or release tests on these systems. They can configure to test other modules that use their module (reverse dependencies) to make sure the new changes don't have a negative impact on these users. They can can even re-run all the tests every day making sure that changes in the dependencies of the module don't break it. (CPAN Testers usually run the tests of a module only if you release a new version or if your module is a dependency of something that was released.)</p>
<p>By catching certain issues before they release a new version they provide a better experience to every user of CPAN and they also take some of the manual work off the shoulders of the CPAN Testers who are few.</p>
<p>For many years Travis-CI was the de-facto standard to set up CI for GitHub-based project. These days it is primarily GitHub Actions.</p>
<p>So, I have been on a quest to configure GitHub Actions to all the Perl projects where the author is interested. I have <a href="https://perlmaven.com/os">documented some of these</a> and I have written on <a href="https://perlmaven.com/ci">Why and how to CI</a>. I use the <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a> to locate candidates, but if you'd like to get help with setting up CI, open an issue on your project and tag <a href="https://github.com/szabgab/">me</a>. If you like my quest, feel free to <a href="https://szabgab.com/support.html">sponsor me</a> so I'll be able to allocate more time to this. Oh, and if your company needs help with CI and test automation, I offer that as a service.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/587.html</id>
    <published>2022-10-24T10:00:00Z</published>
    <updated>2022-10-24T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 187</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-187/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-187/</id>
    <published>2022-10-24T00:00:00Z</published>
    <updated>2022-10-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 188</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-188/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Divisible Pairs 10. TASK #2: Total Zero HEADLINES  Welcome to the Week #188 of The Weekly Challenge.
We are into the fourth week of Hacktoberfest 2022. At last, we made it, little late though to get the 100+ mark this time too.
Week: #1 #2 #3 #4 -------------------- Perl: 55 59 56 51 Raku: 31 35 33 34 Blog: 17 19 20 20  Last week, we had 36 regular contributors and 13 guest contributors.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-188/</id>
    <published>2022-10-24T00:00:00Z</published>
    <updated>2022-10-24T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Days Together Are Magical</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/10/23#pwc187" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Two friends, Foo and Bar gone on holidays seperately to the same city. You are 
given their schedule i.e. start date and end date. To keep the task simple, the 
date is in the form DD-MM and all dates belong to the same calendar 
year i.e. between 01-01 and 31-12. &lt;br /&gt;
Also the year is non-leap year and both dates are inclusive. Write a script to 
find out for the given schedule, how many days they spent together in the 
city, if at all.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Time::Piece;
use Time::Seconds;

sub days_together{
    my($together) = @_;
    my $days_together = 0;
    my($start, $end);
    my $foo_start = Time::Piece-&gt;strptime($together-&gt;{Foo}-&gt;{SD}, q/%d-%m/);
    my $bar_start = Time::Piece-&gt;strptime($together-&gt;{Bar}-&gt;{SD}, q/%d-%m/);
    my $foo_end = Time::Piece-&gt;strptime($together-&gt;{Foo}-&gt;{ED}, q/%d-%m/);
    my $bar_end = Time::Piece-&gt;strptime($together-&gt;{Bar}-&gt;{ED}, q/%d-%m/);
    $start = $foo_start;
    $start = $bar_start if $bar_start &gt; $foo_start;
    $end = $foo_end;
    $end = $bar_end if $bar_end &lt; $foo_end;
    {
        $days_together++ if $start &lt;= $end;
        $start += ONE_DAY;
        redo if $start &lt;= $end;
    }
    return $days_together;
}


MAIN:{
    my $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/12-01/, ED =&gt; q/20-01/},
                           Bar =&gt; {SD =&gt; q/15-01/, ED =&gt; q/18-01/}});
    say $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/02-03/, ED =&gt; q/12-03/},
                           Bar =&gt; {SD =&gt; q/13-03/, ED =&gt; q/14-03/}});
    say $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/02-03/, ED =&gt; q/12-03/},
                           Bar =&gt; {SD =&gt; q/11-03/, ED =&gt; q/15-03/}});
    say $days;
    $days = days_together({Foo =&gt; {SD =&gt; q/30-03/, ED =&gt; q/05-04/},
                           Bar =&gt; {SD =&gt; q/28-03/, ED =&gt; q/02-04/}});
    say $days;        
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
4
0
2
4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Time:Piece makes this easy, once we figure out the logic. The start date should
be the later of the two start dates since clearly there can be no overlap until the
second person shows up. Similarly the end date should be the earlier of the two
dates since once one person leaves their time together is over. By converting
the dates to Time::Piece objects the comparisons are straightforward. &lt;/p&gt;

&lt;p&gt;Now, once the dates are converted to Time::Piece objects and the start and end dates
determined we could also use Time::Piece arithmetic to subtract one from the other
and pretty much be done. However, since that might be a little too boring I instead
iterate and count the number of days in a &lt;code&gt;redo&lt;/code&gt; loop!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a list of positive numbers, @n, having at least 3 numbers.
Write a script to find the triplets (a, b, c) from the given list that satisfies 
a set of rules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use Hash::MultiKey;
use Math::Combinatorics;

sub magical_triples{
    my(@numbers) = @_;
    my %triple_sum;
    tie %triple_sum, q/Hash::MultiKey/;
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; 3, data =&gt; [@numbers]);
    my($s, $t, $u);
    while(my @combination = $combinations-&gt;next_combination()){
        my($s, $t, $u) = @combination;
        my $sum;
        $sum = $s + $t + $u if $s + $t &gt; $u &amp;&amp; $t + $u &gt; $s &amp;&amp; $s + $u &gt; $t;
        $triple_sum{[$s, $t, $u]} = $sum if $sum;
    }
    my @triples_sorted = sort {$triple_sum{$b} &lt;=&gt; $triple_sum{$a}} keys %triple_sum; 
    return ($triples_sorted[0]-&gt;[0], $triples_sorted[0]-&gt;[1], $triples_sorted[0]-&gt;[2]) if @triples_sorted;
    return ();
}

MAIN:{
    say "(" . join(", ", magical_triples(1, 2, 3, 2)) . ")";
    say "(" . join(", ", magical_triples(1, 3, 2)) . ")";
    say "(" . join(", ", magical_triples(1, 1, 2, 3)) . ")";
    say "(" . join(", ", magical_triples(2, 4, 3)) . ")";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
(2, 3, 2)
()
()
(4, 3, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The "magical" rules, if not clear from the above code are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a + b &gt; c&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;b + c &gt; a&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a + c &gt; b&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a + b + c is maximum.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be certain, this problem is an excellent application of constraint programming.
Unfortunately I do not know of a good constraint programming library in Perl.
If you see my &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2022/10/23"&gt;Prolog Solutions&lt;/a&gt;
for this problem you can see just how straightforward such a solution can be!&lt;/p&gt;

&lt;p&gt;Here we find ourselves with a brute force implementation. Math::Combinatorics is
a battle tested module when dealing with combinatorics problems in Perl. For all possible selections
of three elements of the original list we evaluate the rules and track their sums
in a hash. We then sort the hash keys based on the associated values and return
the triple which has maximal sum and otherwise passes all the other requirements.&lt;/p&gt;

&lt;p&gt;A nice convenient module used here is Hash::MultiKey which allows us to use
an array reference as a hash key. In this way we can have immediate access to the
triples when needed.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-187/"&gt;Challenge 187&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc187</id>
    <published>2022-10-23T17:11:00-04:00</published>
    <updated>2022-10-23T17:11:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Use Dist::Zilla to Create a Perl Distribution</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/use-distzilla-to-create-a-perl-distribution-2c5i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://dzil.org/">Dist::Zilla</a> (dzil) is a program for creating Perl distributions. While the documentation for dzil is complete, it is not geared towards a beginner that has never created a Perl distribution before. This article provides a brief introduction to Dist::Zilla geared towards users that know little about Perl distributions in general.</p>

<p><a id="orgafbbf0c"/></p>

<h1>
  
  
  What is a Perl distribution?
</h1>

<p>A Perl distribution is an archive of files that includes a Perl module. There are no official rules on what non-module files must be included in a distribution, but they often include (among other things) test scripts, a Makefile.PL, documentation, and the license. These distributions are commonly uploaded to <a href="https://metacpan.org/">CPAN</a>, which is a place for Perl programmers to upload their Perl distributions for the purpose of sharing their code.</p>

<p><a id="orgcabe74a"/></p>

<h1>
  
  
  Why Dist::Zilla?
</h1>

<p>You may think that bundling together a Perl module with some other files is simple, but there are many things that need to be accounted for, and are prone to human error. There are also many possibilities for what somebody may want to include in a distribution, and how they want to include it. Dist::Zilla exists to be a one-stop solution to every possible problem involved in creating a Perl distribution.</p>

<p><a id="org29a19e9"/></p>

<h1>
  
  
  Using Dist::Zilla
</h1>

<p>When you install Dist::Zilla, you will be provided with an executable named <code>dzil</code>. The most important command that <code>dzil</code> provides is <code>build</code>, which - when run in the projects root directory - outputs a distribution tarball. Other commands such as <code>test</code> and <code>release</code> are also provided, but when getting started with Dist::Zilla you will only need the <code>build</code> command.</p>

<p><a id="orge0178c3"/></p>

<h1>
  
  
  The "dist.ini" File
</h1>

<p>Dist::Zilla is configured on a per-project basis through a file named <code>dist.ini</code>, which should be located at the root of the project's directory tree.</p>

<p>The beginning of a <code>dist.ini</code> file specifies required settings that every distribution should have. These settings include <code>name</code>, <code>version</code>, <code>abstract</code>, <code>copyright_holder</code>, and <code>license</code>. (There is also <code>author</code>, which isn't required but you probably want to add it as well.)</p>

<p>Here is an example:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>name = App-Foo
version = 1.0
author = Jane Doe
copyright_holder = Jane Doe
license = Perl_5
abstract = the best software ever
</code></pre>

</div>

<p>After you specify these required settings, you can then configure your distribution by specifying what plugins you wish to use. Plugins are the mechanism that Dist::Zilla uses for providing features to your Perl distribution. If you have <code>dist.ini</code> that doesn't specify any plugins, Dist::Zilla will produce an empty distribution with no files.</p>

<p>Let's look at example of the plugins that a simple distribution might use, then go over what a few of the plugins actually do:</p>

<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>[MetaResources]
homepage       = https://github.com/JaneDoe/App-Foo
bugtracker.web = https://github.com/JaneDoe/App-Foo/issues
repository.url = https://github.com/JaneDoe/App-Foo.git

[GatherDir]
[PruneCruft]
[ManifestSkip]
[MetaYAML]
[License]
[ExecDir]
[MakeMaker]
[Manifest]
[AutoPrereqs]
[TestRelease]
</code></pre>

</div>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::MetaResources">MetaResources</a> plugin adds resource entries to the distribution's metadata. <a href="https://metacpan.org/">MetaCPAN</a> can use this information to provide useful links to the distribution's page.</p>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::GatherDir">GatherDir</a> and <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::PruneCruft">PruneCruft</a> plugins tell Dist::Zilla that you want to include all the files in your project's directory into the distribution, excluding the ones you certainly don't want. The files you certainly don't want include build artifacts introduced by recent invocations of Dist::Zilla. The combination of these two plugins is used in almost every Dist::Zilla project.</p>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::MakeMaker">MakeMaker</a> plugin will tell Dist::Zilla to produce an <a href="https://metacpan.org/pod/ExtUtils::MakeMaker">ExtUtils::MakeMaker</a>-powered Makefile.PL. Dist::Zilla will deal with everything required to create a proper Makefile.PL, so you do not need to know anything about ExtUtils::MakeMaker. Unless you are doing something special, you almost certainly want to use this plugin.</p>

<p>The <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::UploadToCPAN">UploadToCPAN</a> plugin will allow you to use the <code>dzil release</code> command to upload your distribution to CPAN.</p>

<p>It is important to note that each plugin takes effect in the order the plugins are specified in your dist.ini.</p>

<p>There are <strong>many</strong> plugins available for Dist::Zilla - over 1,200 thus far - so you will probably find one that can do just about anything you could possibly need for creating a distribution. <a href="https://metacpan.org/search?size=20&amp;q=Dist%3A%3AZilla%3A%3APlugin">Here</a> is a link for a metacpan query for "Dist::Zilla::Plugin", that can be used to explore the Dist::Zilla plugin ecosystem.</p>

<p>Here are links to the documentation for the plugins in the example <code>dist.ini</code> that I did not explain:</p>

<ul>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::ManifestSkip">ManifestSkip</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::MetaYAML">MetaYAML</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::License">License</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::ExecDir">ExecDir</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::Manifest">Manifest</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::AutoPrereqs">AutoPrereqs</a>
</li>
<li>  <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::TestRelease">TestRelease</a>
</li>
</ul>

<p><a id="org23f3c96"/></p>

<h1>
  
  
  Synopsis
</h1>

<p>Dist::Zilla can seem daunting at first, but it is actually quite straightforward and easy to use once you figure it out. The only difficult thing is figuring out what plugins you want to use.</p>

</div>
    </content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/use-distzilla-to-create-a-perl-distribution-2c5i</id>
    <published>2022-10-23T14:29:26Z</published>
    <updated>2022-10-23T14:29:26Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Challenges, Solutions and more Challenges and more Solutions</title>
    <link rel="alternate" href="https://dev.to/jonasbn/challenges-solutions-and-more-challenges-and-more-solutions-4j3f" type="text/html"/>
    <content type="html">&lt;p&gt;I am maintaining two Perl distributions, which are using C-bindings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/dist/Crypt-OpenSSL-X509"&gt;Crypt::OpenSSL::X509&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/dist/Crypt-OpenSSL-PKCS12"&gt;Crypt::OpenSSL::PKCS12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do not do much day to day maintenance, but on occassion there is a PR, which needs to be processed or a report from &lt;a href="http://www.cpantesters.org/"&gt;cpan-testers&lt;/a&gt; indicating a failing test, requiring further investigation. The thing it that the surroundings of these distributions change constantly. Circumstances involving change got me involved with the maintenance of the two distributions in the first place, I was a mere user and the platforms I was using these components on, where being updated continuously and we simply needed to keep up.&lt;/p&gt;

&lt;p&gt;Apparently this never stops and when I could see that I over time got failing tests due to the toolchains used around these kept evolving. The toolchain issue was often related to &lt;strong&gt;clang&lt;/strong&gt;, I was visiting the documentation for &lt;strong&gt;clang&lt;/strong&gt; on several occassions.&lt;/p&gt;

&lt;p&gt;By adjusting the command line parameters, I could keep the tests passing.&lt;/p&gt;

&lt;p&gt;Here are some examples on the mentioned docmentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/10.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 10 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/10.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/11.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 11 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/11.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/12.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 12 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/12.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 13 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html"&gt;clang 14 diagnostic flags&lt;/a&gt; - &lt;code&gt;https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to see if a given option was available in a version or when it was introduced (or deprecated), I surfed across the pages with multiple tabs open, cross-checking command line options etc..&lt;/p&gt;

&lt;p&gt;And example: &lt;code&gt;-Wunreachable-code-fallthrough&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Present in version 14 (&lt;code&gt;https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html#wunreachable-code-fallthrough&lt;/code&gt;) but not in earlier versions.&lt;/p&gt;

&lt;p&gt;Where: &lt;code&gt;-Wall&lt;/code&gt; is present in versions all versions, below some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;14 (&lt;code&gt;https://releases.llvm.org/14.0.0/tools/clang/docs/DiagnosticsReference.html#wall&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;13 (&lt;code&gt;https://releases.llvm.org/13.0.0/tools/clang/docs/DiagnosticsReference.html#wall&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;4 (&lt;code&gt;https://releases.llvm.org/4.0.0/tools/clang/docs/DiagnosticsReference.html#wall&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I had a challenge, I needed to keep an overview of the compiler diagnostic parameters. At the same time I could see that a pattern emerged as the URL structure was uniform and the pages had the some structure. So I decided to make a matrix of all of the diagnostic command line flags. The latter was clearly a benefit, so if you are creating similar documentation, please keep this in mind as a use-case.&lt;/p&gt;

&lt;p&gt;Anyway this lets me introduce: "&lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix"&gt;clang diagnostic flags matrix generator&lt;/a&gt;", a Perl application that would iterate over a set of available web pages (one for each version of &lt;strong&gt;clang&lt;/strong&gt;), extract/scrape the information and insert it into a data structure, from which I can print a matrix expressed as a Markdown table. Do note not all versions of clang are represented, but relevant versions and data is available from version 4 and above. Please see the &lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix/blob/main/diags.pl#L13"&gt;source code&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;And it worked, one can discuss the readability due to the size of the matrix, but I had a challenge and I came up with a solution. The matrix was inserted into &lt;a href="http://jonasbn.github.io/til/clang/diagnostic_flags.html"&gt;my TIL collection under the clang category&lt;/a&gt;, it is also available in the &lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix"&gt;clang diagnostic flags matrix generator repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A new problem occurred however. The matrix would not render correctly on GitHub, it would stop at some point, in the beginning I thought this was a transient error, but it did seem to persist. I did not observe the issue when using &lt;a href="http://jonasbn.github.io/til/clang/diagnostic_flags.html"&gt;GitHub pages&lt;/a&gt; or the Markdown preview in Visual Studio Code, so the problem had to be with GitHub. So I reported it as a bug to GitHub and a got an answer, brief and to the point. My Markdown exceeded the limit of file size for rendering on GitHub.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Text files over 512 KB are always displayed as plain text. Code is not syntax highlighted, and prose files are not converted to HTML (such as Markdown, AsciiDoc, etc.).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;REF: &lt;a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories#text-limits"&gt;GitHub Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did a check on my file and it exceeded the 512 KB with a size exceeding 1MB.&lt;/p&gt;

&lt;p&gt;New challenge, how do I decrease the size of the generated Markdown table.&lt;/p&gt;

&lt;p&gt;I started out by eliminating much of the use of spaces and emojis, the latter I exchanged for ASCII characters. The size decreased, but then version 15.0.0 of clang came along and the size increased. But it was easy to spot the culprit as all of the command line flags would link to their respective documentation per version, meaning that the URL carried a log of redundant information, which was reapeated a lot.&lt;/p&gt;

&lt;p&gt;After thinking a little I came to the conclusion that had shorten the URL, boiling down all the redundant information like a &lt;em&gt;compression algorithm&lt;/em&gt;. I did an experiment, where I just rewrote the URL to a short &lt;em&gt;fake&lt;/em&gt; domain name. And immediately I could see an effect and I decided to implement support for redirecting via a short URL to the longer URL.&lt;/p&gt;

&lt;p&gt;I did some basic checks, since I could isolate the Markdown matrix/table output from the generator. The data is based on a matrix covering versions from 4 to 14.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;947393&lt;/code&gt; KB with emojis and original (long) URLs&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;926691&lt;/code&gt; KB emojis exchanged for ASCII&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;418901&lt;/code&gt; KB no emojis and URLs shortened&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned version 15 of clang was introduced around the same time I was looking into this, so it gave me the opportunity to calculate as approximate size cost of a new version.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;462850&lt;/code&gt; KB no emojis and URLs shortened including version 15.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the cost of version 15 is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;462850&lt;/code&gt; - &lt;code&gt;418901&lt;/code&gt; = &lt;code&gt;43.949&lt;/code&gt; KB&lt;/p&gt;

&lt;p&gt;Meaning in a few versions the maximum of 512 KB will be exceeded again at some point, but I will look at that challenge when it becomes a problem.&lt;/p&gt;

&lt;p&gt;Well the solution required a way to shorten the URL. I ended up with a sort of &lt;em&gt;proxy&lt;/em&gt; which redirects from my short URL to the original. Actually reversing the change made by the &lt;a href="https://github.com/jonasbn/clang-diagnostic-flags-matrix"&gt;clang diagnostic flags matrix generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up was understanding what the common parts was and what the variables were. Looking at the URLs mentioned above, one will spot:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;version number&lt;/li&gt;
&lt;li&gt;fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could even abbreviate the version number, since it only documented major versions, since command line options was not added a removed via minor or bug releases (semantic versioning for the win).&lt;/p&gt;

&lt;p&gt;The service should need to support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;version as a 1 digit number&lt;/li&gt;
&lt;li&gt;fragment, the complete fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I came up with the following scheme: &lt;code&gt;&amp;lt;domain&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;fragment&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://releases.llvm.org/5.0.0/tools/clang/docs/DiagnosticsReference.html#rsanitize-address&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Would be abbreviated to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://&amp;lt;domain&amp;gt;/5/rsanitize-address&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which could be expressed as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[X](https://&amp;lt;domain&amp;gt;/5/rsanitize-address)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a basic service implemented in go: &lt;a href="https://github.com/jonasbn/pxy-redirect"&gt;pxy-redirect&lt;/a&gt;. In addition I needed a short domain name and ended up registering: &lt;code&gt;pxy.fi&lt;/code&gt;. The complete solution  running at &lt;code&gt;https://pxy.fi&lt;/code&gt;, which replaced the original domain name: &lt;code&gt;https://releases.llvm.org/&lt;/code&gt;, doming the redirection by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;expanding the version number&lt;/li&gt;
&lt;li&gt;and transporting the last part of the URL as a fragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To recap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The URL: &lt;code&gt;https://releases.llvm.org/5.0.0/tools/clang/docs/DiagnosticsReference.html#rsanitize-address&lt;/code&gt; is extracted as part of manual parsing&lt;/li&gt;
&lt;li&gt;The Markdown is generated with a shorter representation: &lt;code&gt;[X](https://pxy.fi/5/rsanitize-address)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;When the link is clicked, the service rewrites from: &lt;code&gt;https://pxy.fi/5/rsanitize-address&lt;/code&gt; to &lt;code&gt;https://releases.llvm.org/5.0.0/tools/clang/docs/DiagnosticsReference.html#rsanitize-address&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The the service is deployed with DigitalOcean anb is up and running and I am watching it's logs to spot any weird things.&lt;/p&gt;

&lt;p&gt;To begin with my code was very aimed at the proxy part, being very transparent, so I decided to introduce&lt;br&gt;
an &lt;code&gt;index.html&lt;/code&gt; for the root, just to introduce the service just in case somebody hit that particular URL, then I could guide them.&lt;/p&gt;

&lt;p&gt;Introducing &lt;code&gt;index.html&lt;/code&gt;, then resulted in requests for &lt;code&gt;favicon.ico&lt;/code&gt; and I recently added support for ´robots.txt`, since I could see this was requested.&lt;/p&gt;

&lt;p&gt;I can see somebody is requesting &lt;code&gt;/login&lt;/code&gt;, which is very &lt;em&gt;sweet&lt;/em&gt;, but that is not a valid URL and it results in an error. JFYI there is no need to crawl the site since it is a very basic and transparent redirecting proxy and all of the code is open source and is available on GitHub&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.com/jonasbn/pxy-redirect&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I examined the option to implement this as serverless functions with DigitalOcean, but that will require some more research. If I need to do some more redirection I can added an extra part to the URL so I can separate into namespaces, but I do not currently have this requirement, so it is not implemented.&lt;/p&gt;

&lt;p&gt;The implementation has been really fun and I can highlight some of the key points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Mojo::UserAgent"&gt;Mojo::UserAgent&lt;/a&gt;, which is an awesome tool for HTTP client work&lt;/li&gt;
&lt;li&gt;GitHub limitations&lt;/li&gt;
&lt;li&gt;I am still in the process of learning Go, so it was fun with an experiment, which was not just another tutorial&lt;/li&gt;
&lt;li&gt;URL fragments and their nature&lt;/li&gt;
&lt;li&gt;Deploying on DigitalOcean and I want to dig into &lt;a href="https://www.digitalocean.com/products/functions"&gt;DigitalOceans functions&lt;/a&gt;, because I believe this to be a good use-case for serverless functions over a server solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideas and suggestions for improvements are most welcome. I am thinking about doing some follow up posts on the different components mentioned to walk through the implementation highlighting different aspects, I believe this could also be a good way to spot points of interest for improvements.&lt;/p&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/challenges-solutions-and-more-challenges-and-more-solutions-4j3f</id>
    <published>2022-10-23T14:13:48Z</published>
    <updated>2022-10-23T14:13:48Z</updated>
    <category term="opensource"/>
    <category term="go"/>
    <category term="perl"/>
    <category term="github"/>
  </entry>
  <entry>
    <title>Magical Days Together with Triplets</title>
    <link rel="alternate" href="https://dev.to/simongreennet/magical-days-together-with-triplets-3lci" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><h2>
  
  
  Weekly Challenge 187
</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-187/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-187/sgreen">My solution</a></p>

<p>After a few interstate trips and a bout of COVID-19, it's now onward and upwards to the end of the year. The ICC Men's Twenty20 World Cup has also started here so it's time to change the <a href="https://www.t20worldcup.com/official-broadcasters">channel</a> and throw out the remote for the next month. Go Black Caps!</p>

<h2>
  
  
  Task 1: Days Together
</h2>

<h3>
  
  
  Task
</h3>

<p>Two friends, Foo and Bar gone on holidays seperately[sic] to the same city. You are given their schedule i.e. start date and end date.</p>

<p>To keep the task simple, the date is in the form DD-MM and all dates belong to the same calendar year i.e. between 01-01 and 31-12. Also the year is non-leap year and both dates are inclusive.</p>

<p>Write a script to find out for the given schedule, how many days they spent together in the city, if at all.</p>

<h3>
  
  
  My solution
</h3>

<p>I really like this challenge, as it makes you think about how to solve them. Date math is never easy. For this task, I convert the four input dates into day of the year (1 = January 1<sup>st</sup>, 365 = December 31<sup>st</sup>). In Python, I use the <a href="https://docs.python.org/3/library/datetime.html#datetime.date">date</a> module, while I use <a href="https://metacpan.org/pod/Date::Calc">Date::Calc</a> for the Perl solution. This makes the rest of the solution relatively easy.</p>

<p>I check that both Foo and Bar don't leave before they arrive. We can calculate the number of days by calculating when the last person arrives and when the first person leaves. If this is a negative number, they didn't see each other. Others we take the value and add 1 to print the solution.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py 12-01 20-01 15-01 18-01
4 days

<span class="nv">$ </span>./ch-1.py 02-03 12-03 13-03 14-03
0 days

<span class="nv">$ </span>./ch-1.py 02-03 12-03 11-03 14-03
2 days

<span class="nv">$ </span>./ch-1.py 30-03 05-04 28-03 02-04
4 days
</code></pre>

</div>



<h2>
  
  
  Task 2: Magical Triplets
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a list of positive numbers, @n, having at least 3 numbers.</p>

<p>Write a script to find the triplets (<code>a</code>, <code>b</code>, <code>c</code>) from the given list that satisfies the following rules.</p>

<ol>
<li>a + b &gt; c</li>
<li>b + c &gt; a</li>
<li>a + c &gt; b</li>
<li>a + b + c is maximum.</li>
</ol>

<p>In case, you end up with more than one triplets having the maximum then pick the triplet where a &gt;= b &gt;= c.</p>

<h3>
  
  
  My solution
</h3>

<p>I'm sure there are smarter people doing this challenge that will come up with some formula for figuring out the quickest way to solve this, but some times the brute force approach is good enough. Especially when dealing with small number of things.</p>

<p>For this challenge, I use the combinations function from <a href="https://docs.python.org/3.8/library/itertools.html#itertools.permutations">itertools</a> in Python and from <a href="https://metacpan.org/pod/Algorithm::Combinatorics">Algorithm::Combinatorics</a> in Perl to compute all possible combinations of three digits.</p>

<p>I store the 'best' solution so far in the <code>solutions</code> list (which is set to None initially in Python, and an empty arrayref in Perl).</p>

<p>I then loop through each combination and determine if the first three criteria are met. If they and the solution value is empty or the sum is greater than the current <code>solution</code>, I set <code>solution</code> to the new list.</p>

<p>I finally print the result in the specified format.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-2.py 1 2 3 2
<span class="o">(</span>3, 2, 2<span class="o">)</span>

<span class="nv">$ </span>./ch-2.py 1 3 2
<span class="o">()</span>

<span class="nv">$ </span>./ch-2.py 1 1 2 3
<span class="o">()</span>

<span class="nv">$ </span>./ch-2.py 2 4 3
<span class="o">(</span>4, 3, 2<span class="o">)</span>
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/magical-days-together-with-triplets-3lci</id>
    <published>2022-10-23T12:21:23Z</published>
    <updated>2022-10-23T12:21:23Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-446203617544588183</id>
    <published>2022-10-22T22:38:00.000+02:00</published>
    <updated>2022-10-22T22:38:01.281+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxv) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.057008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.057008&lt;/strong&gt; on 2022-10-18&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.057007 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GARU/Clone-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Clone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - recursively copy Perl datatypes &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2022-10-19&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.45 was 2 years, 5 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - represent an operation awaiting completion &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2022-10-17&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 8 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSAVAGE/GraphViz-2.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Interface to AT&amp;T's GraphViz. Deprecated. See GraphViz2 &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.25&lt;/strong&gt; on 2022-10-22&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.25 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/HTTP-Message-6.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.43&lt;/strong&gt; on 2022-10-22&lt;/li&gt;  &lt;li&gt;Votes: 61&lt;/li&gt;  &lt;li&gt;Previous version: 6.41 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Log-Log4perl-1.57' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Log4perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Log4j implementation for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.57&lt;/strong&gt; on 2022-10-21&lt;/li&gt;  &lt;li&gt;Votes: 97&lt;/li&gt;  &lt;li&gt;Previous version: 1.56 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.14&lt;/strong&gt; on 2022-10-15&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.14 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20221020' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20221020&lt;/strong&gt; on 2022-10-20&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220920 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Params-Validate-1.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Params::Validate&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate method/function parameters &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.31&lt;/strong&gt; on 2022-10-22&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 1.30 was 2 years, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.130' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.130&lt;/strong&gt; on 2022-10-20&lt;/li&gt;  &lt;li&gt;Votes: 171&lt;/li&gt;  &lt;li&gt;Previous version: 0.124 was 1 month, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9657' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9657&lt;/strong&gt; on 2022-10-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9655 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-XS-0.025' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny::XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - provides an XS boost for some of Type::Tiny's built-in type constraints &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.025&lt;/strong&gt; on 2022-10-19&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.022 was 2 years, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/446203617544588183/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxv-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/446203617544588183"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/446203617544588183"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/cdxv-12-great-cpan-modules-released.html" title="(cdxv) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7335669636289382496</id>
    <published>2022-10-22T22:35:00.004+02:00</published>
    <updated>2022-10-22T22:35:31.342+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxviii) metacpan weekly report - Text::Table</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 48&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/Text::Table"&gt;Text::Table&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/10/22 20:34:40 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Apache::ParseLog" target="_blank"&gt;Apache::ParseLog&lt;/a&gt; - Object-oriented Perl extension for parsing Apache log files&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Gimei" target="_blank"&gt;App::Gimei&lt;/a&gt; - CLI for Data::Gimei&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Call::Context" target="_blank"&gt;Call::Context&lt;/a&gt; - Sanity-check calling context&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::FindDependencies" target="_blank"&gt;CPAN::FindDependencies&lt;/a&gt; - generate reports when modules' dependencies get new releases&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Gimei" target="_blank"&gt;Data::Gimei&lt;/a&gt; - a Perl port of Ruby's gimei generates fake data in Japanese.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPM::Tools" target="_blank"&gt;RPM::Tools&lt;/a&gt; - compare installed rpms with up-to-date distribution&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Inabajun::Utils" target="_blank"&gt;Acme::Inabajun::Utils&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=157)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=269)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Staticperl" target="_blank"&gt;App::Staticperl&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+1=99)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Page" target="_blank"&gt;Data::Page&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Section::Simple" target="_blank"&gt;Data::Section::Simple&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::ParameterizedJoinHack" target="_blank"&gt;DBIx::Class::ParameterizedJoinHack&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBM::Deep" target="_blank"&gt;DBM::Deep&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Size" target="_blank"&gt;Devel::Size&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GBK" target="_blank"&gt;GBK&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CookieJar" target="_blank"&gt;HTTP::CookieJar&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=104)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::AIO" target="_blank"&gt;IO::AIO&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Prime::Util" target="_blank"&gt;Math::Prime::Util&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mb::JSON" target="_blank"&gt;mb::JSON&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Usage" target="_blank"&gt;Memory::Usage&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minion" target="_blank"&gt;Minion&lt;/a&gt; (+1=90)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=475)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moo" target="_blank"&gt;Moo&lt;/a&gt; (+1=291)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl" target="_blank"&gt;Net::Curl&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl::Promiser" target="_blank"&gt;Net::Curl::Promiser&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IDN::Encode" target="_blank"&gt;Net::IDN::Encode&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::LastFM" target="_blank"&gt;Net::LastFM&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::XSRFBlock" target="_blank"&gt;Plack::Middleware::XSRFBlock&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Promise::ES6" target="_blank"&gt;Promise::ES6&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Raisin" target="_blank"&gt;Raisin&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Rex" target="_blank"&gt;Rex&lt;/a&gt; (+1=81)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RPM::Packager" target="_blank"&gt;RPM::Packager&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Deep" target="_blank"&gt;Test::Deep&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Iconv" target="_blank"&gt;Text::Iconv&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table" target="_blank"&gt;Text::Table&lt;/a&gt; (+2=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI" target="_blank"&gt;URI&lt;/a&gt; (+1=106)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Weather::GHCN::Fetch" target="_blank"&gt;Weather::GHCN::Fetch&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/X::Tiny" target="_blank"&gt;X::Tiny&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7335669636289382496/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxviii-metacpan-weekly-report-texttable.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7335669636289382496"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7335669636289382496"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/10/dxxviii-metacpan-weekly-report-texttable.html" title="(dxxviii) metacpan weekly report - Text::Table"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Dancer2: Template Tiny</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-10-19T08:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-template-tiny"/>  <id>https://perlmaven.com/dancer2-template-tiny</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Containers for Coverage</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/containers-for-coverage/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than <a href="https://perlhacks.com/2022/10/building-a-perlanet-container/">the Perlanet one</a> I wrote about a couple of weeks ago.</p>
<p>Several years ago I got into <a href="https://www.travis-ci.com/">Travis CI</a> and set up lots of <a href="https://github.com/davorg?tab=repositories">my GitHub repos</a> so they automatically ran the tests each time I committed to the repo. Later on, I also worked out how to tie those test runs into <a href="https://coveralls.io/">Coveralls.io</a> so I got pretty graphs of how my test coverage was looking. I gave <a href="https://www.slideshare.net/davorg/github-travisci-and-perl">a talk about what I had done</a>.</p>
<p>But two things changed.</p>
<p>Firstly, Travis CI got too popular and, eventually, removed their free service. And, secondly, <a href="https://github.com/features/actions">GitHub Actions</a> was introduced. Over the last few years, I’ve set up many of my repos to use GitHub Actions for CI. But, basically because I’m lazy, I didn’t remove the Travis CI configuration from those repos.</p>
<p>But last week I decided the time was right to start work on that. And when I went to remove the .travis.yml I realised that something was missing from my GitHub Actions CI workflows – they were running the unit tests, but they weren’t reporting on test coverage. So it was time to fix that.</p>
<p>I needed to reimplement the logic that connected Travis CI to Coveralls.io in a GitHub workflow. That actually turned out to be pretty simple. There’s a CPAN module called <a href="https://metacpan.org/pod/Devel::Cover::Report::Coveralls">Devel::Cover::Report::Coveralls</a> which takes the output from Devel::Cover, converts it to the correct format and sends it to Coveralls.io. And, as a bonus, it has documentation showing how to implement that in a GitHub workflow.</p>
<p>So I hacked at my workflow definition file for one of my CPAN modules and within a few minutes I had it working.</p>
<p>Well, I say “a few minutes”, but it took over thirteen minutes to run. It turns out that Devel::Cover::Report::Coveralls is a pretty heavyweight module and needs to install a lot of other modules in order to do its work.</p>
<p>At this point, you can probably guess where this is going. And you’d be right.</p>
<p>I’ve created a Docker container that has Devel::Cover::Report::Coveralls already installed. And, obviously, it’s available for everyone to use from the Docker hub – <a href="https://hub.docker.com/repository/docker/davorg/perl-coveralls">davorg/perl-coveralls</a>.</p>
<p>A couple of small adjustments to my GitHub workflow and the coverage job is now running on my new container – and takes 29 seconds instead of 13 minutes. So that’s a win.</p>
<p>The relevant section of my <a href="https://github.com/davorg/calendar-simple/blob/master/.github/workflows/perltest.yml">workflow file</a> is here:</p><pre class="urvanov-syntax-highlighter-plain-tag">coverage:
    runs-on: ubuntu-latest
    container: davorg/perl-coveralls:latest
    name: Test coverage
    steps:
      - uses: actions/checkout@v3
      - name: Install modules
        run: cpanm -n --installdeps .
      - name: Coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cover -test -report Coveralls</pre><p>And it’s producing nice graphs on Coveralls.io like the one above.</p>
<p>Let me know if you find it useful.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’ve been building Docker containers again. And I think you’ll find this one a little more useful than the Perlanet one I wrote about a couple of weeks ago. Several years ago I got into Travis CI and set up lots of my GitHub repos so they automatically ran the tests each time I committed… <a class="more-link" href="https://perlhacks.com/2022/10/containers-for-coverage/">Continue reading <span class="screen-reader-text">Containers for Coverage</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/containers-for-coverage/">Containers for Coverage</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2087</id>
    <published>2022-10-18T17:01:50Z</published>
    <updated>2022-10-18T17:01:50Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="coveralls.io"/>
    <category term="docker"/>
    <category term="test coverage"/>
    <category term="testing"/>
  </entry>
  <entry>
  <title>Board Updates October 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/octoberupdate2022"/>
  <id>tag:news.perlfoundation.org,2022-10-17:/post/octoberupdate2022</id>
  <published>2022-10-17T19:08:04</published>
  <updated>2022-10-17T19:08:04</updated>
  <summary>
  <![CDATA[
     Welcome Following nomination in July, 2022, The Perl Foundation is pleased to welcome Todd Rinaldo to the board. Todd has worked with the board for many years as a conference organizer, with the Grants Committee, and in other capacities. He is also a contributor to CPAN and Perl 5 Porters. During his board nomination interview, Todd expressed an interest in offering assistance in the Foundation's mission to help the community, 
   ]]>
  </summary>
  <author>
    <name>Amber Deuel</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Welcome</h2>

<p>Following <a href="https://news.perlfoundation.org/post/todd-rinaldo-nominated-for-board-position">nomination</a> in July, 2022, The Perl Foundation is pleased to welcome Todd Rinaldo to the board. Todd has worked with the board for many years as a conference organizer, with the Grants Committee, and in other capacities. He is also a contributor to CPAN and Perl 5 Porters.</p>

<p>During his board nomination interview, Todd expressed an interest in offering assistance in the Foundation's mission to help the community, stregthening communication between the steering councils and the board, and helping the board find ways they can support The Perl and Raku Conference going forward. </p>

<p>We are pleased to welcome Todd to the board. </p>

<h2>Farewell</h2>

<p>Nichola Evans has been a valuable member of the TPF team since 2020. During Nic's time with TPF she spearheaded the recent prospectus, organized all meetings and minutes, and served as the board's liason to the community. Recently Nic was helping run the Marketing and Sponsorship Committees, and she kept the community up to date with her articles on the TPF Blog. </p>

<p>Truly, Nic contributed more to the community than can be listed in one blog post. We will miss her dearly. </p>

    ]]>
  </content>
</entry>
  <entry>
  <title>CI for CPAN modules</title>
  <summary type="html"><![CDATA[<p>
After I read the editorial of <a href="https://perlweekly.com/archive/586.html">Perl Weekly issue 586</a> I though I should try to send
as many PR as I can to enable GitHub Actions on CPAN projects.
<p>
There is a whole series about <a href="/ci">why use CI and how to set up CI</a> and several <a href="/os">examples with videos</a>.
<p>
I started at <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>
<p>
]]></summary>
  <updated>2022-10-17T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/ci-for-cpan-modules"/>  <id>https://perlmaven.com/ci-for-cpan-modules</id>
  <content type="html"><![CDATA[<p>
After I read the editorial of <a href="https://perlweekly.com/archive/586.html">Perl Weekly issue 586</a> I though I should try to send
as many PR as I can to enable GitHub Actions on CPAN projects.
<p>
There is a whole series about <a href="/ci">why use CI and how to set up CI</a> and several <a href="/os">examples with videos</a>.
<p>
I started at <a href="https://cpan-digger.perlmaven.com/">CPAN Digger</a>
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#586 - Perl and Camel</title>
    <link rel="alternate" href="https://perlweekly.com/archive/586.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>This is my <strong>115th edition</strong> of the weekly newsletter. I know it is nothing as compared to the <strong>323 editions</strong> by the chief editor <strong>Gabor Szabo</strong>. I am very happy to have come this far, thanks to all the readers of the weekly newsletter for the support and encouragements. It took me <strong>4 years and 5 months</strong> to achieve this milestone.</p>
<p><strong>Please excuse me for the long-winded editorial this week to celebrate the occasion.</strong></p>
<p>As we all know <strong>Perl</strong> and <strong>Camel</strong> are  insperabale for years now. I still remember when I was first introduced to <strong>Perl</strong> in the late ninetees, we use to refer <strong>Perl</strong> books as <strong>Camel</strong> books. The association of <strong>Perl</strong> with the big publishing house like, <a href="https://www.oreilly.com">O'Reilly</a> is mostly responsible for the trend. Having said, there were few others too in the market but <strong>O'Reilly</strong> stood out among them. But we can't ignore the ground reality at the same time, for reasons known to most of all, the <strong>Perl</strong> books started disappearing from the book shelves in recent years. Talking about <strong>Perl</strong> books, we can't forget the service of <strong>brian d foy</strong>, <strong>Damian Conway</strong>, <strong>Curtis Poe</strong>, <strong>Dave Cross</strong>, <strong>Randall L. Schwartz</strong> and many more. Of all those, <strong>brian d foy</strong> still holding the ground as far as <strong>Perl</strong> is concerned in my humble opinion.</p>
<p><strong>Do you remember the announcement of Perl 7?</strong></p>
<p>I still remember, I watched the <a href="https://perlconference.us/tpc-2020-cloud">announcement</a> by <strong>Sawyer X</strong> and was very excited about it. But as you all know, it didn't turn out as planned. Let's not go there. Immediately after the announcement, <strong>brian d foy</strong> came up with the book, <a href="https://leanpub.com/preparing_for_perl7">Preparing for Perl 7</a>, published by <a href="https://perlschool.com/about">{Perl School}</a> run by <strong>Dave Cross</strong>. I was lucky to get the <strong>FREE</strong> copy of the book by <strong>brian d foy</strong>. I thoroughly enjoyed it as his many other <strong>Perl</strong> books. While collecting informations for this editorial, I noticed the book is now declared <strong>retired</strong>, unfortunately.</p>
<p>Fast forward, in the year <strong>2021</strong>, we got another book, <a href="https://leanpub.com/perl_new_features">Perl new features v5.10 to v5.34</a> by <strong>brian d foy</strong>. Once again, I was offered the book for <strong>FREE</strong> by the author. I would highly recommend this book to anyone who is new to <strong>Perl</strong> or even if you have used <strong>Perl</strong> for years. I found many new features that I wasn't aware of earlier. The best part is the explanation of each features with great examples. It makes it so easy to understand the topic. I read the book from start to end and came up with my own examples of some of the features mentioned in the book. Those who follow me on <a href="https://www.facebook.com/mohammad.s.anwar">Facebook</a>, <a href="https://twitter.com/cpan_author">Twitter</a> and <a href="https://www.linkedin.com/in/mohammadanwar">LinkedIn</a> knows that I ran daily feature series where I shared one feature with examples everyday. It is now documented for future reference in the form of <a href="https://github.com/manwar/perl-cool-snippets">GitHub repository</a> as suggested by <strong>Dave Cross</strong>.</p>
<p><strong>How many of you have read the book "Learning Perl"?</strong></p>
<p>I have during my early days of learning <strong>Perl</strong>. It was the main source of information for me. Keeping the tradition on, <strong>brain d foy</strong> alongwith <strong>Randall L. Schwartz</strong> and <strong>Tom Phoenix</strong> came up with the <a href="https://www.amazon.com/gp/product/1492094951">8th Edition</a>. This time, I was offered not <strong>one (1)</strong> but <strong>four (4)</strong> copies of the physical book with free delivery by the generous <strong>brian d foy</strong>. I picked four members of <strong>Team PWC</strong>(<a href="https://theweeklychallenge.org">The Weekly Challenge</a>) and hand it over the book, <strong>Learning Perl 8th edition</strong>. A very big thank you to <strong>brian d foy</strong> from the entire <strong>Team PWC</strong> members.</p>
<p><strong>Do you think it stopped there?</strong></p>
<p>Well, the short answer is <strong>"No"</strong>. Recently <strong>brian d foy</strong> contacted me and offered me <strong>50 coupons</strong> of his new creation <a href="https://leanpub.com/learning_perl_exercises">Learning Perl Exercises</a>. Honestly speaking, I didn't know about the book earlier. I have been giving <strong>one coupon</strong> every week to one lucky member of <strong>Team PWC</strong>. So far, I have already given <strong>10 coupons</strong>. If you are a <strong>Perl</strong> fan or new to <strong>Perl</strong> then why don't you <a href="https://theweeklychallenge.org/blog/how-to-contribute">join us</a> and learn from each other something new every week. Trust me, you will enjoy the journey.</p>
<p><strong>How well do I know brian d foy?</strong></p>
<p>Honestly speaking I haven't met him yet but would love to one day. My first interaction with him was in the year <strong>2010</strong> when I published my first distribution, <a href="https://metacpan.org/pod/Test::Excel">Test::Excel</a>. During those days, one need to get the namespace registered with <strong>PAUSE admins</strong>. He is one of the <strong>PAUSE admins</strong> that I happen to interact with. I still remember during the email conversation he mentioned that he liked my distribution and one day he would use it. Ever since, I have had many email conversation with on different occasions. I proudly remember one such occasion when <strong>brian d foy</strong> offered me to do interview series for <a href="https://www.perl.com">perl.com</a>. I happily accepted his offer without even blinking once. I did three interviews namely with <a href="https://www.perl.com/article/the-perl-ambassador-gabor-szabo">Gabor Szabo</a>, <a href="https://www.perl.com/article/the-perl-ambassador-curtis-poe">Curtis Poe</a> and <a href="https://www.perl.com/article/the-perl-ambassador-damian-conway">Damian Conway</a>. Unfortunately after that I got distracted and busy with other personal projects.</p>
<p><strong>Have you tried GitHub Workflow yet?</strong></p>
<p>Two names i.e. <strong>Gabor Szabo</strong> and <strong>Dave Cross</strong>  immediately come to my mind when talking about <strong>GitHub Workflow</strong>. In fact, <strong>Gabor Szabo</strong> seems to be on a mission to help <strong>CPAN</strong> modules to have workflow configured. Recently I published a new release of <a href="https://metacpan.org/pod/Test::CSS">Test::CSS</a>, the very next morning I noticed <a href="https://perlmaven.com/install-developer-dependencies-first-test-css">blog post</a> by him. I would highly recommend you to take a look at his <a href="https://perlmaven.com/os">other similar works</a>. Talking about <strong>GitHub Workflow</strong>, my colleague at work and friend, <strong>Julien Fiegehenn</strong>, wrote a detailed and thorough <a href="https://simbabque.github.io/posts/github-workflow-guide-for-modules">guide</a> on the topic, you really don't want to skip it.</p>
<p><strong>How many of you have completed the challenge of Hacktoberfest 2022?</strong></p>
<p>One thing I noticed this year, the pull request has to be accepted and merged for it to qualify. Now even after the pull request is accepted and merged, you still have to wait for another seven days review period. This year, I was lucky to receive the distribution, <a href="https://metacpan.org/pod/HTML::Form">HTML::Form</a> as my assignment for <strong>October</strong> as member of <a href="https://pullrequest.club/hello">Pull Request Club</a>. To my surprise, I noticed <strong>HTML::Form</strong> is participating in <strong>Hacktoberfest 2022</strong>. As of today, I have submitted <strong>2 Pull Requests</strong>. That means, I am done as far as my monthly assignment for <strong>Pull Request Club</strong>. With regard to the <strong>Hacktoberfest 2022</strong>, both the pull requests have been accepted and merged, thanks to <strong>Olaf Alders</strong>. One of them is passed the review period and other is still waiting. Although I submitted <strong>2 more pull requests</strong> but unfortunately they are not participating in <strong>Hacktoberfest 2022</strong>, although both have been accepted and merged. To qualify for <strong>FREE</strong> specially designed T-shirt, I still have to find a distribution and submit <strong>2 more</strong> pull requests. Wish me luck.</p>
<p><strong>Have you nominated your Perl Hero?</strong></p>
<p>If not then you still have chance to nominate your <strong>Perl Hero</strong>. Quick and easy to nominate is just commenting on this <a href="https://news.perlfoundation.org/post/nominate-2022-white-camel">official announcement</a> and giving the name with reasons. Easy, right?</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/586.html</id>
    <published>2022-10-17T10:00:00Z</published>
    <updated>2022-10-17T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Zippy Fast Dubious OCR Process</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/10/16#pwc186" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given two lists of the same size. Create a subroutine sub zip() that 
merges the two lists.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use v5.36;
use strict;
use warnings;

sub zip($a, $b){
    return map { $a-&gt;[$_], $b-&gt;[$_] } 0 .. @$a - 1;
}

MAIN:{
    print join(", ", zip([qw/1 2 3/], [qw/a b c/])) . "\n";
    print join(", ", zip([qw/a b c/], [qw/1 2 3/])) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
1, a, 2, b, 3, c
a, 1, b, 2, c, 3
</code></pre>

<h3>Notes</h3>

<p>The solution here is basically that one line <code>map</code>. Since we know that the lists
are of the same size we can map over the array indices and then construct the
desired return list directly.</p>

<h2>Part 2</h2>

<p><em>You are given a string with possible unicode characters. Create a subroutine 
sub makeover($str) that replace the unicode characters with their ascii equivalent.
For this task, let us assume the string only contains letters.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use utf8;
use v5.36;
use strict;
use warnings;
##
# You are given a string with possible unicode characters. Create a subroutine 
# sub makeover($str) that replace the unicode characters with their ascii equivalent.
# For this task, let us assume the string only contains letters.
##
use Imager;
use File::Temp q/tempfile/;
use Image::OCR::Tesseract q/get_ocr/;

use constant TEXT_SIZE =&gt; 30;
use constant FONT =&gt; q#/usr/pkg/share/fonts/X11/TTF/Symbola.ttf#;

sub makeover($s){
    my $image = Imager-&gt;new(xsize =&gt; 100, ysize =&gt; 100);
    my $temp = File::Temp-&gt;new(SUFFIX =&gt; q/.tiff/);
    my $font = Imager::Font-&gt;new(file =&gt; FONT) or die "Cannot load " . FONT . " ", Imager-&gt;errstr;
    $font-&gt;align(string =&gt; $s,
                 size =&gt; TEXT_SIZE,
                 color =&gt; q/white/,
                 x =&gt; $image-&gt;getwidth/2,
                 y =&gt; $image-&gt;getheight/2,
                 halign =&gt; q/center/,
                 valign =&gt; q/center/,
                 image =&gt; $image
    );
    $image-&gt;write(file =&gt; $temp) or die "Cannot save $temp", $image-&gt;errstr;
    my $text = get_ocr($temp);
    return $text;
}


MAIN:{
    say makeover(q/ Ã Ê Í Ò Ù /);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
EIO



</code></pre>

<h3>Notes</h3>

<p>First I have to say upfront that this code doesn't work all that well for the problem
at hand! Rather than modify it to something that works better I thought I would
share it as is. It's intentionally ridiculous and while it would have been great
if it worked better I figure it's worth taking a look at anyway.</p>

<p>So, my idea was:</p>

<ul>
<li>take the input text and generate an image
</li>
<li>ocr the image
</li>
<li>the ocr process would ignore anything non-text (emojis and other 
symbols)
</li>
<li>the ocr process would possibly ignore the accent marks
</li>
</ul>

<p>I wasn't so sure about that last one. A good ocr should maintain the true 
letters, accents and all. Tesseract, the ocr engine used here, claims to support
Unicode and "more than 100 languages" so it should have reproduced the original
input text, except that it didn't. In fact, for a variety of font sizes and letter
combinations it never detected the accents. While I would be frustrated if I wanted
that feature to work well, I was happy to find that it did not!</p>

<p>Anyway, to put it mildly, it's clear that this implementation is fragile for the task at hand!
In other ways it's pretty solid though. Imager is a top notch image manipulation module
that does the job nicely here. Image::OCR::Tesseract is similarly a high quality
wrapper around the Tesseract ocr engine. Tesseract itself is widely accepted as being
world class. My lack of a great result here is mainly due to my intentional misuse
of these otherwise fine tools!</p>

<h2>References</h2>

<p><a href="https://metacpan.org/pod/Imager">Imager</a></p>

<p><a href="https://metacpan.org/pod/Image::OCR::Tesseract">Image::OCR::Tesseract</a></p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-186/">Challenge 186</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc186</id>
    <published>2022-10-16T22:38:00-04:00</published>
    <updated>2022-10-16T22:38:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Dancer2: Upload file</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></summary>
  <updated>2022-10-13T07:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-upload-file"/>  <id>https://perlmaven.com/dancer2-upload-file</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Not that PR, thanks</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/not-that-pr-thanks/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s October. And that means that <a href="https://hacktoberfest.com/">Hacktoberfest</a> has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt.</p>
<p>In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can be a bit of a pain in the arse. Some people go crazy for a free t-shirt and that means you’ll almost certainly get several pull requests that aren’t really of the quality you’d hope for.</p>
<p>I have a particular problem that probably isn’t very common. I’ve talked before about the “semi-static” sites I run on GitHub Pages. There’s some data in a GitHub Repo and every couple of hours the system wakes up and runs some code which generates a few HTML pages and commits those HTML pages into the repo’s “/docs” directory. And – hey presto! – there’s a new version of your web site.</p>
<p>A good example is <a href="https://perl.theplanetarium.org/">Planet Perl</a>. The data is a YAML file which mostly consists of a list of web feeds. Every couple of hours we run <a href="https://metacpan.org/dist/Perlanet/view/bin/perlanet">perlanet</a> to pull in those web feeds and build a new version of the web site containing the latest articles about Perl.</p>
<p>Can you see what the problem is?</p>
<p>The problem is that the most obvious file in the repo is the “index.html” which is the web site. So when people find that repo and want to make a small change to the web site they’ll change that “index.html” file. But that file is generated. Every few hours, any changes to that file are overwritten as a new version is created. You actually want to change “index.tt”. But that uses <a href="https://metacpan.org/dist/Template-Toolkit/view/lib/Template/Manual/Directives.pod">Template Toolkit syntax</a>, so it’s easy enough to see why people with no Perl knowledge might want to avoid editing that.</p>
<p>The <a href="https://github.com/davorg/planetperl/blob/master/README.md">README file</a> for the project explains which files you might want to change in order to make different types of changes. But people don’t read that. Or, if they do read it, they ignore the bits that they don’t like.</p>
<p>So I get pull requests that I have to reject because they change the wrong files.</p>
<p>Last year I got enough of these problematic pull requests that I decided to automate a solution. And it’s <a href="https://github.com/davorg/planetperl/blob/master/.github/workflows/reject-pr.yml">this pretty simple GitHub Workflow</a>. It runs whenever my repo receives a pull request and looks at the files that have been changed. If that list of files includes “docs/index.html” then the PR is automatically closed with a polite message explaining what they’ve done wrong.</p>
<p>This makes my life easier. It’s possible it might make your life easier too.</p>
<p> </p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Not that PR, thanks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>It’s October. And that means that Hacktoberfest has started. If you can get four pull requests accepted on other people’s code repositories during October then you can win a t-shirt. In many ways, I think it’s a great idea. It encourages people to get involved in open source software. But in other ways, it can… <a class="more-link" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Continue reading <span class="screen-reader-text">Not that PR, thanks</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/not-that-pr-thanks/">Not that PR, thanks</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2082</id>
    <published>2022-10-10T16:01:43Z</published>
    <updated>2022-10-10T16:01:43Z</updated>
    <category term="Miscellaneous"/>
    <category term="github"/>
    <category term="github actions"/>
    <category term="pull request"/>
    <category term="semi-static sites"/>
    <category term="workflow"/>
  </entry>
  <entry>
    <title>#585 - Handle your Pull-Requests, please!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/585.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>I know you are busy with tons of stuff and I know that as an Open Source developer you are most likely just a volunteer, but so are the people who send you Pull-Requests. It is very unpleasant to do the work, even if it small, send the pull-request and then never hear from the author any more.</p>
<p>Looking at my GitHub profile, apparently I created 600 Pull-requests, 530 of them are closed but 70 are still open. Some of them are open since 2011, that is 11 years ago. Some are as small as changing http to https in a URL, accepting (or rejecting) them should not take more than a few second. Finding them might be harder as GitHub does not seem to have a button for that, but you can easily search for them as you can see in my post <a href="https://code-maven.com/github-pull-requests-waiting-for-me">Listing Pull-request waiting for a user</a>.</p>
<p>So I'd like to ask you to check if there are any <a href="https://code-maven.com/github-pull-requests-waiting-for-me">Pull-Requests waiting for you</a> and try to clean up the queue.</p>
<p>Hacktoberfest: If you receive a Pull-request during October, if you like it, accept it and consider marking it according to the <a href="https://hacktoberfest.com/participation/#maintainers">instructions for maintainers</a> so the PR will be accepted. (Hacktoberfest recognized 11 PRs I sent since registering, none of the repos are marked as participating. I am not sending the PRs for Hacktoberfest, but it would be encouraging to get the recognition.)</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/585.html</id>
    <published>2022-10-10T10:00:00Z</published>
    <updated>2022-10-10T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Building a Perlanet Container</title>
    <link rel="alternate" href="https://perlhacks.com/2022/10/building-a-perlanet-container/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain <a href="https://metacpan.org/pod/perlanet">perlanet</a> (a Perl program for aggregating web feeds into a new feed – and building a web site based on that new feed) and I use it to build <a href="https://theplanetarium.org/">a few sites on topics I’m interested in</a>.</p>
<p>Last year, I worked out a way to use GitHub Actions to <a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g">rebuild these sites automatically</a> every few hours – thereby enabling me to host the sites on GitHub Pages (I still think it’s a useful technique, but I sometimes worry slightly about the large number of commits those repos have – someone at GitHub must surely notice one day!)</p>
<p>Yesterday, I was doing some light maintenance on one of those sites when I realised that each rebuild of these sites was taking a significant time (by which I mean four or five minutes) and started wondering if there was a way to speed them up and use less of GitHub’s resources. The problem is that Perlanet is a pretty hefty module and each rebuild was installing that module (and, therefore, dozens of other modules) on a pristine Ubuntu container.</p>
<p>When you say it like that, the solution is obvious.</p>
<p>You don’t need to run your GitHub Actions on the standard containers that GitHub supplies. You can run them on any container that’s available from any public container hosting service. So the solution was to build a Perlanet container and run the jobs using that instead. So that’s how I spent an hour or so yesterday.</p>
<p>Here’s the Dockerfile I ended up with:</p><pre class="urvanov-syntax-highlighter-plain-tag">FROM perl:latest

RUN apt-get update &amp;&amp; \
    apt-get -y upgrade &amp;&amp; \ 
    apt-get install -y build-essential &amp;&amp; \
    apt-get install -y cpanminus libtidy-dev libxml++2.6-dev libhtml-tidy-perl &amp;&amp; \
    cpanm --notest Test::Exception &amp;&amp; \
    cpanm --notest Perlanet &amp;&amp; \
    cpanm --notest LWP::Protocol::https</pre><p>It’s (obviously) <a href="https://github.com/davorg/perl-perlanet-docker">available on GitHub</a> in case anyone wants to improve on my rather ropey knowledge of Docker.</p>
<p>I explicitly install Test::Exception because HTML::Tidy (one of Perlanet’s pre-requisites) needs it and I can’t work out why the standard installation procedure isn’t installing it. And while, LWP::Protocol::https is, strictly speaking, not required by Perlanet, you wouldn’t get very far on the modern web if you only accessed web feeds that are available over HTTP.</p>
<p>A little bit of Docker Hub set-up and the container is <a href="https://hub.docker.com/r/davorg/perl-perlanet">available for everyone to use</a> (and rebuilt automatically whenever I commit to the repo).</p>
<p>It was then just a case of changing my GitHub Actions to use my container. Here’s an example of <a href="https://github.com/davorg/planetdavorg/commit/5b65ce407e89dd16e74ad4b417b104c43dca96ef">one of the commits</a> that did that.</p>
<p>I realise I’m pretty late to the party here, but I think this is a useful pattern. If you have a Perl library (or, indeed, any other software) that exists to provide a service to users then it’s a great idea to provide a containerised version of that software.</p>
<p>And I’m happy to report that my site rebuilds have gone from 4-5 minutes to about 45 seconds.</p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Building a Perlanet Container</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>I’m a dinosaur who still believes that web feeds are a pretty neat idea. I wrote and maintain perlanet (a Perl program for aggregating web feeds into a new feed – and building a web site based on that new feed) and I use it to build a few sites on topics I’m interested in.… <a class="more-link" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Continue reading <span class="screen-reader-text">Building a Perlanet Container</span></a></p>
<p>The post <a rel="nofollow" href="https://perlhacks.com/2022/10/building-a-perlanet-container/">Building a Perlanet Container</a> appeared first on <a rel="nofollow" href="https://perlhacks.com">Perl Hacks</a>.</p>
</div>
    </summary>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://perlhacks.com/?p=2076</id>
    <published>2022-10-06T09:43:46Z</published>
    <updated>2022-10-06T09:43:46Z</updated>
    <category term="Packaging"/>
    <category term="container"/>
    <category term="docker"/>
    <category term="packaging"/>
    <category term="perlanet"/>
    <category term="semi-static"/>
  </entry>
</feed>
