<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-09-14T01:01:32Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>An artistic tool for programmers.</title>
    <link rel="alternate" href="http://blogs.perl.org/users/lichtkind/2022/09/an-artistic-tool-for-programmers.html"/>
    <id>tag:blogs.perl.org,2022:/users/lichtkind//275.10891</id>
    <published>2022-09-14T00:49:54Z</published>
    <updated>2022-09-14T04:01:52Z</updated>
    <author>
        <name>lichtkind</name>
        <uri>http://www.lichtkind.de/</uri>
    </author>
    <category term="WxPerl" scheme="http://www.sixapart.com/ns/types#category"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/lichtkind/">
        <![CDATA[<p>I just release <a href="https://metacpan.org/pod/App::GUI::Harmonograph">App::GUI::Harmonograph</a> for your leisure and pleasure. In case your not not an English noble man form the 18th century who could afford an Harmonograph, even though modern DIY kits are <a href="https://www.etsy.com/de/listing/962732654/harmonograph-bauplan?ga_order=most_relevant&ga_search_type=all&ga_view_type=gallery&ga_search_query=harmonograph&ref=sr_gallery-1-3">quite affordable</a>, it is a set of set of 3 independent pendula, which move a pen and and paper to create harmonious drawings, of sometimes extraordinary elegance and richness. I got the impulse and knowledge of the apparatus from <a href="https://woodenbooks.com/index.php?id_cms=8&controller=cms#!HMG">this book</a> and refer for more background  details to this publication. However, the documentation (which is also displayed by the program itself) is much more of practical use, because the WxPerl version is greatly enhanced in possibilities, not in the least for dotted lines with variable density an additional rotation movement and flowing colors.</p>

<p>It is a satisfying feeling to play with the knobs (and there are many, some say too many but a GUI cleanup might come) guided by you intuition and interest to create something unique and beautiful saved in a PNG, JPG or SVG file. You might even save you settings in an ini file for later refinement. as well there is a mechanism to ease the mass production of pictures.</p>

<p>The distro only relies on several semi core modules (Carp, File::Spec, File::HomeDir) and WxPerl, If you have issues installing that, Citrus Perl is still out there and I hope the revivification of strawberry Perl might be also a help on that front.</p>

<p><img alt="wirbel.jpg" src="http://blogs.perl.org/users/lichtkind/wirbel.jpg" width="600" height="600" class="mt-image-none" style="" /></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 182:  Max Index and Common Path</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/09/perl-weekly-challenge-182-max-index-and-common-path.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10893</id>
    <published>2022-09-13T21:41:03Z</published>
    <updated>2022-09-13T21:42:21Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 182 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-182/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Sept. 18, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Max Index</h2>

<p><em>You are given a list of integers.</em></p>

<p><em>Write a script to find the index of the first biggest number in the list.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: @n = (5, 2, 9, 1, 7, 6)
Output: 2 (as 3rd element in the list is the biggest number)

Input: @n = (4, 2, 3, 1, 5, 0)
Output: 4 (as 5th element in the list is the biggest number)
</code></pre>

<h3>Max Index in Raku</h3>

<p>The initial idea here was to to store the input data into a hash and to use the <a href="https://docs.raku.org/routine/max">max</a> routine to find the maximum value. The <code>max</code> documentation says:</p>

<blockquote>
  <p>Coerces the invocant to Iterable and returns the numerically largest element; in the case of Hashes, the Pair with the highest value.</p>
</blockquote>

<p>But that did not work properly in my tests: <code>max</code> consistently appeared to return the pair with the highest key, not the highest value. I tried to use the <a href="https://docs.raku.org/routine/maxpairs">maxpairs</a> routine, which, according to the documentation, </p>

<blockquote>
  <p>returns a Seq with all of the Pairs with maximum value. </p>
</blockquote>

<p>The <code>maxpairs</code> method works as expected. This leads to a very short program:</p>

<pre><code>for (5, 2, 9, 1, 7, 6), (4, 2, 3, 1, 5, 0) -&gt; @test {
    my %nums = @test.kv;
    say "@test[] : ", %nums.maxpairs;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./max-index.raku
5 2 9 1 7 6 : (2 =&gt; 9)
4 2 3 1 5 0 : (4 =&gt; 5)
</code></pre>

<h3>Max Index in Perl</h3>

<p>In Perl, we use a standard <code>for</code> loop to traverse the input list and find the index of the largest value:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

for my $test ([5, 2, 9, 1, 7, 6], [4, 2, 3, 1, 5, 0]) {
    my @nums = @{$test};
    my ($max_i, $max_n) = (0, 0);
    for my $i (0..$#nums) {
        if ($nums[$i] &gt; $max_n) {
            $max_n = $nums[$i];
            $max_i = $i;
        }
    }
    say "@nums : $max_i =&gt; $max_n";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./max-index.pl
5 2 9 1 7 6 : 2 =&gt; 9
4 2 3 1 5 0 : 4 =&gt; 5
</code></pre>

<h2>Task 2: Common Path</h2>

<p><em>Given a list of absolute Linux file paths, determine the deepest path to the directory that contains all of them.</em></p>

<p><em>Example:</em></p>

<pre><code>Input:
    /a/b/c/1/x.pl
    /a/b/c/d/e/2/x.pl
    /a/b/c/d/3/x.pl
    /a/b/c/4/x.pl
    /a/b/c/d/5/x.pl

Ouput:
    /a/b/c
</code></pre>

<h3>Common Path in Raku</h3>

<p>This program converts the input into an array of arrays and then compares each item of the first line with the corresponding item of the other lines. The program stops as soon as a difference is found.</p>

<pre><code>my @input = qw &lt;
    /a/b/c/1/x.pl
    /a/b/c/d/e/2/x.pl
    /a/b/c/d/3/x.pl
    /a/b/c/4/x.pl
    /a/b/c/d/5/x.pl
    &gt;;

my @paths = gather {
    for @input &lt;-&gt; $line {
        $line ~~ s/^'/'//;
        my @subpaths = split /'/'/, $line;
        take @subpaths[0..*-2];
    }
}
my $end = @paths.end;
my $k = 0;
OUTLOOP: for 0..(@paths[0].end) -&gt; $i {
    for 0..$end -&gt; $j {
        if @paths[$j][$i]:!exists or @paths[$j][$i] ne @paths[0][$i] {
            $k = $i - 1;
            last OUTLOOP;
        }
    }
}
say '/', join '/', @paths[0][0..$k];
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./common-path.raku
/a/b/c
</code></pre>

<h3>Common Path in Perl</h3>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @input = qw &lt;
    /a/b/c/1/x.pl
    /a/b/c/d/e/2/x.pl
    /a/b/c/d/3/x.pl
    /a/b/c/4/x.pl
    /a/b/c/d/5/x.pl
    &gt;;

my @paths;
for my $line (@input) {
    $line =~ s|^/||;
    my @subpaths = split /\//, $line;
    push @paths, [@subpaths[0..$#subpaths-1]];
}

my @first = @{$paths[0]};
my $end = $#paths;
my $k = 0;
OUTLOOP: for my $i (0..$#first) {
    for my $j (0..$end) {
        if ((not exists $paths[$j][$i]) or $paths[$j][$i] ne $first[$i]) {
            $k = $i - 1;
            last OUTLOOP;
        }
    }
}
say '/', join '/', @first[0..$k];
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./common-path.pl
/a/b/c
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on September 25, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Emacs Lisp, Erlang, Excel VBA, Fennel, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-09-13T00:00:00Z</published>
    <updated>2022-09-13T00:00:00Z</updated>
  </entry>
  <entry>
    <title>#581 - What to write about?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/581.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>People often tell me that they don't know what to write about or that they are too new to Perl to blog about anything. Let's see.</p>
<p>Last week I posted this article about <a href="https://perlmaven.com/ansi-command-line-colors-with-perl">ANSI command line colors with Perl</a>. It hardly has anything to do with Perl, but I needed it and it can be a useful to others as well. Actually it originated from a discussion I had with my son who is using Python. So first I wrote the article <a href="https://code-maven.com/ansi-command-line-colors-with-python">ANSI colors using Python</a> and only after that I converted it to Perl.</p>
<p>It did not require any deep knowledge, definitely not that of Python or Perl.</p>
<p>So if you would like to try writing articles, there are plenty of such small subjects one can cover.</p>
<p>After including the link in the previous edition of the Perl Weekly, Thomas Köhler contacted me saying that he would do it differently and then he posted a short article showing how would he use <a href="http://gott-gehabt.de/800_wer_wir_sind/thomas/Homepage/Computer/perl/ansi-colors.html">ANSI colors in Perl</a> including a link back to the original article.</p>
<p>This is excellent.</p>
<p>So here is a suggestion: If you don't have an idea for an article, pick one of the <a href="https://perlmaven.com/">Perl Maven</a> posts and write a different solution or extend the subject and send a link to us, the editors of the Perl Weekly.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/581.html</id>
    <published>2022-09-12T10:00:00Z</published>
    <updated>2022-09-12T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>How does SPVM resolve the problems of Perl numeric operations?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/yuki_kimoto/2022/09/how-does-spvm-resolve-perl-numeric-operation-problems.html"/>
    <id>tag:blogs.perl.org,2022:/users/yuki_kimoto//2020.10892</id>
    <published>2022-09-12T02:58:49Z</published>
    <updated>2022-09-12T03:02:30Z</updated>
    <author>
        <name>Yuki Kimoto</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/yuki_kimoto/">
        <![CDATA[<p>How does SPVM resolve the problems of Perl numeric operations?</p>

<p>I hear Perl have the problems of numeric operation.</p>

<p>I realized this problems, and try to resolve them using <a href="https://metacpan.org/pod/SPVM">SPVM</a>. (SPVM is yet experimental release).</p>

<h2>What is SPVM?</h2>

<p>SPVM is a programing language to provide fast static-typed numeric operation and array operations into Perl.</p>

<p>I'm writing <a href="https://metacpan.org/dist/SPVM/view/lib/SPVM/Document/Language.pm">SPVM Language Specification</a> now.</p>

<p>Do you want to use static typed numeric arrays(byte[], short[], int[], long[], float[], double[]) in Perl? You can write these using SPVM.</p>

<pre>
# lib/SPVM/MyArray.spvm
class MyArray {
  static method array_add_int : int[] ($array1 : int[], $array2 : int[]) {
    my $array_length = @$array1;
    my $array_out = new int[$array_length];
    
    for (my $i = 0; $i < $array_length; $i++) {
      $array_out->[$i] = $array1->[$i] + $array2->[$i];
    }
    return $array_out;
  }
}
</pre>

<pre>
# my_array.pl

<p>use FindBin;<br />
use lib "$FindBin::Bin/lib";<br />
use SPVM 'MyArray';</p>

<p>my $array_out = SPVM::MyArray->array_add_int([1, 2, 3], [4, 5, 6]);</p>

<p># 5, 7, 9<br />
warn "@$array_out";<br />
</pre></p>]]>
        
    </content>
</entry>
  <entry>
    <title>Saving Perl packages through local</title>
    <link rel="alternate" href="http://blogs.perl.org/users/den/2022/09/saving-perl-packages-local.html"/>
    <id>tag:blogs.perl.org,2022:/users/den//4168.10890</id>
    <published>2022-09-12T01:34:26Z</published>
    <updated>2022-09-12T01:48:23Z</updated>
    <author>
        <name>Den</name>
        <uri>https://den.yt/</uri>
    </author>
    <category term="General" scheme="http://www.sixapart.com/ns/types#category"/>
    <category term="local" label="local" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/den/">
        <![CDATA[In Perl there is an expression <strong>local</strong>. It substitutes the specified value with undef until the end of the block. The values can be global hashes, arrays and scalars, as well as elements or slices of hashes and scalars.

The problem is that package hashes are not saved by local.

By package hashes I mean a hash with a colon at the end (%Package::) which stores the package symbols (GLOB).

<pre><code>
package A {
  sub fn {}
  $x = 10;
  @x = qw(1 2);
}

use DDP;
p %A::  # -> {
        #    fn   *A::fn  (layers: ),
        #    x    *A::x  (layers: )
        # }
</code></pre>

Here @x and $x are in the same globe - *A::x.

They can be accessed as follows:

<pre><code>
package A {
	sub fn {}
	$x = 10;
	@x = qw(1 2);
}

$\ = "\n"; $, = ", ";

print $A::x, ${ *A::x{SCALAR} }, ${ *{ $A::{x} }{SCALAR} }; 
# -> 10, 10, 10
print @A::x, @{ *A::x{ARRAY} }, @{ *{ $A::{x} }{ARRAY} }; 
# -> 1, 2, 1, 2, 1, 2
</code></pre>







]]>
        
    </content>
</entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #175</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-175/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 175 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would come from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-175/</id>
    <published>2022-09-12T00:00:00Z</published>
    <updated>2022-09-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Meet The Champion: August 2022</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/meet-the-champion-2022-08/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Get to know about Stephen G. Lynn. Welcome to the monthly series Meet The Champion.
Last month we spoke to Marton Polgar, the winner of July 2022.
Today we are talking to Stephen G. Lynn, the winner of August 2022 of The Weekly Challenge. I hope you are going to enjoy the interview.
 Mohammad: Tell us about your technical background?
Stephen: I am a non-CS academic, mostly teaching-focused these days.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/meet-the-champion-2022-08/</id>
    <published>2022-09-12T00:00:00Z</published>
    <updated>2022-09-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 181</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-181/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-181/</id>
    <published>2022-09-12T00:00:00Z</published>
    <updated>2022-09-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 182</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-182/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Max Index 10. TASK #2: Common Path HEADLINES  Welcome to Week #182 of the weekly challenge.
Today, we are giving away Token #5 to Solathian for the book, Learning Perl Exercises by brian d foy. I will share the details with you in a separate email.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-182/</id>
    <published>2022-09-12T00:00:00Z</published>
    <updated>2022-09-12T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 181:  Sentence Order and Hot day</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/09/perl-weekly-challenge-181-sentence-order-and-hot-day.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10887</id>
    <published>2022-09-06T18:38:33Z</published>
    <updated>2022-09-11T22:36:52Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 181 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-181/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on Sept. 11, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Sentence Order</h2>

<p><em>You are given a paragraph.</em></p>

<p><em>Write a script to order each sentence alphanumerically and print the whole paragraph.</em></p>

<p><em>Example:</em></p>

<pre><code>Input:
    All he could think about was how it would all end. There was
    still a bit of uncertainty in the equation, but the basics
    were there for anyone to see. No matter how much he tried to
    see the positive, it wasn't anywhere to be seen. The end was
    coming and it wasn't going to be pretty.

Ouput:
    about All all could end he how it think was would. a anyone
    basics bit but equation, for in of see still the the There
    there to uncertainty was were. anywhere be he how it matter
    much No positive, see seen the to to tried wasn't. and be
    coming end going it pretty The to was wasn't.
</code></pre>

<p>Splitting the paragraph into sentences and then splitting the sentences into words and reordering them in alphabetic order is order is the easiest part, outputting the result in lines with approximately equal lengths is slightly more difficult.</p>

<h3>Sentence Order in Raku</h3>

<p>We split the input into sentences, and then split each sentence into words, reorder the words into the alphabetic order of their lower-case equivalent, and store each word in the <code>@words</code> array. Once this is completed, we put each word in turn into a string (<code>$line</code>). Once the string reaches a predefined length, we print out the string and continue with a new empty string.</p>

<pre><code>constant $MAX = 55;

my $paragraph = q:to/END/;
    All he could think about was how it would all end. There was
    still a bit of uncertainty in the equation, but the basics
    were there for anyone to see. No matter how much he tried to
    see the positive, it wasn't anywhere to be seen. The end was
    coming and it wasn't going to be pretty.
    END

my @words;
for $paragraph.split(/'.'/) -&gt; $sentence {
    next if $sentence ~~ /^\s*$/;   # remove any empty line
    @words.append(sort { $_.lc }, $sentence.split(/\s/));
    @words[*-1] ~= ".";
}
my $line = "";
for @words -&gt; $w {
    $line ~= "$w ";
    if $line.chars &gt; $MAX {
        say $line;
        $line = "";
    }
}
say $line;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./sentence-order.raku
about All all could end he how it think was would.  a anyone
basics bit but equation, for in of see still the the There
there to uncertainty was were.  anywhere be he how it matter
much No positive, see seen the to to tried wasn't.  and
be coming end going it pretty The to was wasn't.
</code></pre>

<h3>Sentence Order in Perl</h3>

<p>We do essentially the same as in Raku: we split the input paragraph into sentences, and then split each sentence into words, reorder the words into the alphabetic order of their lower-case equivalent, and store each word in the <code>@words</code> array. Once this is completed, we put each word and a space in turn into a string (<code>$line</code>). Once the string reaches a predefined length, we print out the string and continue with a new empty string.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;
use constant MAX =&gt; 55;

my $paragraph = &lt;&lt;'END';
All he could think about was how it would all end. There was
still a bit of uncertainty in the equation, but the basics
were there for anyone to see. No matter how much he tried to
see the positive, it wasn't anywhere to be seen. The end was
coming and it wasn't going to be pretty.
END

my @words;
for my $sentence (split /\./, $paragraph) {
    next if $sentence =~ /^\s*$/;   # remove any empty line
    push @words, (sort { lc $a cmp lc $b } split /\s+/, $sentence);
    $words[-1] .= ".";
}
my $line = "";
for my $w (@words) {
    $line .= "$w ";
    if (length $line &gt; MAX) {
        say $line;
        $line = "";
    }
}
say $line;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./sentence-order.pl
about All all could end he how it think was would.  a anyone
basics bit but equation, for in of see still the the There
there to uncertainty was were.  anywhere be he how it matter
much No positive, see seen the to to tried wasn't.  and
be coming end going it pretty The to was wasn't.
</code></pre>

<h2>Task 2: Hot Day</h2>

<p><em>You are given file with daily temperature record in random order.</em></p>

<p><em>Write a script to find out days hotter than previous day.</em></p>

<p><em>Example:</em></p>

<pre><code>Input File: (temperature.txt)

2022-08-01, 20
2022-08-09, 10
2022-08-03, 19
2022-08-06, 24
2022-08-05, 22
2022-08-10, 28
2022-08-07, 20
2022-08-04, 18
2022-08-08, 21
2022-08-02, 25

Output:
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
</code></pre>

<p>For our tests, we&#8217;ll use the <code>temperature.txt</code> file with the data provided above in the task specification.</p>

<h3>Hot Day in Raku</h3>

<p>We read the input file and store the data into an array of arrays, <code>@daily-temps</code>. We then sort the array in ascending dates and output those where the temperature is more that the previous day temperature.</p>

<pre><code>my @daily-temps;
for './temperature.txt'.IO.lines -&gt; $line {
    push @daily-temps, split /','\s/, $line;
}
my $temp = Inf;
for @daily-temps.sort({$^a leg $^b}) -&gt; @record {
    say @record[0] if @record[1] &gt; $temp;
    $temp = @record[1];
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./hot-day.raku
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
</code></pre>

<h3>Hot Day in Perl</h3>

<p>Again, this a simple port to Perl of the Raku program above. Please refer to the previous section if you need any explanations.</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my @daily_temps;
my $file_in = "./temperature.txt";
open my $IN, "&lt;", $file_in or die "Cannot open $file_in $!";
while (my $line = &lt;$IN&gt;) {
    chomp $line;
    push @daily_temps, [ split /,\s/, $line ];
}
my $temp = 1e9;
for my $record (sort {$a-&gt;[0] cmp $b-&gt;[0]} @daily_temps) {
    say $record-&gt;[0] if $record-&gt;[1] &gt; $temp;
    $temp = $record-&gt;[1];
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl hot-day.pl
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
</code></pre>

<h3>Hot Day in Awk</h3>

<p>It is possible to sort an array in awk, but, in the Unix (and awk) philosophy, it is better to use the Unix <code>sort</code> function to sort the input before it is passed through a pipe to the awk program, so that we don&#8217;t even need to use an array and can process each input line in turn and print the dates that satisfy the temperature condition. This leads to a very short and concise program.</p>

<pre><code># Run as: sort temperature.txt | awk -f hot-day.awk
BEGIN {
    temp = 1000
    FS = ", "
}
{
    if ($2 &gt; temp) {
        print $1
    }
    temp = $1
}
</code></pre>

<p>Output:</p>

<pre><code>$ sort ./temperature.txt | awk -f ./hot-day.awk
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
</code></pre>

<h3>Hot Day in Julia</h3>

<pre><code>fh = open("./temperature.txt", "r")
lines = readlines(fh)
sorted_lines = sort(lines)
temp = 100000
for line in sorted_lines
    (date, temp_str) = split(line, ", ")
    curr_temp = parse(Int64, temp_str)
    if curr_temp &gt; temp
        println(date)
    end
    global temp = curr_temp
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./hot-day.jl
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
</code></pre>

<h3>Hot Day in Python</h3>

<pre><code>lines = []
file_in = "./temperature.txt"
fh = open(file_in, "r")
for line in fh:
    line.rstrip()
    lines.append(line)
lines.sort();
temp = 1e9
for line in lines:
    fields = line.split(',')
    cur_temp = int(fields[1].strip())
    if cur_temp &gt; temp:
        print(fields[0])
    temp = cur_temp
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./hot-day.py
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on September 18, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>These Sentences Are Getting Hot</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/09/11#pwc181" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a paragraph. Write a script to order each sentence alphanumerically and 
print the whole paragraph.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

sub sort_paragraph{
    my($paragraph) = @_;
    my @sentences = split(/\./, $paragraph); 
    for(my $i = 0; $i &lt; @sentences; $i++){
        $sentences[$i] = join(" ", sort {uc($a) cmp uc($b)} split(/\s/, $sentences[$i]));
    }
    return join(".", @sentences);
}

MAIN:{
    my $paragraph = do{
        local $/;
        &amp;lt;DATA&amp;gt;;
    };
    print sort_paragraph($paragraph);
}

__DATA__
All he could think about was how it would all end. There was
still a bit of uncertainty in the equation, but the basics
were there for anyone to see. No matter how much he tried to
see the positive, it wasn't anywhere to be seen. The end was
coming and it wasn't going to be pretty.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
about All all could end he how it think was would. a anyone basics bit but equation, for in of see still the the There there to uncertainty was were. anywhere be he how it matter much No positive, see seen the to to tried wasn't. and be coming end going it pretty The to was wasn't&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This code is fairly compact but not at all obfuscated, I would argue. First we take in the
paragraph all at once. Then we split into sentences and begin the sorting.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; is a little complicated looking at first because we want the words to be sorted 
irrespective of letter case. One way to handle that is to compare only all uppercase 
versions of the words. Lowercase would work too, of course!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given file with daily temperature record in random order. Write a script to find 
out days hotter than previous day.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use v5.36;
use strict;
use warnings;

use DBI;
use Text::CSV;
use Time::Piece;

sub hotter_than_previous{
    my($data) = @_;
    my @hotter;
    my $csv_parser = Text::CSV-&gt;new();
    my $dbh = DBI-&gt;connect(q/dbi:CSV:/, undef, undef, undef);
    $dbh-&gt;do(q/CREATE TABLE hotter_than_previous_a(day INTEGER, temperature INTEGER)/);
    $dbh-&gt;do(q/CREATE TABLE hotter_than_previous_b(day INTEGER, temperature INTEGER)/);
    for my $line (@{$data}){
        $line =~ tr/ //d;
        $csv_parser-&gt;parse($line);
        my($day, $temperature) = $csv_parser-&gt;fields();
        $day = Time::Piece-&gt;strptime($day, q/%Y-%m-%d/);
        $dbh-&gt;do(q/INSERT INTO hotter_than_previous_a VALUES(/ . $day-&gt;epoch . qq/, $temperature)/);
        $dbh-&gt;do(q/INSERT INTO hotter_than_previous_b VALUES(/ . $day-&gt;epoch . qq/, $temperature)/);
    }
    my $statement = $dbh-&gt;prepare(q/SELECT day FROM hotter_than_previous_a A INNER JOIN  
                                    hotter_than_previous_b B WHERE (A.day - B.day = 86400)                            
                                    AND A.temperature &gt; B.temperature/);
    $statement-&gt;execute();
    while(my $row = $statement-&gt;fetchrow_hashref()){
        push @hotter, $row-&gt;{day};
    }
    @hotter = map {Time::Piece-&gt;strptime($_, q/%s/)-&gt;strftime(q/%Y-%m-%d/)} sort @hotter;
    unlink(q/hotter_than_previous_a/);
    unlink(q/hotter_than_previous_b/);
    return @hotter;
}

MAIN:{
    my $data = do{
        local $/;
        &amp;lt;DATA&amp;gt;; 
    };
    my @hotter = hotter_than_previous([split(/\n/, $data)]);
    say join(qq/\n/, @hotter);
}

__DATA__
2022-08-01, 20
2022-08-09, 10
2022-08-03, 19
2022-08-06, 24
2022-08-05, 22
2022-08-10, 28
2022-08-07, 20
2022-08-04, 18
2022-08-08, 21
2022-08-02, 25
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2022-08-02
2022-08-05
2022-08-06
2022-08-08
2022-08-10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;To be clear up front, this is an intentionally over engineered solution! I have been 
intrigued by the idea of DBD::CSV since I first heard of it but never had a reason to use 
it. So I invented a reason! &lt;/p&gt;

&lt;p&gt;DBD::CSV provides a SQL interface to CSV data. That is, it allows you to write SQL queries
against CSV data as if they were a more ordinary relational database. Very cool! Instead
of solving this problem in Perl I am actually implementing the solution in SQL. Perl is
providing the implementation of the SQL Engine and the quasi-database for the CSV data.&lt;/p&gt;

&lt;p&gt;DBD::CSV is quite powerful but is not completely on par feature wise with what you'd get
if you were using an ordinary database. Not all SQL data types are supported, for example.
Work arounds can be constructed to do everything that we want and these sorts of trade 
offs are to be expected. To store the dates we use &lt;code&gt;Time::Piece&lt;/code&gt; to compute UNIX epoch
times which are stored as INTEGERs. Also, DBD::CSV expects data from files and so we can't
use the data directly in memory, it has to be written to a file first. Actually, we find 
out that we need to create two tables! Each hold exact copies of the same data.&lt;/p&gt;

&lt;p&gt;The creation of two tables is due to a quirk of the underlying SQL Engine SQL::Statement.
SQL::Statement will throw an error when doing a join on the same table. The way one would
do this ordinarily is something like 
&lt;code&gt;SELECT day FROM hotter_than_previous A, hotter_than_previous B ...&lt;/code&gt;. That join allows SQL 
to iterate over all pairs of dates but this throws an error when done with SQL::Statement. 
To work around this we instead we create two tables which works.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-181/"&gt;Challenge 181&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc181</id>
    <published>2022-09-11T08:45:00-04:00</published>
    <updated>2022-09-11T08:45:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4852161199813789458</id>
    <published>2022-09-10T23:01:00.000+02:00</published>
    <updated>2022-09-10T23:01:08.673+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdix) 11 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.68&lt;/strong&gt; on 2022-09-05&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.67 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Exporter-Tiny-1.004001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exporter::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - an exporter with the features of Sub::Exporter but only core dependencies &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.004001&lt;/strong&gt; on 2022-09-09&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.004000 was 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-CheckLib-0.29' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::CheckLib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Check that a library is available for FFI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.29&lt;/strong&gt; on 2022-09-10&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.28 was 1 year, 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MLEHMANN/IO-AIO-4.78' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::AIO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous/Advanced Input/Output &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.78&lt;/strong&gt; on 2022-09-06&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.76 was 1 year, 1 month, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RURBAN/Net-Ping-2.75' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Ping&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - check a remote host for reachability &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.75&lt;/strong&gt; on 2022-09-05&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.74 was 1 year, 11 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/OrePAN2-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;OrePAN2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Yet another DarkPAN manager. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2022-09-06&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 1 year, 6 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RSCHUPP/PAR-Packer-1.056' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PAR::Packer&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - PAR Packager &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.056&lt;/strong&gt; on 2022-09-05&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.055 was 2 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Plack-1.0050' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Plack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Superglue for Web frameworks and Web Servers (PSGI toolkit) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.0050&lt;/strong&gt; on 2022-09-05&lt;/li&gt;  &lt;li&gt;Votes: 227&lt;/li&gt;  &lt;li&gt;Previous version: 1.0049 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCONWAY/PPR-0.001006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPR&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Pattern-based Perl Recognizer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.001006&lt;/strong&gt; on 2022-09-08&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.001004 was 1 month before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9652' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9652&lt;/strong&gt; on 2022-09-09&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9650 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000133' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000133&lt;/strong&gt; on 2022-09-07&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000128 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4852161199813789458/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdix-11-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4852161199813789458"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4852161199813789458"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdix-11-great-cpan-modules-released.html" title="(cdix) 11 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1741955661833509878</id>
    <published>2022-09-10T22:58:00.001+02:00</published>
    <updated>2022-09-10T22:58:24.655+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxii) metacpan weekly report</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 22&lt;/p&gt;&lt;p&gt;This week there isn't any remarkable distribution&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/09/10 20:57:55 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Attribute::Lexical" target="_blank"&gt;Attribute::Lexical&lt;/a&gt; - sane scoping of function/variable attributes&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Tools::DOM" target="_blank"&gt;Test2::Tools::DOM&lt;/a&gt; - Tools to test HTML/XML-based DOM representations&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Pipe" target="_blank"&gt;Text::Pipe&lt;/a&gt; - Common text filter API&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/USCIS::Case" target="_blank"&gt;USCIS::Case&lt;/a&gt; - Perl extensions to check USCIS (United States Citizenship and Immigration Services) case status. More features would be added in the future.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/accessors" target="_blank"&gt;accessors&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=118)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::General" target="_blank"&gt;Config::General&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+1=98)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Capabilities" target="_blank"&gt;Linux::Capabilities&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::MoreUtils" target="_blank"&gt;List::MoreUtils&lt;/a&gt; (+1=111)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::DNS" target="_blank"&gt;Net::DNS&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::TacacsPlus" target="_blank"&gt;Net::TacacsPlus&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parser::MGC" target="_blank"&gt;Parser::MGC&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=398)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=160)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Software::License" target="_blank"&gt;Software::License&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockObject" target="_blank"&gt;Test::MockObject&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::utf8" target="_blank"&gt;Test::utf8&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV" target="_blank"&gt;Text::CSV&lt;/a&gt; (+1=71)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::LineBreak" target="_blank"&gt;Unicode::LineBreak&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/YAML::LibYAML" target="_blank"&gt;YAML::LibYAML&lt;/a&gt; (+1=46)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1741955661833509878/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxii-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1741955661833509878"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1741955661833509878"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxii-metacpan-weekly-report.html" title="(dxxii) metacpan weekly report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-204678114119473668</id>
    <published>2022-09-10T22:57:00.000+02:00</published>
    <updated>2022-09-10T22:57:00.087+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dl) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2022-09-10 20:56:26 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73602019" target="_blank"&gt;Using Dist::Zilla dist.ini how can I have files that I only use for testing?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73601659" target="_blank"&gt;How to split an array of bytes avoiding to truncate in the middle of an unicode extended grapheme cluster&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73602002" target="_blank"&gt;Using Dist::Zilla dist.ini how can I set alternate dependencies?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73621297" target="_blank"&gt;Default Perl accessor for objects&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73666050" target="_blank"&gt;Plot Graph in Console by printing special character say * and spaces using matrix structure in Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/204678114119473668/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/dl-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/204678114119473668"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/204678114119473668"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/dl-stackoverflow-perl-report.html" title="(dl) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Dancer2: Return JSON</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-09-09T10:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-return-json"/>  <id>https://perlmaven.com/dancer2-return-json</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Create a Daemon in Perl with Schedule::Cron</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/create-a-daemon-in-perl-with-schedulecron-4pb6" type="text/html"/>
    <content type="html">&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Daemon_(computing)"&gt;daemon&lt;/a&gt; is a program that runs in the background for an indefinite period of time.&lt;/p&gt;

&lt;p&gt;An important daemon on Unix-like operating systems is the &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;cron scheduler&lt;/a&gt; that can be configured to perform tasks periodically. Though there are many different types of daemons, we will explore how to create a cron daemon.&lt;/p&gt;

&lt;p&gt;My favorite CPAN module for creating a daemon is &lt;a href="https://metacpan.org/pod/Schedule::Cron"&gt;Schedule::Cron&lt;/a&gt;, which allows us to create a daemon that dispatches Perl subroutines at preconfigured intervals. The reason I like &lt;a href="https://metacpan.org/pod/Schedule::Cron"&gt;Schedule::Cron&lt;/a&gt; is that it is easy to learn, easy to understand, and it works.&lt;/p&gt;

&lt;p&gt;This article is not a complete overview of everything that &lt;a href="https://metacpan.org/pod/Schedule::Cron"&gt;Schedule::Cron&lt;/a&gt; can do, so be sure to read the official documentation afterwards.&lt;/p&gt;

&lt;p&gt;&lt;a id="orga259ded"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  A Simple Daemon
&lt;/h1&gt;

&lt;p&gt;Let's write a simple (and useless) daemon that logs the current time every 5 minutes, and rotates the log file every hour, keeping at most 4 old logs. The current logfile will be named &lt;code&gt;$HOME/times.txt&lt;/code&gt;, and the old log files will be named &lt;code&gt;$HOME/times.txt.{1,2,3,4}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First we need a function to write the time to the current log file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;append_time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;{HOME}/times.txt&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cannot open file '&lt;/span&gt;&lt;span class="si"&gt;$logfile&lt;/span&gt;&lt;span class="s2"&gt;': $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$time&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt; &lt;span class="nv"&gt;$fh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need a function to rotate the old log files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;File::&lt;/span&gt;&lt;span class="nv"&gt;Copy&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;move&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;rotate_time_log&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;{HOME}/times.txt&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@old_logfiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="sr"&gt;/^$ENV{HOME}\/times\.txt\.\d+$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$ENV&lt;/span&gt;&lt;span class="s2"&gt;{HOME}/*&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="c1"&gt;# We don't need to rotate unless we have more than 4 old logfiles&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;@old_logfiles&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;unlink&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$logfile&lt;/span&gt;&lt;span class="s2"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;move&lt;/span&gt; &lt;span class="nv"&gt;$old_logfiles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;move&lt;/span&gt; &lt;span class="nv"&gt;$logfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$logfile&lt;/span&gt;&lt;span class="s2"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Understanding how these functions work is not important for learning about &lt;a href="https://metacpan.org/pod/Schedule::Cron"&gt;Schedule::Cron&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our time logging functions, let's initialize our daemon object. To initialize the daemon object we will use the &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-=-new-Schedule::Cron(%24dispatcher,%5Bextra-args%5D)"&gt;Schedule::Cron::new&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;The first argument to &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-=-new-Schedule::Cron(%24dispatcher,%5Bextra-args%5D)"&gt;Schedule::Cron::new&lt;/a&gt; must be a reference to a subroutine that will be used as a default if we add a cron entry without specifying the function we want to run. This is only useful if there is only one function we want our daemon to run. We won't be using this feature, so we just set it to a function that kills the program.&lt;/p&gt;

&lt;p&gt;There are many options we can pass to &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-=-new-Schedule::Cron(%24dispatcher,%5Bextra-args%5D)"&gt;Schedule::Cron::new&lt;/a&gt;, the only one we will use is &lt;a href="https://metacpan.org/pod/Schedule::Cron#processprefix-=%3E-%3Cname%3E"&gt;processprefix&lt;/a&gt; which is used to give a prefix to the name of our daemon process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Schedule::&lt;/span&gt;&lt;span class="nv"&gt;Cron&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$cron_daemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Schedule::&lt;/span&gt;&lt;span class="nv"&gt;Cron&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;time-daemon: error: default Schedule::Cron function was called&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;processprefix&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;time-daemon&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important &lt;a href="https://metacpan.org/pod/Schedule::Cron"&gt;Schedule::Cron&lt;/a&gt; method is &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-%3Eadd_entry(%24timespec,%5Barguments%5D)"&gt;add_entry&lt;/a&gt;, which takes a cron string and a coderef. When we eventually run the daemon it will schedule the coderef to be run at the interval specified by the cron string.&lt;/p&gt;

&lt;p&gt;Personally I can never remember the syntax for cron strings. I use the website &lt;a href="https://crontab.guru/"&gt;crontab.guru&lt;/a&gt; for getting an English translation of what my cron string means, which makes it easy to build my cron strings.&lt;/p&gt;

&lt;p&gt;Lets schedule our &lt;code&gt;&amp;amp;append_time&lt;/code&gt; subroutine to be run every 5 minutes, and our &lt;code&gt;&amp;amp;rotate_time_log&lt;/code&gt; subroutine to be run every hour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$cron_daemon&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*/5 * * * *&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;append_time&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$cron_daemon&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 */1 * * *&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;rotate_time_log&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now ready to start up the daemon using the &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-%3Erun(%5Boptions%5D)"&gt;Schedule::Cron::run&lt;/a&gt; method. This method takes many options but the only one we will use is &lt;a href="https://metacpan.org/pod/Schedule::Cron#detach"&gt;detach&lt;/a&gt;, which will cause daemon process to detach itself from the current process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$cron_daemon&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;detach&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;started the time-daemon as pid &lt;/span&gt;&lt;span class="si"&gt;$pid&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all there is to it! The basic recipe to follow is: initialize a &lt;a href="https://metacpan.org/pod/Schedule::Cron"&gt;Schedule::Cron&lt;/a&gt; object, schedule subroutines to be run with &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-%3Eadd_entry(%24timespec,%5Barguments%5D)"&gt;add_entry&lt;/a&gt;, then start the daemon with the &lt;a href="https://metacpan.org/pod/Schedule::Cron#%24cron-%3Erun(%5Boptions%5D)"&gt;run&lt;/a&gt; method.&lt;/p&gt;

</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/create-a-daemon-in-perl-with-schedulecron-4pb6</id>
    <published>2022-09-08T01:20:36Z</published>
    <updated>2022-09-08T01:20:36Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl (Tony Cook) July 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-09-07:/post/maintaining_perl_tonyc_july_2022</id>
  <published>2022-09-07T09:26:17</published>
  <updated>2022-09-07T09:26:17</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/07/04 Monday  0.70 github notifications  0.55 #19901 research and comment  0.20 #19854 research and comment  0.40 #19832 re-check and apply to blead  0.17 rfc #20 briefly comment  2.03 #19851/#19874 work on fixes  4.05 2022/07/05 Tuesday  1.17 #19854 review, testing, apply to blead  0.42 perldelta  1.77 #19851/#19874 more work on fixes, testing  3.36 2022/07/06 Wednesday  0.12 review 
   ]]>
  </summary>
  <author>
    <name>alh</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:</p>

<p>```
[Hours]         [Activity]
2022/07/04      Monday
 0.70           github notifications
 0.55           #19901 research and comment
 0.20           #19854 research and comment
 0.40           #19832 re-check and apply to blead
 0.17           rfc #20 briefly comment</p>

<h1> 2.03           #19851/#19874 work on fixes</h1>

<p>4.05</p>

<p>2022/07/05      Tuesday
 1.17           #19854 review, testing, apply to blead
 0.42           perldelta</p>

<h1> 1.77           #19851/#19874 more work on fixes, testing</h1>

<p>3.36</p>

<p>2022/07/06      Wednesday
 0.12           review github notifications
 1.72           #19851/#19874 more work on fixes, testing</p>

<h1> 1.72           #19851/#19874 more work on fixes, testing, push for CI</h1>

<p>3.56</p>

<p>2022/07/07      Thursday
 0.35           #19851/#19874 fix some commit message typos, make PR
                #19930
 0.87           #19912 review, research and apply to blead
 0.25           #19850 review, rebase and apply to blead
 0.75           #19913 review and comment
 0.07           #19914 review and apply to blead
 0.57           #19893 review, comments
 0.28           look into blead CI failure and fix in 374793b15
 0.50           #19746 review and briefly comment</p>

<h1> 0.78           #19892 work on a fix, notice #18761 and comment</h1>

<p>4.42</p>

<p>2022/07/11      Monday
 0.47           review github notifications
 0.67           #19940 review and comment
 0.93           #18761 review updates, testing and apply to blead, some
                #p5p discussion
 0.68           #16348 review and research
 0.87           #19939 try debugging</p>

<h1> 1.07           #19125 rebase, testing</h1>

<p>4.69</p>

<p>2022/07/12      Tuesday
 1.37           coverity scan review, work on some fixes
 0.45           more coverity scan, fix some more, push for CI</p>

<h1> 1.65           #16856 avoid casting away const</h1>

<p>3.47</p>

<p>2022/07/13      Wednesday
 0.50           github notifications
 0.53           #19930 update commit message, retesting and push, set
                ready for review
 1.03           #16525 work on skipping the test, but Configure isn’t
                setting osvers correctly
 0.68           #16525 fix Configure, testing, push for CI
 0.27           #19940 comment</p>

<h1> 0.37           #16856 more -Wcast-qual work</h1>

<p>3.38</p>

<p>2022/07/14      Thursday
 0.40           github notifications
 0.33           rebase some PRs to avoid an error fixed in blead, make PR
                #19951
 1.07           #19947 review, testing and comment
 0.28           #19938 review, research and comment
 0.95           #19943 review, comments</p>

<h1> 0.53           #19931 review, comments</h1>

<p>3.56</p>

<p>2022/07/15      Friday</p>

<h1> 0.18           #19947 review and approve</h1>

<p>0.18</p>

<p>2022/07/18      Monday
 1.22           #19931 testing, comment
 0.15           #19901 review and apply to blead
 0.90           #19961 testing, comment
 0.13           #19958 review and approve
 0.18           #19955 review, comment requesting changes
 0.20           #19954 review and apply to blead
 0.90           #19922 review and briefly comment, consider possible
                overloading bug in select()
 0.12           #19962 briefly comment</p>

<h1> 0.30           #19949 try to reproduce and fail, comment</h1>

<p>4.10</p>

<p>2022/07/19      Tuesday
 0.10           #19965 review and briefly comment
 0.18           #19922 review and apply to blead
 0.35           #19955 review latest changes and approve
 0.50           #19964 review discussion and code, comment with analysis
 1.50           #19964 review code, work on improving error message, look</p>

<h1>                at supporting regexps in STORABLE_freeze</h1>

<p>2.63</p>

<p>2022/07/20      Wednesday
 0.48           #19965 review, comment</p>

<h1> 0.40           #19964 look at adding cv_name to ppport</h1>

<p>0.88</p>

<p>2022/07/21      Thursday
 0.17           github notifications
 1.45           #19964 work on regexps and STORABLE_thaw, research,
                testing</p>

<h1> 2.13           #19964 more regexps, research, comments on ticket</h1>

<p>3.75</p>

<p>2022/07/25      Monday
 0.22           #19990 comment
 0.67           #19943 review and brief comments
 0.17           #19931 review discussion
 0.90           #19929 review, brief comment
 0.50           #19964 comment</p>

<h1> 2.03           #19964 cleanup, testing, rebase for perl release update</h1>

<p>4.49</p>

<p>2022/07/26      Tuesday
 0.43           #19990 research, comment
 0.42           #19943 review</p>

<h1> 1.88           #19943 review, suspicious code, crash with ASAN</h1>

<p>2.73</p>

<p>2022/07/28      Thursday
 1.00           #19943 ASAN testing, can’t reproduce with clang-14
 0.78           #19983 check named dists and comment with the broken code
                in them
 0.63           #19993 review, research and comment.
 0.33           #19993 follow-up
 0.22           #20007 review and approve
 0.07           #20005 review and request changes</p>

<h1> 0.40           #19888 review, research and comment</h1>

<p>3.43</p>

<p>Which I calculate is 52.68 hours.</p>

<p>Approximately 41 tickets were reviewed or worked on, and 9 patches
were applied.
```</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Release 0.7.0 of Ebirah</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-070-of-ebirah-213n" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>As mentioned in <a href="https://dev.to/jonasbn/release-030-of-my-perl-distzilla-github-action-25ig">my announcement</a> on my release 0.3.0 of my Perl Dist::Zilla GitHub Action, <a href="https://github.com/jonasbn/ebirah">Ebirah</a>, which is the base image has also been updated to release 0.7.0.</p>

<p>The release contains a minor improvement from Alceu Rodrigues de Freitas Junior aka <a href="https://github.com/glasswalk3r">glasswalk3r</a>, whom also contributed to <a href="https://github.com/jonasbn/github-action-perl-dist-zilla">github-action-perl-dist-zilla</a>.</p>

<p>His contribution here was an improvement and a step in the right direction to minimizing the Ebirah Docker image, this is still <em>work in progress</em> and hopefully more will come.</p>

<p>An on the topic of more to come, no releases have been made in two years, but the base image on which Ebirah is based has been updated 3 times since the last release (4 times if you count the latest update to Perl 5.36.0), so more releases could have seen the light.</p>

<p>With the release of Ebirah 0.7.0 and via the usage of the GitHub Action building on Ebirah, my CI jobs have demonstrated that more work needs to be done. Apparently parts of the utilized tool chain requires updating and even Dist::Zilla could do with an update, so at the time of writing I am already working on release 0.8.0. This will of course also trigger a release of <a href="https://github.com/jonasbn/github-action-perl-dist-zilla">github-action-perl-dist-zilla</a>, but more on this when I can see that all the tests are passing and the final details are in place.</p>

<p>Thanks to glasswalk3r for his contribution.</p>

<p>Finally I want to mention that Ebirah has sort of gotten a mascot. I was given permission by the <a href="https://www.deviantart.com/">Deviant Art</a> user and artist <a href="https://www.deviantart.com/zappazee">ZappaZee</a> to use his rendition of Ebirah - one of the <a href="https://en.wikipedia.org/wiki/Kaiju">Kaiju</a> of Godzilla fame.</p>

<p>I am most grateful for this, not that I believe that all projects should have mascot, but for Ebirah I like the idea that it has a graphical representation.</p>

<p>Thanks to ZappaZee for the permission to use his artwork.</p>

<p>The collected release notes are included below.</p>

<h2>
  
  
  0.7.0 2022-09-03 Maintenance release, update not required
</h2>

<ul>
<li><p>Improvements to Docker image generation, reducing size via contribution and PR <a href="https://github.com/jonasbn/ebirah/pull/46">#46</a> from @glasswalk3r</p></li>
<li>
<p>The base image has been updated several times without releases, the are listed below for information. With this version the image is bumped up to Perl 5.36.0, which should be the latest at the time of writing</p>

<ul>
<li>Renovate updated perl in <code>Dockerfile</code> from 5.34.1 to 5.36.0 via PR <a href="https://github.com/jonasbn/ebirah/pull/42">#42</a>
</li>
<li>Dependabot updated perl in <code>Dockerfile</code> from 5.34.0 to 5.34.1 via PR <a href="https://github.com/jonasbn/ebirah/pull/31">#31</a>
</li>
<li>Dependabot updated perl in <code>Dockerfile</code> from 5.32.1 to 5.34.0 via PR <a href="https://github.com/jonasbn/ebirah/pull/18">#18</a>
</li>
<li>Dependabot updated perl in <code>Dockerfile</code> from 5.32.0 to 5.32.1 via PR <a href="https://github.com/jonasbn/ebirah/pull/14">#14</a>
</li>
</ul>


</li>
</ul>

<p>REF: <a href="https://github.com/jonasbn/ebirah/releases/tag/0.7.0">GitHub</a></p>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-070-of-ebirah-213n</id>
    <published>2022-09-07T05:36:26Z</published>
    <updated>2022-09-07T05:36:26Z</updated>
    <category term="perl"/>
    <category term="docker"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>Release 0.3.0 of my Perl Dist::Zilla GitHub Action</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-030-of-my-perl-distzilla-github-action-25ig" type="text/html"/>
    <content type="html">&lt;p&gt;I have just made a release of &lt;a href="https://github.com/jonasbn/github-action-perl-dist-zilla"&gt;github-action-perl-dist-zilla&lt;br&gt;
&lt;/a&gt; making version 0.3.0 available in the &lt;a href="https://github.com/marketplace/actions/github-action-for-perl-s-dist-zilla"&gt;GitHub Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The release is long over due and the first in two years. I have kept the project trunk up to date based on my trusty friend Dependabot, but nothing &lt;em&gt;really&lt;/em&gt; warranted a release. It was not until I received &lt;a href="https://github.com/jonasbn/github-action-perl-dist-zilla/pull/22"&gt;a PR&lt;/a&gt; from Alceu Rodrigues de Freitas Junior aka glasswalk3r, that things got rolling.&lt;/p&gt;

&lt;p&gt;I was actually able to &lt;em&gt;lure&lt;/em&gt; Alceu Rodrigues de Freitas Junior into contributing to the base image used by the action - &lt;strong&gt;Ebirah&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ebirah is a Docker encapsulation of the magnificent Dist::Zilla distribution tool for Perl distributions, but more in that in another post on the release of Ebirah 0.7.0, which also made it into this release. This action is built on top of Ebirah, so of you read my release notes for Ebirah, you can see that perhaps more releases were warranted had Ebirah had more frequent releases.&lt;/p&gt;

&lt;p&gt;I primary created this action for my self and I am currently using it for 6 of my own repositories/Perl distributions and I just discovered that I have two users beside myself - hurrah.&lt;/p&gt;

&lt;p&gt;PRs, requests, issues etc. are always most welcome.&lt;/p&gt;

&lt;p&gt;Thanks to glasswalk3r for his contribution.&lt;/p&gt;

&lt;p&gt;The collected release notes are included below.&lt;/p&gt;

&lt;h2&gt;
  
  
  0.3.0 2022-09-03 Feature release, update not required
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bumped &lt;a href="https://github.com/jonasbn/ebirah"&gt;Ebirah&lt;/a&gt; requirement from version 0.6.0 to 0.7.0. Please see &lt;a href="https://github.com/jonasbn/ebirah"&gt;Ebirah&lt;/a&gt; change log for details&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This release holds a set of enhancements by @glasswalk3r via PR: &lt;a href="https://github.com/jonasbn/github-action-perl-dist-zilla/pull/22"&gt;#22&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allows repositories that does not have a &lt;code&gt;cpanfile&lt;/code&gt; to have their dependencies installed&lt;/li&gt;
&lt;li&gt;Does optional configuration of the &lt;a href="https://metacpan.org/pod/CPAN"&gt;CPAN&lt;/a&gt; client, since it might be required by some distributions&lt;/li&gt;
&lt;li&gt;Changed to use of Bash, since it is available in the Docker image&lt;/li&gt;
&lt;li&gt;Fixed entry point so it can be tested outside GitHub eco-system&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REF: &lt;a href="https://github.com/jonasbn/github-action-perl-dist-zilla/releases/tag/0.3.0"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-030-of-my-perl-distzilla-github-action-25ig</id>
    <published>2022-09-06T19:48:50Z</published>
    <updated>2022-09-06T19:48:50Z</updated>
    <category term="perl"/>
    <category term="githubaction"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
  <title>Call for Grant Proposals: September 2022 Round</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/call_for_grants_sept_2022"/>
  <id>tag:news.perlfoundation.org,2022-09-05:/post/call_for_grants_sept_2022</id>
  <published>2022-09-05T22:16:08</published>
  <updated>2022-09-05T22:16:08</updated>
  <summary>
  <![CDATA[
     The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting. If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 September 12th, 2022, UTC. We will publish the received applications, get community feedback through September 19th, and we 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Grants Committee is accepting grant proposals all the time. We evaluate them every two months and another round is starting.</p>

<p>If you have an idea for doing some work that will benefit the Perl or Raku communities, please consider submitting a grant application. The application deadline for this round is 23:59 September 12th, 2022, UTC. We will publish the received applications, get community feedback through September 19th, and we will conclude the process shortly thereafter.</p>

<p>We now accept grant requests for core Perl and Raku development. There are some eligibility requirements that must be met for each language when submitting a grant. For Perl:
* The applicant must be a contributor to the Perl core.
* The application must be endorsed by one or more people with commit rights to the Perl core.</p>

<p>For Raku:
* The applicant must be a contributor to the Raku language specification or one of its implementations.
* The application must be endorsed by one or more people in Raku Steering Council.</p>

<p>For more information, see <a href="https://news.perlfoundation.org/post/grants_committee_expanded_role">this blog post</a>.</p>

<p>To apply, please read <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">How to Write a Proposal</a>, <a href="https://www.perlfoundation.org/grants-committee.html">GC Charter, Rules of Operation</a> and <a href="https://www.perlfoundation.org/running-grants.html">Running Grants List</a> will also help you understand how the grant process works. We also got some <a href="https://grants.perlfoundation.org/">grant ideas</a> from the community. Grant applications may be submitted via <a href="https://docs.google.com/forms/d/16seYhrMjz8rgsau9e1MtwYY0fHB81mVKm-0SD6Ynty0/viewform">this Google Form</a>.</p>

<p>We will confirm the receipt of application by no later than September 13th.</p>

<p>If you have further questions, please contact me at tpf-grants-secretary at perl-foundation.org.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#580 - Perl Mentor</title>
    <link rel="alternate" href="https://perlweekly.com/archive/580.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Good luck to all parents with school going kids in England, as today is the day one after a long summer vacation. I am one of them, fortunately or unfortunately. Be strong and you will get through this phase of life too.</p>
<p>Parents are the best mentor for their kids, in my humble opinion. During my early days, I didn't know the importance of mentor. Having met some great mentor in real life in the recent times, I can say it is great service. In 2018, I gave a short talk on <a href="https://act.yapc.eu/lpw2018/talk/7543">The power of mentoring</a>, at London Perl Workshop. A work colleague who does <strong>mentoring</strong> as part of his role, is by far the best mentor, I have met so far. I learn something new every day from him by just joining him on daily standup. Although my contribution to the standup is nothing but it feels nice to see young blood with so much energy. I wish I had mentor like him when I started.</p>
<p>I remember there was an initiative started on private <a href="https://www.facebook.com/groups/perlprogrammers">Facebook group</a> to encourage and help newbie. Unfortunately nothing happened although we had loads of mentor in the group.</p>
<p>Is it easy to be a mentor?</p>
<p>You would think so but I can tell you it is not. You have to have patience first thing first. I have seen how difficult it is to be a mentor. I would like to share a sweet moment with you. A month ago, a young blood interested to learn <strong>Perl</strong> reached out to me on <strong>Facebook</strong>. At times, I wonder how did he find out about me. His question was, how do I execute <strong>Hello World</strong> script, he has already created. He was using VSCode editor. I am not a big fan of VSCode editor but in the current role, I got the opportunity to use it. Having said, I still use <strong>vim</strong> for everything else. Back to the story, we started talking on <strong>Facebook</strong> messenger. I find it hard to convey message on messenger. So I requested him to join on <strong>Team video call</strong>. It took <strong>2 minutes</strong> call to resolve the issue. While there, I showed him few other things beyond, <strong>hello world</strong>. I am sure, he would carry on exploring the language further.</p>
<p>Is it mostly about <strong>Perl</strong>?</p>
<p>In my personal experience, no. I was once contacted by a member of <strong>Team PWC</strong> with regard to the <strong>git related issues</strong> as he couldn't submit his contribution to the weekly challenge. So there again, we jumped on <strong>Team video call</strong> and in no time, he was good to go. Just to be explicit here, he was not a newbie but an experienced techie with way more than experience than me. It feels great to help. It is not one-way traffic as when I get stuck, I know who to contact. Luckily I get instant help too, so far. Few months ago, when I used to do <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube video</a>, I had trouble with <strong>OBS Studio</strong>. I asked for help on <strong>Twitter</strong>. You wouldn't believe, I had more help than I expected from <strong>Olaf Alders</strong>, <strong>Lance Wicks</strong> and <strong>Julien Fiegehenn</strong>. I now have working environment back, although I am not doing live video any more because of lack of time.</p>
<p>For those, need help can reach out to me on <a href="https://twitter.com/cpan_author">Twitter</a> and <a href="https://www.facebook.com/mohammad.s.anwar">Facebook</a>. I must make this clear, I will not do your course work. I am available for anyone anytime as I literally spend <strong>12-14 hours</strong> in front of machine every day.</p>
<p>Have a great week and enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/580.html</id>
    <published>2022-09-05T10:00:00Z</published>
    <updated>2022-09-05T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>ANSI command line colors with Perl</title>
  <summary type="html"><![CDATA[<p>
Many command on the Unix/Linux command line will print out text in various colors. For example the <span class="inline_code">ls</span> command accepts a <span class="inline_code">--color</span>
flag and then it adds color to the file-system listings. You can convince your prompt to change color based on some condition.
e.g. the weather outside.
<p>
How can you create such colorful output with Perl and how could you do it manually?
<p>
]]></summary>
  <updated>2022-09-05T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/ansi-command-line-colors-with-perl"/>  <id>https://perlmaven.com/ansi-command-line-colors-with-perl</id>
  <content type="html"><![CDATA[<p>
Many command on the Unix/Linux command line will print out text in various colors. For example the <span class="inline_code">ls</span> command accepts a <span class="inline_code">--color</span>
flag and then it adds color to the file-system listings. You can convince your prompt to change color based on some condition.
e.g. the weather outside.
<p>
How can you create such colorful output with Perl and how could you do it manually?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>First Uniquely Trimmed Index</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/09/04#pwc180" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>You are given a string, $s. Write a script to find out the first unique character in the 
given string and print its index (0-based).</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use v5.36;
use strict;
use warnings;

sub index_first_unique{
    my($s) = @_;
    my @s = split(//, $s);
    map {my $i = $_; my $c = $s[$i]; return $_ if 1 == grep {$c eq $_ } @s } 0 .. @s - 1;
}

MAIN:{
    say index_first_unique(q/Perl Weekly Challenge/);
    say index_first_unique(q/Long Live Perl/);
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0
1
</code></pre>

<h3>Notes</h3>

<p>I use the small trick of return-ing early out of a <code>map</code>. Since we only want the first 
unique index there is no need to consider other characters in the string and we can do 
this short circuiting to bail early.</p>

<h2>Part 2</h2>

<p><em>You are given list of numbers, @n and an integer $i. Write a script to trim the given 
list when an element is less than or equal to the given integer.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use v5.36;
use strict;
use warnings;

sub trimmer{
    my($i) = @_;
    return sub{
        my($x) = @_;
        return $x if $x &gt; $i;
    }
}

sub trim_list_r{
    my($n, $trimmer, $trimmed) = @_;
    $trimmed = [] unless $trimmed;
    return @$trimmed if @$n == 0;
    my $x = pop @$n;
    $x = $trimmer-&gt;($x);
    unshift @$trimmed, $x if $x;
    trim_list_r($n, $trimmer, $trimmed);
}

sub trim_list{
    my($n, $i) = @_;
    my $trimmer = trimmer($i);
    return trim_list_r($n, $trimmer);
}

MAIN:{
    my(@n, $i);
    $i = 3;
    @n = (1, 4, 2, 3, 5);
    say join(", ", trim_list(\@n, $i));
    $i = 4;
    @n = (9, 0, 6, 2, 3, 8, 5);
    say join(", ", trim_list(\@n, $i));
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
4, 5
9, 6, 8, 5
</code></pre>

<h3>Notes</h3>

<p>After using <code>map</code> and <code>grep</code> in the first part this week's challenge I decided to try out
something else for this problem. <code>grep</code> would certainly be a perfect fit for this! 
Instead, though, I do the following:</p>

<ul>
<li>Create an anonymous subroutine closure around <code>$i</code> to perform the comparison. The 
subroutine is referenced in the variable <code>$trimmer</code>.
</li>
<li>This subroutine reference is then passed to a recursive function along with the list.
</li>
<li>The recursive function accumulates numbers meeting the criteria in an array reference
<code>$trimmed</code>. <code>unshift</code> is used to maintain the original ordering. I could have also, for
example, processed the list of numbers in reverse and using <code>push</code>. I haven't used 
<code>unshift</code> in a long time so this seemed more fun.
</li>
<li><code>$trimmed</code> is returned to when the list of numbers to be reviewed is exhausted.
</li>
</ul>

<p>This works quite well, especially for something so intentionally over engineered. If you
end up trying this yourself be careful with the size of the list used with the recursion.
For processing long lists in this way you'll either need to set <code>no warnings 'recusion</code> 
or, preferably, <code>goto __SUB__</code> in order to take advantage of Perl style tail recursion.</p>

<h2>References</h2>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-180/">Challenge 180</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc180</id>
    <published>2022-09-04T11:57:00-04:00</published>
    <updated>2022-09-04T11:57:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 180</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-180-4mi5" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-180/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-180/sgreen">My solution</a></p>

<h2>
  
  
  Task 1: First Unique Character
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a string, <code>$s</code>.</p>

<p>Write a script to find out the first unique character in the given string and print its index (0-based).</p>

<h2>
  
  
  My solution
</h2>

<p>This is relatively straight forward task. Loop through the index from 0 to 2 less than the length of string. If that character occurs later in the string, print the index.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code><span class="nv">$ </span>./ch-1.py <span class="s2">"The Weekly Challenge"</span>
0

<span class="nv">$ </span>./ch-1.py <span class="s2">"Long Live Python"</span>
3
</code></pre>

</div>



<h2>
  
  
  Task 2: Trim List
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given list of numbers, <code>@n</code> and an integer <code>$i</code>.</p>

<p>Write a script to trim the given list where element is less than or equal to the given integer.</p>

<h2>
  
  
  My solution
</h2>

<p>This is also straight forward. I start by <code>pop</code>ing the last value from the list. I then use the for if function (<a href="https://perldoc.perl.org/functions/grep">grep</a> for Perl) to get items in the list that are greater than that number.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight shell"><code> <span class="nv">$ </span>./ch-2.py 1 4 2 3 5 3
4, 5

<span class="nv">$ </span>./ch-2.py 9 0 6 2 3 8 5 4
9, 6, 8, 5
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-180-4mi5</id>
    <published>2022-09-04T14:31:07Z</published>
    <updated>2022-09-04T14:31:07Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7596111405374210937</id>
    <published>2022-09-03T22:34:00.001+02:00</published>
    <updated>2022-09-03T22:34:44.049+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdviii) 23 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.66' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.66&lt;/strong&gt; on 2022-09-01&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 2.65 was 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.055001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.055001&lt;/strong&gt; on 2022-09-02&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.055000 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SBECK/Date-Manip-6.89' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Date::Manip&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Date manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.89&lt;/strong&gt; on 2022-09-01&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 6.88 was 2 months, 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/DBIx-Connector-0.58' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::Connector&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, safe DBI connection and transaction management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.58&lt;/strong&gt; on 2022-08-29&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 0.56 was 6 years, 5 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Devel-MAT-0.48' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::MAT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Memory Analysis Tool &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.48&lt;/strong&gt; on 2022-08-30&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 0.47 was 4 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/FFI-Platypus-2.01' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;FFI::Platypus&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Write Perl bindings to non-Perl libraries with FFI. No XS required. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.01&lt;/strong&gt; on 2022-08-30&lt;/li&gt;  &lt;li&gt;Votes: 57&lt;/li&gt;  &lt;li&gt;Previous version: 2.01 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-BrowserDetect-3.36' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::BrowserDetect&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Determine Web browser, version, and platform from an HTTP user agent string &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.36&lt;/strong&gt; on 2022-08-31&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 3.35 was 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.075&lt;/strong&gt; on 2022-09-02&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 2.074 was 7 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.11' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.11&lt;/strong&gt; on 2022-08-30&lt;/li&gt;  &lt;li&gt;Votes: 30&lt;/li&gt;  &lt;li&gt;Previous version: 5.10 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Log-Log4perl-1.56' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Log::Log4perl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Log4j implementation for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.56&lt;/strong&gt; on 2022-09-02&lt;/li&gt;  &lt;li&gt;Votes: 95&lt;/li&gt;  &lt;li&gt;Previous version: 1.55 was 3 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13&lt;/strong&gt; on 2022-08-30&lt;/li&gt;  &lt;li&gt;Votes: 25&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 10 years, 4 months, 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DCANTRELL/Number-Phone-3.8006' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8006&lt;/strong&gt; on 2022-09-03&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8005 was 3 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.124' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.124&lt;/strong&gt; on 2022-09-02&lt;/li&gt;  &lt;li&gt;Votes: 172&lt;/li&gt;  &lt;li&gt;Previous version: 0.122 was 7 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIYAGAWA/Plack-1.0049' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Plack&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Superglue for Web frameworks and Web Servers (PSGI toolkit) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.0049&lt;/strong&gt; on 2022-09-01&lt;/li&gt;  &lt;li&gt;Votes: 227&lt;/li&gt;  &lt;li&gt;Previous version: 1.0048 was 1 year, 9 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MREISNER/PLS-0.902' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PLS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Language Server &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.902&lt;/strong&gt; on 2022-08-30&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.899 was 5 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Proc-Fork-0.808' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Proc::Fork&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - simple, intuitive interface to the fork() system call &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.808&lt;/strong&gt; on 2022-09-03&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.807 was 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-5.001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary (de-)serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.001&lt;/strong&gt; on 2022-09-03&lt;/li&gt;  &lt;li&gt;Votes: 60&lt;/li&gt;  &lt;li&gt;Previous version: 4.025 was 1 month, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Decoder-5.001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Decoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary deserialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.001&lt;/strong&gt; on 2022-09-03&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 4.025 was 1 month, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/YVES/Sereal-Encoder-5.001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sereal::Encoder&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Fast, compact, powerful binary serialization &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.001&lt;/strong&gt; on 2022-09-03&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 4.025 was 1 month, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9650' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9650&lt;/strong&gt; on 2022-09-02&lt;/li&gt;  &lt;li&gt;Votes: 26&lt;/li&gt;  &lt;li&gt;Previous version: 0.9645 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Harness-1.000128' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Harness&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A new and improved test harness with better Test2 integration. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000128&lt;/strong&gt; on 2022-09-02&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.000125 was 1 month, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016010&lt;/strong&gt; on 2022-08-31&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.016009 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TINITA/YAML-LibYAML-0.84' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::LibYAML&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl YAML Serialization using XS and libyaml &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.84&lt;/strong&gt; on 2022-09-03&lt;/li&gt;  &lt;li&gt;Votes: 45&lt;/li&gt;  &lt;li&gt;Previous version: 0.83 was 1 year, 3 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7596111405374210937/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdviii-23-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7596111405374210937"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7596111405374210937"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/cdviii-23-great-cpan-modules-released.html" title="(cdviii) 23 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8317021209972193285</id>
    <published>2022-09-03T22:31:00.000+02:00</published>
    <updated>2022-09-03T22:31:12.134+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxxi) metacpan weekly report - Data::Dumper</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 73&lt;/p&gt;&lt;p&gt;Week's winners (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/Data::Dumper"&gt;Data::Dumper&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/09/03 20:28:59 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Dot" target="_blank"&gt;Acme::Dot&lt;/a&gt; - Call methods with the dot operator&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Darian::Mars" target="_blank"&gt;Date::Darian::Mars&lt;/a&gt; - the Darian calendar for Mars&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FTN::Packet" target="_blank"&gt;FTN::Packet&lt;/a&gt; - Reading or writing Fidonet Technology Networks (FTN) packets.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Hydrogen" target="_blank"&gt;Hydrogen&lt;/a&gt; - utilities for the simplest elements of Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::HTTP::MockServer::Once" target="_blank"&gt;Test::HTTP::MockServer::Once&lt;/a&gt; - Implement a one shot mock HTTP server for use in tests&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::SetAutomaton" target="_blank"&gt;Unicode::SetAutomaton&lt;/a&gt; - UTF-8 based DFAs and Regexps from Unicode sets&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/app::paperback" target="_blank"&gt;app::paperback&lt;/a&gt; (+2=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=171)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Sqitch" target="_blank"&gt;App::Sqitch&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Badger" target="_blank"&gt;Badger&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bible::OBML" target="_blank"&gt;Bible::OBML&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carp" target="_blank"&gt;Carp&lt;/a&gt; (+1=68)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Compress::LZW" target="_blank"&gt;Compress::LZW&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Tiny" target="_blank"&gt;Config::Tiny&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dumper" target="_blank"&gt;Data::Dumper&lt;/a&gt; (+3=98)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=206)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::CSV" target="_blank"&gt;DBD::CSV&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Kit" target="_blank"&gt;Devel::Kit&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::KYTProf" target="_blank"&gt;Devel::KYTProf&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::REPL" target="_blank"&gt;Devel::REPL&lt;/a&gt; (+1=63)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encoding::FixLatin" target="_blank"&gt;Encoding::FixLatin&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encoding::FixLatin::XS" target="_blank"&gt;Encoding::FixLatin::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/English::Script" target="_blank"&gt;English::Script&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/FFmpeg" target="_blank"&gt;FFmpeg&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Path" target="_blank"&gt;File::Path&lt;/a&gt; (+1=44)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Temp" target="_blank"&gt;File::Temp&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Util" target="_blank"&gt;File::Util&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Filesys::DiskUsage" target="_blank"&gt;Filesys::DiskUsage&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Forks::Queue" target="_blank"&gt;Forks::Queue&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Forks::Super" target="_blank"&gt;Forks::Super&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gantry" target="_blank"&gt;Gantry&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Tty" target="_blank"&gt;IO::Tty&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::Path" target="_blank"&gt;JSON::Path&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libnet" target="_blank"&gt;libnet&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=95)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Minimal" target="_blank"&gt;Log::Minimal&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::AnyNum" target="_blank"&gt;Math::AnyNum&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Math::Complex" target="_blank"&gt;Math::Complex&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Minilla" target="_blank"&gt;Minilla&lt;/a&gt; (+1=57)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Moose" target="_blank"&gt;Moose&lt;/a&gt; (+1=321)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::CLI::Interact" target="_blank"&gt;Net::CLI::Interact&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::OpenSSH" target="_blank"&gt;Net::OpenSSH&lt;/a&gt; (+1=39)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Ping" target="_blank"&gt;Net::Ping&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Wireless::802_11::WPA::CLI" target="_blank"&gt;Net::Wireless::802_11::WPA::CLI&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Remote" target="_blank"&gt;Object::Remote&lt;/a&gt; (+2=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PAR::Packer" target="_blank"&gt;PAR::Packer&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PLS" target="_blank"&gt;PLS&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Markdown" target="_blank"&gt;Pod::Markdown&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Util" target="_blank"&gt;Regexp::Util&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Search::Tools" target="_blank"&gt;Search::Tools&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Decoder" target="_blank"&gt;Sereal::Decoder&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal::Encoder" target="_blank"&gt;Sereal::Encoder&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Override" target="_blank"&gt;Sub::Override&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::Syslog" target="_blank"&gt;Sys::Syslog&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Most" target="_blank"&gt;Test::Most&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::Simple" target="_blank"&gt;Tie::Simple&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Time::HiRes" target="_blank"&gt;Time::HiRes&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ToolSet" target="_blank"&gt;ToolSet&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Try::Tiny" target="_blank"&gt;Try::Tiny&lt;/a&gt; (+1=170)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=131)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Normalize" target="_blank"&gt;Unicode::Normalize&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::UTF8" target="_blank"&gt;Unicode::UTF8&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::Router" target="_blank"&gt;URI::Router&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/VideoLAN::LibVLC" target="_blank"&gt;VideoLAN::LibVLC&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Vlc::Engine" target="_blank"&gt;Vlc::Engine&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::Dropbox" target="_blank"&gt;WebService::Dropbox&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8317021209972193285/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxi-metacpan-weekly-report-datadumper.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8317021209972193285"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8317021209972193285"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/09/dxxi-metacpan-weekly-report-datadumper.html" title="(dxxi) metacpan weekly report - Data::Dumper"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Segregate Perl Projects with App::plx</title>
    <link rel="alternate" href="https://dev.to/nicholasbhubbard/segregate-perl-projects-with-appplx-7oj" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/App::plx"&gt;App::plx&lt;/a&gt; (Plx) is a tool for configuring per-project Perl development environments.&lt;/p&gt;

&lt;p&gt;Plx is not difficult to use and has very clear documentation. In this post I will give a brief overview of some of the problems that it solves and how to get started using it.&lt;/p&gt;

&lt;p&gt;This is not a complete overview on everything that Plx can do.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgbd602ea"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Why Plx?
&lt;/h1&gt;

&lt;p&gt;Imagine you have a project that depends on a Perl version greater than that of your systems built-in Perl. You will need to install the correct version of Perl and figure out how to get your project to use this Perl instead of the system's Perl.&lt;/p&gt;

&lt;p&gt;Next imagine a scenario where you are working on two different Perl projects that depend on a different version of the same CPAN module. You will need to figure out how to install both versions into different locations, and then you will need to figure out how to locate the correct version from the two different projects.&lt;/p&gt;

&lt;p&gt;These are two important problems that Plx solves.&lt;/p&gt;

&lt;p&gt;&lt;a id="org87e7c16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Installation
&lt;/h1&gt;

&lt;p&gt;Before you can use Plx you must install Plx.&lt;/p&gt;

&lt;p&gt;If you already have a CPAN installer, such as &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanminus&lt;/a&gt;, then you should probably just use that to install Plx.&lt;/p&gt;

&lt;p&gt;Plx can also be bootstrapped into a self contained script like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir "$HOME/bin"
$ wget https://raw.githubusercontent.com/shadowcat-mst/plx/master/bin/plx-packed -O "$HOME/bin/plx"
$ chmod +x "$HOME/bin/plx"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can install Plx into any directory, I just chose "$HOME/bin" for simplicity. Just make sure you pick a directory in your &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgd968283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Initialization
&lt;/h1&gt;

&lt;p&gt;If you want to use Plx for your Perl project, you must first initialize the project to use Plx. To do this we must &lt;code&gt;cd&lt;/code&gt; into the root directory of the project and then execute Plx with the &lt;code&gt;--init&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--init&lt;/code&gt; flag behaves differently depending on its argument.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;--init&lt;/code&gt; is called with a file path, it assumes it is a path to a Perl interpreter and sets up Plx to use it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --init /path/to/some/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When called with &lt;code&gt;perl&lt;/code&gt; as the argument it sets up Plx to use the first Perl in your &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --init perl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The final and most exciting way to call &lt;code&gt;--init&lt;/code&gt; is with a Perl version number. When called with a version number, Plx will look for a Perl of the given version first in your &lt;a href="https://en.wikipedia.org/wiki/PATH_(variable)"&gt;PATH&lt;/a&gt; and otherwise via &lt;a href="https://perlbrew.pl/"&gt;Perlbrew&lt;/a&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --init 5.36.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After initializing Plx you can execute your project code with a command like &lt;code&gt;$ plx /path/to/project/script.pl&lt;/code&gt;, and Plx will execute the script with the Perl interpreter you specified with the &lt;code&gt;plx --init&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This is how Plx solves the problem of needing to use a different Perl than your systems built-in Perl.&lt;/p&gt;

&lt;p&gt;&lt;a id="org124c9de"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Installing CPAN Modules
&lt;/h1&gt;

&lt;p&gt;My favorite feature of Plx is that it allows you to install modules off of CPAN into a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; using &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanminus&lt;/a&gt;. This allows you to segregate your CPAN modules dependencies on a per-project basis.&lt;/p&gt;

&lt;p&gt;To do this we must &lt;code&gt;cd&lt;/code&gt; into the root directory of our project and run the following command.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --cpanm -Llocal Some::Module
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will install &lt;code&gt;Some::Module&lt;/code&gt; into a project-local library located in a directory named &lt;code&gt;local/lib&lt;/code&gt; at the root of the project.&lt;/p&gt;

&lt;p&gt;This solves the problem of two projects requiring different versions of the same CPAN module. If both projects use Plx they can simply install their desired version into a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="org9b2111c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Userstrap
&lt;/h1&gt;

&lt;p&gt;What if you want to use your own Perl interpreter and a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; when you are working outside of a dedicated Plx project?&lt;/p&gt;

&lt;p&gt;Plx has a &lt;code&gt;--userstrap&lt;/code&gt; flag that will set this up for you automatically.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ plx --userstrap /path/to/some/perl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Calling &lt;code&gt;--userstrap&lt;/code&gt; essentially sets up your &lt;code&gt;$HOME&lt;/code&gt; to be a Plx project and sets up a &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; in &lt;code&gt;$HOME/perl5&lt;/code&gt;, installs &lt;a href="https://metacpan.org/pod/App::plx"&gt;App::plx&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;App::cpanminus&lt;/a&gt; into the local::lib, and adds a line to your &lt;code&gt;$HOME/.bashrc&lt;/code&gt; that sets up Plx for your Bash shell.&lt;/p&gt;

&lt;p&gt;Now when you run Plx from outside a dedicated Plx project it will use &lt;code&gt;$HOME&lt;/code&gt; as a sort of default Plx project. You can use &lt;code&gt;--userstrap&lt;/code&gt; to prevent needing to use your system Perl, so you and can instead always use Plx.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;--userstrap&lt;/code&gt; requires that you use a Bash shell.&lt;/p&gt;

&lt;p&gt;&lt;a id="org285989d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Plx is For Everybody
&lt;/h1&gt;

&lt;p&gt;Plx is designed to not only provide a nice experience for Perl developers, but also to be usable by a sysadmin that isn't a Perl expert. Therefore Plx is configured through simple text files that can be manipulated by hand, and allows multiple commands to be run in a single Plx invocation via the &lt;code&gt;--multi&lt;/code&gt; flag, which makes scripting Plx cleaner.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgdee387b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Synopsis
&lt;/h1&gt;

&lt;p&gt;Plx is a tool for creating per-project virtual Perl environments. Plx lets us avoid a lot of headaches that come with developing multiple Perl projects on the same system.&lt;/p&gt;

&lt;p&gt;A lot of what Plx does can be done by combining features of other CPAN modules, but Plx brings together these functionalities in a way that is easy to use and understand.&lt;/p&gt;

&lt;p&gt;This blog post is only a brief introduction to Plx. Please go on to read the manual for more a more detailed overview of its features.&lt;/p&gt;

&lt;p&gt;&lt;a id="orgef3ab18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  
  
  Bonus Tip for Emacs Users
&lt;/h1&gt;

&lt;p&gt;If you lint your Perl code with the Perl interpreter using Flycheck, you will need to determine if the buffer is part of a Plx project so it runs the Perl interpreter through Plx.&lt;/p&gt;

&lt;p&gt;Use the following code to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight common_lisp"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'flycheck&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'projectile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'flycheck-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'cperl-mode-hook&lt;/span&gt; &lt;span class="ss"&gt;'my/cperl-select-correct-flycheck-checker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flycheck-define-checker&lt;/span&gt; &lt;span class="nv"&gt;my/perl-plx&lt;/span&gt;
  &lt;span class="ss"&gt;:command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"plx"&lt;/span&gt; &lt;span class="s"&gt;"-w"&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;option-list&lt;/span&gt; &lt;span class="s"&gt;"-I"&lt;/span&gt; &lt;span class="nv"&gt;flycheck-perl-include-path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;option-list&lt;/span&gt; &lt;span class="s"&gt;"-M"&lt;/span&gt; &lt;span class="nv"&gt;flycheck-perl-module-list&lt;/span&gt; &lt;span class="nv"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="ss"&gt;:standard-input&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;
  &lt;span class="ss"&gt;:error-patterns&lt;/span&gt;
  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;error&lt;/span&gt; &lt;span class="nv"&gt;line-start&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;minimal-match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="s"&gt;" at - line "&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="s"&gt;", "&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;zero-or-more&lt;/span&gt; &lt;span class="nv"&gt;not-newline&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="nv"&gt;line-end&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="ss"&gt;:modes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;perl-mode&lt;/span&gt; &lt;span class="nv"&gt;cperl-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/cperl-select-correct-flycheck-checker&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"If the current buffer is part of a plx project then use the `my/perl-plx'
checker, otherwise use the `perl' checker."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;proj-root&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;projectile-project-root&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;proj-root&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file-directory-p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;concat&lt;/span&gt; &lt;span class="nv"&gt;proj-root&lt;/span&gt; &lt;span class="s"&gt;".plx"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flycheck-select-checker&lt;/span&gt; &lt;span class="ss"&gt;'my/perl-plx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;flycheck-select-checker&lt;/span&gt; &lt;span class="ss"&gt;'perl&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</content>
    <author>
      <name>Nicholas Hubbard</name>
    </author>
    <id>https://dev.to/nicholasbhubbard/segregate-perl-projects-with-appplx-7oj</id>
    <published>2022-09-03T00:09:10Z</published>
    <updated>2022-09-03T00:09:10Z</updated>
    <category term="perl"/>
  </entry>
  <entry>
  <title>Dancer2: Sessions</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-09-02T14:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-sessions"/>  <id>https://perlmaven.com/dancer2-sessions</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Distribution auf Dist::Zilla umstellen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-09-02-distribution-auf-distzilla-umstellen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In diesem Artikel zeige ich dir, wie du eine bestehende Distribution mit möglichst wenig Aufwand auf Dist::Zilla umstellen kannst.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-09-02-distribution-auf-distzilla-umstellen</id>
    <published>2022-09-02T10:00:00Z</published>
    <updated>2022-09-02T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Aug 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/09/01/list-of-new-cpan-distributions-aug-2022/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Octopart">API-Octopart</a></td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1.001</td>
<td>1.001</td>
<td>Simple inteface for querying part status across vendors at octopart.com.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModules-WordListBundle-Proverbs">Acme-CPANModules-WordListBundle-Proverbs</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>All proverbs WordList modules (in all languages)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Algorithm-Graphs-Reachable-Tiny">Algorithm-Graphs-Reachable-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Compute rechable nodes in a graph.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Fetch-HostAllowList">Alien-Build-Plugin-Fetch-HostAllowList</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Require that Alien::Build based aliens only fetch from an allow list of hosts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Build-Plugin-Fetch-HostBlockList">Alien-Build-Plugin-Fetch-HostBlockList</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Reject any Alien::Build fetch requests going to hosts in the block list</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Libdogecoin">Alien-Libdogecoin</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>v0.1.1</td>
<td>v0.1.1.1</td>
<td>Discover or download and install libdogecoin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-FontUtils">App-FontUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Command-line utilities related fonts and font files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Games-Keno">App-Games-Keno</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1.222380</td>
<td>1.222380</td>
<td>Plays Keno</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-InvestSim">App-InvestSim</a></td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>v0.8.0</td>
<td>v1.0.1</td>
<td>Simulateur d'investissement locatif</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Keno">App-Keno</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>1.222380</td>
<td>1.222380</td>
<td>Plays Keno</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Perl-Module-Examples">App-Perl-Module-Examples</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Tool for creating examples from Perl module POD documentation.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Schema-Deploy">App-Schema-Deploy</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Base class and script for Schema deploy.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-Data-Walk-More">Bencher-Scenarios-Data-Walk-More</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Scenarios to benchmark Data::Walk::More</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bundle-DadaMail-IncludedInDistribution">Bundle-DadaMail-IncludedInDistribution</a></td>
<td><a href="https://metacpan.org/author/JJSIMONI">JJSIMONI</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>CPAN Bundle of modules used in Dada Mail that are included within the distribution.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cache-CodeBlock">Cache-CodeBlock</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.02</td>
<td>caching via a code block</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Check-Fork">Check-Fork</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Check fork functionality.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Check-Socket">Check-Socket</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Check socket functionality.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Chemistry-File-CML">Chemistry-File-CML</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.10</td>
<td>0.11</td>
<td>CML reader</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ControlBreak">ControlBreak</a></td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>1.00</td>
<td>v0.22.243</td>
<td>Compare values during iteration to detect changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CryptoTron-AddrTools">CryptoTron-AddrTools</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.05</td>
<td>Perl extension for blah blah blah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cucumber-Test-Release-Automation">Cucumber-Test-Release-Automation</a></td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>0.0.0</td>
<td>v0.0.39</td>
<td>Dummy project for testing release automation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-FilterBundle-Phone">Data-Sah-FilterBundle-Phone</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Sah filters related to phone numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-Holidays-BQ">Date-Holidays-BQ</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Bonaire's official holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Date-Holidays-US">Date-Holidays-US</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Date::Holidays Adapter for US Federal holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Devel-MAT-Tool-Future">Devel-MAT-Tool-Future</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>analyse Future logic</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/English-Name">English-Name</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>${^ENGLISH_NAME} for magic variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Feature-Compat-Class">Feature-Compat-Class</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>make class syntax available</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Finance-Libdogecoin">Finance-Libdogecoin</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20220814.2215</td>
<td>1.20220815.1712</td>
<td>Use the libdogecoin shared library from Perl!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-XS">Future-XS</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.03</td>
<td>experimental XS implementation of Future</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Glitch">Glitch</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>0.06</td>
<td>The great new Glitch!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HTTP-Curl">HTTP-Curl</a></td>
<td><a href="https://metacpan.org/author/KNI">KNI</a></td>
<td>1.03</td>
<td>1.04</td>
<td>HTTP interface for Net::Curl (clone HTTP::Any::Curl)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HV-Monitor">HV-Monitor</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>A generalized module for gathering stats for a hypervisor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hydrogen">Hydrogen</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>0.015</td>
<td>utilities for the simplest elements of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iss-Ah-Predictor">Iss-Ah-Predictor</a></td>
<td><a href="https://metacpan.org/author/CHRISTOPH">CHRISTOPH</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>ISS AH Predictor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Permutation">Math-Permutation</a></td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>0.01</td>
<td>0.01</td>
<td>pure Perl implementation of functions related to the permutations </td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-Access">Mojolicious-Plugin-Access</a></td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Mojolicious::Plugin::Access Control remote ip access your App</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mooish-AttributeBuilder">Mooish-AttributeBuilder</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>0.001</td>
<td>0.002</td>
<td>build Mooish attribute definitions with less boilerplate</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-HTTP2">Net-HTTP2</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01_01</td>
<td>0.01_01</td>
<td>HTTP/2 in Perl, simplified.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-MBE">Net-MBE</a></td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>0.2.0</td>
<td>0.2.2</td>
<td>Perl library to access Mailboxes Etc (MBE) online webservices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-Wait">Net-Wait</a></td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Wait on startup until the specified ports are listening</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Optimization-NSGAII">Optimization-NSGAII</a></td>
<td><a href="https://metacpan.org/author/DRUBINO">DRUBINO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>non dominant sorting genetic algorithm for multi-objective optimization</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Modules-RequireExplicitPackage-ObjectPad">Perl-Critic-Policy-Modules-RequireExplicitPackage-ObjectPad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Always make the package/Object::Pad class explicit.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero">Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero</a></td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Don't use numeric variable names with leading zeroes.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PickLE">PickLE</a></td>
<td><a href="https://metacpan.org/author/NATHANPC">NATHANPC</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>An electronic component pick list application and file parser library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Plack-App-GitHubPages-Faux">Plack-App-GitHubPages-Faux</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.02</td>
<td>0.02</td>
<td>PSGI app to test your GitHub Pages site</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Sah-Schemas-Re">Sah-Schemas-Re</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Various regular-expression schemas</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ScalarTypes-NumericTypes">ScalarTypes-NumericTypes</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.11</td>
<td>Perl extension for identifyling special types of numbers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Schema-Abstract">Schema-Abstract</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.03</td>
<td>Abstract class for Schema modules.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TableDataBundle-Locale-JP-City">TableDataBundle-Locale-JP-City</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Collection of TableData:: modules that contain list of cities in Japan</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Term-ANSIColor-Concise">Term-ANSIColor-Concise</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>2.00_03</td>
<td>2.01</td>
<td>Produce ANSI terminal sequence by concise notation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Terminal-Control">Terminal-Control</a></td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>0.01</td>
<td>0.06</td>
<td>Perl extension for terminal control</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Pod-CoverageChange">Test-Pod-CoverageChange</a></td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>0.002</td>
<td>0.003</td>
<td>Test Perl files for POD coverage and syntax changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Sah-Filter">Test-Sah-Filter</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Test Data::Sah::Filter::* modules in distribution</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Voo">Voo</a></td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>42.42</td>
<td>42.43</td>
<td>Run functions at compile time, not runtime!</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-eBay">WebService-eBay</a></td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>0.001</td>
<td>0.005</td>
<td>Interface with the eBay API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-LibXML-xmlsec">XML-LibXML-xmlsec</a></td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>0.01</td>
<td>0.03</td>
<td>XML signing/encription using xmlsec library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-LibXMLSec">XML-LibXMLSec</a></td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>0.010</td>
<td>0.010</td>
<td>bindings to some of xmlsec1</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XML-XPath-Helper-String">XML-XPath-Helper-String</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>1.01</td>
<td>Helper functions for xpath expression</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/app-paperback">app-paperback</a></td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>0</td>
<td>1.11</td>
<td>imposition of PDF pages for signature printing and bounding</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perl-Test-Pod-CoverageChange">perl-Test-Pod-CoverageChange</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.002</td>
<td>0.002</td>
<td>Test Perl files for POD coverage and syntax changes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/perl-app-paperback">perl-app-paperback</a></td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>0.33</td>
<td>0.33</td>
<td>imposition of PDF pages for signature printing and bounding</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>61</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>38</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>7</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>5</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/TYUPYRCML">TYUPYRCML</a></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/ZTENRETEP">ZTENRETEP</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/MONACCI">MONACCI</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ECARROLL">ECARROLL</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JJSIMONI">JJSIMONI</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MATHIAS">MATHIAS</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/JJATRIA">JJATRIA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/NATHANPC">NATHANPC</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/KNI">KNI</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/WYANT">WYANT</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/EWHEELER">EWHEELER</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/ESTRELOW">ESTRELOW</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CHRISTOPH">CHRISTOPH</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/DRUBINO">DRUBINO</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/CYFUNG">CYFUNG</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PUCKERING">PUCKERING</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/CARELINE">CARELINE</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CUKEBOT">CUKEBOT</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/DAKKAR">DAKKAR</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/BINARY">BINARY</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ARTHAS">ARTHAS</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Octopart EWHEELER 1.001 1.001 Simple inteface for querying part status across vendors at octopart.com. Acme-CPANModules-WordListBundle-Proverbs PERLANCAR 0.001 0.001 All proverbs WordList modules (in all languages) Algorithm-Graphs-Reachable-Tiny AAHAZRED 0.01 0.03 Compute rechable nodes in a graph. Alien-Build-Plugin-Fetch-HostAllowList PLICEASE 0.01 0.01 Require that Alien::Build based aliens only fetch from an allow list … <a href="https://perlancar.wordpress.com/2022/09/01/list-of-new-cpan-distributions-aug-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Aug 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1996</id>
    <published>2022-09-01T03:01:03Z</published>
    <updated>2022-09-01T03:01:03Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>#579 - Looking for that motivation</title>
    <link rel="alternate" href="https://perlweekly.com/archive/579.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p><a href="https://perlweekly.com/archive/577.html">Last time</a> I mentioned the numbers I collect with the number of visitors to CPAN and I was wondering about the increased activity starting in August 2011. I got a few comments in email and some on <a href="https://www.reddit.com/r/perl/comments/wosxyi/perl_weekly_issue_577_optimism_and_numbers/">Reddit</a>.</p>
<p>Probably the best explanation is what I received from Neil Bowers:</p>
<p>Have a look at the <a href="https://neilb.org/2022/02/07/cpan-report-2022.html">CPAN report I did in February</a>. If you look at the new user signups, you'll see a jump in 2012, and also looking at that chart you'll see that 2012, 2013, and 2014 seem to buck a trend.</p>
<p>In 2012 Intermediate Perl was released, which told the reader to sign up for a PAUSE account and release a test module. If I remember right, brian d foy ran a tutorial at YAPC::NA the previous year, where he also got people to sign up (not sure if the tutorial was 2011 or 2012). We had the first CPAN Day in 2014, which also resulted in a big bump in CPAN releases. That may have helped 2014 stay up above the trend.</p>
<p>The question now, what could be a new motivation to increase activity and if there could be one that is sustainable?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/579.html</id>
    <published>2022-08-29T10:00:00Z</published>
    <updated>2022-08-29T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Configuration</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-24T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-configuration"/>  <id>https://perlmaven.com/dancer2-configuration</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>#578 - Corinna MVP</title>
    <link rel="alternate" href="https://perlweekly.com/archive/578.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Belated Happy Independence Day to all fellow Indians. We celebrated 75th Anniversary of Independence on <strong>15th August</strong>, a proud moment for all of us.</p>
<p>Ever since the release of <strong>Perl v5.36</strong>, everyone is looking forward to the next big thing in the pipeline, <strong>Corinna</strong>. I am sure, you don't need an introduction but if you do then you can take a look at this <a href="https://github.com/Ovid/Cor">official documentation</a>. <strong>Curtis Poe</strong> recently shared the latest update about the <strong>Corinna (MVP)</strong> as accepted by The Perl Steering Committee as detailed in the <a href="https://github.com/Ovid/Cor/blob/master/rfc/mvp.md">document</a>.</p>
<p>Do you follow the latest release to <strong>CPAN</strong> on <a href="https://metacpan.org/recent">MetaCPAN</a>?</p>
<p>I noticed one particular distribution, <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, currently maintained by a friend of mine and colleague at work, <strong>Julien Fiegehenn</strong>. He is on the mission to clear pending issues. He shared the news recently that pull request queue is empty in this <a href="https://twitter.com/simbabque/status/1559267485764816896">Twitter thread</a>. I noticed the distribution has <strong>92.50% coverage</strong>. If you have spare time and would like to contribute then please do help get <strong>100% coverage</strong>.</p>
<p>Perl jobs in London seems getting back on track. Couple of days ago, I received an email about <a href="https://perl.careers/jobs/perl_programmer_business_owner_uk_eu_remote">Perl role in London</a> by Perl Careers. The title of the post caught my eye, <strong>Perl Developer and Business Owner?</strong>.</p>
<p>Last but not the least, I would like to recommend <a href="https://leanpub.com/learning_perl_exercises">Learning Perl Exercises</a> by <strong>brian d foy</strong>. I am sure, you will find it handy.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/578.html</id>
    <published>2022-08-22T10:00:00Z</published>
    <updated>2022-08-22T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>#577 - Optimism and numbers</title>
    <link rel="alternate" href="https://perlweekly.com/archive/577.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>last week Mohammad expressed his optimism about Perl rising again. It's nice to have a gut feeling about that, but I would also like to see the numbers. So I looked at the stats I've been collecting for a while: The number of <a href="https://szabgab.com/cpan-number-of-visits.html">visits to CPAN</a>. More specifically these are the number of "entrances" to MetaCPAN (and in earlier times to SCO as well.) as measured by Google Analytics.</p>
<p>My assumption is that we can measure well the level of Perl usage by the number of visits to <a href="https://metacpan.org/">MetaCPAN</a>.</p>
<p>The number for July 2022 does not indicate any (positive) changes, but it is probably too early to see any effects anyway.</p>
<p>However, looking at the numbers I noticed that there was a nice increase in the activity in 2012. Actually starting in August 2011. This increased activity lasted about a year then the decline continued and by 2014 the activity was below that of the 2011 level.</p>
<p>I could find 2 Perl-related events preceding the increased activity. In May 2011 the release of perl 5.14 and in July the opening of MetaCPAN. Neither seem to explain the change. So I am turning to you:</p>
<p>What other things happened in or out of the Perl community that might explain that sudden increase of visitors to CPAN?</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/577.html</id>
    <published>2022-08-15T10:00:00Z</published>
    <updated>2022-08-15T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Solution 2 - Random redirect</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-08-15T08:17:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-solution-2-random-redirect"/>  <id>https://perlmaven.com/dancer2-solution-2-random-redirect</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Cyclops Validation</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/08/14#pwc177" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to validate the given number 
against the included check digit.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

my @damm_matrix;
$damm_matrix[0] = [0, 7, 4, 1, 6, 3, 5, 8, 9, 2];
$damm_matrix[1] = [3, 0, 2, 7, 1, 6, 8, 9, 4, 5];
$damm_matrix[2] = [1, 9, 0, 5, 2, 7, 6, 4, 3, 8];
$damm_matrix[3] = [7, 2, 6, 0, 3, 4, 9, 5, 8, 1];
$damm_matrix[4] = [5, 1, 8, 9, 0, 2, 7, 3, 6, 4];
$damm_matrix[5] = [9, 5 ,7, 8, 4, 0, 2, 6, 1, 3];
$damm_matrix[6] = [8, 4, 1, 3, 5, 9, 0, 2, 7, 6];
$damm_matrix[7] = [6, 8, 3, 4, 9, 5, 1, 0, 2, 7];
$damm_matrix[8] = [4, 6, 5, 2, 7, 8, 3, 1, 0, 9];
$damm_matrix[9] = [2, 3, 9, 6, 8, 1, 4, 7, 5, 0];

sub damm_validation{
    my($x) = @_;
    my @digits = split(//, $x);
    my $interim_digit = 0;
    while(my $d = shift @digits){
        $interim_digit = $damm_matrix[$d][$interim_digit];
    }
    return boolean($interim_digit == 0);
}

MAIN:{
    print damm_validation(5724) . "\n";
    print damm_validation(5727) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Damm Validation really boils down to a series of table lookups. Once that is determined
we need to encode the table and then perform the lookups in a loop. &lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 20 Palindromic Prime Cyclops Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
no warnings q/recursion/;
use Math::Primality qw/is_prime/;

sub n_cyclops_prime_r{
    my($i, $n, $cyclops_primes) = @_;
    return @{$cyclops_primes} if @{$cyclops_primes} == $n;
    push @{$cyclops_primes}, $i if is_prime($i) &amp;&amp; 
                                   length($i) % 2 == 1 &amp;&amp;
                                   join("", reverse(split(//, $i))) == $i &amp;&amp;
                                   (grep {$_ == 0} split(//, $i))   == 1 &amp;&amp; 
                                   do{my @a = split(//, $i);
                                      $a[int(@a / 2)]
                                   } == 0;
    n_cyclops_prime_r(++$i, $n, $cyclops_primes);
}

sub n_cyclops_primes{
    my($n) = @_;
    return n_cyclops_prime_r(1, $n, []);
}

MAIN:{
    print join(", ", n_cyclops_primes(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
101, 16061, 31013, 35053, 38083, 73037, 74047, 91019, 94049, 1120211, 1150511, 1160611, 1180811, 1190911, 1250521, 1280821, 1360631, 1390931, 1490941, 1520251
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I recently saw the word &lt;em&gt;whipupitide&lt;/em&gt; used by Dave Jacoby and here is, I think, a good
example of it. We need to determine if a number is prime, palindromic, and cyclops. In 
Perl we can determine all of these conditions very easily. &lt;/p&gt;

&lt;p&gt;Just to add a bit of fun I decided to use a recursive loop. Out of necessity this will 
have a rather deep recursive depth, so we'll need to set &lt;code&gt;no warnings q/recursion/&lt;/code&gt; or 
else perl will complain when we go deeper than 100 steps. We aren't using too much memory
here, but if that were a concern we could do Perl style 
&lt;a href="https://perldoc.perl.org/functions/goto"&gt;tail recursion&lt;/a&gt; with a &lt;code&gt;goto __SUB__&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-177/"&gt;Challenge 177&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc177</id>
    <published>2022-08-14T17:59:00-04:00</published>
    <updated>2022-08-14T17:59:00-04:00</updated>
    <category term="/perl"/>
  </entry>
</feed>
