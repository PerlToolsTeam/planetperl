<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-12-30T12:50:52Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge 145: Dot Product</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/12/perl-weekly-challenge-145-dot-product.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10605</id>
    <published>2021-12-27T20:50:38Z</published>
    <updated>2021-12-29T15:09:46Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 145 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-145/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on January 2, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Dot Product</h2>

<p><em>You are given 2 arrays of same size, <code>@a</code> and <code>@b</code>.</em></p>

<p><em>Write a script to implement Dot Product.</em></p>

<p><em>Example:</em></p>

<pre><code>@a = (1, 2, 3);
@b = (4, 5, 6);

$dot_product = (1 * 4) + (2 * 5) + (3 * 6) =&gt; 4 + 10 + 18 =&gt; 32
</code></pre>

<h3>Dot Product in Raku</h3>

<p>Raku is particularly well-suited to solve this task.</p>

<p>Assuming we have the two arrays presented in the task description (<code>@a = (1, 2, 3);</code> and <code>@b = (4, 5, 6);</code>), the infix <code>Z</code> <a href="https://docs.raku.org/language/operators#index-entry-Zip_operator">zip operator</a> will interleave the values from the two arrays like a zipper, taking index-corresponding elements from each operand:</p>

<pre><code>say @a Z @b;  # prints: ((1 4) (2 5) (3 6))
</code></pre>

<p>That&#8217;s already quite good, but <code>Z</code> is also a <a href="https://docs.raku.org/language/operators#index-entry-Z_(zip_metaoperator">metaoperator</a>) that can be combined with another infix operator that will be applied to each pair of the above result. Thus, using <code>Z*</code>, we obtain directly the individual products:</p>

<pre><code>say @a Z* @b; # prints: (4 10 18)
</code></pre>

<p>Finally, we only need to add these partial results (with the built-in <code>sum</code> function or method, or with another metaoperator combination, <code>[+]</code>) to fulfill the task in just one very short code-line:</p>

<pre><code>use v6;

my @a = 1, 2, 3;
my @b = 4, 5, 6;

say sum @a Z* @b;  # Could also be: say [+] @a Z* @b;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku ./dot-product.raku
32
</code></pre>

<h3>Dot Product in Perl</h3>

<p>Since Perl doesn&#8217;t have the Zip operator and metaoperator, we cannot port the Raku solution to Perl. But, using a <code>map</code>, we can nevertheless implement a fairly concise solution:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @a = (1, 2, 3);
my @b = (4, 5, 6);

my $result = 0;
$result += $_ for map { $a[$_] * $b[$_] } 0..$#a;
say $result;
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl ./dot-product.pl
32
</code></pre>

<h2>Task 2: Palindromic Tree</h2>

<p>This task requests us to implement a fairly complicated algorithm. I&#8217;ll try to come back to that later, if I have time and if I succeed to understand the requirement.</p>

<p><em>Update (Dec. 29):</em> Finally, I have completed this second task <a href="http://blogs.perl.org/users/laurent_r/2021/12/perl-weekly-challenge-145-palindromes.html">here</a>.</p>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 9, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>My new modules in 2021</title>
    <link rel="alternate" href="http://blogs.perl.org/users/leon_timmermans/2021/12/my-new-modules-in-2021.html"/>
    <id>tag:blogs.perl.org,2021:/users/leon_timmermans//150.10609</id>
    <published>2021-12-29T14:29:16Z</published>
    <updated>2021-12-29T14:49:27Z</updated>
    <author>
        <name>Leon Timmermans</name>
        <uri>http://codespeaks.blogspot.com/</uri>
    </author>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="raku" label="raku" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/leon_timmermans/">
        <![CDATA[<h1>Perl</h1>

<p>I had a reasonably productive year, releasing several modules that I think/hope are useful for the wider ecosystem.</p>

<h2>Crypt::Passphrase</h2>

<p>This module manages the passwords in a cryptographically agile manner. That means that it can not only verify passwords using different ciphers, but it also aids in gradually upgrading passwords hashed with an outdated cipher (or outdated settings) to the current one; for example when you want to upgrade from bcrypt to argon2. Password hashing is both a rather common form of cryptography, and one that is more subject to change than others; you should probably reevaluate your password handling every couple of years. With this module, you can initiate such a transition with a simple configuration change.</p>

<p>This also includes a number of extension distributions (e.g. <code>Crypt::Passphrase::Argon2</code>, <code>Crypt::Passphrase::Bcrypt</code>, etc&#133;), and one new backend module (<code>Crypt::Bcrypt</code>)</p>

<h2>Thread::Csp</h2>

<p>My most ambitious project of the year by far. It's actually been in the making for a decade, full of lessons learned in my <a href="https://metacpan.org/pod/threads::lite">previous attempt</a>. Thread::Csp is a new threading library (build on ithreads primitives, but not on threads.pm and doesn't clone whole interpreters); it is based on <a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes</a> (hence the name), the same model that Go uses (in particular for its channels).</p>

<p>I firmly believe share-nothing message-passing models of multi-threading are the overlap between what is useful and what is realistically possible given the current interpreter.</p>

<h2>autocroak</h2>

<p>This is essentially an autodie replacement with one important difference: it's based on opcode overrides instead of function overrides. This means not only that it interacts better with other pragmas, but also that it can support keywords that can not easily be overriden (such as <code>print</code> and <code>system</code>). It should also give less weird edge-cases than autodie.</p>

<h1>Raku</h1>

<p>I didn't produce as much Raku code this year, most of my Raku energy went into writing a series of blog posts that eventually I made a <a href="https://www.youtube.com/watch?v=elalwvfmYgk">conference presentation</a> instead.</p>

<h2>Crypt::Passphrase</h2>

<p>This was a port of the previously mentioned Perl module. It doesn't quite have the backend ecosystem that its big brother has, but given that there's a lot less legacy software in Raku that's not all that much of a problem.</p>

<h2>Net::MQTT</h2>

<p>A friend complained about the lack of MQTT support in Raku, and binary protocols just happen to be something I have a lot of experience with, so I implemented an MQTT client. While arguably this is the least useful module of the bunch, it was the most fun to write. Raku's typesystem and integrated event loop made this experience a lot smoother than they would have been in other languages.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 145: Palindromes</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/12/perl-weekly-challenge-145-palindromes.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10607</id>
    <published>2021-12-29T13:40:58Z</published>
    <updated>2021-12-29T13:47:20Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 145 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-145/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on January 2, 2022 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Dot Product</h2>

<p>This first task of this week’s challenge was covered in <a href="http://blogs.perl.org/users/laurent_r/2021/12/perl-weekly-challenge-145-dot-product.html">this blog post</a>.</p>

<h2>Task 2: Palindromic Tree</h2>

<p><em>You are given a string <code>$s</code>.</em></p>

<p><em>Write a script to create a Palindromic Tree for the given string.</em></p>

<p><em>I found this <a href="https://medium.com/@alessiopiergiacomi/eertree-or-palindromic-tree-82453e75025b">blog explaining Palindromic Tree</a> in detail.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $s = 'redivider'
Output: r redivider e edivide d divid i ivi v
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $s = 'deific'
Output: d e i ifi f c
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $s = 'rotors'
Output: r rotor o oto t s
</code></pre>

<p><em>Example 4:</em></p>

<pre><code>Input: $s = 'challenge'
Output: c h a l ll e n g
</code></pre>

<p><em>Example 5:</em></p>

<pre><code>Input: $s = 'champion'
Output: c h a m p i o n
</code></pre>

<p><em>Example 6:</em></p>

<pre><code>Input: $s = 'christmas'
Output: c h r i s t m a
</code></pre>

<p>The blog explaining palindromic trees is in my humble opinion somewhat unclear and quite difficult to follow.</p>

<p>If we look at the examples provided, the aim is to find all palindromes that can be formed from fragments of a word. For example, for the word <code>redivider</code>, the palindromic fragments are: <code>r redivider e edivide d divid i ivi v</code>. Note that a single letter is considered to be a palindrome, even though it is sort of a trivial solution. Also note that each palindrome appears only once in the output, so the algorithm somehow removes any duplicates. Finally, the palindromes are ordered by their place of occurrence in the input string.</p>

<p>With these properties in mind, we can write a much simpler algorithm to find all palindromes and generate exactly the requested output.</p>

<p>The point about the palindromic tree algorithm is that it is supposed to be efficient. Well, I&#8217;m not even sure that a proper palindromic tree implementation would run faster than my implementations below with the input examples provided. As Donald Knuth wrote in <em>The Art of Computer Programming</em>, &#8220;premature optimization is the root of all evil (or at least most of it) in programming.&#8221; So, before spending a lot of time and energy on implementing a fairly complicated algorithm, let&#8217;s see how a much simpler naive implementation behaves.</p>

<p>Well, with the six input words provided in the task specification, the Perl program below is timed as follows on my laptop (a relatively good computer, but certainly not a racing horse):</p>

<pre><code>real    0m0,048s
user    0m0,015s
sys     0m0,030s
</code></pre>

<p>In other words, it runs <em>in less than 50 milliseconds</em> (compile time included). This is fairly good, isn&#8217;t it? Why, for heaven&#8217;s sake, would you want to optimize this? I certainly don&#8217;t want to spend hours on a complicated algorithm just to <em>possibly</em> scrap a few milliseconds.</p>

<p>Admittedly, for very long input strings, the palindromic tree algorithm may perform faster, but palindromes are normally used on actual words, which rarely have more than a dozen letters. </p>

<p>And, as we shall see, our output is exactly what is requested from us in the task specification. So, why bother?</p>

<h3>Palindromes in Raku</h3>

<p>We just use two nested loops to generate all fragments of the input words. Then we filter out fragments that are not palindromes and palindromes that have already been seen previously for the same input (to avoid duplicates).</p>

<pre><code>use v6;

sub is-palindrome (Str $in) { return $in eq $in.flip; }

sub find-all-palindromes ($input) {
    print "$input: ";
    my BagHash $seen;
    for 0..$input.chars -&gt; $start {
        for 1..$input.chars - $start -&gt; $length {
            my $candidate = substr $input, $start, $length;
            next unless is-palindrome $candidate.Str;
            next if $seen{$candidate};
            $seen{$candidate}++;
            print "$candidate ";
        }
    }
    say " ";
}

for &lt;redivider deific rotors challenge
    champion christmas&gt; -&gt;  $test {
        find-all-palindromes $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./palindromes.raku
redivider: r redivider e edivide d divid i ivi v
deific: d e i ifi f c
rotors: r rotor o oto t s
challenge: c h a l ll e n g
champion: c h a m p i o n
christmas: c h r i s t m a
</code></pre>

<h3>Palindromes in Perl</h3>

<p>This is a port to Perl of the above Raku program. Please refer to the explanations above if needed.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_palindrome { return $_[0] eq reverse $_[0]; }

sub find_all_palindromes {
    my $input = shift;
    print "$input: ";
    my %seen;
    my $str_length = length $input;
    for my $start (0..$str_length) {
        for my $length (1.. $str_length - $start) {
            my $candidate = substr $input, $start, $length;
            next unless is_palindrome $candidate;
            next if $seen{$candidate};
            $seen{$candidate} = 1;
            print "$candidate ";
        }
    }
    say " ";
}

for my $test (qw &lt;redivider deific rotors 
              challenge champion christmas&gt;) {
        find_all_palindromes $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl palindromes.pl
redivider: r redivider e edivide d divid i ivi v
deific: d e i ifi f c
rotors: r rotor o oto t s
challenge: c h a l ll e n g
champion: c h a m p i o n
christmas: c h r i s t m a
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 9, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Draft: Dancer2 Deprecation Policy</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/12/draft-dancer2-deprecation-policy.html"/>
    <id>tag:blogs.perl.org,2021:/users/jason_a_crome//712.10606</id>
    <published>2021-12-29T09:28:28Z</published>
    <updated>2021-12-29T09:29:57Z</updated>
    <author>
        <name>Jason A. Crome</name>
        <uri>https://cromedome.net</uri>
    </author>
    <category term="dancer" label="dancer" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="perl" label="perl" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/jason_a_crome/">
        <![CDATA[<p>Hello fellow Dancers!</p>

<p>I have posted a draft deprecation policy for the Dancer2 code base for public review: <br />
https://github.com/PerlDancer/Dancer2/issues/1635</p>

<p>The Dancer Core Team has done our best to look at this every which way and cover all potential issues and use cases, but we're sure to have missed something here or there. So take a look and let us know. Your feedback is welcome - please add comments, feedback, and suggestions on the issue. </p>

<p>Thanks in advance! :-)<br />
</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Avoid Yoda conditions in Perl you should</title>
    <link rel="alternate" href="https://dev.to/mjgardner/avoid-yoda-conditions-in-perl-you-should-o0j" type="text/html"/>
    <content type="html">&lt;p&gt;I remember a brief time in the mid-2000s insisting on so-called &lt;a href="https://en.wikipedia.org/wiki/Yoda_conditions"&gt;“Yoda conditions”&lt;/a&gt; in my Perl. I would place constants to the left of &lt;a href="https://perldoc.perl.org/perlop#Equality-Operators"&gt;equality comparisons&lt;/a&gt;. In case I accidentally typed a single &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;, the compiler would catch it instead of blithely &lt;a href="https://perldoc.perl.org/perlop#Assignment-Operators"&gt;assigning&lt;/a&gt; a variable. E.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# don’t do this&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# do this&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# to prevent this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And because &lt;a href="https://www.goodreads.com/quotes/353571"&gt;a foolish consistency is the hobgoblin of little minds&lt;/a&gt;, I would even extend this to string and relational comparisons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# weirdo&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# make it stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks weird, and it turns out it’s unnecessary as long as you precede your code with &lt;code&gt;use warnings;&lt;/code&gt;. Perl will then &lt;a href="https://perldoc.perl.org/perldiag#Found-=-in-conditional,-should-be-=="&gt;warn you&lt;/a&gt;: “&lt;code&gt;Found = in conditional, should be ==&lt;/code&gt;“. (Sidenote: Perl v5.36, due in mid-2022, is &lt;a href="https://metacpan.org/release/ETHER/perl-5.35.3/view/pod/perldelta.pod#Core-Enhancements"&gt;slated to enable warnings by default&lt;/a&gt; if you do &lt;code&gt;use v5.35;&lt;/code&gt; or above, in addition to the strictness that &lt;a href="https://perldoc.perl.org/perl5120delta#Implicit-strictures"&gt;was enabled with &lt;code&gt;use v5.11;&lt;/code&gt;&lt;/a&gt;. Yay for less boilerplate!)&lt;/p&gt;

&lt;p&gt;If you want to fatally catch this and many other warnings, use the &lt;a href="https://metacpan.org/pod/strictures"&gt;strictures module from CPAN&lt;/a&gt; in your code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strictures&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will cause your code to throw an &lt;a href="https://phoenixtrap.com/2021/02/22/exceptional-perl-failure-is-an-option/"&gt;exception&lt;/a&gt; if it commits many &lt;a href="https://perldoc.perl.org/warnings#Category-Hierarchy"&gt;categories&lt;/a&gt; of mistakes. If you’re running in a version control system’s working directory (specifically &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;, &lt;a href="https://subversion.apache.org/"&gt;Subversion&lt;/a&gt;, &lt;a href="https://www.mercurial-scm.org/"&gt;Mercurial&lt;/a&gt;, or &lt;a href="https://bazaar.canonical.com/"&gt;Bazaar&lt;/a&gt;), the module also prevents you from using &lt;a href="https://perldoc.perl.org/perlobj#Indirect-Object-Syntax"&gt;indirect object syntax&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/variables/%24;"&gt;Perl 4‑style multidimensional arrays&lt;/a&gt;, and &lt;a href="https://perldoc.perl.org/functions/open#Assigning-a-filehandle-to-a-bareword"&gt;bareword filehandles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Getting back to assignments vs. conditionals, there is one case where I’ve found it to be acceptable to use an assignment inside an if statement, and that’s when I need to use the result of a check inside the condition. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;some_truthy_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# do something further with $foo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This keeps the scope of &lt;code&gt;some_truthy_function()&lt;/code&gt;‘s result inside the block so that I don’t pollute the outer scope with a temporary variable. Fortunately, Perl doesn’t warn on this syntax.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image: &lt;a href="https://commons.wikimedia.org/wiki/File:Yoda_(29065553886).jpg"&gt;Paul VanDerWerf from Brunswick, Maine, USA&lt;/a&gt;, &lt;a href="https://creativecommons.org/licenses/by/2.0"&gt;CC BY 2.0&lt;/a&gt;, via Wikimedia Commons&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/avoid-yoda-conditions-in-perl-you-should-o0j</id>
    <published>2021-12-28T15:00:00Z</published>
    <updated>2021-12-28T15:00:00Z</updated>
    <category term="perl"/>
    <category term="conditions"/>
    <category term="warnings"/>
    <category term="strictures"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 144: Semiprimes and Ulam Sequence</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/12/perl-weekly-challenge-144-semiprimes-and-ulam-sequence.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10600</id>
    <published>2021-12-23T03:30:57Z</published>
    <updated>2021-12-27T20:07:43Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 144 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-144/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few days from now (on December 26, 2021 at 24:00). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Semiprimes</h2>

<p><em>Write a script to generate all Semiprime number &lt;= 100.</em></p>

<p><em>For more information about Semiprime, please checkout the <a href="https://en.wikipedia.org/wiki/Semiprime">Wikipedia</a> page.</em></p>

<blockquote>
  <p>In mathematics, a semiprime is a natural number that is the product of exactly two prime numbers. The two primes in the product may equal each other, so the semiprimes include the squares of prime numbers.</p>
</blockquote>

<p><em>Example:</em></p>

<pre><code>10 is Semiprime as 10 = 2 x 5
15 is Semiprime as 15 = 3 x 5
</code></pre>

<p>Semiprimes might look like a somewhat useless curiosity, but they are in fact extremely important in the field of public key cryptography. For example, generating the public and private keys for a RSA cipher involves generating two very large prime numbers (with several dozens of digits) and computing their product. Raku has built-in features to quickly create RSA keys (and also to encode messages and decode cryptograms): arbitrary precision integers, an efficient <code>is-prime</code> primality test (using the fast Miller-Rabin test) and modular arithmetic. See <a href="https://raku.land/cpan:BDUGGAN/Crypt::RSA">this</a> for further details. But that&#8217;s another subject.</p>

<h3>Semiprimes in Raku</h3>

<p>We start by generating a list of prime numbers between 1 and 50. Then we want to generate all pairs of such primes. Since we also want square semiprimes (i.e. numbers that are squares of prime numbers), we cannot use the <code>combinations</code> method.  We will use instead the  <code>X</code> <a href="https://docs.raku.org/language/operators#index-entry-cross_product_operator">cross product operator</a> between the array of primes and itself, multiply the pair items, filter out those which are too large, sort them and remove duplicates. </p>

<pre><code>use v6;

constant \MAX = 100;
my @primes = grep { .is-prime }, 1..MAX/2;
my @nums = grep { $_ &lt;= MAX }, map { [*] $_[0,1] }, 
    (@primes X @primes);
say @nums.sort.squish;
# say now - INIT now;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./semi-primes.raku
(4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49 51 55 57 58 62 65 69 74 77 82 85 86 87 91 93 94 95)
</code></pre>

<h3>Semiprimes in Perl</h3>

<p>Our Perl implementation is essentially a port of the Raku implementation, except that we had to roll out our <code>primes</code>subroutine for generating a  list of prime integers, and to use two nested loops for generating the pairs of primes.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MAX =&gt; 100;

sub primes {
    my $max = shift;
    my @primes = (2, 3, 5);
    PRIMES: for my $c (7..$max/2) {
        for my $i (2..$c/2) {
            next PRIMES unless $c % $i;
        }
        push @primes, $c;
    }
    return @primes;
}

my @p = primes MAX;
my @semi_primes;
# Generating pairs of primes and their product 
for my $i (0..$#p) {
    for my $j (0..$i) {
        my $product = $p[$i] * $p[$j];
        push @semi_primes, $product if $product &lt;= MAX;
    }
}
my @result;
my $j = -1;
# Removing duplicate products
for my $i (sort {$a &lt;=&gt; $b} @semi_primes) {
    push @result, $i if $i != $j;
    $j = $i;
}
say "@result";
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl semi-primes.pl
4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49 51 55 57 58 62 65 69 74 77 82 85 86 87 91 93 94 95
</code></pre>

<h2>Task 2: Ulam Sequence</h2>

<p><em>You are given two positive numbers, <code>$u</code> and <code>$v</code>.</em></p>

<p><em>Write a script to generate Ulam Sequence having at least 10 Ulam numbers where <code>$u</code> and <code>$v</code> are the first 2 Ulam numbers.</em></p>

<p><em>For more information about Ulam Sequence, please checkout this <a href="https://en.wikipedia.org/wiki/Ulam_number">website</a>.</em></p>

<blockquote>
  <p><em>The standard Ulam sequence (the (1, 2)-Ulam sequence) starts with U1 = 1 and U2 = 2. Then for n > 2, Un is defined to be the smallest integer that is the sum of two distinct earlier terms in exactly one way and larger than all earlier terms.</em></p>
</blockquote>

<p><em>Example 1:</em></p>

<pre><code>Input: $u = 1, $v = 2
Output: 1, 2, 3, 4, 6, 8, 11, 13, 16, 18
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input: $u = 2, $v = 3
Output: 2, 3, 5, 7, 8, 9, 13, 14, 18, 19
</code></pre>

<p><em>Example 3:</em></p>

<pre><code>Input: $u = 2, $v = 5
Output: 2, 5, 7, 9, 11, 12, 13, 15, 19, 23
</code></pre>

<p>The fact that a member of the sequence has to be &#8220;the smallest integer that is the sum of two distinct earlier terms <em>in exactly one way</em>&#8221; makes it quite difficult to construct the number directly from the previous ones. For example, suppose we have so far 1, 2, 3, 4. It would probably possible to find the next one. But the fact that it has to be the sum &#8220;in exactly one way&#8221; excludes 5 from the sequence, because it can be reached in two ways (1 + 4 and 2 + 3). But to be able to find that, we basically need to build all possibilities. In other words, we basically need a brute force approach: find all pairs of previous terms, perform the sums and find the smallest unique sum that is larger than the largest previous term. In the process, we can possibly improve the process by pruning values that are too small or too large, to reduce the number of values to examine, but it is still basically a brute force approach.</p>

<p>Note that the task specification asks us to find &#8220;at least 10 Ulam numbers&#8221;. I&#8217;ve decided to generate 12 Ulam numbers, i.e. 10 numbers in addition to the two seeds. This wasn&#8217;t requested, but it is still in line the the requirement of providing <em>at least</em> 10 Ulam numbers.</p>

<h3>Ulam Sequence in Raku</h3>

<p>For a given existing sequence of numbers, we use the <code>combinations</code> method to generate all possible pairs, sum each of them, compute the sums, filter out the sums that are too small and sort them. Then we loop on the resulting list, remove the duplicates and insert in the <code>sequence</code>array the first valid candidate. And we start again with the new sequence and do it ten times in total.</p>

<pre><code>uses v6;

sub ulam ($first, $second) {
    my @sequence = $first, $second;
    for 1..10 {
        my @sums = sort grep { $_ &gt; @sequence[*-1] }, 
            map { [+] $_[0, 1] }, @sequence.combinations: 2;
        my $last = 0;
        for 0..@sums.end -&gt; \i {
            next if @sums[i] == $last;
            push @sequence, @sums[i] and last if i &gt;= @sums.end;
            $last = @sums[i] and next if @sums[i] == @sums[i+1];
            push @sequence, @sums[i] and last;
        }
    }
    return @sequence;
}
for (1,2), (2,3), (2,5) -&gt; $test {
  say "$test =&gt; ", ulam |$test;

}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./ulam_seq.raku
1 2 =&gt; [1 2 3 4 6 8 11 13 16 18 26 28]
2 3 =&gt; [2 3 5 7 8 9 13 14 18 19 24 25]
2 5 =&gt; [2 5 7 9 11 12 13 15 19 23 27 29]
</code></pre>

<h3>Ulam Sequence in Perl</h3>

<p>This is essentially a port to Perl of the Raku solution above, except that we had to implement our own <code>combine</code> subroutine to replace the Raku built-in <code>combination</code> method.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub combine {
    my @seq = @_;
    my $min = $seq[-1];
    my @comb_sums;
    for my $i (0..$#seq) {
        for my $j (0..$i-1) {
            my $sum =  $seq[$i] + $seq[$j];
            next if $sum &lt;= $min;
            push @comb_sums, $sum;
        }
    }
    return sort { $a &lt;=&gt; $b } @comb_sums;
}

sub ulam {
    my @sequence = @{$_[0]};
    for (1..10) {
        my @sums = combine @sequence;
        my $last = 0;
        for my $i (0..$#sums) {
            next if $sums[$i] == $last;
            push @sequence, $sums[$i] and last if $i &gt;= $#sums;
            $last = $sums[$i] and next if $sums[$i] == $sums[$i+1];
            push @sequence, $sums[$i] and last;
        }
    }
    return @sequence;
}
for my $test ([1,2], [2,3], [2,5]) {
    say "@$test =&gt; ", join " ", ulam $test;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>1 2 =&gt; 1 2 3 4 6 8 11 13 16 18 26 28
2 3 =&gt; 2 3 5 7 8 9 13 14 18 19 24 25
2 5 =&gt; 2 5 7 9 11 12 13 15 19 23 27 29
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on January 2, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>#544 - Merry Christmas</title>
    <link rel="alternate" href="https://perlweekly.com/archive/544.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>We wish all the readers of the newsletter, <strong>Merry Christmas</strong>. I hope and wish you are all enjoying quality time with your loved ones.</p>
<p>Belated happy birthday to my favourite language, <strong>Perl</strong>, on completing 34 years. <strong>Mark Gardner</strong> used his weekly blogging schedule to celebrate the occassion in his <a href="https://phoenixtrap.com/2021/12/21/34-at-34-for-v5-34-modern-perl-features-for-perls-birthday">blog post</a>.</p>
<p>Do you remember which year you first picked up the <strong>Perl</strong> language?</p>
<p>For me, I was introduced to <strong>Perl</strong> in the year 1998. So technically, I am 23 Perl years old. How about you? I am wondering if anyone other than the creator picked the language in the first year that it existed. If you know their name then please do share it with us. I am sure there must be a handful of people that I am not aware of.</p>
<p>Talking about birthday celebrations, I would like to wish belated Happy Birthday to the mother of our chief editor, <strong>Gabor Szabo</strong>. As per the record, my birthday was last Monday i.e. <strong>20th December</strong>. To date, I have never celebrated my birthday, this year also went without celebration.</p>
<p>I noticed that I am getting close to my <strong>100th edition</strong> of the newsletter. This is my <strong>94th edition</strong>. It would be a big achievement for me, personally, to reach that number. I am looking forward to the <strong>556th edition</strong> of the weekly newsletter as that will be my <strong>100th edition</strong>.</p>
<p>Stay safe and enjoy the holiday break.</p></div>
    </content>
    <id>https://perlweekly.com/archive/544.html</id>
    <published>2021-12-27T10:00:00Z</published>
    <updated>2021-12-27T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Capture STDOUT and STDERR of external program using Capture::Tiny</title>
  <summary type="html"><![CDATA[<p>
In Perl there are many ways to run external programs. Some of the ways will allow you to capture the output of the external program
and some will even make it easy and fun. We are now looking at <a href="https://metacpan.org/pod/Capture::Tiny">Capture::Tiny</a>.
<p>
]]></summary>
  <updated>2021-12-27T08:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/capture-stdout-stderr-of-external-program"/>  <id>https://perlmaven.com/capture-stdout-stderr-of-external-program</id>
  <content type="html"><![CDATA[<p>
In Perl there are many ways to run external programs. Some of the ways will allow you to capture the output of the external program
and some will even make it easy and fun. We are now looking at <a href="https://metacpan.org/pod/Capture::Tiny">Capture::Tiny</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>How to customize Makefile created by ExtUtils::MakeMaker</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/how-to-customize-makefile-created-by-extutilsmakemaker-3dln" type="text/html"/>
    <content type="html">&lt;p&gt;How to customize Makefile created by &lt;a href="https://metacpan.org/pod/ExtUtils::MakeMaker"&gt;ExtUtils::MakeMaker&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The answer is to define a "My::postamble" subroutine that return added the content of the Makefile.&lt;/p&gt;

&lt;p&gt;See current SPVM &lt;a href="https://github.com/yuki-kimoto/SPVM/blob/master/Makefile.PL"&gt;Makefile.PL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;dynamic&lt;/b&gt; section is used if you want to do something just after the default process of "make"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub MY::postamble {

  # The content of Makefile
  my $make_rule = '';

  # Compile native and precompile codes of standard modules
  unless (grep { $_ eq '-DSPVM_DONT_COMPILE_CORE_MODULES' } @defines) {
    # Native compile make rule
    $make_rule .= SPVM::Builder::Util::create_make_rule_native('Fn');
    $make_rule .= SPVM::Builder::Util::create_make_rule_native('Hash');
    $make_rule .= SPVM::Builder::Util::create_make_rule_native('Time');
    $make_rule .= SPVM::Builder::Util::create_make_rule_native('Unicode');

    # Precompile make rule
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('Fn');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('List');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('ByteList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('ShortList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('IntList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('LongList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('FloatList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('DoubleList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('StringList');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('StringBuffer');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('Hash');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('Unicode');
    $make_rule .= SPVM::Builder::Util::create_make_rule_precompile('Regex');
  }

  # Create precompile tests
  my @test_files;
  find(
    sub {
      if (-f $File::Find::name) {
        my $rel_path = $File::Find::name;
        $rel_path =~ s|^\Q$FindBin::Bin/||;
        if ($rel_path =~ /(\.t|\.pm|\.spvm|\.c|\.cpp|\.h)$/) {
          push @test_files, $rel_path;
        }
      }
    },
    "$FindBin::Bin/t/default"
  );
  my $test_files_str = join(' ', @test_files);
  $make_rule .= "dynamic :: $test_files_str\n";
  $make_rule .= "\tperl t/copy_default_to_precompile.pl\n";

  return $make_rule;
}

1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case of other useful modules such as &lt;a href="https://metacpan.org/pod/Dist::Zilla"&gt;Dist::Zilla&lt;/a&gt;, I don't know the way. If you know it, write the comments.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/how-to-customize-makefile-created-by-extutilsmakemaker-3dln</id>
    <published>2021-12-26T23:35:34Z</published>
    <updated>2021-12-26T23:35:34Z</updated>
    <category term="perl"/>
    <category term="make"/>
    <category term="makefile"/>
  </entry>
  <entry>
    <title>A Stocking Full of Numbers: Semiprimes and the Ulam Sequence</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/26#pwc144" type="text/html"/>
    <content type="html">
&lt;h1&gt;Merry Christmas and Happy New Year! May 2022 bring you less COVID and more Perl projects!&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate all Semiprime numbers &amp;lt;= 100.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean; 
use LWP::UserAgent;
use constant N =&gt; 100; 
use constant PRIME_URL =&gt; "http://primes.utm.edu/lists/small/100000.txt";

sub get_primes{
    my @primes;
    my $ua = new LWP::UserAgent(
        ssl_opts =&gt; {verify_hostname =&gt; 0}
    );
    my $response = $ua-&gt;get(PRIME_URL);
    my @lines = split(/\n/,$response-&gt;decoded_content);
    foreach my $line (@lines){
        my @p = split(/\s+/, $line);
        unless(@p &lt; 10){
            push @primes, @p[1..(@p - 1)];
        }
    }
    return @primes;
}

sub factor{
    my($n) = @_;
    my @factors = ();
    for  my $j (2 .. sqrt($n)){
        if($j**2 == $n){  
            push @factors, [$j, $j] if $j**2 == $n;
            next; 
        }
        push @factors, [$j, $n / $j] if $n % $j == 0;
    }
    return @factors;
}

sub semiprime{
    my($n, $primes) = @_;
    my @factors = factor($n);
    return false if @factors != 1;  
    my @prime_factors = grep {$factors[0]-&gt;[0] == $_ || $factors[0]-&gt;[1] == $_} @{$primes};     
    return true if @prime_factors == 2 || $prime_factors[0]**2 == $n; 
    return false; 
}

sub semiprime_n{
    my @primes = get_primes; 
    for my $n (1 .. N){
        print "$n " if semiprime($n, \@primes);   
    } 
    print "\n"; 
}

MAIN:{
    semiprime_n;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
4 6 9 10 14 15 21 22 25 26 33 34 35 38 39 46 49 51 55 57 58 62 65 69 74 77 82 85 86 87 91 93 94 95
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I am sticking to the convention that I started a while back to not re-compute prime 
numbers myself, but instead just grab them from one of several convenient online sources.
The URL in the code above requires only a small amount of effort to scrape and parse. I 
hope nobody minds the little bit of extra traffic to their site!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please do check out their main page listed below. It's a fun resource with interesting 
facts and news on prime numbers and related research.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once the list of the first 100k primes is obtained (that's more than enough for any of 
these challenges) we proceed to factor and test candidate numbers. Provided the number
has only two factors (which may be equal) and both of them are prime then it passes the 
semiprime test.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive numbers, $u and $v. Write a script to generate Ulam Sequence 
having at least 10 Ulam numbers where $u and $v are the first 2 Ulam numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant ULAM_LIMIT =&gt; 10;   

sub ulam{
    my($u, $v) = @_;    
    my %pairs; 
    my @ulam = ($u, $v); 
    my $w = $u + $v;  
    push @ulam, $w;  
    $pairs{"$u,$v"} = $w; 
    $pairs{"$u,$w"} = $u + $w; 
    $pairs{"$v,$w"} = $v + $w; 
    do{
        my @sums = sort {$a &lt;=&gt; $b} grep{my $sum = $_; my @values = grep{$sum == $_} values %pairs; $sum if @values == 1 &amp;&amp; $sum &gt; $ulam[@ulam - 1]} values %pairs; 
        my $u = $sums[0]; 
        push @ulam, $u;
        for my $pair (keys %pairs){
            my($s, $t) = split(/,/, $pair);  
            $pairs{"$s,$u"} = $s + $u;
            $pairs{"$t,$u"} = $t + $u;
        }   
    }while(@ulam &lt; ULAM_LIMIT);
    return @ulam;  
}

MAIN:{
    my @ulam;
    @ulam = ulam(1, 2);   
    {
        print shift @ulam;
        print ", ";
        redo if @ulam &gt; 1;
    } 
    print shift @ulam;
    print "\n";

    @ulam = ulam(2, 3);   
    {
        print shift @ulam;
        print ", ";
        redo if @ulam &gt; 1;
    } 
    print shift @ulam;
    print "\n";

    @ulam = ulam(2, 5);   
    {
        print shift @ulam;
        print ", ";
        redo if @ulam &gt; 1;
    } 
    print shift @ulam;
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 2, 3, 4, 6, 8, 11, 13, 16, 18
2, 3, 5, 7, 8, 9, 13, 14, 18, 19
2, 5, 7, 9, 11, 12, 13, 15, 19, 23
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The code here is a pretty direct translation of the definition: the next member of the
sequence must be a sum of two previous members which is greater than the previous member
and only be obtainable one way. Here that is done with a &lt;code&gt;grep&lt;/code&gt; filter, with the sequence
itself being stored in an array, but for convenience the sums of all unique previous pairs
are kept in a hash.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-144/"&gt;Challenge 144&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Semiprime.html"&gt;Semiprime Number&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://primes.utm.edu/"&gt;Prime Pages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/UlamSequence.html"&gt;Ulam Sequence&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc144</id>
    <published>2021-12-26T18:00:00-05:00</published>
    <updated>2021-12-26T18:00:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3558525717489565177</id>
    <published>2021-12-25T17:08:00.000+01:00</published>
    <updated>2021-12-25T17:08:01.850+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxiii) 13 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/CryptX-0.075' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CryptX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Cryptographic toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.075&lt;/strong&gt; on 2021-12-25&lt;/li&gt;  &lt;li&gt;Votes: 43&lt;/li&gt;  &lt;li&gt;Previous version: 0.074 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-1.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A date and time object for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.55&lt;/strong&gt; on 2021-12-23&lt;/li&gt;  &lt;li&gt;Votes: 204&lt;/li&gt;  &lt;li&gt;Previous version: 1.54 was 1 year, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DJZORT/DBD-Oracle-1.81' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBD::Oracle&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Oracle database driver for the DBI module &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.81&lt;/strong&gt; on 2021-12-24&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 1.80 was 2 years, 4 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ZMUGHAL/Devel-IPerl-0.011' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::IPerl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl language kernel for Jupyter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.011&lt;/strong&gt; on 2021-12-24&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 0.010 was 8 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/File-Slurper-0.013' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Slurper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple, sane and efficient module to slurp a file &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.013&lt;/strong&gt; on 2021-12-25&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 0.012 was 3 years, 10 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SULLR/IO-Socket-SSL-2.073' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.073&lt;/strong&gt; on 2021-12-22&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 2.072 was 4 months, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GNUSTAVO/JIRA-REST-0.022' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JIRA::REST&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Thin wrapper around Jira's REST API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.022&lt;/strong&gt; on 2021-12-19&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.021 was 10 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-1.000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.000&lt;/strong&gt; on 2021-12-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.33 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20211220' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20211220&lt;/strong&gt; on 2021-12-20&lt;/li&gt;  &lt;li&gt;Votes: 37&lt;/li&gt;  &lt;li&gt;Previous version: 5.20211120 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VPIT/Scope-Upper-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Scope::Upper&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Act on upper scopes. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2021-12-20&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 2 years, 5 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9102' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9102&lt;/strong&gt; on 2021-12-24&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9018 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HMBRAND/Text-CSV_XS-1.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Text::CSV_XS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comma-Separated Values manipulation routines &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.47&lt;/strong&gt; on 2021-12-21&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 1.46 was 8 months, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.088' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.088&lt;/strong&gt; on 2021-12-19&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.087 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3558525717489565177/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxiii-13-great-cpan-modules.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3558525717489565177"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3558525717489565177"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxiii-13-great-cpan-modules.html" title="(ccclxxiii) 13 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4765101665937047445</id>
    <published>2021-12-25T16:58:00.001+01:00</published>
    <updated>2021-12-25T16:58:18.937+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxciv) metacpan weekly report - RxPerl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 47&lt;/p&gt;&lt;p&gt;Week's winner (+3): &lt;b&gt;&lt;a href="https://metacpan.org/module/RxPerl"&gt;RxPerl&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/12/25 15:56:56 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::Sodium" target="_blank"&gt;Alien::Sodium&lt;/a&gt; - Interface to the libsodium library http://libsodium.org&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Archive::Ar" target="_blank"&gt;Archive::Ar&lt;/a&gt; - Interface for manipulating ar archives&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Inspect" target="_blank"&gt;HTML::Inspect&lt;/a&gt; - Inspect a HTML document&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::cpmfile" target="_blank"&gt;Module::cpmfile&lt;/a&gt; - Parse cpmfile&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::AMQP::RabbitMQ::PP" target="_blank"&gt;Net::AMQP::RabbitMQ::PP&lt;/a&gt; - Pure perl AMQP client for RabbitMQ&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Dex" target="_blank"&gt;App::Dex&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlimports" target="_blank"&gt;App::perlimports&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/B::Hooks::EndOfScope" target="_blank"&gt;B::Hooks::EndOfScope&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Code::ART" target="_blank"&gt;Code::ART&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer" target="_blank"&gt;Dancer&lt;/a&gt; (+1=144)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Holidays::AU" target="_blank"&gt;Date::Holidays::AU&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::Strptime" target="_blank"&gt;DateTime::Format::Strptime&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::PatchPerl" target="_blank"&gt;Devel::PatchPerl&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::PPPort" target="_blank"&gt;Devel::PPPort&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::MakeMaker::Awesome" target="_blank"&gt;Dist::Zilla::Plugin::MakeMaker::Awesome&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Encode::Simple" target="_blank"&gt;Encode::Simple&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Copy::Recursive" target="_blank"&gt;File::Copy::Recursive&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Path" target="_blank"&gt;File::Path&lt;/a&gt; (+1=43)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Form::Diva" target="_blank"&gt;Form::Diva&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Google::RestApi" target="_blank"&gt;Google::RestApi&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Linux::Inotify2" target="_blank"&gt;Linux::Inotify2&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MARC::Record" target="_blank"&gt;MARC::Record&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Method::Signatures" target="_blank"&gt;Method::Signatures&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Module::Signature" target="_blank"&gt;Module::Signature&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MojoX::HTTP::Async" target="_blank"&gt;MojoX::HTTP::Async&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSL::ExpireDate" target="_blank"&gt;Net::SSL::ExpireDate&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=166)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::Boxer" target="_blank"&gt;PDF::Boxer&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+2=387)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::LanguageServer" target="_blank"&gt;Perl::LanguageServer&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PerlPowerTools" target="_blank"&gt;PerlPowerTools&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Protocol::Redis::Faster" target="_blank"&gt;Protocol::Redis::Faster&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/REST::Client" target="_blank"&gt;REST::Client&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+3=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Set::IntSpan" target="_blank"&gt;Set::IntSpan&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/signatures" target="_blank"&gt;signatures&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract" target="_blank"&gt;SQL::Abstract&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::CLI" target="_blank"&gt;Term::CLI&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/UTF8::R2" target="_blank"&gt;UTF8::R2&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Util::Medley" target="_blank"&gt;Util::Medley&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Parse::Keyword" target="_blank"&gt;XS::Parse::Keyword&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4765101665937047445/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/cdxciv-metacpan-weekly-report-rxperl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4765101665937047445"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4765101665937047445"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/cdxciv-metacpan-weekly-report-rxperl.html" title="(cdxciv) metacpan weekly report - RxPerl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2995715308223638126</id>
    <published>2021-12-25T16:47:00.001+01:00</published>
    <updated>2021-12-25T16:56:23.770+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxiv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-12-25 15:46:26 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70407329" target="_blank"&gt;Eliminate whitespace around single letters&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70467717" target="_blank"&gt;Change a specified bit to 0&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70453039" target="_blank"&gt;Only find multiline C comment but not single line C comments&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70477024" target="_blank"&gt;Extract a word between brackets and replace it in a sentence&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/6]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70425973" target="_blank"&gt;Time interval between two dates with Perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70480206" target="_blank"&gt;A regex to parse regex string&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70412002" target="_blank"&gt;Combine 'if' and 'if not' in perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70463747" target="_blank"&gt;Perl must do break return to calling code line outside recursive&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70478462" target="_blank"&gt;How can one remove (or at least put into selection) several lines containing Text1 between nearest delimiters, using sed/grep/awk/perl?&lt;/a&gt; - [&lt;b&gt;0&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/70431777" target="_blank"&gt;How to generate output files of excel format for each column of A i.e output files for App and Data each using perl code&lt;/a&gt; - [&lt;b&gt;0&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2995715308223638126/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/dxiv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2995715308223638126"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2995715308223638126"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/dxiv-stackoverflow-perl-report.html" title="(dxiv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Season of Docs successful completion</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/season-of-docs-2021-complete"/>
  <id>tag:news.perlfoundation.org,2021-12-24:/post/season-of-docs-2021-complete</id>
  <published>2021-12-24T12:13:32</published>
  <updated>2021-12-24T12:13:32</updated>
  <summary>
  <![CDATA[
     As previously announced, one of The Perl Foundation's initiatives for this year was to participate in Google Season of Docs. I'm pleased to announce that Khawar Latif Khan successfully completed the project. You can read further details at Khawar's Medium article Jason McIntosh's case study In addition, Khawar plans to share his experience at the next Perl and Raku Conference in Houston. I'd like to thank: Khawar for his quality 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>As <a href="https://news.perlfoundation.org/post/season-of-docs-progress">previously announced</a>, one of The Perl Foundation's initiatives for this year was to participate in Google Season of Docs. I'm pleased to announce that Khawar Latif Khan successfully completed the project.</p>

<p>You can read further details at
* <a href="https://uxplanet.org/gsod-2021-perls-content-audit-and-gap-analysis-a2ac8292e9be">Khawar's Medium article</a>
* <a href="https://docs.google.com/document/d/1JXZcsOc46DkTcev85xQkozEmQKZ5NMvkZ3zRF_9pwV4/edit">Jason McIntosh's case study</a></p>

<p>In addition, Khawar plans to share his experience at the next Perl and Raku Conference in Houston.</p>

<p>I'd like to thank:
* Khawar for his quality work
* Jason McIntosh for being the project lead and mentorship
* All others who were involved in this project and provided input to Khawar
* Google Season of Docs team for making this project happen</p>

<p>I'm looking forward to discussing more in Houston.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Supporting TPF – potential tax savings</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/support-tpf-in-2022"/>
  <id>tag:news.perlfoundation.org,2021-12-24:/post/support-tpf-in-2022</id>
  <published>2021-12-24T05:29:22</published>
  <updated>2021-12-24T05:29:22</updated>
  <summary>
  <![CDATA[
     With the end of the year quickly approaching, The Perl Foundation want to thank you for all that you do in supporting us. Your support has allowed us to make significant strides in advancing the Perl and Raku languages, and the software behind them. There is, however, much work that still needs to be done. As you consider your year-end philanthropy, we want to highlight a few strategies that may 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl 6 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>(published on behalf of TPF and Marketing Committee)</p>

<p>With the end of the year quickly approaching, The Perl Foundation want to thank you for all that you do in supporting us. Your support has allowed us to make significant strides in advancing the Perl and Raku languages, and the software behind them. There is, however, much work that still needs to be done.</p>

<p>As you consider your year-end philanthropy, we want to highlight a few strategies that may reduce your tax liability. Your gift to The Perl Foundation may be tax-deductible, so now is a great time to help us pave the way for another successful year at TPF.</p>

<p>(Please consult your tax advisor for information on your specific circumstances. This article should not be considered tax or financial advice).</p>

<p><strong>Gifts of Cash - Extensions for 2021</strong></p>

<p>"Above-the-Line" Deduction for Cash Gifts Extended and Expanded in 2021 - The $300 above-the-line deduction established in 2020 for gifts of cash by a non-itemizer (excluding donor advised funds or supporting organizations) has been extended and expanded to $600 for those filing jointly for the 2021 tax year. So, even if you are not planning to itemize your deductions for 2021, you can still take advantage of this tax benefit.  Speak to your accountant and <a href="https://www.perlfoundation.org/payments.html">make donations.</a> </p>

<p><strong>Increase in Charitable Deduction Limit</strong></p>

<p>The increase in the itemized deduction for cash contributions to public charities of 60% to 100% of adjusted gross income has been extended to include the 2021 tax year.  Speak to your accountant and <a href="https://www.perlfoundation.org/payments.html">make donations.</a> </p>

<p><strong>Additional Tax Advantageous Giving Strategies</strong></p>

<p>Gifts of Long-Term Appreciated Securities:  In many cases, a gift of long-term appreciated securities is more tax advantageous than giving cash because capital gains taxes can be avoided. This can be especially useful in optimizing your tax benefits if you are not itemizing deductions in a given year. </p>

<p>IRA Charitable Rollover Gifts: If you are 70 years and six months of age or older, the IRS may allow you to make a qualified charitable distribution of up to $100,000 directly to The Perl Foundation from a traditional Individual Retirement Account (IRA). The benefit of donating through a rollover is that you will be able to avoid reporting the income. </p>

<p>Speak to your accountant to learn more about theses two options.</p>

<p>Thank you for being such an important part of our work at The Perl Foundation. Your support makes it possible for us to do the daily work growing Perl and Raku.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>TPRCHouston - Newsletter #1</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-houston-newsletter-1"/>
  <id>tag:news.perlfoundation.org,2021-12-22:/post/tprc-houston-newsletter-1</id>
  <published>2021-12-22T12:45:20</published>
  <updated>2021-12-22T12:45:20</updated>
  <summary>
  <![CDATA[
     About The Perl and Raku Conference in Houston. Call for Presenters and Master Class. Talk ideas? Volunteers wanted! Call for Sponsors. How to reach us.
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/9a4a6e97147efd362fac15da697159b6b49db039/icon-1024x1024.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>In this issue:
* About The Perl and Raku Conference in Houston
* Call for Presenters
* Call for Teachers/Master-Class
* Call for talk ideas
* Volunteer-Organizer positions open
* Call for sponsors
* Contact us</p>

<h2>Come to the Perl and Raku Conference in Houston!</h2>

<p>We can't wait to see everyone in person at the 2022 Perl and Raku Conference June 21-25 2022! </p>

<p>You can expect to see a lot of presentations on Perl, Raku, and supporting languages. Core presentation topics in the past have included Perl 5 and Raku. Organizers are hopeful to continue with a core of Perl 5 and Raku moving forward. It’s worth noting that this event is run by volunteers and talks are also given by volunteers. The presentations at the conference are being submitted now during our Call For Presenters (CFP) and will be selected by organizers who volunteer to be on our talks-committee. Generally, there are sets of 3 to 4 simultaneous presentations (20-50 minutes long) on a variety of topics throughout each main event day. Surrounding the main conference days, master-class tutorial sessions (half day and full day format) are offered for an additional fee.</p>

<p>If you see <strong>#TPRCHouston</strong> around on social media, that’s our tag for The Perl Conference in Houston.</p>

<p>The website is live! There are still a few details we're filling in like how to book a room and of course the schedule, but there's still a bunch of information you can get by visiting https://perlconference.us</p>

<h2>Call for Presenters</h2>

<p>The call for presentations is open now! We will have an early submission deadline of 12 noon UTC, Tuesday February 1st. The final deadline for speaker submissions is 12 noon, Tuesday March 1st. Submit your talk ideas here: https://perlconference.us/speakers</p>

<p>Whether this is your first time submitting a talk proposal or one of many you’ve proposed and presented, consider submitting your talk idea to us. Making a presentation at a national event is great for networking and experience! </p>

<p>The presentations at the conference are selected by organizers who volunteer to be on our Talks Committee. Generally, there are sets of 3 to 4 simultaneous presentations (20 or 50 minutes long, including Q&amp;A) on a variety of technical topics throughout each main event day. </p>

<p>Not sure you are up for giving a talk but have a topic you’d like to learn more about at our event? Tweet <a href="https://twitter.com/PerlConferences">@PerlConferences</a> using <strong>#TPRCHouston</strong> or email <a href="mailto:admin@perlconference.us">admin@perlconference.us</a>.</p>

<h2>Call for Teachers/Master-Class</h2>

<p>We need to fill out our master-class/tutorial schedule. All tutorial ideas will be considered. You can submit your class idea to https://perlconference.us/speakers. We will get back to you quickly.</p>

<p>Keep in mind, the event schedule differs from some of the past events. Master-class tutorial sessions surrounding the main event and will be held on Jun 21 (Tuesday) and Jun 25 (Saturday).</p>

<h2>What presentations are you hoping to see?</h2>

<p>We’d love to hear your tech talk ideas for TPRCHouston! We’ve already received some interest in the following topics:</p>

<ul>
<li>Perl and Raku / Internet / History game show</li>
<li>Security</li>
<li>Fun side projects with Perl and Raku</li>
<li>Integrating Perl and Raku with other tools</li>
</ul>

<p>Got some more talk suggestions? Tweet <a href="https://twitter.com/PerlConferences">@PerlConferences</a> using <strong>#TPRCHouston</strong> or email <a href="mailto:admin@perlconference.us">admin@perlconference.us</a>.</p>

<h2>Be part of it all - Organizer spots open!</h2>

<p>Planning for The Perl Conference in Houston is underway and we need a few more hands! It’s not too late to join us in planning this event! Openings are web design/content editor, speaking coordinator, outreach assistant, and more... Email <a href="mailto:admin@perlconference.us">admin@perlconference.us</a> to volunteer. You can help frame the conference! </p>

<h2>Call for Sponsors!</h2>

<p>A donation to The Perl Foundation not only contributes to the Perl Conference in Houston, but also aids our other outreach programs. Perl Foundation Sponsors will get recognition for supporting The Perl Conference as well as our regional Perl Workshops, beginner training initiatives, and our grants programs for an entire year. Donating directly to The Perl Foundation provides the most value for your sponsorship money.</p>

<p>However, sponsors can also donate directly to The Perl Conference. Often the organizers are able to link a sponsor directly to an event at the conference (wifi, coffee break, etc.)  where the cost of the event is in line with the donation amount.</p>

<p>Sponsors of $500 or more will be provided a table at our sponsor expo and job fair. </p>

<h2>How to reach our organizers</h2>

<ul>
<li>Visit our website:  https://perlconference.us</li>
<li>Follow us on Twitter: <a href="https://twitter.com/PerlConferences">@PerlConferences</a></li>
<li>Like us on Facebook: https://www.facebook.com/theperlconference</li>
<li>Subscribe to the mailing list: https://perlconference.us/subscribe</li>
<li>Send any questions about The Perl Conference to <a href="mailto:admin@perlconference.us">admin@perlconference.us</a>. An organizer will get back to you.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>34 at 34 for v5.34: Modern Perl features for Perl’s birthday</title>
    <link rel="alternate" href="https://dev.to/mjgardner/34-at-34-for-v534-modern-perl-features-for-perls-birthday-2mai" type="text/html"/>
    <content type="html">&lt;p&gt;Friday, December 17, 2021, marked the &lt;a href="https://github.com/Perl/perl5/commit/8d063cd8450e59ea1c611a2f4f5a21059a2804f1"&gt;thirty-fourth birthday&lt;/a&gt; of the Perl programming language, and coincidentally this year saw the &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260110.html"&gt;release of version 5.34&lt;/a&gt;. There are plenty of Perl developers out there who haven’t kept up with recent (and not-so-recent) improvements to the language and its ecosystem, so I thought I might list a batch. (You may have seen some of these before in May’s post &lt;a href="https://phoenixtrap.com/2021/05/25/perl-can-do-that-now/"&gt;“Perl can do that now!”&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-feature-endraw-pragma"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/feature"&gt;The &lt;code&gt;feature&lt;/code&gt; pragma&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2007/12/msg131636.html"&gt;Perl v5.10 was released in December 2007&lt;/a&gt;, and with it came &lt;code&gt;feature&lt;/code&gt;, a way of enabling new syntax without breaking backward compatibility. You can enable individual features by name (e.g., &lt;code&gt;use feature qw(say fc);&lt;/code&gt; for the &lt;code&gt;say&lt;/code&gt; and &lt;code&gt;fc&lt;/code&gt; keywords), or by using a &lt;a href="https://perldoc.perl.org/feature#FEATURE-BUNDLES"&gt;feature bundle&lt;/a&gt; based on the Perl version that introduced them. For example, the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:5.34&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…gives you the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt; &lt;span class="sx"&gt;qw(bareword_filehandles bitwise current_sub evalbytes fc indirect multidimensional postderef_qq say state switch unicode_eval unicode_strings)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boy, that’s a mouthful. &lt;em&gt;Feature bundles are good.&lt;/em&gt; The corresponding bundle also gets &lt;a href="https://perldoc.perl.org/feature#IMPLICIT-LOADING"&gt;implicitly loaded&lt;/a&gt; if you specify a minimum required Perl version, e.g., with &lt;code&gt;use v5.32;&lt;/code&gt;. If you &lt;code&gt;use v5.12;&lt;/code&gt; or higher, &lt;a href="https://perldoc.perl.org/strict"&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; is enabled for free. So just say:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And lastly, one-liners can use the &lt;a href="https://perldoc.perl.org/perlrun#-E-commandline"&gt;&lt;code&gt;-E&lt;/code&gt; switch&lt;/a&gt; instead of &lt;code&gt;-e&lt;/code&gt; to enable all features for that version of Perl, so you can say the following on the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;perl &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'say "Hello world!"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;perl &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s1"&gt;'print "Hello world!\n"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is great when you’re trying to save some typing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-experimental-endraw-pragma"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/experimental"&gt;The &lt;code&gt;experimental&lt;/code&gt; pragma&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes new Perl features need to be &lt;a href="https://perldoc.perl.org/perlpolicy#experimental"&gt;driven a couple of releases around the block&lt;/a&gt; before their behavior settles. Those experiments are documented in &lt;a href="https://perldoc.perl.org/perlexperiment"&gt;the perlexperiment page&lt;/a&gt;, and usually, you need both a &lt;code&gt;use feature&lt;/code&gt; (see above) and &lt;code&gt;no warnings&lt;/code&gt; statement to safely enable them. Or you can simply pass a list to &lt;code&gt;use experimental&lt;/code&gt; of the features you want, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;experimental&lt;/span&gt; &lt;span class="sx"&gt;qw(isa postderef signatures)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#everexpanding-raw-warnings-endraw-categories"&gt;
  &lt;/a&gt;
  Ever-expanding &lt;a href="https://perldoc.perl.org/warnings#Category-Hierarchy"&gt;&lt;code&gt;warnings&lt;/code&gt; categories&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2000/03/msg10668.html"&gt;March 2000 saw the release of Perl 5.6&lt;/a&gt;, and with it, the expansion of the &lt;a href="https://perldoc.perl.org/perlrun#-w"&gt;&lt;code&gt;-w&lt;/code&gt; command-line switch&lt;/a&gt; to a system of fine-grained controls for warning against “dubious constructs” that can be turned on and off depending on the lexical &lt;a href="https://perldoc.perl.org/perlintro#Variable-scoping"&gt;scope&lt;/a&gt;. What started as &lt;a href="https://perldoc.perl.org/5.6.0/perllexwarn#Category-Hierarchy"&gt;26 main and 20 subcategories&lt;/a&gt; has &lt;a href="https://perldoc.perl.org/warnings#Category-Hierarchy"&gt;expanded into 31 main and 43 subcategories&lt;/a&gt;, including warnings for the aforementioned experimental features.&lt;/p&gt;

&lt;p&gt;As the &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireUseWarnings#DESCRIPTION"&gt;relevant Perl::Critic policy says&lt;/a&gt;, “Using warnings, and paying attention to what they say, is probably the single most effective way to improve the quality of your code.” If you must violate warnings (perhaps because you’re rehabilitating some legacy code), you can isolate such violations to a small scope and individual categories. Check out the &lt;a href="https://metacpan.org/pod/strictures"&gt;strictures module on CPAN&lt;/a&gt; if you’d like to go further and make a safe subset of these categories fatal during development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-other-recentlyintroduced-syntax-with-syntaxconstruct"&gt;
  &lt;/a&gt;
  Document other recently-introduced syntax with &lt;a href="https://metacpan.org/pod/Syntax::Construct"&gt;Syntax::Construct&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Not every new bit of Perl syntax is enabled with a &lt;code&gt;feature&lt;/code&gt; guard. For the rest, there’s E. Choroba’s &lt;a href="https://metacpan.org/pod/Syntax::Construct"&gt;Syntax::Construct module on CPAN&lt;/a&gt;. Rather than having to remember which version of Perl introduced what, Syntax::Construct lets you declare only what you use and provides a helpful error message if someone tries to run your code on an older unsupported version. Between it and the &lt;code&gt;feature&lt;/code&gt; pragma, you can prevent many head-scratching moments and give your users a chance to either upgrade or workaround.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-builtin-functions-throw-exceptions-with-raw-autodie-endraw-"&gt;
  &lt;/a&gt;
  Make built-in functions throw exceptions with &lt;code&gt;autodie&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Many of Perl’s built-in functions only return false on failure, requiring the developer to check every time whether a file can be &lt;code&gt;open&lt;/code&gt;ed or a &lt;code&gt;system&lt;/code&gt; command executed. The lexical &lt;a href="https://perldoc.perl.org/autodie"&gt;&lt;code&gt;autodie&lt;/code&gt; pragma&lt;/a&gt; replaces them with versions that &lt;a href="https://perldoc.perl.org/functions/die"&gt;raise an exception&lt;/a&gt; with an &lt;a href="https://perldoc.perl.org/autodie::exception"&gt;object&lt;/a&gt; that can be interrogated for further details. No matter how many functions or methods deep a problem occurs, you can choose to catch it and respond appropriately. This leads us to…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-try-endraw-raw-catch-endraw-exception-handling-and-featurecompattry"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/perlsyn#Try-Catch-Exception-Handling"&gt;&lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; exception handling&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Feature::Compat::Try"&gt;Feature::Compat::Try&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/05/msg260110.html"&gt;This year’s Perl v5.34 release&lt;/a&gt; introduced &lt;a href="https://perldoc.perl.org/perlsyn#Try-Catch-Exception-Handling"&gt;experimental &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; syntax&lt;/a&gt; for exception handling that should look more familiar to users of other languages while handling the &lt;a href="https://metacpan.org/pod/Try::Tiny#BACKGROUND"&gt;issues&lt;/a&gt; surrounding using &lt;a href="https://perldoc.perl.org/functions/eval#Block-eval"&gt;block &lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; and testing of the &lt;a href="https://perldoc.perl.org/variables/%24@"&gt;special &lt;code&gt;$@&lt;/code&gt; variable&lt;/a&gt;. If you need to remain compatible with older versions of Perl (back to v5.14), just use the &lt;a href="https://metacpan.org/pod/Feature::Compat::Try"&gt;Feature::Compat::Try module from CPAN&lt;/a&gt; to automatically select either v5.34’s native &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; or a subset of the functionality provided by &lt;a href="https://metacpan.org/pod/Syntax::Keyword::Try"&gt;Syntax::Keyword::Try&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pluggable-keywords"&gt;
  &lt;/a&gt;
  Pluggable keywords
&lt;/h2&gt;

&lt;p&gt;The abovementioned Syntax::Keyword::Try was made possible by the &lt;a href="https://perldoc.perl.org/perl5120delta#Pluggable-keywords"&gt;introduction of a pluggable keyword mechanism in 2010’s Perl v5.12&lt;/a&gt;. So was the &lt;a href="https://metacpan.org/pod/Future::AsyncAwait"&gt;Future::AsyncAwait&lt;/a&gt; asynchronous programming library and the &lt;a href="https://metacpan.org/pod/Object::Pad"&gt;Object::Pad&lt;/a&gt; testbed for new object-oriented Perl syntax. If you’re handy with C and &lt;a href="https://perldoc.perl.org/perlxs"&gt;Perl’s XS glue language&lt;/a&gt;, check out Paul “LeoNerd” Evans’ &lt;a href="https://metacpan.org/pod/XS::Parse::Keyword"&gt;XS::Parse::Keyword&lt;/a&gt; module to get a leg up on developing your own syntax module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-raw-package-endraw-s-with-versions-and-blocks"&gt;
  &lt;/a&gt;
  Define &lt;code&gt;package&lt;/code&gt;s with versions and blocks
&lt;/h2&gt;

&lt;p&gt;Perl v5.12 also helped reduce clutter by enabling a &lt;a href="https://perldoc.perl.org/functions/package"&gt;&lt;code&gt;package&lt;/code&gt; namespace declaration&lt;/a&gt; to &lt;a href="https://perldoc.perl.org/perl5120delta#New-package-NAME-VERSION-syntax"&gt;also include a version number&lt;/a&gt;, instead of requiring a separate &lt;code&gt;our $VERSION = ...;&lt;/code&gt; v5.14 further refined &lt;code&gt;package&lt;/code&gt;s to be &lt;a href="https://perldoc.perl.org/perl5140delta#package-block-syntax"&gt;specified in code blocks&lt;/a&gt;, so a namespace declaration can be the same as a lexical scope. Putting the two together gives you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;NewHotness&lt;/span&gt; &lt;span class="nv"&gt;v1&lt;/span&gt;&lt;span class="mf"&gt;.2.3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;OldAndBusted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="mf"&gt;0.77&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;$VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;v1.2.3&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know which I’d rather do. (Though you may want to also &lt;code&gt;use Syntax::Construct qw(package-version package-block);&lt;/code&gt; to help along with older installations as &lt;a href="#syntax-construct"&gt;described above&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-endraw-definedor-operator"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/perlop#Logical-Defined-Or"&gt;The &lt;code&gt;//&lt;/code&gt; defined-or operator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is an easy win &lt;a href="https://perldoc.perl.org/perl5100delta#Defined-or-operator"&gt;from Perl v5.10&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="c1"&gt;# replace this&lt;/span&gt;
&lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;               &lt;span class="c1"&gt;# with this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;defined&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="c1"&gt;# replace this&lt;/span&gt;
&lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;                   &lt;span class="c1"&gt;# with this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect for assigning defaults to variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-state-endraw-variables-only-initialize-once"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/functions/state"&gt;&lt;code&gt;state&lt;/code&gt; variables&lt;/a&gt; only initialize once
&lt;/h2&gt;

&lt;p&gt;Speaking of variables, ever want one to keep its old value the next time a scope is entered, like &lt;a href="https://perldoc.perl.org/perlsub#Persistent-Private-Variables"&gt;in a &lt;code&gt;sub&lt;/code&gt;&lt;/a&gt;? Declare it with &lt;code&gt;state&lt;/code&gt; instead of &lt;code&gt;my&lt;/code&gt;. Before &lt;a href="https://perldoc.perl.org/perl5100delta#state()-variables"&gt;Perl v5.10&lt;/a&gt;, you needed to &lt;a href="https://perldoc.perl.org/perlsub#Persistent-variables-with-closures"&gt;use a closure instead&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-some-typing-with-raw-say-endraw-"&gt;
  &lt;/a&gt;
  Save some typing with &lt;code&gt;say&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perl5100delta#Core-Enhancements"&gt;Perl v5.10’s bumper crop of enhancements&lt;/a&gt; also included the &lt;a href="https://perldoc.perl.org/functions/say"&gt;&lt;code&gt;say&lt;/code&gt; function&lt;/a&gt;, which handles the common use case of &lt;code&gt;print&lt;/code&gt;ing a string or list of strings with a newline. It’s less noise in your code and saves you four characters. What’s not to love?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note-unimplemented-code-with-raw-endraw-"&gt;
  &lt;/a&gt;
  Note unimplemented code with &lt;code&gt;...&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/perlsyn#The-Ellipsis-Statement"&gt;&lt;code&gt;...&lt;/code&gt; ellipsis statement&lt;/a&gt; (colloquially “yada-yada”) gives you an easy placeholder for yet-to-be-implemented code. It parses OK but will throw an exception if executed. Hopefully, your &lt;a href="https://metacpan.org/pod/Devel::Cover"&gt;test coverage&lt;/a&gt; (or at least &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitYadaOperator"&gt;static analysis&lt;/a&gt;) will catch it before your users do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loop-and-enumerate-arrays-with-raw-each-endraw-raw-keys-endraw-and-raw-values-endraw-"&gt;
  &lt;/a&gt;
  Loop and enumerate arrays with &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, and &lt;code&gt;values&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, and &lt;code&gt;values&lt;/code&gt; functions have always been able to operate on hashes. &lt;a href="https://perldoc.perl.org/perl5120delta#each,-keys,-values-are-now-more-flexible"&gt;Perl v5.12 and above make them work on arrays, too.&lt;/a&gt; The latter two are mainly for consistency, but you can use &lt;code&gt;each&lt;/code&gt; to iterate over an array’s indices and values at the same time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;@array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Community::Each"&gt;problematic in non-trivial loops&lt;/a&gt;, but I’ve found it helpful in quick scripts and one-liners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-delete-local-endraw-hash-and-array-entries"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/perlsub#Localized-deletion-of-elements-of-composite-types"&gt;&lt;code&gt;delete local&lt;/code&gt; hash (and array) entries&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Ever needed to &lt;code&gt;delete&lt;/code&gt; an entry from a hash (e.g, an environment variable from &lt;code&gt;%ENV&lt;/code&gt; or a signal handler from &lt;code&gt;%SIG&lt;/code&gt;) just inside a block? &lt;a href="https://perldoc.perl.org/perl5120delta#delete-local"&gt;Perl v5.12 lets you do that&lt;/a&gt; with &lt;code&gt;delete local&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paired-hash-slices"&gt;
  &lt;/a&gt;
  Paired hash slices
&lt;/h2&gt;

&lt;p&gt;Jumping forward to &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2014/05/msg215815.html"&gt;2014’s Perl v5.20&lt;/a&gt;, the &lt;a href="https://perldoc.perl.org/perl5200delta#New-slice-syntax"&gt;new &lt;code&gt;%foo{'bar', 'baz'}&lt;/code&gt; syntax&lt;/a&gt; enables you to &lt;a href="https://perldoc.perl.org/perldata#Key%2FValue-Hash-Slices"&gt;slice a subset of a hash&lt;/a&gt; with its keys and values intact. Very helpful for cherry-picking or aggregating many hashes into one. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;name&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mark&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="s"&gt;extra&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pizza&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;# don't frob the pizza&lt;/span&gt;
&lt;span class="nv"&gt;$my_object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;frob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;%args&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="sx"&gt;qw(verbose name)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paired-array-slices"&gt;
  &lt;/a&gt;
  Paired array slices
&lt;/h2&gt;

&lt;p&gt;Not to be left out, you can also &lt;a href="https://perldoc.perl.org/perldata#Index/Value-Array-Slices"&gt;slice arrays&lt;/a&gt; in the same way, in this case returning indices and values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@letters&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;z&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@subset_kv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%letters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;# @subset_kv is now (16, 'p', 5, 'e', 18, 'r', 12, 'l')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more-readable-dereferencing"&gt;
  &lt;/a&gt;
  More readable dereferencing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perl5200delta#Experimental-Postfix-Dereferencing"&gt;Perl v5.20 introduced&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/perl5240delta#Postfix-dereferencing-is-no-longer-experimental"&gt;v5.24 de-experimentalized&lt;/a&gt; a more readable &lt;a href="https://perldoc.perl.org/perlref#Postfix-Dereference-Syntax"&gt;postfix dereferencing syntax&lt;/a&gt; for navigating nested data structures. Instead of using &lt;code&gt;{&lt;/code&gt;braces&lt;code&gt;}&lt;/code&gt; or smooshing sigils to the left of identifiers, you can use a postfixed sigil-and-star:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@$array_ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# noisy&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$array_ref&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# a little easier&lt;/span&gt;
&lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;$array_ref&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# read from left to right&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So much of web development is slinging around and picking apart complicated &lt;a href="https://perldoc.perl.org/perldsc"&gt;data structures&lt;/a&gt; via &lt;a href="https://www.json.org/"&gt;JSON&lt;/a&gt;, so I welcome anything like this to reduce the cognitive load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-when-endraw-as-a-statement-modifier"&gt;
  &lt;/a&gt;
  &lt;code&gt;when&lt;/code&gt; as a statement modifier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perl5120delta#when-as-a-statement-modifier"&gt;Starting in Perl v5.12&lt;/a&gt;, you can use the &lt;a href="https://perldoc.perl.org/perlsyn#Switch-Statements"&gt;experimental switch feature&lt;/a&gt;’s &lt;code&gt;when&lt;/code&gt; keyword as a postfix modifier. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="sr"&gt;/^abc/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="nv"&gt;when&lt;/span&gt; &lt;span class="sr"&gt;/^dna/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But I don’t recommend &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;given&lt;/code&gt;, or &lt;code&gt;given&lt;/code&gt;’s &lt;a href="https://perldoc.perl.org/perlop#Smartmatch-Operator"&gt;smartmatch&lt;/a&gt; operations as they were &lt;a href="https://perldoc.perl.org/perl5180delta#New-mechanism-for-experimental-features"&gt;retconned as experiments in 2013’s Perl v5.18&lt;/a&gt; and have remained so due to their &lt;a href="https://perldoc.perl.org/perlsyn#Experimental-Details-on-given-and-when"&gt;tricky behavior&lt;/a&gt;. I wrote about &lt;a href="https://phoenixtrap.com/2021/02/14/switching-up-my-switches/"&gt;some alternatives using stable syntax&lt;/a&gt; back in February.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-class-inheritance-with-raw-use-parent-endraw-"&gt;
  &lt;/a&gt;
  Simple class inheritance with &lt;code&gt;use parent&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes in older object-oriented Perl code, you’ll see &lt;code&gt;use base&lt;/code&gt; as a pragma to establish inheritance from another class. Older still is the direct manipulation of the &lt;a href="https://perldoc.perl.org/variables/@ISA"&gt;package’s special &lt;code&gt;@ISA&lt;/code&gt; array&lt;/a&gt;. In most cases, both should be avoided in favor of &lt;code&gt;use parent&lt;/code&gt;, which was &lt;a href="https://perldoc.perl.org/perl5101delta#parent"&gt;added to core in Perl v5.10.1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mind you, if you’re following the &lt;a href="https://perldoc.perl.org/perlootut#PERL-OO-SYSTEMS"&gt;Perl object-oriented tutorial’s advice and have selected an OO system&lt;/a&gt; from CPAN, use its subclassing mechanism if it has one. &lt;a href="https://metacpan.org/pod/Moose#extends-(@superclasses)"&gt;Moose&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Moo#extends"&gt;Moo&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Class::Accessor#Moose!"&gt;Class::Accessor’s “antlers” mode&lt;/a&gt; all provide an &lt;code&gt;extends&lt;/code&gt; function; &lt;a href="https://metacpan.org/pod/Object::Pad#:isa"&gt;Object::Pad provides an &lt;code&gt;:isa&lt;/code&gt; attribute&lt;/a&gt; on its &lt;a href="https://metacpan.org/pod/Object::Pad#class"&gt;&lt;code&gt;class&lt;/code&gt; keyword&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-for-class-membership-with-the-raw-isa-endraw-operator"&gt;
  &lt;/a&gt;
  Test for class membership with the &lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;&lt;code&gt;isa&lt;/code&gt; operator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As an alternative to the &lt;a href="https://perldoc.perl.org/UNIVERSAL#%24obj-%3Eisa(-TYPE-)"&gt;&lt;code&gt;isa()&lt;/code&gt; method&lt;/a&gt; provided to all Perl objects, &lt;a href="https://perldoc.perl.org/perl5320delta#The-isa-Operator"&gt;Perl v5.32 introduced&lt;/a&gt; the experimental &lt;a href="https://perldoc.perl.org/perlop#Class-Instance-Operator"&gt;&lt;code&gt;isa&lt;/code&gt; infix operator&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$my_object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;isa&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Local::MyClass&lt;/span&gt;&lt;span class="p"&gt;')&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="nv"&gt;$my_object&lt;/span&gt; &lt;span class="nv"&gt;isa&lt;/span&gt; &lt;span class="nn"&gt;Local::&lt;/span&gt;&lt;span class="nv"&gt;MyClass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The latter can take either a bareword class name or string expression, but more importantly, it’s safer as it also returns false if the left argument is undefined or isn’t a &lt;code&gt;bless&lt;/code&gt;ed object reference. The older &lt;code&gt;isa()&lt;/code&gt; method will throw an exception in the former case and might return true if called as a class method when &lt;code&gt;$my_object&lt;/code&gt; is actually a string of a class name that’s the same as or inherits from &lt;code&gt;isa()&lt;/code&gt;’s argument.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lexical-subroutines"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/perlsub#Lexical-Subroutines"&gt;Lexical subroutines&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perl5180delta#Lexical-subroutines"&gt;Introduced in Perl v5.18&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/perl5260delta#Lexical-subroutines-are-no-longer-experimental"&gt;de-experimentalized in 2017’s Perl v5.26&lt;/a&gt;, you can now precede sub declarations with &lt;a href="https://perldoc.perl.org/perlsub#Lexical-Subroutines"&gt;&lt;code&gt;my&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;our&lt;/code&gt;. One use of the first two is truly private functions and methods, as described in &lt;a href="https://jacoby.github.io/perl/2018/08/29/use-perl-features-lexical_subs.html"&gt;this 2018 Dave Jacoby blog&lt;/a&gt; and as part of &lt;a href="http://neilb.org/2014/07/24/private-functions.html"&gt;Neil Bowers’ 2014 survey&lt;/a&gt; of private function techniques.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subroutine-signatures"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/perlsub#Signatures"&gt;Subroutine signatures&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I’ve &lt;a href="https://phoenixtrap.com/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/"&gt;written&lt;/a&gt; and &lt;a href="https://phoenixtrap.com/2021/03/17/video-for-better-perl-subroutine-signatures-and-type-validation/"&gt;presented&lt;/a&gt; &lt;a href="https://phoenixtrap.com/2021/02/16/better-perl-more-on-signatures-and-types/"&gt;extensively&lt;/a&gt; about signatures and alternatives over the past year, so I won’t repeat that here. I’ll just add that the &lt;a href="https://lists.perl.org/list/perl5-porters.html"&gt;Perl 5 Porters&lt;/a&gt; development mailing list has been &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/11/msg261939.html"&gt;making a concerted effort&lt;/a&gt; over the past month to hash out the remaining issues towards rendering this feature non-experimental. The popular Mojolicious real-time web framework also &lt;a href="https://metacpan.org/dist/Mojolicious/view/lib/Mojolicious/Guides.pod#Signatures"&gt;provides a shortcut for enabling signatures&lt;/a&gt; and uses them extensively in examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indented-heredocuments-with-raw-ltlt-endraw-"&gt;
  &lt;/a&gt;
  Indented here-documents with &lt;code&gt;&amp;lt;&amp;lt;~&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Perl has had shell-style &lt;a href="https://perldoc.perl.org/perlop#%3C%3CEOF"&gt;“here-document” syntax&lt;/a&gt; for embedding multi-line strings of quoted text for a long time. &lt;a href="https://perldoc.perl.org/perlop#%3C%3CEOF"&gt;Starting with Perl v5.26&lt;/a&gt;, you can precede the delimiting string with a &lt;code&gt;~&lt;/code&gt; character and Perl will both allow the ending delimiter to be indented as well as strip indentation from the embedded text. This allows for much more readable embedded code such as runs of HTML and SQL. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$do_query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$rows_deleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;END_SQL&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;DELETE&lt;/span&gt; &lt;span class="nv"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;table&lt;/span&gt;
      &lt;span class="nv"&gt;WHERE&lt;/span&gt; &lt;span class="nv"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
      &lt;span class="nv"&gt;END_SQL&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$rows_deleted&lt;/span&gt;&lt;span class="s2"&gt; rows were deleted.&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more-readable-chained-comparisons"&gt;
  &lt;/a&gt;
  More readable chained comparisons
&lt;/h2&gt;

&lt;p&gt;When I learned math in school, my teachers and textbooks would often describe multiple comparisons and inequalities as a single expression. Unfortunately, when it came time to learn programming every computer language I saw required them to be broken up with a series of &lt;code&gt;and&lt;/code&gt; (or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) operators. &lt;a href="https://perldoc.perl.org/perl5320delta#Chained-comparisons-capability"&gt;With Perl v5.32, this is no more&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# old way&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# new way&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s more concise, less noisy, and more like what regular math looks like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfdocumenting-named-regular-expression-captures"&gt;
  &lt;/a&gt;
  Self-documenting named regular expression captures
&lt;/h2&gt;

&lt;p&gt;Perl’s expressive &lt;a href="https://perldoc.perl.org/perlre"&gt;regular expression&lt;/a&gt; matching and text-processing prowess are legendary, although overuse and poor use of readability enhancements often turn people away from them (and Perl in general). We often use regexps for extracting data from a matched pattern. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;/Time: (..):(..):(..)/&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# parse out values&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$1 hours, $2 minutes, $3 seconds&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Named &lt;a href="https://perldoc.perl.org/perlre#Capture-groups"&gt;capture groups&lt;/a&gt;, &lt;a href="https://perldoc.perl.org/perl5100delta#Named-Capture-Buffers"&gt;introduced in Perl v5.10&lt;/a&gt;, make both the pattern more obvious and retrieval of its data less cryptic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;/Time: (?&amp;lt;hours&amp;gt;..):(?&amp;lt;minutes&amp;gt;..):(?&amp;lt;seconds&amp;gt;..)/&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$+{hours} hours, $+{minutes} minutes, $+{seconds} seconds&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#more-readable-regexp-character-classes"&gt;
  &lt;/a&gt;
  More readable regexp character classes
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;/x&lt;/code&gt; regular expression modifier already enables better readability by telling the parser to ignore most whitespace, allowing you to break up complicated patterns into spaced-out groups and multiple lines with code comments. &lt;a href="https://perldoc.perl.org/perl5260delta#New-regular-expression-modifier-/xx"&gt;With Perl v5.26 you can specify &lt;code&gt;/xx&lt;/code&gt;&lt;/a&gt; to also ignore spaces and tabs inside &lt;code&gt;[&lt;/code&gt;bracketed&lt;code&gt;]&lt;/code&gt; character classes, turning this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;/[d-eg-i3-7]/&lt;/span&gt;
&lt;span class="sr"&gt;/[!@"#$%^&amp;amp;*()=?&amp;lt;&amp;gt;']/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;/ [d-e g-i 3-7]/xx&lt;/span&gt;
&lt;span class="sr"&gt;/[! @ " # $ % ^ &amp;amp; * () = ? &amp;lt;&amp;gt; ']/xx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-default-regexp-flags-with-the-raw-re-endraw-pragma"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/re#'/flags'-mode"&gt;Set default regexp flags with the &lt;code&gt;re&lt;/code&gt; pragma&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/re#'/flags'-mode"&gt;Beginning with Perl v5.14&lt;/a&gt;, writing &lt;code&gt;use re '/xms';&lt;/code&gt; (or any combination of &lt;a href="https://perldoc.perl.org/perlre#Modifiers"&gt;regular expression modifier flags&lt;/a&gt;) will turn on those flags until the end of that lexical scope, saving you the trouble of remembering them every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nondestructive-substitution-with-raw-sr-endraw-and-raw-trr-endraw-"&gt;
  &lt;/a&gt;
  Non-destructive substitution with &lt;code&gt;s///r&lt;/code&gt; and &lt;code&gt;tr///r&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/perlop#s/PATTERN/REPLACEMENT/msixpodualngcer"&gt;&lt;code&gt;s///&lt;/code&gt; substitution&lt;/a&gt; and &lt;a href="https://perldoc.perl.org/perlop#tr/SEARCHLIST/REPLACEMENTLIST/cdsr"&gt;&lt;code&gt;tr///&lt;/code&gt; transliteration&lt;/a&gt; operators typically change their input directly, often in conjunction with the &lt;a href="https://perldoc.perl.org/perlop#Binding-Operators"&gt;&lt;code&gt;=~&lt;/code&gt; binding operator&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="sr"&gt;s/foo/bar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# changes the first foo to bar in $_&lt;/span&gt;
&lt;span class="nv"&gt;$baz&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;s/foo/bar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# the same but in $baz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if you want to leave the original untouched, such as when processing an array of strings with a &lt;code&gt;map&lt;/code&gt;? &lt;a href="https://perldoc.perl.org/perl5140delta#Non-destructive-substitution"&gt;With Perl v5.14 and above, add the &lt;code&gt;/r&lt;/code&gt; flag&lt;/a&gt;, which makes the substitution on a copy and returns the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="sr"&gt;s/foo/bar/r&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;@original&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unicode-casefolding-with-raw-fc-endraw-for-better-string-comparisons"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/functions/fc"&gt;Unicode case-folding with &lt;code&gt;fc&lt;/code&gt;&lt;/a&gt; for better string comparisons
&lt;/h2&gt;

&lt;p&gt;Unicode and character encoding in general are complicated beasts. Perl has &lt;a href="https://perldoc.perl.org/perl56delta#Unicode-and-UTF-8-support"&gt;handled Unicode since v5.6&lt;/a&gt; and has kept pace with fixes and support for updated standards in the intervening decades. If you need to test if two strings are equal regardless of case, use the &lt;a href="https://perldoc.perl.org/functions/fc"&gt;&lt;code&gt;fc&lt;/code&gt; function&lt;/a&gt; introduced &lt;a href="https://perldoc.perl.org/perl5160delta#New-function-fc-and-corresponding-escape-sequence-%5CF-for-Unicode-foldcase"&gt;in Perl v5.16&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#safer-processing-of-file-arguments-with-raw-ltltgtgt-endraw-"&gt;
  &lt;/a&gt;
  Safer processing of file arguments with &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; null filehandle or “diamond operator” is often used in &lt;a href="https://perldoc.perl.org/perlsyn#Compound-Statements"&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/a&gt; to process input per line coming either from standard input (e.g., piped from another program) or from a list of files on the command line. Unfortunately, it uses a &lt;a href="https://perldoc.perl.org/functions/open#open-FILEHANDLE,EXPR"&gt;form of Perl’s &lt;code&gt;open&lt;/code&gt; function&lt;/a&gt; that interprets special characters such as pipes (&lt;code&gt;|&lt;/code&gt;) that would allow it to insecurely &lt;a href="https://perldoc.perl.org/perlopentut#Opening-Pipes"&gt;run external commands&lt;/a&gt;. Using the &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; “double diamond” operator &lt;a href="https://perldoc.perl.org/perl5220delta#New-double-diamond-operator"&gt;introduced in Perl v5.22&lt;/a&gt; forces &lt;code&gt;open&lt;/code&gt; to treat all command-line arguments as file names only. For older Perls, the &lt;a href="https://perldoc.perl.org/perlop#I/O-Operators"&gt;perlop documentation&lt;/a&gt; recommends the &lt;a href="https://metacpan.org/pod/ARGV::readonly"&gt;ARGV::readonly CPAN module&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#safer-loading-of-perl-libraries-and-modules-from-raw-inc-endraw-"&gt;
  &lt;/a&gt;
  Safer loading of Perl libraries and modules from &lt;code&gt;@INC&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perl5260delta#Removal-of-the-current-directory-(%22.%22)-from-@INC"&gt;Perl v5.26 removed the ability for all programs to load modules by default from the current directory&lt;/a&gt;, closing a security vulnerability originally identified and fixed as &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2016-1238"&gt;CVE-2016–1238&lt;/a&gt; in previous versions’ included scripts. If your code relied on this unsafe behavior, the &lt;a href="https://perldoc.perl.org/perl5260delta#Removal-of-the-current-directory-(%22.%22)-from-@INC"&gt;v5.26 release notes include steps&lt;/a&gt; on how to adapt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httptiny-simple-http11-client-included"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/HTTP::Tiny"&gt;HTTP::Tiny&lt;/a&gt; simple HTTP/1.1 client included
&lt;/h2&gt;

&lt;p&gt;To bootstrap access to &lt;a href="https://cpan.org/"&gt;CPAN&lt;/a&gt; on the web in the possible absence of external tools like &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;, &lt;a href="https://perldoc.perl.org/HTTP::Tiny"&gt;Perl v5.14 began including the HTTP::Tiny module&lt;/a&gt;. You can also use it in your programs if you need a simple web client with no dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test2-the-next-generation-of-perl-testing-frameworks"&gt;
  &lt;/a&gt;
  &lt;a href="https://perldoc.perl.org/Test2"&gt;Test2&lt;/a&gt;: The next generation of Perl testing frameworks
&lt;/h2&gt;

&lt;p&gt;Forked and refactored from the venerable &lt;a href="https://perldoc.perl.org/Test::Builder"&gt;Test::Builder&lt;/a&gt; (the basis for the &lt;a href="https://perldoc.perl.org/Test::More"&gt;Test::More&lt;/a&gt; library that many are familiar with), &lt;a href="https://perldoc.perl.org/Test2"&gt;Test2&lt;/a&gt; was included in the core module library &lt;a href="https://perldoc.perl.org/5.26.0/perlmodlib#Test2"&gt;beginning with Perl v5.26&lt;/a&gt;. I’ve &lt;a href="https://phoenixtrap.com/tag/test2/"&gt;experimented recently&lt;/a&gt; with using the &lt;a href="https://metacpan.org/pod/Test2::Suite"&gt;Test2::Suite&lt;/a&gt; CPAN library instead of Test::More and it looks pretty good. I’m also intrigued by &lt;a href="https://metacpan.org/pod/Test2::Harness"&gt;Test2::Harness&lt;/a&gt;’ support for threading, forking, and preloading modules to reduce test run times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taskkensho-where-to-start-for-recommended-perl-modules"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Task::Kensho"&gt;Task::Kensho&lt;/a&gt;: Where to start for recommended Perl modules
&lt;/h2&gt;

&lt;p&gt;This last item may not be included when you install Perl, but it’s where I turn for a collection of well-regarded CPAN modules for accomplishing a wide variety of common tasks spanning from &lt;a href="https://metacpan.org/pod/Task::Kensho::Async"&gt;asynchronous programming&lt;/a&gt; to &lt;a href="https://metacpan.org/pod/Task::Kensho::XML"&gt;XML&lt;/a&gt;. Use it as a starting point or &lt;a href="https://metacpan.org/dist/App-cpanminus/view/lib/App/cpanminus/fatscript.pm#-interactive"&gt;interactively&lt;/a&gt; select the mix of libraries appropriate to your project.&lt;/p&gt;




&lt;p&gt;And there you have it: a selection of 34 features, enhancements, and improvements for the first 34 years of Perl. What’s your favorite? Did I miss anything? Let me know in the comments.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image: &lt;a href="https://www.flickr.com/photos/93472573@N00/5372262156"&gt;"My birthday cake"&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/frosted_peppercorn/"&gt;Wesley Bowler&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=openverse&amp;amp;atype=html"&gt;CC BY-NC-SA 2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/34-at-34-for-v534-modern-perl-features-for-perls-birthday-2mai</id>
    <published>2021-12-21T15:00:00Z</published>
    <updated>2021-12-21T15:00:00Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="opensource"/>
    <category term="news"/>
  </entry>
  <entry>
    <title>Create foo.a using Pure Perl and Archive::Ar</title>
    <link rel="alternate" href="https://dev.to/yukikimoto/create-fooa-using-pure-perl-and-archivear-5266" type="text/html"/>
    <content type="html">&lt;p&gt;I'm searching for the way to create static library such as "foo.a".&lt;/p&gt;

&lt;p&gt;I found &lt;a href="https://metacpan.org/pod/Archive::Ar"&gt;Archive::Ar&lt;/a&gt; on CPAN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Archive::Ar;

my $ar = Archive::Ar-&amp;gt;new;

$ar-&amp;gt;read('./foo.ar');
$ar-&amp;gt;extract;

$ar-&amp;gt;add_files('./bar.tar.gz', 'bat.pl')
$ar-&amp;gt;add_data('newfile.txt','Some contents');

$ar-&amp;gt;chmod('file1', 0644);
$ar-&amp;gt;chown('file1', $uid, $gid);

$ar-&amp;gt;remove('file1', 'file2');

my $filehash = $ar-&amp;gt;get_content('bar.tar.gz');
my $data = $ar-&amp;gt;get_data('bar.tar.gz');
my $handle = $ar-&amp;gt;get_handle('bar.tar.gz');

my @files = $ar-&amp;gt;list_files();

my $archive = $ar-&amp;gt;write;
my $size = $ar-&amp;gt;write('outbound.ar');

$ar-&amp;gt;error();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm working to create &lt;a href="https://github.com/yuki-kimoto/SPVM"&gt;SPVM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SPVM has C/C++ binding tools.&lt;/p&gt;

</content>
    <author>
      <name>Yuki Kimoto</name>
    </author>
    <id>https://dev.to/yukikimoto/create-fooa-using-pure-perl-and-archivear-5266</id>
    <published>2021-12-20T23:31:00Z</published>
    <updated>2021-12-20T23:31:00Z</updated>
    <category term="perl"/>
    <category term="c"/>
    <category term="cpp"/>
    <category term="cpan"/>
  </entry>
  <entry>
    <title>#543 - Happy Birthday!</title>
    <link rel="alternate" href="https://perlweekly.com/archive/543.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Thomas Klausner sent me a bunch of links and suggestion, let me share them first:</p>
<p>Abigail has a series of Advent posts starting from <a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-01.html">day 01</a>. I did not find a page listing all the entries but you can get to them by changing the URL. Smylers is doing crazy stuff with <a href="https://twitter.com/smylers2/status/1334150980552757250">vim (and perl)</a>. One can find a lot of inspiring code (Perl, Raku and of course other languages) in the various <a href="https://www.reddit.com/r/adventofcode">'Solution Megathreads'</a> on Reddit.  Finally domm himself has a few <a href="https://domm.plix.at/tags/AdventOfCode.html">Advent related posts</a>.</p>
<p>Today we are celebrating the 80th birthday of my mother. Due to the pandemic we cannot celebrate in the same space, but we have collected some videos from the family members and her friends and we are going to have a Zoom session. Much better than not being able to celebrate at all. Happy birthday mom!</p>
<p>In a few days a large part of the world is going to celebrate the birthday of another Jew.</p>
<p>Merry Christmas!</p></div>
    </content>
    <id>https://perlweekly.com/archive/543.html</id>
    <published>2021-12-20T10:00:00Z</published>
    <updated>2021-12-20T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>Variable "..." will not stay shared ...</title>
  <summary type="html"><![CDATA[<p>
When using <b>fork</b> to create child processes it is a good idea to encapsulate the behavior of both the child process
and the parent process in (separate) functions.
<p>
]]></summary>
  <updated>2021-12-20T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/variable-will-not-stay-shared"/>  <id>https://perlmaven.com/variable-will-not-stay-shared</id>
  <content type="html"><![CDATA[<p>
When using <b>fork</b> to create child processes it is a good idea to encapsulate the behavior of both the child process
and the parent process in (separate) functions.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Stealthy Calculations</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/19#pwc143" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a string, $s, containing mathematical expression. Write a script to print 
the result of the mathematical expression. To keep it simple, please only accept 
+ - * ().&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;p&gt;Main driver.&lt;/p&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# Write a script to implement a four function infix calculator.     
##
use TWCCalculator;
use constant ADD =&gt; "10 + 8";
use constant SUBTRACT =&gt; "18 - 66";
use constant ADD_SUBTRACT =&gt; "10 + 20 - 5";  
use constant MULTIPLY =&gt; "10 * 8";
use constant DIVIDE =&gt; "52 / 2";
use constant CALCULATE =&gt; "(10 + 20 - 5) * 2"; 

MAIN:{
    my $parser = new TWCCalculator();
    $parser-&gt;parse(ADD); 
    $parser-&gt;parse(SUBTRACT); 
    $parser-&gt;parse(ADD_SUBTRACT); 
    $parser-&gt;parse(MULTIPLY); 
    $parser-&gt;parse(DIVIDE);
    $parser-&gt;parse(CALCULATE);
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TWCCalculator.yp (the Parse::Yapp code). This file is used to generate a parser module,
TWCCalculator.pm, which is used in the code above. This is where the actual parsing of
the input and implementation of the calculator is.&lt;/p&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
%token NUMBER    
%left '+' '-' '*' '/'

%%

line: 
    | expression  {print $_[1] . "\n"} 
;

expression: NUMBER
    | expression '+' expression {$_[1] + $_[3]}
    | expression '-' expression {$_[1] - $_[3]}
    | expression '*' expression {$_[1] * $_[3]}
    | expression '/' expression {$_[1] / $_[3]}
    | '(' expression ')' {$_[2]}
;

%%

sub lexer{
    my($parser) = @_;
    $parser-&gt;YYData-&gt;{INPUT} or return('', undef);
    $parser-&gt;YYData-&gt;{INPUT} =~ s/^[ \t]//;
    ##
    # send tokens to parser
    ##
    for($parser-&gt;YYData-&gt;{INPUT}){
        s/^([0-9]+)// and return ("NUMBER", $1);
        s/^(\+)// and return ("+", $1);
        s/^(-)// and return ("-", $1);
        s/^(\*)// and return ("*", $1);
        s/^(\/)// and return ("/", $1);
        s/^(\()// and return ("(", $1);
        s/^(\))// and return (")", $1);
        s/^(\n)// and return ("\n", $1);
    }  
}

sub error{
    exists $_[0]-&gt;YYData-&gt;{ERRMSG}
    and do{
        print $_[0]-&gt;YYData-&gt;{ERRMSG};
            return;
    };
    print "syntax error\n"; 
}

sub parse{
    my($self, $input) = @_;
    $self-&gt;YYData-&gt;{INPUT} = $input;
    my $result = $self-&gt;YYParse(yylex =&gt; \&amp;lexer, yyerror =&gt; \&amp;error);
    return $result;  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ yapp TWCCalculator.yp
$ perl ch-1.pl
18
-48
25
80
26
50
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;In a long ago (almost exactly two years!) Challenge we were asked to implement a Reverse
Polish Notation (RPN) Calculator. For that challenge I wrote a short introduction to the 
parser module, Parse::Yapp, that I used. See the references below, I think it still holds
up.&lt;/p&gt;

&lt;p&gt;For this challenge I was able to rely pretty heavily on that older code. I simply changed
the expected position of the operators and that was about it!&lt;/p&gt;

&lt;p&gt;I really like any excuse to use a parser generator, they're a powerful tool one can have
at the disposal for a fairly small investment of learning time. Well, practical usage
may be quick to learn. Depending on how deep one wants to go there is the possibility also
of a lifetime of study of computational linguistics.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive number, $n. Write a script to find out if the given number is a
Stealthy Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean; 

sub factor{
    my($n) = @_;
    my @factors = ();
    for  my $j (2 .. sqrt($n)){
        push @factors, [$j, $n / $j] if $n % $j == 0;
    }
    return @factors;  
}

sub stealthy{
    my($n) = @_;
    my @factors = factor($n);
    for(my $i = 0; $i &lt; @factors; $i++){
        for(my $j = 0; $j &lt; @factors; $j++){
            unless($i == $j){
                my($s, $t) = @{$factors[$i]}; 
                my($u, $v) = @{$factors[$j]}; 
                return true if $s + $t == $u + $v + 1; 
            }  
        }  
    }  
    return false; 
}

MAIN:{
    print stealthy(12) . "\n";
    print stealthy(36) . "\n";
    print stealthy(6)  . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1
1
0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;That &lt;code&gt;factor&lt;/code&gt; subroutine makes another appearance! Well, here there is a slight 
modification to get it to return the factors in pairs, each pair an array reference.
These are all checked in a loop for the desired property.&lt;/p&gt;

&lt;p&gt;This is a classic "generate and test" approach. For an idea of what it would look like
to instead constrain the variables to fit the property and then discover which values, if 
any, match these constraints then please do take a look at my 
&lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/19/prolog"&gt;Prolog solution for Challenge 143&lt;/a&gt;
which uses a Constraint Logic Programming over Finite Domains (clpfd) approach.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-143/"&gt;Challenge 143&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/13321.html"&gt;RPN Calculator for Challenge 039&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc143</id>
    <published>2021-12-19T19:56:00-05:00</published>
    <updated>2021-12-19T19:56:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 143</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-143-36f6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-143/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-143/sgreen">My solutions</a></p>

<h2>
  <a href="#task-1-calculator">
  </a>
  TASK #1 › Calculator
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a string <code>$s</code> containing mathematical expression.</p>

<p>Write a script to print the result of the mathematical expression. To keep it simple, please only accept <code>+ - * ()</code>.</p>

<h3>
  <a href="#my-solution">
  </a>
  My solution
</h3>

<p>Hopefully I don't need to teach readers of this blog about the <a href="https://www.splashlearn.com/math-vocabulary/algebra/order-of-operations">order of operations</a>, known as BEDMAS in this part of the world.</p>

<p>I'm not entirely happy with my solution, as it will sometimes give unexpected results. For example "1 (2 - 3) * 4" will give -3 (2-3 is negative one, which results in  "1 -1 * 4" = 1 - 4 = -3)</p>

<p>The simplest way to solve this would be use a regular expression to make sure it matches the criteria (contains only digits, demical points, spaces and the characters mentioned in the task) and then use <code>eval</code> or <code>qx</code> to parse the string. Maybe that is what is expected. That's probably what I would have done in the real world™. I was very tempted to see other peoples results before submitting my own, but I never do that, and I'm not about to start now :)</p>

<p>So the tact I took is probably not correct. The first thing I do is evaluate any brackets (inner most first) and replace them with the result. At each point we will have a combination of a number, followed by any number of operator number pairs. I then use regular expressions to separate out the parts. I then reduce all multiplication pairs, and finally complete all additions and subtraction.</p>

<h3>
  <a href="#examples">
  </a>
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.pl "20 + 10 - 5"
25

$ ./ch-1.pl "(20 + 10 - 5) * 2"
50
</code></pre>

</div>



<h2>
  <a href="#task-2-stealthy-number">
  </a>
  TASK #2 › Stealthy Number
</h2>

<h3>
  <a href="#task">
  </a>
  Task
</h3>

<p>You are given a positive number <code>$n</code>.</p>

<p>Write a script to find out if the given number is Stealthy Number. A positive integer N is stealthy, if there exist positive integers a, b, c, d such that a * b = c * d = N and a + b = c + d + 1.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This is relatively straight forward compared to the first task, and like many other solutions I produce is simply uses a brute force method.</p>

<p>I have a loop <code>i</code> that counts from one to <code>√n</code>. If <code>n % i</code> is 0, we have a possible combination for a/b or c/d. I then compare this value to any previous values. If they have a absolute different of one, then I print 1. If we don't find any possible a/b/c/d combinations, then I print 0. </p>

<p>The Perl code is a transliteration of the Python code.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 24
1

$ ./ch-2.py 12
1

$ ./ch-2.py 6
0
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-143-36f6</id>
    <published>2021-12-19T00:49:17Z</published>
    <updated>2021-12-19T00:49:17Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4371492345422376751</id>
    <published>2021-12-18T15:59:00.000+01:00</published>
    <updated>2021-12-18T15:59:02.651+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxii) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/DBIx-Custom-0.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::Custom&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - DBI extension to execute insert, update, delete, and select easily &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.45&lt;/strong&gt; on 2021-12-16&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 1 year, 4 months, 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RJBS/Email-MIME-1.952' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Email::MIME&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - easy MIME message handling &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.952&lt;/strong&gt; on 2021-12-14&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 1.949 was 1 year, 6 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/ExtUtils-MakeMaker-7.64' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;ExtUtils::MakeMaker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a module Makefile &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;7.64&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 49&lt;/li&gt;  &lt;li&gt;Previous version: 7.62 was 8 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Future-AsyncAwait-0.55' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Future::AsyncAwait&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - deferred subroutine syntax for futures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.55&lt;/strong&gt; on 2021-12-16&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 0.54 was 1 month, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/IO-Async-0.801' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.801&lt;/strong&gt; on 2021-12-15&lt;/li&gt;  &lt;li&gt;Votes: 65&lt;/li&gt;  &lt;li&gt;Previous version: 0.800 was 1 month, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.04&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 95&lt;/li&gt;  &lt;li&gt;Previous version: 4.03 was 10 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.07&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.06 was 10 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.60' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.60&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.59 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.33&lt;/strong&gt; on 2021-12-15&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.32 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.33' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.33&lt;/strong&gt; on 2021-12-16&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 1.32 was 5 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Object-Pad-0.59' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Object::Pad&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a simple syntax for lexical slot-based objects &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.59&lt;/strong&gt; on 2021-12-15&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.58 was 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/AKHUETTEL/REST-Client-281' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;REST::Client&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A simple client for interacting with RESTful http/https resources &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;281&lt;/strong&gt; on 2021-12-17&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 273 was 6 years, 4 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9018' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9018&lt;/strong&gt; on 2021-12-13&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9017 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ATOOMIC/Template-Toolkit-3.010' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Template::Toolkit&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - comprehensive template processing system &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.010&lt;/strong&gt; on 2021-12-13&lt;/li&gt;  &lt;li&gt;Votes: 135&lt;/li&gt;  &lt;li&gt;Previous version: 3.009 was 1 year, 5 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.087' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.087&lt;/strong&gt; on 2021-12-14&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.085 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4371492345422376751/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxii-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4371492345422376751"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4371492345422376751"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxii-15-great-cpan-modules-released.html" title="(ccclxxii) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Advent of Code Day 9 to 14</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_09_to_14.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_09_to_14.html</id>
    <updated>2021-12-14T17:51:00+00:00</updated>
    <category term="perl"/>
    <summary type="html">Five more days of coding adventures!

Day 9 - Smoke Basin

We need to find "low points" in a two-dimensional map of integers ranging from 0 to 9.

For part 1 I used a hash to store the map (with keys </summary>
    <content type="html">&lt;p&gt;Five more days of coding adventures!&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/9"&gt;Day 9&lt;/a&gt; - Smoke Basin&lt;/h4&gt;

&lt;p&gt;We need to find "low points" in a two-dimensional map of integers ranging from 0 to 9.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_1.pl"&gt;part 1&lt;/a&gt; I used a hash to store the map (with keys like "3_2" for row 3/col 2), and looked in the 4 bordering fields to find lower values (adjusting for corners/borders), I use the classic method (learned in previous years) of looping through a list of offsets to look for the neighbouring values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $move ([-1,0],[1,0],[0,-1],[0,1]) {
     my $look = ($r + $move-&amp;gt;[0] ).':'.($c + $move-&amp;gt;[1]);
     my $val = $map{ $look };
     ...
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the value I'm looking at is lower than all the four neighbours, count it. I needed to implement some special cases for the rows at the edges of the map, which could have been avoided if I had remembered another class trick: Pad the map with some values (in this case, &lt;code&gt;9&lt;/code&gt; is perfect, because it's the highest values, thus ensuring that all other values are lower). See for example &lt;a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-09.html"&gt;Abigail's solution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_2.pl"&gt;part 2&lt;/a&gt; I found the joining/splitting of row/cols too annoying so rewrote to a two-dim array. Used a recursive function to walk the map, starting from the low points. After visiting a location, I set it to -1, and stopped when hitting a 9 (or a previously visited -1).&lt;/p&gt;

&lt;p&gt;The solutions is quite long because it builds on the solution for part 1 to find the low points. I guess it could be shortened quite bit...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/09_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/10"&gt;Day 10&lt;/a&gt; - Syntax Scoring&lt;/h4&gt;

&lt;p&gt;I found this day quite easy (definitely easier than some earlier days), and it took me longer to get the points calculation right than to figure out the closing parens (using a simple stack onto which I push open chars, and then check if we have a matching closing one).&lt;/p&gt;

&lt;p&gt;While these solutions could be heavily golfed, I leave then at their current very readable state - if not only to fight certain prejudices against Perl :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/10_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/10_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/11"&gt;Day 11&lt;/a&gt; - Dumbo Octopus&lt;/h4&gt;

&lt;p&gt;Finally, a Game-of-Life-y task. And not too hard. But I wasted some time on the first part because I did the general increment of the octopus in the same step as the flashing, which worked for the first few rows and generations, but later broke down.&lt;/p&gt;

&lt;p&gt;This time we need to look at all the 8 neighbours in a grid, so the list of "movement" (in fact, look-instructions) was a bit longer than on day 9:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh, and also I find it &lt;b&gt;much easier&lt;/b&gt; to work with rows &lt;code&gt;$r&lt;/code&gt; and columns &lt;code&gt;$c&lt;/code&gt; instead of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On this day I started to think about creating something like Acme::AdventOfCode containing a grab-bag of helpful functions (parse a map, draw a map, etc). Maybe I'll prepare something later / next year...&lt;/p&gt;

&lt;p&gt;For part 2 I just needed to replace the &lt;code&gt;for&lt;/code&gt; loop with a &lt;code&gt;while (1)&lt;/code&gt; and stop when all octopus flash.&lt;/p&gt;

&lt;p&gt;Here's a very nice visualisation using an &lt;a href="https://www.reddit.com/r/adventofcode/comments/re000o/2021_day_11_part_2_c_trying_to_do_everything_on/"&gt;arduino&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/11_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/11_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/12"&gt;Day 12&lt;/a&gt; - Passage Pathing&lt;/h4&gt;

&lt;p&gt;I had a family event on Sunday, so only got to work on the tasks in the evening, and was not very motivated. Also, this was a rather standard path solving / graph traversal. So here is my boring code (which was cheated^winsipired by reading a few of the solutions on reddit)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/12_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/12_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/13"&gt;Day 13&lt;/a&gt; - Transparent Origami&lt;/h4&gt;

&lt;p&gt;Again a very nice task! We need to "fold" a very big piece of transparent paper that's marked with some dots. After a physically impossible number of folds a code will appear (that was part 2, part 1 just tested the basic folding algorithm).&lt;/p&gt;

&lt;p&gt;Here you can watch somebody &lt;a href="https://www.reddit.com/r/adventofcode/comments/rfp213/2021_day_13_folding_with_a_folding_phone/"&gt;solving it on a folding phone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_1.pl"&gt;first part&lt;/a&gt; (not cleaned up) I tried to be smart and only implement one folding dimension, and just rotate the map for the other dimension. But unfortunately I'm too stupid to come up with a working matrix rotation in 10 minutes, so I just copied the folding algorithm and adapted it for the other dimension.&lt;/p&gt;

&lt;p&gt;I also got a wrong result first, because when the instructions said we should "count the dots", I counted the actual dots &lt;code&gt;.&lt;/code&gt;, but those represent emptiness, and we need to count &lt;code&gt;#&lt;/code&gt; which represent the dots. I wonder if this was worded like that on purpose..&lt;/p&gt;

&lt;p&gt;For the &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_2.pl"&gt;second part&lt;/a&gt; (after submitting it..) I replaced the &lt;code&gt;#&lt;/code&gt; with &lt;code&gt;█&lt;/code&gt;, which makes for much easier to read output. Oh, and I had to adapt the folding algorithm a bit to align the folded parts on the fold, and not on the top row:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;splice( @map, $at, 1 );                       # remove the fold
 my @low = splice( @map, $at, @map - $at );    # fold it
 my $r   = @map - @low;                        # make sure the fold aligns
 for my $folded ( reverse @low ) {
     my $c = 0;
     for my $mark (@$folded) {
         $map[$r][$c] = $mark if $mark eq '█';    # rub through
         $c++;
     }
     $r++;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the line with the comment "make sure the fold aligns", where I adjust the starting row to the difference between the two parts of the fold. This was only needed for one fold (for my input), but I still added to both cases.&lt;/p&gt;

&lt;p&gt;Here's the output without the fold-alignment-fix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   █  ████  ███ █ ██ █    ████ █ ██ █  █ 
   ██ ██ █ █  █ ████ █    █ ██ ████ ████ 
    █ ████  ███ ████ █    █ █  ███  ████ 
 █  █ ████ ███  ████ █    █ ██ █ █  ████ 
 █  █ ███  ████ █ ██ █ ██ █ ██ █ █  █  █ 
  ██  █ ██ ████ ███  ███  ████ █ ██ █  █ &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One could try to guess, but fixing it was easier and yields"&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   ██ ███  ████ ███  █     ██  █  █ █  █ 
    █ █  █    █ █  █ █    █  █ █ █  █  █ 
    █ █  █   █  ███  █    █    ██   ████ 
    █ ███   █   █  █ █    █ ██ █ █  █  █ 
 █  █ █ █  █    █  █ █    █  █ █ █  █  █ 
  ██  █  █ ████ ███  ████  ███ █  █ █  █ &lt;/code&gt;&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/13_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was the first time I got a 4-digit rank (8532 / 9122), but not because I was especially fast / smart, but because I woke up very early and couldn't get back to sleep, and thus started at ~6:30 (local time)&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/14"&gt;Day 14&lt;/a&gt; - Extended Polymerization&lt;/h4&gt;

&lt;p&gt;I had 20 minutes time until a meeting started, so I ignored the "This polymer grows quickly" warning for the first part, and implemented an array based solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $step (1 .. 10) {
    my @new;
    for (my $i=0; $i&amp;lt;@poly-1; $i++) {
        push( @new, $rules{$poly[$i].$poly[$i+1]}-&amp;gt;@* );
    }
    push( @new, $poly[-1] );
    @poly = @new;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks up the current pair (&lt;code&gt;$poly[$i].$poly[$i+1]&lt;/code&gt;) in the list of rules, where for example &lt;code&gt;'NH'&lt;/code&gt; will return &lt;code&gt;'NC','CH'&lt;/code&gt; and push the two new pairs onto the new version of the polymer.&lt;/p&gt;

&lt;p&gt;Worked like a charm for &lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/14_1.pl"&gt;part 1&lt;/a&gt;. But died after ~22 steps (far from the 40 steps required for part 2) for lack of &lt;span class="caps"&gt;RAM &lt;/span&gt;(and I have loads!).&lt;/p&gt;

&lt;p&gt;During my meeting (ahem..) I fiddled a bit with the output to check if there is some regularity I could use to just forecast the result. There wasn't. Linked lists also did not seem reasonable, because we didn't need to insert stuff somewhere into an array. (Linked lists where used in previous years when plain arrays where to slow)&lt;/p&gt;

&lt;p&gt;So I couldn't resist to check &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;reddit&lt;/a&gt; (the meeting was still ongoing..) where I was greeted by a lot of &lt;a href="/perl/2021_aoc_day_06_to_08.html"&gt;Lanternfish&lt;/a&gt; memes. Then it made click.&lt;/p&gt;

&lt;p&gt;I was &lt;b&gt;again&lt;/b&gt; fooled by the array-heavy problem description, when in fact all we had to do was count the pairs (of which there where only a few), and increment the pairs based on the rules: So if I see &lt;code&gt;NH&lt;/code&gt; (and we already have 10 of them), I just need to increment the counter of &lt;code&gt;NC&lt;/code&gt; and &lt;code&gt;CH&lt;/code&gt; by 10:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for my $step (1 .. 40) {
     my %new;
     while (my ($pair,$count) = each %pairs) {
         $new{ $rules{$pair}[0] } += $count;
         $new{ $rules{$pair}[1] } += $count;
     }
     %pairs = %new;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest was a bit of fiddling with the resulting pair counts to count each letter, not forgetting that the last letter in the original input has to be added once by hand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my %count = ($poly[-1] =&amp;gt; 1);
 while (my ($pair,$count) = each %pairs) {
     my ($f,$s)=split(//,$pair);
     $count{$f}+=$count;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sort and subtract, and done!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/14_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/14_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>#542 - Perl Advent Calendar</title>
    <link rel="alternate" href="https://perlweekly.com/archive/542.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>How you all doing? Are you making the most of the festive season?</p>
<p>In the <a href="https://perlweekly.com/archive/540.html">540th edition</a> of the weekly newsletter, I mentioned <strong>Advent Calendars</strong>. I noticed some activity in the GitHub repository for the <strong>Perl Advent Calendar</strong> and was hoping to see another exciting edition full of Perl projects. A friend of mine on <strong>Facebook</strong> mentioned that this year the <a href="http://perladvent.org/2021/index.html">Perl Advent Calendar</a> is looking a bit sparse. At the time of writing this editorial, I have only seen <a href="http://perladvent.org/2021/2021-12-01.html">one post</a> i.e. Day 1 of Year 2021. Being one of many contributors in the past, I am sad to see the current state of the project. I have absolutely no idea what happened this year. I know I have too many things already on my plate but I would like to help to get the <strong>Perl Advent Calendar</strong> back to its original glory.</p>
<p>Talking about <strong>Advent Calendars</strong>, I would like to mention <a href="https://theweeklychallenge.org/blog/advent-calendar-2021">The Weekly Challenge Advent Calendar</a> which has mix of <strong>Perl</strong> and <strong>Raku</strong> like in the past. We have been running this since the beginning i.e. <strong>2019</strong>. You will find some of the fun tasks from the past year being discussed by members of <strong>Team PWC</strong>. I have made a slight change to the look and feel this year. I hope you like it.</p>
<p>How about the <a href="https://24pullrequests.com">24 Pull Requests</a> event?</p>
<p>I have not seen it being discussed either on any of the social platforms e.g. <strong>Facebook</strong>, <strong>Twitter</strong> or <strong>LinkedIn</strong>. I haven't had chance to take part this year. I couldn't take part last year either; what a shame. I still have 10 days and I have booked a few days off work. So there is a possibility I might take part and even complete the challenge. Please wish me luck.</p>
<p>Last but not least, <strong>Curtis</strong>, leader of the <strong>Corinna</strong> project, announced that he had a great meeting with the Perl Steering Council and they are extremely receptive to Corinna going into the core. I can't wait for <strong>Corinna</strong> to be part of core Perl. <strong>Damian</strong> shared the details on one of issues discussed in the same meeting in a <a href="http://blogs.perl.org/users/damian_conway/2021/12/a-not-so-simple-matter-of-privacy.html">blog post</a>. You definitely don't want to miss it.</p>
<p>Enjoy the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/542.html</id>
    <published>2021-12-13T10:00:00Z</published>
    <updated>2021-12-13T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Sleeping Divisors</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/12#pwc142" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given positive integers, $m and $n. Write a script to find total count of 
divisors of $m having last digit $n.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub factor{
    my($n) = @_;
    my @factors = (1);
    foreach  my $j (2 .. sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }
    return @factors;  
}

sub divisors_last_digit{
    my($m, $n) = @_;
    my @divisors;   
    my @factors = factor($m);
    {
        my $factor = pop @factors;
        push @divisors, $factor if $n == substr($factor, -1);    
        redo  if @factors;  
    }    
    return sort {$a &lt;=&gt; $b} @divisors;   
}

MAIN:{
    my($m, $n); 
    my @divisors;
    ($m, $n) = (24, 2); 
    @divisors = divisors_last_digit($m, $n);
    print "($m, $n): " . @divisors . " --&gt; " . join(", ", @divisors) . "\n";  
    ($m, $n) = (75, 5); 
    @divisors = divisors_last_digit($m, $n);
    print "($m, $n): " . @divisors . " --&gt; " . join(", ", @divisors) . "\n";  
    ($m, $n) = (30, 5); 
    @divisors = divisors_last_digit(30, 5);
    print "($m, $n): " . @divisors . " --&gt; " . join(", ", @divisors) . "\n";  
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
(24, 2): 2 --&gt; 2, 12
(75, 5): 3 --&gt; 5, 15, 25
(30, 5): 2 --&gt; 5, 15
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Implement Sleep Sort.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Thread::Pool;

sub create_workers{
    my @numbers = @_; 
    my $count = @numbers; 
    my $workers = new Thread::Pool({
        optimize =&gt; "cpu", 
        do =&gt; \&amp;sleeper, 
        workers =&gt; $count,
        maxjobs =&gt; $count, 
        minjobs =&gt; $count 
    });
    return $workers;
}

sub sleeper{
    my($n) = @_; 
    sleep($n);
    return $n;   
}

sub sleep_sort{
    my($numbers, $workers) = @_; 
    my @jobs;
    my @sorted;   
    for my $n (@{$numbers}){
        my $job_id = $workers-&gt;job($n);
        push @jobs, $job_id;   
    } 
    {
        my $job = pop @jobs;     
        my @result = $workers-&gt;result_any(\$job);
        if(!@result){    
            push @jobs, $job;  
        }
        else{
            push @sorted, $result[0]; 
        }
        redo if @jobs; 
    }
    $workers-&gt;shutdown; 
    return @sorted;   
}

MAIN:{
    my @numbers;
    my @sorted; 
    @numbers = map{int(rand($_) + 1)} (0 .. 9);  
    print join(", ", @numbers) . "\n"; 
    @sorted = sleep_sort(\@numbers, create_workers(@numbers));  
    print join(", ", @sorted) . "\n"; 
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1, 1, 1, 3, 2, 3, 4, 7, 8, 6
1, 1, 1, 2, 3, 3, 4, 6, 7, 8
$ perl perl/ch-2.pl
1, 1, 1, 2, 2, 5, 5, 2, 1, 9
1, 1, 1, 1, 2, 2, 2, 5, 5, 9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I hope participants in The Weekly Challenge enjoyed this! After I saw Jort Sort in 
Challenge 139 I was reminded of other joke sorts and suggested this as a future challenge.
Happily the suggestion was accepted!&lt;/p&gt;

&lt;p&gt;Threading is easy in Perl, which uses an "Interpreter Threads" ("ithreads") model. 
Node.js programmers will find this model familiar as it is exactly what that language 
uses. Unfortunately Perl's documentation writers are not as familiar with concurrent and 
parallel programming topics and some of the official documentation needs updating. 
Unfortunately, this is a bizarrely 
&lt;a href="https://github.com/Perl/perl5/issues/14691"&gt;contentious issue&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;To ensure you are using a perl interpreter with proper ithreads support try this 
one-liner: &lt;code&gt;$ perl -Mthreads -e 0&lt;/code&gt;. If that runs without error you are good to go! If you
get an error you'll need to install a new perl. One convenient option is to use 
&lt;a href="https://perlbrew.pl/"&gt;Perlbrew&lt;/a&gt;. After installing &lt;code&gt;perlbrew&lt;/code&gt; you'll need to invoke it
like this &lt;code&gt;perlbrew install perl-5.34.0 -Dusethreads&lt;/code&gt;. Please see the Perlbrew 
documentation for additional (straightforward) details if you decide to undertake this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here rather than &lt;code&gt;use threads&lt;/code&gt; directly &lt;code&gt;Thread::Pool&lt;/code&gt; is used. This is a convenient
pattern for using Perl's ithreads. Since each ithread is really a new perl interpreter 
process this allows for some fine tuning of the number of ithreads created to help 
conserve memory usage. In this case the memory conservation is actually somewhat minimal
since Sleep Sort requires us to start a new ithread for each element of the array to be 
sorted. Amusingly, because of the process based threading model, we can quickly crash the 
program by attempting to sort an array whose size causes the system to exceed the number
of allowed processes. Remember, this is a joke sort, right!?!?&lt;/p&gt;

&lt;p&gt;Typically you'd create a pool of workers whose number matched the number of CPU cores
available. That way each core could be tasked by the OS for whatever CPU intensive code
you'd care to run without the ithreads competing too badly with each other.&lt;/p&gt;

&lt;p&gt;Concurrent and parallel programming issues are somewhat advanced. Excellent documentation
exists that is both Perl specific and more general. Be sure to understand the difference 
between ithreads and so called "co-operative thread" models (as used in modules such as
Coro. The "advanced" nature of this topic is due to understanding the various trade-offs 
at play. Deep understanding usually comes from experience of implementing solutions this
way and study of the underlying Operating System concepts. Even the most modest modern
computer systems systems available have multiple cores at your disposal as a programmer
so this effort is certainly worthwhile! The bibliography of &lt;code&gt;perlthrtut&lt;/code&gt; is an excellent
starting point.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-142/"&gt;Challenge 142&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://iq.opengenus.org/sleep-sort/"&gt;Sleep Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlthrtut"&gt;perlthrtut&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Thread::Pool"&gt;Thread::Pool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodesource.com/blog/worker-threads-nodejs/"&gt;Node.js Workers&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc142</id>
    <published>2021-12-12T13:16:00-05:00</published>
    <updated>2021-12-12T13:16:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6969056211502125629</id>
    <published>2021-12-11T23:42:00.001+01:00</published>
    <updated>2021-12-11T23:42:36.055+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(ccclxxi) 8 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/GUGOD/App-perlbrew-0.94" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.94&lt;/strong&gt; on 2021-12-04&lt;/li&gt;  &lt;li&gt;Votes: 167&lt;/li&gt;  &lt;li&gt;Previous version: 0.94 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DWHEELER/App-Sqitch-v1.2.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;App::Sqitch&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Sensible database change management &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v1.2.1&lt;/strong&gt; on 2021-12-05&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: v1.2.0 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.04" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.04&lt;/strong&gt; on 2021-12-09&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 5.03 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PREACTION/Minion-Backend-mysql-0.32" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Minion::Backend::mysql&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - MySQL backend &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.32&lt;/strong&gt; on 2021-12-11&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 0.30 was 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DCANTRELL/Number-Phone-3.8002" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Number::Phone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - base class for Number::Phone::* modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.8002&lt;/strong&gt; on 2021-12-06&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 3.8001 was 2 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SSIMMS/PDF-API2-2.043" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;PDF::API2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create, modify, and examine PDF files &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.043&lt;/strong&gt; on 2021-12-08&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 2.042 was 2 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/KIMOTO/SPVM-0.9017" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9017&lt;/strong&gt; on 2021-12-10&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.9015 was 2 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BDFOY/Unicode-Tussle-1.115" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Unicode::Tussle&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Tom's Unicode Scripts So Life is Easier &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.115&lt;/strong&gt; on 2021-12-11&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 1.111 was 5 years, 6 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6969056211502125629/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxi-8-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6969056211502125629"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6969056211502125629"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/12/ccclxxi-8-great-cpan-modules-released.html" title="(ccclxxi) 8 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Do you want to partner with the Perl Marketing Committee to organize Hackathons in 2022?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/hackothon-events-planning-2022"/>
  <id>tag:news.perlfoundation.org,2021-12-09:/post/hackothon-events-planning-2022</id>
  <published>2021-12-09T07:04:11</published>
  <updated>2021-12-09T07:04:11</updated>
  <summary>
  <![CDATA[
     In 2022, the Perl Marketing Committee are looking to help organize two hackathon events based on data collected in the survey run by Andrew Solomon. The initial focus areas are Editor/IDE integration, and CPAN Recommendations. The vision of the committee is to help make these events happen by partnering with projects within the Perl community. The goal is to make these events fun, rewarding, and successful, by being as accessible 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Hackathons" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Marketing" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>In 2022, the Perl Marketing Committee are looking to help organize two (or more!) hackathon events based on data collected in <a href="https://news.perlfoundation.org/post/newcomer-survey-results-actions">the survey run by Andrew Solomon.</a> </p>

<p>The initial focus areas are Editor/IDE integration, and CPAN Recommendations.</p>

<p>The vision of the committee is to help make these events happen by partnering with projects within the Perl community.</p>

<p>The goal is to make these events fun, rewarding, and successful, by being as accessible as possible. We also want to increase first time/one off contributions.</p>

<p>The committee hopes to improve accessibility by running these events as a hybrid of in-person and virtual attendance, with a primary location for people to attend in-person, virtual attendance from any location, and perhaps semi-formal/adhoc satellite locations. Further, we are eager to see how language barriers, visual impairment, hearing impairment, etc. can be brought down with video chat software (many with live transcription), text chat with modern translation, etc.</p>

<p>By working with projects before the event, a range of tasks will be available to help people of differing experience levels make their first contribution to the project.</p>

<p>The committee will reach out to various projects in the near future to get the ball rolling.</p>

<p>Comments and feedback are welcome below, especially people keen to be involved with organizing.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Advent of Code Day 6, 7 and 8</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_06_to_08.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_06_to_08.html</id>
    <updated>2021-12-08T22:42:56+00:00</updated>
    <category term="perl"/>
    <summary type="html">Day 6 - Lanternfish

Did the first part via an Array, because I was expecting some GoL stuff in Part 2. There wasn't and the Array-based solution would take forever for part 2. So after a bit of ...</summary>
    <content type="html">&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/7"&gt;Day 6&lt;/a&gt; - Lanternfish&lt;/h4&gt;

&lt;p&gt;Did the first part via an Array, because I was expecting some GoL stuff in Part 2. There wasn't and the Array-based solution would take forever for part 2. So after a bit of thinking (and (for once) not looking at reddit for ideas) I realized that the position of each fish is irrelevant, and we just need to count the fish.&lt;/p&gt;

&lt;h5&gt;Counting fish is faster than fish-herding them in an array&lt;/h5&gt;

&lt;p&gt;So part 2 is converted to a hash (where the keys are the generation of the fish, and the value the number of fishes at that generation), and a very simple loop to move the fish around. I had a small problem while figuring out when to add fish vs just set them, but the &lt;a href="https://github.com/domm/advent_of_code/blob/6811e15ec44cb4f4702d00ca9254a6df044ef90f/2021/06_2.pl"&gt;finished code is quite clear to read&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;Cleanup&lt;/h5&gt;

&lt;p&gt;Sometimes I later like to come back to the code and clean it up a bit more (and maybe make it a bit smarter). While doing so I realized that I don't need a hash, I can use the fish generation as the index of an array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my @fish = map { 0 } ( 0 .. 8 );
for ( split( ',', &amp;lt;&amp;gt; ) ) {
    $fish[ $_ ]++;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read in the list of fish and store them in an array indexed by the generation. The first line inits the array with 0s to prevent undefined warnings.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;for my $day ( 1 .. 256 ) {
    my $born = 0;
    for my $gen ( 0 .. 8 ) {
        if ( $gen  0 ) {
            $born = $fish[$gen];
        }
        else {
            $fish[ $gen - 1 ] = $fish[$gen];
        }
    }
    $fish[6] += $fish[8] = $born;
    say "$day: ".sum(@fish) if ( $day  80 || $day == 256 );
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for each of the days we go through all the generations, and move them one generation down (&lt;code&gt;$fish[ $gen - 1 ] = $fish[$gen]&lt;/code&gt;). But the fish of generation 0 move to generation 6, and spawn the same number (&lt;code&gt;$born&lt;/code&gt;) in generation 8. To calculate the sum of the fish i use &lt;code&gt;List::Util&lt;/code&gt;'s &lt;code&gt;sum&lt;/code&gt;, but only for day 80 (part 1) and day 256 (part 2). My stupid array-based solution takes nearly a second for the first part, and probably forever for the second part; but the smarter solution takes only a few milliseconds for both parts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/06_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/06_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/7"&gt;Day 7&lt;/a&gt; - The Treachery of Whales&lt;/h4&gt;

&lt;p&gt;For the first part I had a mathy gut feeling that the solution has to be related with the &lt;code&gt;median&lt;/code&gt; of the values, so I hacked up a solution (using &lt;span class="caps"&gt;CPAN &lt;/span&gt;module &lt;a href="https://metacpan.org/pod/Statistics::Basic"&gt;Statistics::Basic&lt;/a&gt; for the statistics stuff), which worked for the test data. Tried the proper input and got a star!&lt;/p&gt;

&lt;p&gt;So I assumed that part 2 will need &lt;code&gt;mean&lt;/code&gt;. Tried it on the test-data, didn't work because the mean was a float, which I truncated to int. So I tried rounding it up, now it worked with test, but not with live data. Instead of thinking a tiny bit more, I thought that a &lt;a href="https://github.com/domm/advent_of_code/commit/e687a0a93e97f4bc22c425b71162787bff03fe01"&gt;brute force approach&lt;/a&gt; will also work and just calculated the fuel for all possible positions, which worked fast enough.&lt;/p&gt;

&lt;p&gt;While brushing teeth (it's morning here..) I realized that I should also have tried the rounded down mean, so I did that, and got the proper result (much faster..). Of course I now knew that the result was in fact correct, but I don't have enough mathy gut feelings to prove that. Then I also used Gauss' sum formula for the fuel consumption. When I was coding the fuel sum I knew there was a smarter solution, but again the computer was fast enough for me to not use my brain (not sure I like this trend..)&lt;/p&gt;

&lt;p&gt;Here's the cleaned up solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Statistics::Basic qw(:all);

my @crabs = split( ',', &amp;lt;&amp;gt; );
my $mean  = mean(@crabs);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Read in the data and calculate the &lt;code&gt;mean&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $res=0;
for my $cand ( int($mean), sprintf( '%.0f', $mean ) ) {
    my $fuel;
    for my $c (@crabs) {
        my $diff = abs( $c - $cand );
        $fuel += $diff * ( $diff + 1 ) / 2;
    }
    $res = !$res ? $fuel : $fuel &amp;lt; $res ? $fuel : $res;
}
say $res;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take the rounded down and rounded up mean, and for each go through all the crabs. Get the distance it has to travel, and use Gauss to calculate the fuel consumption. Then use the barley readable line &lt;code&gt;$res = !$res ? $fuel : $fuel &amp;lt; $res ? $fuel : $res;&lt;/code&gt; to figure out which of the two candidates uses less fuel.&lt;/p&gt;

&lt;p&gt;My favorite task this year so far :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/07_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/07_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/8"&gt;Day 8&lt;/a&gt; - Seven Segment Search&lt;/h4&gt;

&lt;p&gt;The first part was ridiculously easily especially considering the absurd long and complex explanation of the task. Just go through the second list of words and count those with the correct length:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;my $hit;
for (&amp;lt;&amp;gt;) {
    chomp;
    my ( $first, $second ) = split / \| /;
    for my $read ( split / /, $second ) {
        my $l = length($read);
        $hit++ if ( $l  2 || $l  3 || $l  4 || $l  7 );
    }
}
say $hit;&lt;/code&gt;&lt;/pre&gt;

&lt;h5&gt;And now to something complex&lt;/h5&gt;

&lt;p&gt;It was clear that a few numbers are based on the length of the input (we did learn something in part 1!). To figure out the rest, I grabbed some of the best dev tools, pen &amp;amp; paper, and draw the missing numbers, and which lines are needed to get them. I soon realized that, from the numbers using 5 lines, only the 3 overlaps completely with the 1. This means that I need not figure out the exact position of each line, just which ones overlap. After a bit more drawing and thinking I found ways to identify the other numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        my $l    = length($read);
        my $cand = [ split( //, $read ) ];
        if ( my $num = $direct{$l} ) {
            $res[$num] = $cand;
        }
        elsif ( $l  5 ) {
            if ( List::Compare-&gt;new( $cand, $res[1] )-&gt;get_intersection  2 ) {
                $res[3] = $cand;
            }
            elsif ( List::Compare-&amp;gt;new( $cand, $res[4] )-&amp;gt;get_intersection  3 ) {
                $res[5] = $cand;
            }
            else {
                $res[2] = $cand;
            }
        }
        elsif ( $l  6 ) {
            if ( List::Compare-&amp;gt;new( $cand, $res[1] )-&amp;gt;get_intersection  1 ) {
                $res[6] = $cand;
            }
            elsif ( List::Compare-&gt;new( $cand, $res[4] )-&gt;get_intersection  4 ) {
                $res[9] = $cand;
            }
            else {
                $res[0] = $cand;
            }
        }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was to lazy to come up with my own way to find the intersection of two arrays (see &lt;a href="https://abigail.github.io/HTML/AdventOfCode/2021/day-08.html"&gt;Abigale's post&lt;/a&gt; for a nice one), so I used &lt;a href="https://metacpan.org/pod/List::Compare"&gt;List::Compare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rest was simple: Map the letter combinations to their respective value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my %decode;
    for ( my $i = 0; $i &amp;lt; @res; $i++ ) {
        $decode{ join( '', sort $res[$i]-&amp;gt;@* ) } = $i;
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally go through the second set of readings, and convert them to a 4-digit number, and sum them all up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   my $output;
    for my $read ( split / /, $second ) {
        my $lookup = join( '', sort split( //, $read ) );
        $output .= $decode{$lookup};
    }
    $sum += $output;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also a very nice task!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/08_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/08_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>#541 - Hanukkah is over - Advent started</title>
    <link rel="alternate" href="https://perlweekly.com/archive/541.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there</p>
<p>Hanukkah, the 8-day celebration of the Jews returning to Jerusalem and the rededication of the Temple on the Temple-mount is now over. We ate way too much and the UN passed only one resolution trying to eliminate the historical ties of Jews to this hill. Very good timing.</p>
<p>Now onto Advent!</p>
<p>How often do you remember to thank Mark Gardner for his extraordinary posts about Perl? I think I have only thanked him once. Maybe I should set up a cron job to send him a thank-you note every month. Or maybe I should <a href="https://phoenixtrap.com/tip/">leave him a tip</a>. Finally he set up a system where we can give him a one-time tip or, IMHO better yet, a recurring tip. It is so nice to see month-by-month that people still value your work even if they are too busy or too embarrassed to say it themselves.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/541.html</id>
    <published>2021-12-06T10:00:00Z</published>
    <updated>2021-12-06T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Like, It’s Just the First Ten Numbers Man!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/12/05#pwc141" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from The Weekly Challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to find lowest 10 positive integers having exactly 8 divisors&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub factor{
    my($n) = @_;
    my @factors = (1, $n);
    foreach my $j (2..sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }    
    return @factors;  
}

sub first_ten_with_eight{
    my $i = 0;
    my @first_ten;  
    do{
        my @factors = factor($i);
        push @first_ten, $i if @factors == 8;   
        $i++; 
    }while(@first_ten != 10); 
    return @first_ten;
}

MAIN:{
    print join(", ", first_ten_with_eight()) . "\n";   
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
24, 30, 40, 42, 54, 56, 66, 70, 78, 88
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I have re-used that &lt;code&gt;factor()&lt;/code&gt; function quite a bit for these challenges, especially 
recently. My blog writing has been fairly terse recently and as much as I'd like to
be a bit more verbose I really am not sure if there all that much more to say about this
code that hasn't been said before!&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given positive integers, $m and $n. Write a script to find total count of 
integers created using the digits of $m which is also divisible by $n.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given positive integers, $m and $n.
# Write a script to find total count of integers 
# created using the digits of $m which is also 
# divisible by $n.
##
use Data::PowerSet q/powerset/;

sub like_numbers{
    my($m, $n) = @_; 
    my @divisible; 
    for my $subset (@{powerset(split(//, $m))}){
        my $i = join("", @$subset);
        push @divisible, $i if $i &amp;&amp; $i != $m &amp;&amp; $i % $n == 0;
    }  
    return @divisible;
}

MAIN:{
    print like_numbers(1234, 2) . "\n";
    print like_numbers(768, 4) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
9
3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I've been making more use of &lt;code&gt;Data::PowerSet&lt;/code&gt; recently that I would have expected! If 
anyone is interested in seeing an implementation of the Power Set calculations see my
C++ solution links below. While not Perl the code is quite readable and should be 
adaptable easy to other languages. There is also a Rosetta Code entry for Power Set
but, frankly, many of the submissions there, especially the C++ and Perl ones are overly
convoluted in my opinion. Or at least much more so than the way I implemented it, which
I would think would be the more common method but I guess not!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-141/"&gt;Challenge 141&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/PowerSet.html"&gt;Power Set Defined&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Data::PowerSet"&gt;Data::PowerSet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://rosettacode.org/wiki/Power_set"&gt;Rosetta Code Entry: Power Set&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/30630.html"&gt;C++ Solutions: Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adamcrussell.livejournal.com/30842.html"&gt;C++ Solutions: Part 2&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc141</id>
    <published>2021-12-05T16:47:00-05:00</published>
    <updated>2021-12-05T16:47:00-05:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Advent of Code Day 1 to 5</title>
    <link href="http://domm.plix.at/perl/2021_aoc_day_01_to_05.html"/>
    <id>http://domm.plix.at/perl/2021_aoc_day_01_to_05.html</id>
    <updated>2021-12-05T16:45:36+00:00</updated>
    <category term="perl"/>
    <summary type="html">As you have probably noted by the measurable reduction of programmer productivity worldwide, Advent of Code is running again. Here's a short recap of my experiences from day 1 to day 5.

I usually ...</summary>
    <content type="html">&lt;p&gt;As you have probably noted by the measurable reduction of programmer productivity worldwide, &lt;a href="https://adventofcode.com/2021"&gt;Advent of Code&lt;/a&gt; is running again. Here's a short recap of my experiences from day 1 to day 5.&lt;/p&gt;

&lt;p&gt;I usually approach the problems straight-forward (or brute-force), mostly because I'm not that kind of smart to know all the nice shortcuts and algorithms (which I later usually read up on the very recommended "Solution Megathreads" on &lt;a href="https://www.reddit.com/r/adventofcode/"&gt;reddit&lt;/a&gt;. You can find me solutions &lt;a href="https://github.com/domm/advent_of_code/tree/main/2021"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/1"&gt;Day 1&lt;/a&gt; - Sonar Sweep&lt;/h4&gt;

&lt;p&gt;Starting of easy, just adding / comparing some values. I still learned something during the second task: When comparing a sliding window of data (at least in this simple case), you only need to compare the first and the last value, because the middle values are affecting both window-values the same way and thus can be ignored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;12
24    24
53    53
      13&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, you can sum up 12+24+53 and compare that with the sum of 24+53+13, but you can just as well ignore 24+53 and just compare 12 and 13.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/01_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/01_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/2"&gt;Day 2&lt;/a&gt; - Dive!&lt;/h4&gt;

&lt;p&gt;Still simple, a little bit of parsing and the rest was again just adding up numbers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/02_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/02_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/3"&gt;Day3&lt;/a&gt; - Binary Diagnostic&lt;/h4&gt;

&lt;p&gt;I had some troubles remembering how to convert a binary sting (&lt;code&gt;1001101&lt;/code&gt;) to an int. I first used the rather ugly &lt;code&gt;my $bits='110101'; my $int = eval '0b'.$bits&lt;/code&gt;, and only "remembered" about &lt;code&gt;oct()&lt;/code&gt; after reading it in some other solutions. But I used unicode var names &lt;code&gt;$γ, $ε&lt;/code&gt; :-)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/03_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/03_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/4"&gt;Day 4&lt;/a&gt; - Giant Squid aka Bingo&lt;/h4&gt;

&lt;p&gt;I again forgot something I already learned in a previous Advent: If the input contains blocks separated by blank lines, it's much easier to just split the input on two newlines instead of remembering state and starting new blocks if there is an empty line...&lt;/p&gt;

&lt;p&gt;I convert the horizontal rows and vertical cols into lines, so each bingo card has 10 lines. Each line is a Hash where key and value are the number (i.e. 42 =&amp;gt; 42) because I thought that in part 2 we might need to do something with the checked values (with turned out to not be the case, ah, well..)&lt;/p&gt;

&lt;p&gt;When a number is drawn, go through all the boards and all the rows, mark the drawn number with a X, and check if a line has 5 Xs (&lt;code&gt;my @checked = grep {/X/} values $line-&amp;gt;%*;&lt;/code&gt;). If it has, we have a winner, so calc the value and report it.&lt;/p&gt;

&lt;p&gt;In theory part 2 only needed to remove the exit, but as I had to remove bingo cards that have already one I had to convert my loop to use an iterator.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/04_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/04_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;a href="https://adventofcode.com/2021/day/4"&gt;Day 5&lt;/a&gt; - Hydrothermal Venture&lt;/h4&gt;

&lt;p&gt;I had a solution for part 1 quite quickly, but it didn't work for the proper data. So I let the code rest for a bit, went for a run, cooked lunch, and later checked a few of the posts on reddit. And indeed I found the needed tip: I was using a plain &lt;code&gt;sort&lt;/code&gt;, which (in Perl) sorts alphanumerically, and not by int value. This was quickly fixed by the spaceship operator: &lt;code&gt;sort { $a &amp;lt;=&amp;gt; $b }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the diagonals in part 2 I wasted a lot of time on just mucking with the coordinates, without success. I knew what I had to do, but was too lazy to properly implement it. So late in the afternoon I took pen &amp;amp; paper, drawed some diagrams, and renamed my vars from &lt;code&gt;$x, $y&lt;/code&gt; to &lt;code&gt;$row, $col&lt;/code&gt;, because I constantly messed up which was which. Also figuring out which direction was which took me an embarrassingly long time...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/05_1.pl"&gt;Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/domm/advent_of_code/blob/main/2021/05_2.pl"&gt;Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Next week..&lt;/h4&gt;

&lt;p&gt;I plan to keep playing (and posting here and on reddit), but let's see what the combination of more complex tasks, work and family will allow :-)&lt;/p&gt;</content>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
  <title>Raku CI Bot Grant Report October and November 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/2021-10-raku-ci-bot-grant-update"/>
  <id>tag:news.perlfoundation.org,2021-12-05:/post/2021-10-raku-ci-bot-grant-update</id>
  <published>2021-12-05T14:50:48</published>
  <updated>2021-12-05T14:50:48</updated>
  <summary>
  <![CDATA[
     Patrick Böker submitted his report for the Raku CI Bot grant, for the months of October and November: In October and November most of my time was spent on finding and fixing bugs. Several problems I encountered are bugs in third party systems. Some of those I tackled, some remain as bug reports. Reported and fixed bugs: Red: Boolean checking DateTime columns fails when using Pg #530 Red: Checking multiple 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Patrick Böker submitted his report for the Raku CI Bot grant, for the months of October and November:</p>

<hr />

<p>In October and November most of my time was spent on finding and fixing bugs.</p>

<p>Several problems I encountered are bugs in third party systems. Some of those I tackled, some remain as bug reports.</p>

<p>Reported and fixed bugs:</p>

<ul>
<li>Red: Boolean checking DateTime columns fails when using Pg <a href="https://github.com/FCO/Red/issues/530">#530</a> (Fix: FCO)</li>
<li>Red: Checking multiple existance checks results in empty WHEN clause [#531]
(https://github.com/FCO/Red/issues/531) (Fix: FCO)</li>
<li>Red: Type constraints in models are ignored on assignment [#513](https://
github.com/FCO/Red/issues/513) (Fix: FCO)</li>
<li>Red: Forbid .^create on non-type-objects <a href="https://github.com/FCO/Red/issues/488">#488</a> (Fix: FCO)</li>
<li>Red: Enums are not supported <a href="https://github.com/FCO/Red/issues/487">#487</a> (Fix: FCO)</li>
<li>Red: MVM_str_hash_lvalue_fetch_nocheck called concurrently on the same hash in Red::Model <a href="https://github.com/FCO/Red/issues/529">#529</a> (Fix: me)</li>
<li>Red: Remove duplicate operator <a href="https://github.com/FCO/Red/pull/535">#535</a> (Fix: me)</li>
<li>Cro::HTTP: Do not send the ENO_OF_STREAM flag twice [#160](https://
github.com/croservices/cro-http/pull/160) (Fix: me)</li>
</ul>

<p>Still unresolved bugs:</p>

<ul>
<li>MoarVM: NativeCall error <a href="https://github.com/MoarVM/MoarVM/issues/1614">#1614</a> (Severity: Medium)</li>
<li>Rakudo: Type check failed in binding to parameter for a named param that has not been passed <a href="https://github.com/rakudo/rakudo/issues/4647">#4647</a> (Severiy: Low, PR: Kaiepi)</li>
<li>Red: Unknown columns in query in concurrent setting <a href="https://github.com/FCO/Red/issues/537">#537</a> (Severity: High)</li>
<li>Red: Enum on Pg: invalid input syntax for type integer: \"a\" <a href="https://github.com/FCO/Red/issues/527">#527</a> (Severity: High)</li>
<li>Red: SELECTing enums generates broken WHERE in most cases <a href="https://github.com/FCO/Red/issues/495">#495</a> (Severity: Low, workaround available)</li>
<li>Red: LTA error with missing use Red:api&lt;2&gt; [#490](https://github.com/FCO/
Red/issues/490) (Severity: Low, only a feature request)</li>
<li>Cro::HTTP: Implement support for sslkeylogfile [#162](https://github.com/
croservices/cro-http/pull/162) (Severity: Low, feature request, PR: me (also 
[1](https://github.com/jnthn/p6-io-  +socket-async-ssl/pull/64))</li>
<li>Cro::HTTP: Implement remote window handling [#161](https://github.com/
croservices/cro-http/pull/161) (Severity: High, PR: me)</li>
<li>Test::Mock: List calls when with matching failed [#18](https://github.com/
jnthn/test-mock/pull/18) (Severity: Low, feature request, PR: me)</li>
</ul>

<p>The above list might lead to the impression that Red is bug ridden / unusable. 
It is important to understand, that Red is officially still alpha software, so 
bugs are expected. I also can't emphasize enough how quickly the Red
developers, especially FCO the lead dev, responded and tackled the problems I reported.</p>

<p>I do hope that instead of evading bugs in third party software by utilizing 
workarounds or switching the library, but instead golfing, reporting and fixing bugs, the quality of our software ecosystem will improve and future users will be able to enjoy a more reliable ecosystem.</p>

<p>In the CI bot I did the following:</p>

<ul>
<li>Added an integration test to test the entire lifecycle of a PR</li>
<li>Implement App Authorization in the GitHub API lib</li>
<li>Implement a minimal GraphQL API in the GitHub API lib</li>
<li>Implement a configuration system to allow easy setup of a development environment</li>
<li>Write a first draft of a guide on how to set up a development environment</li>
<li>Rename RakuCIBot to RakudoCIBot, as the functionality is tailored to the 
Rakudo stack and won't be of any use to other Raku implementations. The repository has moved respectively to https://github.com/Raku/RakudoCIBot. It might make sense to move it into the <code>rakudo</code> org, but that's a separate step.</li>
<li>Introduce a logging framework and add some logging</li>
</ul>

<p>As it stands now, when using the SQLite database driver and ignoring some 
instability caused by some of the still unresolved bugs listed above, RCB now successfully polls GitHub for new PRs, starts a test run on the OBS 
backend, reads out the test results and persists them. Reporting back to 
GitHub is not yet working reliably.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Merging multiple git repos with their commit history</title>
    <link href="http://domm.plix.at/perl/2021_12_git_merge_repos_with_history.html"/>
    <id>http://domm.plix.at/perl/2021_12_git_merge_repos_with_history.html</id>
    <updated>2021-12-01T12:14:41+00:00</updated>
    <category term="perl"/>
    <summary type="html">Advent of Code has started again and I'm again publishing my solutions to github (and probably also here). In the last two years I created on git repo for each year, but this year I changed my mind ...</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://adventofcode.com/2021"&gt;Advent of Code&lt;/a&gt; has started again and I'm again publishing my solutions to github (and probably also here). In the last two years I created on git repo for each year, but this year I changed my mind and want to have on repo containing a dir for each year.&lt;/p&gt;

&lt;p&gt;Now I could just copy all the files into the &lt;a href="https://github.com/domm/advent_of_code"&gt;new repo&lt;/a&gt;, but that would lose the commit history. Which is unacceptable!&lt;/p&gt;

&lt;h4&gt;The status quo ante&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
├── advent2019
│   ├── 01_1.pl
│   └── 01_2.pl
└── advent2020
    ├── 01_1.pl
    └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;What I want&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent_of_code
    ├── 2019
    │   ├── 01_1.pl
    │   └── 01_2.pl
    └── 2020
        ├── 01_1.pl
        └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know that git allows you to rewrite history and have once munged a repo using &lt;code&gt;git filter-branch&lt;/code&gt; (to completely delete some files and commits). I of course forgot the details, but after a little bit of searching and trial and error I got it working!&lt;/p&gt;

&lt;h4&gt;First, prepare the old repo&lt;/h4&gt;

&lt;p&gt;To prevent merge conflicts later, I first move the code in the old repo from the root dir into a new dir, eg &lt;code&gt;2019&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent2019
    ├── 01_1.pl
    └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
└─── advent2019
    └─── 2019
        ├── 01_1.pl
        └── 01_2.pl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found &lt;a href="https://gist.github.com/fabiomaggio/ce7ecd7dffd27b32a45325204288efce"&gt;this gist&lt;/a&gt; very helpful, and adapted it to my needs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd advent2019
mkdir 2019
git filter-branch --tree-filter 'mkdir -p /tmp/ad; mv * /tmp/ad; mkdir 2019; mv /tmp/ad/* 2019/' --tag-name-filter cat --prune-empty -- --all&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This uses &lt;code&gt;git filter-branch&lt;/code&gt; to move the old code to a temp dir (&lt;code&gt;mv * /tmp/ad&lt;/code&gt;) and then move it back to the new location (&lt;code&gt;mv /tmp/ad/* 2019/&lt;/code&gt;), using some git magic to keep the history.&lt;/p&gt;

&lt;p&gt;While I was at it, I also removed some of the AdventOfCode input files which I had commited (but which we should not commit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git filter-branch -f --tree-filter 'rm -f 2019/*.data' HEAD&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Second, import the repo&lt;/h4&gt;

&lt;p&gt;Now I can merge the old repo into my new unified repo. This time this &lt;a href="https://stackoverflow.com/a/6004865"&gt;StackOverflow comment&lt;/a&gt; pointed me in the right direction. The basic idea is to add the old repo as a new remote, fetch the commits, and then merge them using &lt;code&gt;--allow-unrelated-histories&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd advent_of_code
git remote add old19 ../advent2019/
git fetch old19
git merge --allow-unrelated-histories old19/master
git remote remove old19&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then push, and we're done and have a nice unified repo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/advent_of_code$ tree
.
├── 2019
│   ├── 01_1.pl
│   ├── 01_2.pl
├── 2020
│   ├── 01_1.pl
│   ├── 01_2.pl
│   ├── 01_2_golf.pl
├── 2021
│   ├── 01_1.pl
│   ├── 01_1_golf.pl
│   └── 01_2.pl
└── README.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the history was preserved:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/perl/advent_of_code$ git log 2019/24_1.pl
commit dbaf0bc1df645bda61ec5cf7e623d478a179947e
Author: Thomas Klausner &amp;lt;domm@plix.at&amp;gt;
Date:   Fri Dec 27 10:10:10 2019 +0100

    no need to keep a map around, the rating is unique per map&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Win!&lt;/p&gt;

&lt;p&gt;Next steps: Fix all links pointing to the old repos to point to the new location, and maybe archive / delete the github repos (and/or have them redirect to the new unified repo)&lt;/p&gt;</content>
    <category term="git"/>
    <category term="AdventOfCode"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Nov 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/12/01/list-of-new-cpan-distributions-nov-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>first_version</th>
<th>latest_version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/API-Mathpix">API-Mathpix</a></td>
<td><a href="https://metacpan.org/author/ERIAM">ERIAM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Use the API of Mathpix</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-CPANModulesBundle-Import-DAVECROSS">Acme-CPANModulesBundle-Import-DAVECROSS</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Acme::CPANModules::* created from DAVECROSS's posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Acme-MarkdownTest">Acme-MarkdownTest</a></td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>0.01</td>
<td>0.02</td>
<td>test module to see how markdown is handled</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Meson">Alien-Meson</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Find or build meson build tool</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-Ninja">Alien-Ninja</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Find or build Ninja build tool</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-SWIProlog">Alien-SWIProlog</a></td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Alien package for the SWI-Prolog Prolog interpreter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Alien-libgpiod">Alien-libgpiod</a></td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>v0.1</td>
<td>v0.1</td>
<td>Find or build libgpiod (Linux GPIO character device library)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AltaPay_Try">AltaPay_Try</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>v1.0.1</td>
<td>1.0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-CPANChangesUtils">App-CPANChangesUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.074</td>
<td>0.074</td>
<td>Parse CPAN Changes file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-Images-To-DjVu">App-Images-To-DjVu</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Base class and script for composing DjVu files from images.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-URIInfoUtils">App-URIInfoUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Utilities related to URI::Info</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-ansiexpand">App-ansiexpand</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.99</td>
<td>0.9901</td>
<td>ANSI sequence aware tab expand/unexpand command</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-geoCancerDiagnosticDatasetsRetriever">App-geoCancerDiagnosticDatasetsRetriever</a></td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
<td>1</td>
<td>GEO Cancer Diagnostic Datasets Retriever is a bioinformatics tool for cancer diagnostic dataset retrieval from the GEO website.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-renlikewd">App-renlikewd</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>REName a file so it becomes LIKE the current (Working) Directory's name</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-timeput">App-timeput</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.078</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/App-tjoin">App-tjoin</a></td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>0.060</td>
<td>0.061</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-BinarySearch">Bencher-Scenario-BinarySearch</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Benchmark binary searching</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenario-BinarySearch-File">Bencher-Scenario-BinarySearch-File</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Benchmark binary searching sorted lines from a file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Bencher-Scenarios-URI-Info">Bencher-Scenarios-URI-Info</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Scenarios to benchmark URI::Info</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Commons-Link">Commons-Link</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.05</td>
<td>TODO.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cookie">Cookie</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.1</td>
<td>v0.1.5</td>
<td>Cookie Object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Cookies">Cookies</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Cookies API for Server &amp; Client</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-DBFlow">DBIx-DBFlow</a></td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Database development helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-DBFlow-Runtime">DBIx-DBFlow-Runtime</a></td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>0.03</td>
<td>0.03</td>
<td>Runtime utilities for DBIx::DBFlow</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBIx-Spreadsheet">DBIx-Spreadsheet</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>0.02</td>
<td>Query a spreadsheet with SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dancer2-Plugin-ControllerAutoload">Dancer2-Plugin-ControllerAutoload</a></td>
<td><a href="https://metacpan.org/author/GILS">GILS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Autoload controllers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-Sah-DefaultValue">Data-Sah-DefaultValue</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Default-value rules for Data::Sah</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Data-TableData-Rank">Data-TableData-Rank</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Add a rank column to a table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Device-Chip-Adapter-Gpiod">Device-Chip-Adapter-Gpiod</a></td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Device::Chip::Adapter implementation for Linux GPIO character devices</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Dyn">Dyn</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.01</td>
<td>0.02</td>
<td>dyncall Backed FFI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Find-Rule-DjVu">File-Find-Rule-DjVu</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Common rules for searching DjVu files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Syslogger">File-Syslogger</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>v0.0.2</td>
<td>Use POE to tail a file and read new lines into syslog.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/File-Temp-VarOptions">File-Temp-VarOptions</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.001</td>
<td>Like File::Temp, but allowing to set options with variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Future-Workflow">Future-Workflow</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>asynchronous workflow management using futures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GitHubDDL">GitHubDDL</a></td>
<td><a href="https://metacpan.org/author/MACOPY">MACOPY</a></td>
<td>0.01</td>
<td>0.01</td>
<td>GitDDL compatibility database migration utility when  hosted on GitHub</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Hash-Util-Exists-Tiny">Hash-Util-Exists-Tiny</a></td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>0.01</td>
<td>0.04</td>
<td>Some hash helper functions related to perl's exists function.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HealthCheck-Diagnostic-RemoteHealth">HealthCheck-Diagnostic-RemoteHealth</a></td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>Get results from an HTTP HealthCheck</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/IURL-XS">IURL-XS</a></td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>v0.1.0</td>
<td>v0.1.0</td>
<td>parsing URLs with zero-copy and no mallocs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Iterator-Breathe">Iterator-Breathe</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0201</td>
<td>Iterate a counter up and back</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JSON-Schema-Modern-Document-OpenAPI">JSON-Schema-Modern-Document-OpenAPI</a></td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>0.001</td>
<td>0.005</td>
<td>One JSON Schema document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Math-Ryu">Math-Ryu</a></td>
<td><a href="https://metacpan.org/author/SISYPHUS">SISYPHUS</a></td>
<td>0.01</td>
<td>0.02</td>
<td>perl interface to the ryu C library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Module-Features-Set">Module-Features-Set</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.003</td>
<td>Features of modules that generate text tables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MojoX-HTTP-Async">MojoX-HTTP-Async</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>0.08</td>
<td>simple package to execute multiple parallel requests to the same host</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Mojolicious-Plugin-YamlRoutes">Mojolicious-Plugin-YamlRoutes</a></td>
<td><a href="https://metacpan.org/author/HDELGADO">HDELGADO</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Generates routes from a yaml file</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Net-RFC3161-Timestamp">Net-RFC3161-Timestamp</a></td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Utility functions to request RFC3161 timestamps</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSDK">PERLSDK</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>v1.0.1</td>
<td>v1.0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PensioAPI">PensioAPI</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>1.0.1</td>
<td>1.0.1</td>
<td>Integrate AltaPay gateway with Perl projects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Pensio">Pensio</a></td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>1.0.1</td>
<td>1.0.1</td>
<td>Integrate AltaPay gateway with Perl projects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RT-Extension-ReplyWithMail">RT-Extension-ReplyWithMail</a></td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>0.01</td>
<td>0.01</td>
<td>RT-Extension-ReplyWithMail Extension</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Iterator">RoleBundle-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.004</td>
<td>0.004</td>
<td>Iterator roles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RoleBundle-TinyCommons-Tree">RoleBundle-TinyCommons-Tree</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.129</td>
<td>0.129</td>
<td>Roles related to object tree</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SelectPdf">SelectPdf</a></td>
<td><a href="https://metacpan.org/author/SELECTPDF">SELECTPDF</a></td>
<td>v1.2.0</td>
<td>v1.4.0</td>
<td>Get the result of an asynchronous call.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Task-Kramerius">Task-Kramerius</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>0.01</td>
<td>Install modules for Kramerius system.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Expander">Test-Expander</a></td>
<td><a href="https://metacpan.org/author/JSF">JSF</a></td>
<td>v1.0.0</td>
<td>v1.0.5</td>
<td>Expansion of test functionalities that appear to be frequently used while testing.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Test-Mock-Object">Test-Mock-Object</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.1</td>
<td>0.1</td>
<td>Dead-simple mocking</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/Tree-RB-XS">Tree-RB-XS</a></td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>0.00_01</td>
<td>0.05</td>
<td>Red/Black Tree object withthe compatible API to Tree::RB</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-Info">URI-Info</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>0.002</td>
<td>Extract various information from a URI (URL)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/URI-Router">URI-Router</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>v0.1.3</td>
<td>highest performance powerful URI router (URI path to value lookup) for HTTP frameworks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WWW-KeePassHttp">WWW-KeePassHttp</a></td>
<td><a href="https://metacpan.org/author/PETERCJ">PETERCJ</a></td>
<td>0.010</td>
<td>0.020</td>
<td>Interface with KeePass PasswordSafe through the KeePassHttp plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-WsScreenshot">WebService-WsScreenshot</a></td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>0.001</td>
<td>0.001</td>
<td>API client For ws-screenshot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WebService-YTSearch">WebService-YTSearch</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>0.0302</td>
<td>Search YouTube</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/require-relative">require-relative</a></td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1.0.0</td>
<td>1.0.0</td>
<td>like require for relative paths</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>62</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>36</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>14</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/MAFEMBRAC">MAFEMBRAC</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/ZMUGHAL">ZMUGHAL</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/TULAMILI">TULAMILI</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/JLMARTIN">JLMARTIN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/SACAVILIA">SACAVILIA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AVERKIOS">AVERKIOS</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/SYMKAT">SYMKAT</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/GSG">GSG</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/GILS">GILS</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/ETHER">ETHER</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/MACOPY">MACOPY</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/AAHAZRED">AAHAZRED</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/NERDVANA">NERDVANA</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/ERIAM">ERIAM</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/HDELGADO">HDELGADO</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/BARNEY">BARNEY</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/JSF">JSF</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/PETERCJ">PETERCJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/SISYPHUS">SISYPHUS</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/SELECTPDF">SELECTPDF</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/BRDUCH">BRDUCH</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/AKHUETTEL">AKHUETTEL</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NEILB">NEILB</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/AALAMEER">AALAMEER</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Mathpix ERIAM 0.01 0.01 Use the API of Mathpix Acme-CPANModulesBundle-Import-DAVECROSS PERLANCAR 0.001 0.001 Acme::CPANModules::* created from DAVECROSS's posts Acme-MarkdownTest NEILB 0.01 0.02 test module to see how markdown is handled Alien-Meson ZMUGHAL 0.01 0.01 Find or build meson build tool Alien-Ninja ZMUGHAL 0.01 0.02 Find or build Ninja build tool … <a href="https://perlancar.wordpress.com/2021/12/01/list-of-new-cpan-distributions-nov-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Nov 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>https://perlancar.wordpress.com/?p=1957</id>
    <published>2021-12-01T00:31:10Z</published>
    <updated>2021-12-01T00:31:10Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
</feed>
