<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-02-04T17:50:58Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>I found the truth about GameStop, Qanon, the Biden adminstration, and the British Royal Family</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2021/02/i-found-the-truth-about-gamestop-qanon-the-biden-adminstration-and-the-british-royal-family.html"/>
    <id>tag:blogs.perl.org,2021:/users/ben_bullock//392.10071</id>
    <published>2021-02-01T13:53:59Z</published>
    <updated>2021-02-04T09:12:25Z</updated>
    <author>
        <name>Ben Bullock</name>
        <uri>https://www.lemoda.net/</uri>
    </author>
    <category term="randomconspiracytheorygenerator" label="random conspiracy theory generator" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/ben_bullock/">
        <![CDATA[<blockquote>
The British Royal Family and GameStop have been in a secret war with each other for hundreds of years. Nobody knows why. GameStop has included it in their manifesto and the Royals is always untrustworthy. They leave clues to mock us! GAMESTOP HAS INCLUDED IT IN THEIR MANIFESTO! MOCK! MOCK!
</blockquote>

<p>There is more:</p>

<blockquote>
Q found out that reincarnation is true and he has been imprisoned in The Pentagon. Qanon are protecting this secret. The Biden administration knows the truth but Qanon have paid them off with a warehouse full of holy water. The Wikipedia entry for The Pentagon keeps getting edited by the Biden administration and Qanon even admit it. They leave clues to mock us.
</blockquote>

<p>You too can find out the truth about what's REALLY going on <a href="https://metacpan.org/release/Acme-ConspiracyTheory-Random">here</a> or <a href="https://www.lemoda.net/games/consp/">here</a></p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Sicherheit für Perl-Anwendungen: fail2ban</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-02-03-perl-anwendungen-fail2ban" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Ist eine Webanwendung öffentlich erreichbar, wird es nicht lange dauern und irgendwelche Bots versuchen sich anzumelden. Oder es werden wild irgendwelche URLs aufgerufen. Auch wenn die Anmeldeversuche wahrscheinlich scheitern, geht die Bot-Aktivität zu Lasten der Webanwendung. Und mit genügend versuchen klappt es vielleicht doch mal, dass sich jemand Unbefugtes anmeldet.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-02-03-perl-anwendungen-fail2ban</id>
    <published>2021-02-03T10:00:00Z</published>
    <updated>2021-02-03T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 98</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/02/perl-weekly-challenge-98.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10073</id>
    <published>2021-02-02T19:47:38Z</published>
    <updated>2021-02-02T20:24:17Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <category term="pwc" label="PWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-098/james-smith/perl">Github</a></p>

<h3>Challenge 1</h3>

<p>You are given file <tt>$FILE</tt>.</p>

<p>Create subroutine <tt>readN($FILE, $number)</tt> returns the first <em>n</em>-characters and moves the pointer to the (<em>n</em>+1)th character.</p>

<h4>Solution</h4>

<p>Rather than turning this into an object which was the first idea - I decided to keep the code clean by making it a function call, and to also make it work with multiple file handles open simultaneously. </p>

<p>To achieve this without an object - we will need to use a global hash to contain the opened file handles - so that when we re-call the function we don't re-open the file.</p>

<p><em>Aside - note if we were only reading these files once in a while - an alternative approach would be to keep an array of file-positions rather than file-handles, and then at each invocation - re-open the file - seek to the location and return the bytes before closing it again - this would cut down the resources associated with the script.</em></p>

<p>We could use a <tt>state</tt> variable declaration here {but that would mean that we couldn't add extra code to be able to clean up data later}.</p>

<p>In our function we use one of the "lower-level" file functions, read, which reads a given number of bytes into a scalar variable - note it has to be initialised before the function call.</p>

<p>If read returns "false" then that means that there was no content in the file at that point.</p>

<pre><code>
sub readN {
  my( $fn, $bytes ) = @_;

<p>  ## Create a file handle if we don't already have one<br />
  unless( exists $handles{$fn} ) {<br />
    open $handles{$fn}, '<', $fn;<br />
  }</p>

<p>  ## Create a buffer for the return value<br />
  my $t = '';</p>

<p>  ## Use "read" to read the $bytes bytes - these are put into 2nd parameter<br />
  ## If read returns undef it means it has reached the end of the file...<br />
  warn "Reached end of file $fn\n" unless read ${$handles{$fn}}, $t, $bytes;</p>

<p>  ## Return string<br />
  return $t;<br />
}<br />
</code></pre></p>

<p>The additional cleanup code is used to forcibly close the file handles before the end of the script - this is why we could not rely on using <strong>state</strong> variables.</p>

<pre><code>
sub cleanup {
  ## For neatness close all handles
  ## delete returns the value of the has deleted
  ## if filenames are passed then only those are cleaned up
  close delete $handles{$_} foreach @_ ? grep { exists $handles{$_} } @_ : keys %handles;
}

<p>sub show_open {<br />
  ## Return a list of open filenames<br />
  return keys %handles;<br />
}<br />
</code></pre></p>

<h3>Challenge 2</h3>

<p>You are given a sorted array of distinct integers <tt>@N</tt> and a target <tt>$N</tt>.</p>

<p>Write a script to return the index of the given target if found otherwise place the target in the sorted array and return the index.</p>

<h4>Solution</h4>

<p>This is a much simpler problem than the previous one - we have to find the index of the number (or where to insert it)</p>

<p>Once we know where that is we check to see if we need to insert or not (using the 4 parameter version of <tt>splice</tt>) and to return the value.</p>

<pre><code>
sub insert_pos {
  my( $t, $l, $val ) = (0,@_);

<p>  ## Repeat unless we have got to end of list or the new entry is greater than val<br />
  $t++ while $t < @{$l} && $l->[$t] < $val;</p>

<p>  ## If we are after the end of the list (to avoid warning) OR<br />
  ## If we haven't found the entry then we use splice to insert it<br />
  splice @{$l},$t,0,$val if $t == @{$l} || $l->[$t] != $val;</p>

<p>    ## Warn to show splice has worked...<br />
    warn ">> $t ( @{$l} )\n"; ## Demonstrate splice</p>

<p>  ## Return the index of the number!<br />
  return $t;<br />
}<br />
</code></pre></p>

<p>If we aren't interested in doing the actual insert into the list then we can avoid the splice and so the code reduces to this.</p>

<pre><code>
sub insert_pos {
  my( $t, $l, $val ) = (0,@_);
  $t++ while $t < @{$l} && $l->[$t] < $val;
  return $t;
}
</code></pre>

<p>You could easily run this code with simpler function...</p>

<pre><code>
sub insert_pos {
  my( $l, $val ) = @_;
  return scalar grep { $_ < $val } @{$l};
}
</code></pre>

<p>But using our own loop is "optimal" if the number being inserted is near the start of the list - as the numbers increase numerically then we only need to check up to (or as far) as the number itself rather than the whole list. {you could use firstidx from List::MoreUtils}</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Monthly Report - January</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/02/monthly-report---january-2.html"/>
    <id>tag:blogs.perl.org,2021:/users/mohammad_s_anwar//990.10072</id>
    <published>2021-02-02T10:52:29Z</published>
    <updated>2021-02-02T19:33:33Z</updated>
    <author>
        <name>Mohammad S Anwar</name>
        <uri>http://www.manwar.org/</uri>
    </author>
    <category term="perlmothlyreport" label="perl mothly report" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/mohammad_s_anwar/">
        <![CDATA[<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/header-2021-01.jpg"/></p>

<p><strong>Let's look at the brighter side ...</strong></p>

<p>Did you have chance to read my <a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html">annual report</a>?</p>

<p>I have been doing monthly report for many years now. </p>

<p><strong>Why? What is the point?</strong></p>

<p>Well, let me answer the first question, <strong>Why?</strong> To be honest with you, I do it to keep myself motivated. I need some kind of (self) motivation to carry on what I do on a daily basis. Now to answer the second question, <strong>What is the point?</strong> It helps me to keep track and follow the progress.</p>

<p>Above all, it gives me immense pleasure when I see <strong>Perl</strong> being discussed in a positive lights. As you all know, I am running <a href="https://perlweeklychallenge.org/">The Weekly Challenge - Perl & Raku</a> for nearly <strong>2 years</strong> now. To be precise, on <strong>25th March, 2021</strong>, we would celebrate our second anniversary. There is something else that is keeping me busy right now. Any guesses? In two weeks time, we would complete <strong>100th</strong> week of the weekly challenge. It is no small feat by any means. I never thought in my dreams that we woud come this far. Thanks to each and every members of <strong>Team PWC</strong>. I literally mean each and everyone. </p>

<p><strong>Is there anything new in the year 2021?</strong></p>

<p>The short answer is "<strong>Yes</strong>".</p>

<p>The new project <a href="https://github.com/manwar/design-patterns">Design Patterns using Modern Perl</a> is my new love interest. In fact, I was supposed to do this during the <strong>Christmas</strong> break last year but I couldn't do it because I was too busy working with <a href="https://perlweeklychallenge.org/blog/advent-calendar-2020/">Advent Calendar 2020</a>. I have received many encouraging messages so far for my new love. </p>

<p>One of my favourite <strong>CPAN</strong> module <a href="https://github.com/manwar/Map-Tube">Map::Tube</a>, released in <strong>Oct, 2010</strong>, recieved <strong>5 stars</strong> in <strong>GitHub</strong> and <strong>5 PAUSE</strong> users marked it favourites on <a href="https://metacpan.org/release/Map-Tube">MetaCPAN</a> as of today.</p>

<p>To beat one of my own work, in just fews days, <a href="https://github.com/manwar/design-patterns">Design Patterns using Modern Perl</a> already became <strong>#1</strong> with <strong>12 stars</strong> as of today.It is not finished yet as there are plenty more to be done. This is how my <strong>GitHub</strong> dashboard looks like:</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-dashboard.png"/></p>

<p><strong>Is everything going as per the plan?</strong></p>

<p>No, there are couple of side projects currently on hold for many reasons. Apology to <strong>brian d foy</strong> and <strong>Gabor Szabo</strong> for the delay. I will be back soon, promise, a gentleman promise. I don't want to embarass myself giving further details.</p>

<p>Last but not least, I would like to thank <strong>Kivanc Yazan</strong>, for the kind words in the <a href="https://kyzn.org/posts/prc-2020-report/">Pull Request Club 2020 Report</a>.</p>

<p>Let's take a quick look through last month main activities.</p>

<ul>
<li><a href="#a">Pull Request</a></li>
<li><a href="#b">Git Commits</a></li>
<li><a href="#c">The Weekly Challenge</a></li>
<li><a href="#d">YouTube Channel</a></li>
<li><a href="#e">Meet The Champion</a></li>
<li><a href="#f">Pull Request Club</a></li>
<li><a href="#g">Perl Blog</a></li>
<li><a href="#h">Perl Weekly Newsletter</a></li>
<li><a href="#i">Patreon</a></li>
</ul>

<hr id="a"/>
<h2>Pull Request</h2>

<p><strong>4 Pull Requests</strong> submitted in the month of <strong>January 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-2021-01.png"/></p>

<p><strong>2351 Pull Requests</strong> altogether.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-pr-summary-2021-01.png"/></p>

<hr id="b"/>
<h2>Git Commits</h2>

<p><strong>1031 commits</strong> recorded in the month of <strong>January 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-2021-01.png"/></p>

<p>Overall <strong>1031 commits</strong> recorded in the <strong>year 2021</strong>.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/github-commits-summary-2021-01.png"/></p>

<hr id="c"/>
<h2>The Weekly Challenge</h2>

<p>Following weekly challenges proposed in the month of <strong>January 2021</strong>:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-094">Challenge #094</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-095">Challenge #095</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-096">Challenge #096</a></li>
<li><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097">Challenge #097</a></li>
</ul>

<p>And RECAPS are listed as below:</p>

<ul>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-093">RECAP Challenge #093</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-094">RECAP Challenge #094</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-095">RECAP Challenge #095</a></li>
<li><a href="https://perlweeklychallenge.org/blog/recap-challenge-096">RECAP Challenge #096</a></li>
</ul>

<hr id="d"/>
<h2>YouTube Channel</h2>

<p>There are plenty of vides available on my <a href="https://www.youtube.com/c/mohammadsajidanwar">YouTube Channel</a>. If you like the video then please do subscribe to my channel so that you don't miss the weekly fun live coding videos.</p>

<p>No new video created last month, sorry :-(</p>

<hr id="e"/>
<h2>Meet The Champion</h2>

<p>Last month, we declared <a href="https://perlweeklychallenge.org/blog/meet-the-champion-2020-12">Niels van Dijke</a> as the Champion of <strong>The Weekly Challenge</strong>.</p>

<p>If you are interested in past champions interview then you can find it all <a href="https://perlweeklychallenge.org/champions">here</a>.</p>

<hr id="f"/>
<h2>Pull Request Club</h2>

<p>Last month, I received <a href="https://metacpan.org/release/Rex-Hook-File-Impostor">Rex::Hook::File::Impostor</a> by Ferenc Erki. I submitted <a href="https://github.com/ferki/Rex-Hook-File-Impostor/pull/4">one</a> Pull Request.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/pr-club-2021-01.png"/></p>

<hr id="g"/>
<h2>Perl Blog</h2>

<p>Last month, I blogged about the following topics. </p>

<ul>
<li><a href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html">Annual Report - 2020</a></li>
</ul>

<hr id="h"/>
<h2>Perl Weekly Newsletter</h2>

<p>Last month, I edited two editions of <strong>The Perl Weekly Newsletter</strong> i.e. <a href="http://perlweekly.com/archive/494.html">Issue #494</a> and <a href="http://perlweekly.com/archive/496.html">Issue #496</a>. With this, I have now edited <strong>70 editions</strong> of Perl Weekly newsletter.</p>

<hr id="i"/>
<h2>Patreon</h2>

<p>At the end of last month, <strong>January 2021</strong>, the following people / organisation supported me in the past or continued supporting me even today. I am humbled by thier generosity.</p>

<p><img src="http://blogs.perl.org/users/mohammad_s_anwar/patreon-2021-01.png"/></p>

<p><strong>Do you want to sponsor my work?</strong> </p>

<p>Please follow the <a href="https://www.patreon.com/manwar">Patreon</a> page. </p>

<p><strong>Thank You</strong>.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Release 1.51 of perl-workflow</title>
    <link rel="alternate" href="https://dev.to/jonasbn/perl-workflow-release-1-51-4ieo" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Yet another <a href="http://jonasbn.github.io/perl-workflow/">perl-workflow</a> has been uploaded to CPAN.</p>

<p>The change log is included in this post, but I just want to highlight a few things from this release.</p>

<p>The most important change was the fixing of a very old <a href="https://en.wikipedia.org/wiki/Heisenbug"><em>heisenbug</em></a>. The bug was finally located by Erik Huelsmann and was not even in Workflow but in the dependency <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a>.</p>

<p><a href="https://github.com/ap/Class-Observable/issues/1">An issue</a> has been raised for <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a>.</p>

<p>However we have implemented a new handling observability, so <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a> has been factored out and is no longer a dependency of the Worflow distribution.</p>

<p>The issue was the implementation of <a href="https://metacpan.org/pod/Class::Observable">Class::Observable</a>, using <em>stringified</em> versions of data structures, which would become addresses and this not being properly cleaned up. Perhaps a Perl::Critic policy should be created to warn about this - it might however be hard to spot if cleanup is in place, the use of adresses for keys should however be doable quite easily, but that is completely different discussion.</p>

<p>Another significant change is to the actual change log. Inpired by <a href="https://metacpan.org/pod/Nmap::Parser">Nmap::Parser</a> the change log (<code>Changes</code>) has changed format for plain text to Markdown. This is so much more readable and handling links and code snippets etc. is so much simpler (and prettier).</p>

<p>With a history spanning 43 release and 17 years of development, there might be a few additional things that need to be <em>marked down</em>, but in general it looks very good and in renders nicely on GitHub and <a href="https://metacpan.org/source/JONASBN/Workflow-1.51/Changes.md">MetaCPAN</a></p>

<p>This release is headlined like this:</p>

<blockquote>
<p>1.51 2021-01-31 Bug fix release, update recommended</p>
</blockquote>

<p>And as you can see we aim to adhere to the release documentation I have outlined and recommended in an earlier post: <a href="https://dev.to/jonasbn/why-and-how-should-you-write-a-good-change-log-4kp0">"Blog post: Why and How Should You Write a Good Change Log "</a> here on <strong>dev.to</strong>.</p>

<p>This does however mean that we have a minor regression on MetaCPAN, where a preview of the latest release is no longer rendered.</p>

<p>This is believed to be due to that MetaCPAN only can handle this for change logs adhering to the <a href="https://metacpan.org/release/CPAN-Changes">CPAN::Changes</a> <a href="https://metacpan.org/pod/distribution/CPAN-Changes/lib/CPAN/Changes/Spec.pod">specification</a>, which also provides the addition ability to test your change log via <a href="https://metacpan.org/pod/Test::CPAN::Changes">Test::CPAN::Changes</a> - all great and very nice, but we really like Markdown.</p>

<p>This is however a minor regression that we can live with, since it does not influence the Workflow distribution directly. My proposed changelog format does not conflict directly with the <a href="https://metacpan.org/pod/distribution/CPAN-Changes/lib/CPAN/Changes/Spec.pod">CPAN::Changes specification</a>, the specification does not support the benefits I suggest either, so perhaps it is better to make a new tester for my proposed format and perhaps even look into getting Markdown more generally supported on MetaCPAN eliminating our little regression.</p>

<h2>
  <a href="#change-log-for-perlworkflow-151" class="anchor">
  </a>
  Change log for perl-workflow 1.51
</h2>

<ul>
<li><p>Addressed bug/issue <a href="https://github.com/jonasbn/perl-workflow/issues/10">#10</a> of failing observers test, ref PR <a href="https://github.com/jonasbn/perl-workflow/pull/61">#61</a>. Documentation also updated accordingly via PR <a href="https://github.com/jonasbn/perl-workflow/pull/66">#66</a></p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/86">#86</a> reverts fix to issue <a href="https://github.com/jonasbn/perl-workflow/issues/10">#10</a> introduced in release 1.49</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/85">#85</a> addressing bug with use of database fields in persister</p></li>
<li><p>Adressed bug/issue <a href="https://github.com/jonasbn/perl-workflow/issues/72">#72</a> (<em>reopened</em>) and <a href="https://github.com/jonasbn/perl-workflow/issues/73">#73</a> via PR <a href="https://github.com/jonasbn/perl-workflow/pull/74">#74</a></p></li>
<li>
<p>Improved test coverage, addressing issue <a href="https://github.com/jonasbn/perl-workflow/issues/36">#36</a> (<em>not closed</em>), ref PRs:</p>

<ul>
<li><a href="https://github.com/jonasbn/perl-workflow/pull/80">#80</a></li>
<li><a href="https://github.com/jonasbn/perl-workflow/pull/81">#81</a></li>
<li><a href="https://github.com/jonasbn/perl-workflow/pull/91">#91</a></li>
</ul>


</li>
<li><p>Cleaned POD formatting, PR <a href="https://github.com/jonasbn/perl-workflow/pull/83">#83</a></p></li>
<li><p>Removed SVN/CVS legacy tags and adjusted shebang lines, PR <a href="https://github.com/jonasbn/perl-workflow/pull/82">#82</a></p></li>
<li><p>Change log converted from plain text to Markdown, PR <a href="https://github.com/jonasbn/perl-workflow/pull/76">#76</a></p></li>
<li><p>Added missing contributor Mohammad S Anwar to ACKNOWLEDGEMENT section, contribtution was included in release 1.49</p></li>
<li><p><a href="https://github.com/jonasbn/perl-workflow/pull/70">#70</a>, corrections to documentation on persisters</p></li>
<li><p><a href="https://github.com/jonasbn/perl-workflow/pull/71">#71</a> added a missing point to the change log for release 1.50</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/65">#65</a>, converting two older text files to Markdown. Documentation rewrite is being considered and improvements and additions will be made in this area in the future</p></li>
<li><p>PR <a href="https://github.com/jonasbn/perl-workflow/pull/67">#67</a> converting tabs to spaces</p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/perl-workflow-release-1-51-4ieo</id>
    <published>2021-02-02T18:47:46Z</published>
    <updated>2021-02-02T18:47:46Z</updated>
    <category term="opensource"/>
    <category term="perl"/>
    <category term="release"/>
  </entry>
  <entry>
    <title>Create Excel file using Perl from JSON data</title>
    <link rel="alternate" href="https://dev.to/raigaurav/create-excel-file-using-perl-from-json-data-me5" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX"&gt;Excel::Writer::XLSX&lt;/a&gt; is one of the de facto standard for creating excel file in Perl.&lt;br&gt;
The documentation of module contain the ample example of the usage.&lt;br&gt;
I am just adding one more case where you have JSON data and you have to write it in excel.&lt;br&gt;
Before starting, I have to confess something. I hate writing in excel. I never liked creating excel. But it is very popular in business world. I have got several request where people ask data in excel format. One time the request was to create charts in excel. As a technical person who knows little bit of JavaScript and charting library, creating chart in excel is never interest to me.&lt;br&gt;
So, I have created a script for this purpose only.&lt;br&gt;
So lets get started.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-input-data" class="anchor"&gt;
  &lt;/a&gt;
  1. Input data-
&lt;/h2&gt;

&lt;p&gt;The input to this script is a JSON file. It is in a particular format. As it is JSON, it is easy to generate either programmatically or manually. You can generate it from database. If you are using NoSQL it will be piece of cake. Even for SQL generating JSON is very easy.&lt;br&gt;
Let look at the the input JSON file.&lt;br&gt;
For demo purpose I am taking the sample financial data available at &lt;a href="https://docs.microsoft.com/en-us/power-bi/create-reports/sample-financial-download"&gt;Microsoft docs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Financial Info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"01-22-2021"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"04-05-2017"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"07-12-2019"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"19-05-2020"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Segment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Government"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Enterprise"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Channel Partners"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Midmarket"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Country"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Canada"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Germany"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"France"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"India"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Product"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Montana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Paseo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VTT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hero"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Unit Sold"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1618&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;888&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1545&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5693&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Sale Price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;693&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Profit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2457&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3763&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"User Info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Gaurav"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Saurabh"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"Salary"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5673&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3355&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I will walk through the JSON file but before that if you look at the generated excel file things will become clear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ws4OpHAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ir0r6gwid628pjgtj6i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ws4OpHAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ir0r6gwid628pjgtj6i.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzAFhJIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1z8puwn0z94eyt4irm5r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzAFhJIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1z8puwn0z94eyt4irm5r.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
These two images are from a single excel file having 2 worksheet.&lt;br&gt;
Now if you compare the JSON file with the images you will have a pretty good idea about. Lets visit those.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first keys &lt;code&gt;Financial Info&lt;/code&gt; and &lt;code&gt;User Info&lt;/code&gt; are name of the 2 &lt;code&gt;worksheet&lt;/code&gt;. You can have any name you want.&lt;/li&gt;
&lt;li&gt;The value of these contains the data which you wan to show in tabular format in sequential order(hence inside array).&lt;/li&gt;
&lt;li&gt;Inside those data the keys are table &lt;code&gt;headers&lt;/code&gt; or top heading which you wan to highlight.&lt;/li&gt;
&lt;li&gt;The values of these key contain the data which you want to put in the column having that key as header.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add more worksheet or add more headers or do any thing. The baseline is you just have to stick to this format.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-parsing-the-json-file" class="anchor"&gt;
  &lt;/a&gt;
  2. Parsing the JSON file
&lt;/h2&gt;

&lt;p&gt;Lets start with the parsing this JSON file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;read_json_file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Reading &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to open file &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="s2"&gt; : $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to close file : $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;decode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output.xlsx&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;read_json_file&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;input.json&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are slurping the whole file and decoding it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-writing-to-excel" class="anchor"&gt;
  &lt;/a&gt;
  3. Writing to excel
&lt;/h2&gt;

&lt;p&gt;Lets try to creating excel file out of parsed JSON file to get the expected output as mentioned in image above.&lt;br&gt;
We will create a separate function for that. Adding this code to above one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Excel::Writer::&lt;/span&gt;&lt;span class="nv"&gt;XLSX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;write_to_excel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Writing output to &lt;/span&gt;&lt;span class="si"&gt;$output_file&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Excel::Writer::&lt;/span&gt;&lt;span class="nv"&gt;XLSX&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#add_format(-%25properties-)&lt;/span&gt;
    &lt;span class="c1"&gt;# Format for 'heading' (background - light blue)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$header_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;border&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;bg_color&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#99c2ff&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;bold&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;text_wrap&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;valign&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vcenter&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;align&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;valign&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vcenter&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;align&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;left&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Calibri&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for a normal text (background - white)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$normal_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have created 2 different format for now - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Header format where we want to highlight the header&lt;/li&gt;
&lt;li&gt;A normal standard format for all other text
We are using &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#add_format(-%properties-)"&gt;add_format&lt;/a&gt; for that
Now just take a look at excel file and understand how to access a particular cell.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWARIJ6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w91h8j2ep26sjjvflbi2.PNG" alt="Alt Text"&gt;
The first cell is located at A1 or (0, 0), second B1 or (0, 1) and so on.
Now to automatically access these cell we have to write code in such way that will get increment to B,C,D... while going horizontally. Similar for going vertically the number should increment i.e. 1,2,3... etc.
We can create a separate module for that where we can generate the next string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;StringIterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;exists&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;"];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;exists&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bless&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nv"&gt;%self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Increment the string to the next one&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# get the current string (e.g. A or B ...)&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_current&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"";&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="nv"&gt;$offset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nv"&gt;$size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Get next string&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get_next&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get_current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I have to give credit to someone for this code. While doing this work, I have found the help on the internet sometime back which I don't remember now from where. I tried to search now but unable to found it. I have modified it little bit for my need. But if someone found the actual source please let me know.&lt;br&gt;
In the above code we have an array contains character form "A" to "Z". We also have a variable having initial value '-1'. With every &lt;code&gt;increment&lt;/code&gt; call we are increasing the value of variable and returning the character present at that index in &lt;code&gt;get_current&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now lets use this module in our code and try to fill the excel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Excel::Writer::&lt;/span&gt;&lt;span class="nv"&gt;XLSX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Cwd&lt;/span&gt; &lt;span class="sx"&gt;qw( abs_path )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;File::&lt;/span&gt;&lt;span class="nv"&gt;Basename&lt;/span&gt; &lt;span class="sx"&gt;qw( dirname basename )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="nv"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;StringIterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;write_to_excel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Writing output to &lt;/span&gt;&lt;span class="si"&gt;$output_file&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Excel::Writer::&lt;/span&gt;&lt;span class="nv"&gt;XLSX&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#add_format(-%25properties-)&lt;/span&gt;
    &lt;span class="c1"&gt;# Format for 'heading' (background - light blue)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$header_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;border&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;bg_color&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#99c2ff&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;bold&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;text_wrap&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;valign&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vcenter&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;align&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;valign&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vcenter&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;align&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;left&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Calibri&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for a normal text (background - white)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$normal_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Excel column start from 1&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;StringIterator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_worksheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;# Column A width set to 20&lt;/span&gt;
        &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;set_column&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;A:A&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;# Add a table to the worksheet.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$element&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$element&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$column_initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column_initial&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$header_format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;write_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column_initial&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="nv"&gt;$element&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$normal_format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Finished writing to file : &lt;/span&gt;&lt;span class="si"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;out.xlsx&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;read_json_file&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;data.json&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

    &lt;span class="nv"&gt;write_to_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here we looping through our JSON data (&lt;code&gt;$data_to_write&lt;/code&gt;) and adding the initial keys as worksheet name in workbook(&lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#add_worksheet(-%24sheetname-)"&gt;add_worksheet&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Next we are setting the width of first column(A) as 20 by using &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#set_column(-%24first_col,-%24last_col,-%24width,-%24format,-%24hidden,-%24level,-%24collapsed-)"&gt;set_column&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;After that, we are looping through the values which contain the actual data.&lt;/li&gt;
&lt;li&gt;In each iteration we are getting the column initial (i.e A or B or C etc), writing the header using &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#write(-%24row,-%24column,-%24token,-%24format-)"&gt;write&lt;/a&gt; with the header format and adding the whole array of data for that particular header using &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#write_col(-%24row,-%24column,-%24array_ref,-%24format-)"&gt;write_col&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the file and try to run it. We will get the exact output as mentioned in Step 1.&lt;br&gt;
The above code is generic enough to generate a excel file if you provide the JSON in that particular format without any issue.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-some-more-addition-making-specific" class="anchor"&gt;
  &lt;/a&gt;
  4. Some more addition - making specific
&lt;/h2&gt;

&lt;p&gt;Sometime there is also a requirement to highlight a particular field or set of fields.&lt;br&gt;
E.g. For finance data, we want to highlight field where we are in loss as red, profit as green, no profit no loss as yellow. Also, we wan to highlight field where we have sold more than 1600 unit.&lt;br&gt;
Lets update our code to accumulate this requirement.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will use &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#add_format(-%properties-)"&gt;add_format&lt;/a&gt; to create more format for profit, loss and others.&lt;/li&gt;
&lt;li&gt;We will be using &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#conditional_formatting()"&gt;conditional_formatting&lt;/a&gt; to format specific cell satisfying certain criteria.
Adding more to the subroutine above.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# Format for error text (background - red)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$error_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bg_color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for success text (background - green)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$success_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bg_color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#00ff00&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for neutral text (background - yellow)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$neutral_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bg_color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ffff00&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Excel column start from 1&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;StringIterator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_worksheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Financial Info&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;Profit&lt;/span&gt;&lt;span class="p"&gt;'}};&lt;/span&gt;
            &lt;span class="c1"&gt;# 'Profit' is in 'G' column or '6'.&lt;/span&gt;
            &lt;span class="c1"&gt;# The data start from (1, 6) to (no of elements, 6)&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is greater than 0, apply the success format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;greater than&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$success_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is equal to 0, apply the neutral format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;equal to&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$neutral_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is less than 0, apply the error format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;less than&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$error_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;# 'Unit Sold' is in 'E' column or '4'.&lt;/span&gt;
            &lt;span class="c1"&gt;# The data start from (1, 4) to (no of elements, 4)&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is greater than 1600, apply the success format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$success_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;# Column A width set to 20&lt;/span&gt;
        &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;set_column&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;A:A&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I have added the comments for clarity.&lt;br&gt;
Save the file and run it. You can see the colored output.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8uXCkNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lot049jnymn52hejmzlm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8uXCkNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lot049jnymn52hejmzlm.PNG" alt="colored_output"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-adding-charts" class="anchor"&gt;
  &lt;/a&gt;
  5. Adding charts
&lt;/h2&gt;

&lt;p&gt;We can also add different charts. There are lot of option available at &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX::Chart"&gt;Excel::Writer::XLSX::Chart&lt;/a&gt;.&lt;br&gt;
For now lets create a column chart for number of units sold.&lt;br&gt;
We will be using &lt;a href="https://metacpan.org/pod/Excel::Writer::XLSX#add_chart(-%properties-)"&gt;add_chart&lt;/a&gt; for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;        &lt;span class="c1"&gt;# Add a column chart&lt;/span&gt;
        &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#add_chart(-%properties-)&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;embedded&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX::Chart#add_series()&lt;/span&gt;
        &lt;span class="c1"&gt;# ranges: [ $sheetname, $row_start, $row_end, $col_start, $col_end ]&lt;/span&gt;
        &lt;span class="nv"&gt;$chart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;name&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unit Sold&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
            &lt;span class="s"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;Financial Info&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;values&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;Financial Info&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s"&gt;line&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;'},&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#insert_chart(-$row,-$col,-$chart,-%7B-%25options-%7D-)&lt;/span&gt;
        &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;insert_chart&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;J2&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$chart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I have again added the comments for explanation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-final-look" class="anchor"&gt;
  &lt;/a&gt;
  6. Final look
&lt;/h2&gt;

&lt;p&gt;Lets look at our final full script after the addition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Excel::Writer::&lt;/span&gt;&lt;span class="nv"&gt;XLSX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Cwd&lt;/span&gt; &lt;span class="sx"&gt;qw( abs_path )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;File::&lt;/span&gt;&lt;span class="nv"&gt;Basename&lt;/span&gt; &lt;span class="sx"&gt;qw( dirname basename )&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;lib&lt;/span&gt; &lt;span class="nv"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;StringIterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;write_to_excel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Writing output to &lt;/span&gt;&lt;span class="si"&gt;$output_file&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Excel::Writer::&lt;/span&gt;&lt;span class="nv"&gt;XLSX&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#add_format(-%25properties-)&lt;/span&gt;
    &lt;span class="c1"&gt;# Format for 'heading' (background - light blue)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$header_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;border&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;bg_color&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#99c2ff&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;bold&lt;/span&gt;      &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;text_wrap&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;valign&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vcenter&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;align&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;color&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;valign&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vcenter&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;align&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;left&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;font&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Calibri&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="s"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for a normal text (background - white)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$normal_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for error text (background - red)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$error_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bg_color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for success text (background - green)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$success_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bg_color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#00ff00&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Format for neutral text (background - yellow)&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$neutral_format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;%font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;bg_color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#ffff00&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

    &lt;span class="c1"&gt;# Excel column start from 1&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;StringIterator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$worksheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_worksheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="ow"&gt;eq&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Financial Info&lt;/span&gt;&lt;span class="p"&gt;")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;scalar&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;Profit&lt;/span&gt;&lt;span class="p"&gt;'}};&lt;/span&gt;
            &lt;span class="c1"&gt;# 'Profit' is in 'G' column or '6'.&lt;/span&gt;
            &lt;span class="c1"&gt;# The data start from (1, 6) to (no of elements, 6)&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is greater than 0, apply the success format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;greater than&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$success_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is equal to 0, apply the neutral format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;equal to&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$neutral_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is less than 0, apply the error format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;less than&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$error_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;# 'Unit Sold' is in 'E' column or '4'.&lt;/span&gt;
            &lt;span class="c1"&gt;# The data start from (1, 4) to (no of elements, 4)&lt;/span&gt;
            &lt;span class="c1"&gt;# If the value is greater than 1600, apply the success format&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;conditional_formatting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
                    &lt;span class="s"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$success_format&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;# Add a column chart&lt;/span&gt;
            &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#add_chart(-%properties-)&lt;/span&gt;
            &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;embedded&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX::Chart#add_series()&lt;/span&gt;
            &lt;span class="c1"&gt;# ranges: [ $sheetname, $row_start, $row_end, $col_start, $col_end ]&lt;/span&gt;
            &lt;span class="nv"&gt;$chart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;add_series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;name&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unit Sold&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt;
                &lt;span class="s"&gt;categories&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;Financial Info&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;values&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;["&lt;/span&gt;&lt;span class="s2"&gt;Financial Info&lt;/span&gt;&lt;span class="p"&gt;",&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;line&lt;/span&gt;       &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;'},&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;# https://metacpan.org/pod/Excel::Writer::XLSX#insert_chart(-$row,-$col,-$chart,-%7B-%25options-%7D-)&lt;/span&gt;
            &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;insert_chart&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;J2&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$chart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;# Column A width set to 20&lt;/span&gt;
        &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;set_column&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;A:A&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;# Add a table to the worksheet.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$element&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$data_to_write&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$element&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$column_initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$iter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;get_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column_initial&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$header_format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nv"&gt;$worksheet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;write_col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column_initial&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$row&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="nv"&gt;$element&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$header&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$normal_format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$workbook&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Finished writing to file : &lt;/span&gt;&lt;span class="si"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;read_json_file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Reading &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="nv"&gt;$json_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to open file &lt;/span&gt;&lt;span class="si"&gt;$json_file&lt;/span&gt;&lt;span class="s2"&gt; : $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$json_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="vg"&gt;$/&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;die&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to close file : $!&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;

    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;decode_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$json_text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$config_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;out.xlsx&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;read_json_file&lt;/span&gt;&lt;span class="p"&gt;("&lt;/span&gt;&lt;span class="s2"&gt;data.json&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt;

    &lt;span class="nv"&gt;write_to_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After running the script we will get following output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbSbadzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cek3axj36msfcp1cypex.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbSbadzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cek3axj36msfcp1cypex.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can update the specific things to suite your requirements.&lt;br&gt;
It is quite handy where you can generate JSON data in particular format(which is quite easy across any language) and convert it into beautiful excel.&lt;br&gt;
Code is also available at &lt;a href="https://github.com/rai-gaurav/perl-toolkit/tree/master/ExcelOperations"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perl Onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Excel logo taken from &lt;a href="https://support.microsoft.com/en-us/office"&gt;here&lt;/a&gt;&lt;br&gt;
JSON logo taken from &lt;a href="https://www.json.org/json-en.html"&gt;here&lt;/a&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gaurav Rai</name>
    </author>
    <id>https://dev.to/raigaurav/create-excel-file-using-perl-from-json-data-me5</id>
    <published>2021-02-02T17:10:39Z</published>
    <updated>2021-02-02T17:10:39Z</updated>
    <category term="perl"/>
    <category term="automation"/>
    <category term="excel"/>
  </entry>
  <entry>
  <title>Grant Proposal: Maintaining Perl</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl"/>
  <id>tag:news.perlfoundation.org,2021-02-02:/post/grant_proposal_maintaining_perl</id>
  <published>2021-02-02T17:03:22</published>
  <updated>2021-02-02T17:03:22</updated>
  <summary>
  <![CDATA[
     Name Anthony Cook TonyC on irc.perl.org Synopsis Free up one of the Perl core's contributors to work non-stop on making Perl better. Project Details This grant provides the Perl Steering Committee with a development resource to target as they will, while still providing for more general bug fixes and other improvements to the perl core. Deliverables I propose to follow the same model as my current Perl 5 Core Maintenance 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>(note: I missed this somehow, and it should have been posted a while ago. Sorry - cromedome)</p>

<h2>Name</h2>

<p>Anthony (Tony) Cook - TonyC on irc.perl.org</p>

<h2>Synopsis</h2>

<p>Free up one of the Perl core's contributors to work non-stop on making
Perl better.</p>

<h2>Project Details</h2>

<p>This grant provides the Perl Steering Committee with a development
resource to target as they will, while still providing for more
general bug fixes and other improvements to the perl core.</p>

<h2>Deliverables</h2>

<p>I propose to follow the same model as my current Perl 5 Core
Maintenance Fund grant.</p>

<p>I intend to devote around 400 hours (about 20 hours a week) over the
next 20 weeks to work on improving the core, paid by the hour at the
same below-commercial rate as previously.  Some weeks I may be able to
more than 20 hours, if acceptable this will consume more hours and end
the grant earlier.</p>

<p>I expect to post a weekly summary on the p5p mailing list detailing
activity for the week, allowing the grant managers and active core
developers to verify that the claimed hours tally with actual
activity, and thus allow early flagging of any concerns.  This isn't
required by the fund rules, but it will help me keep on track for the
monthly reports.</p>

<p>Once per calendar month I would claim an amount equal to $50 x hours
worked. I would issue a report similar to the weekly ones, but
summarising the whole month. The report would need to be signed off by
one of the grant managers before I get paid. Note that this means I am
paid entirely in arrears.</p>

<p>Also, (the "nuclear option"), the grant managers would be allowed, at
any time, to inform the board that in their opinion the project is
failing, and that the TPF board may then, after allowing me to present
my side of things, to decide whether to terminate the project at that
point (i.e. to not pay me for any hours worked after I was first
informed that a manager had "raised the alarm").</p>

<p>As with my Perl 5 Core Maintenance Fund, I expect I'll apply to extend
this grant.</p>

<h2>Project Details</h2>

<p>I think that the work that I would do to improve Perl would mostly
fall into one of four main classes: code reviews, bug fixing, helping
other contributors, and adding features - with bug fixes the most
prominent and adding features the least.</p>

<p>I'll also accept specific direction from the Perl Steering Committee
for specific work to be done.</p>

<p>Ideally this would be done with some consultation with myself, so a
large complex task involving parts of the core I'm unfamiliar with
isn't assigned (or is assigned with reasonable expectations on time).
Of course, if too many tasks are negotiated into non-existence, the
grant can be terminated.</p>

<p>In general I'd work on:</p>

<ul>
<li>Reviews of patches submitted to github as pull requests.</li>
</ul>

<p>This will improve my core knowledge, and provide more timely feedback
to non-committers using their time to help perl.</p>

<p>Metric: number and complexity of patches applied or commented on.</p>

<ul>
<li>Fixing bugs I select from the perl github issues list.</li>
</ul>

<p>While I wouldn't necessarily be working on the the harder bugs that
Dave targets, this would help bring the total bug count down, and
reduce the noise in the issue list.</p>

<p>Metric: number and complexity of issues fixed.</p>

<ul>
<li>Fixing systemic issues in perl, such as the mis-use of I32 and U32 in the perl core.</li>
</ul>

<p>Metric: complexity of issue solved.</p>

<ul>
<li>Contributing to discussion on the perl5-porters mailing list and in #p5p on IRC.</li>
</ul>

<p>For the grant, I'm specifically not proposing to:</p>

<ol>
<li><p>Be a release manager.  This doesn't prevent me volunteering to act as a release manager, but that wouldn't be counted towards this grant.</p></li>
<li><p>Act as language designer - I don't feel that I'm good at this.</p></li>
</ol>

<h2>Project Schedule</h2>

<p>I expect that I can deliver 400 hours of work in approximately 20
weeks.</p>

<p>I am available to start work on this project immediately.</p>

<h2>Bio</h2>

<p>I'm a freelance programmer living in Australia.</p>

<p>I've been irregularly contributing to perl since 2008, a committer
since 2010 and have participated with the Perl 5 Core Maintenance Fund
since 2013.</p>

<p>My contributions have varied from build system fixes, to UTF-8
handling, to portability fixes.</p>

<p>I've been programming in C for 30 years and in perl for 25.</p>

<h2>Endorsed By</h2>

<p>Karl Williamson, Sawyer X, Ricardo Signes</p>

<h2>Amount Requested</h2>

<p>$20,000 (USD)</p>

<h2>Suggestions for Grant Managers</h2>

<p>SawyerX (core team), Ricardo Signes (grants committee)</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-9060466932145771050</id>
    <published>2021-01-27T20:01:00.004-08:00</published>
    <updated>2021-02-01T13:10:37.427-08:00</updated>
    <title type="text">perl.com hijacked </title>
    <content type="html">&lt;p&gt;&amp;nbsp;The perl.com domain was hijacked this morning, and is currently pointing to a parking site.&amp;nbsp; Work is ongoing to attempt to recover it.&lt;/p&gt;&lt;p&gt;&amp;nbsp;We encourage you NOT to visit the domain, as there are some signals that it may be related to sites that have distributed malware in the past.&lt;/p&gt;&lt;p&gt;&amp;nbsp; Some users may have it selected as their CPAN mirror.&amp;nbsp; To update your mirror in CPAN.pm use &lt;span style="font-family: courier;"&gt;o conf urllist http://www.cpan.org/&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;# perl -MCPAN -eshell&lt;br /&gt;cpan shell -- CPAN exploration and modules installation (v2.20)&lt;br /&gt;Enter 'h' for help.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;cpan[1]&amp;gt; o conf urllist http://www.cpan.org/&lt;br /&gt;Please use 'o conf commit' to make the config permanent!&lt;br /&gt;cpan[2]&amp;gt; o conf commit&lt;br /&gt;commit: wrote '/root/.cpan/CPAN/MyConfig.pm'&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style="font-family: courier;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;div&gt;Update 2021-01-28:&lt;/div&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px;"&gt;&lt;div style="text-align: left;"&gt;Work is underway to attempt to recover the domain.&amp;nbsp; If you're looking for the content, you can visit &lt;a href="https://perldotcom.perl.org"&gt;perldotcom.perl.org&lt;/a&gt;.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Update 2021-01-30:&lt;/div&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px;"&gt;&lt;div&gt;&lt;div style="text-align: left;"&gt;Network Solutions is working with Tom Christiansen, the rightful registrant, on the recovery of the Perl.com domain. There is no estimated timeline for its recovery but the process is underway. The Perl.com site is temporarily at &lt;a href="http://perldotcom.perl.org"&gt;perldotcom.perl.org&lt;/a&gt;. Anyone using a perl.com host for their CPAN mirror should use &lt;a href="http://www.cpan.org"&gt;www.cpan.org&lt;/a&gt; instead. Please direct all inquiries to brian d foy (brian.d.foy@gmail.com).&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br /&gt;Update 2020-02-01:&lt;br /&gt;&lt;blockquote style="border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;"&gt;We have contacted Network Solutions and verified that cpan.org is in the right hands and secured.&lt;/blockquote&gt;</content>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/9060466932145771050"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/9060466932145771050"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/01/perlcom-hijacked.html" title="perl.com hijacked "/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Australia</title>
    <link rel="alternate" href="https://job.perl.careers/rx9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Not all jobs are created equal. Sure, most pay the bills, but some do more. They impart a sense of purpose; when you log out at day’s end, it’s with the satisfaction that you are part of something bigger, something more important than yourself. You’ve left the world a little better than you found it, and isn’t that what life is really about?</div>
    </content>
    <id>https://job.perl.careers/rx9</id>
    <published>2021-02-01T10:00:49Z</published>
    <updated>2021-02-01T10:00:49Z</updated>
  </entry>
  <entry>
    <title>Big Dividends, Bigger Opportunity! Perl role with multiple location options</title>
    <link rel="alternate" href="https://job.perl.careers/b5a" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Leisure travel might be on hiatus, but if wanderlust has you eager to be somewhere else, why not consider working in a new country? Perl developers, pack your bags: your next big adventure awaits. Our client is looking for Perl developers who are comfortable with Moose and PSGI/Plack, and have a solid grounding in using Perl’s testing tools.</div>
    </content>
    <id>https://job.perl.careers/b5a</id>
    <published>2021-02-01T10:00:48Z</published>
    <updated>2021-02-01T10:00:48Z</updated>
  </entry>
  <entry>
    <title>That’s a Big Sandbox! Perl role in London</title>
    <link rel="alternate" href="https://job.perl.careers/rlz" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The client is interested in anyone with experience building web apps in Perl, using one of the major Perl frameworks. If you’re a crack-hand with Catalyst, a Mojolicious master, or a distinguished Dance, they want you. If you’ve got mad Perl skills and a hankering to mine the sandbox of data waiting for you, grab your shovel and pail and drop us an email!</div>
    </content>
    <id>https://job.perl.careers/rlz</id>
    <published>2021-02-01T10:00:47Z</published>
    <updated>2021-02-01T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Guten Tag, Senior Perl Developers! Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/j6m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Bricks-and-mortar malls may be passé but having a real-time office to come to when the pandemic ends is a major perk. While work for this client is currently 100% remote, their main office is in St. Ingbert, Germany with a satellite office in Munich. The ideal candidate should be confident using Modern Perl, in particular happy with DBIx::Class and Moose/Moo.</div>
    </content>
    <id>https://job.perl.careers/j6m</id>
    <published>2021-02-01T10:00:46Z</published>
    <updated>2021-02-01T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Mad Men (and women) of London. Perl in London</title>
    <link rel="alternate" href="https://job.perl.careers/hu4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The leader in premium native advertising for technology, financial services, and corporate and lifestyle sectors, our client is the power behind the advertising throne for over 200 websites, including Forbes, Wall Street Journal, CNN Business, and The Washington Post. This dynamic team is looking for a senior Perl programmer with a strong understanding of Go.</div>
    </content>
    <id>https://job.perl.careers/hu4</id>
    <published>2021-02-01T10:00:45Z</published>
    <updated>2021-02-01T10:00:45Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will take place online between March 24-26 2021. The private ticket will be cheaper (EUR 30). People who register in time and transfer the participation fee, will get exclusive extras.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-02-01T10:00:44Z</published>
    <updated>2021-02-01T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 25, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-02-01T10:00:43Z</published>
    <updated>2021-02-01T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, February 24, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-02-01T10:00:42Z</published>
    <updated>2021-02-01T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Regular Expression: Master Manipulator of Text</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, February 4, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-02-01T10:00:41Z</published>
    <updated>2021-02-01T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, February 10, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-02-01T10:00:40Z</published>
    <updated>2021-02-01T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Gabor self reporting for 2021.01</title>
    <link rel="alternate" href="https://szabgab.com/report-2021-01.html" type="text/html"/>
    <id>https://szabgab.com/report-2021-01.html</id>
    <published>2021-02-01T10:00:39Z</published>
    <updated>2021-02-01T10:00:39Z</updated>
  </entry>
  <entry>
    <title>What to do now?</title>
    <link rel="alternate" href="https://szabgab.com/what-to-do-now.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Just trying to figure out priorities.</div>
    </content>
    <id>https://szabgab.com/what-to-do-now.html</id>
    <published>2021-02-01T10:00:38Z</published>
    <updated>2021-02-01T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Perl Courses</title>
    <link rel="alternate" href="https://courses.code-maven.com/p/perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">There are currently 4 Perl courses you can get one-by-one, all of them in a single bundle using a one-time payment or a monthly subscription.</div>
    </content>
    <id>https://courses.code-maven.com/p/perl</id>
    <published>2021-02-01T10:00:37Z</published>
    <updated>2021-02-01T10:00:37Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-02-01T10:00:36Z</published>
    <updated>2021-02-01T10:00:36Z</updated>
  </entry>
  <entry>
    <title>2020 Predictions Reviewed</title>
    <link rel="alternate" href="https://blog.urth.org/2021/01/29/2020-predictions-reviewed/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It might not be as interesting as predicticng the Coronavirus or as volatile as US politics, but I'd love to see your predictions for Perl 7, Raku, Go, and Rust. I had some other, more political ideas, but I think I'll leave them out now.</div>
    </content>
    <id>https://blog.urth.org/2021/01/29/2020-predictions-reviewed/</id>
    <published>2021-02-01T10:00:35Z</published>
    <updated>2021-02-01T10:00:35Z</updated>
  </entry>
  <entry>
    <title>How to replace a column in a CSV file using Perl</title>
    <link rel="alternate" href="https://perlmaven.com/replace-a-column-in-a-csv-file" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It is quite simple using Test::CSV, but if your file is simple you can also solve this by using split and join.</div>
    </content>
    <id>https://perlmaven.com/replace-a-column-in-a-csv-file</id>
    <published>2021-02-01T10:00:34Z</published>
    <updated>2021-02-01T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/01/25/PWC097/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis shared solutions with examples which is always handy.</div>
    </content>
    <id>https://wlmb.github.io/2021/01/25/PWC097/</id>
    <published>2021-02-01T10:00:33Z</published>
    <updated>2021-02-01T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 097</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-097-3ag8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon made the tasks look simple by breaking them into smaller tasks.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-097-3ag8</id>
    <published>2021-02-01T10:00:32Z</published>
    <updated>2021-02-01T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Caesar Substrings</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_97__Caesar_Substrings.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger built a hash map for Caesar Cipher task. His olution to the binary substrings task is very clever too.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/01/Perl_Weekly_Challenge_97__Caesar_Substrings.html</id>
    <published>2021-02-01T10:00:31Z</published>
    <updated>2021-02-01T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: flipping and swapping</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/01/25/PerlWeeklyChallenge97.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca kept the Caesar Cipher task simple and easy to follow.</div>
    </content>
    <id>https://fluca1978.github.io/2021/01/25/PerlWeeklyChallenge97.html</id>
    <published>2021-02-01T10:00:30Z</published>
    <updated>2021-02-01T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Caesar Cipher and Binary Substrings</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-97-caesar-cypher-and-binary-substrings.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent's blog is, as always, full of magic - whether it is Perl or Raku.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-97-caesar-cypher-and-binary-substrings.html</id>
    <published>2021-02-01T10:00:29Z</published>
    <updated>2021-02-01T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="https://perl.kiwi/tales/2021/01/30/perl-weekly-challenge-097/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Lance is back after short break with a blog post promoting TDD. Must Read.</div>
    </content>
    <id>https://perl.kiwi/tales/2021/01/30/perl-weekly-challenge-097/</id>
    <published>2021-02-01T10:00:28Z</published>
    <updated>2021-02-01T10:00:28Z</updated>
  </entry>
  <entry>
    <title>PWC097 - Binary Substrings</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/28/pwc097-binary-substrings/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio kept the binary substrings solution simple using just a for loop.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/28/pwc097-binary-substrings/</id>
    <published>2021-02-01T10:00:27Z</published>
    <updated>2021-02-01T10:00:27Z</updated>
  </entry>
  <entry>
    <title>PWC097 - Caesar Cipher</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/27/pwc097-caesar-cipher/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio is not scared of an eval-based solution. Must Read.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/27/pwc097-caesar-cipher/</id>
    <published>2021-02-01T10:00:26Z</published>
    <updated>2021-02-01T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 97</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-97.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James's one liner for Caesar Cipher task is impressive. Even the binary substrings solution is very clever.</div>
    </content>
    <id>http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-97.html</id>
    <published>2021-02-01T10:00:25Z</published>
    <updated>2021-02-01T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Binary Substrings and Caesar ciphers: Perl Weekly Challenge 97</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/01/25/binary-substrings-and-caesar-cyphers-perl-weekly-challenge-97.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave made use of Levenshtein Distance to deal with the binary substrings task.</div>
    </content>
    <id>https://jacoby.github.io/2021/01/25/binary-substrings-and-caesar-cyphers-perl-weekly-challenge-97.html</id>
    <published>2021-02-01T10:00:24Z</published>
    <updated>2021-02-01T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Et tu Brute? Mit dem Ausflippen?</title>
    <link rel="alternate" href="https://colincrain.com/2021/01/29/et-tu-brute-mit-dem-ausflippen/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Colin is testing our German in his blog post. A very enjoyable read, highly recommended.</div>
    </content>
    <id>https://colincrain.com/2021/01/29/et-tu-brute-mit-dem-ausflippen/</id>
    <published>2021-02-01T10:00:23Z</published>
    <updated>2021-02-01T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Caesarean Substrings with Raku and Perl</title>
    <link rel="alternate" href="https://raku-musings.com/caesarean-substrings.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne also used a bitwise operator to solve the binary substrings task. He also shared Perl solutions.</div>
    </content>
    <id>https://raku-musings.com/caesarean-substrings.html</id>
    <published>2021-02-01T10:00:22Z</published>
    <updated>2021-02-01T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Binary Substrings</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-binary-substrings/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cool solution to the Binary substrings task. Must read.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-binary-substrings/</id>
    <published>2021-02-01T10:00:21Z</published>
    <updated>2021-02-01T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Ceasar Cipher</title>
    <link rel="alternate" href="https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-ceasar-cipher/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail not only sharing Perl solutions but many more. Highly Recommended.</div>
    </content>
    <id>https://programmingblog702692439.wordpress.com/2021/01/30/perl-weekly-challenge-97-ceasar-cipher/</id>
    <published>2021-02-01T10:00:20Z</published>
    <updated>2021-02-01T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/31" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Adam made use of a bitwisw operator to solve the binary substrings task. You don't want to miss it.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/31</id>
    <published>2021-02-01T10:00:19Z</published>
    <updated>2021-02-01T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-097/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron's blog is the best source for Raku magic.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-097/</id>
    <published>2021-02-01T10:00:18Z</published>
    <updated>2021-02-01T10:00:18Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 097</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-097" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Caesar Cipher" and "Binary Substrings" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-097</id>
    <published>2021-02-01T10:00:17Z</published>
    <updated>2021-02-01T10:00:17Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 098</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-098" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome a new week with a couple of fun tasks "Read N-characters" and "Search Insert Position". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-098</id>
    <published>2021-02-01T10:00:16Z</published>
    <updated>2021-02-01T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Maintaining the Perl 5 Core (Dave Mitchell): Grant Report for December 2020</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/dave-report-2020-december" type="text/html"/>
    <id>https://news.perlfoundation.org/post/dave-report-2020-december</id>
    <published>2021-02-01T10:00:15Z</published>
    <updated>2021-02-01T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Grant Proposal: Raku CI integration bot</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot</id>
    <published>2021-02-01T10:00:14Z</published>
    <updated>2021-02-01T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Grant Proposal Recap: January 2021</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021" type="text/html"/>
    <id>https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021</id>
    <published>2021-02-01T10:00:13Z</published>
    <updated>2021-02-01T10:00:13Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/24 - Brute-force for a Traveling-Salesman-like problem</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/31/aoc2016-24-tsp-brutal/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">On with Advent of Code puzzle 24 from 2016: a brute-force approach to a problem similar to the Traveling Salesman Problem.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/31/aoc2016-24-tsp-brutal/</id>
    <published>2021-02-01T10:00:12Z</published>
    <updated>2021-02-01T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Iterator-based implementation of Permutations</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/30/permutations-iterator/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">An iterator-based implementation of Permutations with Heap's Algorithm. You saw it coming.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/30/permutations-iterator/</id>
    <published>2021-02-01T10:00:11Z</published>
    <updated>2021-02-01T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Permutations with Heap's Algorithm</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/29/permutations-algorithm/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">All permutations over N objects can be generated by Heap's Algorithm.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/29/permutations-algorithm/</id>
    <published>2021-02-01T10:00:10Z</published>
    <updated>2021-02-01T10:00:10Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/19 - Dynamic Josephus</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/26/aoc2016-19-dynamic-josephus/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I was very happy to get past puzzle 19 from the 2016 edition of Advent of Code, but let's admit two facts: I didn't demonstrate that the heuristic is actually a rule; This wouldn't help in some other general case.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/26/aoc2016-19-dynamic-josephus/</id>
    <published>2021-02-01T10:00:09Z</published>
    <updated>2021-02-01T10:00:09Z</updated>
  </entry>
  <entry>
    <title>AoC 2016/19 - Halving Josephus</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/25/aoc2016-19-halving-josephus/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Realizing the folly of their present-exchange rules, the Elves agree to instead steal presents from the Elf directly across the circle. If two Elves are across the circle, the one on the left (from the perspective of the stealer) is stolen from. The other rules remain unchanged: Elves with no presents are removed from the circle entirely, and the other elves move in slightly to keep the circle evenly spaced.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/25/aoc2016-19-halving-josephus/</id>
    <published>2021-02-01T10:00:08Z</published>
    <updated>2021-02-01T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Perl - mockgen helper perl script</title>
    <link rel="alternate" href="https://dev.to/takakd/mockgen-helper-perl-script-1g5l" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A simple wrapper script, but IMHO even in such simple scripts it would be better to include the safety boilerplate. If for no other reason then to have better copy-paste templates for other people.</div>
    </content>
    <id>https://dev.to/takakd/mockgen-helper-perl-script-1g5l</id>
    <published>2021-02-01T10:00:07Z</published>
    <updated>2021-02-01T10:00:07Z</updated>
  </entry>
  <entry>
    <title>The Trouble with Reference Counting</title>
    <link rel="alternate" href="https://perldotcom.perl.org/article/the-trouble-with-reference-counting/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl uses a simple form of garbage collection (GC) called reference counting. Every variable created by a Perl program has a refcnt associated with it. If the program creates a reference to the variable, Perl increments its refcnt. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values' refcnt are either decremented or they're reclaimed as well if no other references to them remain.</div>
    </content>
    <id>https://perldotcom.perl.org/article/the-trouble-with-reference-counting/</id>
    <published>2021-02-01T10:00:06Z</published>
    <updated>2021-02-01T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Better Perl with subroutine signatures and type validation</title>
    <link rel="alternate" href="https://phoenixtrap.com/index.php/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Though they are still marked as 'experimental', function signatures have been around for more than 6 years now! To comment visit the <a href="https://dev.to/mjgardner/better-perl-with-subroutine-signatures-and-type-validation-2bck">dev.to</a> copy of the article or <a href="https://www.reddit.com/r/perl/comments/l6gdub/better_perl_with_subroutine_signatures_and_type/">reddit</a></div>
    </content>
    <id>https://phoenixtrap.com/index.php/2021/01/27/better-perl-with-subroutine-signatures-and-type-validation/</id>
    <published>2021-02-01T10:00:05Z</published>
    <updated>2021-02-01T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Release 1.50 of perl-workflow</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Workflow - A Simple, flexible system to implement workflows. Written in Perl.</div>
    </content>
    <id>https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h</id>
    <published>2021-02-01T10:00:04Z</published>
    <updated>2021-02-01T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Dancer2 0.300005 Released</title>
    <link rel="alternate" href="http://blogs.perl.org/users/jason_a_crome/2021/01/dancer2-0300005-released.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A bunch of small new features, enhancements, and bug fixes. The announcement even mentions my little contribution, setting up GitHub Actions for Continuous Integration.</div>
    </content>
    <id>http://blogs.perl.org/users/jason_a_crome/2021/01/dancer2-0300005-released.html</id>
    <published>2021-02-01T10:00:03Z</published>
    <updated>2021-02-01T10:00:03Z</updated>
  </entry>
  <entry>
    <title>perl.com hijacked</title>
    <link rel="alternate" href="https://log.perl.org/2021/01/perlcom-hijacked.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The perl.com domain was hijacked. Work is underway to attempt to recover the domain to Tom Christiansen, the rightful registrant.  If you're looking for the content, you can visit <a href="https://perldotcom.perl.org/">perldotcom.perl.org</a> which is a <a href="https://www.reddit.com/r/perl/comments/l7bwn5/perldotcomperlorg_is_a_temporary_host_for_perlcom/">temporary host</a>. <a href="https://www.reddit.com/r/perl/comments/l73998/perlcom_a_1994_domain_has_been_stolen_by_busy/">report</a> and <a href="https://www.reddit.com/r/perl/comments/l6d8ws/perlcom_unfriendly_domain_take_over/">discuss</a> and also on <a href="https://news.ycombinator.com/item?id=25940240">Hacker news</a>.</div>
    </content>
    <id>https://log.perl.org/2021/01/perlcom-hijacked.html</id>
    <published>2021-02-01T10:00:02Z</published>
    <updated>2021-02-01T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Optimize GitHub Actions for Perl</title>
    <link rel="alternate" href="https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">If you use GitHub Actions for your CI/CD you know it doesn't treat Perl as a first class citizen. &lt;a href="https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition"&gt;This tutorial-style post&lt;/a&gt; can help you learn how to deploy a prebuilt Perl environment into GitHub Actions, simplifying and speeding up your CI/CD.</content>
    <id>https://www.activestate.com/blog/perl-ci-cd-pipelines-for-github-actions/?utm_source=perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=blog-perl-ci-cd-pipelines&amp;utm_campaign=user-acquisition</id>
    <published>2021-02-01T10:00:01Z</published>
    <updated>2021-02-01T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#497 - perl.com was hijacked</title>
    <link rel="alternate" href="http://perlweekly.com/archive/497.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi</p>
<p>The big news of the week is that perl.com was hijacked. According to what I have read the solution seem to be already on its way to recover the domain. If you are using a perl.com host for your CPAN mirror you should use www.cpan.org instead (See <a href="https://log.perl.org/2021/01/perlcom-hijacked.html">this post</a>.) You can also find the content of <a href="https://perldotcom.perl.org/">perl.com on perldotcom.perl.org</a>. Ask brian d foy (brian.d.foy@gmail.com) for further details. (See also <a href="https://www.reddit.com/r/perl/comments/l8x21u/the_state_of_perlcom/">on Reddit</a>.)</p>
<p>I'd like to thank all the people who answered my call 2 weeks ago and started to <a href="https://www.patreon.com/manwar">support Manwar</a>. He went from 21 to 30 patrons. Let's do another round of this! If you have been reading the Perl weekly and would like to show you appretiation to Mohammad who is the most prolific co-editor of the newsletter, then the easiest way to do so is to sign up to his <a href="https://www.patreon.com/manwar">Patreon account</a> and buy him a coffee every month.</p>
<p>In other news <a href="https://www.reddit.com/r/perl/comments/l457ay/perl_5340_will_be_released_in_may/">Perl 5.34 will be released</a> in May.</p>
<p>Finally, remember, I've opened the <a href="https://courses.code-maven.com/">Code Maven school</a> where I already have 4 Perl courses, 3 Python courses besides the Go, Docker, and Git courses. Check them out and let me know what you are missing from there.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>http://perlweekly.com/archive/497.html</id>
    <published>2021-02-01T10:00:00Z</published>
    <updated>2021-02-01T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 97: Caesar Cipher and Binary Substrings</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-97-caesar-cypher-and-binary-substrings.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10064</id>
    <published>2021-02-01T03:25:28Z</published>
    <updated>2021-02-01T03:31:30Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 97 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<h2>Task 1: Caesar Cipher</h2>

<p><em>You are given string <code>$S</code> containing only the letters <code>A..Z</code> and a number <code>$N</code>.</em></p>

<p><em>Write a script to encrypt the given string <code>$S</code> using a <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar Cipher</a> with left shift of size <code>$N</code>.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $S = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG", $N = 3
Output: "QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD"

Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW

Plaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
</code></pre>

<p>A Caesar cypher is a weak form of encryption that involves &#8220;rotating&#8221; each letter of the input string by a fixed number of places. To rotate a letter means to shift it through the alphabet, wrapping around to the end if necessary. In the movie 2001: A Space Odyssey, the spaceship&#8217;s computer is called HAL, which is IBM left rotated by 1.</p>

<p>Note that the task description says that the input string contains only the letters <code>A..Z</code>, but the example provided also contains spaces which are not in the encrypted solution. So we need to handle spaces as a special case. Depending on the language, my solutions will either handle spaces as one special case, or decide not to convert any letter outside of the <code>A..Z</code> range in order, for example, to preserve also punctuation marks).</p>

<h3>Caesar Cipher in Raku</h3>

<p>I decided to implement the solution in a functional style (to make the porting to Scala easier). So almost everything is made in a <code>map</code> block that processes each letter in turn and returns a stream of converted letters that are then join into the cypher string. Note that in the Raku solution, we convert only the letters the <code>A..Z</code> range.</p>

<pre><code>use v6;
constant $default = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
constant $min = 'A'.ord;
constant $max = 'Z'.ord;

sub MAIN (Str $in-string = $default, Int $shift = 3) {
    say rotate($in-string.uc, $shift);
    #say $out;
}
sub rotate ($in, $shift) {
    return join "", 
        map { my $let= $_ - $shift; 
              $let +=  26 if $let &lt; $min; 
              $min &lt;= $_ &lt;= $max ?? $let.chr !! $_.chr; 
            }, $in.comb&gt;&gt;.ord;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ raku caesar.raku
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
</code></pre>

<p>Note that there is a special case of Caesar cipher called <em>ROT13</em>, where each letter is rotated by 13 places. Since 13 is half of the number of letters in our alphabet, applying ROT13 twice returns the original string, so that the same code may be used to encode and decode a string. ROT13 was commonly used on the Internet to weakly hide potentially offensive jokes or solutions to puzzles. With a fixed shift of 13, the code might be much simpler and can be contained in a simple one-liner:</p>

<pre><code>$ raku -e 'my $w = @*ARGS[0]; $w ~~ tr/A..MN..Z/N..ZA..M/; say $w;' FOOBAR
SBBONE

$ raku -e 'my $w = @*ARGS[0]; $w ~~ tr/A..MN..Z/N..ZA..M/; say $w;' SBBONE
FOOBAR
</code></pre>

<h3>Caesar Cipher in Perl</h3>

<p>This is essentially a port to Perl of the Raku program, except that, here, only the space character is handled differently:</p>

<pre><code>use strict;
use warnings;
use feature "say";
use constant MIN =&gt; ord 'A';

my $in_string = shift // "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
my $shift = shift // 3;
say rotate(uc $in_string, $shift);

sub rotate {
    my ($in, $shift) = @_;
    return join "", 
        map { my $let = ord($_) - $shift; 
              $let +=  26 if $let &lt; MIN; 
              $_ eq " " ? " " : chr $let 
            } split "", $in;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  caesar.pl
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
</code></pre>

<p>In the specific case of <em>ROT13</em> (Caesar cipher with a shift of 13 letters), we can also use a simple Perl one-liner: </p>

<pre><code>$ perl -E '$w = shift; $w =~ tr/A-MN-Z/N-ZA-M/; say $w;' FOOBAR
SBBONE

$ perl -E '$w = shift; $w =~ tr/A-MN-Z/N-ZA-M/; say $w;' SBBONE
FOOBAR
</code></pre>

<h3>Caesar Cipher in Scala</h3>

<p>This a simple port to Scala of the Raku and Perl programs above.</p>

<pre><code>object caesar extends App {
  val test = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"
  val shift = 3
  println( test.map(convert(_, shift)))

  def convert(c: Char, shift: Int): Char = {
    val min = 'A'.toByte
    val asc = c.toByte - shift;
    val conv = if (asc &lt; min) asc + 26 else asc
    return if (c == ' ') ' ' else conv.toChar
  }
}
</code></pre>

<p>Output:</p>

<pre><code>QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
</code></pre>

<h3>Caesar Cipher in Python</h3>

<p>Again, a port to Python of the Raku and Perl programs above. Except that functional programming is much less easy in Python, so we use a more conventional procedural approach.  Since Python makes it possible to chain comparison operators, it makes it simple  to convert only the letters the <code>A..Z</code> range.</p>

<pre><code>ALPHA_COUNT = 26
MIN = ord('A')

input_string = "THE QUICK BROWN FOR JUMPS OVER THE LAZY DOG"
shift = 3
out = ""
for char in input_string:
    if 'A' &lt;= char &lt;= 'Z':
        asc_code = ord(char) - shift
        if asc_code &lt; MIN:
            asc_code += ALPHA_COUNT
        out += chr(asc_code)
    else:
        out += char
print(out)
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ python3 caesar.py
QEB NRFZH YOLTK CLO GRJMP LSBO QEB IXWV ALD
</code></pre>

<h2>Task #2: Binary Substrings</h2>

<p><em>You are given a binary string <code>$B</code> and an integer <code>$S</code>.</em></p>

<p><em>Write a script to split the binary string <code>$B</code> into substrings of size <code>$S</code> and then find the minimum number of flips required to make all substrings the same.</em></p>

<p><em>Example 1:</em></p>

<pre><code>Input: $B = “101100101”, $S = 3
Output: 1

Binary Substrings:
    "101": 0 flip
    "100": 1 flip to make it "101"
    "101": 0 flip
</code></pre>

<p><em>Example 2:</em></p>

<pre><code>Input $B = “10110111”, $S = 4
Output: 2

Binary Substrings:
    "1011": 0 flip
    "0111": 2 flips to make it "1011"
</code></pre>

<p>It isn&#8217;t really necessary to actually split the input string. We can iterate over the substrings and, for each position, find the number of 1s (or 0s, it&#8217;s your draw). So, in each position, we sum the minimum of the number of 1s and the number of 0s.</p>

<h2>Binary Substrings in Raku</h2>

<p>With the above explanations, this is hopefully clear:</p>

<pre><code>use v6;
subset Binstr of Str where /^&lt;[01]&gt;*$/;

sub MAIN (Binstr $in-string,  Int $size) {
    my $sub-str-len = $in-string.chars / $size;
    my $flips = 0;
    for 0..^$sub-str-len -&gt; $i {
        my $ones = 0;
        for 0..^$size -&gt; $j {
            my $idx = $j * $sub-str-len + $i;
            $ones++ if substr($in-string, $idx, 1) == 1
        }
        my $zeroes = $size - $ones;
        $flips += min ($zeroes, $ones)
    }
    say $flips;
}
</code></pre>

<p>Output:</p>

<pre><code>$ ./raku bin-substrings.raku  101100101 3
1

$ ./raku bin-substrings.raku  10110111 4
2
</code></pre>

<h2>Binary Substrings in Perl</h2>

<p>This is the same idea as above for the Perl version:</p>

<pre><code>use strict;
use warnings;
use feature qw/say/;

my ($in_string, $size) = @ARGV;
my $sub_str_len = length($in_string) / $size;
my $flips = 0;
for my $i (0 .. $sub_str_len - 1) {
    my $ones = 0;
    for my $j (0 .. $size - 1) {
        my $idx = $j * $sub_str_len + $i;
        $ones++ if substr ($in_string, $idx, 1) == 1;
    }
    my $zeroes = $size - $ones;
    $flips += $zeroes &gt; $ones ? $ones : $zeroes;
}
say $flips;
</code></pre>

<p>Output:</p>

<pre><code>$ perl  bin-substrings.pl 101100101 3
1

$ perl  bin-substrings.pl  10110111 4
2
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, February 7, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>List of new CPAN distributions – Jan 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/02/01/list-of-new-cpan-distributions-jan-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-ContainingJustData-0.002">Acme-CPANModules-ContainingJustData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Modules that just contain data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-PERLANCAR-Forked-0.002">Acme-CPANModules-PERLANCAR-Forked</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of my modules which are forked from others</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-UUID-0.001">Acme-CPANModules-UUID</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Modules that can generate immutable universally unique identifier (UUIDs)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/Acme-ConspiracyTheory-Random-0.001">Acme-ConspiracyTheory-Random</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.001</td>
<td>random theories</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Acme-STEVEB-0.43">Acme-STEVEB</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.43</td>
<td>One line description</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NMELNICK/AnyEvent-Discord-0.1">AnyEvent-Discord</a></td>
<td><a href="https://metacpan.org/author/NMELNICK">NMELNICK</a></td>
<td>0.1</td>
<td>Provides an AnyEvent interface to the Discord bot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JDEGUEST/Apache2-SSI-v0.1.0">Apache2-SSI</a></td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>v0.1.0</td>
<td>Apache2 Server Side Include</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/App-Device-Chip-sensor-0.01">App-Device-Chip-sensor</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>Base class to build Device::Chip::Sensor-based applications on</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JV/App-Dusage-2.00">App-Dusage</a></td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>2.00</td>
<td>provide disk usage statistics</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-xp-0.01">App-Greple-xp</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>extended pattern module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-idxdb-0.001">App-idxdb</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Import data from IDX and perform queries on them</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-lcpan-CmdBundle-borderstyle-0.001">App-lcpan-CmdBundle-borderstyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>lcpan subcommands related to BorderStyle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-streamfinder-0.001">App-streamfinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI for StreamFinder, a module to fetch actual raw streamable URLs from video &amp; podcasts sites</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OELE/Audio-StreamGenerator-0.01">Audio-StreamGenerator</a></td>
<td><a href="https://metacpan.org/author/OELE">OELE</a></td>
<td>0.01</td>
<td>create a 'radio' stream by mixing ('cross fading') multiple audio sources (files or anything that can be converted to PCM audio) and sending it to a streaming server (like Icecast)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ATRODO/Audio-TinySoundFont-0.10">Audio-TinySoundFont</a></td>
<td><a href="https://metacpan.org/author/ATRODO">ATRODO</a></td>
<td>0.10</td>
<td>Interface to TinySoundFont, a "SoundFont2 synthesizer library in a single C/C++ file"</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBAURAIN/Bio-MUST-Tools-Mcl-0.210170">Bio-MUST-Tools-Mcl</a></td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>0.210170</td>
<td>Scripts for processing MCL clusters</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBAURAIN/Bio-MUST-Tools-TreeParsing-0.210200">Bio-MUST-Tools-TreeParsing</a></td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>0.210200</td>
<td>Scripts for parsing trees</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/CSS-Struct-Output-Indent-ANSIColor-0.01">CSS-Struct-Output-Indent-ANSIColor</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Indent printing 'CSS::Struct' structure to CSS code with ansi color output.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/CSS-Tidy-0.00_01">CSS-Tidy</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>reformat CSS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JJNAPIORK/CatalystX-Errors-0.001001">CatalystX-Errors</a></td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>0.001001</td>
<td>Default Web HTTP Error Pages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ColorTheme-Distinct-WhiteBG-0.001">ColorTheme-Distinct-WhiteBG</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Pick some distinct colors (that are suitable for white background) for you</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Crayon-0.01">Crayon</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>CSS Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TIMLEGGE/Crypt-OpenSSL-Verify-TRIAL-0.24">Crypt-OpenSSL-Verify-TRIAL</a></td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>0.20</td>
<td>OpenSSL Verify certificate verification in XS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PAWELKROL/D64-Disk-Layout-0.01">D64-Disk-Layout</a></td>
<td><a href="https://metacpan.org/author/PAWELKROL">PAWELKROL</a></td>
<td>0.01</td>
<td>Handling entire Commodore (D64/D71/D81) disk image data in pure Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-Constraints-NumberPhone-0.04">Data-FormValidator-Constraints-NumberPhone</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.04</td>
<td>Data constraints, using Number::Phone</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-Filters-WikiTrim-0.03">Data-FormValidator-Filters-WikiTrim</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>Trim filter for wikitext fields</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Data-FormValidator-URI-0.03">Data-FormValidator-URI</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.03</td>
<td>URI constraint/filter for Data::FormValidator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Data-Prepare-0.001">Data-Prepare</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>prepare CSV (etc) data for automatic processing</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BSHIELDS/Data-QuickMemoPlus-Reader-0.01">Data-QuickMemoPlus-Reader</a></td>
<td><a href="https://metacpan.org/author/BSHIELDS">BSHIELDS</a></td>
<td>0.01</td>
<td>Extract text from QuickMemo+ LQM export files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-Plugin-EnsureMinimumPerl-0.01">Dist-Zilla-Plugin-EnsureMinimumPerl</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Ensure that you have specified a minimum version of Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-Plugin-GitHub-RequireGreenBuild-0.01">Dist-Zilla-Plugin-GitHub-RequireGreenBuild</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Require a successful GitHub Actions workflow run</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/Dist-Zilla-Plugin-SyncCPANfile-0.01">Dist-Zilla-Plugin-SyncCPANfile</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Sync a cpanfile with the prereqs listed in dist.ini</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOMM/Dist-Zilla-PluginBundle-Author-DOMM-0.906">Dist-Zilla-PluginBundle-Author-DOMM</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>0.906</td>
<td>Dist::Zilla config suiting my needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOMM/Dist-Zilla-PluginBundle-DOMM-0.900">Dist-Zilla-PluginBundle-DOMM</a></td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>0.900</td>
<td>Dist::Zilla config suiting my needs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AMICELI/Fancazzista-Scrap-0.01">Fancazzista-Scrap</a></td>
<td><a href="https://metacpan.org/author/AMICELI">AMICELI</a></td>
<td>0.01</td>
<td>Scrap websites and reddit posts</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Feature-Compat-Try-0.01">Feature-Compat-Try</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>make try/catch syntax available</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/File-FormatIdentification-RandomSampling-0.005">File-FormatIdentification-RandomSampling</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.005</td>
<td>methods to identify content of device o media files using random sampling</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Future-IO-Impl-UV-0.01">Future-IO-Impl-UV</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>implement Future::IO using UV</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LORENZO/Games-Dice-Roller-0.01">Games-Dice-Roller</a></td>
<td><a href="https://metacpan.org/author/LORENZO">LORENZO</a></td>
<td>0.01</td>
<td>a full featured dice roller system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMERELO/GitHub-Actions-0.0.3">GitHub-Actions</a></td>
<td><a href="https://metacpan.org/author/JMERELO">JMERELO</a></td>
<td>0.0.3</td>
<td>Work in GitHub Actions using Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XAOC/Gtk2-Html2-0.05">Gtk2-Html2</a></td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>0.05</td>
<td>DEPRECATED Perl bindings for the GtkHtml2 Html display widget</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XAOC/Gtk2-Recent-0.052">Gtk2-Recent</a></td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>0.052</td>
<td>(DEPRECATED) Perl wrapper to the recent files spec Gtk</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/HTML-Make-Calendar-0.00_01">HTML-Make-Calendar</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Make an HTML calendar</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/HTML-Make-Page-0.00_01">HTML-Make-Page</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>Automate making HTML &lt;head&gt; and &lt;body&gt;</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Image-PNG-Util-0.00_01">Image-PNG-Util</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>manipulate the image data part of PNGs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/JSON-Server-0.00_01">JSON-Server</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>JSON-only server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RCOSCALI/JSON_minify-1.0">JSON_minify</a></td>
<td><a href="https://metacpan.org/author/RCOSCALI">RCOSCALI</a></td>
<td>1.0</td>
<td>minify a JSON and also remove comments</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRTASTIC/Kelp-Module-Raisin-1.00">Kelp-Module-Raisin</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>Raisin integration with Kelp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRTASTIC/Kelp-Module-Sereal-1.00">Kelp-Module-Sereal</a></td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>1.00</td>
<td>Sereal encoder / decoder for Kelp</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Lingua-String-0.01">Lingua-String</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Class to contain a string in many different languages</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AFAN/Loctools-Markdown-0.9-TRIAL">Loctools-Markdown</a></td>
<td><a href="https://metacpan.org/author/AFAN">AFAN</a></td>
<td>0.9</td>
<td>Localization-focused Markdown parser/generator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Module-List-More-Patch-Hide-0.001">Module-List-More-Patch-Hide</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Hide some modules from Module::List::More</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JHTHORSEN/Mojo-UserAgent-SecureServer-0.01">Mojo-UserAgent-SecureServer</a></td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>0.01</td>
<td>Secure application server for Mojo::UserAgent</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojolicious-Matterbridge-0.01">Mojolicious-Matterbridge</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>a simplistic module to connect to chat servers via matterbridge</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Mojolicious-Plugin-Component-0.01">Mojolicious-Plugin-Component</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Module-based Component Renderer</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AJNN/Neo4j-Types-1.00">Neo4j-Types</a></td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1.00</td>
<td>Common Neo4j type system</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FSM/Net-OBS-Client-0.0.5">Net-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/FSM">FSM</a></td>
<td>v0.0.5</td>
<td>simple OBS API calls</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/OTRS-OPM-Validate-0.01">OTRS-OPM-Validate</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Validate .opm files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VERMAUDH/Pod-Modifier-1">Pod-Modifier</a></td>
<td><a href="https://metacpan.org/author/VERMAUDH">VERMAUDH</a></td>
<td>1</td>
<td>Modify/ add to an existing POD dynamically</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Pulsar-WebSocket-Client-0.01">Pulsar-WebSocket-Client</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>Perl client for Apache Pulsar WebSocket API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-BorderStyle-0.001">Sah-Schemas-BorderStyle</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to BorderStyle</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-ColorTheme-0.001">Sah-Schemas-ColorTheme</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Sah schemas related to ColorTheme</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Simd-Avx512-20210121">Simd-Avx512</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210121</td>
<td>Simd::Avx512 – Emulate SIMD instructions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-VideoTag-0.0100">Statocles-Plugin-VideoTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Change video file anchors to video elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CAMTAUXE/Store-Directories-0.1">Store-Directories</a></td>
<td><a href="https://metacpan.org/author/CAMTAUXE">CAMTAUXE</a></td>
<td>0.1</td>
<td>Manage a key/value store of directories with controls for</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Finally-0.01">Syntax-Keyword-Finally</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>add FINALLY phaser block syntax to perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Table-Trans-0.00_01">Table-Trans</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>simple translations for templating</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Table-Translations-0.00_01">Table-Translations</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>simple translations for templating</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-Lookup-0.001">TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SNEZ/Task-OpenTracing-v0.0.1">Task-OpenTracing</a></td>
<td><a href="https://metacpan.org/author/SNEZ">SNEZ</a></td>
<td>v0.0.1</td>
<td>install all the OpenTracing modules</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GUGOD/Task-PerlCriticAllPolicies-0.01">Task-PerlCriticAllPolicies</a></td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>0.01</td>
<td>A Task for installing all Perl::Critic policies at once.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Template-Plugin-StripComments-1.02">Template-Plugin-StripComments</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1.02</td>
<td>Template Toolkit filter to strip comment blocks</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MERKYS/Text-BibTeX-Validate-0.1.0">Text-BibTeX-Validate</a></td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>0.1.0</td>
<td>validator for BibTeX format</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Text-LooksLike-0.00_01">Text-LooksLike</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.00_01</td>
<td>make guesses about snippets of text</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ELIONORA/Text-Unmunch-0.1">Text-Unmunch</a></td>
<td><a href="https://metacpan.org/author/ELIONORA">ELIONORA</a></td>
<td>0.1</td>
<td/>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/USCIS-Case-0.01">USCIS-Case</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to check USCIS case status. More features would be added in the future.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Random-PERLANCAR-0.002">UUID-Random-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Another implementation of UUID::Random</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/UUID-Tiny-Patch-UseMRS-0.001">UUID-Tiny-Patch-UseMRS</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Make UUID::Tiny use Math::Random::Secure's rand()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WHO-GrowthReference-GenChart-0.001">WHO-GrowthReference-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create WHO growth chart ()</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WHO-GrowthReference-GenTable-0.001">WHO-GrowthReference-GenTable</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Add WHO reference fields to table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/WebService-Postex-0.001">WebService-Postex</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Postex WebService implemenation in Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBIB/Wireguard-WGmeta-0.0.6">Wireguard-WGmeta</a></td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>v0.0.6</td>
<td>An approach to add metadata to the main Wireguard config</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-EN-ColorName-WWW-0.003">WordList-EN-ColorName-WWW</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Color names from Graphics::ColorNames::WWW</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ID-ColorName-HTML_ID-0.002">WordList-ID-ColorName-HTML_ID</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>List of color names from Graphics::ColorNames::HTML_ID</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>84</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>48</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>17</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>6</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>4</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/BRTASTIC">BRTASTIC</a></td>
<td>2</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/DOMM">DOMM</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DBAURAIN">DBAURAIN</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/XAOC">XAOC</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>1</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/AMICELI">AMICELI</a></td>
<td>1</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/JDEGUEST">JDEGUEST</a></td>
<td>1</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/ELIONORA">ELIONORA</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/PAWELKROL">PAWELKROL</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/JJNAPIORK">JJNAPIORK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/AFAN">AFAN</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/GUGOD">GUGOD</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/AJNN">AJNN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/JHTHORSEN">JHTHORSEN</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/MERKYS">MERKYS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/ATRODO">ATRODO</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/SNEZ">SNEZ</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/BSHIELDS">BSHIELDS</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/TIMLEGGE">TIMLEGGE</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/NMELNICK">NMELNICK</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/FSM">FSM</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/TOBIB">TOBIB</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/RCOSCALI">RCOSCALI</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/CAMTAUXE">CAMTAUXE</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/LORENZO">LORENZO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/VERMAUDH">VERMAUDH</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/JV">JV</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/OELE">OELE</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/JMERELO">JMERELO</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-CPANModules-ContainingJustData PERLANCAR 0.002 Modules that just contain data Acme-CPANModules-PERLANCAR-Forked PERLANCAR 0.002 List of my modules which are forked from others Acme-CPANModules-UUID PERLANCAR 0.001 Modules that can generate immutable universally unique identifier (UUIDs) Acme-ConspiracyTheory-Random TOBYINK 0.001 random theories Acme-STEVEB STEVEB 0.43 One line description AnyEvent-Discord NMELNICK 0.1 Provides an AnyEvent interface to … <a href="https://perlancar.wordpress.com/2021/02/01/list-of-new-cpan-distributions-jan-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jan 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1935</id>
    <published>2021-02-01T00:53:24Z</published>
    <updated>2021-02-01T00:53:24Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
  <title>TPF Meeting Minutes for December 2020</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/meeting-2020-12"/>
  <id>tag:news.perlfoundation.org,2021-01-31:/post/meeting-2020-12</id>
  <published>2021-01-31T11:27:49</published>
  <updated>2021-01-31T11:27:49</updated>
  <summary>
  <![CDATA[
     TPF Board members and the community leaders meet every month and here are the minutes from the December 2020 meeting. Part 1 Community Attendees Board: Dave Rolsky, Stuart Mackintosh, Ricardo Signes, Curtis Poe, Dan Wright Community leaders: Todd Rinaldo, JJ Merelo, Daniel Sockwell, Jason Crome, Andrew Solomon, Mark Keating, Alex Beamish, Nigel Hamilton Admin: Nic Evans Main session Marketing, Mark Keating Had conversations with Gary Beckwith. He has lots to 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Meetings" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>TPF Board members and the community leaders meet every month and here are the minutes from the December 2020 meeting.</p>

<h1>Part 1 - Community</h1>

<h2>Attendees</h2>

<ul>
<li>Board: Dave Rolsky, Stuart Mackintosh, Ricardo Signes, Curtis Poe, Dan Wright</li>
<li>Community leaders: Todd Rinaldo, JJ Merelo, Daniel Sockwell, Jason Crome, Andrew Solomon, Mark Keating, Alex Beamish,  Nigel Hamilton</li>
<li>Admin: Nic Evans</li>
</ul>

<h2>Main session</h2>

<h3>Marketing, Mark Keating</h3>

<ul>
<li>Had conversations with Gary Beckwith. He has lots to contribute regarding surveys. Need a quick survey ref TPF name - we need people's feedback in their own words, and he helps us achieve that.</li>
<li>Supporting projects and the languages and supporting community projects are the key things people are interested in. Going to get a survey out over Christmas.</li>
<li>Stuart: we need to ensure Nigel's perspective is considered in terms of trademark and branding.</li>
<li>Need a brand that is identifiable to us and then we can move on in terms of sites that are recognised as Perl resources.</li>
<li>When we do bring new people in we need to share the right resources with them (Recognised resources)</li>
<li>Some overlap between marketing and sponsorship - would like to get a meeting with the sponsorship team to talk about working together.</li>
<li>Nige: we were trying to tackle the "Perl is dead" theme and did the Raku advent calendar</li>
</ul>

<h3>Compliance / OpenChain / SPDX, Stuart Mackintosh</h3>

<ul>
<li>Ability to determine your licence position, technical project Stuart is keen to drive forward - if we can bring this structure into Perl / CPAN, that puts perl at the front of the line of professional software languages. Keen to get people's views/thoughts. Continue conversation offline</li>
<li>Curtis: I would argue it is a good theory but my clients don't care - it's not a good thing they don't care.</li>
<li>Stuart: It's about the ability to be auditable. By bringing in SPDX it helps auditability.</li>
<li>Dave: At ActiveState we have customers who really do care about this and there is a lot of interest. I could perhaps get time to do some work on it myself because it would be beneficial for us. A lot of companies care.</li>
<li>Stuart: Oracle v Google legal news - The outcome of this will that corporates have to know where the licence is and it can be audited. Something to watch. Project I am working with is funded by Linux Foundation.</li>
</ul>

<h3>TPC Conferences, Todd Rinaldo</h3>

<ul>
<li>Houston conference being moved to June 2022, Contract to be signed and deposit to be paid. </li>
<li>Board to confirm approval</li>
<li>Todd: should TPC Board member sign this? -&gt; Discussion with Board to follow.</li>
<li>We need to communicate there will be no in person conference - planning repeat of last years. Beginning planning in next month or so (after Christmas)</li>
<li>Stuart advised Todd to look at FOSDEM</li>
<li>Stuart: we all need to look at how we can amplify messages - all get involved in sharing news - make sure information gets out.</li>
<li>Mark: needs to get to all different groups outside of our own, via LinkedIn, FaceBook, Twitter</li>
<li>Stuart: need to consider structure</li>
<li>Mark: Need a channel where we say about sharing messages - act on good faith</li>
</ul>

<h3>FOSDEM, JJ Merelo</h3>

<ul>
<li>There are 6 references to Perl dev room in Twitter - we are failing - we are missing</li>
<li>It is important to submit talks.</li>
<li>Urged people to attend FOSDEM, to submit talks</li>
<li>As it is online we have a unique opportunity for all international coders to get involved and share passion about Perl and Raku</li>
<li>Currently have just 2 submissions - both are Raku. Need to get Perl speakers.</li>
<li>Stuart: FOSDEM will be very different - there is just one week to submit a paper - you don't need to have written it - just need a title and how long you need to reserve your slot. Then have one month to record slot and send to FOSDEM to publish - live QA after then hallway track.</li>
<li>Stuart will get something together to explain what people need to so - look at existing call for papers and edit, or do a new article</li>
<li>Stuart and JJ are official Perl/Raku coordinators so get to choose the papers. We can also help people work way around FOSDEM and processes and putting together a talk.</li>
<li>We have one day - would be great to have it packed full of Perl and Raku content.</li>
</ul>

<h3>Grants, Jason Crome</h3>

<ul>
<li>Most recent grant period - November - no grant submissions</li>
<li>Stats for last three years:
<ul>
<li>2018 - $32.5k proposed, $27.5k granted (approx, same below)</li>
<li>2019 - $23.5k proposed, $13.5k granted</li>
<li>2020 - $45.5k proposed, $12k granted</li>
</ul></li>
<li>Most recently completed was Jason Mackintosh </li>
<li>This year was highest of the last three years grant requests. Summary of activity to be published on TPF Blog </li>
<li>I think $20,000 a year is a good amount, ideally $25k - if looking to increase activity.</li>
<li>May need to update Charter of Grants committee to better reflect what we do. 
<ul>
<li>Will be a focus of the grants committee for 2021</li>
</ul></li>
<li>Stuart to take amount to agree for grants to the Board.</li>
</ul>

<h3>Newcomers, Andrew Solomon</h3>

<ul>
<li>We have no place for newbies to engage with experienced coders - we are looking at what we can do. </li>
<li>I have been talking to Gary to find out who the newbies are, what they need to get support, what level they are at within Perl, what chat technology they use, etc. </li>
<li>Once a survey drafted, who needs to approve it? When can it go out?</li>
<li>Stuart: no reason it cannot be done - asked Board if needed a formal approach</li>
<li>Dave: Beyond the survey we need to think about two other things:
<ol>
<li>What sort of of commitment are we making in terms of technology - is there a financial consideration; </li>
<li>How do me manage moderation?</li>
</ol></li>
<li>Stuart to share survey with Board for feedback.</li>
</ul>

<h3>Sponsorship, Alex Beamish</h3>

<ul>
<li>Been crafting message for corporates</li>
<li>Not paid attention to personal donations - need conversation with Mark about that - an interesting angle. Been concentrating on corporations.</li>
<li>Not sure we have infrastructure to do same as Python to have a major push.</li>
<li>Want to use 2021 to really push sponsorship</li>
<li>Dave: I have a lot of experience with individual fundraising so can help the sponsorship committee</li>
<li>Andrew: happy to help through Geekuni in a similar way as Python</li>
<li>Stuart: Does Board need to consider if there should be a target for sponsorship each year.</li>
</ul>

<h3>Legal update, Nigel Hamilton</h3>

<ul>
<li>Been looking at Raku trademark guidelines</li>
<li>EU trademark application - refused late November. Not sure if we had correspondence. Digging deeper with lawyers involved and following up in next few days.</li>
<li>UK trademark is fine - and currently in application in US.</li>
<li>Brexit not an issue with trademark.</li>
</ul>

<h3>Raku update, Daniel Sockwell</h3>

<ul>
<li>Had Raku Steering Council and agreed code of conduct - needs some revisions before submitting publicly to Raku community as a whole.</li>
<li>Agreed to meet roughly monthly. Next meeting early January 2021</li>
<li>Been doing Raku Advent Calendar - JJ has really spearheaded this. Been successful looking at Wordpress stats. We did lose viewers with shift from Perl 6 to Raku advent calendar, but this year we are 30% above we were were at end of December last year.</li>
<li>Coding challenge going on - has drawn a number of people from outside of the Raku community to try out raku.</li>
<li><p>Had successful outreach. </p></li>
<li><p>Stuart: what does Raku community need from Perl Foundation?</p></li>
<li>Daniel - As of now we are continuing to benefit from support of trademark work and grants committee. I will raise it at next steering council meeting.</li>
</ul>

<h3>Perl Governance,  Rik Signes</h3>

<ul>
<li>Voting underway for last 16 days. We haven't had all votes yet. </li>
<li>As far as language track - little has happened on mailing list</li>
</ul>

<h3>Perl infrastructure, Rik Signes</h3>

<ul>
<li>Infrastructure groups starting to become more active again.</li>
<li>Looking to set up some compute for hosting things.   (That is, cloud hosting for software, like Digital Ocean, Linode, and Azure, all of whom Rik has approached.)</li>
<li>What are we going to do and what are going to back burn.</li>
<li>Need to look at rt.cpan.org - one of our members thinks they can do something.</li>
<li>Discussion around dromedary.  "dromedary" is a very powerful server used by some of the Perl 5 developers for testing and other development work.  What will it be?</li>
<li><p>Depends on what people want. We'll be following up in January.</p></li>
<li><p>Dan: we like CPAN mirror and want to keep it - is it going to be a problem</p></li>
<li>Rik: people will still be able to mirror CPAN.</li>
</ul>

<h3>End of year message from Stuart</h3>

<ul>
<li>What is most important to you? I'd like to hear what you would like to be included in that message? Suggestions?</li>
<li>Stuart to write blog and publish</li>
</ul>

<h3>2021 meeting schedule planning and publication plan</h3>

<ul>
<li>Need to schedule next 12 months.</li>
<li>All OK with the time we currently hold it.</li>
<li>Nic to do calendar and share with Board for approval before publishing - publish full schedule on Perl Foundation website.</li>
</ul>

<h1>Part 2 - Board</h1>

<h2>Attendees</h2>

<ul>
<li>Stuart Mackintosh</li>
<li>Dan Wright</li>
<li>Curtis Poe</li>
<li>Dave Rolsky</li>
<li>Makoto Nozaki</li>
<li>Rik Signes</li>
<li>Nic Evans (Admin)</li>
</ul>

<h2>Main session</h2>

<h3>Grants</h3>

<ul>
<li>Need value proposition / business case</li>
<li>Budget</li>
<li>Guidance - is there a threshold, should smaller grants be easier to get than bigger grants. Tiered approach.</li>
<li>Level of grants versus income needs to be considered.</li>
<li>Need to look at value proposition and business case - what's the ROI. Can't just say it will be a great bit of code - need to say what value it will bring, how it will be used.</li>
<li>Perhaps need more dialogue with Jason to understand better </li>
<li>Should we only look at grants that benefit the perl community or look at grants that support a general problem that needs to be solved. Non-technical people could submit applications for grants to be used to solve a problem and our community use the grant to fix it.</li>
<li>Setting budget seems to be right thing to do - Look at $25k as starting point for 2021 - we can't give them autonomy then not give them a decent sized budget (Awarded in the financial year, not necessarily paid).</li>
<li>Outside of vote we need to look at how grants are reviewed, business cases etc.</li>
</ul>

<h3>Sponsorship target</h3>

<ul>
<li>Inform Alex of sponsorship target $200k</li>
</ul>

<h3>Contracts / Authority to sign, Todd Rinaldo</h3>

<ul>
<li>Has concerns about signing contracts under TPF name as not a Board member. Concerned about legal exposure. Should a member of the Board sign conference contracts?</li>
<li>ACTION: Insurance review to ensure we are covered in the activities we carry out</li>
<li>Board happy to sign contract for Houston 2022  - need Todd to send through.</li>
</ul>

<h3>Advisory board</h3>

<ul>
<li>Mailing list  - no obligations. Need to get going with building it - Web content is published: https://www.perlfoundation.org/advisory_board.html</li>
</ul>

<h3>Procedure for purchasing infrastructure items</h3>

<ul>
<li>Rik unsure of how to purchase items/services.</li>
<li>Small items can be purchased and claim back costs. Alternatively credit card is possible</li>
</ul>

<h3>Thanks to Dan for service to the Board</h3>

    ]]>
  </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 097</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/31#pwc097" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given string &lt;code&gt;$S&lt;/code&gt; containing alphabets A..Z only and a number &lt;code&gt;$N&lt;/code&gt;. Write a script to encrypt the given string &lt;code&gt;$S&lt;/code&gt; using Caesar Cipher with left shift of size &lt;code&gt;$N&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub caesar_cypher{
    my($s, $n) = @_;
    my @cypher = map { unless(ord($_) == ord(' ')){
                           my $x = ((ord($_) - $n) &lt; ord('A')?(ord($_) - $n + 26):(ord($_) - $n)); 
                           chr($x);
                       }
                       else{
                           $_
                       }
                 } split(//, $s);
    return join("", @cypher);
}

MAIN:{
    my($S, $N);
    $S = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";
    $N = 3;
    print "$S\n";
    print caesar_cypher($S, $N) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The basic approach here is pretty much the straightforward one: use the ascii values for the characters and subtract &lt;code&gt;$n&lt;/code&gt;. In Perl we use the &lt;a href="https://perldoc.perl.org/functions/ord"&gt;ord&lt;/a&gt; function to do this and the &lt;a href="https://perldoc.perl.org/functions/chr"&gt;chr&lt;/a&gt; to go in the other direction, ascii value to character. The only thing we really need to be careful of is if subtracting &lt;code&gt;$n&lt;/code&gt; takes us outside the ascii range for upper case letters, then we need to add 26 to get back in range.&lt;/p&gt;
&lt;p&gt;Certain style instructions have been burned into my brain over the years and I find them almost impossible to deviate from. The one that applies here is &lt;em&gt;Whenever possible do not use numeric literals. They are often poorly documented and become “magic numbers”, and make code readability and future debugging unnecessarily difficult.&lt;/em&gt; So it is in that spirit that I write, for example, &lt;code&gt;ord(' ')&lt;/code&gt; instead of just &lt;code&gt;32&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary string &lt;code&gt;$B&lt;/code&gt; and an integer &lt;code&gt;$S&lt;/code&gt;. Write a script to split the binary string &lt;code&gt;$B&lt;/code&gt; of size &lt;code&gt;$S&lt;/code&gt; and then find the minimum number of flips required to make it all the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use feature "bitwise";

sub substrings{
    my($d, $s) = @_;
    my @substrings;
    for(my $i = 0; $i &lt; length($d); $i+=$s){
        push @substrings, substr($d, $i, $s);
    }    
    return @substrings;
}

sub min_flips{
    my($d, $s) = @_;
    my @flips;
    my @substrings = substrings($d, $s);
    for my $digits (@substrings){
        my $flip_count = 0;
        map { $flip_count += unpack("%32b*", $digits ^. $_) } @substrings;
        push @flips, $flip_count;
    }
    return [sort {$a &lt;=&gt; $b} @flips]-&gt;[0];
}

MAIN:{
    my($B, $S);
    $B = "101100101";
    $S = 3;
    print min_flips($B, $S) . " flips\n";
    $B = "10110111";
    $S = 4;
    print min_flips($B, $S) . " flips\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
1 flips
2 flips
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;substrings&lt;/code&gt; function is just a convenient wrapper around the code necessary to break the string into the right sized chunks. The assumption is that the string is evenly divisible into chunks of size &lt;code&gt;$s&lt;/code&gt;. If we were not making this assumption we would need to add some &lt;em&gt;zero padding&lt;/em&gt; for any unevenly sized substring.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;use feature "bitwise";&lt;/code&gt; is present the &lt;code&gt;^.&lt;/code&gt; is defined and the operands to &lt;code&gt;^.&lt;/code&gt; are taken to be bit strings and the result is itself a bit string.&lt;code&gt;min_flips&lt;/code&gt; does a bitwise xor operation, pairwise comparing each substring in a &lt;code&gt;map&lt;/code&gt;. Since xor is 1 only when the bits are different the result is a bit string of set bits, the ones needed to be flipped. &lt;code&gt;unpack&lt;/code&gt; is used to sum these, and the result added &lt;code&gt;$flip_count&lt;/code&gt; which is then pushed into an array. The minimum number of flips is determined by the smallest number in that array. The bitwise feature was introduced in Perl 5.22 and graduated from experimental status in Perl 5.28.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.asciitable.com"&gt;ASCII Table&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/XOR.html"&gt;xor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlop#Bitwise-Or-and-Exclusive-Or"&gt;Perl’s xor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/feature#The-%27bitwise%27-feature"&gt;bitwise feature&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc097</id>
    <published>2021-01-31T11:11:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 097</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-097-3ag8" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-097/">Challenge 097</a></p>

<h1>
  <a href="#task-1-caesar-cipher" class="anchor">
  </a>
  TASK #1 › Caesar Cipher
</h1>

<h2>
  <a href="#the-task" class="anchor">
  </a>
  The task
</h2>

<p>You are given string <code>$S</code> containing alphabets A..Z only and a number <code>$N</code>.</p>

<p>Write a script to encrypt the given string <code>$S</code> using <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar Cipher</a> with left shift of size <code>$N</code>.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>First thing to note is the <a href="https://perldoc.perl.org/perlop#tr">tr function</a> does not support string interpolation, as the translation table is built at compile time.</p>

<p>I broke down the task into these steps:</p>

<ul>
<li>Check the string only contains A - Z and spaces. Check the number is an integer between 1 and 25.</li>
<li>Use <code>substr</code> to create the cipher table</li>
<li>Create a <code>%mapping</code> hash mapping plain text characters to their cipher equivalent.</li>
<li>Use split, map and join to generate the cipher text, and then display it</li>
</ul>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG" 3
QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD

» ./ch-1.pl "QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD" 23
THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-binary-substrings" class="anchor">
  </a>
  TASK #2 › Binary Substrings
</h1>

<h2>
  <a href="#the-task" class="anchor">
  </a>
  The task
</h2>

<p>You are given a binary string <code>$B</code> and an integer <code>$S</code>.</p>

<p>Write a script to split the binary string <code>$B</code> of size <code>$S</code> and then find the minimum number of flips required to make it all the same.</p>

<h2>
  <a href="#the-solution" class="anchor">
  </a>
  The solution
</h2>

<p>This is one of those tasks where the solution I submit isn't the fastest one, but one that is well explained.</p>

<ol>
<li>I first check that the binary value contains only 0's and 1's. I also check the second value is a positive integer. While the tasks that $S is an integer, a zero or negative integer is nonsensical in this sense.</li>
<li>I add leading zeros to the binary value if it's length is not dividable by the integer. I think use <code>unpack</code> to break up the binary value into the array <code>@chunks</code>
</li>
<li>Next I work through each character position determining whether the bit is set (1) or not set (0) more frequently. If it's half and half, I use '0' but could use '1' as it would give the same result. The resulting value is stored as <code>$most_used</code>
</li>
<li>Finally, I go through each <code>@chunk</code> and each character, and add to the <code>$flips</code> value if the bit is different from that in the <code>$most_used</code> string. I then display the minimum number of flips required.</li>
</ol>

<p>This code could more concise by skipping the last step and doing the calculations in the third step. For example, if the first character was '0, 1, 1, 1' then we would only need one flip to make them all the same.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl 101100101 3
1

» ./ch-2.pl 10110111 4
2
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-097-3ag8</id>
    <published>2021-01-31T13:11:01Z</published>
    <updated>2021-01-31T13:11:01Z</updated>
    <category term="perl"/>
    <category term="theweeklychallenge"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl weekly challenge 97</title>
    <link rel="alternate" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-97.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10063</id>
    <published>2021-01-30T09:42:31Z</published>
    <updated>2021-01-31T03:11:19Z</updated>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    <category term="pwc" label="PWC" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>Here are solutions to this weeks challenges from the <a href="https://perlweeklychallenge.org/">Perl Weekly Challenge</a>.</p>

<p>You can find my full code on
<a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-097/james-smith/perl">Github</a></p>

<h3>Challenge 1</h3>
You are given string <tt>$S</tt> containing alphabets <tt>A</tt>..<tt>Z</tt> only and a number <tt>$N</tt>. Write a script to encrypt the given string <tt>$S</tt> using Caesar Cipher with left shift of size <tt>$N</tt>.

<h4>Solution</h4>
<pre><code>
sub caesar {
  return $_[0] =~ s{([A-Z])}{chr 65+(-65-$_[1]+ord$1)%26}regex;
}
</code></pre>

<p>This is a simple one liner - but has some neat features - other than using "regex" for the switches, although most are important...</p>

<ul>
	<li>r - return value rather than substitute in original string</li>
	<li>e - evaluate replace rather than use string</li>
	<li>g - repeat over all characters</li>
	<li>x - not needed (comments in match) - but looks good!</li>
</ul>

<p>In the <tt>eval</tt>ed replacement code - there is some clever ordering of values to reduce the need for brackets...</p>

<ul>
  <li><tt>65</tt> is at the front of the <tt>chr</tt> block as needing the bracket for the <tt>%26</tt> - it would be evaluated as the bracket wrapping the parameters for <tt>chr</tt> .. so would evaluate as:
<ul>
  <li><tt><strong>( chr(-65-$_[1]+ord$1) )</strong> %26+65</tt></li>
</ul>
</li>
<li><tt>-65</tt> is at the start of the bracket - to allow us to not use brackets for the <tt>ord</tt> - if it was at the beginning you would need ord as it would evaluate ord <tt>$1 - 65 - $_[1]</tt>  as
<ul><li><tt>ord( <strong>$1 - 65 - $_[1]</strong> )</tt></li></ul>
</li>
</ul>

<h3>Binary Substrings</h3>
<p>You are given a binary string <tt>$B</tt> and an integer <tt>$S</tt>.</p>
<p>Write a script to split the binary string <tt>$B</tt> of size <tt>$S</tt> and then find the minimum number of flips required to make it all the same.</p>

<h4>Solution</h4>

<p>As the first problem was a good one for applying "<em><strong>Golfing</strong></em>" techniques to it - I thought I would play along and try the second one....</p>

<pre><code>
sub min_flips {
  [
    local $/,
    local $\= length( $_[0] ) / $_[1],
    map { $/ = !$_->[0] || $_->[1] < $/ ? $_->[1] : $/ }
    map { [ $_->[0], ( $_[0] ^ $_->[1] ) =~ y/\1/\1/ ] }
    map { [ $_->[0], $_->[1] x $\ ]                    }
    map { [ $_,      substr$_[0], $_, $_[1] ]          }
    map { $_ * $_[1]                                   }
    0 .. $\-1
  ]->[-1]
}
</code></pre>

<p><strong>Notes</strong></p>

<p>
  This was designed to serve as an example of perl idioms that other programmers may find difficult to understand - and so I tried to put as many of them in a relatively short function.... a discussion thread on the <a href="https://www.facebook.com/groups/perlprogrammers">Perl programmers</a> facebook group.
</p>

<ul>
  <li>One statement functions are a "lovely" perl concept - even if they can get a bit difficult to read....</li>
  <li>In perl there are special variables which give you information about the current process, or allow us to alter the functionality. To avoid creating variables I use these in the function. If you change these you can change how the code works - but here we use "local" copies - so that when we return from the function (block) they revert to their normal values - so we don't introduce any side-effects of our code
<ul>
  <li><tt>$/</tt> - normally the input record separator - we will use for the minimum value</li>
  <li><tt>$\</tt> - normally the output record separator - we will use for the number of chunks</li>
</ul>
  </li>
  <li><tt>@_</tt> - the list of parameters passed to a function - in this case <tt>$_[0]</tt> is the string and <tt>$_[1]</tt> is the block size</li>
  <li>Chained maps - we can simplify the maps by chaining them together, here we break it down into 5 separate stages - remember we have to read the code backwards. So we will look at the separate blocks of code working upwards...<ul>
  <li><tt>0..$\-1</tt> - this returns a list of indices for the substrings</tt>
  <li><tt>map { $_*$_[1] }</tt> - this converts those indices into start locations (<tt>$_</tt> is the value of the element of variable that the <tt>map</tt> function is processing</li>
  <li><tt>map { [ $_, substr$_[0],$_,$_[1] ] }</tt> - this grabs the substring for the <em>n</em>th block - but keeps the start location as we will need it later... Here we see a map returning an arrayref - in subsequent requests - <tt>$_->[0]</tt> is the start offset of the block and <tt>$_->[1]</tt> is the property we are munging in this case the substring.
<br /><strong>You have to be careful here as <tt>$_[0]</tt> and <tt>$_->[0]</tt> look similar but are different</strong></li>
  <li><tt>map { [ $_->[0], $_->[1] x $\ ] }</tt> - this maps the string we just have to have the same length as our original string - by performing a perl "string multiplication" <tt>x</tt> </li>
  <li><tt>map { [ $_->[0], ( $_[0] ^ $_->[1] ) =~ y/\1/\1/ ] }</tt> - count the flips. Two perlisms here - we can use xor operator <tt>^</tt> on strings to xor the binary values of each character. <tt>y/../../</tt> - the translate operator returns the number of substitutions it makes - in this case we are substituting the ASCII character with decimal value of "1"... when the strings are same the byte value of the xor is 0 or "\0" and when they are different the value is 1 or "\1"</li>
  <li><tt>map { $/ = !$_->[0] || $_->[1] < $/ ? $_->[1] : $/  }</tt> - finally we keep the running total of the minimum value - Now this is why we kept the start of the block around - as the first time through the loop we have to define the minimum - if <tt>$_->[0]</tt> is zero then we assign <tt>$_->[1]</tt> to <tt>$/</tt> - we could have used the <tt>List::Util</tt> function <tt>min</tt> - but I try and avoid using external modules if I can...</li>
  </ul></li>
  <li>The list is the running minimums so we have to get the last element off the list - we do this with by wrapping the list in <tt>[ ]</tt> to make it an arrayref and then taking its last value <tt>[{list}]->[-1]</tt> perl indexes the last element as <tt>-1</tt>.</li>
  <li>And we return this value (implicit return)</li>
  <li>As the statement ends before the closing curly brace we don't need a semicolon {we aren't really sticking to PBP here anyway...!}</li>
</ul>]]>
        
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5805788118497084055</id>
    <published>2021-01-30T16:11:00.000+01:00</published>
    <updated>2021-01-30T16:11:10.093+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxvi) 17 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997002&lt;/strong&gt; on 2021-01-26&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.997000 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GUGOD/App-perlbrew-0.90' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::perlbrew&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Manage perl installations in your $HOME &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.89&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 166&lt;/li&gt;  &lt;li&gt;Previous version: 0.89 was 3 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.009' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.009&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.008 was 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/CROMEDOME/Dancer2-0.300005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Dancer2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightweight yet powerful web application framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.300005&lt;/strong&gt; on 2021-01-26&lt;/li&gt;  &lt;li&gt;Votes: 120&lt;/li&gt;  &lt;li&gt;Previous version: 0.300004 was 7 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-TimeZone-2.47' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::TimeZone&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Time zone object base class and factory &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.47&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 2.46 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/Graph-0.9717' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Graph&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - graph data structures and algorithms &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9717&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 0.9716 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphQL-0.46' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphQL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of GraphQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.46&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 17&lt;/li&gt;  &lt;li&gt;Previous version: 0.44 was 2 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-4.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON (JavaScript Object Notation) encoder/decoder &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.03&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 4.02 was 1 year, 11 months, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ISHIGAKI/JSON-PP-4.06' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::PP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON::XS compatible pure-Perl module. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.06&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 4.05 was 6 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/JSON-Validator-4.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;JSON::Validator&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Validate data against a JSON schema &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.13&lt;/strong&gt; on 2021-01-28&lt;/li&gt;  &lt;li&gt;Votes: 28&lt;/li&gt;  &lt;li&gt;Previous version: 4.10 was 3 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20210123' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210123&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20210120 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-8.72' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.72&lt;/strong&gt; on 2021-01-27&lt;/li&gt;  &lt;li&gt;Votes: 443&lt;/li&gt;  &lt;li&gt;Previous version: 8.71 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-3.41' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::OpenAPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - OpenAPI / Swagger plugin for Mojolicious &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.41&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 3.40 was 3 months, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Role-Tiny-2.002004' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Role::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Roles: a nouvelle cuisine portion size slice of Moose &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.002004&lt;/strong&gt; on 2021-01-24&lt;/li&gt;  &lt;li&gt;Votes: 62&lt;/li&gt;  &lt;li&gt;Previous version: 2.002003 was 13 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0930' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0930&lt;/strong&gt; on 2021-01-28&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0929 was 1 month, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/SQL-Abstract-More-1.37' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SQL::Abstract::More&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - extension of SQL::Abstract with more constructs and more flexible API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.37&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.34 was 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.07' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.07&lt;/strong&gt; on 2021-01-29&lt;/li&gt;  &lt;li&gt;Votes: 103&lt;/li&gt;  &lt;li&gt;Previous version: 5.06 was 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5805788118497084055/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5805788118497084055"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5805788118497084055"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxvi-17-cpan-great-modules-released.html" title="(cccxxvi) 17 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4665405017904009112</id>
    <published>2021-01-30T16:08:00.001+01:00</published>
    <updated>2021-01-30T16:08:06.158+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlii) metacpan weekly report - perl</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 63&lt;/p&gt;&lt;p&gt;Week's winner (+3):&lt;b&gt;&amp;nbsp;&lt;a href="https://metacpan.org/module/perl"&gt;perl&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/30 15:07:03 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Art::World" target="_blank"&gt;Art::World&lt;/a&gt; - Agents interactions modeling  ð¨&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coy" target="_blank"&gt;Coy&lt;/a&gt; - Like Carp only prettier&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::UUID::NCName" target="_blank"&gt;Data::UUID::NCName&lt;/a&gt; - Make valid NCName tokens which are also UUIDs.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::OnlineDDL" target="_blank"&gt;DBIx::OnlineDDL&lt;/a&gt; - Run DDL on online databases safely&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::App::Command::installdeps" target="_blank"&gt;Dist::Zilla::App::Command::installdeps&lt;/a&gt; - Install author dependencies for a Dist::Zilla dist&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSONLD" target="_blank"&gt;JSONLD&lt;/a&gt; - A toolkit for transforming JSON-LD data.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl::Mojo" target="_blank"&gt;RxPerl::Mojo&lt;/a&gt; - Mojo::IOLoop adapter for RxPerl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WebService::GoogleAPI::Client" target="_blank"&gt;WebService::GoogleAPI::Client&lt;/a&gt; - Google API Discovery and SDK&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::ImageMagick" target="_blank"&gt;Alien::ImageMagick&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::DBI" target="_blank"&gt;AnyEvent::DBI&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::WebDriver" target="_blank"&gt;AnyEvent::WebDriver&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Cmd" target="_blank"&gt;App::Cmd&lt;/a&gt; (+1=41)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::Context" target="_blank"&gt;App::Context&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::CPANtoRPM" target="_blank"&gt;App::CPANtoRPM&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=166)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bread::Board" target="_blank"&gt;Bread::Board&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Browser::Start" target="_blank"&gt;Browser::Start&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::DOES" target="_blank"&gt;Class::DOES&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Load" target="_blank"&gt;Class::Load&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny" target="_blank"&gt;Class::Tiny&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Coro::Mysql" target="_blank"&gt;Coro::Mysql&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::GUID" target="_blank"&gt;Data::GUID&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Recursive::Encode" target="_blank"&gt;Data::Recursive::Encode&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime" target="_blank"&gt;DateTime&lt;/a&gt; (+1=199)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class" target="_blank"&gt;DBIx::Class&lt;/a&gt; (+1=274)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::Class::Journal" target="_blank"&gt;DBIx::Class::Journal&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBIx::DataModel" target="_blank"&gt;DBIx::DataModel&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Camelcadedb" target="_blank"&gt;Devel::Camelcadedb&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=34)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Future::AsyncAwait" target="_blank"&gt;Future::AsyncAwait&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Graph" target="_blank"&gt;Graph&lt;/a&gt; (+1=23)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GraphQL" target="_blank"&gt;GraphQL&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=59)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::AllUtils" target="_blank"&gt;List::AllUtils&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Slice" target="_blank"&gt;List::Slice&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::SomeUtils" target="_blank"&gt;List::SomeUtils&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Dispatch" target="_blank"&gt;Log::Dispatch&lt;/a&gt; (+1=42)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Meerkat" target="_blank"&gt;Meerkat&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Menlo" target="_blank"&gt;Menlo&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=443)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::OpenAPI" target="_blank"&gt;Mojolicious::Plugin::OpenAPI&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDF::WebKit" target="_blank"&gt;PDF::WebKit&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+3=368)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl7::Handy" target="_blank"&gt;Perl7::Handy&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RxPerl" target="_blank"&gt;RxPerl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Session::Token" target="_blank"&gt;Session::Token&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Specio" target="_blank"&gt;Specio&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::HandlesVia" target="_blank"&gt;Sub::HandlesVia&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=130)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Most" target="_blank"&gt;Test::Most&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Spec" target="_blank"&gt;Test::Spec&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Unaccent::PurePerl" target="_blank"&gt;Text::Unaccent::PurePerl&lt;/a&gt; (+2=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::LineBreak" target="_blank"&gt;Unicode::LineBreak&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unicode::Tussle" target="_blank"&gt;Unicode::Tussle&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Workflow" target="_blank"&gt;Workflow&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4665405017904009112/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4665405017904009112"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4665405017904009112"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlii-metacpan-weekly-report-perl.html" title="(cdlii) metacpan weekly report - perl"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5721119042696929826</id>
    <published>2021-01-30T16:05:00.001+01:00</published>
    <updated>2021-01-30T16:05:57.226+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxvi) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-01-30 15:05:16 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65957561" target="_blank"&gt;Perl - evaluation order of list elements, with assignment inside the list&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65886868" target="_blank"&gt;Efficiently counting tokens column-wise in Bash/Awk/Perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65949533" target="_blank"&gt;Insert linebreak in a file after a string&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/4]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65864154" target="_blank"&gt;How to save the white spaces in emptied columns while reading a file?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65918624" target="_blank"&gt;Remove special character while reading file in perl&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65931084" target="_blank"&gt;Why does the package qualification of symbols result in less memory used, even if the symbols are imported locally?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65957545" target="_blank"&gt;How to do `defined` with a hash slice&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65887741" target="_blank"&gt;Converting CSV file to XML with Perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65910258" target="_blank"&gt;How to join lines in between 2 conditions&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65919825" target="_blank"&gt;perl die if a variable is set to undef, correct?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5721119042696929826/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5721119042696929826"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5721119042696929826"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxvi-stackoverflow-perl-report.html" title="(cdlxxvi) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Perl.com registry attack</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl.com-registry-attack"/>
  <id>tag:news.perlfoundation.org,2021-01-30:/post/perl.com-registry-attack</id>
  <published>2021-01-30T14:01:50</published>
  <updated>2021-01-30T14:01:50</updated>
  <summary>
  <![CDATA[
     The community-managed Perl.com domain has been subject to a registry attack. Up to date information is available on the The Perl NOC blog here and also The Perl Foundation twitter feed here. 
   ]]>
  </summary>
  <author>
    <name>Stuart J Mackintosh</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The community-managed Perl.com domain has been subject to a registry attack. </p>

<p>Up to date information is available on the <a href="https://log.perl.org/2021/01/perlcom-hijacked.html">The Perl NOC  blog here</a> and also The Perl Foundation <a href="https://twitter.com/perlfoundation">twitter feed here</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Release 1.50 of perl-workflow</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://github.com/jonasbn/perl-workflow">perl-workflow</a> is picking up <em>so much speed</em>  I did not have the time to write up a proper announcement of the 1.50 release.</p>

<p>This relases is continuing the cleaning and bug fixing.</p>

<p>Discussions have started on the general direction of perl-workflow and we are getting en route to flesh out a road map for a major release.</p>

<p>My hope it that the major release, is going to set a new direction for the perl-workflow framework and it might be cutting ties with some of the old ways of doings things, but we want to do this in good order and without breaking backwards compability without a proper deprecation cycle.</p>

<p>The plan is to have some of the upcoming releases, to be announcements of deprection notices, where the deprectation will be scheduled for exection down the line.</p>

<p><a href="https://github.com/jonasbn/perl-workflow">perl-workflow</a> has expended it number of project members with two. This gives us the ability to handle some of all the work more effectively and all changes can be reviewed, which is a major step up from one maintainer.</p>

<h2>
  <a href="#change-log-for-perlworkflow-release-150" class="anchor">
  </a>
  Change log for perl-workflow release 1.50
</h2>

<ul>
<li><p>Removal of unused dependency: Log::Dispatch, PR <a href="https://github.com/jonasbn/perl-workflow/pull/64">#64</a></p></li>
<li><p>Perl::Critic annotations addressed, enabled a few Perl::Critic tests, PR <a href="https://github.com/jonasbn/perl-workflow/pull/58">#58</a> and <a href="https://github.com/jonasbn/perl-workflow/pull/59">#59</a></p></li>
<li><p>Cleared out VSCode configuration file from distribution</p></li>
<li><p>Removed obsolete notes directory containing older coverage reports, now covered by Coveralls.io, PR <a href="https://github.com/jonasbn/perl-workflow/pull/63">#63</a></p></li>
<li><p>Removed obsolete prototypes directory containing minor examples for code constructs, PR <a href="https://github.com/jonasbn/perl-workflow/pull/62">#62</a></p></li>
<li><p>Addressed reports of failling tests from CPAN-testers for release 1.49, test suite now supports being run without <code>PERL_USE_UNSAFE_INC</code>, PR <a href="https://github.com/jonasbn/perl-workflow/pull/53">#53</a></p></li>
<li><p>Implementation of workaround for issue #10 with the failing observers, this is expected to be readdressed, as the observer implementation will be revisited, PR <a href="https://github.com/jonasbn/perl-workflow/pull/60">#60</a></p></li>
<li><p>Stop requiring a DSN to be configured when the DBI handle is sourced from elsewhere; instead, require a <code>driver</code> attribute to be specified, PR <a href="https://github.com/jonasbn/perl-workflow/pull/51">#51</a></p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-1-50-of-perl-workflow-2a1h</id>
    <published>2021-01-30T12:23:52Z</published>
    <updated>2021-01-30T12:23:52Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
  <title>Grant Proposal Recap: January 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposals_recap_jan_2021"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/grant_proposals_recap_jan_2021</id>
  <published>2021-01-28T22:38:01</published>
  <updated>2021-01-28T22:38:01</updated>
  <summary>
  <![CDATA[
     The Grants Committee has received the following grant proposals for the January 2021 round: Raku CI integration bot Maintaining Perl Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities. Review the proposals at their individual links and please comment there by February 5, 2021. The Committee members will start the voting process following that and the conclusion will be announced 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The Grants Committee has received the following grant proposals for the January 2021 round:
* <a href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot">Raku CI integration bot</a>
* <a href="https://news.perlfoundation.org/post/grant_proposal_maintaining_perl">Maintaining Perl</a></p>

<p>Before the Committee members vote on any proposal, we like to solicit feedback from the Perl and Raku communities.</p>

<p>Review the proposals at their individual links and please comment there by February 5, 2021. The Committee members will start the voting process following that and the conclusion will be announced shortly after.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Grant Proposal: Raku CI integration bot</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_raku_ci_integration_bot"/>
  <id>tag:news.perlfoundation.org,2021-01-28:/post/grant_proposal_raku_ci_integration_bot</id>
  <published>2021-01-28T22:29:18</published>
  <updated>2021-01-28T22:29:18</updated>
  <summary>
  <![CDATA[
     Synopsis Implement a software, named Raku CI Bot which can orchestrate the testing process of the Rakudo, NQP and MoarVM projects. Author Patrick Böker Why The three Rakudo core projects named above have a longish history of troubles with its testing infrastructure. Public and free CI platforms often inhibit one of several problems: Imposing limits on CPU or wallclock time Not supporting all needed platforms Unreliability Usability The proposed software 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <h2>Synopsis</h2>

<p>Implement a software, named Raku CI Bot (RCB), which can orchestrate the testing process of the Rakudo, NQP and MoarVM projects.</p>

<h2>Author</h2>

<p>Patrick Böker</p>

<h2>Why</h2>

<p>The three Rakudo core projects named above have a longish history of troubles with its testing infrastructure. Public and free CI platforms often inhibit one of several problems:</p>

<ul>
<li>Imposing limits on CPU or wallclock time</li>
<li>Not supporting all needed platforms</li>
<li>Unreliability</li>
<li>Usability </li>
</ul>

<p>The proposed software is designed to solve these problems:
* By polling GitHub and the CI platforms in addition to listening to a hook, changes a guaranteed to not get lost.
* By interfacing with both AzureCI and Open Build Service, we get access to a very wide range of platforms.
* By implementing several command words usable in PR comments, a <a href="https://github.com/Raku/problem-solving/pull/219/files">PR-only workflow</a> becomes a lot easier to adhere to.
* By persisting sources, build logs and artifacts test failures are easier to diagnose.</p>

<h2>Milestones</h2>

<ul>
<li>Setup
<ul>
<li>Set up a stack with Cro and Postgres and put it in a container.</li>
<li>Get it up and running on a publicly accessible temporary test server.</li>
</ul></li>
<li>Pan out the core model and class interfaces</li>
<li>Extend <a href="https://github.com/fayland/perl6-WebService-GitHub">WebService::GitHub</a> to cover the <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/checks">Checks</a>, <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls">Pulls</a> and <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#commits">Commits</a> APIs.</li>
<li>A <code>Webservice::OBS</code> module providing access to the relevant bits of the OBS API.</li>
<li>A <code>Webservice::AzurePipelines</code> module providing access to the <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/build/?view=azure-devops-rest-6.0">Build</a> API.</li>
<li>Implement the core model including tests and DB serialization</li>
<li>Implement logic to listen to GitHub hooks and poll filling a persisted work queue.</li>
<li>Azure CI:
<ul>
<li>A worker that pushes test jobs to the platform</li>
<li>Listen to a <a href="https://docs.microsoft.com/en-us/azure/devops/service-hooks/services/webhooks?view=azure-devops">platform hook</a></li>
<li>Poll to retrieve test results</li>
</ul></li>
<li>Implement logic to report a test status back to GitHub.</li>
<li>OBS CI:
<ul>
<li>Set up an OBS project to build Rakudo. This can build on the previous work of niner.</li>
<li>A worker that pushes test jobs to the platform</li>
<li>Listen to a platform hook (I probably have to implement the notification part on the OBS site as well, as OBS seems to provide no hooks for build completion.)</li>
<li>Poll to retrieve test results</li>
</ul></li>
<li>A website
<ul>
<li>Basic setup</li>
<li>An index that lists build jobs</li>
<li>Build job page
<ul>
<li>Build state and result</li>
<li>Build logs</li>
<li>Source and artifact downloads</li>
<li>Link to previous tests (in case of re-runs)</li>
<li>Link to AzureCI, OBS, GitHub</li>
</ul></li>
<li>Add some styling</li>
</ul></li>
</ul>

<h2>Communication</h2>

<p>I plan to write status update posts whenever there is relevant progress. I estimate there will be 4 - 8 posts overall. The posts will be published <a href="https://dev.to/patrickbkr/">here</a>. I intend the posts to have a focus on explaining the software so the posts can double as documentation.</p>

<h2>Schedule</h2>

<p>I estimate the project to be about 80 hours of work. I can allocate <em>at least</em> 8 hours per week to work on this. This would mean I finish the project in two and a half months. These are estimates and unforseen difficulties can push the timeline.</p>

<h2>Requested amount</h2>

<p>I request $4000 USD.</p>

<p>82 h * 40 € = 3,280 € ~= $4000</p>

<h2>Biography</h2>

<p>I have been involved in Raku development since 2018 with a focus on integration and tooling. I:</p>

<ul>
<li>Designed and implemented Rakudos relocatability functionality</li>
<li>Set up automated building of precompiled relocatable packages for Windows, Linux and MacOS. First on CircleCI then on AzureCI.</li>
<li>Migrated the core projects CI infrastructure to AzureCI (shutdown of Travis, CircleCI and AppVeyor is still to be done)</li>
<li>Gave the rakudo.org website an overhaul</li>
<li>Took over the rakubrew project (then named Rakudobrew) refactored it largely and implemented many new features, among them
<ul>
<li>Windows support</li>
<li>Utilizing the precompiled archives served on rakudo.org</li>
<li>A new website</li>
<li>Installation via a self-contained executable</li>
</ul></li>
<li>Fixed many, many papercut bugs in a wide range of modules, documentation and some in the compiler stack itself</li>
<li>Have utilized Raku in my dayjob in multiple medium sized projects</li>
<li>Wrote a small program in Perl which remotely monitors a MediaWiki website for changes, runs a validator and feeds the validation results back to the site. The functionality is in several aspects similar to the proposed project.</li>
</ul>

<h2>Open questions</h2>

<p>Will we be able to persist the sources and artifacts of every build job in the long run? Depending on how many platforms we want to test on the build artifacts for a single test run could end up in the range of half a gigabyte. Some clever compression might prove to be helpful here.</p>

<h2>Implementation details</h2>

<p>RCB acts as an intermediate between changes in GitHub and the CI services. Initially supported CI services will be Azure and Open Build Service (OBS).</p>

<p>RCB will monitor GitHub for three event types:</p>

<ul>
<li>Commits to a master branch</li>
<li>A new PR or a commit in a PR</li>
<li>A comment in a PR which includes a command word</li>
</ul>

<p>A change typically triggers a CI run. The following steps happen:
- RCB retrieves the sources off of GitHub and creates a source tarball compatible with our source release files.
- RCB triggers CI services to test this source tarball.
- The CIs finish their test and report back to RCB.
- RCB retrieves and saves build logs from the CI backends. This is especially important for re-tests, because on some CI platforms doing a re-test makes the original build log inaccessible.
- RCB retrieves and saves build artifacts from the CI backends.
- RCB reports the results back to GitHub as Status notifications.</p>

<h2>Comment triggers</h2>

<p>In addition to commit and PR events RCB will scan PR comments for command words.
- <code>{merge on success}</code> will cause RCB to automatically merge the PR should the CI tests be successful. If the tests are unsuccessful RCB will add a comment stating that automatic merging did not happen.
  There will be a check for the permissions of the person writing the comment whether the person has merge permissions.
- <code>{re-test}</code> will cause RCB to run the CI for the respective PR again.</p>

<h2>Flapper detection</h2>

<p>RCB will scan failed CI build logs for known flappers. If a flapper is identified as the only failure the test is re-run automatically once.</p>

<h2>Branch matching</h2>

<p>When preparing a CI run for a PR in either the <code>rakudo/rakudo</code>, <code>Raku/nqp</code> or <code>MoarVM/MoarVM</code> repo, RCB will check if a PR with a matching name exists in any of the other repos and use that PR instead of the master branch for testing.</p>

<p>If no such PR is found, RCB will follow a commit matching logic.
- Commits in <code>rakudo/rakudo</code> will use the NQP version given in <code>tools/templates/NQP_REVISION</code> and MoarVM commit given in NQPs <code>tools/templates/MOAR_REVISION</code>.
- Commits in <code>Raku/nqp</code> will use the MoarVM commit given in <code>tools/templates/MOAR_REVISION</code> and Rakudo master.
- Commits in <code>MoarVM/MoarVM</code> will use NQP master and Rakudo master.</p>

<p>This commit matching logic is already in use in the Azure CI pipeline. (The branch matching logic isn't though.)</p>

<h2>Website</h2>

<p>RCB will serve a website that provides a list of all CI runs. Each run will provide the following information:
- Link to the GitHub page that triggered the run
- The build source archive
- Links to previous runs for the same source
- For each CI backend
    - Link to the respective CI page
    - The build log
    - The build artifacts
- A button to retrigger the CI run</p>

<h2>Third party API triggers</h2>

<p>RCB will interface with several third party APIs that provide push triggers. Namely GitHub, OBS and Azure. Push triggers have proven to not be entirely reliable in the past. As a counter measure RCB will not only listen to the push triggers, but also poll the external APIs periodically. This way RCB will be:
- Responsive (reaction time of a few seconds) by directly reacting to push triggers.
- Reliable by internally keeping a list of all events in the third party and keeping that list in sync by polling.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>User Story Mapping Teil 1</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-28-user-story-mapping-teil1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
In der agilen Software-Entwicklung wird oft die formale Korrektheit von User Storys über ihren eigentlichen Zweck gestellt: Die Beteiligten erzählen einander Geschichten aus Anwendersicht. Während der Umsetzung der Software verlieren Beteiligte zudem oft den Blick »auf’s große Ganze«. Die Methode »User Story Mapping« möchte helfen, diese Probleme zu beheben und durch die enstehende Software das Leben der Anwender verbessern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-28-user-story-mapping-teil1</id>
    <published>2021-01-28T10:00:00Z</published>
    <updated>2021-01-28T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Better Perl with subroutine signatures and type validation</title>
    <link rel="alternate" href="https://dev.to/mjgardner/better-perl-with-subroutine-signatures-and-type-validation-2bck" type="text/html"/>
    <content type="html">&lt;p&gt;Did you know that you could increase the read­abil­i­ty and reli­a­bil­i­ty of your Perl code with one fea­ture? I’m talk­ing about sub­rou­tine sig­na­tures: the abil­i­ty to declare what argu­ments, and in some cas­es what types of argu­ments, your func­tions and meth­ods take.&lt;/p&gt;

&lt;p&gt;Most Perl pro­gram­mers know about the &lt;a href="https://perldoc.pl/perlvar#@_"&gt;&lt;code&gt;@_&lt;/code&gt;&lt;/a&gt; vari­able (or &lt;code&gt;@ARG&lt;/code&gt; if you &lt;a href="https://perldoc.pl/English"&gt;&lt;code&gt;use English&lt;/code&gt;&lt;/a&gt;). When a sub­rou­tine is called, &lt;code&gt;@_&lt;/code&gt; contains the para­me­ters passed. It’s an array (thus the &lt;code&gt;@&lt;/code&gt; sig­il) and can be treat­ed as such; it’s even the default argu­ment for &lt;a href="https://perldoc.pl/functions/pop"&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://perldoc.pl/functions/shift"&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/a&gt;. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$parameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You passed me &lt;/span&gt;&lt;span class="si"&gt;$parameter&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or for mul­ti­ple parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;v5&lt;/span&gt;&lt;span class="mf"&gt;.10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;strict&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$parameter1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$parameter2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You passed me &lt;/span&gt;&lt;span class="si"&gt;$parameter1&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="si"&gt;$parameter2&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(What’s that &lt;code&gt;use v5.10;&lt;/code&gt; doing there? It enables all features that were intro­duced in &lt;a href="https://perldoc.pl/perl5100delta"&gt;Perl 5.10&lt;/a&gt;, such as the &lt;a href="https://perldoc.pl/perlfunc#say"&gt;&lt;code&gt;say&lt;/code&gt;&lt;/a&gt; func­tion. We’ll assume you type it in from now on to reduce clutter.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can do bet­ter&lt;/strong&gt;, though. &lt;a href="https://perldoc.pl/perl5200delta"&gt;Perl 5.20&lt;/a&gt; (released in 2014; why haven’t you upgrad­ed?) intro­duced the exper­i­men­tal &lt;a href="https://perldoc.pl/perlsub#Signatures"&gt;&lt;code&gt;signatures&lt;/code&gt;&lt;/a&gt; fea­ture, which as described above, allows parame­ters to be intro­duced right when you declare the subrou­tine. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;experimental&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;($parameter1, $parameter2 = 1, @rest) {&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You passed me &lt;/span&gt;&lt;span class="si"&gt;$parameter1&lt;/span&gt;&lt;span class="s2"&gt; and &lt;/span&gt;&lt;span class="si"&gt;$parameter2&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;And these:&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;@rest&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can even set defaults for option­al para­me­ters, as seen above with the &lt;code&gt;=&lt;/code&gt; sign, or slurp up remain­ing para­me­ters into an array, like the &lt;code&gt;@rest&lt;/code&gt; array above. For more help­ful uses of this fea­ture, con­sult the &lt;a href="https://perldoc.pl/perlsub#Signatures"&gt;perl­sub&lt;/a&gt; man­u­al page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can do bet­ter still&lt;/strong&gt;. The &lt;a href="https://www.cpan.org/"&gt;Com­pre­hen­sive Perl Archive Network (CPAN)&lt;/a&gt; con­tains sev­er­al mod­ules that both enable signa­tures, as well as val­i­date parame­ters are of a cer­tain type or for­mat. (Yes, Perl can have types!) Let’s take a tour of some of them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paramsvalidate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Params::Validate"&gt;Params::Validate&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This mod­ule adds two new func­tions, &lt;code&gt;validate()&lt;/code&gt; and &lt;code&gt;validate_pos()&lt;/code&gt;. &lt;code&gt;validate()&lt;/code&gt; intro­duces &lt;em&gt;named parameters&lt;/em&gt;, which make your code more read­able by describing what parameters are being called at the time you call them. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Params::&lt;/span&gt;&lt;span class="nv"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;  &lt;span class="s"&gt;parameter2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# mandatory&lt;/span&gt;
        &lt;span class="s"&gt;parameter2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# optional&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;parameter2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If all you want to do is val­i­date un-named (posi­tion­al) para­me­ters, use &lt;code&gt;validate_pos()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Params::&lt;/span&gt;&lt;span class="nv"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validate_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;@p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Params::Validate also has fair­ly deep sup­port for &lt;em&gt;type valida­tion&lt;/em&gt;, enabling you to val­i­date para­me­ters against &lt;a href="https://metacpan.org/pod/Params::Validate#Type-Validation"&gt;simple types&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Params::Validate#Interface-Validation"&gt;method inter­faces&lt;/a&gt; (also known as “duck typing”), &lt;a href="https://metacpan.org/pod/Params::Validate#Class-Validation"&gt;mem­ber­ship in a class&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Params::Validate#Regex-Validation"&gt;reg­u­lar expres­sion match­es&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Params::Validate#Callback-Validation"&gt;arbi­trary code call­backs&lt;/a&gt;. As always, con­sult the &lt;a href="https://metacpan.org/pod/Params::Validate"&gt;doc­u­men­ta­tion&lt;/a&gt; for the nit­ty-grit­ty details.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#moosexparamsvalidate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate"&gt;MooseX::Params::Validate&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;MooseX::Params::Validate adds type val­i­da­tion via the &lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; object-ori­ent­ed frame­work’s type sys­tem, mean­ing that anything that can be defined as a &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/Types.pod"&gt;Moose type&lt;/a&gt; can be used to val­i­date the para­me­ters passed to your func­tions or meth­ods. It adds the &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate#validated_hash(-@_,-%parameter_spec-)"&gt;&lt;code&gt;validated_hash()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate#validated_list(-@_,-%parameter_spec-)"&gt;&lt;code&gt;validated_list()&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate#pos_validated_list(-@_,-%24spec,-%24spec,-...-)"&gt;&lt;code&gt;pos_validated_list()&lt;/code&gt;&lt;/a&gt; func­tions, and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;MooseX::Params::&lt;/span&gt;&lt;span class="nv"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mice&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;__PACKAGE__&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;Men&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validated_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;parameter1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validated_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;parameter1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Moose&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;pos_validated_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that the first para­me­ter passed to each func­tion is a ref­er­ence to the &lt;code&gt;@_&lt;/code&gt; array, denot­ed by a backslash.&lt;/p&gt;

&lt;p&gt;MooseX::Params::Validate has sev­er­al more things you can spec­i­fy when list­ing para­me­ters, includ­ing &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/Roles.pod"&gt;roles&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/Types.pod#COERCION"&gt;coer­cions&lt;/a&gt;, and depen­den­cies. The &lt;a href="https://metacpan.org/pod/MooseX::Params::Validate"&gt;doc­u­men­ta­tion for the mod­ule&lt;/a&gt; has all the details. &lt;strong&gt;We use this mod­ule at work a lot&lt;/strong&gt;, and even use it with­out Moose when val­i­dat­ing para­me­ters passed to test functions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functionparameters" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;For a dif­fer­ent take on sub­rou­tine sig­na­tures, you can use the &lt;a href="https://metacpan.org/pod/Function::Parameters"&gt;Function::Parameters&lt;/a&gt; mod­ule. Rather than pro­vid­ing helper func­tions, it defines two new Perl key­words, &lt;code&gt;fun&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt;. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Function::&lt;/span&gt;&lt;span class="nv"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(:&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;$param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The colons in the &lt;code&gt;bar()&lt;/code&gt; func­tion above indi­cate that the para­me­ters are named, and need to be spec­i­fied by name when the func­tion is called, using the &lt;code&gt;=&amp;gt;&lt;/code&gt; oper­a­tor as if you were spec­i­fy­ing a hash.&lt;/p&gt;

&lt;p&gt;In addi­tion to &lt;a href="https://metacpan.org/pod/Function::Parameters#Default-arguments"&gt;defaults&lt;/a&gt; and the &lt;a href="https://metacpan.org/pod/Function::Parameters#Simple-parameter-lists"&gt;posi­tion­al&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Function::Parameters#Named-parameters"&gt;named&lt;/a&gt; para­me­ters demon­strat­ed above, Function::Parameters sup­ports &lt;a href="https://metacpan.org/pod/Function::Parameters#Type-constraints"&gt;type con­straints&lt;/a&gt; (via &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;) and Moo or Moose &lt;a href="https://metacpan.org/pod/Function::Parameters#Method-modifiers"&gt;method modifiers&lt;/a&gt;. (If you don’t know what those are, the &lt;a href="https://metacpan.org/pod/distribution/Moose/lib/Moose/Manual/MethodModifiers.pod"&gt;Moose&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Class::Method::Modifiers"&gt;Class::Method::Modifiers&lt;/a&gt; doc­u­men­ta­tion are helpful.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I’m not a fan&lt;/strong&gt; of mod­ules that add new syn­tax for com­mon tasks like sub­rou­tines and meth­ods, if only because there’s an extra effort in updat­ing tool­ings like syn­tax high­lighters and &lt;a href="http://perlcritic.com/"&gt;Perl::Critic&lt;/a&gt; code analy­sis. Still, this may appeal to you, espe­cial­ly if you’re com­ing from oth­er lan­guages that have sim­i­lar syntax.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typeparams" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Speak­ing of &lt;a href="https://metacpan.org/pod/Type::Tiny"&gt;Type::Tiny&lt;/a&gt;, it includes its own para­me­ter validation library called &lt;a href="https://metacpan.org/pod/Type::Params"&gt;Type::Params&lt;/a&gt;. &lt;strong&gt;I think I would favor this for new work&lt;/strong&gt;, as it’s com­pat­i­ble with both Moo and Moose but does­n’t require them.&lt;/p&gt;

&lt;p&gt;Type::Params has a num­ber of func­tions, none of which are pro­vid­ed by default, so you’ll have to import them explic­it­ly when &lt;code&gt;use&lt;/code&gt;ing the mod­ule. It also intro­duces a sep­a­rate step for com­pil­ing your val­i­da­tion spec­i­fi­ca­tion to speed up perfor­mance. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="sx"&gt;qw(Str Int)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Type::&lt;/span&gt;&lt;span class="nv"&gt;Params&lt;/span&gt; &lt;span class="sx"&gt;qw(compile compile_named)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;('&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$param2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;state&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;compile_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$params_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$check&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$params_ref&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$params_ref&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The fea­tures of Type::Tiny and its bun­dled mod­ules are pret­ty vast, so I sug­gest once again that you &lt;a href="https://metacpan.org/pod/Type::Tiny::Manual"&gt;con­sult the doc­u­men­ta­tion&lt;/a&gt; on how to use it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paramsvalidationcompiler" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler"&gt;Params::ValidationCompiler&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;At the &lt;a href="https://metacpan.org/pod/Params::Validate#DESCRIPTION"&gt;top of the doc­u­men­ta­tion to Params::Validate&lt;/a&gt;, you’ll notice that the author rec­om­mends instead his &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler"&gt;Params::ValidationCompiler&lt;/a&gt; mod­ule for faster per­for­mance, using a com­pi­la­tion step much like Type::Params. It pro­vides two func­tions for you to import, &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler#validation_for(...)"&gt;&lt;code&gt;validation_for()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler#source_for(...)"&gt;&lt;code&gt;source_for()&lt;/code&gt;&lt;/a&gt;. We’ll con­cen­trate on the for­mer since the lat­ter is main­ly use­ful for debugging.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Types::&lt;/span&gt;&lt;span class="nv"&gt;Standard&lt;/span&gt; &lt;span class="sx"&gt;qw(Int Str)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Params::&lt;/span&gt;&lt;span class="nv"&gt;ValidationCompiler&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;validation_for&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;');&lt;/span&gt;

&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;validation_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;type&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Perl is cool&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;type&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;optional&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;%params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;@params&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, it sup­ports type con­straints, defaults, and option­al val­ues. It can also put extra argu­ments in a list (it calls this fea­ture “slur­py”), and can even return generat­ed objects to make it eas­i­er to catch typos (since a typoed hash key just gen­er­ates that key rather than return­ing an error). There’s a bit more to this mod­ule, so please &lt;a href="https://metacpan.org/pod/Params::ValidationCompiler"&gt;read the doc­u­men­ta­tion&lt;/a&gt; to exam­ine all its features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#con%C2%ADclu%C2%ADsion" class="anchor"&gt;
  &lt;/a&gt;
  Con­clu­sion
&lt;/h1&gt;

&lt;p&gt;One of Per­l’s mot­tos is &lt;strong&gt;“there’s more than one way to do it”&lt;/strong&gt;, and you’re wel­come to choose what­ev­er method you need to enable sig­na­tures and type val­i­da­tion. Just remem­ber to be con­sis­tent and have good rea­sons for your choic­es, since the over­all goal is to improve your code’s reli­a­bil­i­ty and readabil­i­ty. And be sure to share your favorite tech­niques with oth­ers, so they too can devel­op bet­ter software.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/better-perl-with-subroutine-signatures-and-type-validation-2bck</id>
    <published>2021-01-27T22:30:47Z</published>
    <updated>2021-01-27T22:30:47Z</updated>
    <category term="perl"/>
    <category term="programming"/>
    <category term="signatures"/>
    <category term="types"/>
  </entry>
  <entry>
  <title>How to replace a column in a CSV file using Perl</title>
  <summary type="html"><![CDATA[<p>
Given a CSV file, how can we replace the values in one of the columns?
<p>
For example given this file:
<p>
<b>examples/test_cases.csv</b><br><pre class="prettyprint linenums ">
170,test,best,one,0.1314
171,test,best,two,0.1695
172,test,best,two,0.1784
173,test,best,three,0.3748
</pre>
<p>
how can we replace the 4th column to contain the value 'CIF' in every line?
<p>
]]></summary>
  <updated>2021-01-26T11:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/replace-a-column-in-a-csv-file"/>  <id>https://perlmaven.com/replace-a-column-in-a-csv-file</id>
  <content type="html"><![CDATA[<p>
Given a CSV file, how can we replace the values in one of the columns?
<p>
For example given this file:
<p>
<b>examples/test_cases.csv</b><br><pre class="prettyprint linenums ">
170,test,best,one,0.1314
171,test,best,two,0.1695
172,test,best,two,0.1784
173,test,best,three,0.3748
</pre>
<p>
how can we replace the 4th column to contain the value 'CIF' in every line?
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>The Trouble with Reference Counting</title>
    <link rel="alternate" href="https://perldotcom.perl.org/article/the-trouble-with-reference-counting/" type="text/html"/>
    <content type="html">

&lt;p&gt;Perl uses a simple form of garbage collection (GC) called &lt;a href="https://en.wikipedia.org/wiki/Reference_counting"&gt;reference counting&lt;/a&gt;. Every variable created by a Perl program has a &lt;a href="https://perldoc.perl.org/perlguts#Reference-Counts-and-Mortality"&gt;refcnt&lt;/a&gt; associated with it. If the program creates a reference to the variable, Perl increments its &lt;code&gt;refcnt&lt;/code&gt;. Whenever Perl exits a block it reclaims any variables that belong to the block scope. If any are references, their referenced values&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; are either decremented or they&amp;rsquo;re reclaimed as well if no other references to them remain.&lt;/p&gt;

&lt;h2 id="benefits"&gt;Benefits&lt;/h2&gt;

&lt;p&gt;Reference counting has some nice properties. As GC is deterministic, it is usually not a cause of variable program performance from run-to-run. Whenever Perl leaves a subroutine or a block, it will check for variables to reclaim. This spreads the cost of GC over program runtime, keeping Perl responsive.&lt;/p&gt;

&lt;p&gt;Another benefit of timely reclamation is it minimizes memory fragmentation as variables created in the same scope tend to be reclaimed at the same time, allowing Perl to more efficiently reuse the memory (it exhibits good &lt;a href="https://en.wikipedia.org/wiki/Locality_of_reference#Spatial_and_temporal_locality_usage"&gt;spatial locality of reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Predictable and timely GC provides a useful mechanism for destructors. A popular example is that &amp;ldquo;lexical&amp;rdquo; filehandles are automatically closed when they go out scope; Perl programs do not need to call &lt;a href="https://perldoc.perl.org/functions/close"&gt;close&lt;/a&gt; on filehandles themselves, and because the filehandle is closed immediately, there is no risk of contention from a new filehandle being opened on the same file before the original is reclaimed.&lt;/p&gt;

&lt;h2 id="how-expensive-is-reference-counting"&gt;How expensive is reference counting?&lt;/h2&gt;

&lt;p&gt;Different reference counting operations have different costs. Consider the following Perl subroutine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;update_customer&lt;/span&gt; {
  &lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; ($customer, $values) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; @_;
  &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s called with two arguments; a customer object and a hashref of values. The &lt;code&gt;my&lt;/code&gt; declaration causes Perl to add the lexical variables &lt;code&gt;$customer&lt;/code&gt; and &lt;code&gt;$values&lt;/code&gt; to the savestack (here it performs an optimization, adding them as one group entry instead of two). Each variable is initialized with a &lt;code&gt;refcnt&lt;/code&gt; of 1. Each argument is then assigned to its corresponding lexical variable which increments the &lt;code&gt;refcnt&lt;/code&gt; of the reference&amp;rsquo;s corresponding value. This is cheap as the Perl interpreter just increments the value&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt; in its header struct.&lt;/p&gt;

&lt;p&gt;When the subroutine returns a scope exit occurs, and &lt;code&gt;$customer&lt;/code&gt; and &lt;code&gt;$values&lt;/code&gt; must be reclaimed. Their group is popped off the savestack. Perl fetches the &lt;code&gt;refcnt&lt;/code&gt; of &lt;code&gt;$customer&lt;/code&gt;, saves it to a local variable, and tests it to see if it is greater than 1. As the &lt;code&gt;refcnt&lt;/code&gt; of &lt;code&gt;$customer&lt;/code&gt; is 1, it must be reclaimed. Here Perl performs another optimization, essentially doing &lt;code&gt;undef $customer&lt;/code&gt; leaving it ready to be reused next time the subroutine is called. As &lt;code&gt;$customer&lt;/code&gt; is a reference, the referenced customer object&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt; must also be fetched and tested. In this case it&amp;rsquo;s greater than 1, so Perl decrements the local &lt;code&gt;refcnt&lt;/code&gt; and stores it back in the customer object&amp;rsquo;s header struct. Perl then performs the same decrement routine for &lt;code&gt;$values&lt;/code&gt;. Decrement&amp;rsquo;s multiple steps causes it to be slightly more expensive than increment, but scope management pushing and popping the savestack is relatively expensive.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t have any data on how long each operation takes, or estimates of how long Perl spends on reference counting activities during the course of a program. Nor is such data available for other reference counting dynamic languages like Python and PHP. Some research has shown that reference counting increases GC runtime by 30% compared to tracing&lt;sup&gt;1, 2&lt;/sup&gt;, but it&amp;rsquo;s not clear how representative that is of Perl&amp;rsquo;s optimized routines.&lt;/p&gt;

&lt;h2 id="drawbacks"&gt;Drawbacks&lt;/h2&gt;

&lt;p&gt;Reference counting scales linearly insofar as every variable created increases the GC overhead. In programming we can usually do better than that, for example by using tricks like minimizing the number of function calls via batch processing.&lt;/p&gt;

&lt;p&gt;Only objects that have a &lt;a href="https://perldoc.perl.org/perlobj#Destructors"&gt;DESTROY&lt;/a&gt; method need timely reclamation, yet Perl  treats &lt;em&gt;every&lt;/em&gt; variable like it needs it, incrementing and decrementing reference counts live. Whenever Perl exits a block it must check for and clean up any unreferenced variables.&lt;/p&gt;

&lt;p&gt;Reference counting usually spreads the cost of GC over runtime, however deterministic and timely reclamation means that the potential cost of any given scope exit is unbounded. Imagine Perl returning from a subroutine which reclaims the final reference to a &lt;em&gt;huge&lt;/em&gt; graph of data, triggering an avalanche of reclamations. Perl &lt;em&gt;has&lt;/em&gt; to clean it all up immediately; a tracing GC could choose not to.&lt;/p&gt;

&lt;p&gt;Reference counts increase memory use a little as every variable has a &lt;code&gt;refcnt&lt;/code&gt; integer associated with it. Compared to tracing schemes, reference counting actually saves memory by not requiring a larger heap to avoid thrashing&lt;sup&gt;3&lt;/sup&gt;. However circular references can increase memory use a lot via memory leaks (if detected the developer can &lt;a href="https://metacpan.org/pod/Scalar::Util#weaken"&gt;weaken&lt;/a&gt; the reference to fix this).&lt;/p&gt;

&lt;p&gt;Reference counts can trigger unneeded &lt;a href="https://en.wikipedia.org/wiki/Copy-on-write"&gt;Copy-On-Write&lt;/a&gt;. Imagine a sub-process loops through a data set it inherited from its parent: &lt;code&gt;for my $foo (@foos) { ... }&lt;/code&gt;. This temporarily increments each element&amp;rsquo;s &lt;code&gt;refcnt&lt;/code&gt;, triggering a memory copy. This isn&amp;rsquo;t quite as calamitous as it sounds as each variable&amp;rsquo;s header struct  is 16 bytes. Since a page is usually 4KB, only one copy is needed per 296 objects (assuming they&amp;rsquo;re contiguous). The copy can also be avoided by not creating the lexical reference by accessing each member directly: &lt;code&gt;for my $i (0..$#foos) { $foos[$i] ... }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Speculating a little, reference counting may increase cache misses as the frequent changes in counts displace valuable data.&lt;/p&gt;

&lt;h2 id="opportunity"&gt;Opportunity?&lt;/h2&gt;

&lt;p&gt;At first glance it seems like Perl can save runtime by switching to a tracing GC scheme and not checking or updating reference counts, but periodically reclaiming unused variables. Observe that most variables are &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)"&gt;short-lived&lt;/a&gt;; therefore the cost of tracing should scale better than linearly (as only long-lived variables are traceable).&lt;/p&gt;

&lt;p&gt;However to avoid breaking a lot of code, Perl would still need to honor timely reclamation of objects with &lt;code&gt;DESTROY&lt;/code&gt; methods. Perhaps it could follow a hybrid model, reference counting only those objects that need it, but that would reduce the performance benefits of tracing GC, and it complexifies the interpreter adding conditional branches for reference-counted variables. As objects may gain or lose a&lt;code&gt;DESTROY&lt;/code&gt; method during runtime, the interpreter would also need to be able to add and remove variables from the reference counting scheme dynamically.&lt;/p&gt;

&lt;p&gt;A further wrinkle is that references to objects with &lt;code&gt;DESTROY&lt;/code&gt; methods must &lt;em&gt;also&lt;/em&gt; be reference counted (and references to those references and so on). Imagine an array of database handles: the array itself must be reference counted so that when it is reclaimed, Perl can decrement the database handles&amp;rsquo; &lt;code&gt;refcnt&lt;/code&gt; and possibly reclaim them as well.&lt;/p&gt;

&lt;p&gt;A more promising line of inquiry may be to review Perl&amp;rsquo;s reference counting code for further optimization opportunities. Common techniques for improving reference counting are well known&lt;sup&gt;4&lt;/sup&gt; and research has shown that the aforementioned 30% runtime gap can be closed&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Before starting that effort, we should collect data on how much time Perl is spending on GC. Two Perl core developers, Todd Rinaldo and Tony Cook have told me they think Perl spends very little time on GC relative to other operations like memory allocation, IO and so on. If 2% of the runtime is spent on GC, reducing it by 30% is nothing to brag about. It may be the case that for Perl at least, better opportunities lie elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Thanks to Tony Cook, Dave Mitchell and Todd Rinaldo for their insights on Perl&amp;rsquo;s GC behavior.&lt;/p&gt;

&lt;h2 id="references"&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/10.1145/1005686.1005693"&gt;Myths and Realities: The Performance Impact of Garbage Collection&lt;/a&gt;, Blackburn, Cheng &amp;amp; McKinley 2004.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/10.1145/2258996.2259008"&gt;Down for the Count? Getting Reference Counting Back in the Ring&lt;/a&gt;, Shahriyar, Blackburn &amp;amp; Frampton 2012.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.kent.ac.uk/people/staff/rej/gcbook/"&gt;Garbage Collection: Algorithms For Automatic Dynamic Memory Management&lt;/a&gt;, Jones &amp;amp; Lins 1999 pp 43.&lt;/li&gt;
&lt;li&gt;Ibid. pp 44-74.&lt;/li&gt;
&lt;/ol&gt;
</content>
    <id>https://perldotcom.perl.org/article/the-trouble-with-reference-counting/</id>
    <published>2021-01-25T12:05:23Z</published>
    <updated>2021-01-25T12:05:23Z</updated>
  </entry>
  <entry>
    <title>&lt;p&gt;Perl Weekly Challenge 096&lt;/p&gt;</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/24#pwc096" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a string $S. Write a script to reverse the order of words in the given string.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub reverse_words{
    my($words) = @_; 
    if(@{$words}){
        my $word = $words-&gt;[0];
        my $a = reverse_words([@{$words}[1 .. (@{$words} - 1)]]);
        $a-&gt;[@{$a}] = $word;
        return $a;
    }
    return [];
}

MAIN:{
    my($S, $reversed);
    $S = "The Weekly Challenge";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
    
    $S = "    Perl and   Raku are  part of the same family  ";
    $reversed = reverse_words([split(/\s+/, $S)]);
    print join(" ", @{$reversed}) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Challenge Weekly The
family same the of part are Raku and Perl 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;My solution is done using recursion with the self-imposed restrictions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do not use the &lt;a href="https://perldoc.perl.org/functions/reverse"&gt;reverse&lt;/a&gt; function.&lt;/li&gt;
&lt;li&gt;only access array elements in an ordinary way, without using any functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other than being a bit over engineered it works as required!&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given two strings $S1 and $S2. Write a script to find out the minimum operations required to convert $S1 into $S2. The operations can be insert, remove or replace a character.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Memoize;
memoize("edit_distance");

sub edit_distance{
    my($s, $t) = @_;
    if(length($s) == 0){
        return length($t);
    }
    if(length($t) == 0){
        return length($s);
    }
    my($s0, $t0) = (substr($s, 0, 1), substr($t, 0, 1));
    if($s0 eq $t0){
        return edit_distance(substr($s, 1), substr($t, 1));
    }
    my @sorted_distances = sort {$a &lt;=&gt; $b} (
        edit_distance($s, substr($t, 1)),
        edit_distance(substr($s, 1), $t),
        edit_distance(substr($s, 1), substr($t, 1)),
    );
    return 1 + $sorted_distances[0];
}

MAIN:{
    my $distance;
    
    $distance = edit_distance("kitten", "sitting");
    print "$distance\n";

    $distance = edit_distance("sunday", "monday");
    print "$distance\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
3
2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code is a pretty faithful Perl translation of the algorithm presented in Haskell in the &lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance#Computing_Levenshtein_distance"&gt;Wikipedia article&lt;/a&gt; for &lt;em&gt;Levenshtein_distance&lt;/em&gt;. Like the code for Part 1 of this weeks Challenge this is a recursive procedure.&lt;/p&gt;
&lt;p&gt;As noted in that article this algorithm is inefficient in that substrings are checked repeatedly. This code can be made more efficient by the use of &lt;em&gt;Memoization&lt;/em&gt; so that the results for each substring are saved and re-used. In the interest of improving performance &lt;code&gt;Memoize&lt;/code&gt; is used with the &lt;code&gt;edit_distance&lt;/code&gt; function. While the code is now more efficient it really doesn’t have much effect on execution time for these short test strings. However, the code is now ready to handle much more significant sized strings.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/Memoize"&gt;Memoization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc096</id>
    <published>2021-01-24T01:26:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5068327869800457164</id>
    <published>2021-01-23T23:28:00.002+01:00</published>
    <updated>2021-01-23T23:28:59.409+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxv) 17 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/TODDR/autodie-2.34" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;autodie&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Replace functions with ones that succeed or die with lexical scope &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.34&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 2.32 was 1 year, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/NICS/Catmandu-1.2015" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Catmandu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a data toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.2015&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.2014 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/XAOC/Gtk3-0.038" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Gtk3&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface to the 3.x series of the gtk+ toolkit &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.038&lt;/strong&gt; on 2021-01-20&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.037 was 10 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/EXIFTOOL/Image-ExifTool-12.16" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Image::ExifTool&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Read and write meta information &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;12.16&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 12.00 was 7 months, 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/IO-Async-0.78" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IO::Async&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Asynchronous event-driven programming &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.78&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 58&lt;/li&gt;  &lt;li&gt;Previous version: 0.77 was 8 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SULLR/IO-Socket-SSL-2.069" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;IO::Socket::SSL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Nearly transparent SSL encapsulation for IO::Socket::INET. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.069&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 2.068 was 9 months, 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BRTASTIC/Kelp-1.05" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Kelp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A web framework light, yet rich in nutrients. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.05&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 42&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/BINGOS/Module-CoreList-5.20210120" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20210120&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 34&lt;/li&gt;  &lt;li&gt;Previous version: 5.20201220 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SRI/Mojolicious-8.71" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Mojolicious&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Real-time web framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;8.71&lt;/strong&gt; on 2021-01-17&lt;/li&gt;  &lt;li&gt;Votes: 441&lt;/li&gt;  &lt;li&gt;Previous version: 8.70 was 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SALVA/Net-SFTP-Foreign-1.93" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Net::SFTP::Foreign&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Secure File Transfer Protocol client &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.93&lt;/strong&gt; on 2021-01-19&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.91 was 6 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/CHRISN/Net-SSLeay-1.90" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Net::SSLeay&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for using OpenSSL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.90&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.88 was 1 year, 8 months, 11 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/DAGOLDEN/Path-Tiny-0.116" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Path::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - File path utility &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.116&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 157&lt;/li&gt;  &lt;li&gt;Previous version: 0.114 was 8 months, 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/SHAY/perl-5.32.1" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;perl-5.32.1&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&amp;nbsp;- The Perl 5 language interpreter &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.032001&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 365&lt;/li&gt;  &lt;li&gt;Previous version: 5.32.0 was 7 months, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/JCRISTY/PerlMagick-7.0.10" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Image::Magick&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - objected-oriented Perl interface to ImageMagick. Use it to read, manipulate, or write an image or image sequence from within a Perl script. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.0.10&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 6.9.11 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MSTROUT/SQL-Abstract-2.000001" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;SQL::Abstract&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Generate SQL from Perl data structures &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.000001&lt;/strong&gt; on 2021-01-23&lt;/li&gt;  &lt;li&gt;Votes: 69&lt;/li&gt;  &lt;li&gt;Previous version: 1.87 was 7 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.21" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.21&lt;/strong&gt; on 2021-01-22&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.20 was 1 month, 28 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/release/MIYAGAWA/Twiggy-0.1026" target="_blank"&gt;&lt;b&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Twiggy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - AnyEvent HTTP server for PSGI &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.1026&lt;/strong&gt; on 2021-01-21&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.1025 was 6 years, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5068327869800457164/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5068327869800457164"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5068327869800457164"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxv-17-cpan-great-modules-released.html" title="(cccxxv) 17 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5393193259115390142</id>
    <published>2021-01-23T23:25:00.006+01:00</published>
    <updated>2021-01-23T23:25:56.321+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdli) metacpan weekly report - LWP</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 41&lt;/p&gt;&lt;p&gt;Week's winners (+3): &lt;b&gt;&lt;a href="https://metacpan.org/pod/LWP"&gt;LWP&lt;/a&gt;&amp;nbsp;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/23 22:23:25 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Calendar::Japanese::Holiday" target="_blank"&gt;Calendar::Japanese::Holiday&lt;/a&gt; - Japanese holidays in calender&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Earthquake_EEW_Decoder" target="_blank"&gt;Earthquake_EEW_Decoder&lt;/a&gt; - Perl extension for JMA Earthquake Early Warning data&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::IOLoop::Signal" target="_blank"&gt;Mojo::IOLoop::Signal&lt;/a&gt; - Non-blocking signal handler&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::QuoteLike" target="_blank"&gt;PPIx::QuoteLike&lt;/a&gt; - Parse Perl string literals and string-literal-like things.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Minify::XS" target="_blank"&gt;Text::Minify::XS&lt;/a&gt; - Simple text minification&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PAUSE::cleanup" target="_blank"&gt;App::PAUSE::cleanup&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::PPI::Dumper" target="_blank"&gt;App::PPI::Dumper&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Audio::Scan" target="_blank"&gt;Audio::Scan&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BSD::Resource" target="_blank"&gt;BSD::Resource&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cairo" target="_blank"&gt;Cairo&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Config::Std" target="_blank"&gt;Config::Std&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Confess" target="_blank"&gt;Devel::Confess&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ptkdb" target="_blank"&gt;Devel::ptkdb&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace::More" target="_blank"&gt;Devel::Trace::More&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Email::MIME::Kit" target="_blank"&gt;Email::MIME::Kit&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Map" target="_blank"&gt;File::Map&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Socket::SSL" target="_blank"&gt;IO::Socket::SSL&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/LWP" target="_blank"&gt;LWP&lt;/a&gt;&amp;nbsp;(+3=151)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/local::lib" target="_blank"&gt;local::lib&lt;/a&gt; (+1=83)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+2=441)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::Web::Auth" target="_blank"&gt;Mojolicious::Plugin::Web::Auth&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::CA" target="_blank"&gt;Mozilla::CA&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MsgPack::Raw" target="_blank"&gt;MsgPack::Raw&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::SSLeay" target="_blank"&gt;Net::SSLeay&lt;/a&gt; (+2=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PDL" target="_blank"&gt;PDL&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Scalar::List::Utils" target="_blank"&gt;Scalar::List::Utils&lt;/a&gt; (+1=150)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sereal" target="_blank"&gt;Sereal&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sidef" target="_blank"&gt;Sidef&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Smart::Comments" target="_blank"&gt;Smart::Comments&lt;/a&gt; (+1=38)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statocles" target="_blank"&gt;Statocles&lt;/a&gt; (+1=27)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sys::RunAlone" target="_blank"&gt;Sys::RunAlone&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::MockTime" target="_blank"&gt;Test::MockTime&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Unix::Statgrab" target="_blank"&gt;Unix::Statgrab&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Web::Scraper" target="_blank"&gt;Web::Scraper&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Workflow" target="_blank"&gt;Workflow&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/XS::Tutorial" target="_blank"&gt;XS::Tutorial&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5393193259115390142/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5393193259115390142"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5393193259115390142"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdli-metacpan-weekly-report-lwp.html" title="(cdli) metacpan weekly report - LWP"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>Loop controls: next, last, continue, break</title>
  <summary type="html"><![CDATA[<p>
In Perl there are 3 loop control keywords. The two commonly used are <span class="inline_code">next</span> and <span class="inline_code">last</span> and there is a third which is rarely used called <span class="inline_code">redo</span>.
<p>
In most of the other languages the respective keywords are <span class="inline_code">continue</span> and <span class="inline_code">break</span>.
<p>
<span class="inline_code">next</span> of Perl is the same as the <span class="inline_code">continue</span> in other languages and the <span class="inline_code">last</span> if Perl is the same as the <span class="inline_code">break</span> of other languages.
<p>
<span class="inline_code">redo</span> probably does not have its counterpart.
<p>
]]></summary>
  <updated>2021-01-20T12:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/loop-controls-next-last"/>  <id>https://perlmaven.com/loop-controls-next-last</id>
  <content type="html"><![CDATA[<p>
In Perl there are 3 loop control keywords. The two commonly used are <span class="inline_code">next</span> and <span class="inline_code">last</span> and there is a third which is rarely used called <span class="inline_code">redo</span>.
<p>
In most of the other languages the respective keywords are <span class="inline_code">continue</span> and <span class="inline_code">break</span>.
<p>
<span class="inline_code">next</span> of Perl is the same as the <span class="inline_code">continue</span> in other languages and the <span class="inline_code">last</span> if Perl is the same as the <span class="inline_code">break</span> of other languages.
<p>
<span class="inline_code">redo</span> probably does not have its counterpart.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Geodaten in Bildern und Videos können viel über Nutzer verraten</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Am vorvergangenen Wochenende (9./10. Januar 2021) gab es relativ viel Wirbel um die Plattform Parler, die offensichtlich als Twitterersatz für hauptsächlich amerikanische "Konservative" diente. Amazon Web Services (AWS) kündigte Parler alle Services, da dort jede Menge Hass verbreitet wurde. Bevor alles abgeschaltet war, wurden wohl alle öffentlich verfügbaren Daten über ein API heruntergeladen. Ein paar der Fehler, die bei dem API gemacht wurden, werde ich kurz in der Schulung im März erläutern.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-19-geodaten-bilder-videos-exif</id>
    <published>2021-01-19T10:00:00Z</published>
    <updated>2021-01-19T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 095</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/17#pwc095" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a number $N. Write a script to figure out if the given number is a Palindrome. Print 1 if true, otherwise 0.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;

sub is_palindrome{
    my($n) = @_;
    return false if $n &lt; 0;
    my @digits = split(//, $n);
    if(@digits % 2 == 0){
        do{
            my $a = shift @digits;
            my $b = pop @digits;
            return false if $a != $b;
        }while(@digits);
        return true;
    }
    while(@digits != 1){
        my $a = shift @digits;
        my $b = pop @digits;
        return false if $a != $b;
    };
    return true;
}

MAIN:{
    print is_palindrome(1221);
    print "\n";
    print is_palindrome(-101);
    print "\n";
    print is_palindrome(90);
    print "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
1
0
0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;One assumption is made and that is that the input is a valid integer.&lt;/p&gt;
&lt;p&gt;My approach here is straightforward iteration and matches what one might do manually: work inwards from both ends and if at any point there is not a match of the two elements being compared then return false. If we make it all the way to the middle then return true. Here the middle is either an empty array, in the case of an even number of elements or, in the case of an odd number of elements, an array of length 1.&lt;/p&gt;
&lt;p&gt;The case of a single digit has no special handling, if the number has an odd number of digits but that odd number happens to be 1 then the loop is not entered and we just return true.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to demonstrate Stack operations.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Stack;

my $stack = new Stack();
$stack-&gt;push(2);
$stack-&gt;push(-1);
$stack-&gt;push(0);
$stack-&gt;pop;       
print $stack-&gt;top . "\n"; 
$stack-&gt;push(0);
print $stack-&gt;min . "\n"; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Stack module used is of my own making. The next listing is that code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package Stack{
    use boolean;
    use Class::Struct;

    struct(
        data =&gt; q/@/
    );

    sub push{
        my($self, $n) = @_;
        push @{$self-&gt;data()}, $n;
    }

    sub pop{
        my($self, $n) = @_;
        pop @{$self-&gt;data()};
    }

    sub top{
        my($self, $n) = @_;
        @{$self-&gt;data()}[@{$self-&gt;data()} - 1];
    }
    
    sub min{
        my($self, $n) = @_;
        my @sorted = sort {$a &lt;=&gt; $b} @{$self-&gt;data()};
        return $sorted[0];
    }
    true;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -Iperl perl/ch-2.pl
-1
-1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Like &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/10"&gt;last week’s LinkedList module&lt;/a&gt; I use &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt; to create the Stack module.&lt;/p&gt;
&lt;p&gt;Class::Struct creates accessors for all the class variables automatically. In this way, by calling &lt;code&gt;$self-&amp;gt;data()&lt;/code&gt;, we get a reference to the internal array &lt;code&gt;data&lt;/code&gt; and perform the required Stack operations.&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc095</id>
    <published>2021-01-17T14:49:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Refactoring code snippet</title>
  <summary type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></summary>
  <updated>2021-01-13T10:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/refactoring-code-snippet"/>  <id>https://perlmaven.com/refactoring-code-snippet</id>
  <content type="html"><![CDATA[<p>
Recently I encountered a Perl script that had some issues. e.g. Lack of <a href="/always-use-strict-and-use-warnings">use strict</a>.
<p>
Let me show a quick refactoring of it:
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Extracting the list of O'Reilly Animals</title>
    <link rel="alternate" href="https://perldotcom.perl.org/article/extracting-the-list-of-o-reilly-animals/" type="text/html"/>
    <content type="html">

&lt;p&gt;Now I want to grab the entire list of O&amp;rsquo;Reilly cover animals, and &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; is going to help me do that.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly Media, who publishes most of my books, is distinctively known
by the animals it chooses for their covers. Edie Freedman explains how she came up with the well-known design in &lt;a href="https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/"&gt;A short history of the O’Reilly animals&lt;/a&gt;. I think I first saw this design on the cover of &lt;a href="https://shop.oreilly.com/product/9781565922259.do"&gt;sed &amp;amp; awk&lt;/a&gt;; those Slender Lorises (Lori?) are a bit creepy, but not creepy enough to keep me away from the command line.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perldotcom.perl.org/images/extracting-the-list-of-o-reilly-animals/sed.jpeg" alt="sed &amp;amp; awk" /&gt;&lt;/p&gt;

&lt;p&gt;Not that a Perler should talk since Larry Wall choose a camel: it&amp;rsquo;s ugly but it gets the job done under tough conditions. And, for &lt;a href="https://www.intermediateperl.com"&gt;own of my own books&lt;/a&gt;, the alpaca is a bit cuter, but they are nasty beasts as well.&lt;/p&gt;

&lt;p&gt;O&amp;rsquo;Reilly &lt;a href="https://www.oreilly.com/animals.csp"&gt;lists almost all of the animals&lt;/a&gt; from their covers, even if &amp;ldquo;animals&amp;rdquo; is a bit of a loose term that encompasses &amp;ldquo;Catholic Priests&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/0636920021872.do"&gt;Ethics of Big Data&lt;/a&gt;&lt;/em&gt;) or &amp;ldquo;Soldiers or rangers, with rifles&amp;rdquo; (&lt;em&gt;&lt;a href="https://shop.oreilly.com/product/9780596007164.do"&gt;SELinux&lt;/a&gt;&lt;/em&gt;). You can page through that list 20 results at a time, or search it. But, as with most lists I see online, I want to grab the entire list at once. Show me a paginated resources and I&amp;rsquo;ll show you the program I automated to unpaginate it.&lt;/p&gt;

&lt;p&gt;Scraping a bunch of pages is no problem for Perl, especially with &lt;a href="https://www.mojolicious.org"&gt;Mojolicious&lt;/a&gt; (as I write about in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). I whipped up a quick script and soon had &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;all of the animals in a JSON file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing particularly fancy in my programming, although I do use &lt;a href="https://docs.mojolicious.org/Mojo/Promise"&gt;Mojo::Promise&lt;/a&gt; so I can make the requests concurrently. That wasn&amp;rsquo;t something that I cared that much about, but I had just answered &lt;a href="https://stackoverflow.com/q/64597755/2766176"&gt;a StackOverflow question about Promises&lt;/a&gt; so it was on my mind. I set up all of the web requests but don&amp;rsquo;t run them right away. Once I have all of them, I run them at once through the &lt;code&gt;all()&lt;/code&gt; Promise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#75715e"&gt;#!perl&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; v5&lt;span style="color:#ae81ff"&gt;.26&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; experimental &lt;span style="color:#e6db74"&gt;qw(signatures)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::JSON &lt;span style="color:#e6db74"&gt;qw(encode_json)&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Promise;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::UserAgent;
&lt;span style="color:#66d9ef"&gt;use&lt;/span&gt; Mojo::Util &lt;span style="color:#e6db74"&gt;qw(dumper)&lt;/span&gt;;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $url &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;https://www.oreilly.com/animals.csp&amp;#39;&lt;/span&gt;;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total );

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $ua &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Mojo::UserAgent&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt;;

&lt;span style="color:#75715e"&gt;# We need to get the first request to get the total number of&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# requests. Note that that number is actually larger than the&lt;/span&gt;
&lt;span style="color:#75715e"&gt;# number of results there will be, by about 80.&lt;/span&gt;
&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $first_page_tx &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) {
		push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*;&lt;/span&gt;
		&lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; get_pagination( $tx );
		},
	&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { die &lt;span style="color:#e6db74"&gt;&amp;#34;Initial fetch failed!&amp;#34;&lt;/span&gt; }
	)&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @requests &lt;span style="color:#f92672"&gt;=&lt;/span&gt;
	map {
		&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $page &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_;
		$ua&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;get_p( $url &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; form &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; { &lt;span style="color:#e6db74"&gt;&amp;#39;x-o&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; $page } )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;(
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { push @grand, parse_page( $tx )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;@&lt;span style="color:#960050;background-color:#1e0010"&gt;*&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;}&lt;/span&gt;,
			&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; ( $tx ) { warn &lt;span style="color:#e6db74"&gt;&amp;#34;Something is wrong&amp;#34;&lt;/span&gt; }
			);
		}
	map {
		$_ &lt;span style="color:#f92672"&gt;*&lt;/span&gt; $interval
		}
	&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;..&lt;/span&gt; ($total &lt;span style="color:#f92672"&gt;/&lt;/span&gt; $interval)
	;

Mojo::Promise&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;all( @requests )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;wait;

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get_pagination&lt;/span&gt; ( $tx ) {
	&lt;span style="color:#75715e"&gt;# 1141 to 1160 of 1244&lt;/span&gt;
	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $tx
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;span.cs-prevnext&amp;#39;&lt;/span&gt; )
		&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt;( $start, $interval, $total ) &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $pagination &lt;span style="color:#f92672"&gt;=~&lt;/span&gt;&lt;span style="color:#e6db74"&gt; /
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;		(\d+) \h+ to \h+ (\d+) \h+ of \h+ (\d+) /x&lt;/span&gt;;
	}

&lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_page&lt;/span&gt; ( $tx ) {
&lt;span style="color:#75715e"&gt;=pod
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;div class=&amp;#34;animal-row&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;a class=&amp;#34;book&amp;#34; href=&amp;#34;...&amp;#34; title=&amp;#34;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;img class=&amp;#34;book-cvr&amp;#34; src=&amp;#34;...&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;      &amp;lt;p class=&amp;#34;book-title&amp;#34;&amp;gt;Perl 6 and Parrot Essentials&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;    &amp;lt;p class=&amp;#34;animal-name&amp;#34;&amp;gt;Aoudad, aka Barbary sheep&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;span style="color:#75715e"&gt;=cut&lt;/span&gt;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; eval {
		$tx
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;result
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;dom
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;find( &lt;span style="color:#e6db74"&gt;&amp;#39;div.animal-row&amp;#39;&lt;/span&gt; )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;map( &lt;span style="color:#66d9ef"&gt;sub&lt;/span&gt; {
				&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; %h;
				$h{link}      &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;a.book&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;href&amp;#39;&lt;/span&gt; );
				$h{cover_src} &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;img.book-cvr&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;attr( &lt;span style="color:#e6db74"&gt;&amp;#39;src&amp;#39;&lt;/span&gt; );
				$h{title}     &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.book-title&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				$h{animal}    &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $_&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;at( &lt;span style="color:#e6db74"&gt;&amp;#39;p.animal-name&amp;#39;&lt;/span&gt; )&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;text;
				&lt;span style="color:#f92672"&gt;\&lt;/span&gt;%h;
				} )
			&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;to_array
		} &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
			warn &lt;span style="color:#e6db74"&gt;&amp;#34;Could not process a request!\n&amp;#34;&lt;/span&gt;;
			&lt;span style="color:#f92672"&gt;[]&lt;/span&gt;;
			};
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those concurrent requests make this program much faster than it would be if I did them individually one after the other, although it can really hammer a server if I&amp;rsquo;m not careful. Most of the web request time is simply waiting and I get all of those requests to wait at the same time. Now, this isn&amp;rsquo;t really parallelism because once one request has something to do, such as reading the data, the other requests still need to wait their turn. Perhaps I&amp;rsquo;ll rewrite this program later to use &lt;a href="https://docs.mojolicious.org/Minion"&gt;Minion&lt;/a&gt;, the Mojo-based job queue that can do things in different processes.&lt;/p&gt;

&lt;p&gt;The rest of the program is data extraction. In &lt;code&gt;parse_page&lt;/code&gt;, I have various &lt;a href="https://docs.mojolicious.org/Mojo/DOM/CSS"&gt;CSS Selectors&lt;/a&gt; to extract all of the &lt;code&gt;div.animal-row&lt;/code&gt; and turn each animal into a hash (again, I have lots of examples in &lt;em&gt;&lt;a href="https://leanpub.com/mojo_web_clients"&gt;Mojo Web Clients&lt;/a&gt;&lt;/em&gt;). Each Promise adds its results to the &lt;code&gt;@grand&lt;/code&gt; array. At the end, I turn that into a JSON file, which I&amp;rsquo;ve also uploaded as a &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As someone who has been doing this sort of extraction for quite a while, I&amp;rsquo;m always quite pleased how easy Mojolicious makes this. Everything I need is already there, uses the same idioms, and works together nicely. I get the page and select some elements. A long time ago, I would have had long series of substitutions, regexes, and other low-level text processing. Perl&amp;rsquo;s certainly good at text processing, but that doesn&amp;rsquo;t mean I want to work at that level in every program. Do something powerful a couple times and it doesn&amp;rsquo;t seem so cool anymore, although the next step for Mojolicious might be &lt;em&gt;Minority Report&lt;/em&gt;-style pre-fetching where it knows what I want before I do.&lt;/p&gt;

&lt;h2 id="a-nifty-trick"&gt;A nifty trick&lt;/h2&gt;

&lt;p&gt;I do use a few interesting tricks just because I do. Lately in these sorts of programs I&amp;rsquo;m collecting things into a data structure then presenting it at the end. Typically that means I do the setup at the top of the program file and the output at the end.  However, after I&amp;rsquo;ve defined the &lt;code&gt;@grand&lt;/code&gt; variable, I immediately define an &lt;code&gt;END&lt;/code&gt; block to specify what to do with &lt;code&gt;@grand&lt;/code&gt; once everything else has happened:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-perl" data-lang="perl"&gt;&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; @grand;
&lt;span style="color:#66d9ef"&gt;END&lt;/span&gt; {
	&lt;span style="color:#75715e"&gt;# Since the results come out of order,&lt;/span&gt;
	&lt;span style="color:#75715e"&gt;# sort by animal name then title&lt;/span&gt;
	@grand &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sort {
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{animal}
			&lt;span style="color:#f92672"&gt;or&lt;/span&gt;
		$a&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title} &lt;span style="color:#f92672"&gt;cmp&lt;/span&gt; $b&lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt;{title}
		} @grand;

	&lt;span style="color:#66d9ef"&gt;my&lt;/span&gt; $json &lt;span style="color:#f92672"&gt;=&lt;/span&gt; encode_json( &lt;span style="color:#f92672"&gt;\&lt;/span&gt;@grand );
	say $json;
	}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That keeps the details of the data structure together. The entire point of the program is to get those data out to the JSON file.&lt;/p&gt;

&lt;p&gt;I could have just as easily kept that together with a normal Perl subroutine, but &lt;code&gt;END&lt;/code&gt; is a subroutine that I don&amp;rsquo;t need to call explicitly. This is merely something I&amp;rsquo;ve been doing lately and I might change my mind later.&lt;/p&gt;

&lt;h2 id="a-little-safari"&gt;A little safari&lt;/h2&gt;

&lt;p&gt;And I leave you with a little safari for your own amusement. My animals are the Llama, Alpaca, Vicuñas, Camel, and Hamadryas Butterfly. Search the O&amp;rsquo;Reilly list (or my JSON) to find those titles. Some of them are missing and some have surprising results.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://perldotcom.perl.org/images/extracting-the-list-of-o-reilly-animals/learning_perl.jpeg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Here are some interesting &lt;a href="https://stedolan.github.io/jq/"&gt;jq&lt;/a&gt; commands to play with the &lt;a href="https://gist.github.com/briandfoy/d68915eb425e1fc4932ceac5cdf2d60d"&gt;Animals JSON file&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get all the title
$ jq -r '.[].title' &amp;lt; animals.json | sort | head -10
.NET &amp;amp; XML
.NET Compact Framework Pocket Guide
.NET Framework Essentials
.NET Gotchas
.NET Windows Forms in a Nutshell
20 Recipes for Programming MVC 3
20 Recipes for Programming PhoneGap
21 Recipes for Mining Twitter
25 Recipes for Getting Started with R
50 Tips and Tricks for MongoDB Develope

# tab-separated list of animals and titles
$ jq -r '.[] | &amp;quot;\(.animal) =&amp;gt; \(.title)&amp;quot;' &amp;lt; animals.json | sort
12-Wired Bird of Paradise	Mobile Design and Development
3-Banded Armadillo	Windows PowerShell for Developers
Aardvark	Jakarta Commons Cookbook
Aardwolf	Clojure Cookbook
Addax, aka Screwhorn Antelope	Ubuntu: Up and Running
Adjutant (Storks)	Social eCommerce
Aegina Citrea, narcomedusae, jellyfish	BioBuilder
African Civet	JRuby Cookbook
African Crowned Crane aka Grey Crowned Crane	C# 5.0 Pocket Reference
African Crowned Crane aka Grey Crowned Crane	Programming C# 3.0

# find a title by exact match of animal
$ jq -r '.[] | select(.animal==&amp;quot;Llama&amp;quot;) | .title' &amp;lt; animals.json
Randal Schwartz on Learning Perl

# find a title with a regex match against the animal
$ jq -r '.[] | select(.animal|test(&amp;quot;ama&amp;quot;)) | .title' &amp;lt; animals.json | sort
Access Cookbook
Access Database Design &amp;amp; Programming
ActionScript for Flash MX Pocket Reference
ActionScript for Flash MX: The Definitive Guide
Ajax on Java
Appcelerator Titanium: Up and Running
Embedding Perl in HTML with Mason
Fluent Python
Identity, Authentication, and Access Management in OpenStack
Introduction to Machine Learning with Python
Learning Perl 6
PDF Explained
Randal Schwartz on Learning Perl
SQL Pocket Guide
SQL Tuning
Solaris 8 Administrator's Guide
The Little Book on CoffeeScript
Writing Game Center Apps in iOS

# find an animal with a regex match against the title
$ jq -r '.[] | select(.title|test(&amp;quot;Perl&amp;quot;)) | .animal' &amp;lt; animals.json | sort
Alpaca
Aoudad, aka Barbary sheep
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary
Arabian Camel, aka Dromedary, Head
Badger
Bighorn Sheep
Black Leopard
Blesbok (African antelope)
Camel, aka Dromedary
Cheetah
Emu, large and fluffy
Emu, young
Fan-footed Gecko, aka Wall Gecko
Flying Dragon (lizard)
Flying Dragon (lizard)
Greater Honeyguide
Green Monkey 1 (adult holding a baby)
Hamadryas Baboon
Hamadryas Butterfly
Llama
Mouse
North American Bullfrog
Proboscis Monkey
Red Colobus Monkey
Sea Otter
Staghound
Tadpole of a Greenfrog (sketch)
Thread-winged Lacewing, aka Antlion
White-tailed Eagle
Wolf
&lt;/code&gt;&lt;/pre&gt;
</content>
    <id>https://perldotcom.perl.org/article/extracting-the-list-of-o-reilly-animals/</id>
    <published>2021-01-11T18:02:50Z</published>
    <updated>2021-01-11T18:02:50Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/10#pwc094" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of strings &lt;span class="citation" data-cites="S"&gt;@S&lt;/span&gt;. Write a script to group Anagrams together in any random order.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
my %letter_factor = (
    e =&gt; 2,
    t =&gt; 3,
    a =&gt; 5,
    o =&gt; 7,
    i =&gt; 11,
    n =&gt; 13,
    s =&gt; 17,
    h =&gt; 19,
    r =&gt; 23,
    d =&gt; 29,
    l =&gt; 31,
    c =&gt; 37,
    u =&gt; 41,
    m =&gt; 43,
    w =&gt; 47,
    f =&gt; 53,
    g =&gt; 59,
    y =&gt; 61,
    p =&gt; 67,
    b =&gt; 71,
    v =&gt; 73,
    k =&gt; 79,
    j =&gt; 83,
    x =&gt; 89,
    q =&gt; 97,
    z =&gt; 101  
);  

MAIN:{
    my $word;
    my %anagrams;
    while($word = &lt;DATA&gt;){
        chomp($word); 
        my @letters = split(//, $word);
        my $word_product = 1;
        map {$word_product *= $_} map{$letter_factor{$_}} @letters;
        push @{$anagrams{$word_product}} , $word if $anagrams{$word_product};  
        $anagrams{$word_product} = [$word] unless $anagrams{$word_product};  
    }  
    close(DATA);
    print "Organized anagrams:\n";
    for my $key (keys %anagrams){
        print "  "; 
        for my $word (@{$anagrams{$key}}){
            print "$word ";
        }
        print "\n";
    }   
}   

__DATA__
opt
bat
saw
tab
pot
top
was
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
Organized anagrams:
  saw was 
  bat tab 
  opt pot top 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am using the same mathematical trick that I have used for anagrams in the past, starting with &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/04/26"&gt;Challenge 005&lt;/a&gt;. The By the &lt;strong&gt;Fundamental Theorem of Arithmetic&lt;/strong&gt; &lt;em&gt;every integer greater than 1 is either a prime number itself or can be represented as the unique product of prime numbers.&lt;/em&gt; We use that to our advantage by having a prime number associated with each letter. Each word is a product of these numbers and words with the same product are anagrams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this way we build a hash keyed by word product whose values are list of anagrams. After constructing this data structure we then just print out the contents of all the lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The choice of letters and prime numbers is based on the &lt;em&gt;Lewand Ordering&lt;/em&gt; and it isn’t at all necessary but it does little harm so I left it in anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree. Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally, print the linked list object.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use LinkedList;

sub build_linked_list{ 
    my($tree) = @_;
    my $linked_list = new LinkedList(); 
    my @paths = build_paths($tree);
    my $root = $paths[0]-&gt;[0]; 
    my $next = $linked_list-&gt;insert($root, undef); 
    for my $path (@paths){
        for my $node (@{$path}){
            $next = $linked_list-&gt;insert($node, $next) if !$linked_list-&gt;in_list($node);    
        }
    } 
    return $linked_list;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         unshift @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6, 7);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(2, 5);
    $Tree-&gt;add_edge(5, 6);
    $Tree-&gt;add_edge(5, 7);
    print build_linked_list($Tree)-&gt;stringify();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LinkedList module used is of my own making. I am using a somewhat modified version of the LinkedList module I made for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt;. Next is what that code looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList{
    use boolean;
    use Tie::RefHash;
    use Class::Struct;
    package Node{
        use Class::Struct;

        struct(
            data =&gt; q/$/,
            next =&gt; q/Node/
        );
    }

    struct(
        head =&gt; q/Node/
    );

    sub stringify{
        my($self) = @_;
        my $s = "";
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;data();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;data() if $next-&gt;data();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $data, $previous) = @_;
        if(!$previous){
            $previous=new Node(data =&gt; undef, next =&gt; undef);
            $self-&gt;head($previous);
        }
        my $next=new Node(data =&gt; $data, next =&gt; undef);
        $previous-&gt;next($next);
        return $next;
    }

    sub in_list{
        my($self, $k) = @_;
        my $previous = $self-&gt;head();
        my $next = $self-&gt;head()-&gt;next();
        tie my %node_value, "Tie::RefHash";
        while($next){
            return true if($next-&gt;data() == $k); 
            $next = $next-&gt;next(); 
        }
        return false;
    }
    true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -I. ch-2.pl
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Depth First Search (DFS) code for building the paths is the same as &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03"&gt;last week&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DFS returns all the paths they are simply inserted into the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My LinkedList module is one of my favorite uses of &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My write up for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt; has some more notes on this LinkedList.pm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Letter_frequency"&gt;Lewand Ordering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html"&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc094</id>
    <published>2021-01-10T11:29:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Git-Hooks mit Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Git ist eine weit verbreitete Software zur Versionsverwaltung. Wir nutzen Git seit vielen Jahren, um unseren Perl-Code zu verwalten. Soll im Git-Workflow etwas erzwungen werden, kommen sogenannte Git-Hooks zum Einsatz.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl</id>
    <published>2021-01-06T10:00:00Z</published>
    <updated>2021-01-06T10:00:00Z</updated>
  </entry>
</feed>
