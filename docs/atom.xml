<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2022-07-27T01:00:22Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Numeric Variable Names With Leading Zeroes</title>
    <link rel="alternate" href="http://blogs.perl.org/users/tom_wyant/2022/07/numeric-variable-names-with-leading-zeroes.html"/>
    <id>tag:blogs.perl.org,2022:/users/tom_wyant//506.10860</id>
    <published>2022-07-26T21:52:03Z</published>
    <updated>2022-07-26T21:54:10Z</updated>
    <author>
        <name>Tom Wyant</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/tom_wyant/">
        <![CDATA[<p>Over on the p5p mailing list, a user raised the issue that <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2022/07/msg264450.html">use of variable <code>$00</code> is an error starting with Perl 5.32</a>, and asked that this "regression" be fixed.</p>

<p>I have always understood that variables whose names begin with anything but an alphabetic or an underscore are reserved to Perl, and you mess with them at your peril. And this is the gist of the Porters&apos; response to the post. Recent versions of <a href="https://perldoc.perl.org/perlvar.html"><code>perlvar</code></a> say this explicitly, though earlier versions of that document restrict themselves to describing currently-implemented special variables.</p>

<p>For what it's worth, <a href="https://perldoc.perl.org/perl5320delta"><code>perl532delta</code></a> appears <strong>not</strong> to mention this as a new diagnostic.</p>

<p>I wondered how much of this kind of thing was in CPAN, so I whipped up a <code>Perl::Critic</code> policy to try to find them: <a href="https://github.com/trwyant/perl-Perl-Critic-Policy-Variables-ProhibitNumericNamesWithLeadingZero"><code>Variables::ProhibitNumericNamesWithLeadingZero</code></a>. I then ran this against CPAN as it stood July 23 2022.</p>

<p>The only violation of this policy that I found was in line 1209 of <a href="https://metacpan.org/pod/Net::Elexol::EtherIO24"><code>Net::Elexol::EtherIO24</code></a>. The most recent release of this module (as of this writing) is August 11 2009. The line in violation (in context) is</p>

<pre>
1208    $txt .= sprintf("MAC: %02.2x:%02.2x:02.2x:02.2x:02.2x:02.2x  ".
1209                    "Fw: %02.2x.$02.2x",
1210                    unpack("x$len CCCCCCCC", $cmd));
</pre>

<p>and looks to me very much like a typo for <code>%02.2x</code>. The distribution requires a threaded Perl, and CPAN Testers show failures with <code>Error:  Numeric variables with more than one digit may not start with '0' at Net-Elexol-EtherIO24-0.22-0/blib/lib/Net/Elexol/EtherIO24.pm line 1209.</code> for Perl versions 5.32.1 and above. There are no reports for 5.32.0.</p>

<p>Under the circumstances I can not imagine anyone (other than maybe the original poster on p5p) actually wanting this perlcritic policy published, but I did stick it on GitHub for the curious.</p>
]]>
        
    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 174: Disarium Numbers and Permutation Rankings</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-and-permutation-rankings.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10854</id>
    <published>2022-07-19T22:14:18Z</published>
    <updated>2022-07-26T12:38:01Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 174 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-174/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few of days from now (on July 24, 2022 at 23:59). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Disarium Numbers</h2>

<p><em>Write a script to generate first 19 Disarium Numbers.</em></p>

<blockquote>
  <p><em>A disarium number is an integer where the sum of each digit raised to the power of its position in the number, is equal to the number.</em></p>
</blockquote>

<p><em>For example,</em></p>

<pre><code>518 is a disarium number as (5 ** 1) + (1 ** 2) + (8 ** 3) =&gt; 5 + 1 + 512 =&gt; 518
</code></pre>

<p>In Raku and Perl, we&#8217;ll implicitly convert the input number into a string of characters (<code>@digits</code>), split it into an array of characters, and then implicitly convert each character into a digit.  In some other languages such as awk, bc, or C, such implicit conversion don&#8217;t happen or are tedious, and we will use mathematical computations to get the individual digits.</p>

<h3>Disarium Numbers in Raku</h3>

<p>This is quite straight forward. We have a <code>is-disarium</code> subroutine which returns a True value is the described sum is equal to the input value, and False otherwise.  Then we use it to test each subsequent integer from 0 on and print out the number if it is a disarium number. We stop when we reach 19 disarium numbers.</p>

<pre><code>sub is-disarium($num) {
    my @digits = $num.comb;
    my $sum = [+] map { $^b ** ($^a + 1) }, @digits.kv;
    return $num == $sum;
}
my $count = 0;
my $i = 0;
while $count &lt; 19 {
    ++$count and say $i if is-disarium($i);
    $i++;
    # say "i: $i";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
2646798
</code></pre>

<p>This program took 0.4 second to find the first 18 disarium numbers, and then more than 4 minutes to find the 19th one. I have to confess that, for years, I have been too lazy to upgrade my Rakudo installation, which dates from 2019. This time, I decided it was high time to upgrade it and installed version 2022.06 to see what happens.</p>

<p>The good news is that, with this new version, the program ran in about 45 seconds. More than five times faster, that&#8217;s a rather impressive improvement. The bad news, though, is that it&#8217;s  still very slow. The equivalent Perl and Python programs (see below) both took slightly less than 10 seconds, the Julia implementation ran in 3 seconds, and the C program completed in less than half a second. There is definitely a large opportunity for performance improvement. I love Raku, but I must admit that, in terms or performance, it is currently not good at intensive number crunching.</p>

<h3>Disarium Numbers in Perl</h3>

<p>This is a port to Perl of the Raku program just above, with a <code>is_disarium</code> subroutine to find is the input integer is a disarium number.</p>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_disarium {
    my $num = shift;
    my @digits = split '', $num;
    my $i = 1;
    my $sum = 0;
    $sum += $_ for map {  $_ ** $i++ } @digits;
    return $num == $sum;
}
my $i = 0;
my $count = 0;
while ($count &lt; 19) {
    say $i and $count++ if is_disarium $i;
    $i++;
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ time perl ./disarium.pl

0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798

real    0m9,781s
user    0m9,625s
sys     0m0,046s
</code></pre>

<h3>Disarium Numbers in Julia</h3>

<p>Julia has the built-in <code>digits</code> function, which produces a list of digits of the input number (in the wrong order for our purpose), and <code>enumerate</code> iterator, which yields a list of indexes and values. These functions make the <code>is_disarium</code> function very simple (it could easily be written in one single code line).</p>

<pre><code>function is_disarium(n)
    s = sum(i ^ p for (p, i) in enumerate(reverse(digits(n))))
    return s == n
end

count = 0
i = 0
while count &lt; 19
    if is_disarium(i)
        println(i)
        global count += 1
    end
    global i += 1
end
</code></pre>

<p>Output:</p>

<pre><code>julia ./disarium.jl
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in awk</h3>

<p>The awk language doesn&#8217;t have the powerful string functions of Raku, Perl, or Julia. In the <code>while</code> loop of the <code>is_disarium</code> function, we use the integer division and modulo operators to get each digit of the input integer in turn. </p>

<pre><code>function is_disarium(num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = int(n/10)
        len--
    }
    return (sum == num)
}

BEGIN {
    count = 0
    i = 0
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d\n", i)
            count++
        }
        i++
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ awk -f ./disarium.awk
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in bc</h3>

<p>This program is very similar to the awk program just above, with the same method to access the individual digits.</p>

<pre><code>define is_disarium (num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = n/10
        len -= 1
    }
    return (sum == num)
}

count = 0
i = 0
while (count &lt; 19) {
    if (is_disarium(i)) {
        print i, "\n"
        count += 1
    }
    i += 1
}
quit
</code></pre>

<p>Output:</p>

<pre><code>$ bc  ./disarium.bc
bc 1.06.95
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'.
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in dc</h3>

<p>The problem can be solved with a dc one-liner (spread over two lines for formatting reasons):</p>

<pre><code>$ dc -e '[10/ll1+sld0&lt;Lx] sL [d10%ll^ls+ss10/ll1-sld0&lt;Dx] sD [lc1+sc
lnp] sP [lisnln0sllLx0ssclnlDxlsln=Pli1+silc18&gt;Ix] sI0si0sclIx'
0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
</code></pre>

<p>Note that I only printed 18 numbers because this is getting really slow.</p>

<p>This is not a golf attempt: I could have removed a few spaces if I had wanted to golf it. </p>

<p>But I must admit dc scripts are not easy to read. This is now a much more readable version of the same solution:</p>

<pre><code># Macro for computing the input number length
[10      # pushes 10 to stack
 /       # divides input by 10 and stores result on stack
 ll      # push length on stack
 1+      # add one to stack (length)
 # p     # prints intermediate length (for debugging)
 sl      # saves length to register l
 d       # duplicates value (number) on top of stack
 0       # pushes 0 to stack
 &lt;Lx     # executes length macro (L) if number &gt; 0
] sL     # end of length macro, store it in L

# is Disarium macro
[d      # duplicates value (number) on top of stack
10      # pushes 10 to stack
%       # pushes (number % 10) to stack
ll      # pushes length to stack
^       # computes (n % 10) ^ len
ls      # pushes sum to stack
+ss     # computes new sum and stores it in s
10/     # integer division number / 10
ll      # pushes length on stack
1-      # subtract 1 froml length
sl      # stores new length in l
d       # duplicates value (number) on top of stack
0       # pushes 0 to stack
&lt;Dx     # executes recursively disarium macro (D) if number &gt; 0
] sD    # stores disarium macro in D

# Printing and counting macro
[lc1+sc # increments disarium number counter
lnp     # print number
]sP # Stores printing macro in P

# Iteration macro
[li sn  # Stores iteration variable in number register
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # inititialize sum to 0
cln     # clear stack and pushes number onto it
# llp   # print the length
lDx     # runs the Disarium macro once
lsln    # pushes sum and number
=P      # runs the printing macro if numbers are equal
li      # loads iteration variable
1+si    # increments iteration variable
lc18    # pushes counter and 18 on stack
&gt;Ix     # runs recursively iteration macro if counter &lt; 18
] sI    # end of iteration macro, stores it in I 

# Main
0si     # Initiate iteration variable
0sc     # Initiate disarium numbers counter
lIx     # running iteration macro the first time
</code></pre>

<p>Output:</p>

<pre><code>$ dc disarium.dc
0
1
2
3
[Lines omitted for brevity]
1306
1676
2427
</code></pre>

<p>Understanding the solution in details would require a lot more explanations than what I can provide here. If you want to understand better how this program works and, more broadly, how the dc syntax works, you are kindly invited to read <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-in-dc.html">this other blog post</a> where I describe the solution in detail.</p>

<h3>Disarium Numbers in C</h3>

<p>The C programming language doesn&#8217;t have a standard exponentiation operator. So I wrote a <code>power</code> function to perform exponentiation of individual digits. There is also no direct way to find the number of digits of an integer. So, I used <code>floor(log10(n)) + 1</code> to find the size of an integer <code>n</code>, except that it would fail for an input of 0, so I used this method only for integers larger than 9.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int power (int base, int exponent) {
    int result = 1;
    for (int i = 1; i &lt;= exponent; i++) {
        result *= base;
    }
    return result;
}

int is_disarium (int num) {
    int n = num;
    int sum = 0;
    int len = n &lt;= 9 ? 1 : floor(log10(n)) + 1;
    while (n &gt; 0) {
        sum += power(n % 10, len);
        n /= 10;
        len--;
    }

    return num == sum;
}

int main() {
    int count = 0;
    int i = 0;
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d\n", i);
            count++;
        }
        i++;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>$ time ./a.out
0
1
2
3
[Lines omitted for brevity]
1676
2427
2646798

real    0m0,475s
user    0m0,280s
sys     0m0,015s
</code></pre>

<h3>Disarium Numbers in Python</h3>

<p>Also using the integer division and modulo operators to get each digit of the input integer.</p>

<pre><code>def is_disarium(num):
    n = num
    size = len(str(n))
    sum = 0
    while n &gt; 0:
        sum += (n % 10) ** size
        n //= 10
        size -= 1
    return sum == num

i = 0
count = 0
while count &lt; 19:
    if is_disarium(i):
        print(i)
        count += 1
    i += 1
</code></pre>

<p>Output:</p>

<pre><code>$ python3 disarium.py
0
1
2
3
[Lines omitted for brevity]
1306
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in Ruby</h3>

<pre><code>def is_disarium(num)
    n = num.to_s
    sum = 0
    for i in 1..(n.length)
        sum += n[i-1].to_i**i
    end
    return sum == num
end

i = 0
count = 0
while count &lt; 19
    if is_disarium(i)
        printf("%d ", i)
        count += 1
    end
    i += 1
end
print("\n")
</code></pre>

<p>From now on, our programs will display the disarium numbers on one line to save space: </p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Kotlin</h3>

<p>Kotlin has a <code>pow</code> function for exponentiation, but it works with <code>Double</code> and <code>Float</code> leading to numerous time-consuming difficulties. I ended up writing my own <code>power</code> functions for integers.</p>

<pre><code>fun power(n: Int, exp: Int): Int {
    return when {
        exp &gt; 1 -&gt; n * power(n, exp-1)
        exp == 1 -&gt; n
        else -&gt; 1
    }
}
fun is_disarium(num: Int): Boolean {
    val n = num.toString()
    var sum = 0
    for (i in 1..n.length) {
        sum += power (n[i-1] - '0', i)
    }
    return sum == num
}
fun main() {
    var i = 0
    var count = 0
    while (count &lt; 19) {
        if (is_disarium(i)) {
            print("$i ")
            count++
        }
        i++
    }
    println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Rust</h3>

<p>I don&#8217;t really like Rust because, in my humble opinion, its type system is really an obstructive straitjacket and gets in the way of doing simple things. Just like in Kotlin, I ended up writing my own <code>power</code> functions for exponentiating integers.</p>

<pre><code>fn power(n: i32, exp: i32) -&gt; i32 {
    let mut result = 1;
    for _i in 0..exp {
        result *= n;
    }
    return result;
}
fn is_disarium(num: i32) -&gt; bool {
    let mut n = num;
    let mut sum = 0;
    let mut i = 1;
    let len = num.to_string().len();
    while n &gt; 0 {
        sum += power(n % 10, len as i32 - i + 1);
        n /= 10;
        i += 1
    }
    return sum == num;
}
fn main() {
    let mut i = 0;
    let mut count = 0;
    while count &lt;= 18 {
        if is_disarium(i) {
            print!("{} ", i);
            count += 1;
        }
        i += 1;
    }
    println!("{}", " ")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Java</h3>

<pre><code>import java.lang.Math;

public class DisariumNumbers {
    public static boolean is_disarium(int num) {
        int n = num;
        int len = Integer.toString(n).length();
        int sum = 0;
        int i = 1;
        while (n &gt; 0) {
            sum += Math.pow(n % 10, len - i + 1);
            n /= 10;
            i ++;
        }
        return sum  == num;
    }

    public static void main(String[] args) {
        int i = 0;
        int count = 0;
        while (count &lt;= 18) {
            if (is_disarium(i)) {
                System.out.printf("%d ", i);
                count++;
            }
            i++;
        }
        System.out.printf("%s", "\n");
    }
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Scala</h3>

<pre><code>object Disarium extends App {
  def power(base: Int, exp: Int): Int = {
    var result = 1
    for (i &lt;- 1 to exp) {
      result *= base
    }
    return result
  }
  def is_disarium(num: Int): Boolean = {
    val digits = num.toString.split("")
    var sum = 0
    for (i &lt;- 0 to (digits.size - 1)) {
      sum += power(digits(i).toInt, i + 1)
    }
    return num == sum
  }
  var i = 0
  var count = 0
  while (count &lt; 19) {
    if (is_disarium(i)) {
      count += 1
      printf("%d ", i)
    }
    i += 1
  }
  println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Ring</h3>

<pre><code>i = 0
count = 0
while count &lt; 19
    if is_disarium(i)
        see "" + i + " "
        count++
    ok
    i++
end    
see nl

func pow (base, exp)
    result = 1
    for i = 0 to exp - 1
        result *= base
    next
    return result

func is_disarium (num)
    n = "" + num
    sum = 0
    for i = 1 to len(n)
        sum += pow (n[i] % 10, i)
    next
    return sum = num
</code></pre>

<p>Output:</p>

<pre><code>$ ring ./disarium.ring
0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Nim</h3>

<pre><code>import strutils
import math

proc is_disarium(num: int): bool =
  let n = intToStr(num)
  var sum = 0
  for i in 0..len(n)-1:
    sum += int((int(n[i])-48) ^ (i+1))
  return sum == num

var i = 0
var count = 0
while count &lt; 19:
  if is_disarium(i):
    stdout.write i, " "
    count += 1
  i += 1
echo ""
</code></pre>

<p>Output:</p>

<p>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798 </p>

<h3>Disarium Numbers in Go</h3>

<pre><code>package main

import (
    "fmt"
    "math"
    "strconv"
)

func is_disarium(num int) bool {
    n := num
    i := 0
    sum := 0
    l := len(strconv.Itoa(n))
    for n &gt; 0 {
        sum += int(math.Pow(float64(n%10), float64(l-i)))
        n /= 10
        i++
    }
    return sum == num
}
func main() {
    i := 0
    count := 0
    for count &lt; 19 {
        if is_disarium(i) {
            fmt.Printf("%d ", i)
            count++
        }
        i++
    }
    fmt.Println("")
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Tcl</h3>

<p>I used to be a fan of Tcl some 25 to 30 years ago, not that I really loved Tcl itself, but because it came usually bundled with the Tk graphical toolkit, and I really loved Tk, which made fairly easy the design and implementation of graphical interfaces. But I wasn&#8217;t really impressed at the time by its shell-looking syntax and, often, I wasn&#8217;t quite sure whether I should add a <code>$</code> sign before a variable name or not, or whether I should use <code>[...]</code>, <code>(...)</code>, or <code>{...}</code>. Now, more than a quarter of century later, I have forgotten most if not all the details about the syntax, and I find it quite difficult to use and somewhat awkward (but perhaps it is my own prejudice). Still, I&#8217;m posting this Tcl implementation as a kind of tribute to John Ousterhout, the blessed creator of Tcl-Tk.</p>

<pre><code>proc is_disarium {num} {
    set n num
    set sum 0
    set i 1
    set ch 1
    foreach char [split $num {}] {
        scan $char %d ch
        set sum [ expr ($sum + $ch ** $i)]
        incr i
    }
    return [ expr $num == $sum ? 1 : 0]
}
set i 0
set count 0
while { $count &lt; 19 } {
    if [ is_disarium $i ] {
        puts -nonewline  "${i} "
        incr count
    }
    incr i
}
puts ""
</code></pre>

<p>Output:</p>

<pre><code>$ tclsh ./disarium.tcl
0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in D</h3>

<pre><code>import std.stdio;
import std.math;
import std.conv;

bool is_disarium(int num) {
    int n = num;
    int sum = 0;
    ulong len = to!string(num, 10).length;
    while (n &gt; 0) {
        sum += pow(n % 10, len);
        n /= 10;
        len--;
    }
    return num == sum;
}
void main() {
    int i = 0;
    int count = 0;
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d ", i);
            count++;
        }
        i++;
    }
    writeln(" ");
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in Dart</h3>

<pre><code>import "dart:math";
import "dart:io";
void main() {
    var count = 0;
    var i = 0;
    while (count &lt; 19) {
        if (is_disarium(i)) {
            stdout.write("$i ");
            count++;
        }
        i++;
    }
}

bool is_disarium(numb) {
    var n = numb;
    var len = n.toString().length;
    var sum = 0;
    while (n &gt; 0) {
        sum += (pow(n % 10, len)).toInt();
        n = (n / 10).toInt();
        len--;
    }
    return numb == sum;
}
</code></pre>

<p>Output:</p>

<pre><code>0 1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798
</code></pre>

<h3>Disarium Numbers in JavaScript</h3>

<pre><code>function is_disarium (num) {
    let n = num
    let len = n.toString().length
    let sum = 0
    while (n &gt; 0) {
        sum += (n % 10) ** len
        n = parseInt(n / 10, 10)
        len--
    }
    return num == sum
}
let count = 0
let i = 1
while (count &lt; 18) {
    if (is_disarium(i)) {
        process.stdout.write(i + " ")
        count++
    }
    i++
}
</code></pre>

<p>Output:</p>

<p>1 2 3 4 5 6 7 8 9 89 135 175 518 598 1306 1676 2427 2646798 </p>

<h2>Task 2: Permutation Ranking</h2>

<p><em>You are given a list of integers with no duplicates, e.g. <code>[0, 1, 2]</code>.</em></p>

<p><em>Write two functions, <code>permutation2rank()</code> which will take the list and determine its rank (starting at 0) in the set of possible permutations arranged in lexicographic order, and <code>rank2permutation()</code> which will take the list and a rank number and produce just that permutation.</em></p>

<p><em>Please checkout this <a href="https://tryalgo.org/en/permutations/2016/09/05/permutation-rank">post</a> for more informations and algorithm.</em></p>

<p><em>Given the list <code>[0, 1, 2]</code> the ordered permutations are:</em></p>

<pre><code>0: [0, 1, 2]
1: [0, 2, 1]
2: [1, 0, 2]
3: [1, 2, 0]
4: [2, 0, 1]
5: [2, 1, 0]
</code></pre>

<p><em>and therefore:</em></p>

<pre><code>permutation2rank([1, 0, 2]) = 2

rank2permutation([0, 1, 2], 1) = [0, 2, 1]
</code></pre>

<p>Given that dealing with integers, I do not understand why permutations should be arranged in lexicographic order. I would expect permutation <code>[9, 11]</code> to be before permutation <code>[11, 9]</code>, but lexicographic order would arrange them the other way around: <code>[11, 9], [9, 11]</code>. Well, it doesn&#8217;t really matter and we will use in our tests only single digit integers to avoid bizarre results. I&#8217;ll even use a test with single letters to show that my implementation also works with letters.</p>

<p>The second thing is that since my implementation of <code>permutation2rank</code> creates an ordered array of permutations, we don&#8217;t really need the <code>rank2permutation</code> subroutine to find the permutation with rank <code>n</code>, since I only need to lookup the array. I&#8217;ll create the <code>rank2permutation</code> subroutine nonetheless, just to abide with the specification.</p>

<h3>Permutation Ranking in Raku</h3>

<p>In Raku, the <code>permutations</code> method will create permutations in the proper order provided the input permutation is itself in the right order. So we only need to sort the input permutation at the beginning.</p>

<pre><code>my @permut_str;

sub permutation2rank(@in) {
    # if the input list is sorted, then permutations will be sorted
    # Forcing a lexicographic order (although not really needed here)
    my @sorted = sort { $^a leg $^b }, @in;
    my @permutations = @sorted.permutations;
    @permut_str = map {[join " ", $_]}, @permutations;
    my %ranks = map { $^b =&gt; $^a }, @permut_str.kv;
}
sub rank2permutations ($rank) {
    return @permut_str[$rank];
}

my @tests = (1, 0, 2), (6, 3, 4), &lt;a c d b&gt;;
for @tests -&gt; @test {
    my %ranks = permutation2rank(@test);
    say @permut_str;
    my $test = join " ", @test;
    say "[$test] has rank %ranks{$test}";
    say "Rank %ranks{$test} is ", rank2permutations(%ranks{$test});
    say "Rank {%ranks{$test} - 1} is ", rank2permutations(%ranks{$test} - 1);
    say "";
}
</code></pre>

<p>Note that we are also printing the sorted permutations to enable easy verification of the results.</p>

<p>This program displays the following output:</p>

<pre><code>$ raku ./permute_ranks.raku
[[0 1 2] [0 2 1] [1 0 2] [1 2 0] [2 0 1] [2 1 0]]
[1 0 2] has rank 2
Rank 2 is [1 0 2]
Rank 1 is [0 2 1]

[[3 4 6] [3 6 4] [4 3 6] [4 6 3] [6 3 4] [6 4 3]]
[6 3 4] has rank 4
Rank 4 is [6 3 4]
Rank 3 is [4 6 3]

[[a b c d] [a b d c] [a c b d] [a c d b] [a d b c] [a d c b] [b a c d] [b a d c] [b c a d] [b c d a] [b d a c] [b d c a] [c a b d] [c a d b] [c b a d] [c b d a] [c d a b] [c d b a] [d a b c] [d a c b] [d b a c] [d b c a] [d c a b] [d c b a]]
[a c d b] has rank 3
Rank 3 is [a c d b]
Rank 2 is [a c b d]
</code></pre>

<h3>Permutation Ranking in Perl</h3>

<p>Perl has no built-in function to create permutations, so we implement the recursive <code>permute</code> subroutine to do that. Note that we designed it in such a way as to create the permutations in the right order, provided the input permutation is itself in the proper order.</p>

<pre><code>use strict;
use warnings;
use feature "say";
use Data::Dumper;

my @permutations;

sub permute {
    my ($done, $left) = @_;
    if (scalar @$left == 0) {
        push @permutations, $done;
        return;
    }
    my @left = @$left;
    permute([ @$done, $left[$_]], [@left[0..$_-1], @left[$_+1..$#left]]) for 0..$#left;
}

sub permutation2rank {
    # if the input list is sorted, then permutations will be sorted
    # This will be in lexicographic order, even for numbers
    my @sorted = sort @_;
    permute([], [@sorted]);
    my @permut_str = map {join " ", @$_} @permutations;
    my $count = 0;
    my %ranks = map { $_ =&gt; $count++ } @permut_str;
}

sub rank2permutations {
    return (map {join " ", @$_} @permutations)[$_[0]];
}

my @tests = ( [1, 0, 2], [6, 3, 4], [&lt;a d c b&gt;]);
for my $test (@tests) {
    @permutations = ();
    my %ranks = permutation2rank (@$test);
    my $test_str = join " ", @$test;
    say "Rank of [$test_str] is: $ranks{$test_str}";
    for my $i (2, 4, 5) {
        say "Rank $i is [", rank2permutations ($i), "]";
    }
    say " ";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ perl ./permute_ranks.pl
Rank of [1 0 2] is: 2
Rank 2 is [1 0 2]
Rank 4 is [2 0 1]
Rank 5 is [2 1 0]

Rank of [6 3 4] is: 4
Rank 2 is [4 3 6]
Rank 4 is [6 3 4]
Rank 5 is [6 4 3]

Rank of [a d c b] is: 5
Rank 2 is [a c b d]
Rank 4 is [a d b c]
Rank 5 is [a d c b]
</code></pre>

<h3>Permutation Ranking in Julia</h3>

<p>Note that Julia array subscripts start at 1, not 0. Therefore, the ranks are shifted by 1 compared to other languages and the output differs accordingly. It would be easy to fix that, but I preferred to keep the Julia semantic.</p>

<pre><code># Note: Julia array subscripts start at 1, not 0
using Combinatorics

function permute(in_list)
    return collect(permutations(sort(in_list), length(in_list)))
end

function permutation2rank(perms, input)
    for i in 1:length(perms)
        if perms[i] == input
            return i
        end
    end
end

function rank2permutation(perm_list, index)
    return perm_list[index]
end

perm_in = [3, 1, 2]
perms = permute(perm_in)
println("Permutations: ", perms)
println("Permutation ", perm_in, " -&gt; rank ", permutation2rank(perms, perm_in))
for i in 1:length(perms)
    println("Rank: ", i, " -&gt; permutation ", rank2permutation(perms, i))
end
</code></pre>

<p>Output:</p>

<pre><code>$ julia ./permute_ranks.jl
Permutations: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
Permutation [3, 1, 2] -&gt; rank 5
Rank: 1 -&gt; permutation [1, 2, 3]
Rank: 2 -&gt; permutation [1, 3, 2]
Rank: 3 -&gt; permutation [2, 1, 3]
Rank: 4 -&gt; permutation [2, 3, 1]
Rank: 5 -&gt; permutation [3, 1, 2]
Rank: 6 -&gt; permutation [3, 2, 1]
</code></pre>

<h3>Permutation Ranking in Python</h3>

<p>Comparing two arrays with the <code>==</code> operator doesn&#8217;t seem to work in Python. There may be a better way to compare arrays, but I decided to stringify the arrays and to compare the resulting strings.</p>

<pre><code>def stringify(input):
  return " ".join(map(str, input))

def permute(input):
  temp = input.copy() # avoid modifying input perm with the sort
  temp.sort()
  return list(itertools.permutations(temp))

def permutation2rank(perms, input):
  perms_str = map(stringify, perms)
  input_str = stringify(input)
  for index, value in enumerate(perms_str):
    if value == input_str:
      return index 

def rank2permutation(permutation, rank):
  return permutation[rank]

perm = [3, 1, 2]
perms = permute(perm)
print("Permutations: ", str(perms))
rank = permutation2rank(perms, perm)
print("Permutation ", perm, " -&gt; rank ", rank)
for i in range(0, len(perms)):
  print("Rank: ", i, " -&gt; permutation ", rank2permutation(perms, i))
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./permute_ranks.py
Permutations:  [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
Permutation  [3, 1, 2]  -&gt; rank  4
Rank:  0  -&gt; permutation  (1, 2, 3)
Rank:  1  -&gt; permutation  (1, 3, 2)
Rank:  2  -&gt; permutation  (2, 1, 3)
Rank:  3  -&gt; permutation  (2, 3, 1)
Rank:  4  -&gt; permutation  (3, 1, 2)
Rank:  5  -&gt; permutation  (3, 2, 1)
</code></pre>

<h3>Permutation Ranking in Ruby</h3>

<pre><code>def permute(in_list)
    return in_list.sort.permutation(in_list.length).to_a
end

def permutation2rank(perms, input)
    for i in 0..perms.length - 1
        if perms[i] == input
            return i
        end
    end
end

def rank2permutation(perms, index)
    return perms[index]
end

perm_in = [3, 1, 2]
perms = permute(perm_in)
puts("Permutations: #{perms} \n")
print("Permutation #{perm_in} -&gt; rank  #{permutation2rank(perms, perm_in)} \n")
for i in 1..perms.length - 1
    print("Rank:  #{i} -&gt; permutation  #{rank2permutation(perms, i)} \n")
end
</code></pre>

<p>Output:</p>

<pre><code>Permutations: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 
Permutation [3, 1, 2] -&gt; rank 4
Rank: 1 -&gt; permutation [1, 3, 2]
Rank: 2 -&gt; permutation [2, 1, 3]
Rank: 3 -&gt; permutation [2, 3, 1]
Rank: 4 -&gt; permutation [3, 1, 2]
Rank: 5 -&gt; permutation [3, 2, 1]
</code></pre>

<h3>Permutation Ranking in Javascript</h3>

<p>JavaScript doesn&#8217;t seem to have a built-in permutation function. The <code>permute</code> function in the program below is derived from <a href="https://stackoverflow.com/questions/9960908/permutations-in-javascript">this Stack Overflow page</a>. I liked it because of its functional style. When I used JavaScript around 2003-04 for Web page development, I did not like too much its somewhat clunky syntax. Taking a fresh look at it nowadays really changes my perception, it appears that the language has really improved in the meantime. I&#8217;ll try to look deeper into it as soon as I get some free time.</p>

<pre><code>function permute(inputArray) {
    let inAry = [...inputArray].sort(); //copy and sort input
    return inAry.reduce(function permute(res, item, key, arr) {
        return res.concat(arr.length &gt; 1 &amp;&amp; arr.slice(0, key)
            .concat(arr.slice(key + 1))
            .reduce(permute, [])
            .map(function (perm) {
                 return [item].concat(perm);
            }) || item);
    }, []);
}

function permutation2rank(perms, in_perm) {
    let input = JSON.stringify(in_perm)
    for (var i = 0; i &lt; perms.length; i++) {  
        // stringify permutations to enable comparison
        if (JSON.stringify(perms[i]) == input) {
            return i
        }
    }
}

function rank2permutation(perm_list, index) {
    return perm_list[index]
}

let perm_in = [3, 1, 2];
let perms = permute(perm_in)
console.log(perms)
let rank = permutation2rank(perms, perm_in)
console.log("Permutation", perm_in, "has rank", rank)
for (var i = 0; i &lt; perms.length; i++) {
    console.log("Rank: ", i, " -&gt; permutation ", rank2permutation(perms, i))
}
</code></pre>

<p>Output:</p>

<pre><code>node /tmp/CUuyiMw4x0.js
[ [ 1, 2, 3 ],
[ 1, 3, 2 ],
[ 2, 1, 3 ],
[ 2, 3, 1 ],
[ 3, 1, 2 ],
[ 3, 2, 1 ] ]
Permutation [ 3, 1, 2 ] has rank 4
Rank:  0  -&gt; permutation  [ 1, 2, 3 ]
Rank:  1  -&gt; permutation  [ 1, 3, 2 ]
Rank:  2  -&gt; permutation  [ 2, 1, 3 ]
Rank:  3  -&gt; permutation  [ 2, 3, 1 ]
Rank:  4  -&gt; permutation  [ 3, 1, 2 ]
Rank:  5  -&gt; permutation  [ 3, 2, 1 ]
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on July 31, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Perl Weekly Challenge 174: Disarium Numbers in dc</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-in-dc.html"/>
    <id>tag:blogs.perl.org,2022:/users/laurent_r//3226.10859</id>
    <published>2022-07-26T02:48:37Z</published>
    <updated>2022-07-26T03:06:48Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>This blog is an answer to the first task (Disarium Numbers) of the Week 174 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-174/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p>Originally, the Perl Weekly Challenge called for solutions in Perl and Raku (also known as Perl 6 at the time). But, very soon, people started to provide solutions in other &#8220;guest&#8221; languages. See for example <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-and-permutation-rankings.html">my blog post</a> providing solutions to the task described below in about 18 different guest languages.</p>

<p>One of the languages I tried for the first time last week with Sylvester&#8217;s sequence is <em>dc</em>, and it turned out to be much more difficult and challenging than I initially thought. One of the problems is that there is only very limited documentation on this <em>old</em> programming language. So I thought it might be useful to describe in some details how I solved it. I provided detailed explanations <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-173-sylvesters-sequence-in-dc.html">in this other blog post</a>. I&#8217;ll now do the same with the disarium number task of this week, which is a bit more complicated.</p>

<h2>The Disarium Number Task of Perl Weekly Challenge 174</h2>

<p><em>Write a script to generate first 19 Disarium Numbers.</em></p>

<blockquote>
  <p><em>A disarium number is an integer where the sum of each digit raised to the power of its position in the number, is equal to the number.</em></p>
</blockquote>

<p><em>For example,</em></p>

<pre><code>518 is a disarium number as (5 ** 1) + (1 ** 2) + (8 ** 3) =&gt; 5 + 1 + 512 =&gt; 518
</code></pre>

<h2>Disarium Numbers in Some Other Languages</h2>

<p>The <em>dc</em> language is difficult and poorly documented. Before we get to it, I want to illustrate the algorithm I&#8217;ll implement with some other more traditional languages.</p>

<p>You can find solutions to this problem in 17 programming languages in <a href="http://blogs.perl.org/users/laurent_r/2022/07/perl-weekly-challenge-174-disarium-numbers-and-permutation-rankings.html">this other blog post</a>. I&#8217;ll show two of them below.</p>

<h3>Disarium Numbers in Raku</h3>

<pre><code>sub is-disarium($num) {
    my @digits = $num.comb;
    my $sum = [+] map { $^b ** ($^a + 1) }, @digits.kv;
    return $num == $sum;
}
my $count = 0;
my $i = 0;
while $count &lt; 19 {
    ++$count and say $i if is-disarium($i);
    $i++;
    # say "i: $i";
}
</code></pre>

<p>This program displays the following output:</p>

<pre><code>0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
2646798
</code></pre>

<h3>Disarium Numbers in Perl</h3>

<pre><code>use strict;
use warnings;
use feature "say";

sub is_disarium {
    my $num = shift;
    my @digits = split '', $num;
    my $i = 1;
    my $sum = 0;
    $sum += $_ for map {  $_ ** $i++ } @digits;
    return $num == $sum;
}
my $i = 0;
my $count = 0;
while ($count &lt; 19) {
    say $i and $count++ if is_disarium $i;
    $i++;
}
</code></pre>

<p>This Perl program displays the same output as the Raku program above.</p>

<h3>Disarium program in awk</h3>

<p>The dc language doesn&#8217;t have the powerful string functions of Raku, Perl, or Julia. Let me provide here an awk implementation, because awk also doesn&#8217;t have these string functions. In the <code>while</code> loop of the <code>is_disarium</code> function, we use the integer division and modulo operators to get each digit of the input integer in turn. We&#8217;ll have to do something similar in dc. </p>

<pre><code>function is_disarium(num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = int(n/10)
        len--
    }
    return (sum == num)
}

BEGIN {
    count = 0
    i = 0
    while (count &lt; 19) {
        if (is_disarium(i)) {
            printf("%d\n", i)
            count++
        }
        i++
    }
}
</code></pre>

<p>This awk program displays the same output as the Raku program above.</p>

<h2>Introducing dc</h2>

<p>According to <a href="https://en.wikipedia.org/wiki/Dc_(computer_program">Wikipedia</a>), dc (desk calculator) is a cross-platform reverse-Polish calculator which supports arbitrary-precision arithmetic. Written by Lorinda Cherry and Robert Morris at Bell Labs, it is one of the oldest Unix utilities, preceding even the invention of the C programming language. dc is docucumented in section 2 of the first ediion of Bell Labs&#8217;s  <a href="https://www.bell-labs.com/usr/dmr/www/man12.pdf">Unix Programmer&#8217;s Manual</a> published on Nov 3, 1971, so dc was probably written in 1970 or latest in 1971. Like other utilities of that vintage, it has a powerful set of features but terse syntax. Traditionally, the bc calculator program (with infix notation) was implemented on top of dc. </p>

<p>dc is the oldest surviving Unix language program. When its home Bell Labs received a PDP-11, dc—written in B—was the first language to run on the new computer, even before an assembler.</p>

<p>It uses reverse Polish notation (RPN) which was also used around the same time by Hewlett-Packard pocket calculators. Actually, the main reason I am interested with dc (despite its awful worse-than-assembler syntax) is that this is essentially the type of language with which I first learned to program back in the mid-1970s with a programmable pocket calculator.</p>

<p>RPN is a postfix notation in which you first specify the operands and then the operator. </p>

<pre><code>$ echo '5 6 + p' | dc
11
</code></pre>

<p>As you can see, we first input the two operands (5 and 6), and then the <code>+</code> operator, and finally the <code>p</code> operator to print out the result of the addition. Prefix your number with an underscore if you want to specify a negative number (e.g. <code>_5</code> for -5)</p>

<p>The spaces are not needed (except between 5 and 6) but improve readability. We could have written it this way:</p>

<pre><code>$ echo '5 6+p' | dc
11
</code></pre>

<p>dc can also be used in interactive mode:</p>

<pre><code>$ dc
5 6
+
p
11
q
</code></pre>

<p>or:</p>

<pre><code>$ dc
5 6 + p q
11
</code></pre>

<p>This can be quite convenient to test chunks of code and we will use that feature.</p>

<p>We can also use the <code>-e</code> (or <code>--expression</code>) command-line option to specify a simple program between single quotes:</p>

<pre><code>$ dc -e '5 6 + p'
11
</code></pre>

<p>dc uses a <em>stack</em> to perform its operations. Stacks are very commonly used data structure in computer science. A stack is a <em>last in / first out</em> data structure. Think of piled-up plates. When you put a clean plate on the stack, you usually put it on top; when you take one out, you also take it from the top. So, the first plate that you take out is the last one that you added. The dc stack implements the same idea: the first piece of data you take out is the last one you added. Adding a new piece of data onto the stack is usually called a <em>push</em> operation, and taking out one piece of data from the stack is called a <em>pop</em> operation.</p>

<p>The various commands above can be understood as follows:</p>

<pre><code>$ dc
5   # push 5 to stack
6   # push 6 to stack
f   # display stack (displays 6 and 5). Useful for debugging
6
5
+   # pop two items from stack, add them and push result to stack
p   # print top item of the stack (prints 11)
11
q   # quit
</code></pre>

<p>Note that the <code>#</code> sign indicates the beginning of a comment (the rest of the line is ignored).</p>

<p>For full details on the dc syntax, please consult the <a href="http://www.gnu.org/software/bc/manual/dc-1.05/html_mono/dc.html">dc GNU manual</a>. We will describe here only the most common commands, those that we are likely to use for our program. The best tutorial I have found on dc is <a href="https://en.wikipedia.org/wiki/Dc_(computer_program">the Wikipedia dc page</a>).</p>

<h3>Printing Commands</h3>

<pre><code>p   Prints the value on the top of the stack, not altering the stack. 
n   Prints the value on the top of the stack, popping it off
f   Prints the entire contents of the stack without altering anything.
</code></pre>

<h3>Stack Control</h3>

<pre><code>c   Clears the stack, rendering it empty
d   duplicate the value on top of the stack
r   Reverses the order of (swaps) the top two values on the stack.
</code></pre>

<h3>Registers</h3>

<p>dc provides at least 256 memory registers, each named by a single character. You can store a number in a register and retrieve it later. </p>

<pre><code>sr  Pops the value off the top of the stack, stores it in register r. 
lr  Copies the value in register r, and pushes it onto the stack.
    This does not alter the contents of r.
</code></pre>

<p>Each register also contains its own stack. The current register value is the top of the register&#8217;s stack. If you want to use a register r as a stack, use <code>Sr</code> (with uppercase S) to push the top of stack value to r, and <code>Lr</code> (with uppercase L) to pop a value from r and push it on the main stack. We will not use the stack features of registers in this blog post.</p>

<h3>Arithmetic</h3>

<pre><code>+   Pops two values off the stack, adds them, and pushes the result.
-   Pops two values, subtracts the first one popped from the second 
    one popped, and pushes the result. 
*   Pops two values, multiplies them, and pushes the result.
/   Pops two values, divides the second one popped from the first 
    one popped, and pushes the result. The number of fraction digits 
    is specified by the precision value. Default is integer division.
%   Pops two values, computes the remainder of the division that 
    the `/` command would do, and pushes that.
^   Pops two values and exponentiates, using the first value popped 
    as the exponent and the second popped as the base.
</code></pre>

<h3>Strings</h3>

<p>dc can operate on strings as well as on numbers. The only things you can do with strings are print them and execute them as macros (which means that the contents of the string are processed as dc commands). </p>

<p>For example, to print twice a string in the interactive mode:</p>

<pre><code>$ dc
[Hello wolrd!]p
Hello wolrd!
p
Hello wolrd
</code></pre>

<p>or:</p>

<pre><code>$ dc
[Hello wolrd!]pp
Hello wolrd!
Hello wolrd!
</code></pre>

<p>Now, let&#8217;s try to write a simple string containing dc statements to increment by 2 the value on the stack, and to run it as a macro (using the <code>x</code> command):</p>

<pre><code>$ dc
20          # pushes 20 to stack
[2 + p] x   # [2 + p] is a string that means "push 2 to stack,
            # add the two top items of the stack and print result.
            # x runs the [2 + p] sting as a macro
22
q
</code></pre>

<p>Both registers and the stack can hold strings, and dc always knows whether any given object is a string or a number.</p>

<pre><code>[ch] Makes a string containing "ch" and pushes it on the stack.
x   Pops the value from the top of the stack and executes it as a macro
&gt;r  Pops two values off the stack and compares them assuming they are 
    numbers, executing the contents of register r as a macro if the 
    original top-of-stack is greater
&lt;r  Similar but invokes the macro if the original top-of-stack is less
=r  Similar but invokes the macro if the original top-of-stack is equal
</code></pre>

<h3>Macros</h3>

<p>Macros are then implemented by allowing registers and stack entries to be strings as well as numbers. A string can be printed, but it can also be executed (i.e. processed as a sequence of dc commands). For instance, we can store a macro to add 3 and then multiply by 2 into register m:</p>

<pre><code>[3 + 2 *] sm
</code></pre>

<p>and then (using the <code>x</code> command which executes the top of the stack) we can use it like this:</p>

<pre><code>3 lm x p
</code></pre>

<p>This displays the following:</p>

<pre><code>$ dc -e '[3 + 2 *] sm 3 lm x p'
12
</code></pre>

<p>For better understanding, this is a detailed account of what&#8217;s going on:</p>

<pre><code>[    # start of macro definition
  3  # push 3 to stack
  +  # pop 2 values off the stack, add them and store result on stack
  2  # push 2 on stack
  *  # pop 2 values off the stack, multiply them, store result on stack
]    # end of macro definition
sm   # store the macro just defined in register m
3    # push 3 on stack
lm   # copy value in register m (the macro) onto the stack
x    # run the macro
p    # print the result (top of the stack)
</code></pre>

<h3>Conditionals and Loops in dc</h3>

<p>The <code>=</code>, <code>&gt;</code>, <code>!&gt;</code>, <code>&lt;</code>, <code>!&lt;</code>, <code>!=</code> conditionals execute the subsequent macro when the two top values of the stack are equal, larger than, not larger than, etc. For example, in:</p>

<pre><code>$ dc -e '[[smaller than]p] sm 6 5 &lt;m'
smaller than
</code></pre>

<p>the macro stored in <code>m</code> runs (and prints &#8220;smaller than&#8221;) because 5 is smaller than 6. The <code>&lt;</code> pops 5 and then 6 from the stack and runs the macro in register <code>m</code> because the first popped value (5) is smaller than the second popped value.</p>

<p>Let&#8217;s look at a simple countdown in <a href="https://wiki.bash-hackers.org/howto/calculate-dc">this page</a> in the Bash Hackers Wiki:</p>

<pre><code>dc &lt;&lt; EOF
[ li       # put our index i on the stack 
  p        # print it, to see what's going on
  1 -      # we decrement the index by one
  si       # store decremented index (i=i-1)
 0 li &gt;L   # if i &gt; 0 then execute recursively L
] sL       # store our macro with the name L
10 si      # let's give to our index the value 10
lLx        # and start our loop
EOF 

10
9
8
[ Lines omitted for brevity]
2
1
</code></pre>

<p>Basically, the macro is called a first time, and then calls itself recursively so long as the condition is satisfied.</p>

<h2>Disarium Numbers in dc</h2>

<p>Remember that we want to write something similar to the <code>is_disarium</code> function of our above-described awk program:</p>

<pre><code>function is_disarium(num) {
    n = num
    sum = 0
    len = length(n)
    while (n &gt; 0) {
        sum += (n % 10) ^ len
        n = int(n/10)
        len--
    }
    return (sum == num)
}
</code></pre>

<p>Our program will be composed essentially of four macros calling themselves or each other, and just a few additional code lines to start the whole process.</p>

<h3>The Length Macro</h3>

<p>The above <code>is_disarium</code> function uses the awk built-in <code>length()</code> function. There is no such built-in function in dc. So our first task will be to write our own length macro.</p>

<p>The way this macro will work is that we&#8217;re going to repeatedly divide (integer division) the input number by 10, until we get to 0. At each step through the process, we increment the length (register l) by one.  </p>

<p>The length macro itself is stored in the L register, and the length &#8220;variable&#8221; in register l.</p>

<pre><code>[10      # pushes 10 to stack
 /       # divides input by 10 and stores result on stack
 ll      # pushes length on stack
 1+      # adds one to stack (length)
 # p     # prints intermediate length (for debugging)
 sl      # saves length to register l
 d       # duplicates value (number) on top of stack
 0       # pushes 0 to stack
 &lt;Lx     # executes recursively length macro (L) if number &gt; 0
] sL     # end of macro, stores it in L

889 sn   # stores some input number in n
ln       # pushes number to stack
0sl      # stores 0 in register l (length)
lLx      # runs the macro once to start the loop
llp      # prints length final value
</code></pre>

<p>The last five lines in the code above (after the blank line) are not part of the macro, they are just some code to set up the environment before calling the macro: start with an input number (889 in the above example), initialize the length (register l) to 0, invokes the macro (stored in register L), and prints the length.</p>

<p>With an input number of 889, this program correctly prints out 3.</p>

<h3>The Disarium Macro</h3>

<p>This macro is more or less equivalent to the <code>is_disarium</code> function&#8217;s <code>while</code> loop of the awk program:</p>

<pre><code>while (n &gt; 0) {
    sum += (n % 10) ^ len
    n = int(n/10)
    len--
}
</code></pre>

<p>The disarium macro computes the number modulo 10, then computes the result to the length power, adds the obtained value to the sum so far; it also divides the number by 10 (integer division) and decrements the length by 1. At the end, it calls itself recursively if the resulting number is larger than 0.</p>

<p>The disarium macro is stored in register D. The sum is stored in register s, the length in register l, and the input number in register n.</p>

<pre><code>[d      # duplicates value (number) on top of stack
10      # pushes 10 to stack
%       # pushes (number % 10) to stack
ll      # pushes length to stack
^       # computes (n % 10) ^ len
ls      # pushes sum to stack
+ss     # computes new sum and stores it in s
10/     # integer division number / 10
ll      # pushes length on stack
1-      # subtract 1 froml length
sl      # stores new length in l
d       # duplicates value (number) on top of stack
0       # pushes 0 to stack
&lt;Dx     # executes recursively disarium macro (D) if number &gt; 0
] sD    # stores disarium macro in D

88 sn   # stores number in n
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # initializes sum to 0
cln     # clear stack and pushes number onto it
lDx     # runs the Disarium macro
lsln    # pushes sum and number
f       # display stack (sum and number)
</code></pre>

<p>The 10 last code lines (after the blank line) are not part of the macro, but are needed to make a full dc program that can be tested independently (well you&#8217;ll also need the length macro described above). They initialize the input number to 88, the sum to 0, and the length to 0. Then we run the length macro (stored in L) and the disarium macro. At the end, we push the sum and the input number to the stack and can verify whether they are equal (in which case the input number is a disarium number) or not. With the input value of 88, the program displays:</p>

<pre><code>88
72
0
</code></pre>

<p>The input number (88) and the sum (72 = 8 * 8 + 8) are not equal, so 88 is not a disarium number.</p>

<p>If we change the input number to 89, we get the following output:</p>

<pre><code>89
89
0
</code></pre>

<p>The input number (89) and the sum (89 = 9 * 9  + 8) are  equal, so 89 is a disarium number.</p>

<h3>The Iteration Macro</h3>

<p>We need to iterate over the subsequent integers and, for each of them, call the length macro and then the disarium macro to find out whether it is a disarium number.</p>

<p>The macro stores the current iteration variable into the number register (this is the number we will test), initializes length to 0, runs the length macro, initialize sum to 0 and runs the disarium macro once. Then it pushes sum and number to stack and compares them. If they are equal (input number is a disarium number), it runs the printing macro (see below). Finally, it compares the disarium number with 18, and calls itself recursively if the counter is smaller than 18.</p>

<p>The iteration macro is stored in the I (capital i) register. The sum is stored in register s, the length in register l, the input number in register n, the iteration variable in register i, and the disarium number counter in register c.</p>

<pre><code>[li sn  # Stores iteration variable in number register
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # inititialize sum to 0
cln     # clear stack and pushes number onto it
lDx     # runs the Disarium macro once
lsln    # pushes sum and number
=P      # runs the printing macro if numbers are equal
li      # loads iteration variable
1+si    # increments iteration variable
lc18    # pushes counter and 18 on stack
&gt;Ix     # runs recursively iteration macro if counter &lt; 18
] sI    # end of iteration macro, stores it in I
</code></pre>

<p>We cannot run this macro at this point, because we need a small additional macro, the printing macro.</p>

<h3>The Printing and Counting Macro</h3>

<p>I&#8217;ve previously called it &#8220;printing macro&#8221; for the sake of brevity, but it is really a <em>printing and counting macro</em>. This macro runs only when input number and the computed sum are equal (i.e. when we have a disarium number). In that case, we need to do two things: print out the disarium number and increment by 1 the disarium number counter (so that we know when to stop the iteration macro).</p>

<p>The printing and counting macro is stored in the P register. The disarium number counter is stored in the c register, and the input number in register n.</p>

<pre><code>[lc1+sc # increments disarium number counter
lnp     # print number
]sP     # Stores printing macro in P
</code></pre>

<h3>The Final Disarium Number Program in dc</h3>

<p>We can now put together all the pieces seen so far.</p>

<p>The macros are stored in upper-case letter registers:</p>

<ul>
<li><p>L:  length of input number macro</p></li>
<li><p>D:  Disarium macro</p></li>
<li><p>I:  Iteration macro</p></li>
<li><p>P:  Printing and counting macro</p></li>
</ul>

<p>The “variables” are stored in lower-case letter registers:</p>

<ul>
<li><p>n:  Input number</p></li>
<li><p>c:  Disarium number counter</p></li>
<li><p>l:  Length of input number</p></li>
<li><p>s:  Sum</p></li>
<li><p>i:  Iteration variable</p></li>
</ul>

<p>This is the full dc program:</p>

<pre><code># Macro for computing the input number length
[10      # pushes 10 to stack
 /       # divides input by 10 and stores result on stack
 ll      # push length on stack
 1+      # add one to stack (length)
 sl      # saves length to register l
 d       # duplicates value (number) on top of stack
 0       # pushes 0 to stack
 &lt;Lx     # executes recursively length macro (L) if number &gt; 0
] sL     # end of macro, store it in L

# Disarium macro
[d      # duplicates value (number) on top of stack
10      # pushes 10 to stack
%       # pushes (number % 10) to stack
ll      # pushes length to stack
^       # computes (n % 10) ^ len
ls      # pushes sum to stack
+ss     # computes new sum and stores it in s
10/     # integer division number / 10
ll      # pushes length on stack
1-      # subtract 1 froml length
sl      # stores new length in l
d       # duplicates value (number) on top of stack
0       # pushes 0 to stack
&lt;Dx     # executes recursively disarium macro (D) if number &gt; 0
] sD    # stores disarium macro in D

# Printing and counting macro
[lc1+sc # increments disarium number counter
lnp     # print number
]sP     # Stores printing macro in P

# Iteration macro
[li sn  # Stores iteration variable in number register
ln      # pushes number to stack
0sl     # stores 0 in register l (length)
lLx     # runs the length macro
0ss     # inititialize sum to 0
cln     # clear stack and pushes number onto it
lDx     # runs the Disarium macro once
lsln    # pushes sum and number
=P      # runs the printing macro if numbers are equal
li      # loads iteration variable
1+si    # increments iteration variable
lc18    # pushes counter and 18 on stack
&gt;Ix     # runs recursively iteration macro counter &lt; 18
] sI    # end of iteration macro, stores it in I

# Main
0si     # Initialize iteration variable
0sc     # Initialize disarium numbers counter
lIx     # running iteration macro the first time
</code></pre>

<p>As you can see, the program consists of the four macros defined previously, plus just 3 code lines (the &#8220;Main&#8221; part) to initialize the iteration variable, initialize the disarium number counter and launch the iteration macro.</p>

<p>This program displays the following output:</p>

<pre><code>$ dc ./disarium.dc
0
1
2
3
4
5
6
7
8
9
89
135
175
518
598
1306
1676
2427
</code></pre>

<p>But, of course, formatting the program with abundant spaces and comments as above is way too easy. Real programmers will prefer this one-liner version (spread over two lines for formatting reasons):</p>

<pre><code>$ dc -e '[10/ll1+sld0&lt;Lx]sL[d10%ll^ls+ss10/ll1-sld0&lt;Dx]sD[lc1+sc
lnp]sP[lisnln0sllLx0ssclnlDxlsln=Pli1+silc18&gt;Ix]sI0si0sclIx'
0
1
2
3
[Lines omitted for brevity
598
1306
1676
2427
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check https://perlweeklychallenge.org/ and make sure you answer the challenge before 23:59 BST (British summer time) on July 31, 2022. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The Weekly Challenge - Guest Contributions</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/guest-contribution/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As you know, The Weekly Challenge, primarily focus on Perl and Raku. During the Week #018, we received solutions to The Weekly Challenge - 018 by Orestis Zekai in Python. It was pleasant surprise to receive solutions in something other than Perl and Raku. Ever since regular team members also started contributing in other languages like Ada, APL, Awk, BASIC, Bash, Bc, Befunge-93, Bourne Shell, BQN, Brainfuck, C3, C, CESIL, Chef, COBOL, Coconut, C Shell, C++, Clojure, Crystal, D, Dart, Dc, Elixir, Elm, Erlang, Excel VBA, Fish, Forth, Fortran, Gembase, GNAT, Go, Haskell, Haxe, HTML, Idris, IO, J, Janet, Java, JavaScript, Julia, Kotlin, Lisp, Logo, Lua, M4, Miranda, Modula 3, MMIX, Mumps, Myrddin, Nim, Nix, Node.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/guest-contribution/</id>
    <published>2022-07-26T00:00:00Z</published>
    <updated>2022-07-26T00:00:00Z</updated>
  </entry>
  <entry>
    <title>#574 - Perl Community</title>
    <link rel="alternate" href="https://perlweekly.com/archive/574.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>The community spirit among Perl fans is always the highlight of any event. I am sure you have experience it too. Little while ago, there was discussion to give new life to <strong>Perl Advent Calendar</strong>. Many volunteers came forward to help the project, like, <strong>Adam Russell</strong>. As we are getting close to the next edition, <strong>Olaf Alders</strong> and <strong>Julien Fiegehenn</strong> came together and kickstarted the project with a big push. I noticed in the recent weeks, lots of activities on <a href="https://github.com/perladvent/Perl-Advent">GitHub repository</a>, thanks to all the volunteers. <strong>Olaf Alders</strong> made an official call for papers in the <a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open">blog post</a>. I request all <strong>Perl</strong> fans to submit proposal. If you need any help submitting an article, then please do <a href="https://github.com/perladvent/Perl-Advent/blob/main/FAQ-submit.mkdn">checkout the page</a> for guidance. I would encourage first timer to come forward and share their experience with <strong>CPAN</strong> distributions. I am sure, everyone has few favourite distributions or their own creations that they want to talk about and share with the community. There are plenty of help available, if you need, so just give us a shout.</p>
<p>Talking about revival, recently I spoke about <strong>CPAN Weekly</strong>, creation of <strong>Neil Bowers</strong>. I shared my intention of getting it back up. In no time, I got plenty of offer. One of them was <strong>Cheok-Yin Fung</strong>. She even shared the initial draft that I am currently reviewing. Thank you, <strong>Cheok-Yin</strong> for the help. The plan is to launch it on the birthday of <strong>Perl</strong> i.e. 18th Dec. I will share more about it soon. Wish me luck.</p>
<p>Maintaining <strong>CPAN</strong> distribution is a big responsibility. I have seen regular release of <a href="https://metacpan.org/dist/WWW-Mechanize">WWW::Mechanize</a>, thanks to <strong>Julien Fiegehenn</strong> for all the care and love. You can find the details in the <a href="https://twitter.com/simbabque/status/1549670503719153664">Twitter thread</a>. I know it takes a lot of efforts to keep the distribution live and active as I too have the responsibilities of handful of distributions. Having said, credit must be given to all the contributors who provide patches.</p>
<p>Enjoy the rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/574.html</id>
    <published>2022-07-25T10:00:00Z</published>
    <updated>2022-07-25T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 174</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-174/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-174/</id>
    <published>2022-07-25T00:00:00Z</published>
    <updated>2022-07-25T00:00:00Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 175</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/perl-weekly-challenge-175/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">TABLE OF CONTENTS  01. HEADLINES 02. SPONSOR 03. RECAP 04. PERL REVIEW 05. RAKU REVIEW 06. CHART 07. NEW MEMBERS 08. GUESTS 09. TASK #1: Last Sunday 10. TASK #2: Perfect Totient Numbers HEADLINES  Welcome to Week #175 of the weekly challenge.
Let us all welcome, Nicolas Mendoz and thanks for the contribution in Perl.
Thank you, Gurunandan Bhat for the first contribution in Perl.
Laurent Rosenfeld once again, the lead guest contributors with 22 solutions in 18 different languages.</div>
    </content>
    <id>https://theweeklychallenge.org/blog/perl-weekly-challenge-175/</id>
    <published>2022-07-25T00:00:00Z</published>
    <updated>2022-07-25T00:00:00Z</updated>
  </entry>
  <entry>
    <title>Permutations Ranked in Disarray on Mars</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/24#pwc174" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
<p><em>The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.</em></p>

<h2>Part 1</h2>

<p><em>Write a script to generate the first 19 Disarium Numbers.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
use POSIX;

sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        return @disariums if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
}

MAIN:{
    print join(", ", disarium_n(19)) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-1.pl
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798
</code></pre>

<h3>Notes</h3>

<p>I gave myself a <em>writing prompt</em> for this exercise: only use map. This turned out to
present a small issue and that is, how do we terminate out of a <code>map</code> early? This comes up
because we do not need to examine all numbers in the large range of <code>0 .. INT_MAX / 100</code>.
Once we find the 19 numbers we require we should just stop looking. <code>last</code> will not work
from within a <code>map</code> it turns out. In this case a <code>return</code> works well. But suppose we did
not want to <code>return</code> out of the subroutine entirely? Well, I have tested it out and it 
turns out that <code>goto</code> will work fine from within a <code>map</code> block as well!</p>

<p>That code would look something like this, where the <code>CONTINUE</code> block would have some more
code for doing whatever else was left to do. </p>

<pre><code class="perl">
sub disarium_n{
    my($n) = @_;
    my @disariums;
    map{
        goto CONTINUE if @disariums == $n;
        my @digits = split(//, $_);
        my $digit_sum = 0;
        map{
            $digit_sum += $digits[$_] ** ($_ + 1);
        } 0 .. @digits - 1;
        push @disariums, $digit_sum if $digit_sum == $_;
    } 0 .. INT_MAX / 100;
    CONTINUE:{
        ##
        # more to do before we return
        ##
    }
    return @disariums;
}
</code></pre>

<h2>Part 2</h2>

<p><em>You are given a list of integers with no duplicates, e.g. [0, 1, 2]. Write two functions, 
permutation2rank() which will take the list and determine its rank (starting at 0) in the 
set of possible permutations arranged in lexicographic order, and rank2permutation() which 
will take the list and a rank number and produce just that permutation.</em></p>

<h3>Solution</h3>

<pre><code class="perl">
use strict;
use warnings;
package PermutationRanking{
    use Mars::Class;
    use List::Permutor;

    attr q/list/;
    attr q/permutations/;
    attr q/permutations_sorted/;
    attr q/permutations_ranked/;

    sub BUILD{
        my $self = shift;
        my @permutations;
        my %permutations_ranked;
        my $permutor = new List::Permutor(@{$self-&gt;list()});
        while(my @set = $permutor-&gt;next()) {
            push @permutations, join(":", @set);
        }
        my @permutations_sorted = sort @permutations;
        my $rank = 0;
        for my $p (@permutations_sorted){
            $permutations_ranked{$p} = $rank;
            $rank++;
        }
        @permutations_sorted = map {[split(/:/, $_)]} @permutations_sorted;
        $self-&gt;permutations_sorted(\@permutations_sorted);
        $self-&gt;permutations_ranked(\%permutations_ranked);
    }

    sub permutation2rank{
        my($self, $list) = @_;
        return $self-&gt;permutations_ranked()-&gt;{join(":", @{$list})};
    }

    sub rank2permutation{
        my($self, $n) = @_;
        return "[" . join(", ", @{$self-&gt;permutations_sorted()-&gt;[$n]}) . "]";
    }
}

package main{
    my $ranker = new PermutationRanking(list =&gt; [0, 1, 2]);
    print "[1, 0, 2] has rank " . $ranker-&gt;permutation2rank([1, 0, 2]) . "\n";
    print "[" . join(", ", @{$ranker-&gt;list()}) . "]"  . " has permutation at rank 1 --&gt; " . $ranker-&gt;rank2permutation(1) . "\n";
}
</code></pre>

<h3>Sample Run</h3>

<pre><code class="shell">
$ perl perl/ch-2.pl
[1, 0, 2] has rank 2
[0, 1, 2] has permutation at rank 1 --&gt; [0, 2, 1]
</code></pre>

<h3>Notes</h3>

<p>I've been enjoying trying out Al Newkirk's Mars OOP framework. When it comes to Object 
Oriented code in Perl I've usually just gone with the default syntax or <code>Class::Struct</code>.
I am far from a curmudgeon when it comes to OOP though, as I have a lot of experience
using Java and C++. What I like about Mars is that it reminds me of the best parts of
<code>Class::Struct</code> as well as the best parts of how Java does OOP. The code above, by its
nature does not require all the features of Mars as here we don't need much in the way 
of Roles or Interfaces.</p>

<p>Perhaps guided by my desire to try out Mars more I have taken a definitively OOP approach
to this problem. From the problem statement the intent may have been to have two 
independent functions. This code has two methods which depend on the constructor (defined
within <code>sub BUILD</code>) to have populated the internal class variables needed.</p>

<p>There is a small trick here that the sorting is to be by <em>lexicograohic order</em>, which 
conveniently is the default for Perl's default <code>sort</code>. That doesn't really buy us any
algorithmic improvement in performance, in fact it hurts it! Other approaches exist for 
this problem which avoid producing all permutations of the list.</p>

<h2>References</h2>

<p><a href="https://oeis.org/A032799">Disarium Numbers</a></p>

<p><a href="https://metacpan.org/pod/Mars">Mars</a></p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-174/">Challenge 174</a></p></div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc174</id>
    <published>2022-07-24T19:34:00-04:00</published>
    <updated>2022-07-24T19:34:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Weekly Challenge 174</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-174-5ga6" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-174/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-174/sgreen">My solution</a></p>

<p>Just doing one task this week. The second one is nothing more than copying and pasting code from the mentioned website, so I cannot see the point. YMMV.</p>

<h2>
  
  
  Task: Disarium Numbers
</h2>

<p>Write a script to generate first 19 Disarium Numbers.</p>

<p>A disarium number is an integer where the sum of each digit raised to the power of its position in the number, is equal to the number.</p>

<h3>
  
  
  My solution
</h3>

<p>This is pretty straight forward. Have a list (array in Perl) called <code>solutions</code>. Keep iterating a <code>number</code> until their are nineteen items in that list. Add the number to the list if the number is disarium.</p>

<p>To determine disarium numbers I loop over each digit using <code>enumerate(str(n))</code>. The enumerate function is roughly equivalent to using the each function over an array in Perl (the first value is the counter, the second value is the digit at that position).</p>

<p>If the sum is the original number, return <code>True</code> otherwise return <code>False</code>.</p>

<p>The Perl code is similar to the Python code. The code to calculate the sum is slightly different.</p>

<h3>
  
  
  Examples
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798

$ ./ch-1.pl 
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 89, 135, 175, 518, 598, 1306, 1676, 2427, 2646798
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-174-5ga6</id>
    <published>2022-07-24T05:13:08Z</published>
    <updated>2022-07-24T05:13:08Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Colin Crain › Perl Weekly Review #169</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/review-challenge-169/" type="text/html"/>
    <content type="text">( &amp;hellip;continues from previous week. )
Welcome to the Perl review pages for Week 169 of The Weekly Challenge! Here we will take the time to discuss the submissions offered up by the team, factor out some common methodologies that came up in those solutions, and highlight some of the unique approaches and unusual code created.
 ●︎ Why do we do these challenges? I suppose any reasonable answer to that question would be from a field as wide ranging and varied as the people who choose to join the team.</content>
    <id>https://theweeklychallenge.org/blog/review-challenge-169/</id>
    <published>2022-07-24T00:00:00Z</published>
    <updated>2022-07-24T00:00:00Z</updated>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5459349394724045217</id>
    <published>2022-07-23T19:41:00.001+02:00</published>
    <updated>2022-07-23T19:41:36.473+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdii) 12 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAARG/Catalyst-Runtime-5.90129' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Catalyst::Runtime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Catalyst Framework Runtime &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.90129&lt;/strong&gt; on 2022-07-23&lt;/li&gt;  &lt;li&gt;Votes: 150&lt;/li&gt;  &lt;li&gt;Previous version: 5.90128 was 1 year, 10 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/DBIx-DataModel-3.03' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DBIx::DataModel&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - UML-based Object-Relational Mapping (ORM) framework &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.03&lt;/strong&gt; on 2022-07-23&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 3.01 was 1 year, 5 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/GraphViz2-2.67' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;GraphViz2&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A wrapper for AT&amp;T's Graphviz &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.67&lt;/strong&gt; on 2022-07-21&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 2.66 was 1 year, 5 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ARISTOTLE/Memoize-1.04' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Memoize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Make functions faster by trading space for time &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.04&lt;/strong&gt; on 2022-07-22&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.03 was 10 years, 3 months before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BINGOS/Module-CoreList-5.20220720' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Module::CoreList&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - what modules shipped with versions of perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.20220720&lt;/strong&gt; on 2022-07-21&lt;/li&gt;  &lt;li&gt;Votes: 38&lt;/li&gt;  &lt;li&gt;Previous version: 5.20220620 was 1 month, 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/Pithub-0.01037' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Pithub&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Github v3 API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.01037&lt;/strong&gt; on 2022-07-20&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 0.01036 was 1 year, 5 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/PPI-1.276' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PPI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse, Analyze and Manipulate Perl (without perl) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.276&lt;/strong&gt; on 2022-07-19&lt;/li&gt;  &lt;li&gt;Votes: 56&lt;/li&gt;  &lt;li&gt;Previous version: 1.274 was 2 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9627' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9627&lt;/strong&gt; on 2022-07-22&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9623 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DAMI/SQL-Abstract-More-1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SQL::Abstract::More&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - extension of SQL::Abstract with more constructs and more flexible API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2022-07-22&lt;/li&gt;  &lt;li&gt;Votes: 20&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 3 months, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.016005' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.016005&lt;/strong&gt; on 2022-07-23&lt;/li&gt;  &lt;li&gt;Votes: 131&lt;/li&gt;  &lt;li&gt;Previous version: 1.014000 was 26 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SIMBABQUE/WWW-Mechanize-2.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;WWW::Mechanize&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handy web browsing in a Perl object &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.12&lt;/strong&gt; on 2022-07-20&lt;/li&gt;  &lt;li&gt;Votes: 93&lt;/li&gt;  &lt;li&gt;Previous version: 2.10 was 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Zydeco-0.616' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Zydeco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Jazz up your Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.616&lt;/strong&gt; on 2022-07-19&lt;/li&gt;  &lt;li&gt;Votes: 18&lt;/li&gt;  &lt;li&gt;Previous version: 0.615 was 29 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5459349394724045217/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdii-12-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5459349394724045217"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5459349394724045217"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdii-12-great-cpan-modules-released.html" title="(cdii) 12 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6672857162011626588</id>
    <published>2022-07-23T19:39:00.001+02:00</published>
    <updated>2022-07-23T19:39:07.596+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxvi) metacpan weekly report - Perl::Critic</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 43&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/07/23 17:38:39 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Geo::IPinfo" target="_blank"&gt;Geo::IPinfo&lt;/a&gt; - The official Perl library for IPinfo.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::PHash" target="_blank"&gt;Image::PHash&lt;/a&gt; - Fast perceptual image hashing (DCT-based pHash)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/RT::Extension::ChangeManagement" target="_blank"&gt;RT::Extension::ChangeManagement&lt;/a&gt; - RT-Extension-ChangeManagement Extension&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::Graille" target="_blank"&gt;Term::Graille&lt;/a&gt; - Graphical Display in the terminal using UTF8 Braille characters&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Tie::LevelDB" target="_blank"&gt;Tie::LevelDB&lt;/a&gt; - A Perl Interface to the Google LevelDB NoSQL database&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpanminus" target="_blank"&gt;App::cpanminus&lt;/a&gt; (+1=267)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::perlbrew" target="_blank"&gt;App::perlbrew&lt;/a&gt; (+1=169)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Cache::LRU" target="_blank"&gt;Cache::LRU&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Capture::Tiny" target="_blank"&gt;Capture::Tiny&lt;/a&gt; (+1=96)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=117)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CGI::Tiny" target="_blank"&gt;CGI::Tiny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Chart" target="_blank"&gt;Chart&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Validate::IP" target="_blank"&gt;Data::Validate::IP&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Tiny" target="_blank"&gt;DateTime::Tiny&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=257)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=177)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::Zilla::Plugin::Test::Pod::LinkCheck" target="_blank"&gt;Dist::Zilla::Plugin::Test::Pod::LinkCheck&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::NFSLock" target="_blank"&gt;File::NFSLock&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Filter" target="_blank"&gt;Filter&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Long::Descriptive" target="_blank"&gt;Getopt::Long::Descriptive&lt;/a&gt; (+1=49)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML::Escape" target="_blank"&gt;HTML::Escape&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::CookieJar" target="_blank"&gt;HTTP::CookieJar&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTTP::Tiny" target="_blank"&gt;HTTP::Tiny&lt;/a&gt; (+1=103)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::Imlib2" target="_blank"&gt;Image::Imlib2&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Lock::File" target="_blank"&gt;Lock::File&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Log::Log4perl" target="_blank"&gt;Log::Log4perl&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+1=91)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Memory::Usage" target="_blank"&gt;Memory::Usage&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=472)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::FretboardDiagram" target="_blank"&gt;Music::FretboardDiagram&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IP" target="_blank"&gt;Net::IP&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::IP::XS" target="_blank"&gt;Net::IP::XS&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Iterator::Rule" target="_blank"&gt;Path::Iterator::Rule&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=172)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic" target="_blank"&gt;Perl::Critic&lt;/a&gt; (+2=121)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Community" target="_blank"&gt;Perl::Critic::Community&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Tidy" target="_blank"&gt;Perl::Tidy&lt;/a&gt; (+1=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack" target="_blank"&gt;Plack&lt;/a&gt; (+1=227)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Zydeco" target="_blank"&gt;Zydeco&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6672857162011626588/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvi-metacpan-weekly-report-perlcritic.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6672857162011626588"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6672857162011626588"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxvi-metacpan-weekly-report-perlcritic.html" title="(dxvi) metacpan weekly report - Perl::Critic"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2694034815331267196</id>
    <published>2022-07-23T19:37:00.003+02:00</published>
    <updated>2022-07-23T19:37:56.287+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxliv) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the five most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2022-07-23 17:37:14 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73090210" target="_blank"&gt;Why is the "lazy_build" feature in Moose discouraged?&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73030034" target="_blank"&gt;Is there a way to execute a file and one line of program in perl?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73035164" target="_blank"&gt;Moose - Retain the original value of an attribute in a second attribute&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73019038" target="_blank"&gt;Calculate next business date by adding hours to a date now in perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/73023422" target="_blank"&gt;Perl upload dies when the file is compressed&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2694034815331267196/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxliv-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2694034815331267196"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2694034815331267196"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxliv-stackoverflow-perl-report.html" title="(dxliv) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Integrated Inconsistencies.</title>
    <link rel="alternate" href="http://blogs.perl.org/users/saif/2022/07/integrated-inconsistencies.html"/>
    <id>tag:blogs.perl.org,2022:/users/saif//3152.10857</id>
    <published>2022-07-23T03:00:00Z</published>
    <updated>2022-07-23T02:51:39Z</updated>
    <author>
        <name>Saif</name>
        <uri>https://github.com/saiftynet</uri>
    </author>
    <category term="ansi" label="ANSI" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="consolegraphics" label="console graphics" scheme="http://www.sixapart.com/ns/types#tag"/>
    <category term="termgraille" label="Term::Graille" scheme="http://www.sixapart.com/ns/types#tag"/>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/saif/">
        <![CDATA[<p>I will get it wrong. I will start off by saying that, not just because I am married and this sentiment has been conjugally  programmed in me for years, but because doing things "my way" will not suit everybody.  We approach life, programming, drawing from different perspectives, different analogies, and one method however disagreeable to one person, may be perfectly logical to another.  Even our own actions and analysis show conflicts.  Take a cup of tea.  I drink from the top of the cup, but measure from the bottom.  Take character position in programming code...we measure lines from the top,  then character on that line. But when we write, we write one line at a time, populating columns in a line before going to the next line.</p>

<p>The same applies to drawing onto a screen.  The reason I want to draw on a screen is because I want to be able to draw charts...following the example of Descartes, one plots a point on X,Y coordinates with the origin on the bottom left hand corner. x comes before y.  The same screen is drawn from top to bottom, and the print coordinates are described as row, column. with the origin at top left.  Then examine what happens if I were to draw an SVG graph according to the <a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-165/">Perl Weekly Challenge 165</a> by Ryan Thompson.  How many people realised that the SVG coordinate system the x,y coordinates are not the same as Cartesian coordinates?  You did? Well done!...but I dare say plenty of people didn't. </p>

<p>I wrote <a href="https://metacpan.org/pod/Term::Graille">Term::Graille</a>, not because <a href="https://metacpan.org/pod/Term::Drawille">Term::Drawille</a> was not good enough, but out of sheer indignation.  You see, using Braille characters to draw "Pseudo pixel" graphics on the console would be simple but while I might desire a y-axis that increases as we go up as in charts, the dots in braille characters are confusingly numbered and bit 0 is the top of the character.</p>

<p>Drawing lines requires clever calculations.  So I  then took over Algorithm::Line::Bresenham, and found the <a href="https://metacpan.org/release/OSFAMERON/Algorithm-Line-Bresenham-0.11/view/lib/Algorithm/Line/Bresenham.pm">original code</a> appeared to take the y-coordinate before the x-coordinate...blasphemy, even though it made no difference to the actual results (it works both ways equally).  You will (or perhaps will not) be pleased to know that x comes before y in the newer <a href="https://metacpan.org/pod/Algorithm::Line::Bresenham">extended versions</a>.  I even inverted the textAt() character coordinate system in Graille; printing to canvas requires the coordinate system to have Cartesian origins, as text in charts often have to be placed next to the plot positions they target.  </p>

<p>Graille Incorporates Turtle-like graphics and line drawing primitives, and in this case using  Cartesian coordinates makes perfect sense.  Mapping is simple and up and north are positive directions.  It appears possible that keeping consistent axes should be acceptable for most needs.</p>

<p>Now that is fine if the data is sourced internally; often however, the data is not. Using external data relies on external paradigms, and one has to accommodate the logic of another representation.  Images are read as raster from top down, y=0 is the top line. So plotting on Graille requires the image to be read in and then inverted to look right way up.  </p>

<blockquote>
<pre><code> for (my $x =0;$x&lt;$canvas-&gt;{width};$x++){
  for (my $y=0;$y&lt;$canvas-&gt;{height};$y++){
     $canvas-&gt;set($x,$y) # inverting image as the pixels are read
        if $image-&gt;GetPixel("x"=&gt;$x,"y"=&gt;$canvas-&gt;{height}-$y);
    }
 }
</code></pre>
</blockquote>

<p>Then there is other bitmap data,  font data or sprite graphics again represented top down, left to right.  Conversion into blittable blocks requires this consideration.  It is at this point I wonder if it is me that is going mad and whether I should stop trying to conflict with established paradigms.  Then I realise that in a heterogeneous world conflict is inevitable, diversity is desirable, and confusion a natural and consistent consequence.</p>

<p><img alt="animate.gif" src="http://blogs.perl.org/users/saif/saiftynet/animate.gif" width="400" height="240" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></p>

<p><img alt="fontdemo.gif" src="http://blogs.perl.org/users/saif/saiftynet/fontdemo.gif" width="424" height="282" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></p>

<p>I continue updating Term:: Graille, extending drawille,  integrating Turtle Graphics (as in the original asciimoo's version, but being in Perl, considerably more elegantly), Coloured lines, Image importing, Animations, 8x8 bitmap fonts, Heterogenous canvas etc, adopting a mainly Cartesian Coordinates for as much as possible. Maybe you think I am doing this completely wrong, but hey, I knew that all along.  Version 0.07 coming soon!</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>The Perl Advent Calendar 2022 Call for Papers is Now Open</title>
    <link rel="alternate" href="http://blogs.perl.org/users/olaf_alders/2022/07/the-perl-advent-calendar-2022-call-for-papers-is-now-open.html"/>
    <id>tag:blogs.perl.org,2022:/users/olaf_alders//280.10858</id>
    <published>2022-07-22T00:58:23Z</published>
    <updated>2022-07-22T01:00:05Z</updated>
    <author>
        <name>Olaf Alders</name>
        <uri>http://www.wundercounter.com</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/olaf_alders/">
        <![CDATA[<p>In the year 2000, the world was a different place. Y2K was still fresh in our memories, many of us had just partied like it was 1999 and Mark Fowler had given up eating chocolate.</p>

<p><a href="https://www.olafalders.com/2022/07/21/the-perl-advent-calendar-2022-call-for-papers-is-now-open/">Read the full article</a>.</p>]]>
        
    </content>
</entry>
  <entry>
  <title>Chris Nandor</title>
  <summary type="html"><![CDATA[<p>
<a href="https://pudge.net/">Chris Nandor (Pudge)</a> is the recipient of the <a href="https://www.perl.org/advocacy/white_camel/">White Came Award</> in <a href="https://www.perl.org/advocacy/white_camel/2000.html">2000</a>.
<p>
As I have not heard much from him in recent years I thought it would be interesting to ask where is he now and what does he do.
<p>
]]></summary>
  <updated>2022-07-21T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/chris-nandor"/>  <id>https://perlmaven.com/chris-nandor</id>
  <content type="html"><![CDATA[<p>
<a href="https://pudge.net/">Chris Nandor (Pudge)</a> is the recipient of the <a href="https://www.perl.org/advocacy/white_camel/">White Came Award</> in <a href="https://www.perl.org/advocacy/white_camel/2000.html">2000</a>.
<p>
As I have not heard much from him in recent years I thought it would be interesting to ask where is he now and what does he do.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Spaß mit ICal-Dateien und Zeitzonen</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-07-20-spaa-mit-ical-dateien-und-zeitzonen" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wir nutzen das Ticketsystem Znuny) Community Edition Fork") zur Kommunikation mit externen Personen wie zum Beispiel Interessenten und Kunden. Leider werden in Znuny ICal-Dateianhänge nicht als Termin erkannt und dementsprechend auch nicht angezeigt.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-07-20-spaa-mit-ical-dateien-und-zeitzonen</id>
    <published>2022-07-20T10:00:00Z</published>
    <updated>2022-07-20T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Todd Rinaldo Nominated for Board Position</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/todd-rinaldo-nominated-for-board-position"/>
  <id>tag:news.perlfoundation.org,2022-07-19:/post/todd-rinaldo-nominated-for-board-position</id>
  <published>2022-07-19T14:39:50</published>
  <updated>2022-07-19T14:39:50</updated>
  <summary>
  <![CDATA[
     We would like to present Todd Rinaldo as a candidate to join the foundation Board. He has worked with the foundation for many years as a conference organizer and in other capacities. The board will vote on Todd's appointment at the board meeting scheduled for 19th August 2022. Below is Todd's application, answering the questions of why he wants to be a member of the board and what he would 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>We would like to present Todd Rinaldo as a candidate to join the foundation Board. He has worked with the foundation for many years as a conference organizer and in other capacities.</p>

<p>The board will vote on Todd's appointment at the board meeting scheduled for 19th August 2022.</p>

<p>Below is Todd's application, answering the questions of why he wants to be a member of the board and what he would like the foundation to work on.</p>

<hr />

<p>I am Todd Rinaldo. I've been programming for 40 years and coding Perl since my first Perl programming class in 1995. I've been a resident of Houston, TX most of my life. I've been an active Perl Monger with Houston.pm since 2006. I'm married with 1 boy. I've been an employee of cPanel for 13 years. Prior to cPanel, I worked for JP Morgan and Century Maintenance Supply before that. This has given me some very helpful perspectives on how things work in a small/medium/large company.</p>

<p>As a boy and now an adult, I have been an active member of The Boy Scouts of America. This is the other organization I've donated a significant amount of time to. The organization taught me to embrace servant leadership. I think that experience more than any has instilled in me a want to give back to the organizations that have helped me. Perl has been a big part of my life, so I certainly want to help where I can.</p>

<p>I do not represent any community. I have been a part of Perl 5 Porters and am now a voting member. My interests also include the improvement of CPAN as well as ongoing maintenance and testing of the existing modules on that platform. I of course have been an active organizer with most YAPC::NAs since 2013.</p>

<p>I'm interested in becoming a board member to offer assistance in the Foundation's mission to help the community. I have no specific agenda. As I understand things, the purpose of the board is to provide support to active projects so they can focus on coding, etc., and not the logistical, financial, and legal details. I'm not sure how much scope the board has outside of this but I am interested to know more.</p>

<p>I hope to help find ways the board can support The Perl and Raku Conference going forward. Potentially this might also include the EU which has stopped holding conferences though it is unclear if this is because of COVID or lack of interest.</p>

<p>I would also like to assure TPF continues to maintain a tight bond with the steering councils of the organizations it supports. I don't have clarity on the level of communication so it's hard to say if there is enough communication already.</p>

<hr />

<p>Please share your thoughts and comments on Todd's candidacy before the board meeting on 19th August 2022.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>#573 - Pocket money or serious support?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/573.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>Last week Mohammad raised the idea of a GitHub-pages-based central blogging platform for Perl to which Dave Cross added his <a href="https://www.reddit.com/r/perl/comments/vwb2j1/perl_weekly_issue_572_perl_blogger/">comment</a> pointing out a misunderstanding. At first I liked the idea of Mohammad as way of making it easier for people who don't know how to setup a blog, but on a second thought. Setting up a site for blogging on GitHub pages is less than 5 minutes. On GitLab and Codeberg it might take a bit more, but still way less than the whole writing part. If you need help ask Flavio, David, Mohammad, or myself.</p>
<p>A few years ago the Perl community got really enthusiastic by the idea of supporting each other via one of the monthly-support platforms. The problem, as I understood, was, that most people received only some small pocket money that did not make any real impact. So most people thought: Instead of taking home 20-40 USD a month I will use this money to support others. We ended up with a circular support in which no one received any substantial support. If you go over the amounts the <a href="https://perlmaven.com/supporting-perl-creators">Perl related people</a> receive you'll see that most of them only receive a few 10s of USD. For most people living in the economically advanced world that's just pocket money. Manwar is the person closest to some substantial amount, but he still needs more.</p>
<p>This is our challenge now. Can we, as a community, increase his support to reach 500 UK pound? We are already half-way there. If you already support him, please consider increasing the amount so we reach USD 10/supporter! (we are at about USD 5.5). If you are not supporting him yet, do it now:  <a href="https://www.patreon.com/manwar/">Manwar</a></p>
<p>Enjoy your week</p></div>
    </content>
    <id>https://perlweekly.com/archive/573.html</id>
    <published>2022-07-18T10:00:00Z</published>
    <updated>2022-07-18T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Suffering Succotash!</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/17#pwc173" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given a positive integer, $n. Write a script to find out if the given number is 
an Esthetic Number.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;

sub is_esthetic{
    my($n) = @_;
    my @digits = split(//, $n);
    my $d0 = pop @digits;
    while(@digits){
        my $d1 = pop @digits;
        return false if abs($d1 - $d0) != 1;
        $d0 = $d1;
    }
    return true;
}

MAIN:{
    my $n;
    $n = 5456;
    print "$n is ";
    print "esthetic\n" if is_esthetic($n);
    print "not esthetic\n" if !is_esthetic($n);
    $n = 120; 
    print "$n is ";
    print "esthetic\n" if is_esthetic($n);
    print "not esthetic\n" if !is_esthetic($n);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
5456 is esthetic
120 is not esthetic
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;I started to write this solution and then kept coming back to it, considering if there is
a more elegant approach. If there is I could not come up with it on my own over this past 
week! This doesn't seem all that bad, just a bit "mechanical" perhaps?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Break the number into an array of digits
&lt;/li&gt;
&lt;li&gt;Do a pairwise comparison of successive digits by popping them off the array one at a 
time and retaining the most recently popped digit for the next iteration's comparison.
&lt;/li&gt;
&lt;li&gt;If at any point the "different by 1" requirement is not met, return false.
&lt;/li&gt;
&lt;li&gt;If we complete all comparisons without a failure, return true.
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate first 10 members of Sylvester's sequence.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use bigint; 

sub sylvester_n{
    my($n) = @_;
    my @terms = (2, 3);
    my %product_table;
    $product_table{"2,3"} = 6;
    while(@terms &lt; $n){
        my $term_key = join(",", @terms);
        my $term = $product_table{$term_key} + 1;
        push @terms, $term;
        $product_table{"$term_key,$term"} = $term * $product_table{$term_key}; 
    }
    return @terms;
}


MAIN:{
    print join(", ", sylvester_n(10)). "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
2, 3, 7, 43, 1807, 3263443, 10650056950807, 113423713055421844361000443, 12864938683278671740537145998360961546653259485195807, 165506647324519964198468195444439180017513152706377497841851388766535868639572406808911988131737645185443
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Much like the first part I considered what might be an optimal way to compute this. Here
the standard &lt;em&gt;recursion and memoization&lt;/em&gt; would be most appropriate, I believe. Just to mix
things up a little I implemented my own memoization like lookup table and computed the 
terms iteratively. Otherwise though, the effect is largely the same in that for each new
term we need not reproduce any previous multiplications.&lt;/p&gt;

&lt;p&gt;These terms get large almost immediately! &lt;code&gt;use bigint&lt;/code&gt; is clearly necessary here. An 
additional optimization would be the use of &lt;code&gt;Tie::Hash&lt;/code&gt; and &lt;code&gt;Tie::Array&lt;/code&gt; to save memory as
we compute larger and larger terms. Since TWC 173.2 only specified 10 terms I left that
unimplemented.&lt;/p&gt;

&lt;p&gt;Finally, I should note that the title of this blog draws from Sylvester the Cat, not 
Sylvester the Mathematician! Sylvester the Cat's famous phrase is "Suffering Succotash!". 
See the link in the references for an example. Not everyone may not be familiar, so see 
the video link below! The comments on that video have some interesting facts about the
phrase and the character.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-173/"&gt;Challenge 173&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=PkhPuH8G5Hg"&gt;Thufferin' thuccotash!&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc173</id>
    <published>2022-07-17T21:30:00-04:00</published>
    <updated>2022-07-17T21:30:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 173</title>
    <link rel="alternate" href="https://theweeklychallenge.org/blog/recap-challenge-173/" type="text/html"/>
    <content type="text">TABLE OF CONTENTS  01. HEADLINES 02. STAR CONTRIBUTORS 03. CONTRIBUTION STATS 04. GUESTS 05. LANGUAGES 06. CENTURION CLUB 07. DAMIAN CONWAY&amp;rsquo;s CORNER 08. ANDREW SHITOV&amp;rsquo;s CORNER 09. PERL SOLUTIONS 10. RAKU SOLUTIONS 11. PERL &amp;amp; RAKU SOLUTIONS HEADLINES  Thank you Team PWC for your continuous support and encouragement.
STAR CONTRIBUTORS  Following members shared solutions to both tasks in Perl and Raku as well as blogged about it.</content>
    <id>https://theweeklychallenge.org/blog/recap-challenge-173/</id>
    <published>2022-07-18T00:00:00Z</published>
    <updated>2022-07-18T00:00:00Z</updated>
  </entry>
  <entry>
  <title>Dancer2: More route parameters</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-17T09:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-more-route-parameters"/>  <id>https://perlmaven.com/dancer2-more-route-parameters</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8588174565347218749</id>
    <published>2022-07-16T22:19:00.000+02:00</published>
    <updated>2022-07-16T22:19:35.904+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdi) 3 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OLIVER/App-Netdisco-2.052008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::Netdisco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - An open source web-based network management tool. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.052008&lt;/strong&gt; on 2022-07-12&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 2.052007 was 1 month, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9623' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - SPVM Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9623&lt;/strong&gt; on 2022-07-15&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 0.9620 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/URI-5.12' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;URI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Uniform Resource Identifiers (absolute and relative) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;5.12&lt;/strong&gt; on 2022-07-10&lt;/li&gt;  &lt;li&gt;Votes: 105&lt;/li&gt;  &lt;li&gt;Previous version: 5.10 was 8 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8588174565347218749/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdi-3-great-cpan-modules-released-last.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8588174565347218749"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8588174565347218749"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/cdi-3-great-cpan-modules-released-last.html" title="(cdi) 3 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-2655261573915198806</id>
    <published>2022-07-16T22:17:00.002+02:00</published>
    <updated>2022-07-16T22:17:35.101+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(dxv) metacpan weekly report - Object::Pad</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 39&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2022/07/16 20:17:18 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::MuPDF" target="_blank"&gt;Alien::MuPDF&lt;/a&gt; - Alien package for the MuPDF PDF rendering library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::RewriteVersion" target="_blank"&gt;App::RewriteVersion&lt;/a&gt; - A tool to rewrite and bump your Perl module versions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/builtins" target="_blank"&gt;builtins&lt;/a&gt; - Install all the new builtins from the builtin namespace&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Combinator" target="_blank"&gt;Combinator&lt;/a&gt; - Intuitively write async program serially, parallel, or circularly&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Commandable" target="_blank"&gt;Commandable&lt;/a&gt; - utilities for commandline-based programs&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON::JQ" target="_blank"&gt;JSON::JQ&lt;/a&gt; - jq (https://stedolan.github.io/jq/) library binding&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PagerDuty::Agent" target="_blank"&gt;PagerDuty::Agent&lt;/a&gt; - A perl PagerDuty client&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::PreForkManager" target="_blank"&gt;Parallel::PreForkManager&lt;/a&gt; - A manager for pre-forked child worker processes&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Alien::Build" target="_blank"&gt;Alien::Build&lt;/a&gt; (+1=22)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent" target="_blank"&gt;AnyEvent&lt;/a&gt; (+1=153)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::Beanstalk" target="_blank"&gt;AnyEvent::Beanstalk&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::cpm" target="_blank"&gt;App::cpm&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Carton" target="_blank"&gt;Carton&lt;/a&gt; (+1=116)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Dump" target="_blank"&gt;Data::Dump&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Date::Manip" target="_blank"&gt;Date::Manip&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=256)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::ebug" target="_blank"&gt;Devel::ebug&lt;/a&gt; (+2=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::Trace" target="_blank"&gt;Devel::Trace&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Farabi" target="_blank"&gt;Farabi&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Flock::Tiny" target="_blank"&gt;File::Flock::Tiny&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Getopt::Kingpin" target="_blank"&gt;Getopt::Kingpin&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/GnuPG::Interface" target="_blank"&gt;GnuPG::Interface&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::ExifTool" target="_blank"&gt;Image::ExifTool&lt;/a&gt; (+1=36)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::Run" target="_blank"&gt;IPC::Run&lt;/a&gt; (+1=35)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IPC::SysV" target="_blank"&gt;IPC::SysV&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/JSON" target="_blank"&gt;JSON&lt;/a&gt; (+1=97)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/libwww::perl" target="_blank"&gt;libwww::perl&lt;/a&gt; (+1=157)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Modern::Perl" target="_blank"&gt;Modern::Perl&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Pad" target="_blank"&gt;Object::Pad&lt;/a&gt; (+3=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Object::Simple" target="_blank"&gt;Object::Simple&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Parallel::ForkManager" target="_blank"&gt;Parallel::ForkManager&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Role::Tiny" target="_blank"&gt;Role::Tiny&lt;/a&gt; (+1=65)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Dynamically" target="_blank"&gt;Syntax::Keyword::Dynamically&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Task::Kensho" target="_blank"&gt;Task::Kensho&lt;/a&gt; (+1=113)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/tidyview" target="_blank"&gt;tidyview&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URL::Encode" target="_blank"&gt;URL::Encode&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/2655261573915198806/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxv-metacpan-weekly-report-objectpad.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2655261573915198806"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/2655261573915198806"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2022/07/dxv-metacpan-weekly-report-objectpad.html" title="(dxv) metacpan weekly report - Object::Pad"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Weekly Challenge 173</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-173-1kli" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Two pretty straight forward tasks this week. This is good given how challenging my day job has been recently.</p>

<p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-173/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-173/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Esthetic Number
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given a positive integer, <code>$n</code>.</p>

<p>Write a script to find out if the given number is Esthetic Number. An esthetic number is a positive integer where every adjacent digit differs from its neighbor by 1.</p>

<h2>
  
  
  My solution
</h2>

<p>One of the main difference between Python and Perl (other than the syntax) is variables are typed in Python where they aren't in vanilla Perl (I'm excluding Moose like variables here). This always means there is a little extra work required in Python to get the right solution.</p>

<p>For this challenge, I simply loop from the first character to the second last character. I compare the absolute difference (using the <code>abs</code> function) between that character and the next one. If the difference is not 1, we know the number is not esthetic, and can print <code>0</code> and exit the loop. If we reach the end of the loop, we can print <code>1</code>.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 5456
1

$ ./ch-1.py 120
0
</code></pre>

</div>



<h2>
  
  
  Task 2: Sylvester’s sequence
</h2>

<h3>
  
  
  Task
</h3>

<p>Write a script to generate first 10 members of <a href="https://en.wikipedia.org/wiki/Sylvester%27s_sequence">Sylvester's sequence</a>.</p>

<h2>
  
  
  My solution
</h2>

<p>The big issue with this challenge is that the numbers involved are very large, and most importantly &gt; 2<sup>31</sup>-1. Python will automatically convert an integer into a long and play along nicely.</p>

<p>For the Perl solution, using <a href="https://metacpan.org/pod/Math::BigInt">Math::BigInt</a> will achieve the same outcome.</p>

<p>In my code, I seed the <code>solutions</code> list (array in Perl) with S0 of <code>2</code>. I then have a loop that iterates until there are 10 values in the list. For each iteration, I take the product of the current values, and add one.</p>

<p>In the Python code, I use <code>math</code>s <a href="https://docs.python.org/3/library/math.html#math.prod">prod</a> function, while I list <code>List::Util</code>s <a href="https://metacpan.org/pod/List::Util#product">product</a> function in my Perl code.</p>

<h2>
  
  
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 
2
3
7
43
1807
3263443
10650056950807
113423713055421844361000443
12864938683278671740537145998360961546653259485195807
165506647324519964198468195444439180017513152706377497841851388766535868639572406808911988131737645185443
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-173-1kli</id>
    <published>2022-07-14T13:15:42Z</published>
    <updated>2022-07-14T13:15:42Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
  <title>Grant Proposal: Google TensorFlow API Bindings for Perl (John Napiorkowski)</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/grant_proposal_tensorflow_jnap_july_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/grant_proposal_tensorflow_jnap_july_2022</id>
  <published>2022-07-11T20:21:53</published>
  <updated>2022-07-11T20:21:53</updated>
  <summary>
  <![CDATA[
     Name John Napiorkowski Amount Requested: The minimum budget for this project is $8,800 USD Synopsis This grant proposal is for the development of a Perl API to Google TensorFlow, a software library for machine learning and artificial intelligence TensorFlow is generally considered to be the most mature and well-supported ML/AI library, and will benefit the Perl community tremendously. Benefits to the Perl Community Most new software development projects tend to 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h2>Name</h2>

<p>John Napiorkowski</p>

<h2>Amount Requested:</h2>

<p>The minimum budget for this project is $8,800 USD</p>

<h2>Synopsis</h2>

<p>This grant proposal is for the development of a Perl API to Google TensorFlow, a software library for machine learning (ML) and artificial intelligence (AI).</p>

<p>TensorFlow is generally considered to be the most mature and well-supported ML/AI library, and will benefit the Perl community tremendously.</p>

<h2>Benefits to the Perl Community</h2>

<p>Most new software development projects tend to incorporate or utilize machine learning in some way.</p>

<p>Most machine learning libraries, including TensorFlow, provide a well-documented Python API with example Python applications.</p>

<p>Thus, due to these (and other) reasons, most new software projects are implemented using Python or some other non-Perl language.</p>

<p>The availability of a fully-featured and up-to-date Perl API for TensorFlow would have far-reaching and long-lasting effects on the Perl community.</p>

<p>To begin with, software developers will be able to much more easily convince corporate management to adopt Perl for new software projects requiring ML/AI.</p>

<p>Secondly, students and teachers alike will be empowered to teach Perl in ML/AI courses at countless high schools, colleges, and universities.</p>

<p>Third, open source Perl developers will have essential new tools for working on brilliant breakthroughs in ML/AI software, to the benefit of all humanity.</p>

<p>Fourth, the overall creation of new Perl ML/AI projects and educational courses will naturally result in the critically-needed creation of new Perl jobs.</p>

<p>Last but not least, new corporate projects using Perl ML/AI will also translate into new corporate funding and sponsorship for Perl non-profits such as TPF.</p>

<h2>Deliverables</h2>

<p>An implementation of Perl API bindings to all applicable symbols in the TensorFlow C API, using FFI::Platypus from CPAN.</p>

<p>A comprehensive Perl test suite with automatically-provable coverage for 100% of the Perl API, using Test2 from CPAN.</p>

<p>A carefully-written and explanatory collection of documentation with coverage for 100% of the Perl API, using normal POD fully compatible with CPAN.</p>

<p>A small collection of user-friendly example Perl applications, using popular TensorFlow components to effectively showcase the Perl API.</p>

<p>A public GitLab repository with all source code and components of the Perl API, including unstable or experimental components.</p>

<p>A public CPAN distribution with all stable source code and components of the Perl API.</p>

<p>A public DockerHub repository with all stable source code and components of the Perl API, along with all dependencies, ready to run out-of-the-box.</p>

<p>The TensorFlow C API does NOT yet support gradients, functions, and control flow operations.  These features will be addressed in future grant proposals.</p>

<p>This grant proposal specifically does NOT include any re-implementation of TensorFlow's Python layer, such as NumPy NDarrays or Keras, which is far beyond the scope of a single grant and will be addressed in future proposals.</p>

<h2>Project Details</h2>

<p>All the technical details of how a TensorFlow API should behave and how to implement it in Perl can be found at the following websites:</p>

<ul>
<li>https://www.tensorflow.org/api_docs</li>
<li>https://github.com/tensorflow/tensorflow</li>
<li>https://github.com/tensorflow/docs/blob/master/site/en/r1/guide/extend/bindings.md</li>
<li>https://github.com/tensorflow/tensorflow/blob/master/tensorflow/c/c_api.h</li>
<li>https://metacpan.org/pod/FFI::Platypus</li>
<li>https://metacpan.org/pod/Test2</li>
</ul>

<h2>Project Schedule</h2>

<p>Total development time is estimated at 60 to 90 days, with the normal disclaimer about the difficulty of predicting software project durations.</p>

<p>During the first work cycle of approximately 30 days, implement the initial Perl API.</p>

<p>During the second work cycle, implement the Perl test suite.</p>

<p>During the third work cycle, write the Perl documentation and implement the Perl example applications.</p>

<p>If a fourth work cycle is required, continue until the public releases on CPAN and DockerHub are complete.</p>

<h2>Completeness Criteria</h2>

<p>This grant is deemed complete when all the above-listed deliverables are reviewed and accepted by the official TPF-assigned grant manager.</p>

<h2>Bio</h2>

<p>I'm a prolific CPAN author, with <a href="https://metacpan.org/author/JJNAPIORK">86 distributions so far</a>.</p>

<p>I've been one of the core maintainers of <a href="https://metacpan.org/release/JJNAPIORK/Catalyst-Runtime-5.90126/view/lib/Catalyst.pm">Catalyst</a>, the premier Perl MVC web application framework, for over a decade.</p>

<p>I'm an active and dedicated member of the Perl community, including long-term participation at TPF-sponsored events such as <a href="https://www.youtube.com/c/YAPCNA/search?query=napiorkowski">The Perl Conference</a>.</p>

<p>I live outside of Austin, Texas with my family, pets, and farm animals.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Maintaining Perl (Tony Cook): June 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl_tonyc_june_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/maintaining_perl_tonyc_june_2022</id>
  <published>2022-07-11T18:35:16</published>
  <updated>2022-07-11T18:35:16</updated>
  <summary>
  <![CDATA[
     Tony writes: 2022/06/01 Wednesday 0.28 comment on Win32 p5p thread 0.60 #18882 review, comment briefly 1.17 review github notifications 1.40 #19668 fail to build perl  get it built, reproduce, work on test 0.17 #19668 finish test, fix, start test run, push for CI 3.62 2022/06/02 Thursday 0.07 #19668 open PR 1.42 review coverity report 351943, diagnose, research, fix,  testing, push change for CI, open PR #19807 0.77 cid 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Tony writes:
```
[Hours]         [Activity]
2022/06/01      Wednesday
0.28           comment on Win32 p5p thread
0.60           #18882 review, comment briefly
1.17           review github notifications
1.40           #19668 fail to build perl (using tools from strawberry),
                get it built, reproduce, work on test</p>

<h1>0.17           #19668 finish test, fix, start test run, push for CI</h1>

<p>3.62</p>

<p>2022/06/02      Thursday
0.07           #19668 open PR
1.42           review coverity report 351943, diagnose, research, fix,
                testing, push change for CI, open PR #19807
0.77           cid 351946 - diagnose and reject as false positive, review
                some other coverity issues
1.68           more coverity cid 351960 - try to make it crash, review</p>

<h1>                other coverity issues</h1>

<p>3.94</p>

<p>2022/06/03      Friday
1.38           more coverity, upload a simple modelling file (how to
                prevent byte swapping tainting?)
0.20           #19807 review CI results and apply to blead
0.30           #19806 apply to blead, perldelta updates</p>

<h1>0.43           #19791 review, look over Configure, hints/freebsd</h1>

<p>2.31</p>

<p>2022/06/06      Monday
0.17           #19825 review and approve
0.37           #19795 review and comment
0.33           #19797 review and comment
0.40           #19826 try to reproduce, comment
1.68           #19704 work on a fix, testing
1.15           #19704 try to break it, commit, push for CI
0.67           #19826 follow-up</p>

<h1>1.12           #6841/#12227 testing, comments</h1>

<p>5.89</p>

<p>2022/06/07      Tuesday
1.07           #19797 try to test build with clang-cl (and fail)
1.27           review new coverity alerts
0.70           yield true feature discussion: comment, try a simple
                patch, look over referenced true module.</p>

<h1>1.63           #6841 testing, work on a fix, more testing</h1>

<p>4.67</p>

<p>2022/06/08      Wednesday
0.28           #19797 followup
1.05           #19704 re-word commit message
0.62           #6841 more testing, push for CI
0.10           #6841 check CI results, make PR #19833
0.17           #18882 recheck and apply to blead
0.83           #18534 review and briefly comment
0.52           #19829 testing, review Makefile and make PR #19834
0.98           #19791 review Configure and hints, start on a fix (tests</p>

<h1>                are slow on qemu)</h1>

<p>4.55</p>

<p>2022/06/09      Thursday
0.10           #19797 followup - restart failing CI test (looks like a
                timing issue)
0.17           #19833 apply to blead, perldelta
0.48           #19795 review and approve
0.53           #19791 rebase, start a(nother) test Configure
0.20           #19834 review discussion and apply to blead, perldelta
0.67           #19826 try on 21H2, still can’t reproduce
0.17           #19791 slight re-work, start another test run
0.72           look over history of requirement for true from required
                files (goes back to 5.000)
0.37           #19797 check CI results and apply to blead
0.48           #19822 review and approve
0.13           #19820 review (no decision)</p>

<h1>0.47           #19791 make a commit, test on amd64 VM, make PR 19843</h1>

<p>4.49</p>

<p>2022/06/13      Monday
0.83           review github notifications
0.38           #19847 review and approve
1.65           look at floor/ceil overloading, debug an assert, create</p>

<h1>                #19857</h1>

<p>2.86</p>

<p>2022/06/14      Tuesday
0.40           #19854 review and comment
0.40           #19791 comment
0.28           #19837 review and approve
0.20           #19836 review and approve</p>

<h1>1.57           #19846 review, testing</h1>

<p>2.85</p>

<p>2022/06/15      Wednesday
0.18           #14448 research and comment
1.02           #19846 look into PERL_MEM_LOG build issues
1.40           #19846 more look into PERL_MEM_LOG build issues, push for
                CI
0.53           #19861 review and approve
0.22           #19858 review and approve
0.17           #19769 review and approve
0.15           #19755 review, research and comment with suggestion</p>

<h1>0.48           #19851 research and comment</h1>

<p>4.15</p>

<p>2022/06/16      Thursday
0.08           #19864 apply to blead
0.05           #19755  review new changes and apply to blead
0.87           #19846 look at CopSTASHPV problem, testing and comment
1.02           #19848 review, briefly comment
1.12           research implementation of yield true, comment to list</p>

<h1>0.70           #18606 rebase, look over code, testing</h1>

<p>3.84</p>

<p>2022/06/20      Monday
0.38           #19870 try to see why it fails, find out, comment
0.82           #19871 try to see why it fails and comment
0.45           cygwin CI setup re-work - use cygwin setup action
3.32           more cygwin CI setup re-work - more use cygwin setup
                action, try to use standard checkout action but thwarted</p>

<h1>                by safe directories</h1>

<p>4.97</p>

<p>2022/06/21      Tuesday
0.60           #19832 rebase
0.80           cygwin CI setup re-work - retest and make PR #19876
0.27           #19871 review comments and comment
0.22           #19846 review latest and apply to blead</p>

<h1>0.87           #19814 review code and comments, comment</h1>

<p>2.76</p>

<p>2022/06/22      Wednesday
0.77           #12082 research, write up a simple doc change and make PR
                #19881
0.27           #19870 review updated version and comment
0.22           #19857 follow-up
0.23           #19876 apply to blead (also some unrelated #p5p
                discussion)
0.80           #19851 reproduce, work on fixes
0.32           #19851 more, comment</p>

<h1>1.32           #18606 more testing</h1>

<p>3.93</p>

<p>2022/06/23      Thursday
0.10           review github notifications
1.77           #19857 debugging</p>

<h1>2.15           #19857 debugging</h1>

<p>4.02</p>

<p>2022/06/27      Monday
0.25           review github notifications
1.28           #19894 review, research and comment, reproduce on DFBSD
                5.8, start a bisect
1.33           #19894 review bisect results, try to make a short
                reproducer, debugging, comment
0.62           #19867 research and comment
0.77           #19857 find immediate cause of parent link not being set,</p>

<h1>                more to do.</h1>

<p>4.25</p>

<p>2022/06/28      Tuesday
0.42           review github notifications
0.67           #19894 test and make a smoke-me branch
0.20           #19896 review
0.13           #19895 testing and comment</p>

<h1>1.13           #19857 debugging</h1>

<p>2.55</p>

<p>2022/06/29      Wednesday
0.48           #19874 testing, comment
0.97           Karl’s UTF8-API - research and comment</p>

<h1>1.77           #19857 more debugging, think I found the cause</h1>

<p>3.22</p>

<p>2022/06/30      Thursday
2.48           #19894 debugging, create
                https://bugs.dragonflybsd.org/issues/3319 work on a SKIP
                patch, testing, push for smoke-me, comment
0.48           #19903 review, research and comment</p>

<h1>0.60           #19901 review, research and comment</h1>

<p>3.56
```
Which I calculate is 72.43 hours.</p>

<p>Approximately 45 tickets were reviewed or worked on, and 10 patches
were applied.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>TPRC 2022 SOC Report</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-2022-soc-report"/>
  <id>tag:news.perlfoundation.org,2022-07-11:/post/tprc-2022-soc-report</id>
  <published>2022-07-11T18:18:01</published>
  <updated>2022-07-11T18:18:01</updated>
  <summary>
  <![CDATA[
     As with past conferences, the TPRC 2022 conference had a Standards of Conduct document all attendees were required to agree to. We believe that it’s important to share the outcome of these policies so that people in our community know that we are enforcing them and what outcomes to expect from violations. This is an anonymized summary of the incidents reported to the SoC Committee and the committee’s response: A 
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/01cc7150e7b9abb6a426ac09728aabe3b2ace91d/logo-square.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>As with past conferences, the TPRC 2022 conference had a Standards of Conduct document all attendees were required to agree to. We believe that it’s important to share the outcome of these policies so that people in our community know that we are enforcing them and what outcomes to expect from violations.</p>

<p>This is an anonymized summary of the incidents reported to the SoC Committee and the committee’s response:</p>

<ul>
<li>A conference attendee made an inappropriate remark to a fellow attendee.  The Standards of Conduct committee spoke with the reported attendee. As this was not the first such incident with the reported attendee, we gave them a final warning. Further violations of the SoC will result in a temporary ban from the conference and other TPF/RF spaces</li>
<li>A group of conference attendees were playing Cards Against Humanity in a shared conference space.  Conference organizers spoke to the group and asked them to move the game to a private space; the attendees chose to end the game.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>#572 - Perl Blogger?</title>
    <link rel="alternate" href="https://perlweekly.com/archive/572.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there,</p>
<p>Are you a <strong>Perl</strong> blogger?</p>
<p>The state of Perl blogging is not hidden from anyone. <strong>Dave Cross</strong> wrote an extensive <a href="https://perlhacks.com/2020/09/blogging-for-perl">blog post</a> explaining not just the issues but also suggestions to get around it.</p>
<p>I proposed an idea on my <a href="https://twitter.com/cpan_author">personal twitter</a> handle and asked for public opinion. As of today, it got <strong>22 likes</strong>. I know, it isn't big number.</p>
<p>By the way, what was the proposal?</p>
<p>The proposal was to setup dedicated domain (https) powered by <strong>GitHub Pages</strong>. The static site would be generated by <strong>Hugo</strong>. It would be open to public to submit blog post as <strong>Markdown</strong> formatted page as pull request. After a quick review, the post would be live.</p>
<p>Sounds simple, isn't it?</p>
<p>The proposal should be familiar to those who have ever wrote an article for <a href="https://www.perl.com">Perl.com</a>. It has the same the process as I mentioned above, I was reminded the same in response to my <strong>Twitter post</strong> by a friend of mine. It makes me sad to see that the last post on the site was published on <strong>25th May 2021</strong>. I came to know about the site for the first time when I found out about the monthly post <strong>"What's new on CPAN"</strong> by <strong>David Farrell</strong>. In the early days of my <strong>CPAN</strong> association, every time I upload a new distribution, I would wait for the article to see if my distribution made it or not. Some of my distributions did appear in the article, just for record. I even did interview series, <strong>The Perl Ambassador</strong> for the site in the year 2020. I had the honour to interview, <a href="https://www.perl.com/article/the-perl-ambassador-gabor-szabo">Gabor Szabo</a>, <a href="https://www.perl.com/article/the-perl-ambassador-curtis-poe">Curtis 'Ovid' Poe</a> and <a href="https://www.perl.com/article/the-perl-ambassador-damian-conway">Damian Conway</a>. What a shame, I couldn't continue even though I had the list of high profile <strong>Perl Ambassadors</strong> to interview.</p>
<p>I have mostly blogged on <a href="http://blogs.perl.org/users/mohammad_s_anwar">blogs.perl.org</a>. I don't consider myself an active blogger, although I used to blog frequently before. I don't feel comfortable now a days blogging on <strong>bpo</strong>, so I decided to blog on <a href="https://theweeklychallenge.org/blogs">Perl Weekly Challenge</a> and cross linked on <strong>bpo</strong>. It is (cross linking) something not approved by many as I understand. I am likely to setup my personal blog site instead, just for <strong>Perl</strong>. I will share the details when it is live. You are all welcome to contribute.</p>
<p>I am up for new ideas and suggestions too. Please do share if you have one.</p>
<p>Enjoy rest of the newsletter.</p></div>
    </content>
    <id>https://perlweekly.com/archive/572.html</id>
    <published>2022-07-11T10:00:00Z</published>
    <updated>2022-07-11T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
    <title>Partition the Summary</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/10#pwc172" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given two positive integers, $n and $k. Write a script to find out the Prime 
Partition of the given number. No duplicates are allowed.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use boolean;
use Math::Combinatorics;

sub sieve_atkin{
    my($upper_bound) = @_;
    my @primes = (2, 3, 5);
    my @atkin = (false) x $upper_bound;    
    my @sieve = (1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 49, 53, 59);
    for my $x (1 .. sqrt($upper_bound)){
        for(my $y = 1; $y &lt;= sqrt($upper_bound); $y+=2){
            my $m = (4 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (1, 13, 17, 29, 37, 41, 49, 53) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    for(my $x = 1; $x &lt;= sqrt($upper_bound); $x += 2){
        for(my $y = 2; $y &lt;= sqrt($upper_bound); $y += 2){
            my $m = (3 * $x ** 2) + ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (7, 19, 31, 43) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    }   
    for(my $x = 2; $x &lt;= sqrt($upper_bound); $x++){
        for(my $y = $x - 1; $y &gt;= 1; $y -= 2){
            my $m = (3 * $x ** 2) - ($y ** 2);
            my @remainders;  
            @remainders = grep {$m % 60 == $_} (11, 23, 47, 59) if $m &lt;= $upper_bound; 
            $atkin[$m] = !$atkin[$m] if @remainders; 
        }          
    } 
    my @m;
    for my $w (0 .. ($upper_bound / 60)){
        for my $s (@sieve){
            push @m, 60 * $w + $s;  
        }
    }
    for my $m (@m){
        last if $upper_bound &lt; ($m ** 2);
        my $mm = $m ** 2;
        if($atkin[$m]){
            for my $m2 (@m){
                my $c = $mm * $m2;
                last if $c &gt; $upper_bound;
                $atkin[$c] = false;
            }
        }
    }
    map{ push @primes, $_ if $atkin[$_] } 0 .. @atkin - 1;
    return @primes; 
}

sub prime_partition{
    my($n, $k) = @_;
    my @partitions;
    my @primes = sieve_atkin($n);
    my $combinations = Math::Combinatorics-&gt;new(count =&gt; $k, data =&gt; [@primes]);
    while(my @combination = $combinations-&gt;next_combination()){
        push @partitions, [@combination] if unpack("%32I*", pack("I*", @combination)) == $n;
    }
    return @partitions;
}

MAIN:{
    my($n, $k);
    $n = 18, $k = 2;
    map{ 
        print "$n = " . join(", ", @{$_}) . "\n"
    } prime_partition($n, $k);
    print"\n\n";
    $n = 19, $k = 3;
    map{ 
        print "$n = " . join(", ", @{$_}) . "\n"
    } prime_partition($n, $k);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
18 = 7, 11
18 = 5, 13


19 = 3, 11, 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Only when writing this short blog did I realize there is a far more efficient way of 
doing this!&lt;/p&gt;

&lt;p&gt;Here we see a brute force exhaustion of all possible combinations. This works alright for 
when &lt;code&gt;$n&lt;/code&gt; and &lt;code&gt;$k&lt;/code&gt; are relatively small. For larger values a procedure like this would be
better,&lt;/p&gt;

&lt;pre&gt;
1. Obtain all primes $p &lt; $n
2. Start with $n and compute $m = $n - $p for all $p
3. If $m is prime and $k = 2 DONE
4. Else set $n = $m and repeat, computing a new $m with all $p &lt; $m stopping with the same criteria if $m is prime and $k is satisfied
&lt;/pre&gt;

&lt;p&gt;This procedure would be a natural fit for recursion, if you were in the mood for that sort 
of thing.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;You are given an array of integers. Write a script to compute the five-number summary of 
the given set of integers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub five_number_summary{
    my @numbers = @_;
    my($minimum, $maximum, $first_quartile, $median, $third_quartile);
    my @sorted = sort {$a &lt;=&gt; $b} @numbers;
    $minimum = $sorted[0];
    $maximum = $sorted[@sorted - 1];
    if(@sorted % 2 == 0){
        my $median_0 = $sorted[int(@sorted / 2) - 1];
        my $median_1 = $sorted[int(@sorted / 2)];
        $median = ($median_0 + $median_1) / 2;
        my @lower_half = @sorted[0 .. int(@sorted / 2)];
        my $median_lower_0 = $lower_half[int(@lower_half / 2) - 1];
        my $median_lower_1 = $lower_half[int(@lower_half / 2)];
        $first_quartile = ($median_lower_0 + $median_lower_1) / 2;       
        my @upper_half = @sorted[int(@sorted / 2) .. @sorted];
        my $median_upper_0 = $upper_half[int(@upper_half / 2) - 1];
        my $median_upper_1 = $upper_half[int(@upper_half / 2)];
        $third_quartile = ($median_upper_0 + $median_upper_1) / 2;
    }
    else{
        $median = $sorted[int(@sorted / 2)];
        $first_quartile = [@sorted[0 .. int(@sorted / 2)]]-&gt;[int(@sorted / 2) / 2];
        $third_quartile = [@sorted[int(@sorted / 2) .. @sorted]]-&gt;[(@sorted - int(@sorted / 2)) / 2];
    }
    return {
        minimum =&gt; $minimum, 
        maximum =&gt; $maximum, 
        first_quartile =&gt; $first_quartile, 
        median =&gt; $median, 
        third_quartile =&gt; $third_quartile
    };
}

MAIN:{
    my @numbers;
    my $five_number_summary;
    @numbers = (6, 3, 7, 8, 1, 3, 9);
    print join(", ", @numbers) . "\n";
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
    print "\n\n";
    @numbers = (2, 6, 3, 8, 1, 5, 9, 4);
    print join(", ", @numbers) . "\n";    
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
    print "\n\n";
    @numbers = (1, 2, 2, 3, 4, 6, 6, 7, 7, 7, 8, 11, 12, 15, 15, 15, 17, 17, 18, 20);
    print join(", ", @numbers) . "\n";      
    $five_number_summary = five_number_summary(@numbers);
    map{
        print "$_: $five_number_summary-&gt;{$_}\n";
    } keys %{$five_number_summary};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
6, 3, 7, 8, 1, 3, 9
third_quartile: 8
maximum: 9
minimum: 1
first_quartile: 3
median: 6


2, 6, 3, 8, 1, 5, 9, 4
median: 4.5
first_quartile: 2.5
minimum: 1
maximum: 9
third_quartile: 7


1, 2, 2, 3, 4, 6, 6, 7, 7, 7, 8, 11, 12, 15, 15, 15, 17, 17, 18, 20
maximum: 20
third_quartile: 15
first_quartile: 5
median: 7.5
minimum: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;Note that the case of an even or odd number of elements of the list (and sublists) 
requires slightly special handling.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-172/"&gt;Challenge 172&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc172</id>
    <published>2022-07-10T20:39:00-04:00</published>
    <updated>2022-07-10T20:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Maintaining Perl 5 Core (Dave Mitchell): June 2022</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/maintaining_perl5_core_davem_june_2022"/>
  <id>tag:news.perlfoundation.org,2022-07-10:/post/maintaining_perl5_core_davem_june_2022</id>
  <published>2022-07-10T12:53:09</published>
  <updated>2022-07-10T12:53:09</updated>
  <summary>
  <![CDATA[
     Dave writes: This is my monthly report on work done during June covered by my TPF perl core maintenance grant. SUMMARY:  0:47 improve docs for internal exception handling  1:46 look into disabling smartmatch/switch.  8:02 make stack reference counted  7:58 process p5p mailbox   18:33 TOTAL The most interesting thing I did was that near the end of the month I started work on "making the 
   ]]>
  </summary>
  <author>
    <name>Jason A. Crome</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/7f97282811f6a9f862d7e659c79e5462cc195d94/grant-funding.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>Dave writes:</p>

<p>This is my monthly report on work done during June covered by my TPF perl
core maintenance grant.</p>

<p>SUMMARY:
<code>
      0:47 improve docs for internal exception handling (JMPENV etc)
      1:46 look into disabling smartmatch/switch.
      8:02 make stack reference counted
      7:58 process p5p mailbox
    ------
     18:33 TOTAL (HH::MM)
</code></p>

<p>The most interesting thing I did was that near the end of the month I
started work on "making the stack reference counted"; i.e. that when
things are pushed onto the argument stack, their reference count (RC)
should be incremented and, conversely, decremented when popped.</p>

<p>Currently things on the stack aren't RCed, so there is a danger that such
items could be prematurely freed. For example,</p>

<pre><code>@a = (1,2,3);
f(@a);

sub f {
    @a = (); # prematurely frees the elements of @a
    print "($_[0])\n"; # prints an undefined value or random garbage
}
</code></pre>

<p>This issue has been the basis of countless "unfixable" bug reports over
the years, and in particular most fuzzing crash reports turn out to be
caused by this issue.</p>

<p>There is a particular difficulty in fixing this: specifically how do we
get to there from where we are now, because it's rather an all-or-nothing
scenario. Every single pp function in the 30K lines of code in the various
<code>pp*.c</code> files all need to be updated to expect an RCed stack at the same
time. You can't have only half of them updated: the stack is binary, it's
either RCed or it isn't. So having updated only half the pp functions, you
can't compile perl and run the test suite.</p>

<p>My cunning plan for getting round that is to initially redefine all the
<code>Perl_pp_foo()</code> functions to be small wrapper functions around the real
functions. The wrappers are responsible for making a non-RCed copy of the
function's args and calling the real (non-RC aware) function; then on
return, shifting down and bumping the RC of any returned arguments. A
similar thing will be done by <code>pp_entersub()</code> to call XS functions.</p>

<p>This is crude and slow, but in principle allows the changeover to an RCed
stack in a single go. Then at my leisure, I can go through the pp
functions one by one and modify them to be RC-aware and remove the wrapper
functions. Once all the important functions are done (e.g. all the ones in
<code>pp_hot.c</code>) then the new system may be ready for production use. We can
continue using wrapper functions for the slow/rare functions if converting
them would be too much work.</p>

<p>I intend to have a new build define, <code>PERL_RC_STACK</code>, which isn't initially
enabled by default. Unless enabled, perl behaves as usual, with the stack
not being reference counted, the wrapper functions not being defined, etc.
So my work can proceed initially without breaking normal perl. Once the
work is stable and we don't think it will break most of CPAN, then
<code>PERL_RC_STACK</code> will be enabled by default in builds, but can be disabled at
build time if necessary. Eventually the define will be removed
altogether, meaning that various places in the perl core no longer need to
handle both RC and non-RC cases.</p>

<p>This work if fairly risky, in that I may well find along the way that the
problems are unsurmountable and have to abandon it.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Weekly Challenge 172</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-172-1h8i" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-172/">Challenge</a>, <a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-172/sgreen">My solutions</a></p>

<h2>
  
  
  Task 1: Prime Partition
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given two positive integers, <code>$m</code> and <code>$n</code>.</p>

<p>Write a script to find out the Prime Partition of the given number. No duplicates allowed.</p>

<h3>
  
  
  My solution
</h3>

<p>This is one of those interesting tasks where there are multiple ways to tackle it. And the method really depends on the value of <code>m</code> and (more importantly) <code>n</code>.</p>

<p>I took the quick and easy option, given that the examples provided have small values. In this method, I collect a list of all primes <code>&lt;=m</code> and store it in a list (array in Perl) called <code>primes</code>. I then use itertool's <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations">combinations</a> method to work out all combinations of size <code>n</code>. If I find a combination that sums to the value of <code>m</code>, I print the results and exit. If I don't find one, I also print an appropriate message.</p>

<p>For the Perl version, I use the <a href="https://metacpan.org/pod/Algorithm::Combinatorics">Algorithm::Combinatorics</a> module to perform the same function that Python's itertools provides. This is available as a RPM package in Fedora (the OS my server uses), so seems like a good choice.</p>

<p>Now for a discussion about the case where <code>m</code> and <code>n</code> are larger. The problem with the above method is when <code>n</code> is larger, the number of combinations grows exponentially. This leads to a lot of calculations where the sum is clearly going to be too high or too low.</p>

<p>Take for example trying to find 10 primes of 7920. The 1000th prime number is 7919. As I sorted the list highest to lowest, it means the first gazillion (well not quite, but it is a number with 26 digits in it, 999 × 998 × ... × 991) combinations will always result in a number that is too large. Rather than working through all combinations, we can eliminate ones that clearly won't be valid. For example, if we take the first number as 7829 (the 990th prime), we know that the sum of the remain digits can't be larger than 91.</p>

<p>However, the example clearly sets an expectation that <code>m</code> and <code>n</code> are (relatively speaking) on the smaller side, so the brute force method is good enough.</p>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-1.py 18 2
(13, 5)

$ ./ch-1.py 19 3
(11, 5, 3)

</code></pre>

</div>



<h2>
  
  
  Task 2: Five-number Summary
</h2>

<h3>
  
  
  Task
</h3>

<p>You are given an array of integers.</p>

<p>Write a script to compute the <a href="https://en.wikipedia.org/wiki/Five-number_summary">five-number summary</a> of the given set of integers.</p>

<h3>
  
  
  My solution
</h3>

<p>The easy solution would just be use <a href="https://numpy.org/">numpy</a> which supports this out the box, but where is the fun in that? If this was code I needed to use at work, indeed <code>import numpy</code> would be at the top of the script.</p>

<p>This task is pretty straight forward, so no real explanation is needed. Take the integers, sort them from lowest to highest, and find the position at each quartile. If that position is not a single value, then take the two values and half it.</p>

<h3>
  
  
  Example
</h3>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>$ ./ch-2.py 0 0 1 2 63 61 27 13
0, 0.5, 7.5, 44, 63
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-172-1h8i</id>
    <published>2022-07-10T10:28:53Z</published>
    <updated>2022-07-10T10:28:53Z</updated>
    <category term="perl"/>
    <category term="python"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Task::Date::Holidays bug fix release 0.12</title>
    <link rel="alternate" href="https://dev.to/jonasbn/taskdateholidays-bug-fix-release-012-15jj" type="text/html"/>
    <content type="html">&lt;p&gt;With the &lt;a href="https://dev.to/jonasbn/release-130-of-dateholidays-more-holiday-for-the-french-36o7"&gt;releases 1.31 of Date::Holidays and 0.11 of Task::Date::Holidays&lt;/a&gt; I apparently forgot to test properly, so an issue was not observed. I believe I have accidentally tested &lt;a href="https://metacpan.org/pod/Task::Date::Holidays"&gt;Task::Date::Holidays&lt;/a&gt; 0.11 with &lt;a href="https://metacpan.org/pod/Date::Holidays"&gt;Date::Holidays&lt;/a&gt; 1.30 not 1.31.&lt;/p&gt;

&lt;p&gt;This resulted in a lot of reports on failing tests from CPAN testers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75sgJckw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdh7yc2gnu4tiy181ack.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75sgJckw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdh7yc2gnu4tiy181ack.png" alt="Test matrix for Task::Date::Holidays 0.11" width="880" height="1141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href="http://matrix.cpantesters.org/?dist=Task-Date-Holidays%200.11"&gt;cpantesters.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since it is my holiday I was able to find the time to dig into  the &lt;em&gt;holidays&lt;/em&gt; and Yesterday I found the issue, adjusted the tests and shipped 0.12 and already today the results look much better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5A0C-Loh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxcaklzovw29debvjw9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5A0C-Loh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxcaklzovw29debvjw9h.png" alt="Test matrix for Task::Date::Holidays 0.11" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ref: &lt;a href="http://matrix.cpantesters.org/?dist=Task-Date-Holidays%200.12"&gt;cpantesters.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One more item on the TODO list ticked off...&lt;/p&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/taskdateholidays-bug-fix-release-012-15jj</id>
    <published>2022-07-09T10:39:51Z</published>
    <updated>2022-07-09T10:39:51Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
    <title>#571 - Sponsoring TPF or individuals</title>
    <link rel="alternate" href="https://perlweekly.com/archive/571.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi there!</p>
<p>What if you had a steady income of a few thousand USDs just for doing awesome things for Perl so you can afford to do whatever you want? I bet there would be tons of things you could do. Improving CPAN modules, patching Perl, writing articles, recording videos, encouraging others to write more. etc.</p>
<p>So what if we could support a few people to do just that? How could you be part of it? You could <a href="https://perlfoundation.org/donate">donate to TPF</a>, but for you, as an individual it might be better to support an individual directly. Without the organizational overhead. For this a while ago I put together the list of <a href="https://perlmaven.com/supporting-perl-creators">all the Perl-related people</a>, I knew about at that time, who are accepting donations. They are mostly looking for monthly support instead of a one-time support. In my opinion it is much better to support someone with $10/month than $200 one-time donation. Partially because having a steady income is much better than having the need to raise more funds every few weeks or even every few months. With that said both at Patreon and GitHub Sponsors you can subscribe to a regular donation and then, after the payment you can cancel it. Effectively providing a one-time donation.</p>
<p>I went over the list now. There are 11 people listed on that page with a total of 139 sponsors. (There is probably some overlap the same person sponsoring more than one 'creator'.)</p>
<p>Personally I'd recommend you <a href="https://www.patreon.com/manwar">sponsor the work of Mohammad</a> as he both creates code and generates a lot of publicity for Perl, but if you decide to support someone else from the list that's awesome too. If you find donate to someone who is not in this list yet, and if they agree, feel free to send a PR to add them to the list.</p>
<p>Enjoy your week!</p></div>
    </content>
    <id>https://perlweekly.com/archive/571.html</id>
    <published>2022-07-04T10:00:00Z</published>
    <updated>2022-07-04T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Route parameters and sending 404 manually</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-07-04T08:15:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-route-parameters"/>  <id>https://perlmaven.com/dancer2-route-parameters</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Abundant Composition</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2022/07/03#pwc171" type="text/html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate 
the working solution.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Part 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Write a script to generate the first twenty Abundant Odd Numbers.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub proper_divisors{
    my($n) = @_;
    my @divisors;
    for my $x (1 .. $n / 2){
        push @divisors, $x if $n % $x == 0;
    }
    return @divisors;
}

sub n_abundant_odd{
    my($n) = @_; 
    my $x = 0;
    my @odd_abundants;
    {
        push @odd_abundants, $x if $x % 2 == 1 &amp;&amp; unpack("%32I*", pack("I*", proper_divisors($x))) &gt; $x;
        $x++;
        redo if @odd_abundants &lt; $n;
    }
    return @odd_abundants;
}

MAIN:{
    print join(", ", n_abundant_odd(20)) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
945, 1575, 2205, 2835, 3465, 4095, 4725, 5355, 5775, 5985, 6435, 6615, 6825, 7245, 7425, 7875, 8085, 8415, 8505, 8925
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;The solution here incorporated a lot of elements from previous weekly challenges. That is 
to say it is quite familiar, I continue to be a fan of &lt;code&gt;redo&lt;/code&gt; as well as the &lt;code&gt;pack/unpack&lt;/code&gt;
method of summing the elements of an array.&lt;/p&gt;

&lt;h2&gt;Part 2&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Create sub compose($f, $g) which takes in two parameters $f and $g as subroutine refs 
and returns subroutine ref i.e. compose($f, $g)-&gt;($x) = $f-&gt;($g-&gt;($x)).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
sub f{
    my($x) = @_;
    return $x + $x;
}

sub g{
    my($x) = @_;
    return $x * $x;
}

sub compose{
    my($f, $g) = @_;
    return sub{
        my($x) = @_;
        return $f-&gt;($g-&gt;($x));
    };
}

MAIN:{
    my $h = compose(\&amp;f, \&amp;g);
    print $h-&gt;(7) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Sample Run&lt;/h3&gt;

&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
98
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Notes&lt;/h3&gt;

&lt;p&gt;This problem incorporates some interesting concepts, especially from functional 
programming. Treating functions in a &lt;em&gt;first class way&lt;/em&gt;, that is, passing them as 
parameters, manipulating them, dynamically generating new ones are commonly performed in
functional programming languages such as Lisp and ML. Here we can see that Perl can quite
easily do these things as well!&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theweeklychallenge.org/blog/perl-weekly-challenge-171/"&gt;Challenge 171&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc171</id>
    <published>2022-07-03T12:39:00-04:00</published>
    <updated>2022-07-03T12:39:00-04:00</updated>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Mite: an OO compiler for Perl</title>
    <link rel="alternate" href="https://dev.to/tobyink/mite-an-oo-compiler-for-perl-b70" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://metacpan.org/pod/Moose"&gt;Moose&lt;/a&gt; is great, but it does introduce a slight performance hit to your code. In the more than 15 years since it was first released, hardware improvements have made this less of a problem than it once was. Even so, if performance is a concern for your project, Moose might not be what you want. It also has a fairly big collection of non-core dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Moo"&gt;Moo&lt;/a&gt; is a lighter weight version, minus with meta-object protocol, but supporting nearly all of Moose's other features. It loads faster, sometimes runs faster, and has fewer dependencies. (And most of the dependencies it does have are just modules which used to be part of Moo but were split out into separate distributions.)&lt;/p&gt;

&lt;p&gt;But what if you could have fast Moose-like object-oriented code without the dependencies?&lt;/p&gt;

&lt;p&gt;In 2013, Michael Schwern started work on &lt;a href="https://metacpan.org/pod/Mite"&gt;Mite&lt;/a&gt; to do just that. It was abandoned in 2014, but I've taken it over and expanded the feature set to roughly equivalent to Moo.&lt;/p&gt;

&lt;p&gt;Mite is an object-oriented programming &lt;em&gt;compiler&lt;/em&gt; for Perl. It allows you to write familiar Moose-like object-oriented code, then compile that into plain Perl with zero non-core dependencies. Your compiled code does not even have a dependency on Mite itself!&lt;/p&gt;

&lt;h2&gt;
  
  
  How do I use Mite?
&lt;/h2&gt;

&lt;p&gt;Here's how you could start a project with Mite or port an existing Moose/Moo project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nb"&gt;cd &lt;/span&gt;Your-Project/
   mite init &lt;span class="s1"&gt;'Your::Project'&lt;/span&gt;
   mite compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you've run those commands, Mite will create a module called &lt;code&gt;Your::Project::Mite&lt;/code&gt;. This module is your project's own little gateway to Mite. This module is called the shim.&lt;/p&gt;

&lt;p&gt;Now let's write a test case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# t/unit/Your-Project-Widget.t&lt;/span&gt;
   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test2::&lt;/span&gt;&lt;span class="nv"&gt;V0&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your::Project::Widget&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;

   &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Quux&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nv"&gt;isa_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$CLASS&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nv"&gt;subtest&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method `name`&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Quux&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;dies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XYZ&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nv"&gt;isnt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;undef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;read-only attribute&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nv"&gt;subtest&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method `upper_case_name`&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;can_ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upper_case_name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;upper_case_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;QUUX&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;expected value&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nv"&gt;done_testing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a class to implement the functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="c1"&gt;# lib/Your/Project/Widget.pm&lt;/span&gt;
   &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Mite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;is&lt;/span&gt;     &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
      &lt;span class="s"&gt;isa&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;upper_case_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;uc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;mite compile&lt;/code&gt; again then run the test case. It should pass.&lt;/p&gt;

&lt;h2&gt;
  
  
  How does Mite work?
&lt;/h2&gt;

&lt;p&gt;It's important to understand what Mite is doing behind the scenes.&lt;/p&gt;

&lt;p&gt;When you ran &lt;code&gt;mite compile&lt;/code&gt;, Mite created a file called &lt;em&gt;lib/Your/Project/Widget.pm.mite.pm&lt;/em&gt;. (Yes, a triple file extension!) This file contains your class's &lt;code&gt;new&lt;/code&gt; method. It contains the code for the accessor.&lt;/p&gt;

&lt;p&gt;That file does not contain the code for &lt;code&gt;upper_case_name&lt;/code&gt; which is still in the original &lt;em&gt;lib/Your/Project/Widget.pm&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When Perl loads &lt;code&gt;Your::Project::Widget&lt;/code&gt;, it will see this line and load the shim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Mite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shim just loads &lt;em&gt;lib/Your/Project/Widget.pm.mite.pm&lt;/em&gt;, exports a &lt;code&gt;has&lt;/code&gt; function that does (almost) nothing, and then gets out of the way. This gives Perl a working class.&lt;/p&gt;

&lt;h2&gt;
  
  
  What features does Mite support?
&lt;/h2&gt;

&lt;p&gt;Most of what Moo supports is supported by Mite. In particular:&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;extends @superclasses&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Mite classes within your project can inherit from other Mite classes within your project, but not from non-Mite classes, and not from Mite classes from a different project.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;with @roles&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;As of version 0.002000, Mite also supports roles. If you want your package to be a role instead of a class, just do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;   &lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Nameable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Your::Project::&lt;/span&gt;&lt;span class="nv"&gt;Mite&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;role&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;is&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ro&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
      &lt;span class="s"&gt;isa&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with &lt;code&gt;extends&lt;/code&gt;, a limitation is that you can only use Mite roles from within your own project, not non-Mite roles, nor Mite roles from a different project.&lt;/p&gt;

&lt;p&gt;(A future development might add support for &lt;a href="https://metacpan.org/pod/Role%3A%3ATiny"&gt;Role::Tiny&lt;/a&gt; roles though.)&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;has $attrname =&amp;gt; %spec&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Attributes are obviously one of the main features people look for in a Perl object-oriented programming framework and Mite supports nearly all of Moose's features for defining attributes.&lt;/p&gt;

&lt;p&gt;This includes &lt;code&gt;is =&amp;gt; 'ro'&lt;/code&gt;, &lt;code&gt;is =&amp;gt; 'rw'&lt;/code&gt;, &lt;code&gt;is =&amp;gt; 'bare'&lt;/code&gt;, &lt;code&gt;is =&amp;gt; 'rwp'&lt;/code&gt; (like Moo), and &lt;code&gt;is =&amp;gt; 'lazy'&lt;/code&gt; (like Moo); &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;init_arg&lt;/code&gt; for attribute initialization; &lt;code&gt;reader&lt;/code&gt;, &lt;code&gt;writer&lt;/code&gt;, &lt;code&gt;accessor&lt;/code&gt;, &lt;code&gt;predicate&lt;/code&gt;, &lt;code&gt;clearer&lt;/code&gt;, and &lt;code&gt;trigger&lt;/code&gt;; &lt;code&gt;lazy&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, and &lt;code&gt;builder&lt;/code&gt;; &lt;code&gt;weak_ref&lt;/code&gt;; &lt;code&gt;isa&lt;/code&gt; and &lt;code&gt;coerce&lt;/code&gt; for type constraints, including support for any type constraints in &lt;a href="https://metacpan.org/pod/Types%3A%3AStandard"&gt;Types::Standard&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Types%3A%3ACommon%3A%3ANumeric"&gt;Types::Common::Numeric&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Types%3A%3ACommon%3A%3AString"&gt;Types::Common::String&lt;/a&gt;; and delegation using &lt;code&gt;handles&lt;/code&gt;. It also supports an option which Moose doesn't provide: &lt;code&gt;alias&lt;/code&gt; for aliasing attributes.&lt;/p&gt;

&lt;p&gt;Mite builds in the functionality of &lt;a href="https://metacpan.org/pod/MooseX%3A%3AStrictConstructor"&gt;MooseX::StrictConstructor&lt;/a&gt;, dying with an appropriate error message if you pass your class's constructor any parameters it wasn't expecting.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;BUILDARGS&lt;/code&gt;, &lt;code&gt;BUILD&lt;/code&gt;, and &lt;code&gt;DEMOLISH&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Methods you can define to control the life cycle of objects.&lt;/p&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;before $method =&amp;gt; sub { ... }&lt;/code&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;after $method =&amp;gt; sub { ... }&lt;/code&gt;
&lt;/h3&gt;

&lt;h3&gt;
  
  
  &lt;code&gt;around $method =&amp;gt; sub { ... }&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Mite classes and roles can define method modifiers.&lt;/p&gt;

&lt;p&gt;As long as your needs aren't super-sophisticated (introspection using the MOP, runtime application of roles, etc), Mite probably has the features you need for even medium to large projects.&lt;/p&gt;

&lt;p&gt;Mite itself uses Mite!&lt;/p&gt;

&lt;h2&gt;
  
  
  Be honest, what are the drawbacks?
&lt;/h2&gt;

&lt;p&gt;This code still doesn't have a lot of testing "in the wild". Moose and Moo have proven track records.&lt;/p&gt;

&lt;p&gt;You need to remember to &lt;code&gt;mite compile&lt;/code&gt; your code after making changes before running your test suite or packaging up a release. This can be annoyingly easy to forget to do. (Though Mite does also include extensions for ExtUtils::MakeMaker and Module::Build to help integrate that into your workflow.)&lt;/p&gt;

&lt;p&gt;The Mite compiler's scope of only looking at the files within your own project limits the ability to create roles which can be composed by third-parties, or classes which can easily be extended by third-parties. If you want that, Moose or Moo are a better option.&lt;/p&gt;

&lt;h2&gt;
  
  
  Okay, I'm interested
&lt;/h2&gt;

&lt;p&gt;If you've read this and you're thinking about porting a Moose or Moo project to Mite, feel free to @-mention &lt;a href="https://github.com/tobyink"&gt;tobyink on Github&lt;/a&gt; in issue tickets, pull requests, etc if you need any help.&lt;/p&gt;

&lt;p&gt;If there are features which you think Mite is missing which you'd need to port your project to Mite, file bugs with the &lt;a href="https://github.com/tobyink/p5-mite/issues"&gt;Mite issue tracker&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Toby Inkster</name>
    </author>
    <id>https://dev.to/tobyink/mite-an-oo-compiler-for-perl-b70</id>
    <published>2022-07-02T17:38:11Z</published>
    <updated>2022-07-02T17:38:11Z</updated>
    <category term="perl"/>
    <category term="oop"/>
    <category term="programming"/>
    <category term="tooling"/>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Jun 2022</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2022/07/01/list-of-new-cpan-distributions-jun-2022/" type="text/html"/>
    <content type="html">&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;dist&lt;/th&gt;
&lt;th&gt;author&lt;/th&gt;
&lt;th&gt;first_version&lt;/th&gt;
&lt;th&gt;latest_version&lt;/th&gt;
&lt;th&gt;abstract&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/API-Eulerian-API-Eulerian"&gt;API-Eulerian-API-Eulerian&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MJONDET"&gt;MJONDET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.3&lt;/td&gt;
&lt;td&gt;v0.3&lt;/td&gt;
&lt;td&gt;Sample EDW script for querying through REST and get a CSV file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Acme-Mitey-Cards"&gt;Acme-Mitey-Cards&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;demo of Mite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-Brotli"&gt;Alien-Brotli&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRWO"&gt;RRWO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.2.0&lt;/td&gt;
&lt;td&gt;Download and install Brotli&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Alien-CFITSIO"&gt;Alien-CFITSIO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v4.1.0.1&lt;/td&gt;
&lt;td&gt;v4.1.0.5&lt;/td&gt;
&lt;td&gt;Build and Install the CFITSIO library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Amon2-Plugin-Web-CpanelJSON"&gt;Amon2-Plugin-Web-CpanelJSON&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Cpanel::JSON::XS plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-optex-pingu"&gt;App-optex-pingu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/UTASHIRO"&gt;UTASHIRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;optex make-everything-pingu filter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/App-orgadb"&gt;App-orgadb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;An opinionated Org addressbook tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-Hash-Unique"&gt;Bencher-Scenario-Hash-Unique&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Benchmark Hash::Unique&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-List-Util"&gt;Bencher-Scenario-List-Util&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.051&lt;/td&gt;
&lt;td&gt;0.051&lt;/td&gt;
&lt;td&gt;Benchmark List::Util (XS) vs PP implementation(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Bencher-Scenario-Module-Path-More"&gt;Bencher-Scenario-Module-Path-More&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;Benchmark Module::Path::More vs Module::Path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/CGI-Carp-WarningsToBrowser"&gt;CGI-Carp-WarningsToBrowser&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEENEWCUM"&gt;DEENEWCUM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;A version of CGI::Carp&amp;#039;s warningsToBrowser() that displays the warnings loudly and boldly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-CSRFI"&gt;Dancer2-Plugin-CSRFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.03&lt;/td&gt;
&lt;td&gt;Dancer2 CSRF protection plugin.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Plugin-DoFile"&gt;Dancer2-Plugin-DoFile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;A file based MVC style plugin for Dancer2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Dancer2-Template-Obj2HTML"&gt;Dancer2-Template-Obj2HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;Temnplating system based on HTML::Obj2HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Data-TableData-Pick"&gt;Data-TableData-Pick&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;Pick randomly one or more table rows, with some options&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Excel-Writer-XLSX-CDF"&gt;Excel-Writer-XLSX-CDF&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.04&lt;/td&gt;
&lt;td&gt;Generates Excel Document with Continuous Distribution Function Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Factory-Sub"&gt;Factory-Sub&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Generate a factory of subs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Config"&gt;Firewall-Config&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.005&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-FireFlow"&gt;Firewall-FireFlow&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.007&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Firewall-Policy"&gt;Firewall-Policy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/FirewallController"&gt;FirewallController&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;turns baubles into trinkets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Git-Nuggit"&gt;Git-Nuggit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EDELL"&gt;EDELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Git Toolkit for Submodule-Aware workflows&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTML-Obj2HTML"&gt;HTML-Obj2HTML&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.1&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;Create HTML from a arrays and hashes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/HTTP-Promise"&gt;HTTP-Promise&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.1.0&lt;/td&gt;
&lt;td&gt;v0.1.2&lt;/td&gt;
&lt;td&gt;Asynchronous HTTP Request and Promise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Image-PHash"&gt;Image-PHash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DKECHAG"&gt;DKECHAG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0_1&lt;/td&gt;
&lt;td&gt;0.1_1&lt;/td&gt;
&lt;td&gt;Fast perceptual image hashing (DCT-based pHash)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Imager-File-APNG"&gt;Imager-File-APNG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONYC"&gt;TONYC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;APNG image file support for Imager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/IngyPrelude"&gt;IngyPrelude&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INGY"&gt;INGY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;0.0.1&lt;/td&gt;
&lt;td&gt;Ingy d&amp;Atilde;&amp;para;t Net&amp;#039;s Standard Prelude&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Language-Eforth"&gt;Language-Eforth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;a tiny embedded Forth interpreter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MarpaX-G4"&gt;MarpaX-G4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZUBEAX"&gt;ZUBEAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;v1.0.2&lt;/td&gt;
&lt;td&gt;Release 0.9 of MarpaX::G4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Mojo-Run3"&gt;Mojo-Run3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Run a subprocess and read/write to it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Keyword-Factory"&gt;MooX-Keyword-Factory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Moo attribute factories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooX-Keyword-Field"&gt;MooX-Keyword-Field&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;field attributes that cannot be set via the constructor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MooseX-LocalAttribute"&gt;MooseX-LocalAttribute&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;local-ize attributes on Moose-ish objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/MyConf"&gt;MyConf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CYNOVG"&gt;CYNOVG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;package for working with secrets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PDF-Data"&gt;PDF-Data&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEVEN"&gt;DEVEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;v1.0.0&lt;/td&gt;
&lt;td&gt;Manipulate PDF files and objects as data structures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/PDL-Opt-Simplex-Simple"&gt;PDL-Opt-Simplex-Simple&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;1.4&lt;/td&gt;
&lt;td&gt;A simplex optimizer for the rest of us (who may not know PDL).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Perl-Critic-Policy-ValuesAndExpressions-ProhibitFiletest_rwxRWX"&gt;Perl-Critic-Policy-ValuesAndExpressions-ProhibitFiletest_rwxRWX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WYANT"&gt;WYANT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.000_901&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Do not pass capture variables as arguments.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Plack-Middleware-CSP"&gt;Plack-Middleware-CSP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ASHLEY"&gt;ASHLEY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Apply HTTP::CSPHeaders to your psgi application.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/RT-Extension-PagerDuty"&gt;RT-Extension-PagerDuty&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;RT-Extension-PagerDuty Extension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Regex"&gt;SPVM-Regex&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.05&lt;/td&gt;
&lt;td&gt;Regular expression&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Resource-Re2-V2022_06_01"&gt;SPVM-Resource-Re2-V2022_06_01&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;Resource::Re2::V2022_06_01 is a resource of RE2.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Resource-Zlib"&gt;SPVM-Resource-Zlib&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;zlib Resource&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Resource-Zlib-V1_2_11"&gt;SPVM-Resource-Zlib-V1_2_11&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;zlib v1.2.11 Resource&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Time-Local"&gt;SPVM-Time-Local&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;Time::Local manipulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/SPVM-Unicode"&gt;SPVM-Unicode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.03&lt;/td&gt;
&lt;td&gt;SPVM Unicode Utilities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Syntax-Operator-In"&gt;Syntax-Operator-In&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;placeholder module for infix element-of-list meta-operator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Template-Plugin-TallyMarks"&gt;Template-Plugin-TallyMarks&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CHOROBA"&gt;CHOROBA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Convert numbers to tally marks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Test-Instruction"&gt;Test-Instruction&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;A test framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/Types-JsonCoercions"&gt;Types-JsonCoercions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;coercions to and from JSON&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/VM-Libvirt-CloneHelper"&gt;VM-Libvirt-CloneHelper&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;v0.0.1&lt;/td&gt;
&lt;td&gt;Create a bunch of cloned VMs in via libvirt.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WWW-SnipeIT"&gt;WWW-SnipeIT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SCOTTH"&gt;SCOTTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.02&lt;/td&gt;
&lt;td&gt;API Access to Snipe-IT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebService-Fastly"&gt;WebService-Fastly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FASTLY"&gt;FASTLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;td&gt;2.01&lt;/td&gt;
&lt;td&gt;an interface to most facets of the [Fastly API](&lt;a href="https://developer.fastly.com/reference/api" rel="nofollow"&gt;https://developer.fastly.com/reference/api&lt;/a&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/WebService-LastFM-TrackInfo"&gt;WebService-LastFM-TrackInfo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GENE"&gt;GENE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.0100&lt;/td&gt;
&lt;td&gt;0.0205&lt;/td&gt;
&lt;td&gt;Access to the track.getInfo slice of the LastFM API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/YA-CLI"&gt;YA-CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WATERKIP"&gt;WATERKIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;Do CLI things&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/libreplace"&gt;libreplace&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ECARROLL"&gt;ECARROLL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;0.01&lt;/td&gt;
&lt;td&gt;Clobber your lib with PERL5LIB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/release/plack-middleware-signposting"&gt;plack-middleware-signposting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VPEIL"&gt;VPEIL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;0.06&lt;/td&gt;
&lt;td&gt;a base class for Plack implementations of the Signposting protocol&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Stats&lt;/h3&gt;
&lt;p&gt;Number of new CPAN distributions this period: &lt;b&gt;56&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Number of authors releasing new CPAN distributions this period: &lt;b&gt;38&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Authors by number of new CPAN distributions this period: &lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;No&lt;/th&gt;
&lt;th&gt;Author&lt;/th&gt;
&lt;th&gt;Distributions&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KIMOTO"&gt;KIMOTO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERLANCAR"&gt;PERLANCAR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/LNATION"&gt;LNATION&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CARELINE"&gt;CARELINE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PERO"&gt;PERO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TOBYINK"&gt;TOBYINK&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/BPS"&gt;BPS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DJERIUS"&gt;DJERIUS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/GENE"&gt;GENE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/FASTLY"&gt;FASTLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEENEWCUM"&gt;DEENEWCUM&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CHOROBA"&gt;CHOROBA&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MJONDET"&gt;MJONDET&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SIMBABQUE"&gt;SIMBABQUE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/SCOTTH"&gt;SCOTTH&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JHTHORSEN"&gt;JHTHORSEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ALEXPAN"&gt;ALEXPAN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VPEIL"&gt;VPEIL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/INGY"&gt;INGY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ASHLEY"&gt;ASHLEY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ZUBEAX"&gt;ZUBEAX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/RRWO"&gt;RRWO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/PEVANS"&gt;PEVANS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/ECARROLL"&gt;ECARROLL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EWHEELER"&gt;EWHEELER&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/UTASHIRO"&gt;UTASHIRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WYANT"&gt;WYANT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/KFLY"&gt;KFLY&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JMATES"&gt;JMATES&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DEVEN"&gt;DEVEN&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/VVELOX"&gt;VVELOX&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/DKECHAG"&gt;DKECHAG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/JDEGUEST"&gt;JDEGUEST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/MRDVT"&gt;MRDVT&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/CYNOVG"&gt;CYNOVG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/TONYC"&gt;TONYC&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/WATERKIP"&gt;WATERKIP&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;td&gt;&lt;a href="https://metacpan.org/author/EDELL"&gt;EDELL&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author first_version latest_version abstract API-Eulerian-API-Eulerian MJONDET v0.3 v0.3 Sample EDW script for querying through REST and get a CSV file Acme-Mitey-Cards TOBYINK 0.001 0.005 demo of Mite Alien-Brotli RRWO v0.1.0 v0.2.0 Download and install Brotli Alien-CFITSIO DJERIUS v4.1.0.1 v4.1.0.5 Build and Install the CFITSIO library Amon2-Plugin-Web-CpanelJSON KFLY 0.01 0.01 Cpanel::JSON::XS plugin App-optex-pingu UTASHIRO 0.01 … <a href="https://perlancar.wordpress.com/2022/07/01/list-of-new-cpan-distributions-jun-2022/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Jun 2022</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1992</id>
    <published>2022-07-01T00:21:46Z</published>
    <updated>2022-07-01T00:21:46Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>cpanfile – Teil 1</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2022-06-29-cpanfile-a-teil-1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ein *cpanfile* ist eine Datei, die Abhängigkeiten von Anwendungen und Modulen beschreibt. Diese Dateien sind in der Perl-Welt nichts neues (sie gibt es seit über 8 Jahren) und sie sind eine sehr gute Möglichkeit, die Installation von Abhängigkeiten zu vereinfachen.</div>
    </content>
    <id>https://blog.perl-academy.de/2022-06-29-cpanfile-a-teil-1</id>
    <published>2022-06-29T10:00:00Z</published>
    <updated>2022-06-29T10:00:00Z</updated>
  </entry>
  <entry>
    <title>#570 - CPAN Weekly</title>
    <link rel="alternate" href="https://perlweekly.com/archive/570.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there&lt;/p&gt;
&lt;p&gt;I noticed a fresh air and renewed energy among &lt;strong&gt;Perl Hackers&lt;/strong&gt; ever since the latest release of &lt;strong&gt;Perl v5.36&lt;/strong&gt;. I can only imagine what would be the reaction when &lt;strong&gt;Corinna&lt;/strong&gt; becomes part of core Perl. It would definitely help &lt;strong&gt;Perl&lt;/strong&gt; regain its glory, in my humble opinion.&lt;/p&gt;
&lt;p&gt;As some of you are aware that I have been doing daily &lt;strong&gt;Perl&lt;/strong&gt; feature series for sometimes now, I have seen so much interest in the new/improved features brought in &lt;strong&gt;Perl v5.36&lt;/strong&gt;. All credit goes to the hard work and dedication of the team responsible for the release. I have got all the daily feature posts saved in the &lt;a href="https://github.com/manwar/perl-cool-snippets"&gt;GitHub repository&lt;/a&gt; for anyone to checkout. I am pleasantly surprised to see the repository quicky getting to the &lt;strong&gt;Top 3&lt;/strong&gt; popular repostories on my &lt;a href="https://github.com/manwar"&gt;GotHub dashboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you remember &lt;a href="http://cpan-weekly.org"&gt;CPAN Weekly&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;It was created and managed by &lt;strong&gt;Neil Bowers&lt;/strong&gt;. I still remember the &lt;a href="http://blogs.perl.org/users/neilb/2016/02/cpan-weekly-one-module-per-week-in-your-inbox.html"&gt;public announcement&lt;/a&gt;. I really enjoyed the weekly email. I still have it saved in my email inbox. It is priceless treasure that I don't want to loose. So I decided to drop a line on my &lt;a href="https://twitter.com/cpan_author"&gt;twitter handle&lt;/a&gt;, asking shouldn't it get a &lt;strong&gt;reboot&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;I got plenty of support for the reboot. Even &lt;strong&gt;Neil Bowers&lt;/strong&gt; responded with a warning, &lt;strong&gt;"resist the temptation of do it myself, instead encourage others to take it on"&lt;/strong&gt;. Who knows my workload better than me. I knew if I wanted to do this just by myself then it would be hard to justify the legacy started by original creator, &lt;strong&gt;Neil Bowers&lt;/strong&gt;. I was lucky to find a helping hand in no time. She is also member of &lt;a href="https://theweeklychallenge.org"&gt;Team PWC&lt;/a&gt;. I have seen her growth ever since she joined the team. I am lucky to have her in the team. She responded with &lt;strong&gt;2 emails&lt;/strong&gt; so far detailing her thought process. It is still in early discussion stage, I will share more details when we have initial draft ready. We are not in a rush, to be honest. The more help I get the better it is going to be.&lt;/p&gt;
&lt;p&gt;One more thing, I would like to talk about recently concluded, &lt;a href="https://perlconference.us/tprc-2022-hou/schedule"&gt;The Perl and Raku Conference in Houston&lt;/a&gt;. I really wanted to attend in person and meet everyone. I missed the live streaming of the talks. Never mind, we now have all the talks recorded. Please go and pick your favourite one from the &lt;a href="https://www.youtube.com/playlist?list=PLA9_Hq3zhoFyOpb-U3DMU7OT93dPUdtpE"&gt;YouTube Playlist&lt;/a&gt;. I would like to mention couple, I have seen so far from the list that I loved it and they are &lt;a href="https://www.youtube.com/watch?v=yH5IyYyvWHU"&gt;Taming the Unicode Beast&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=5lSdBSCkFGs"&gt;Corinna Status, 2022&lt;/a&gt;. When I have spare time, I will definitely go through each one by one.&lt;/p&gt;
&lt;p&gt;I am not sure about others but I miss event reports by the attendees of &lt;strong&gt;Perl&lt;/strong&gt; conference. I remember, in good old days, we would get plenty of such event reports. It used to give nice perspective from the attendee point of view. I wish and hope, we get some this time around. Talking about &lt;stron&gt;Perl&lt;/strong&gt; conference, I am sad that &lt;strong&gt;London Perl Workshop&lt;/strong&gt; is not happening this year too. I am hoping the year &lt;strong&gt;2023&lt;/strong&gt; can be the lucky year for &lt;strong&gt;LPW&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please do enjoy the rest of the newsletter.&lt;/p&gt;</content>
    <id>https://perlweekly.com/archive/570.html</id>
    <published>2022-06-27T10:00:00Z</published>
    <updated>2022-06-27T10:00:00Z</updated>
    <category term="editorial"/>
  </entry>
  <entry>
  <title>Dancer2: Logging</title>
  <summary type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></summary>
  <updated>2022-06-27T07:40:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/dancer2-logging"/>  <id>https://perlmaven.com/dancer2-logging</id>
  <content type="html"><![CDATA[<p>
Part of the Dancer2 video course available both to <a href="/pro">Pro</a> subscribers and attendees of the <a href="https://leanpub.com/c/dancer">Perl Dancer course</a> on Leanpub.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
</feed>
