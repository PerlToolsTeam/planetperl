<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-01-10T23:10:47Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry>
    <title>Perl Weekly Challenge 094</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/10#pwc094" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given an array of strings &lt;span class="citation" data-cites="S"&gt;@S&lt;/span&gt;. Write a script to group Anagrams together in any random order.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
my %letter_factor = (
    e =&gt; 2,
    t =&gt; 3,
    a =&gt; 5,
    o =&gt; 7,
    i =&gt; 11,
    n =&gt; 13,
    s =&gt; 17,
    h =&gt; 19,
    r =&gt; 23,
    d =&gt; 29,
    l =&gt; 31,
    c =&gt; 37,
    u =&gt; 41,
    m =&gt; 43,
    w =&gt; 47,
    f =&gt; 53,
    g =&gt; 59,
    y =&gt; 61,
    p =&gt; 67,
    b =&gt; 71,
    v =&gt; 73,
    k =&gt; 79,
    j =&gt; 83,
    x =&gt; 89,
    q =&gt; 97,
    z =&gt; 101  
);  

MAIN:{
    my $word;
    my %anagrams;
    while($word = &lt;DATA&gt;){
        chomp($word); 
        my @letters = split(//, $word);
        my $word_product = 1;
        map {$word_product *= $_} map{$letter_factor{$_}} @letters;
        push @{$anagrams{$word_product}} , $word if $anagrams{$word_product};  
        $anagrams{$word_product} = [$word] unless $anagrams{$word_product};  
    }  
    close(DATA);
    print "Organized anagrams:\n";
    for my $key (keys %anagrams){
        print "  "; 
        for my $word (@{$anagrams{$key}}){
            print "$word ";
        }
        print "\n";
    }   
}   

__DATA__
opt
bat
saw
tab
pot
top
was
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl ch-1.pl
Organized anagrams:
  saw was 
  bat tab 
  opt pot top 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am using the same mathematical trick that I have used for anagrams in the past, starting with &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/04/26"&gt;Challenge 005&lt;/a&gt;. The By the &lt;strong&gt;Fundamental Theorem of Arithmetic&lt;/strong&gt; &lt;em&gt;every integer greater than 1 is either a prime number itself or can be represented as the unique product of prime numbers.&lt;/em&gt; We use that to our advantage by having a prime number associated with each letter. Each word is a product of these numbers and words with the same product are anagrams.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this way we build a hash keyed by word product whose values are list of anagrams. After constructing this data structure we then just print out the contents of all the lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The choice of letters and prime numbers is based on the &lt;em&gt;Lewand Ordering&lt;/em&gt; and it isn’t at all necessary but it does little harm so I left it in anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree. Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally, print the linked list object.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use Graph;
use LinkedList;

sub build_linked_list{ 
    my($tree) = @_;
    my $linked_list = new LinkedList(); 
    my @paths = build_paths($tree);
    my $root = $paths[0]-&gt;[0]; 
    my $next = $linked_list-&gt;insert($root, undef); 
    for my $path (@paths){
        for my $node (@{$path}){
            $next = $linked_list-&gt;insert($node, $next) if !$linked_list-&gt;in_list($node);    
        }
    } 
    return $linked_list;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         unshift @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6, 7);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(2, 5);
    $Tree-&gt;add_edge(5, 6);
    $Tree-&gt;add_edge(5, 7);
    print build_linked_list($Tree)-&gt;stringify();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The LinkedList module used is of my own making. I am using a somewhat modified version of the LinkedList module I made for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt;. Next is what that code looks like.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
package LinkedList{
    use boolean;
    use Tie::RefHash;
    use Class::Struct;
    package Node{
        use Class::Struct;

        struct(
            data =&gt; q/$/,
            next =&gt; q/Node/
        );
    }

    struct(
        head =&gt; q/Node/
    );

    sub stringify{
        my($self) = @_;
        my $s = "";
        my $next = $self-&gt;head()-&gt;next();
        while($next &amp;&amp; $next-&gt;next()){
            $s .= " -&gt; " if $s; 
            $s = $s . $next-&gt;data();
            $next = $next-&gt;next();
        }
        $s = $s . " -&gt; " . $next-&gt;data() if $next-&gt;data();
        $s .= "\n"; 
        return $s;
    }

    sub insert{
        my($self, $data, $previous) = @_;
        if(!$previous){
            $previous=new Node(data =&gt; undef, next =&gt; undef);
            $self-&gt;head($previous);
        }
        my $next=new Node(data =&gt; $data, next =&gt; undef);
        $previous-&gt;next($next);
        return $next;
    }

    sub in_list{
        my($self, $k) = @_;
        my $previous = $self-&gt;head();
        my $next = $self-&gt;head()-&gt;next();
        tie my %node_value, "Tie::RefHash";
        while($next){
            return true if($next-&gt;data() == $k); 
            $next = $next-&gt;next(); 
        }
        return false;
    }
    true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl -I. ch-2.pl
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Depth First Search (DFS) code for building the paths is the same as &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03"&gt;last week&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DFS returns all the paths they are simply inserted into the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My LinkedList module is one of my favorite uses of &lt;a href="https://perldoc.perl.org/Class/Struct.html"&gt;Class::Struct&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My write up for &lt;a href="https://adamcrussell.livejournal.com/16202.html"&gt;Challenge 059&lt;/a&gt; has some more notes on this LinkedList.pm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Letter_frequency"&gt;Lewand Ordering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/FundamentalTheoremofArithmetic.html"&gt;Fundamental Theorem of Arithmetic&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc094</id>
    <published>2021-01-10T11:29:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>CY's Take on PWC#094</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2021/01/cys-take-on-pwc094.html"/>
    <id>tag:blogs.perl.org,2021:/users/c_y_fung//3481.10041</id>

    <published>2021-01-09T13:32:56Z</published>
    <updated>2021-01-10T06:33:06Z</updated>

    <summary>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email). Do tell me if I am wrong or you strongly oppose my statements!...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i></p>

<p><strong>Do tell me if I am wrong or you strongly oppose my statements! </strong></p>


<p>Task 1 of #094 looks like a sibling of <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-092/#TASK1">Task 1 of #092</a> (which Perl codes <a href="https://perlweeklychallenge.org/blog/review-challenge-092/">are recently reviewed</a>, my submitted code <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-092/cheok-yin-fung/perl/ch-1.pl">here</a>) and Task 2 of #094 looks like a sibling of <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-093/#TASK2">Task 2 of #093</a> (where I use the array representation of binary tree, <a href="https://github.com/manwar/perlweeklychallenge-club/blob/master/challenge-093/cheok-yin-fung/perl/ch-2.pl">code here</a>).</p>



<h4>Task 1: Group Anagrams</h4>
<p>Now I <a href="http://blogs.perl.org/users/c_y_fung/2021/01/from-a-reflection-on-the-weekly-challenge-092-task-1.html">was thinking of CJK characters</a>. When comparing terms, put <code>-CA</code>; and inside scripts, put <code>use utf8; use open ':std', ':encoding(UTF-8)';</code>.</p>

<p>And my approach is similar to that of Week #092. On #092, a <code>sub learn_pattern</code> produces a hash from the first parameter; and <code>sub verify_pattern</code> for the second parameter returns true or false. Now, this time we face a bulk of terms, therefore we have to <code>&amp;collect_alphabets</code>: [1]</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">%hash_num</font>;<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">collect_alphabets</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@words</font>&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@alphabets</font>&nbsp;=&nbsp;<font color="#007f00">split</font>&nbsp;<font color="#ffa500">//</font>,&nbsp;<font color="#007f00">join</font>(<font color="#ffa500">""</font>&nbsp;,&nbsp;<font color="#0000ff">@words</font>);&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;=&nbsp;0;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">@alphabets</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">exists</font>&nbsp;<font color="#0000ff">$hash_num</font>{<font color="#0000ff"><b>$_</b></font>})&nbsp;{&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$hash_num</font>{<font color="#0000ff"><b>$_</b></font>}&nbsp;=&nbsp;<font color="#0000ff">$i</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
</tt></div>

<p>Afterwards a function for <tt>learn</tt>ing again</p>

<div><tt><b>sub&nbsp;</b><font color="#007f00">learn_atoms</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$word</font>&nbsp;=&nbsp;<font color="#0000ff"><b>$_</b></font>[0];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@alphabets</font>&nbsp;=&nbsp;<font color="#007f00">split</font>&nbsp;<font color="#ffa500">//</font>,&nbsp;<font color="#0000ff">$word</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@coord</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff">$hash_num</font>{<font color="#0000ff"><b>$_</b></font>}}&nbsp;<font color="#0000ff">@alphabets</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@coord</font>&nbsp;=&nbsp;<font color="#007f00">sort</font>&nbsp;<font color="#0000ff">@coord</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#007f00">join</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">,</font><font color="#ffa500">"</font>,&nbsp;<font color="#0000ff">@coord</font>;<br />
}<br />
</tt></div>

<p>And I wrote a <tt>&amp;compare_two_words</tt> without second thought. But it is not included in the main dish.</p>

<p>I group all the terms by an array of arrays and make use of a hash (<tt>%hash_compounds</tt>):</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">%hash_compounds</font>;<br />
<b>my</b>&nbsp;<font color="#0000ff">@arr</font>;<br />
<b>my</b>&nbsp;<font color="#0000ff">$k</font>&nbsp;=&nbsp;0;<br />
<br />
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$w</font>&nbsp;(<font color="#0000ff"><b>@ARGV</b></font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$l</font>&nbsp;=&nbsp;learn_atoms(<font color="#0000ff">$w</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">exists</font>&nbsp;<font color="#0000ff">$hash_compounds</font>{<font color="#0000ff">$l</font>})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$hash_compounds</font>{<font color="#0000ff">$l</font>}&nbsp;=&nbsp;<font color="#0000ff">$k</font>;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;[<font color="#0000ff">$w</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$k</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$arr</font>[&nbsp;<font color="#0000ff">$hash_compounds</font>{<font color="#0000ff">$l</font>}&nbsp;]},&nbsp;<font color="#0000ff">$w</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
</tt></div>

<p><br /></p><p>The remaining is printing result:</p>

<div><tt>
<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#0000ff">$k</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">(\"</font><font color="#ffa500">"</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#007f00">join</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">\",\"</font><font color="#ffa500">"</font>,&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$arr</font>[<font color="#0000ff">$j</font>]};<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">\")</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;&nbsp;<br />
}<br />
</tt></div>

<p><br /></p><p>Here are my manual tests:</p>

<pre>$ perl ch-1.pl "opt" "bat" "saw" "tab" "pot" "top" "was"
("opt","pot","top")
("bat","tab")
("saw","was")

$ perl -CA ch-1.pl 屢敗屢戰 東南西北 屢戰屢敗 陳年 屢屢戰敗 年陳 過錯 錯過 東西南北 真善美 美善真 一二三 三二一 真善美聖 真 善 美
("屢敗屢戰","屢戰屢敗","屢屢戰敗")
("東南西北","東西南北")
("陳年","年陳")
("過錯","錯過")
("真善美","美善真")
("一二三","三二一")
("真善美聖")
("真")
("善")
("美")

$ perl ch-1.pl "x"
("x")
</pre>

<p>For the Unicode part, the reference: <a href="https://stackoverflow.com/questions/15210532/use-of-use-utf8-gives-me-wide-character-in-print">a stackoverflow post</a> and <a href="https://www.reddit.com/r/perl/comments/koahhf/from_a_reflection_on_the_weekly_challenge_092/">a reddit post</a>. </p>


<h4>Task 2: Binary Tree to Linked List</h4>

<blockquote>Write a script to represent the given binary tree as an <u>object</u> and flatten it to a linked list <u>object</u>. </blockquote>

<p>Underlining is added by CY. Terms in programming can be obscure. I 
thought of object-oriented programming when I decided to start coding. I
 wrote two packages, one for linked lists, one for binary trees, in 
"traditional" Perl object-oriented system. I got "<tt>unblessed</tt>...". Then after a sleep, I tried Moose. The situation did not improve, Perl still gave out "<tt>unblessed</tt>..."
 messages. I accepted my capacity, and, looked at submitted solutions 
(an action I rarely do), no inspirations ‐ other submitters hadn't not 
touched on OO for this task. Then, unlike <b>the previously hot celebrity in politics</b>, I soon <b>Accepted the Defeat</b> ; wrote a version of script with OO linked list and array representation of binary tree; and, <b>tweeted</b>.</p>

<p>We know, tweets can be powerful! Our challenge organizer, Mohammand ,
replied my tweet with the word "please" and encouraged me not to give 
up. Initially I would like to reply with excuses. But some mysterious 
forces put me try harder. Although I have never written a full 
application by OOP (for any languages), I have heard of some OO terms. 
Suddenly the term "(multiple) inheritance" popped. Then I tried to write
 three packages, the third one specific for traversal. I used 
traditional Perl OO system (because I don't know how to alter attribute 
values in Moose). Well, my script still met hurdles -  "<tt>Can't locate object method "nextnode" via package "BinaryTreeNode"</tt> ". </p>

<p>In the morning of Saturday, I have used two packages; put the 
traversal subroutine inside the binary tree package and let this package
 <tt>our @ISA = qw/ SLL::Node /;</tt>. Finally the script <b>Works</b> (and More Importantly, <b>I Can Tweet</b>)! </p>

<p>Here is the binary tree, very direct:</p>

<div><tt>
<b>package</b>&nbsp;BinaryTreeNode;<br />
<br />
<b>our</b>&nbsp;<font color="#0000ff">@ISA</font>&nbsp;=&nbsp;<font color="#ffa500">qw/</font>&nbsp;SLL::Node&nbsp;<font color="#ffa500">/</font>;<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">new</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$class</font>)&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">bless</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_value&nbsp;=&gt;&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">1</font>],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_leftchild&nbsp;=&gt;&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">2</font>],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_rightchild&nbsp;=&gt;&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">3</font>],<br />
&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<font color="#0000ff">$class</font>;<br />
}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">value</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_value}&nbsp;}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">leftchild</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_leftchild}&nbsp;}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">rightchild</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_rightchild}&nbsp;}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">create_tree_from_list</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$class</font>,<font color="#0000ff">@arr</font>)&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$lastleaf</font>&nbsp;=&nbsp;<font color="#0000ff">$#arr</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@tree</font>;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$k</font>&nbsp;(<font color="#007f00">reverse</font>&nbsp;0..<font color="#0000ff">$lastleaf</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>],&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>])&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>],&nbsp;<font color="#007f00">undef</font>)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;<font color="#007f00">undef</font>,&nbsp;\<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>])&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">1</font>])&nbsp;<font color="#ffa500">and</font>&nbsp;!<font color="#007f00">defined</font>(<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>*<font color="#00007f">2</font>+<font color="#00007f">2</font>]))&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$tree</font>[<font color="#0000ff">$k</font>]&nbsp;=&nbsp;BinaryTreeNode-&gt;new(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$k</font>],&nbsp;<font color="#007f00">undef</font>,&nbsp;<font color="#007f00">undef</font>)&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#0000ff">$class</font>,&nbsp;<font color="#0000ff">$tree</font>[0];&nbsp;&nbsp;<font color="#7f7f7f"><i>#return&nbsp;tree&nbsp;root</i></font><font color="#7f7f7f"><i><br />
</i></font>}<br />
</tt></div>


<p><br /></p><p>The linked list used differ from codes written three months ago (<a href="http://blogs.perl.org/users/c_y_fung/2020/09/oo-linked-lists-in-perl.html">the post here</a>) just by an additional one-line method ‐ </p>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">set_nextnode</font>&nbsp;{&nbsp;<font color="#0000ff"><b>$_</b></font>[0]<font color="#ffa500">-</font>&gt;{_nextnode}&nbsp;=&nbsp;<font color="#0000ff"><b>$_</b></font>[<font color="#00007f">1</font>];&nbsp;}<br />
</tt></div>

<br /><br /><br />

<p>For the traversal (inside the package <code>BinaryTreeNode</code>):</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">@tt_stack</font>&nbsp;=&nbsp;();<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">to_llnode</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#007f00">SLL::Node</font>-&gt;new(<font color="#007f00">shift</font>,&nbsp;<font color="#007f00">undef</font>);<br />
}<br />
<br />
<b>sub&nbsp;</b><font color="#007f00">tree_travel</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$self</font>&nbsp;=&nbsp;<font color="#007f00">shift</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$t</font>&nbsp;=&nbsp;<font color="#007f00">shift</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$baby</font>&nbsp;=&nbsp;to_llnode(<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">value</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$preserve</font>&nbsp;=&nbsp;\<font color="#0000ff">$baby</font>;<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#007f00">defined</font>&nbsp;<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">leftchild</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@tt_stack</font>,&nbsp;<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>&nbsp;<b>if</b>&nbsp;<font color="#007f00">defined</font>(<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>)&nbsp;;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$baby</font>-&gt;<font color="#0000ff">set_nextnode</font>(tree_travel(<font color="#0000ff">$self</font>,<font color="#0000ff">$</font>{<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">leftchild</font>}));<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>elsif</b>&nbsp;(<font color="#007f00">defined</font>&nbsp;<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$baby</font>-&gt;<font color="#0000ff">set_nextnode</font>(tree_travel(<font color="#0000ff">$self</font>,<font color="#0000ff">$</font>{<font color="#0000ff">$t</font>-&gt;<font color="#0000ff">rightchild</font>}));<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>elsif</b>&nbsp;(<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@tt_stack</font>&nbsp;!=&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$n</font>&nbsp;=&nbsp;<font color="#007f00">pop</font>&nbsp;<font color="#0000ff">@tt_stack</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$baby</font>-&gt;<font color="#0000ff">set_nextnode</font>(tree_travel(<font color="#0000ff">$self</font>,<font color="#0000ff">$</font>{<font color="#0000ff">$n</font>}));<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;<font color="#0000ff">$$preserve</font>;<br />
}<br />
<br />
</tt></div>


<p>For the printing (similar to the post in the three months ago):</p>

<div><tt>
<b>my</b>&nbsp;<font color="#0000ff">$node</font>&nbsp;=&nbsp;<font color="#0000ff">$rootnode</font>;<br />
<b>while</b>&nbsp;(<font color="#007f00">defined</font>&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">nextnode</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">value</font>,&nbsp;<font color="#ffa500">"</font><font color="#ff0000">&nbsp;-&gt;&nbsp;</font><font color="#ffa500">"</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$node</font>&nbsp;=&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">nextnode</font>;<br />
}<br />
<font color="#007f00">print</font>&nbsp;<font color="#0000ff">$node</font>-&gt;<font color="#0000ff">value</font>;&nbsp;<font color="#7f7f7f"><i>#final&nbsp;value</i></font><font color="#7f7f7f"><i><br />
</i></font><font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
<br />
</tt></div>

<p>Full code on GitHub: <i><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-094/cheok-yin-fung/">link</a></i> (with Java solution for task 2) □</p>

<p>Stay healthy! (written on 9th Jan 2021 (probably a remarkable day in the 21st century history) night, Hong Kong Time Zone).</p>

<hr>
<div>
Remark:<br />
[1] better name as "<tt>collect_letters</tt>"... As we won't say Chinese alphabets or Korean alphabets.<br />
For those who may be interested in the meaning of those Chinese terms:<br />
屢敗屢戰 fight disregard of previous failures<br />
屢戰屢敗 fight again and again , but fail always<br />
屢屢戰敗 fight again and again , but fail always<br />
東 East<br />
西 West<br />
北 North<br />
南 South <br />
真 truth<br />
善 goodness<br />
美 beauty<br />
聖 holiness<br />
一二三 one, two, three<br />
陳年 aged<br />
年陳 well... This could be a name of someone.<br />
過錯 wrongness<br />
錯過 miss ("to fail to do or experience something", from dictionary) <br /></div><div><br /></div>]]>
        
    </content>
</entry>
  <entry>
    <title>Perl weekly challenge 94</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/james_curtis-smith/2021/01/perl-weekly-challenge-94.html"/>
    <id>tag:blogs.perl.org,2021:/users/james_curtis-smith//3569.10042</id>

    <published>2021-01-09T19:47:41Z</published>
    <updated>2021-01-10T02:11:29Z</updated>

    <summary>The two challenges this week were a nice introduction to the new year. Challenge 1 - Group words into groups of anagrams. This is a nice hash or "arrayref"s question - a Perl staple. For each group we need to...</summary>
    <author>
        <name>James Curtis-Smith</name>
        <uri>https://jamessmith.me.uk</uri>
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/james_curtis-smith/">
        <![CDATA[<p>The two challenges this week were a nice introduction to the new year.</p>

<h3>Challenge 1 - Group words into groups of anagrams.</h3>

<p>This is a nice hash or "arrayref"s question - a Perl staple. For each group we need to generate a key, and put every anagram into this bin.</p>

<p>The simplest key is just to sort the letters into alphabetical order:</p>

<pre><code>join q(), sort split m{}</code></pre>

<p>This means the meat of the method can be written as a one liner.</p>

<pre><code>sub group_anagrams {
  my $anagrams = {};
  push @{ $anagrams->{join q(),sort split m{}} }, $_ foreach @_;
  return $anagrams;
}</code></pre>

<h3>Challenge 2 - Flattening Trees & Linked Lists</h3>

<p>Again with simple Tree and LinkedList classes this becomes a good<br />
example of simple OO coding.<br />
</p>]]>
        
    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3008768959591424846</id>
    <published>2021-01-09T22:37:00.000+01:00</published>
    <updated>2021-01-09T22:37:16.511+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxxiii) 16 CPAN great modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SKAJI/App-cpm-0.997000' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::cpm&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a fast CPAN module installer &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.997000&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 51&lt;/li&gt;  &lt;li&gt;Previous version: 0.996 was 1 month, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DOMM/App-TimeTracker-3.008' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;App::TimeTracker&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - time tracking for impatient and lazy command line lovers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.008&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 3.007 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.030' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.030&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.029 was 6 months, 16 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.27&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.26 was 3 months, 25 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TODDR/IO-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;IO&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl core IO modules &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2021-01-04&lt;/li&gt;  &lt;li&gt;Votes: 52&lt;/li&gt;  &lt;li&gt;Previous version: 1.42 was 11 months, 15 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PMQS/IO-Compress-2.100' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Compress::Zlib&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - IO Interface to compressed data files/buffers &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.100&lt;/strong&gt; on 2021-01-07&lt;/li&gt;  &lt;li&gt;Votes: 13&lt;/li&gt;  &lt;li&gt;Previous version: 2.096 was 5 months, 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.52&lt;/strong&gt; on 2021-01-07&lt;/li&gt;  &lt;li&gt;Votes: 149&lt;/li&gt;  &lt;li&gt;Previous version: 6.51 was 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Minion-10.15' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Minion&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Job queue &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;10.15&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 80&lt;/li&gt;  &lt;li&gt;Previous version: 10.14 was 2 months, 9 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojo-Pg-4.23' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojo::Pg&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious ♥ PostgreSQL &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.23&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 66&lt;/li&gt;  &lt;li&gt;Previous version: 4.22 was 1 month, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SRI/Mojolicious-Plugin-Status-1.13' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Mojolicious::Plugin::Status&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Mojolicious server status &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.13&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 12&lt;/li&gt;  &lt;li&gt;Previous version: 1.12 was 6 months, 21 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MARSCHAP/perl-ldap-0.68' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::LDAP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - LDAP client library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.68&lt;/strong&gt; on 2021-01-03&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.67 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/VANSTYN/RapidApp-1.3401' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;RapidApp&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Turnkey ajaxy webapps &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.3401&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 27&lt;/li&gt;  &lt;li&gt;Previous version: 1.3400 was 22 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TEODESIAN/Selenium-Remote-Driver-1.39' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Selenium::Remote::Driver&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Client for Selenium Remote Driver &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.39&lt;/strong&gt; on 2021-01-08&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 1.38 was 2 months, 20 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/Test-LeakTrace-0.17' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::LeakTrace&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Traces memory leaks &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.17&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: 0.16 was 3 years, 6 months, 17 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/GFRANKS/Test-MockModule-v0.176.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test::MockModule&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Override subroutines in a module for unit testing &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v0.176.0&lt;/strong&gt; on 2021-01-05&lt;/li&gt;  &lt;li&gt;Votes: 14&lt;/li&gt;  &lt;li&gt;Previous version: v0.175.0 was 3 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Zydeco-0.613' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Zydeco&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Jazz up your Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.613&lt;/strong&gt; on 2021-01-09&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.612 was 2 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3008768959591424846/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxiii-16-cpan-great-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3008768959591424846"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3008768959591424846"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cccxxiii-16-cpan-great-modules-released.html" title="(cccxxiii) 16 CPAN great modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-3007815038691880966</id>
    <published>2021-01-09T22:33:00.000+01:00</published>
    <updated>2021-01-09T22:33:01.021+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxlix) metacpan weekly report - Mojolicious</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 62&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious (+3)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/01/09 21:32:29 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::calendr" target="_blank"&gt;App::calendr&lt;/a&gt; - Application to display supported Calendar.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Argv" target="_blank"&gt;Argv&lt;/a&gt; - Provide an OO interface to an arg vector&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Bitcoin::Crypto" target="_blank"&gt;Bitcoin::Crypto&lt;/a&gt; - Bitcoin cryptography in Perl&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Calendar::Hijri" target="_blank"&gt;Calendar::Hijri&lt;/a&gt; - Interface to Islamic Calendar.&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Test::Dummy::Perl5::StaticInstall" target="_blank"&gt;CPAN::Test::Dummy::Perl5::StaticInstall&lt;/a&gt; - Dummy CPAN distribution with x_static_install metadata&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MIDI::RtMidi::FFI" target="_blank"&gt;MIDI::RtMidi::FFI&lt;/a&gt; - Bindings for librtmidi - Realtime MIDI library&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Duo" target="_blank"&gt;Net::Duo&lt;/a&gt; - API for Duo multifactor authentication service&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Plack::Middleware::Text::Minify" target="_blank"&gt;Plack::Middleware::Text::Minify&lt;/a&gt; - minify text responses on the fly&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Readonly::Tiny" target="_blank"&gt;Readonly::Tiny&lt;/a&gt; - Simple, correct readonly values&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Assemble::Compressed" target="_blank"&gt;Regexp::Assemble::Compressed&lt;/a&gt; - Assemble more compressed Regular Expression&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Statistics::Standard_Normal" target="_blank"&gt;Statistics::Standard_Normal&lt;/a&gt; - Z scores and percentiles using standard normal table&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Acme::Futuristic::Perl" target="_blank"&gt;Acme::Futuristic::Perl&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Algorithm::AhoCorasick::XS" target="_blank"&gt;Algorithm::AhoCorasick::XS&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::fsql" target="_blank"&gt;App::fsql&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::MethodMaker" target="_blank"&gt;Class::MethodMaker&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Clipboard" target="_blank"&gt;Clipboard&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Const::Fast" target="_blank"&gt;Const::Fast&lt;/a&gt; (+1=31)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::DSA" target="_blank"&gt;Crypt::OpenSSL::DSA&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Alias" target="_blank"&gt;Data::Alias&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::DeepAccess" target="_blank"&gt;Data::DeepAccess&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Money" target="_blank"&gt;Data::Money&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Section" target="_blank"&gt;Data::Section&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBD::Pg" target="_blank"&gt;DBD::Pg&lt;/a&gt; (+2=85)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DBI" target="_blank"&gt;DBI&lt;/a&gt; (+1=247)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/File::Slurp" target="_blank"&gt;File::Slurp&lt;/a&gt; (+1=67)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Gedcom" target="_blank"&gt;Gedcom&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/HTML5::DOM" target="_blank"&gt;HTML5::DOM&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=58)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::FDPass" target="_blank"&gt;IO::FDPass&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Interactive" target="_blank"&gt;IO::Interactive&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Prompter" target="_blank"&gt;IO::Prompter&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MediaWiki::API" target="_blank"&gt;MediaWiki::API&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MetaCPAN::Client" target="_blank"&gt;MetaCPAN::Client&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+3=438)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Async::WebSocket" target="_blank"&gt;Net::Async::WebSocket&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Path::Tiny" target="_blank"&gt;Path::Tiny&lt;/a&gt; (+1=157)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Perl::Critic::Freenode" target="_blank"&gt;Perl::Critic::Freenode&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::POM::Web" target="_blank"&gt;Pod::POM::Web&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Simple" target="_blank"&gt;Pod::Simple&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pod::Weaver" target="_blank"&gt;Pod::Weaver&lt;/a&gt; (+1=32)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI::HTML" target="_blank"&gt;PPI::HTML&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Assemble" target="_blank"&gt;Regexp::Assemble&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Common" target="_blank"&gt;Regexp::Common&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Regexp::Debugger" target="_blank"&gt;Regexp::Debugger&lt;/a&gt; (+1=55)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::Key" target="_blank"&gt;Sort::Key&lt;/a&gt; (+1=25)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sort::Naturally" target="_blank"&gt;Sort::Naturally&lt;/a&gt; (+1=17)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/SQL::Abstract" target="_blank"&gt;SQL::Abstract&lt;/a&gt; (+1=69)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/StreamFinder" target="_blank"&gt;StreamFinder&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Install" target="_blank"&gt;Sub::Install&lt;/a&gt; (+1=18)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Sub::Pipe" target="_blank"&gt;Sub::Pipe&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Template::Toolkit" target="_blank"&gt;Template::Toolkit&lt;/a&gt; (+1=129)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ANSIColorx::ColorNicknames" target="_blank"&gt;Term::ANSIColorx::ColorNicknames&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test2::Suite" target="_blank"&gt;Test2::Suite&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::LeakTrace" target="_blank"&gt;Test::LeakTrace&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::Tiny" target="_blank"&gt;Text::Table::Tiny&lt;/a&gt; (+1=14)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+1=124)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Types::XSD::Lite" target="_blank"&gt;Types::XSD::Lite&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/URI::db" target="_blank"&gt;URI::db&lt;/a&gt; (+1=8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Mechanize::Chrome" target="_blank"&gt;WWW::Mechanize::Chrome&lt;/a&gt; (+1=15)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/3007815038691880966/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdxlix-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3007815038691880966"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/3007815038691880966"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdxlix-metacpan-weekly-report.html" title="(cdxlix) metacpan weekly report - Mojolicious"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8222264738716613513</id>
    <published>2021-01-09T22:31:00.000+01:00</published>
    <updated>2021-01-09T22:31:20.018+01:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxxiii) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br/&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br/&gt;Build date: 2021-01-09 21:30:36 GMT&lt;/p&gt;&lt;hr/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65567540" target="_blank"&gt;Pretending an Autoloaded Function has a Block Prototype&lt;/a&gt; - [&lt;b&gt;6&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65617886" target="_blank"&gt;The smartmatch operator is not working as expected&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65546890" target="_blank"&gt;What is the minimum perl script for Selenium?&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65645504" target="_blank"&gt;dynamically add leading underscore to existing sub&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65561431" target="_blank"&gt;Perl:How to insert line in a file?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65560451" target="_blank"&gt;In mrskew, can I calculate human readable timestamps from tim?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65608879" target="_blank"&gt;How to append content of a file multiple times into one file in perl script&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65594390" target="_blank"&gt;How to use patchperl when compiling an old perl distribution?&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65599664" target="_blank"&gt;Inline Python support for passing filehandle from perl&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/65600639" target="_blank"&gt;Spreadsheet::WriteExcel - Values are changed to scientific notation despite cell being formatted as Text&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8222264738716613513/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxiii-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8222264738716613513"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8222264738716613513"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/cdlxxiii-stackoverflow-perl-report.html" title="(cdlxxiii) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>CY's Brute-Force Take on Task 2 of PWC#089</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/12/magic-square-and-magic-cube.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9982</id>

    <published>2020-12-06T15:32:33Z</published>
    <updated>2021-01-09T11:34:16Z</updated>

    <summary>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenge, submit codes on-time (via GitHub or email).(In a rush, sorry for the "raw" style this week.)link for Task statements a...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[<div><div><p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenge, submit codes on-time (via GitHub or email).</i></p></div></div><br /><div><br /></div><div>(In a rush, sorry for the "raw" style this week.)</div><div><div><br /></div><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-089/">link for Task statements</a></div><div><br /></div><div><br /></div>
<pre>a b c
d e f
g h i

<u>Statement</u>: The center term, "$e" , is 5.
<u>Proof</u>:<br />Given the sum of each "segment" is 15.<br /><br />Consider<br />  sum of 2 outer rows - the middle column - sum of 2 diagonals <br />= (2-1-2)*15<br /><br />Then we have<br />(a+b+c + g+h+i) - (b+e+h) - (a+e+i + c+e+g) = (2-1-2)*15
-3*e = -15
e = 5  □


Then loop the values of $a and $b over 1 to 9

$i = 10-$a
$c = 15-$a-$b
$h = 10-$b
$g = 10-$c
$d = 15-$a-$g
$f = 15-$c-$i
</pre><div>

Then check whether the values of variables <strike>match the 8 given equations and</strike> use every integer from 1 to 9 .<br /><br />I got 8 magic squares.</div><div><br /></div><div>---------------------- <br /></div><div><br /></div><div>The definition of "magic cube" as recorded on Wikipedia, early December 2020, is : "the sums of the numbers on each row [9 rows], on each column [9 columns], on each pillar [9 pillars] and on each of the four main space diagonals [4 space diagonals] are equal to the same number."

And I think we may explore 3x3x3 cube in a similar fashion. <br /></div><div><br /></div><pre>first (top) layer
a b c 
d e f 
g h i
 
second (middle) layer
j k l 
m X n 
o p q 

third (bottom) layer
r s t 
u v w 
x y z 


1+2+3+..+27 = 27*28/2 = 27*14
There are exactly 9 pillars composing the cube. 
Since the sums of each pillar are the same, we have 

             27*14/9 = 42 ,

as the sum of each "segment".


<u>Statement</u>: The center term, "$X", is 14.
<u>Proof</u>:<br /><br />&nbsp;Consider:<br /><br />&nbsp;(sum of 4 corner pillars)<br /> - (sum of 2 outer columns of the middle layer) + (m+X+n)<br />&nbsp;- (sum of 2 outer columns of the middle layer)<br />&nbsp;- (sum of 4 space diagonals)
<br />
  (4+2+1-2-4)*42 = a+j+r + c+l+t + i+q+z + x+o+g<br />               &nbsp;- (j+m+o) -(l+n+q) + m+X+n<br />                - (a+X+z) - (c+X+x) - (i+X+r) - (g+X+t) <br />= -3X
<br />
(A bit worry about making errors during cancelling terms? <br />Use a computer algebra system.)

-42 = -3X
X = 14  □
<br />
Then loop the values of $e,$a,$b,$g from 1 to 27

$c = 42 - $a - $b
$z = 28 - $a
$x = 28 - $c
$y = 42 - $x - $z
$d = 42 - $a - $g
$t = 28 - $g
$w = 42 - $z - $t
$h = 42 - $e - $b
$p = 42 - $y - $h
$f = 42 - $d - $e
$i = 42 - $c - $f
$r = 28 - $i
$s = 42 - $t - $r
$v = 42 - $y - $s
$j = 42 - $a - $r
$l = 42 - $c - $t
$k = 42 - $j - $l
$q = 42 - $z - $i
$n = 42 - $l - $q
$m = 28 - $n
$o = 42 - $j - $m
$u = 42 - $v - $w
</pre>
<br /><br /><div>I got 192 different magic cubes.</div><div>One of them is<br /></div><pre> 8 10 24 
 22 9 11
 12 23 7

 13 27 2 
 3 14 25
 26 1 15

 21 5 16 
 17 19 6
 4 18 20
</pre>
<div><br /></div><div>---</div><div><div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-089/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a> (Task 1 on gcd sum)</tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-089/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a> (Task 2; the 3x3x3 magic cube code is on POD of the bottom of the file)</tt></i> <br /></div><div><br /></div></div><div><p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p></div><div>Stay healthy! □</div><div><br /></div><div>(Note after 6-hour published: should write more caution or analysis on this task (Task 2 #089) and Sudoku (Task 2 #086) in next blogpost! )<br /></u></div>]]>
        
    </content>
</entry>
  <entry>
    <title>CY's Take on PWC#088</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/c_y_fung/2020/11/cys-take-on-pwc088.html"/>
    <id>tag:blogs.perl.org,2020:/users/c_y_fung//3481.9969</id>

    <published>2020-11-29T12:06:36Z</published>
    <updated>2021-01-09T11:33:31Z</updated>

    <summary> If you want to challenge yourself on programming, especially on Perl and/or Raku, go to https://perlweeklychallenge.org, code the latest challenges, submit codes on-time (by GitHub or email).This blogpost is not in shortage of unanswered questions... Task 1 Array of...</summary>
    <author>
        <name>C.-Y. Fung</name>
        <uri>https://github.com/E7-87-83/</uri>
    </author>
    
    <category term="theweeklychallenge" label="theweeklychallenge" scheme="http://www.sixapart.com/ns/types#tag"/>
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/c_y_fung/">
        <![CDATA[
<p><i>If you want to challenge yourself on programming, especially on Perl and/or Raku, go to <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org</a>, code the latest challenges, submit codes on-time (by GitHub or email).</i><br /></p><p><br /></p><p>This blogpost is not in shortage of unanswered questions...<br /></p>



<h4>Task 1 Array of Product</h4>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">myproduct</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@arr</font>&nbsp;=&nbsp;<font color="#0000ff">@_</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#&nbsp;short&nbsp;for&nbsp;"previous&nbsp;product"</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@arr</font>,&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#0000ff">$#arr</font>-<font color="#00007f">1</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$entry</font>&nbsp;=&nbsp;<font color="#0000ff">$pre_prod</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$entry</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">$i</font>+<font color="#00007f">1.</font>.<font color="#0000ff">$#arr</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$pre_prod</font>&nbsp;*=&nbsp;<font color="#0000ff">$arr</font>[<font color="#0000ff">$i</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$entry</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
</tt></div>

<div>The above, I designed, is a prototype for multiplication (and division, if possible) when it is expensive to do mulitplication,
such as matrices. Since I don't know much about
<a href="https://en.wikipedia.org/wiki/Matrix_multiplication_algorithm">those algorithmic knowledge</a>, just leave the codes here for personal future digestion.</div>

<div>---</div>

<div>What I have submitted is an one-liner:</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$_</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$_</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br />
</tt></div>

<div><br /><br />I get another item for "investigation" here. Why doesn't the following line work?</div>

<div><tt><font color="#333333">perl -e '</font>
<b>for</b>&nbsp;<font color="#0000ff">$j</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>)&nbsp;{<font color="#0000ff">$a</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;<font color="#007f00">eval</font>&nbsp;{<font color="#0000ff">$a</font>&nbsp;*=&nbsp;<font color="#0000ff"><b>$ARGV</b></font>[<font color="#0000ff"><b>$i</b></font>]&nbsp;<b>if</b>&nbsp;<font color="#0000ff"><b>$i</b></font>&nbsp;!=&nbsp;<font color="#0000ff">$j</font>}&nbsp;<b>for</b>&nbsp;<font color="#0000ff">$i</font>&nbsp;(0..<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff"><b>@ARGV</b></font>-<font color="#00007f">1</font>);&nbsp;<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#0000ff">$a</font><font color="#ff0000">&nbsp;</font><font color="#ffa500">"</font>;&nbsp;}<font color="#333333">' 5 2 1 3 4</font><br /></tt>


<h4><br /></h4><h4>Task 2 Spiral Matrix</h4>

<h5>the Testing</h5>

<div>This is time for <tt>Test::Deep</tt> and <tt>Test::More</tt> again:</div>

<pre>cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,],
    [  7, 8, 9,  ]]),
    [ 1, 2, 3, 6, 9, 8, 7, 4, 5  ]
, "Example 1");
cmp_deeply(
    flat([[  1,  2,  3,  4 ],
    [  5,  6,  7,  8 ],
    [  9, 10, 11, 12 ],
    [ 13, 14, 15, 16 ]]), 
    [ 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 ]
, "Example 2");
cmp_deeply(
    flat([[  1,  2,  3],
    [  4, 5,  6,]]),
    [ 1, 2, 3, 6, 5, 4 ]
, "small test case");

cmp_deeply(
    flat([
    [ 2, 3, 5, 7],
    [11,13,17,19],
    [23,29,31,37],
    [41,43,47,53],
    [59,61,67,71]])
, [2, 3, 5, 7, 19, 37, 53, 71, 67, 61, 59,
    41, 23, 11, 13, 17, 31, 47, 43, 29]
, "prime numbers 5 x 4");
</pre>

<pre>$ perl ch-2.pl
1..4
ok 1 - Example 1
ok 2 - Example 2
ok 3 - small test case
ok 4 - prime numbers 5 x 4
</pre>

Or customize a test:

<pre>$ perl ch-2.pl 3 5 A B C D E F G H I J K L M N 
[A, B, C, D, E]
[F, G, H, I, J]
[K, L, M, N, O]
A, B, C, D, E, J, O, N, M, L, K, F, G, H, I
</pre>

<h5>the codes</h5>

<div>Honestly I did not plan much on the task. (I) I created a "helper matrix" (<tt>@helper_mat</tt>)
 to record which terms on the original matrix is traversed: traversed, 
1; not yet traversed, 0. (II) I went through the outermost terms -- the 
four sides -- of the matrix by counting off one by one. (III) I made use
 of a boolean variable <tt>$success_click</tt> to tackle the change of direction.</div>

<div><tt>
<b>sub&nbsp;</b><font color="#007f00">flat</font>&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@ans</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@mat</font>&nbsp;=&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff"><b>$_</b></font>[0]};&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$M</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$N</font>&nbsp;=&nbsp;<font color="#007f00">scalar</font>&nbsp;<font color="#0000ff">@</font>{<font color="#0000ff">$mat</font>[0]};<br />
<br />
<font color="#7f7f7f"><i>#&nbsp;(I)&nbsp;initialize&nbsp;of&nbsp;the&nbsp;helper&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@helper_mat</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@helper_mat</font>,&nbsp;[(<font color="#ffa500">"</font><font color="#ff0000">0</font><font color="#ffa500">"</font>)&nbsp;x&nbsp;<font color="#0000ff">$N</font>]&nbsp;<b>for</b>&nbsp;(0..<font color="#0000ff">$M</font>-<font color="#00007f">1</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;(&nbsp;&nbsp;0,&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;(&nbsp;<font color="#00007f">+1</font>,&nbsp;&nbsp;0,&nbsp;<font color="#00007f">-1</font>,&nbsp;&nbsp;0&nbsp;);<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;(<font color="#0000ff">$r</font>,&nbsp;<font color="#0000ff">$c</font>)&nbsp;=&nbsp;(&nbsp;0&nbsp;,&nbsp;0&nbsp;);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(I)</i></font><font color="#7f7f7f"><i><br />
</i></font><br />
<font color="#7f7f7f"><i>#&nbsp;(II): &nbsp;preparation&nbsp;of&nbsp;clockwise&nbsp;traverse&nbsp;of&nbsp;the&nbsp;outermost&nbsp;part&nbsp;of&nbsp;the&nbsp;matrix</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$N</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br /><br />
<font color="#7f7f7f"><i>(II): traverse the outermost matrix terms</i></font><font color="#7f7f7f"><i><br />
</i></font>
&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$q</font>&nbsp;(0.<font color="#00007f">.3</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b>&nbsp;(<font color="#0000ff">@</font>{<font color="#0000ff">$numbering</font>[<font color="#0000ff">$q</font>]})&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$q</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<font color="#7f7f7f"><i>#&nbsp;end&nbsp;(II)</i></font><br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;<font color="#00007f">3</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;<b>my</b>&nbsp;<font color="#0000ff">$count</font>&nbsp;=&nbsp;(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>while</b>&nbsp;(<font color="#0000ff">$count</font>&nbsp;&lt;&nbsp;<font color="#0000ff">$M</font>*<font color="#0000ff">$N</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$success_click</font>)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;+=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;+=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b>&nbsp;(<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;==&nbsp;0)&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#007f00">push</font>&nbsp;<font color="#0000ff">@ans</font>,&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$</font>{<font color="#0000ff">$helper_mat</font>[<font color="#0000ff">$r</font>]}[<font color="#0000ff">$c</font>]&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$count</font>++;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#007f00">undef</font>;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)&nbsp;</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$r</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$row_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$c</font>&nbsp;<font color="#ffa500">-</font>=&nbsp;<font color="#0000ff">$col_dir</font>[<font color="#0000ff">$time_now</font>];<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<b>else</b>&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$time_now</font>&nbsp;=&nbsp;(<font color="#0000ff">$time_now</font>+<font color="#00007f">1</font>)&nbsp;%&nbsp;4;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">$success_click</font>&nbsp;=&nbsp;<font color="#00007f">1</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#7f7f7f"><i>#(III)</i></font><font color="#7f7f7f"><i><br />
</i></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>&nbsp;\<font color="#0000ff">@ans</font>;<br />
}<br />
<br />
</tt></div>

<h5>Extras</h5>

<div><i>Here I am going to describe two extra functionalities I added:</i></div>

<div>(A) I find that addition or modification of a few lines can create anticlockwise traverse:</div>

<div><tt>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@row_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@row_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@col_dir</font>&nbsp;=&nbsp;<font color="#007f00">map</font>&nbsp;{<font color="#0000ff"><b>$_</b></font>&nbsp;=&nbsp;-<font color="#0000ff"><b>$_</b></font>}&nbsp;(<font color="#007f00">reverse</font>&nbsp;<font color="#0000ff">@col_dir</font>);<br />
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000ff">@numbering</font>&nbsp;=&nbsp;(<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#00007f">1.</font>.<font color="#0000ff">$M</font>-<font color="#00007f">1</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$M</font>..<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>-<font color="#00007f">1.</font>.<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">3</font>],&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<font color="#0000ff">$N</font>+<font color="#0000ff">$M</font>+<font color="#0000ff">$M</font>-<font color="#00007f">2.</font>.(<font color="#0000ff">$M</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>+(<font color="#0000ff">$N</font>-<font color="#00007f">1</font>)*<font color="#00007f">2</font>-<font color="#00007f">1</font>]<br />
&nbsp;&nbsp;&nbsp;&nbsp;);<br />
</tt></div>

<div><br /></div><div><br /></div><div><br /></div><div>(B) An inverse subroutine <tt>&amp;matrixize</tt> for the original task: given parameters <tt>m</tt>, <tt>n</tt>, put a list of <tt>m x n</tt> integers as a <tt>m x n</tt> spiral matrix.</div>

<div>
<br /><br />
Code inserted:
<div><pre><tt><b>my</b>&nbsp;<font color="#0000ff">@test</font>&nbsp;=&nbsp;matrixize([<font color="#00007f">1..60</font>],&nbsp;<font color="#00007f">6</font>,&nbsp;<font color="#00007f">10</font>);<br />
print_matrix([<font color="#0000ff">@test</font>]);<br />
<font color="#007f00">print</font>&nbsp;<font color="#ffa500">"</font><font color="#ff0000">test&nbsp;end</font><font color="#ff00ff">\n</font><font color="#ffa500">"</font>;<br />
</tt></pre></div>

Output:
<pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[28, 29, 30, 31, 32, 33, 34, 35, 36, 11]
[27, 48, 49, 50, 51, 52, 53, 54, 37, 12]
[26, 47, 60, 59, 58, 57, 56, 55, 38, 13]
[25, 46, 45, 44, 43, 42, 41, 40, 39, 14]
[24, 23, 22, 21, 20, 19, 18, 17, 16, 15]
test end

</pre>
</div>

<div>The codes for this subroutine (<tt>&amp;matrixize</tt>) largely reuse that in <tt>&amp;flat</tt>.</div><div><br /></div>

<h5>Dissatifaction</h5>

<div><ol><li>As said, can one make a more maintainable and concise version of <tt>&amp;matrixize</tt> and <tt>&amp;flat</tt>? (A bit more thought: the current <tt>&amp;matrixize</tt> has only clockwise version.)</li><li>I could set every initial term as <tt>0</tt>, <tt>'z'</tt>, <tt>'.'</tt> or <tt>undef</tt>, etc. , hence skipped <tt>@helper_mat</tt> with little amount of typing. Is there a case which a <tt>@helper_mat</tt> is really need?</li><li><tt>$success</tt> changes once or none for each occupant of the 
matrix (a note for more preciseness: except those of the "perimeter" of 
the matrix). Are there any cases which a <tt>$success</tt> is need to change twice? (Or change with respect to a task with more subtlies?)</li></ol></div>

<div>For the latter two questions, I am thinking whether irregular 2D boards can make full use of <tt>@helper_mat</tt> and <tt>$success</tt>. But <u>not</u> every irregular 2D polyomino can have a spiral path traversing each grid... </div>

<div>...</div>
<div>...</div>
<div>...</div>

<hr>

<p><i>Do tell or correct me, if you have oppositions, want to discuss or give me advice!</i></p>

<p>Stay alert and healthy! □</p>


<div><i>link for codes: 
<tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-1.pl">ch-1.pl</a></tt>
, <tt><a href="https://github.com/E7-87-83/perlweeklychallenge-club/tree/master/challenge-088/cheok-yin-fung/perl/ch-2.pl">ch-2.pl</a></tt></i>
</div>


<hr>
<pre>Irregular boards:

sample input 1:
######### 
# * * x #
# * * * # 
# * * * # 
# * * x # 
#########

sample output 1:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 5 4 # 
# 7 6 x # 
#########

sample input 2:
######### 
# * * x #
# * * * # 
# * * * # 
# x * * # 
#########

sample output 2:
######### 
# 0 1 x #
# 9 2 3 # 
# 8 7 4 # 
# x 6 5 # 
#########

sample input 3:
######### 
# * * * #
# * * * # 
# x * * # 
# x * * # 
#########

sample output 3:
######### 
# 0 1 2 #
# 9 8 3 # 
# x 7 4 # 
# x 6 5 # 
#########
</pre>



</u>
</div>]]>
        
    </content>
</entry>
  <entry>
    <title>SanDiego.pm Meeting, Tuesday, January 12th, 2021</title>
    <link rel="alternate" type="text/html" href="http://blogs.perl.org/users/bob/2021/01/sandiegopm-meeting-tuesday-january-12th-2021.html"/>
    <id>tag:blogs.perl.org,2021:/users/bob//75.10039</id>

    <published>2021-01-08T05:01:02Z</published>
    <updated>2021-01-08T05:03:10Z</updated>

    <summary>This is your friendly reminder that the SanDiego.pm quarterly meeting will be this Tuesday, January 12th, starting at 7 PM PST. As has been the case for the last several meetings, we'll be meeting again on Zoom (details below). Topics...</summary>
    <author>
        <name>$Bob</name>
        
    </author>
    
    
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/bob/">
        <![CDATA[<p>This is your friendly reminder that the SanDiego.pm quarterly meeting will be this Tuesday, January 12th, starting at 7 PM PST.  As has been the case for the last several meetings, we'll be meeting again on Zoom (details below).</p>

<p>Topics for the meeting include Perl (of course), COVID-19, CentOS, and anything else that people would like to talk about.</p>]]>
        <![CDATA[<p>The Zoom details to join the meeting</p>

<p>Meeting URL: https://us02web.zoom.us/j/88385075668<br />
Meeting ID: 883 8507 5668</p>

<p>The passcode is the output of this small Perl program: perl -E 'say 2**2*7**4, map chr, 064, 066'</p>

<p>We'll look forward to seeing everyone there!<br />
</p>]]>
    </content>
</entry>
  <entry>
    <title>Scala and Perl in 2021</title>
    <link rel="alternate" href="https://dev.to/bevilaquabruno/scala-and-perl-in-2021-1mee" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Hi dev.to community!!</p>

<p>What is the situation of Scala and Perl in 2021? I mean, i don't know anything about both languages but i want to learn, is the both still used in large scale? Or do you think is better to keep coding in PHP, Node and Python?</p>

</div>
    </content>
    <author>
      <name>Bruno Fernando Bevilaqua</name>
    </author>
    <id>https://dev.to/bevilaquabruno/scala-and-perl-in-2021-1mee</id>
    <published>2021-01-07T12:09:32Z</published>
    <updated>2021-01-07T12:09:32Z</updated>
    <category term="scala"/>
    <category term="perl"/>
    <category term="2021"/>
    <category term="discuss"/>
  </entry>
  <entry>
    <title>Git-Hooks mit Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Git ist eine weit verbreitete Software zur Versionsverwaltung. Wir nutzen Git seit vielen Jahren, um unseren Perl-Code zu verwalten. Soll im Git-Workflow etwas erzwungen werden, kommen sogenannte Git-Hooks zum Einsatz.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-06-git-hooks-mit-perl</id>
    <published>2021-01-06T10:00:00Z</published>
    <updated>2021-01-06T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 094</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-094-2d2h" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-094/">Challenge 094</a></p>

<h1>
  <a href="#task-1-group-anagrams" class="anchor">
  </a>
  TASK #1 › Group Anagrams
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given an array of strings <code>@S</code>.</p>

<p>Write a script to group <a href="https://en.wikipedia.org/wiki/Anagram">Anagrams</a> together in any random order</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>This is pretty straight forward. Read the list of words, group them into a hash with the letters ordered, and then display the values of the hash. Simples.</p>

<h2>
  <a href="#examples" class="anchor">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl opt bat saw tab pot top was
[ ("saw", "was"),
  ("bat", "tab"),
  ("opt", "pot", "top") ]

» ./ch-1.pl x
[ ("x") ]
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



<h1>
  <a href="#task-2-binary-tree-to-linked-list" class="anchor">
  </a>
  TASK #2 › Binary Tree to Linked List
</h1>

<h2>
  <a href="#task" class="anchor">
  </a>
  Task
</h2>

<p>You are given a binary tree.</p>

<p>Write a script to represent the given binary tree as an object and flatten it to a linked list object. Finally print the linked list object.</p>

<h2>
  <a href="#my-solution" class="anchor">
  </a>
  My solution
</h2>

<p>Okay, confession time. When doing these challenges. I have two rules. 1) Never read people's solutions before doing my own, and 2) Don't use modules that aren't part of Perl core. Perl doesn't have a native linked list implementation, and therefore I am intentionally skipping half this task to get the end result.</p>

<p>This task is similar to last week's <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-093/#TASK2">second task</a>. My code is largely copied from that. Instead of storing the paths, I add to the <code>@digits</code> array as I walk the path.</p>

<h2>
  <a href="#example" class="anchor">
  </a>
  Example
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl &lt; example-1.txt 
1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 3
</code></pre>
<div class="highlight__panel js-actions-panel">
<div class="highlight__panel-action js-fullscreen-code-action">
    Enter fullscreen mode
    


    Exit fullscreen mode
    


</div>
</div>
</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-094-2d2h</id>
    <published>2021-01-05T12:07:42Z</published>
    <updated>2021-01-05T12:07:42Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
    <category term="theweeklychallenge"/>
  </entry>
  <entry>
    <title>Archiving CPAN logs in GitHub Actions</title>
    <link rel="alternate" href="https://dev.to/davorg/archiving-cpan-logs-in-github-actions-2hfd" type="text/html"/>
    <content type="html">&lt;p&gt;As more and more people have started to use &lt;a href="https://github.com/actions"&gt;GitHub Actions&lt;/a&gt; to test their CPAN modules, a pretty standard version of a basic configuration file has emerged. It looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-
latest']
        perl: [ 'latest' ]
    name: Perl ${{ matrix.perl }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}
      - name: Perl version
        run: perl -V
      - name: Install modules
        run: cpanm --installdeps .
      - name: Run tests
        run: prove -lv t
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I've been slowly adding something similar to this to all of the GitHub repos that contain my CPAN modules. And it mostly works pretty well. There are just a few problems that I'm ironing out.&lt;/p&gt;

&lt;p&gt;One of them is a problem where some of the required CPAN modules don't install cleanly, so the run is aborted. But I think I've found a tool that is going to help me fix this problem.&lt;/p&gt;

&lt;p&gt;You'll see that I use &lt;code&gt;cpanm&lt;/code&gt; to install the modules that are required to run the tests. And &lt;code&gt;cpanm&lt;/code&gt; writes a detailed log of what it is doing which is invaluable when something goes wrong - as you can get the error messages from the log file. Unfortunately, this doesn't work well in a CI environment like GitHub Actions. All I see in the log of the run is something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Building and testing Inline-C-0.81 ... FAIL
! Installing Inline::C failed. See /home/runner/.cpanm/work/1609767557.4781/build.log for details. 
Retry with --force to force install it.
! Installing the dependencies failed: Module 'Inline::C' is not installed
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That &lt;code&gt;build.log&lt;/code&gt; file is the one we need to see. But it's on the container that has been used to run your tests, and by the time you're looking at that error, the container has vanished into the ether taking your build log with it.&lt;/p&gt;

&lt;p&gt;But we can stop it being removed. GitHub Actions has a feature called "artifacts" where you can store items that are created in a job run so that you can examine them in more detail later on. We can use that to archive our build logs.&lt;/p&gt;

&lt;p&gt;I've started adding this step to my GitHub Action config files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Archive CPAN logs
  if: ${{ failure() }}
  uses: actions/upload-artifact@v2
  with:
    name: cpan_log
    path: .cpanm/work/*/build.log
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This adds another step into my process. It only runs if another step fails in some way. It uses the standard action &lt;code&gt;actions/upload-artifact@v2&lt;/code&gt; to archive my build logs. Now, when something goes wrong in my tests the job page will have a link labelled "cpan_log" which I can click on to download a copy of the &lt;code&gt;cpanm&lt;/code&gt; build log which I can then examine at my leisure to work out what the problem is.&lt;/p&gt;

&lt;p&gt;Now I just need to add this to all of my existing CI workflows so that I can start to fix some of the issues I can see on my &lt;a href="https://cpandashboard.com/DAVECROSS/"&gt;CPAN Dashboard&lt;/a&gt;.&lt;/p&gt;

</content>
    <author>
      <name>Dave Cross</name>
    </author>
    <id>https://dev.to/davorg/archiving-cpan-logs-in-github-actions-2hfd</id>
    <published>2021-01-04T14:49:51Z</published>
    <updated>2021-01-04T14:49:51Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
    <category term="githubactions"/>
    <category term="logs"/>
  </entry>
  <entry>
    <title>Why let Silicon Valley have all the Fun? Perl Developer job in Cyberjaya / Kuala Lumpur</title>
    <link rel="alternate" href="https://job.perl.careers/k5a" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Ready to trade your 9-to-5 for an exciting new role in the Silicon Valley of Malaysia? Our client's Cyberjaya office is looking for Perl developers with a strong exposure to Modern Perl –  comfortable with Plack/PSGI, Moose, and writing tests.</div>
    </content>
    <id>https://job.perl.careers/k5a</id>
    <published>2021-01-04T10:00:46Z</published>
    <updated>2021-01-04T10:00:46Z</updated>
  </entry>
  <entry>
    <title>If Jurassic Park has Taught us Anything, it’s that Science is Awesome! Perl in Australia.</title>
    <link rel="alternate" href="https://job.perl.careers/rzz" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Do you have an interest in genome technology and bioinformatics? If you spend your weekends reading science magazines and think smarter crops are key to our future, and if you happen to have experience with Ansible, AWS, Linux containers, MySQL, Postgres, and Solr, our client wants to hear from you.</div>
    </content>
    <id>https://job.perl.careers/rzz</id>
    <published>2021-01-04T10:00:45Z</published>
    <updated>2021-01-04T10:00:45Z</updated>
  </entry>
  <entry>
    <title>If it was Good Enough for Mozart - Perl role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/5ee" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the largest product and price comparison platforms in German-speaking countries, they know all about finding the best products at a price that would make Mozart shout, “Wunderbar!” They want to find a Perl programmer who thrives on delivering quality content, well-executed user information that’s easy to understand, and is as committed to transparency and excellence as they are.</div>
    </content>
    <id>https://job.perl.careers/5ee</id>
    <published>2021-01-04T10:00:44Z</published>
    <updated>2021-01-04T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Seeking Senior Perl Developers for Global Domination. Perl role in South Germany</title>
    <link rel="alternate" href="https://job.perl.careers/1zc" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client is an international IT company managing over 4 million domains for retail and corporate customers in 200 countries. To help achieve global domination, they’re looking for a few top-notch senior Perl developers whose experience with implementing APIs and protocols is only matched by their drive to design and develop domain software solutions.</div>
    </content>
    <id>https://job.perl.careers/1zc</id>
    <published>2021-01-04T10:00:43Z</published>
    <updated>2021-01-04T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Bored of jobs that don't matter? Be a Perl developer and save lives! Cambridge, UK</title>
    <link rel="alternate" href="https://job.perl.careers/p1a" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This web-app saves lives, and literally pushes forward medical science. Your work will be used by the NHS, research labs, and healthcare providers worldwide to diagnose patients, organize research, and make the world a better place.</div>
    </content>
    <id>https://job.perl.careers/p1a</id>
    <published>2021-01-04T10:00:42Z</published>
    <updated>2021-01-04T10:00:42Z</updated>
  </entry>
  <entry>
    <title>German Perl Workshop 2021</title>
    <link rel="alternate" href="https://act.yapc.eu/gpw2021" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">It will be in Leipzig on March 24-26 2021. <a href="https://act.yapc.eu/gpw2021/cfp.html">CFP is open</a>.</div>
    </content>
    <id>https://act.yapc.eu/gpw2021</id>
    <published>2021-01-04T10:00:41Z</published>
    <updated>2021-01-04T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Charlotte Perl Mongers - Using the ActiveState Platform</title>
    <link rel="alternate" href="https://www.meetup.com/charlotte-pm/events/275282889" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 27, 2021; 6:00 PM EST</div>
    </content>
    <id>https://www.meetup.com/charlotte-pm/events/275282889</id>
    <published>2021-01-04T10:00:40Z</published>
    <updated>2021-01-04T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Derrick Talks renv - Purdue Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/events/jdxwsrycccbrb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 13, 2021; 5:30 PM EST</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/events/jdxwsrycccbrb/</id>
    <published>2021-01-04T10:00:39Z</published>
    <updated>2021-01-04T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Intro to Raku: A New Language for a New Year</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, January 7, 2021; 6:30 PM PST</div>
    </content>
    <id>https://www.meetup.com/SVPerl/events/vsxdwrycccbkb/</id>
    <published>2021-01-04T10:00:38Z</published>
    <updated>2021-01-04T10:00:38Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, January 6, 2021; 7:00 PM GMT+1</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/events/jbrsfrybcqbfc/</id>
    <published>2021-01-04T10:00:37Z</published>
    <updated>2021-01-04T10:00:37Z</updated>
  </entry>
  <entry>
    <title>More Perl Maven followers on LinkedIn than #Perl followers </title>
    <link rel="alternate" href="https://szabgab.com/linkedin-more-perl-maven-followers.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You might not know about the <a href="https://www.linkedin.com/showcase/perl-maven/">Perl Maven LinkedIn page</a>, but it has just surpassed the <a href="https://www.linkedin.com/feed/hashtag/?keywords=perl">#perl</a> hashtag.</div>
    </content>
    <id>https://szabgab.com/linkedin-more-perl-maven-followers.html</id>
    <published>2021-01-04T10:00:36Z</published>
    <updated>2021-01-04T10:00:36Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/cccxxii-12-cpan-great-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdxlviii-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/cdlxxii-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-01-04T10:00:35Z</published>
    <updated>2021-01-04T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Perl Dancer and two Python courses</title>
    <link rel="alternate" href="https://code-maven.teachable.com/p/perl-dancer-course?coupon_code=END-2020" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">On the last day of 2020 I opened my new 'school' on Teachable and posted my first three courses. The 'Perl Dancer course', the 'Python Programming Bootcamp', and the new, 'Functional Programming in Python course'. To celebrate the opening and the new year I am offering them at 50% discount. USe the code END-2020 too enjoy it.</div>
    </content>
    <id>https://code-maven.teachable.com/p/perl-dancer-course?coupon_code=END-2020</id>
    <published>2021-01-04T10:00:34Z</published>
    <updated>2021-01-04T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Gabor self reporting for 2020.12</title>
    <link rel="alternate" href="https://szabgab.com/report-2020-12.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">My personal monthly report with my monthly plans neither of which are probably interesting to you, but it is fun to collect my thoughts. Part of my strategy is to have a <a href="https://szabgab.com/new-years-resolution-every-month.html">New Year's Resolution every month</a></div>
    </content>
    <id>https://szabgab.com/report-2020-12.html</id>
    <published>2021-01-04T10:00:33Z</published>
    <updated>2021-01-04T10:00:33Z</updated>
  </entry>
  <entry>
    <title>2020 in retrospect</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/31/2020-in-retrospect/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/31/2020-in-retrospect/</id>
    <published>2021-01-04T10:00:32Z</published>
    <updated>2021-01-04T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Annual Report - 2020</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mohammad is funny, he starts his annual report by saying how much he fell behind his plans for 2020 and then goes on to list accomplishments that most of the people I know don't do in a decade. I can only congratulate him and wish more people in the Perl community would follow his footsteps out of their own comfort zone and into making great things.</div>
    </content>
    <id>http://blogs.perl.org/users/mohammad_s_anwar/2021/01/annual-report---2020.html</id>
    <published>2021-01-04T10:00:31Z</published>
    <updated>2021-01-04T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 093</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-093-1dd9" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simon broke the task into subtasks and made it look like a walk in the park. Incredible.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-093-1dd9</id>
    <published>2021-01-04T10:00:30Z</published>
    <updated>2021-01-04T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 93</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2020/12/Perl_Weekly_Challenge_93__Max_Path.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The main attraction of Roger's blog posts is always the choice of multiple languages. You don't want to miss it.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2020/12/Perl_Weekly_Challenge_93__Max_Path.html</id>
    <published>2021-01-04T10:00:29Z</published>
    <updated>2021-01-04T10:00:29Z</updated>
  </entry>
  <entry>
    <title>Perl weekly challenge 093</title>
    <link rel="alternate" href="http://blogs.perl.org/users/joan_mimosinnet/2020/12/perl-weekly-challenge-093.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Nice attempt to organise code using Raku classes. Well done, keep it up.</div>
    </content>
    <id>http://blogs.perl.org/users/joan_mimosinnet/2020/12/perl-weekly-challenge-093.html</id>
    <published>2021-01-04T10:00:28Z</published>
    <updated>2021-01-04T10:00:28Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 93</title>
    <link rel="alternate" href="https://wlmb.github.io/2020/12/28/PWC93/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis' solutions with tests made it a complete package, specially, the 'Max Points' task.</div>
    </content>
    <id>https://wlmb.github.io/2020/12/28/PWC93/</id>
    <published>2021-01-04T10:00:27Z</published>
    <updated>2021-01-04T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 93: Max Points and Sum Path</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-93-max-points-and-sum-path.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Laurent is never short of choices. Every task has multiple choices for you to see the differences. Must Read.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/01/perl-weekly-challenge-93-max-points-and-sum-path.html</id>
    <published>2021-01-04T10:00:26Z</published>
    <updated>2021-01-04T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Solving Perl Weekly Challeng 093 -- Max points on the same line, and the sum of binary tree paths.</title>
    <link rel="alternate" href="https://gugod.org/2021/01/pwc-093-en/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Revisit geometry lessons if you are a maths lover. Loved the 'Max Points' solutions.</div>
    </content>
    <id>https://gugod.org/2021/01/pwc-093-en/</id>
    <published>2021-01-04T10:00:25Z</published>
    <updated>2021-01-04T10:00:25Z</updated>
  </entry>
  <entry>
    <title>PWC093 - Sum Path</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/29/pwc093-sum-path/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio dealt with 'Sum Path' task in a unique way. Interesting take, must read.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/29/pwc093-sum-path/</id>
    <published>2021-01-04T10:00:24Z</published>
    <updated>2021-01-04T10:00:24Z</updated>
  </entry>
  <entry>
    <title>PWC093 - Max Points</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2020/12/28/pwc093-max-points/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As expected, Flavio took us to the another planet with great story line. Highly Recommended.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2020/12/28/pwc093-max-points/</id>
    <published>2021-01-04T10:00:23Z</published>
    <updated>2021-01-04T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Drawing a Line from Root to Leaf to Table</title>
    <link rel="alternate" href="https://colincrain.com/2021/01/04/drawing-a-line-from-root-to-leaf-to-table/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thanks Colin for sharing the Mathematics side of the task 'Max Points'. Highly Recommended.</div>
    </content>
    <id>https://colincrain.com/2021/01/04/drawing-a-line-from-root-to-leaf-to-table/</id>
    <published>2021-01-04T10:00:22Z</published>
    <updated>2021-01-04T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Pointy Path with Raku</title>
    <link rel="alternate" href="https://raku-musings.com/pointy-path.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Missing Perl solutions this week. However the Raku solutions will definitely keep you engaged.</div>
    </content>
    <id>https://raku-musings.com/pointy-path.html</id>
    <published>2021-01-04T10:00:21Z</published>
    <updated>2021-01-04T10:00:21Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 93</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-093/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Aaron showing the power of unit tests. I can completely relate to him. Must Read.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-093/</id>
    <published>2021-01-04T10:00:20Z</published>
    <updated>2021-01-04T10:00:20Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 093</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Reading the notes at the end of the blog is the best thing. You don't want to miss out.</div>
    </content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2021/01/03</id>
    <published>2021-01-04T10:00:19Z</published>
    <updated>2021-01-04T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Perl Review - Perl Weekly Challenge - 091</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/review-challenge-091" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Perl Solutions Review by Colin Crain.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/review-challenge-091</id>
    <published>2021-01-04T10:00:18Z</published>
    <updated>2021-01-04T10:00:18Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 093</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-093" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week's contributions by Team PWC dealing with the "Max Points" and "Sum Path" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-093</id>
    <published>2021-01-04T10:00:17Z</published>
    <updated>2021-01-04T10:00:17Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 094</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-094" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with couple of fun tasks "Group Anagrams" and "Binary Tree to Linked List". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-094</id>
    <published>2021-01-04T10:00:16Z</published>
    <updated>2021-01-04T10:00:16Z</updated>
  </entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 1</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" type="text/html"/>
    <id>https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/</id>
    <published>2021-01-04T10:00:15Z</published>
    <updated>2021-01-04T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Thank Manwar!</title>
    <link rel="alternate" href="https://www.patreon.com/manwar/" type="text/html"/>
    <content type="text">My New Year's request is to &lt;a href="https://www.patreon.com/manwar/"&gt;support the work of Manwar&lt;/a&gt;. You know him. He gives the Perl community enormous value via his &lt;a href="https://perlweeklychallenge.org/"&gt;Perl Weekly Challenge&lt;/a&gt; and by being the co-editor of the Perl Weekly&lt;/a&gt;. Even if the connection is indirect, the time and energy he spends on Perl helps us stay employable with Perl. It would be really nice if you, who enjoy the fruits of his work, showed your gratitude via &lt;a href="https://www.patreon.com/manwar/"&gt;his Patreon account&lt;/a&gt;.  It can be as low as $1/month or you can beat the average which is slightly above $6/month.</content>
    <id>https://www.patreon.com/manwar/</id>
    <published>2021-01-04T10:00:14Z</published>
    <updated>2021-01-04T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Bulk downloading all episodes of a podcast</title>
    <link rel="alternate" href="https://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A two step download process. 1) Prepare the list of URLs to be downloaded. 2) Download. All that in 10 lines of Perl.</div>
    </content>
    <id>https://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html</id>
    <published>2021-01-04T10:00:13Z</published>
    <updated>2021-01-04T10:00:13Z</updated>
  </entry>
  <entry>
    <title>In which subject in Perl do you feel you need better knowledge?</title>
    <link rel="alternate" href="https://www.linkedin.com/feed/update/urn:li:activity:6751738129025134592" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">OOP? Functional programming? Testing? Web development? I am running a poll asking just that question.</div>
    </content>
    <id>https://www.linkedin.com/feed/update/urn:li:activity:6751738129025134592</id>
    <published>2021-01-04T10:00:12Z</published>
    <updated>2021-01-04T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Coding in Perl? What support do you need?</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/newperluserssurvey" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The Perl Foundation would like to know if they can offer some support for Perl that might help you. There was quite some discussion on <a href="https://www.reddit.com/r/perl/comments/ko88ie/coding_in_perl_what_support_do_you_need/">Reddit</a> in response to this link. Especially read the comments by brian d foy.</div>
    </content>
    <id>https://news.perlfoundation.org/post/newperluserssurvey</id>
    <published>2021-01-04T10:00:11Z</published>
    <updated>2021-01-04T10:00:11Z</updated>
  </entry>
  <entry>
    <title>How has your Perl knowledge influenced the way you program as a whole?</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/kp9k3e/how_has_your_perl_knowledge_influenced_the_way/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Some really interesting and fun comments. Let's read yours as well!</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/kp9k3e/how_has_your_perl_knowledge_influenced_the_way/</id>
    <published>2021-01-04T10:00:10Z</published>
    <updated>2021-01-04T10:00:10Z</updated>
  </entry>
  <entry>
    <title>I made a podcast about regular expressions </title>
    <link rel="alternate" href="https://dev.to/eugenekudashev/i-made-a-podcast-about-regular-expressions-3h67" type="text/html"/>
    <id>https://dev.to/eugenekudashev/i-made-a-podcast-about-regular-expressions-3h67</id>
    <published>2021-01-04T10:00:09Z</published>
    <updated>2021-01-04T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Programs to Compute Trig Functions in Python, JavaScript, &amp; Perl (with Maclaurin Series)</title>
    <link rel="alternate" href="https://xtrp.io/blog/2020/12/31/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/" type="text/html"/>
    <id>https://xtrp.io/blog/2020/12/31/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/</id>
    <published>2021-01-04T10:00:08Z</published>
    <updated>2021-01-04T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Dijkstra Algorithm - as functions only</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/01/02/dijkstra-function/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/01/02/dijkstra-function/</id>
    <published>2021-01-04T10:00:07Z</published>
    <updated>2021-01-04T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Ben Bullock is Making Headway Now</title>
    <link rel="alternate" href="http://blogs.perl.org/users/ben_bullock/2020/12/im-making-headway-now.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Stack overflow at 80,000 brackets in JSON. Who even needs 80,000 brackets?</div>
    </content>
    <id>http://blogs.perl.org/users/ben_bullock/2020/12/im-making-headway-now.html</id>
    <published>2021-01-04T10:00:06Z</published>
    <updated>2021-01-04T10:00:06Z</updated>
  </entry>
  <entry>
    <title>Debunking Perl Myths</title>
    <link rel="alternate" href="https://www.linkedin.com/pulse/perl-myths-pritesh-ugrankar/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I don't think I've ever seen a post by Pritesh, but I do have an e-mail exchange with him a few years ago when he asked for my opinion about learning more Perl or learning Python. 7 years have passed and suddenly he goes out and he writes a terrific post on LinkedIn. See also the discussion on <a href="https://www.reddit.com/r/perl/comments/ko9hbk/my_first_perl_article_on_linkedin/">reddit</a>.</div>
    </content>
    <id>https://www.linkedin.com/pulse/perl-myths-pritesh-ugrankar/</id>
    <published>2021-01-04T10:00:05Z</published>
    <updated>2021-01-04T10:00:05Z</updated>
  </entry>
  <entry>
    <title>A static archive or rt.cpan.org</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/kn3fsg/i_have_created_a_static_archive_or_rtcpanorg/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">You read the news that <a href="http://rt.cpan.org">rt.cpan.org</a> is going to be shut down, right?, Lee Johnson created a <a href="https://rt-cpan.github.io/">static archive</a> of it.</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/kn3fsg/i_have_created_a_static_archive_or_rtcpanorg/</id>
    <published>2021-01-04T10:00:04Z</published>
    <updated>2021-01-04T10:00:04Z</updated>
  </entry>
  <entry>
    <title>Evaluate Perl project for new client - assessment</title>
    <link rel="alternate" href="https://perlmaven.com/evaluate-project" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.</div>
    </content>
    <id>https://perlmaven.com/evaluate-project</id>
    <published>2021-01-04T10:00:03Z</published>
    <updated>2021-01-04T10:00:03Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/01/10-best-perl-distributions-created-at.html"&gt;10 best perl distributions created in 2020 (MetaCPAN rating)&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/metacpan-most-voted-distributions-in.html"&gt;MetaCPAN's most upvoted distributions in 2020&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/01/20-best-perl-questions-at-stackoverflow.html"&gt;20 best Perl questions at stackoverflow in 2020&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-01-04T10:00:02Z</published>
    <updated>2021-01-04T10:00:02Z</updated>
  </entry>
  <entry>
    <title>New Year. New Perl.</title>
    <link rel="alternate" href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition" type="text/html"/>
    <content type="text">In 2021, try &lt;a href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition"&gt;a whole new Perl ecosystem&lt;/a&gt; with:
&lt;li&gt;A unified, cloud-based toolchain for Linux &amp; Windows (replaces PPM)&lt;/li&gt;
&lt;li&gt;Virtual environment support (similar to Python's virtualenv)&lt;/li&gt;
&lt;li&gt;Pure open source licensing (no more ActiveState license)&lt;/li&gt;
A new way to install, work with, and even &lt;a href="https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition"&gt;consume Perl&lt;/a&gt; in 2021.
</content>
    <id>https://www.activestate.com/perl-532/?utm_source=Perl-weekly-newsletter&amp;utm_medium=cpc&amp;utm_content=perl-532-ad&amp;utm_campaign=user-acquisition</id>
    <published>2021-01-04T10:00:01Z</published>
    <updated>2021-01-04T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#493 - Happy 2021!</title>
    <link rel="alternate" href="http://perlweekly.com/archive/493.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi and welcome to 2021!&lt;/p&gt;
&lt;p&gt;I just got the first shot of the COVID-19 vaccine this morning.&lt;/p&gt;
&lt;p&gt;My New Year's request is to &lt;a href="https://www.patreon.com/manwar/"&gt;support the work of Manwar&lt;/a&gt;. You know him. He gives the Perl community enormous value via his &lt;a href="https://perlweeklychallenge.org/"&gt;Perl Weekly Challenge&lt;/a&gt; and by being the co-editor of the Perl Weekly&lt;/a&gt;. He is now at $105 from 16 people. Let's double both numbers!&lt;/p&gt;
&lt;p&gt;I am running a poll: &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6751738129025134592/"&gt;In which subject in Perl do you feel you'd need better knowledge?&lt;/a&gt; and The Perl Foundations is running a survey: &lt;a href="https://news.perlfoundation.org/post/newperluserssurvey"&gt;Coding in Perl? What support do you need?&lt;/a&gt;. They will take less than five minutes of your time. Please fill them both in.&lt;/p&gt;
&lt;p&gt;Enjoy the next year!&lt;/p&gt;</content>
    <id>http://perlweekly.com/archive/493.html</id>
    <published>2021-01-04T10:00:00Z</published>
    <updated>2021-01-04T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 093</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/01/03#pwc093" type="text/html"/>
    <content type="html">&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given set of co-ordinates &lt;span class="citation" data-cites="N"&gt;@N&lt;/span&gt;. Write a script to count maximum points on a straight line when given co-ordinates plotted on 2-d plane.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given set of co-ordinates @N.
# Write a script to count maximum points 
# on a straight line when given co-ordinates 
# plotted on 2-d plane.
##
sub triangle_area{
    my($i, $j, $k) = @_;
    return ($i-&gt;[0] * ($j-&gt;[1] - $k-&gt;[1])) 
         + ($j-&gt;[0] * ($k-&gt;[1] - $i-&gt;[1]))
         + ($k-&gt;[0] * ($i-&gt;[1] - $j-&gt;[1]));
}

sub collinear_points{
    my(@points) = @_;
    my @collinear;
    for my $i (@points){
        for my $j (@points){
            for my $k (@points){
                if(triangle_area($i, $j, $k) == 0){
                    my $i_string = join(",", @{$i});
                    my $j_string = join(",", @{$j});
                    my $k_string = join(",", @{$k});
                    if(($i_string ne $j_string) &amp;&amp; ($i_string ne $k_string) &amp;&amp; ($j_string ne $k_string)){
                        my $has_i = grep { $i_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $i if !$has_i;
                        my $has_j = grep { $j_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $j if !$has_j;
                        my $has_k = grep { $k_string eq join(",", @{$_}) } @collinear;
                        push @collinear, $k if !$has_k;
                    }
                }
            }
        }
    }
    return @collinear;
}

MAIN:{
    my @N;
    @N = ([5,3], [1,1], [2,2], [3,1], [1,3]);
    my @collinear = collinear_points(@N);
    print "There are a maximum of " . @collinear . " collinear points.\n"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
There are a maximum of 3 collinear points.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Keep in mind that any two points determine a line. Therefore to consider all possible non-trivial lines we need to review all triples of points. This method will work in the most general case when the starting data may contain multiple lines with a larger number of points.&lt;/p&gt;
&lt;p&gt;In determining collinearity I calculate the area of a triangle using the triple of points. If the area is zero we know that all the points lay on the same line.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a binary tree containing only the numbers 0-9. Write a script to sum all possible paths from root to leaf.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given a binary tree containing 
# only the numbers 0-9.
# Write a script to sum all possible paths 
# from root to leaf.
##
use Graph;

sub travserse_sum{
    my($tree) = @_;
    my @paths = build_paths($tree);
    my $path_sum = 0;
    for my $path (@paths){
        $path_sum +=  unpack("%32C*", pack("C*", @{$path})); 
    }
    return $path_sum;
}

sub build_paths {
   my ($graph) = @_;
   my @paths;
   local *_helper = sub{
      my $v = $_[-1];
      my @successors = $graph-&gt;successors($v);
      if(@successors){
         _helper(@_, $_) for @successors;
      } 
      else{
         push @paths, [@_];
      }
   };
   _helper($_) for $graph-&gt;source_vertices();
   return @paths;
}

MAIN:{
    my $Tree;
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(2, 3);
    $Tree-&gt;add_edge(2, 4);
    print travserse_sum($Tree) . "\n";
    
    $Tree = new Graph();
    $Tree-&gt;add_vertices(1, 2, 3, 4, 5, 6);
    $Tree-&gt;add_edge(1, 2);
    $Tree-&gt;add_edge(1, 3);
    $Tree-&gt;add_edge(2, 4);
    $Tree-&gt;add_edge(3, 5);
    $Tree-&gt;add_edge(3, 6);
    print travserse_sum($Tree) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
13
26
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is straightforward enough, at a high level anyway: (1) Get all paths and then (2) sum all the nodes on the paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am always happy to have a chance to use the &lt;a href="https://metacpan.org/pod/distribution/Graph/lib/Graph.pod"&gt;Graph module&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;The Graph module has a bunch of nice algorithms implemented but what we want here is not a &lt;em&gt;shortest path&lt;/em&gt; but &lt;em&gt;all paths&lt;/em&gt;. The Graph module doesn’t have anything for us to use for that. Implementing a recursive &lt;em&gt;Depth First Search&lt;/em&gt; and collecting all the paths is not such a hard thing to do, but in the &lt;strong&gt;Holiday Spirit&lt;/strong&gt; (i.e. laziness) I just re-used &lt;a href="https://www.perlmonks.org/?node_id=381608"&gt;Ikegami&lt;/a&gt;’s code. See the References section.&lt;/li&gt;
&lt;li&gt;I first used the pack/unpack trick for summing array back in &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/perl/2019/05/09"&gt;Challenge 007&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mathworld.wolfram.com/Collinear.html"&gt;Collinear Points&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/41646812/4705722"&gt;All Paths&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc093</id>
    <published>2021-01-03T16:37:00-05:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Bulk downloading all episodes of a podcast</title>
    <link href="http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html"/>
    <id>http://domm.plix.at/perl/2021_01_download_all_podcast_episodes.html</id>
    <updated>2021-01-03T14:51:24+00:00</updated>
    <category term="perl"/>
    <summary type="html">In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want MP3s on my hard disk (and/or vinyl on my record player). I want ...</summary>
    <content type="html">&lt;p&gt;In some regards, I'm a very old school person. For example I do not like the concept of streaming audio (via Spotify et.al.). I want &lt;span class="caps"&gt;MP3&lt;/span&gt;s on my hard disk (and/or vinyl on my record player). I want access to my music when I'm offline (and I'm offline a lot) and without using a so-called smart phone (I prefer vintage &lt;span class="caps"&gt;USB&lt;/span&gt;-stick &lt;span class="caps"&gt;MP3 &lt;/span&gt;players). My partner thinks the same (I guess 25+ years of my propaganda had some influence..).&lt;/p&gt;

&lt;p&gt;But "modern" sites make it rather hard to actually download content (even if it's free). They offer links to a myriad of apps, but often no download button. At least a lot of podcasts still provide an &lt;span class="caps"&gt;RSS &lt;/span&gt;feed. So when my partner cannot download a newly discovered podcast, she asked me if I can do it for her. Which I'm of course happy to do, and which is often done with a few lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl

use strict;
use warnings;
use 5.030;

use XML::Feed;
use URI;
use String::Ident;

my $feed = XML::Feed-&amp;gt;parse( URI-&amp;gt;new( $ARGV[0] ) );

for my $entry ( $feed-&amp;gt;entries ) {
    my $date = $entry-&amp;gt;issued;
    $date =~ s/T.*$//;
    my $filename = join( '-', $date, String::Ident-&amp;gt;cleanup( $entry-&amp;gt;title ) ) . '.mp3';
    next if -f $filename;
    say &amp;quot;wget -O $filename &amp;quot; . $entry-&amp;gt;enclosure-&amp;gt;url;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I use &lt;a href="https://metacpan.org/pod/XML::Feed"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt;::Feed&lt;/a&gt; to fetch and parse the &lt;span class="caps"&gt;RSS &lt;/span&gt;feed, passing in the &lt;span class="caps"&gt;URL &lt;/span&gt;as the first command line argument. I create a nice filename based on the date the podcast was &lt;code&gt;issued&lt;/code&gt; (removing the time-part) and a &lt;code&gt;cleanup()ed&lt;/code&gt; version of the title. (&lt;a href="https://metacpan.org/pod/String::Ident"&gt;String::Ident&lt;/a&gt; is a nice little helper module Jozef created for a project we were working on some time ago).&lt;/p&gt;

&lt;p&gt;If the filename already exists in the current directory, we skip, because we don't need to download it again.&lt;/p&gt;

&lt;p&gt;Then I output a &lt;a href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; command to download the &lt;span class="caps"&gt;URL &lt;/span&gt;(provided by &lt;code&gt;$entry-&amp;gt;enclosure-&amp;gt;url&lt;/code&gt;) and save it under the nice filename.&lt;/p&gt;

&lt;p&gt;Why do I not download the file directly in the script?&lt;/p&gt;

&lt;p&gt;I just find it easier to use an external tool, especially as I like to pipe the output of this script into a file, so I can munge the file a bit. Eg, for this podcast, I did not download all 131 episodes, but only the 5 oldest and the 5 newest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/media/podcasts$ fetch_podcast.pl https://example.com/podcast.rss &amp;gt; all
~/media/podcasts$ head -n 5 all &amp;gt; test_it
~/media/podcasts$ tail -n 5 all &amp;gt;&amp;gt; test_it
~/media/podcasts$ bash test_it
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and easy!&lt;/p&gt;</content>
    <category term="automatization"/>
    <category term="~/bin"/>
  </entry>
  <entry>
  <title>Phishing Attack on CPAN Authors</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/phishing-attack-on-cpan-authors"/>
  <id>tag:news.perlfoundation.org,2021-01-03:/post/phishing-attack-on-cpan-authors</id>
  <published>2021-01-03T10:22:20</published>
  <updated>2021-01-03T10:22:20</updated>
  <summary>
  <![CDATA[
     We've been alerted to a phishing attack against CPAN authors. The image below shows what it looks like. One way you can protect yourself against such attacks is by configuring a secret email address for your PAUSE account. This address will be used for all contacts from the PAUSE/CPAN system, but will never be shared publicly. If you've clicked on the link and entered any credentials, you should change the 
   ]]>
  </summary>
  <author>
    <name>Dave Rolsky</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/8a2ca0dee5b0d02ec36b0f75a5e9542b9aa4dcf5/CPAN-phishing-012021.jpg" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>We've been alerted to a phishing attack against CPAN authors. The image below shows what it looks like.</p>

<p><img src="_ra-rel-mnt_/simplecas/fetch_content/8a2ca0dee5b0d02ec36b0f75a5e9542b9aa4dcf5/CPAN-phishing-012021.jpg" style="max-width:100%; max-height: 700px" /></p>

<p>One way you can protect yourself against such attacks is by <a href="https://pause.cpan.org/pause/authenquery?ACTION=edit_cred">configuring a secret email address for your PAUSE account</a>. This address will be used for all contacts from the PAUSE/CPAN system, but will never be shared publicly.</p>

<p>If you've clicked on the link and entered any credentials, you should change the relevant password immediately. If you entered your PAUSE credentials, please check your recent uploads for any suspicious new packages. The easiest way to check this is through your MetaCPAN author releases page, like <a href="https://metacpan.org/author/DROLSKY/releases">metacpan.org/author/DROLSKY/releases</a>. If you find something suspicious, please download a copy, delete it from PAUSE, and alert <a href="mailto:modules@perl.org">modules@perl.org</a>.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>CPAN vs Hackage releases, Part 1</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" type="text/html"/>
    <content type="html">&lt;p&gt;Back in mid-November 2020, I noticed that &lt;a href="https://hackage.haskell.org/"&gt;Hackage&lt;/a&gt; (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. &lt;/p&gt;
&lt;p&gt;Since the &lt;a href="https://hackage.haskell.org/api"&gt;Hackage API&lt;/a&gt; does not provide a way to list releases (uploads), I had to &lt;a href="https://metacpan.org/pod/http-tiny-plugin-every"&gt;download&lt;/a&gt; the &lt;a href="http://hackage.haskell.org/packages/recent"&gt;recent additions&lt;/a&gt; page periodically, &lt;a href="https://github.com/sharyanto/scripts/blob/master/parse-hackage-page"&gt;parse&lt;/a&gt; each page, and &lt;a href="https://metacpan.org/pod/combine-overlap"&gt;merge&lt;/a&gt; the results into a single large list. Because I have just collected the recent additions page since mid-November, I&amp;#039;m looking at December 2020 period. &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% http-tiny-plugin-every --every 3h http://hackage.haskell.org/packages/recent --dir . --trace
% for f in 2*.log; do parse-hackage-page &amp;quot;$f&amp;quot; --format ltsv &amp;gt; &amp;quot;$$.ltsv&amp;quot;; done
% combine-overlap 2*.ltsv &amp;gt; hackage_release_202012.ltsv
&lt;/pre&gt;
&lt;p&gt; For CPAN, the MetaCPAN API lets us query various things in many ways so the simple task of listing recent releases is not a problem at all. I&amp;#039;m using a &lt;a href="https://metacpan.org/pod/list-metacpan-releases"&gt;CLI&lt;/a&gt; to do this: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% list-metacpan-releases --from-date 2020-12-01 --to-date 2020-12-31 --json &amp;gt; cpan_release_202012.json
&lt;/pre&gt;
&lt;p&gt; With this two pieces of data, I just need to perform some SQL (again, using &lt;a href="https://metacpan.org/pod/fsql"&gt;CLI&lt;/a&gt; for this) to get what I want. &lt;/p&gt;
&lt;p&gt;So for December 2020, there are 957 releases: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
957
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 629: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(*) FROM t&amp;#039; -f tsv
COUNT
629
&lt;/pre&gt;
&lt;p&gt; As for number of authors who did releases in this period, the two are more similar: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a cpan_release_202012.json:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
207
&lt;/pre&gt;
&lt;p&gt; while for Hackage there are 191: &lt;/p&gt;
&lt;p&gt;&lt;pre class="fixed_width_section"&gt;% fsql -a hackage_release_202012.ltsv:t &amp;#039;SELECT COUNT(DISTINCT author) FROM t&amp;#039; -f tsv
COUNT
191
&lt;/pre&gt;
&lt;p&gt; So this does confirm my guess that the upload activity for both repositories are currently in the same order of magnitude, but does not confirm the suspicion that Hackage is more active than CPAN, at least in December 2020. I plan to do a follow up next year in January after I collected all 2021 data.&lt;/p&gt;
</content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Back in mid-November 2020, I noticed that Hackage (the Haskell package repository) probably has roughly the same daily upload rate as CPAN, or even higher. Since the Hackage API does not provide a way to list releases (uploads), I had to download the recent additions page periodically, parse each page, and merge the results into … <a href="https://perlancar.wordpress.com/2021/01/03/cpan-vs-hackage-releases-part-1/" class="more-link">Continue reading <span class="screen-reader-text">CPAN vs Hackage releases, Part 1</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1933</id>
    <published>2021-01-03T04:40:59Z</published>
    <updated>2021-01-03T04:40:59Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5796870623252404647</id>
    <published>2021-01-02T15:17:00.002+01:00</published>
    <updated>2021-01-02T15:17:25.799+01:00</updated>
    <title type="text">10 best perl distributions created at 2020 (metacpan rating)</title>
    <content type="html">10 best perl distributions created at 2020 (metacpan rating) &lt;p&gt;This list contains distributions created at 2020&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Zydeco"&gt;Zydeco&lt;/a&gt; (+20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Code::ART"&gt;Code::ART&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Devel::Wherefore"&gt;Devel::Wherefore&lt;/a&gt; (+6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Guacamole"&gt;Guacamole&lt;/a&gt; (+6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/SQL::Bind"&gt;SQL::Bind&lt;/a&gt; (+6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/MLPerl"&gt;MLPerl&lt;/a&gt; (+5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Sub::MultiMethod"&gt;Sub::MultiMethod&lt;/a&gt; (+5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/TOML::Tiny"&gt;TOML::Tiny&lt;/a&gt; (+5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/Pepper"&gt;Pepper&lt;/a&gt; (+4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/RxPerl"&gt;RxPerl&lt;/a&gt; (+4)&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5796870623252404647/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/10-best-perl-distributions-created-at.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5796870623252404647"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5796870623252404647"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/10-best-perl-distributions-created-at.html" title="10 best perl distributions created at 2020 (metacpan rating)"/>
    <author>
      <name>prz</name>
      <uri>http://www.blogger.com/profile/17989445983340548566</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-8719786875290079951</id>
    <published>2021-01-02T15:08:00.000+01:00</published>
    <updated>2021-01-02T15:08:40.044+01:00</updated>
    <title type="text">metacpan most voted distributions in 2020</title>
    <content type="html">&lt;p&gt;This is the metacpan most voted distributions in 2020&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+42)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Zydeco'&gt;Zydeco&lt;/a&gt; (+20)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/perl'&gt;perl&lt;/a&gt; (+17)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Type::Tiny'&gt;Type::Tiny&lt;/a&gt; (+15)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Future::AsyncAwait'&gt;Future::AsyncAwait&lt;/a&gt; (+13)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Path::Tiny'&gt;Path::Tiny&lt;/a&gt; (+12)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Plack'&gt;Plack&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Regexp::Debugger'&gt;Regexp::Debugger&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Rex'&gt;Rex&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Role::Tiny'&gt;Role::Tiny&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Yancy'&gt;Yancy&lt;/a&gt; (+9)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Code::ART'&gt;Code::ART&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Dancer2'&gt;Dancer2&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Log::Log4perl'&gt;Log::Log4perl&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/MCE'&gt;MCE&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Minion'&gt;Minion&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Moose'&gt;Moose&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Sereal'&gt;Sereal&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Template::Toolkit'&gt;Template::Toolkit&lt;/a&gt; (+8)&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/module/Text::CSV_XS'&gt;Text::CSV_XS&lt;/a&gt; (+8)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This is the metacpan most voted distributions in 2020 group by month&lt;/p&gt;&lt;ul&gt;&lt;li&gt;2020-01&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+9)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Future::AsyncAwait'&gt;Future::AsyncAwait&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-02&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Zydeco'&gt;Zydeco&lt;/a&gt; (+8)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Sub::MultiMethod'&gt;Sub::MultiMethod&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-03&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Zydeco'&gt;Zydeco&lt;/a&gt; (+6)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Devel::Wherefore'&gt;Devel::Wherefore&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-04&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+5)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Yancy'&gt;Yancy&lt;/a&gt; (+5)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-05&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/App::lcpan'&gt;App::lcpan&lt;/a&gt; (+5)&lt;br/&gt;&lt;a href='https://metacpan.org/module/JSON'&gt;JSON&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-06&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Role::Tiny'&gt;Role::Tiny&lt;/a&gt; (+9)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Code::ART'&gt;Code::ART&lt;/a&gt; (+7)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-07&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Future::AsyncAwait'&gt;Future::AsyncAwait&lt;/a&gt; (+3)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-08&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Perl::Tidy'&gt;Perl::Tidy&lt;/a&gt; (+3)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Regexp::Common::Markdown'&gt;Regexp::Common::Markdown&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-09&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+4)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Pepper'&gt;Pepper&lt;/a&gt; (+4)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-10&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Ask'&gt;Ask&lt;/a&gt; (+4)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Mojo::PDF'&gt;Mojo::PDF&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-11&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Plack'&gt;Plack&lt;/a&gt; (+4)&lt;br/&gt;&lt;a href='https://metacpan.org/module/Log::Log4perl'&gt;Log::Log4perl&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;li&gt;2020-12&lt;/li&gt;&lt;blockquote&gt;&lt;a href='https://metacpan.org/module/Mojolicious'&gt;Mojolicious&lt;/a&gt; (+3)&lt;br/&gt;&lt;a href='https://metacpan.org/module/XS::Tutorial'&gt;XS::Tutorial&lt;/a&gt; (+3)&lt;br/&gt;&lt;/blockquote&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/8719786875290079951/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/01/metacpan-most-voted-distributions-in.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8719786875290079951"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/8719786875290079951"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/01/metacpan-most-voted-distributions-in.html" title="metacpan most voted distributions in 2020"/>
    <author>
      <name>prz</name>
      <uri>http://www.blogger.com/profile/17989445983340548566</uri>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Frohes Neues Jahr 2021</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Das in vielerlei Hinsicht ungewöhnliche Jahr 2020 ist vorbei. Wir wünschen allen treuen und neuen Leser\*innen unseres Blogs ein frohes neues Jahr. Wir hoffen, dass Sie gut durch das vergangene Jahr gekommen sind und dass 2021 besser wird.</div>
    </content>
    <id>https://blog.perl-academy.de/2021-01-01-frohes-neues-jahr</id>
    <published>2021-01-01T10:00:00Z</published>
    <updated>2021-01-01T10:00:00Z</updated>
  </entry>
  <entry>
    <title>List of new CPAN distributions – Dec 2020</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JWRIGHT/AWS-ARN-0.001">AWS-ARN</a></td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>0.001</td>
<td>Dumb module to parse and generate ARNs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-0.09-TRIAL">AnyPAN</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.09</td>
<td>CPAN Mirror and DarkPAN merging toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARUPA/AnyPAN-Storage-S3-0.05-TRIAL">AnyPAN-Storage-S3</a></td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>0.05</td>
<td>AnyPAN storage plugin for Amazon S3</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-ImageMagickUtils-0.001">App-ImageMagickUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to ImageMagick</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-MetaCPANUtils-0.001">App-MetaCPANUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>CLI utilities related to MetaCPAN</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-OverlapUtils-0.001">App-OverlapUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Command-line utilities related to overlapping lines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/App-Toolforge-MixNMatch-0.01">App-Toolforge-MixNMatch</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool app.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SCHROEDER/App-jupiter-1">App-jupiter</a></td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
<td>an app that serves a river of news as a static page</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Array-OverlapFinder-0.001">Array-OverlapFinder</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Find/remove overlapping items between two ordered sequences</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OKLAS/Async-Template-0.12">Async-Template</a></td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>0.12</td>
<td>Async Template Toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/EXODIST/Atomic-Pipe-0.001">Atomic-Pipe</a></td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>0.001</td>
<td>Send atomic messages from multiple writers across a POSIX pipe.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GWILLIAMS/AtteanX-Store-DBI-0.000_01">AtteanX-Store-DBI</a></td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>0.000_01</td>
<td>Database quad-store</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Badge-Depot-Plugin-Githubactions-0.0100">Badge-Depot-Plugin-Githubactions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Github Actions plugin for Badge::Depot</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-Meta-diff-0.001">CLI-Meta-diff</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Metadata for diff CLI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/CLI-MetaUtil-Getopt-Long-0.001">CLI-MetaUtil-Getopt-Long</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Routine related to Getopt::Long</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLSRVDE/CPANfile-Parse-PPI-0.01">CPANfile-Parse-PPI</a></td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>0.01</td>
<td>Parse cpanfiles with PPI</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DCANTRELL/Data-CompactReadonly-0.0.1">Data-CompactReadonly</a></td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>v0.0.1</td>
<td>a description of CompactReadonly data format, version 0.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOMC/Devel-WatchVars-v1.0.0">Devel-WatchVars</a></td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>v1.0.0</td>
<td>trace access to scalar variables</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Device-Chip-BME280-0.01">Device-Chip-BME280</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>chip driver for BME280</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Dist-Mgr-1.00">Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Distribution development cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-Author-CSSON-GithubActions-0.0100">Dist-Zilla-Plugin-Author-CSSON-GithubActions</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Ease creation of common Github Actions workflows</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CSSON/Dist-Zilla-Plugin-CheckForUnwantedFiles-0.0100">Dist-Zilla-Plugin-CheckForUnwantedFiles</a></td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>0.0100</td>
<td>Check for unwanted files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GTERMARS/Dist-Zilla-PluginBundle-Author-GTERMARS-0.01">Dist-Zilla-PluginBundle-Author-GTERMARS</a></td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>0.01</td>
<td>Plugin Bundle for distributions built by GTERMARS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WATERKIP/Finance-Crypto-Exchange-Kraken-0.001">Finance-Crypto-Exchange-Kraken</a></td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>0.001</td>
<td>A Perl implementation of the Kraken REST API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MARKWIN/Finance-IG-0.01">Finance-IG</a></td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>0.01</td>
<td>– Module for doing useful stuff with IG Markets REST API.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Geo-Compass-Direction-0.01">Geo-Compass-Direction</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Convert a compass heading degree into human readable direction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-0.06">HEAT-Crypto</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.06</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TMM/HEAT-Crypto-X25519-0.04">HEAT-Crypto-X25519</a></td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>0.04</td>
<td>HEAT cryptographic routines</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Health-BladderDiary-GenChart-0.001">Health-BladderDiary-GenChart</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Create bladder diary table from entries</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/JavaScript-Const-Exporter-v0.1.0">JavaScript-Const-Exporter</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Convert exported Perl constants to JavaScript</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/LocalConf-Parser-0.01">LocalConf-Parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NHORNE/Locale-Places-0.01">Locale-Places</a></td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>0.01</td>
<td>Translate places using <a href="http://download.geonames.org/" rel="nofollow">http://download.geonames.org/</a></td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log-Log4perl-Appender-Redis-0.01">Log-Log4perl-Appender-Redis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseBaheForDump-0.001">Log-ger-UseBaheForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use Data::Bahe to dump data structures</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseJSONForDump-0.003">Log-ger-UseJSONForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Use JSON::MaybeXS to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Log-ger-UseYAMLForDump-0.001">Log-ger-UseYAMLForDump</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Use YAML::PP to dump data structures (as JSON)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FRAZAO/Log4perlAppenderRedis-0.01">Log4perlAppenderRedis</a></td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>0.01</td>
<td>Log to a Redis channel</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VVELOX/LogicMonitor-REST-Signature-0.0.1">LogicMonitor-REST-Signature</a></td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>v0.0.1</td>
<td>Builds LMv1 token header info for Logicmonitor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TURNERJW/LyricFinder-1.00">LyricFinder</a></td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1.00</td>
<td>Fetch song lyrics from several internet lyric sites.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TRIZEN/Math-Sidef-0.01">Math-Sidef</a></td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>0.01</td>
<td>Perl interface to Sidef's mathematical library.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Mo-utils-0.01">Mo-utils</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Mo utilities.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Module-Installed-1.00">Module-Installed</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Check whether a module, or a file's list of includes are installed.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Mojolicious-Plugin-Parametry-1.001001">Mojolicious-Plugin-Parametry</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Mojolicious plugin providing param helpers</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAMI/MsOffice-Word-Template-1.0">MsOffice-Word-Template</a></td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1.0</td>
<td>treat a Word document as Template Toolkit document</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-Chord-Progression-0.0001">Music-Chord-Progression</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0001</td>
<td>Create network transition chord progressions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Inversion-0.0100">Music-MelodicDevice-Inversion</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply melodic inversion to a series of notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Ornamentation-0.0100">Music-MelodicDevice-Ornamentation</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Chromatic and diatonic musical ornamentation</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Music-MelodicDevice-Transposition-0.0100">Music-MelodicDevice-Transposition</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0100</td>
<td>Apply chromatic and diatonic transposition to notes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Nano-0.01">Nano</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Minimalist Object Persistence</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/WESLEY/Net-Cloudflare-DNS-0.01">Net-Cloudflare-DNS</a></td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>0.01</td>
<td>DNS API for Cloudflare API v4</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/Net-OAuth2Server-TokenExchange-0.001">Net-OAuth2Server-TokenExchange</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.001</td>
<td>A Token Exchange extension for Net::OAuth2Server</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OETIKER/PDF-QRCode-0.1.0">PDF-QRCode</a></td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>v0.1.0</td>
<td>Add QRCode method to PDF::API2</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LEONT/PerlIO-bom-0.001">PerlIO-bom</a></td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>0.001</td>
<td>Automatic BOM handling in Unicode IO</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DAVECROSS/Plack-App-DirectoryIndex-0.0.1">Plack-App-DirectoryIndex</a></td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>v0.0.1</td>
<td>Serve static files from document root with an index file.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Plack-Middleware-Text-Minify-v0.1.0">Plack-Middleware-Text-Minify</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>minify text responses on the fly</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueCurses-0.0.1">RogueCurses</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.0.1</td>
<td>game system for RPG/Adventure games using Curses.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/RogueQuest-0.1.1">RogueQuest</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>game system for RPG/Adventure games using SDL for graphics.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MRDVT/SMS-Send-Adapter-Node-Red-0.04">SMS-Send-Adapter-Node-Red</a></td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>0.04</td>
<td>SMS::Send Adapter to Node-RED JSON HTTP request</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ARISTOTLE/SQL-PatchDAG-0.100">SQL-PatchDAG</a></td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>0.100</td>
<td>A minimal DB schema patch manager</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/STEVEB-Dist-Mgr-0.01">STEVEB-Dist-Mgr</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>My distribution release cycle toolkit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GENE/Statocles-Plugin-AudioTag-0.0102">Statocles-Plugin-AudioTag</a></td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>0.0102</td>
<td>Change mp3 anchors to audio elements</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Syntax-Check-1.00">Syntax-Check</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>1.00</td>
<td>Wraps 'perl -c' so it works even if modules are unavailable</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMCOP/Sys-Linux-KernelVersion-0.100">Sys-Linux-KernelVersion</a></td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>0.100</td>
<td>Gives tools for checking the current running linux kernel version</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZOFFIX/Test-Mojo-Role-DOMinizer-1.001001">Test-Mojo-Role-DOMinizer</a></td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>1.001001</td>
<td>Test::Mojo role to examine DOM mid test chain</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Text-Minify-XS-v0.1.0">Text-Minify-XS</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>Simple text minification</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Diff-0.01">Toolforge-MixNMatch-Diff</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool diff.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Object-0.01">Toolforge-MixNMatch-Object</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool objects.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Print-0.01">Toolforge-MixNMatch-Print</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool object print routines.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Toolforge-MixNMatch-Struct-0.01">Toolforge-MixNMatch-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Toolforge Mix'n'match tool structures.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GETTY/WWW-Picnic-0.001">WWW-Picnic</a></td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>0.001</td>
<td>Library to access Picnic Supermarket API
</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-0.01">Wikibase-Datatype</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SKIM/Wikibase-Datatype-Struct-0.01">Wikibase-Datatype-Struct</a></td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>0.01</td>
<td>Wikibase data types struct conversions.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/STEVEB/Word-Rhymes-0.01">Word-Rhymes</a></td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>0.01</td>
<td>Takes a word and fetches rhyming matches from RhymeZone.com</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/WordList-ColorName-Any-0.002">WordList-ColorName-Any</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Wordlist from any Graphics::ColorNames::* module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Json-0.01">Zing-Encoder-Json</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JSON Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Encoder-Jwt-0.01">Zing-Encoder-Jwt</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>JWT Serialization Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Mysql-0.01">Zing-Store-Mysql</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Mysql Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Pg-0.01">Zing-Store-Pg</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Postgres Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Redis-0.01">Zing-Store-Redis</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Redis Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Store-Sqlite-0.01">Zing-Store-Sqlite</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Sqlite Storage Abstraction</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/AWNCORP/Zing-Zang-0.01">Zing-Zang</a></td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>0.01</td>
<td>Callback-based Zing Processes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NICKNIU/config-parser-0.01">config-parser</a></td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>0.01</td>
<td>read config to an hashref from local conf files.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ART/crazy-fast-media-scan-0.001-TRIAL">crazy-fast-media-scan</a></td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>0.001</td>
<td>methods to identify files using random sampling</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>39</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>11</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/SKIM">SKIM</a></td>
<td>8</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/AWNCORP">AWNCORP</a></td>
<td>8</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/STEVEB">STEVEB</a></td>
<td>6</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/GENE">GENE</a></td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/CSSON">CSSON</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/KARUPA">KARUPA</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/FRAZAO">FRAZAO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/NICKNIU">NICKNIU</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/ZOFFIX">ZOFFIX</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/TMM">TMM</a></td>
<td>2</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/ARISTOTLE">ARISTOTLE</a></td>
<td>2</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/NHORNE">NHORNE</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/EXODIST">EXODIST</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/TOMC">TOMC</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/TRIZEN">TRIZEN</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/GWILLIAMS">GWILLIAMS</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/GETTY">GETTY</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/SIMCOP">SIMCOP</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/DAVECROSS">DAVECROSS</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/LEONT">LEONT</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/OKLAS">OKLAS</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/GTERMARS">GTERMARS</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/WATERKIP">WATERKIP</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/TURNERJW">TURNERJW</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/MRDVT">MRDVT</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/DAMI">DAMI</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/PERLSRVDE">PERLSRVDE</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/DCANTRELL">DCANTRELL</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/OETIKER">OETIKER</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/VVELOX">VVELOX</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/JWRIGHT">JWRIGHT</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/ART">ART</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/SCHROEDER">SCHROEDER</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/WESLEY">WESLEY</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/MARKWIN">MARKWIN</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract AWS-ARN JWRIGHT 0.001 Dumb module to parse and generate ARNs AnyPAN KARUPA 0.09 CPAN Mirror and DarkPAN merging toolkit AnyPAN-Storage-S3 KARUPA 0.05 AnyPAN storage plugin for Amazon S3 App-ImageMagickUtils PERLANCAR 0.001 Utilities related to ImageMagick App-MetaCPANUtils PERLANCAR 0.001 CLI utilities related to MetaCPAN App-OverlapUtils PERLANCAR 0.001 Command-line utilities related to overlapping … <a href="https://perlancar.wordpress.com/2021/01/01/list-of-new-cpan-distributions-dec-2020/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Dec 2020</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1931</id>
    <published>2021-01-01T00:32:41Z</published>
    <updated>2021-01-01T00:32:41Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Programs to Compute Trig Functions in Python, JavaScript, &amp; Perl (with Maclaurin Series)</title>
    <link rel="alternate" href="https://dev.to/xtrp/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurin-series-4ce9" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;Originally published &lt;a href="https://xtrp.io/blog/2020/12/31/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/"&gt;here at xtrp.io&lt;/a&gt;, my blog about computer science and just about anything programming.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever wondered how your computer calculates certain mathematical functions, like division, or trigonometric functions like sine or cosine? Well, for some of these mathematical functions, there exist useful formulas to calculate very accurate results pretty easily. For sine and cosine, one commonly used formula looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2C54cIXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/sinseries.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2C54cIXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/sinseries.jpg" alt="Maclaurin Series of sin(x)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for cosine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-WfBO9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/cosseries.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-WfBO9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xtrp.io/api/content/static_files/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurintaylor-series/cosseries.jpg" alt="Maclaurin Series of cos(x)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the input of each function is in radians, not degrees.&lt;/p&gt;

&lt;p&gt;The series used in both formulas is called a &lt;a href="https://mathworld.wolfram.com/TaylorSeries.html"&gt;Maclaurin series&lt;/a&gt; (a type of &lt;a href="https://mathworld.wolfram.com/MaclaurinSeries.html"&gt;Taylor series&lt;/a&gt;), and can be derived from the sine and cosine functions with a series expansion. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-programs-work" class="anchor"&gt;
  &lt;/a&gt;
  How the Programs Work
&lt;/h2&gt;

&lt;p&gt;I've written programs to implement these two computations in three major scripting languages: Python, JavaScript, and Perl. These programs do not include any built-in trig functions or other utilities except the use of the in-built π constant in some cases. All code is CC0 licensed.&lt;/p&gt;

&lt;p&gt;The approach I used creates a generalized function called &lt;code&gt;computeSeries&lt;/code&gt; which takes in x as the number to calculate the sine or cosine of, a starting number in the series (x for sine and 1 for cosine), and the exponent and factorial base in the first term of the series (3 for sine and 2 for cosine).&lt;/p&gt;

&lt;p&gt;In calculating each series, I found that only about 10 terms in the series were needed to get a decently accurate result. &lt;/p&gt;

&lt;p&gt;The programs additionally include utility functions for sine and cosine functions in degrees. The end of each program also includes a few tests of each function, which work as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-python" class="anchor"&gt;
  &lt;/a&gt;
  In Python
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://gist.github.com/xtrp/2a5f0d82cff8c14867dabd22e0209933"&gt;view the below code as a GitHub Gist&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;

&lt;span class="c1"&gt;# round a number (x) to nearest 10 digits
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get the factorial of a number (x)
# factorial(x) is the product of every number from 1 to N inclusive
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# n is the result
&lt;/span&gt;    &lt;span class="c1"&gt;# multiply n by every number from 1 to x inclusive
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="s"&gt;""" get the result of the cos and sin formulas
    where the functions are sin(x radians) or cos(x radians),
    n is the start value (n = x for sin, n = 1 for cos), and
    i_start is the exponent and factorial base in the first term """&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="c1"&gt;# iterations is twice the amount of terms to use
&lt;/span&gt;    &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# i increases by 2 each term
&lt;/span&gt;        &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# alternates between addition and subtraction each term
&lt;/span&gt;        &lt;span class="n"&gt;next_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# each term is (x^i) / i!
&lt;/span&gt;        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;next_term&lt;/span&gt; &lt;span class="c1"&gt;# add or subtract from final result
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="c1"&gt;# get sin of x radians
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# get cos of x radians
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# get sin of x degrees
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get cos of x degrees
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# test the functions
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.78801
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.5
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 0.615661
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  In JavaScript
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://gist.github.com/xtrp/a348743383cc80121ab9964ef1f7f1ac"&gt;view the below code as a GitHub Gist&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// round a number (x) to nearest 10 digits&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// get the factorial of a number (x)&lt;/span&gt;
&lt;span class="c1"&gt;// factorial(x) is the product of every number from 1 to x inclusive&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// n is the result&lt;/span&gt;
    &lt;span class="c1"&gt;// multiply n by every number from 1 to x inclusive&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* get the result of the cos and sin formulas
   where the functions are sin(x radians) or cos(x radians),
   n is the start value (x for sin, 1 for cos), and i_start
   is the exponent and factorial base in the first term */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computeSeries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// iterations is twice the amount of terms to use&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;i_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// alternates between addition and subtraction each iteration&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;next_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// each term is (x^i) / i!&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;next_term&lt;/span&gt; &lt;span class="c1"&gt;// add or subtract from final result&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// i increases by 2 each term&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// get sin of x radians&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// get cos of x radians&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// get sin of x degrees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sinDeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// get cos of x degrees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cosDeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// test the functions&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.7071&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.78801&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.7071&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 0.615661&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-perl" class="anchor"&gt;
  &lt;/a&gt;
  In Perl
&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;a href="https://gist.github.com/xtrp/d93263899c7107f6a60517a084bf5388"&gt;view the below code as a GitHub Gist&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;warnings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14159265358979323&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# get the factorial of a number (x)&lt;/span&gt;
&lt;span class="c1"&gt;# factorial(x) is the product of every number from 1 to N inclusive&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# n is the result&lt;/span&gt;
    &lt;span class="c1"&gt;# multiply n by every number from 1 to x inclusive&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;@nums_to_multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@nums_to_multiply&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="vg"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;=begin
get the result of the cos and sin formulas
where the functions are sin(x radians) or cos(x radians),
n is the start value (n = x for sin, n = 1 for cos), and
i_start is the exponent and factorial base in the first term
=cut&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;computeSeries&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$ITERATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# iterations is twice the amount of terms to use&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$i_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;$i_start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$ITERATIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$multiplier&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# alternates between addition and subtraction each term&lt;/span&gt;
        &lt;span class="nv"&gt;$n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;$x**$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sr"&gt;/ factorial($i)); # add or subtract ((x^i) /&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;final&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt;
        &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# i increases by 2 each term&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# get sin of x radians&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;mySin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# get cos of x radians&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;myCos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;computeSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# get sin of x degrees&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;sinDeg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;mySin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# get cos of x degrees&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;cosDeg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;myCos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# test the functions&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;sinDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.78801&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.7071&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cosDeg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;");&lt;/span&gt; &lt;span class="c1"&gt;# 0.615661&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this helps in understanding how computers and languages would go about calculating trigonometric functions like sine and cosine. If you'd like to read more about how exactly mathematical formulas used to calculate the trig functions are derived, I would recommend taking a look at &lt;a href="https://www.khanacademy.org/math/old-ap-calculus-bc/bc-series"&gt;the videos on Taylor and Maclaurin series&lt;/a&gt; by Khan Academy.&lt;/p&gt;

&lt;p&gt;These programs are all licensed under the CC0 license, so feel free to use any of the code as you wish, without attribution.&lt;/p&gt;

&lt;p&gt;Thanks for scrolling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This post is originally from &lt;a href="https://xtrp.io/"&gt;my blog at xtrp.io&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;— Gabriel Romualdo, December 31, 2020&lt;/em&gt;&lt;/p&gt;

</content>
    <author>
      <name>Gabriel Romualdo</name>
    </author>
    <id>https://dev.to/xtrp/three-quick-programs-to-compute-trig-functions-in-python-javascript-perl-with-maclaurin-series-4ce9</id>
    <published>2020-12-31T21:23:17Z</published>
    <updated>2020-12-31T21:23:17Z</updated>
    <category term="python"/>
    <category term="javascript"/>
    <category term="perl"/>
    <category term="math"/>
  </entry>
  <entry>
  <title>Coding in Perl? What support do you need?</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/newperluserssurvey"/>
  <id>tag:news.perlfoundation.org,2020-12-31:/post/newperluserssurvey</id>
  <published>2020-12-31T12:16:46</published>
  <updated>2020-12-31T12:16:46</updated>
  <summary>
  <![CDATA[
     Learning Perl programming is a rewarding experience. But equally tough without the right support. What would be useful to you as part of your learning and development?
Take part in our survey.
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Learning Perl programming is a rewarding experience. But equally tough without the right support. What would be useful to you as part of your learning and development?</p>

<p><a href="https://www.surveymonkey.com/r/7YCL7JZ"><img src="_ra-rel-mnt_/simplecas/fetch_content/496f7560e08fe40ef1b2d427f1920adb7e48886f/Take survey.jpg" style="max-width:100%;" /></a></p>

<p>Examples of how you might need support include:</p>

<ul>
<li><p>Developers moving into Perl needing to bounce around ideas and code snippets in order to translate the concepts they have learnt in other languages into Perl.</p></li>
<li><p>Complete novices who have only just entered the programming world and have chosen Perl as their first dip into the water, looking for advice on where to start.</p></li>
</ul>

<p>Without encouragement, guidance, even mentorship, we realise newcomers could quickly lose their enthusiasm and motivation for Perl. We know that support levels across the community vary and that it might not always be easy for newcomers to get help. We want to learn from your experiences and understand your needs so we can help fill the gaps.</p>

<p>A primary reason for this, is that so often Perl is denigrated by those who do not realise just how crucial it is. Maybe you are new to the team and have been given the ‘pile of Perl to fix’? So often we hear of new Perl developers being given the ‘messy’ jobs on legacy systems whilst the experienced developers go off to work on new ‘exciting’ projects.</p>

<p>But think about this. If we switched Perl off today, there would be a problem. A huge problem! We know that Perl is the glue that holds a lot of the IT world together. The Perl Foundation wants to support the community to make sure that the IT world doesn’t fall apart and supporting people learning Perl is a big element of that.</p>

<p>We have developed a survey that needs just a few minutes of your time, to tell us what you would like, or need, to support your move into, or progress within, the Perl language.</p>

<p>The survey will run throughout January with the results announced at <a href="https://fosdem.org/2021/">FOSDEM</a>.</p>

<p>Please <a href="https://www.surveymonkey.com/r/7YCL7JZ">complete the survey</a> today! TPF really wants to know what you need so we can help you succeed in Perl and help protect the systems depending on this critical programming language.</p>

<p><a href="https://www.surveymonkey.com/r/7YCL7JZ"><img src="_ra-rel-mnt_/simplecas/fetch_content/496f7560e08fe40ef1b2d427f1920adb7e48886f/Take survey.jpg" style="max-width:100%;" /></a></p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Evaluate Perl project for new client - assessment</title>
  <summary type="html"><![CDATA[<p>
Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them
to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.
<p>
These were almost always old projects that needed some new feature added.
<p>
]]></summary>
  <updated>2020-12-30T07:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/evaluate-project"/>  <id>https://perlmaven.com/evaluate-project</id>
  <content type="html"><![CDATA[<p>
Recently a number of people have contacted me with various Perl-based projects. I had the opportunity to have an email exchange with them
to try to understand what they need and if I can provide the help. A few question came up and for my future reference I wrote them down.
<p>
These were almost always old projects that needed some new feature added.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Weekly Challenge 093</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-093-1dd9" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-093/"&gt;Challenge 093&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-max-points" class="anchor"&gt;
  &lt;/a&gt;
  TASK #1 › Max Points
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given set of co-ordinates &lt;code&gt;@N&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Write a script to count maximum points on a straight line when given co-ordinates plotted on 2-d plane.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;I broke this task into smaller parts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the input separate into an array of numbers, and make sure there are an even number of values. &lt;/li&gt;
&lt;li&gt;Plot the points on into &lt;code&gt;@grid&lt;/code&gt; by taking 1 off each value. This makes the point &lt;code&gt;(0,0)&lt;/code&gt; the bottom right.&lt;/li&gt;
&lt;li&gt;Create a graph. Although not part of the task, it's only four lines of code :)&lt;/li&gt;
&lt;li&gt;Like with the &lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-076/#TASK2"&gt;word search task&lt;/a&gt;, go through each point in four directions (up, right, diagonally up and right, diagonally down and right) and find the longest points from that starting point. There is no point going in the other four directions as they are just opposites of the above four.&lt;/li&gt;
&lt;li&gt;Print the longest points to the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-1.pl "(1,1), (2,2), (3,3)"
|     x
|   x
| x
+ - - -

Output is: 3

» ./ch-1.pl "(1,1), (2,2), (3,1), (1,3), (5,3)"
|     x
|
| x
|   x
| x   x
+ - - -

Output is: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-sum-path" class="anchor"&gt;
  &lt;/a&gt;
  TASK #2 › Sum Path
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task" class="anchor"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given binary tree containing numbers &lt;code&gt;0-9&lt;/code&gt; only.&lt;/p&gt;

&lt;p&gt;Write a script to sum all possible paths from root to leaf.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution" class="anchor"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;This task was a little more complex than I expected. It didn't help that I had a little bug in my code that took me a while to figure out.&lt;/p&gt;

&lt;p&gt;Even though my solution is 64 lines long, it is pretty straight forward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First I read the input from STDIN.&lt;/li&gt;
&lt;li&gt;The core of the code is then recursively calling the &lt;code&gt;_walk_path&lt;/code&gt; sub routine storing the current path in the &lt;code&gt;@$this_path&lt;/code&gt; array. If we hit the end of a node (i.e. it has no children), then I add it to the &lt;code&gt;@$paths&lt;/code&gt; array.&lt;/li&gt;
&lt;li&gt;Finally I display the sum, and the paths we visited.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;(using the examples from the website)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» ./ch-2.pl &amp;lt; example-1.txt 
Output is 13
Paths: (1, 2, 3), (1, 2, 4)

» ./ch-2.pl &amp;lt; example-2.txt 
Output is 26
Paths: (1, 2, 4), (1, 3, 5), (1, 3, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-093-1dd9</id>
    <published>2020-12-29T11:41:10Z</published>
    <updated>2020-12-29T11:41:10Z</updated>
    <category term="perl"/>
    <category term="weeklychallenge"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>CPAN-Updates November/Dezember 2020</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-29-cpan-update-november-dezember" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Auch in den letzten beiden Monaten dieses Jahres waren wir nicht ganz untätig – teilweise mit Hilfe anderer Perl-Programmierer\*innen.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-29-cpan-update-november-dezember</id>
    <published>2020-12-29T10:00:00Z</published>
    <updated>2020-12-29T10:00:00Z</updated>
  </entry>
  <entry>
    <title>Teaser: Gitlab und Perl</title>
    <link rel="alternate" href="https://blog.perl-academy.de/2020-12-28-gitlab-schulung" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
Gitlab bietet viel Funktionalität, die für Perl-Projekte sinnvoll genutzt werden kann. Unsere Schulung soll am praktischen Beispiel einer kleinen CPAN-Distribution einen Einblick in die Möglichkeiten bieten.</div>
    </content>
    <id>https://blog.perl-academy.de/2020-12-28-gitlab-schulung</id>
    <published>2020-12-28T10:00:00Z</published>
    <updated>2020-12-28T10:00:00Z</updated>
  </entry>
  <entry>
  <title>Perl Core Development Fund</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl-core-development-fund"/>
  <id>tag:news.perlfoundation.org,2020-12-22:/post/perl-core-development-fund</id>
  <published>2020-12-22T21:15:27</published>
  <updated>2020-12-22T21:15:27</updated>
  <summary>
  <![CDATA[
     I am pleased to announce the launch of the Perl Core Development Fund. Perl 5 Core Maintenance Fund was launched in 2008 to support the development of the Perl programming language. Since then, we have awarded USD 670,000. With the version change of the language, we will close the Perl 5 Core Maintenance Fund and launch the Perl Core Development Fund. For those who would like to apply for grants, 
   ]]>
  </summary>
  <author>
    <name>Makoto Nozaki</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>I am pleased to announce the launch of the <a href="https://www.perlfoundation.org/perl-core-development-fund.html">Perl Core Development Fund</a>.</p>

<p><a href="https://www.perlfoundation.org/perl-5-core-maintenance-fund.html">Perl 5 Core Maintenance Fund</a> was launched in 2008 to support the development of the Perl programming language. Since then, we have awarded USD 670,000.</p>

<p>With the version change of the language, we will close the Perl 5 Core Maintenance Fund and launch the Perl Core Development Fund.</p>

<p>For those who would like to apply for grants, please take a look at the fund description.</p>

<p>Notable changes from the previous fund are:
- The fund is managed by the Grants Committee instead of the TPF Board.
- The Perl Steering Council is involved in the approval process.</p>

<p>I would like to thank those who provided valuable inputs in launching the fund, namely: the TPF Board members, Dave Mitchell, Tony Cook, Jason Crome and Matthias Bloch.</p>

<p>As always, thanks to our donors, both large and small, who support these funds.</p>

    ]]>
  </content>
</entry>
</feed>
