<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Planet Perl</title>
  <link rel="alternate" href="https://perl.theplanetarium.org/" type="text/html"/>
  <subtitle>There's More Than One Way To Aggregate It</subtitle>
  <author>
    <name>Dave Cross</name>
    <email></email>
  </author>
  <updated>2021-05-16T03:01:18Z</updated>
  <link rel="self" href="https://perl.theplanetarium.org/" type="application/atom+xml"/>
  <id>https://perl.theplanetarium.org/</id>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-7204722919735501600</id>
    <published>2021-05-15T21:13:00.000+02:00</published>
    <updated>2021-05-15T21:13:40.612+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxli) 15 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/Alien-Build-2.40' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Alien::Build&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Build external dependencies for use in CPAN &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.40&lt;/strong&gt; on 2021-05-13&lt;/li&gt;  &lt;li&gt;Votes: 19&lt;/li&gt;  &lt;li&gt;Previous version: 2.38 was 4 months, 2 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.25' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.25&lt;/strong&gt; on 2021-05-11&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.24 was 10 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.10' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.10&lt;/strong&gt; on 2021-05-09&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 6.07 was 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANKOGAI/Encode-3.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Encode&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - character encodings in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.09&lt;/strong&gt; on 2021-05-14&lt;/li&gt;  &lt;li&gt;Votes: 54&lt;/li&gt;  &lt;li&gt;Previous version: 3.08 was 5 months, 12 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JMCNAMARA/Excel-Writer-XLSX-1.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Excel::Writer::XLSX&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Create a new file in the Excel 2007+ XLSX format. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.09&lt;/strong&gt; on 2021-05-14&lt;/li&gt;  &lt;li&gt;Votes: 55&lt;/li&gt;  &lt;li&gt;Previous version: 1.08 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYOHEX/Furl-3.14' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Furl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Lightning-fast URL fetcher &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;3.14&lt;/strong&gt; on 2021-05-13&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 3.13 was 3 years, 7 months, 24 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/HTTP-Message-6.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;HTTP::Message&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - HTTP style message (base class) &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.31&lt;/strong&gt; on 2021-05-11&lt;/li&gt;  &lt;li&gt;Votes: 59&lt;/li&gt;  &lt;li&gt;Previous version: 6.29 was 2 months, 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/SYP/Net-Curl-0.49' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::Curl&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl interface for libcurl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.49&lt;/strong&gt; on 2021-05-13&lt;/li&gt;  &lt;li&gt;Votes: 16&lt;/li&gt;  &lt;li&gt;Previous version: 0.48 was 4 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.047' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.047&lt;/strong&gt; on 2021-05-08&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.046 was 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.9001' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.9001&lt;/strong&gt; on 2021-05-12&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0951 was 5 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PEVANS/Syntax-Keyword-Try-0.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Syntax::Keyword::Try&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - a try/catch/finally syntax for perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.24&lt;/strong&gt; on 2021-05-10&lt;/li&gt;  &lt;li&gt;Votes: 33&lt;/li&gt;  &lt;li&gt;Previous version: 0.23 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/EXODIST/Test2-Suite-0.000140' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Test2::Suite&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Distribution with a rich set of tools built upon the Test2 framework. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.000140&lt;/strong&gt; on 2021-05-12&lt;/li&gt;  &lt;li&gt;Votes: 31&lt;/li&gt;  &lt;li&gt;Previous version: 0.000139 was 4 months, 27 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012003' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012003&lt;/strong&gt; on 2021-05-09&lt;/li&gt;  &lt;li&gt;Votes: 127&lt;/li&gt;  &lt;li&gt;Previous version: 1.012002 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TINITA/YAML-LibYAML-0.83' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;YAML::LibYAML&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl YAML Serialization using XS and libyaml &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.83&lt;/strong&gt; on 2021-05-08&lt;/li&gt;  &lt;li&gt;Votes: 44&lt;/li&gt;  &lt;li&gt;Previous version: 0.82 was 1 year, 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PREACTION/Yancy-1.070' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Yancy&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The Best Web Framework Deserves the Best CMS &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.070&lt;/strong&gt; on 2021-05-09&lt;/li&gt;  &lt;li&gt;Votes: 39&lt;/li&gt;  &lt;li&gt;Previous version: 1.070 was  before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/7204722919735501600/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxli-15-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7204722919735501600"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/7204722919735501600"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxli-15-great-cpan-modules-released.html" title="(cccxli) 15 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-1988343130481877663</id>
    <published>2021-05-15T20:56:00.002+02:00</published>
    <updated>2021-05-15T20:56:59.383+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxvii) metacpan weekly report - Type::Tiny</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 36&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny (+2)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/15 18:56:34 GMT&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Function::Runner" target="_blank"&gt;Function::Runner&lt;/a&gt; - Define functions at a higher level and run them&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Music::Chord::Progression" target="_blank"&gt;Music::Chord::Progression&lt;/a&gt; - Create network transition chord progressions&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPIx::Refactor" target="_blank"&gt;PPIx::Refactor&lt;/a&gt; - Hooks for refactoring perl via PPI&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Twitter::Text" target="_blank"&gt;Twitter::Text&lt;/a&gt; - Perl implementation of the twitter-text parsing library&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/BEGIN::Lift" target="_blank"&gt;BEGIN::Lift&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/C::Blocks" target="_blank"&gt;C::Blocks&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/C::TinyCompiler" target="_blank"&gt;C::TinyCompiler&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Method::Modifiers" target="_blank"&gt;Class::Method::Modifiers&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Class::Tiny::Antlers" target="_blank"&gt;Class::Tiny::Antlers&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dancer2" target="_blank"&gt;Dancer2&lt;/a&gt; (+1=125)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::OptList" target="_blank"&gt;Data::OptList&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Devel::NYTProf" target="_blank"&gt;Devel::NYTProf&lt;/a&gt; (+1=168)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dist::CheckConflicts" target="_blank"&gt;Dist::CheckConflicts&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Exception::Class" target="_blank"&gt;Exception::Class&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Feature::Compat::Try" target="_blank"&gt;Feature::Compat::Try&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/forkprove" target="_blank"&gt;forkprove&lt;/a&gt; (+1=19)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Furl" target="_blank"&gt;Furl&lt;/a&gt; (+1=40)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Git::Wrapper" target="_blank"&gt;Git::Wrapper&lt;/a&gt; (+1=16)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Image::JPEG::Size" target="_blank"&gt;Image::JPEG::Size&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Inline::ASM" target="_blank"&gt;Inline::ASM&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/List::Keywords" target="_blank"&gt;List::Keywords&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/mod_perl" target="_blank"&gt;mod_perl&lt;/a&gt; (+1=20)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MOP" target="_blank"&gt;MOP&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Curl::Promiser" target="_blank"&gt;Net::Curl::Promiser&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/only" target="_blank"&gt;only&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OOB" target="_blank"&gt;OOB&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/OptArgs" target="_blank"&gt;OptArgs&lt;/a&gt; (+1=13)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/perl" target="_blank"&gt;perl&lt;/a&gt; (+1=374)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Pg::Explain" target="_blank"&gt;Pg::Explain&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/PPI" target="_blank"&gt;PPI&lt;/a&gt; (+1=51)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Dynamically" target="_blank"&gt;Syntax::Keyword::Dynamically&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Try" target="_blank"&gt;Syntax::Keyword::Try&lt;/a&gt; (+1=33)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=93)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+2=127)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Want" target="_blank"&gt;Want&lt;/a&gt; (+1=11)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/1988343130481877663/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxvii-metacpan-weekly-report-typetiny.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1988343130481877663"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/1988343130481877663"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxvii-metacpan-weekly-report-typetiny.html" title="(cdlxvii) metacpan weekly report - Type::Tiny"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-5183444954508446505</id>
    <published>2021-05-15T20:50:00.003+02:00</published>
    <updated>2021-05-15T20:55:49.681+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdxc) stackoverflow perl report</title>
    <content type="html">&lt;p&gt;These are the ten most rated questions at &lt;a href="http://www.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; last week.&lt;br /&gt;Between brackets: [&lt;b&gt;question score&lt;/b&gt; / answers count]&lt;br /&gt;Build date: 2021-05-15 18:49:47 GMT&lt;/p&gt;&lt;hr /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67496780" target="_blank"&gt;Perl 5.32.1 GDBM_File is incredibly slow&lt;/a&gt; - [&lt;b&gt;4&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67498606" target="_blank"&gt;Array push and references&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67530193" target="_blank"&gt;Use PPI to rewrite a subroutine in a package&lt;/a&gt; - [&lt;b&gt;3&lt;/b&gt;/0]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67505205" target="_blank"&gt;Regular expression to get a number on a line&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67489705" target="_blank"&gt;perl - access elements in hash of arrays of arrays&lt;/a&gt; - [&lt;b&gt;2&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67499606" target="_blank"&gt;Perl Script did not find the newest file&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67513575" target="_blank"&gt;Regex to capture multilines from specific expression until first blank line in Perl&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/3]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67512932" target="_blank"&gt;Perl script to count positive values doesn't report all positive values&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/2]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67465425" target="_blank"&gt;Devel::Peek output results in STDERR&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/67478147" target="_blank"&gt;Perl PAR PP - Don't work /tmp/par-726f6f74/inc/lib/Mojo/resources/html_entities.txt&lt;/a&gt; - [&lt;b&gt;1&lt;/b&gt;/1]&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/5183444954508446505/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdxc-stackoverflow-perl-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5183444954508446505"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/5183444954508446505"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdxc-stackoverflow-perl-report.html" title="(cdxc) stackoverflow perl report"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
  <title>TPRC Newsletter - May 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/tprc-newsletter-may-2021"/>
  <id>tag:news.perlfoundation.org,2021-05-14:/post/tprc-newsletter-may-2021</id>
  <published>2021-05-14T11:55:18</published>
  <updated>2021-05-14T11:55:18</updated>
  <summary>
  <![CDATA[
     Read the latest news from TPRCIC 2021: Speakers announced, submit a lightning talk, set up a BOF, register for tickets and help us make the event a success.
   ]]>
  </summary>
  <author>
    <name>Todd Rinaldo</name>
  </author>
  <category term="Conferences" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/99958ba268cb98cef73fd7773128f8164b29031b/logo-tpc-2021-colors.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <h1>Speaker schedule published</h1>

<p>Thank you to everybody who sent in their expressions of interest for speaking at our conference. We are pleased over 30 speakers will give talks and presentations over the three day event and details can be found on <a href="https://tprc2021cic.sched.com/">the conference schedule</a></p>

<h1>We want YOU to hold a BOF!</h1>

<p>BOF stands for Birds of a Feather. These are informal get-togethers planned by attendees and can be on any topic, technical or not. </p>

<p>Have you got a BOF in mind? Why not set one up? Start by proposing and then promoting your BOF on the <a href="http://perlconference.us/wiki">conference wiki</a>. TPRC staff is happy to help facilitate a meeting space if you need it. Just reach out to us on TPF Slack or email us at <a href="admin@perlconference.us">admin@perlconference.us</a> </p>

<h1>Give a Lightning Talk</h1>

<p>Lightning Talks are short, 5 minute, talks that may be serious, funny, or both. They may be given by experienced speakers already giving full length talks or by first time speakers just starting out. (This is a great way to get started if you have something to say). Adding the virtual component to lightning talks should add for some extra fun! If you are a first time speaker you will win a tie with an experienced speaker when the schedule is made, if it comes to it. Today’s first time speaker could be tomorrow’s keynote speaker! <a href="http://perlconference.us/papers">Sign up here</a>.</p>

<h1>Volunteers Needed</h1>

<p>The Conference in the Cloud needs some volunteers! Email <a href="admin@perlconference.us">admin@perlconference.us</a> to volunteer. 
Right now we need volunteers to help moderate rooms. Room moderators monitor the chat and help coordinate audience participation during a virtual presentation. We also need individuals to help us coordinate things that might arise on the day of the event. </p>

<h1>About the Conference in the Cloud</h1>

<p>The 2021 Perl and Raku Conference in the Cloud will be on June 8-10. If you see #TPRCiC around on social media, that’s our tag for the conference.</p>

<p>At the Conference in the Cloud there will be Perl, Raku, and other related technology topics, just like you’ve seen at our in-person conferences. The Conference in the Cloud is organized and run by volunteers just like The Perl and Raku Conference. Presentations are also given by volunteers. The presentations at the conference were submitted during our Call For Presentations (CFP) and selected by organizers who volunteered to be on our talks-committee. We will have 2 or more tracks at this event with presentations (20-50 minutes long) on a variety of technical topics throughout each day.</p>

<h2>Registration Cost</h2>

<p>By paying a $10 fee attendees can interact live with speakers and other attendees (during BOFs, panels, and Q&amp;A). The $10.00 fee is inclusive of the entire event. This fee helps secure a safe event, and covers the minor costs of hosting it.</p>

<h2>Conference Time</h2>

<p>In order to accommodate the most time zones possible, we have decided to go with 11AM to 6PM EDT or 15:00 to 22:00 UTC. Sched now supports time zones in their interface. Be sure to select your time zone!</p>

<h2>Hosting Platform</h2>

<p>The Perl and Raku Conference in the Cloud (TPRCiC) is going to be an online, interactive event hosted on the Zoom platform. The broadcast will be recorded and streamed simultaneously to <a href="https://www.youtube.com/yapcna">YouTube</a>. </p>

<p>Access to the interactive conference on Zoom will only be granted to people who register in advance, agree to the Code of Conduct, and pay a $10 registration fee for the whole conference. Presentations will be streamed live to <a href="https://www.youtube.com/yapcna">YouTube</a> so those who can’t pay the fee or won’t use Zoom, can still access most conference content. <a href="https://github.com/perlconference/tprc-2021-cloud/wiki#bofs">BOFs</a> will not be available on <a href="https://www.youtube.com/yapcna">YouTube</a>.</p>

<h1>Get Your Ticket</h1>

<p>Event tickets are available on eventbrite for $10. The $10.00 fee is inclusive of the entire 3-day event. This fee helps secure a safe event, and covers the minor costs of hosting it. <a href="https://tprc2021cic.sched.com/tickets">Sign up today</a>! </p>

<h1>How to Reach #TPRCiC Organizers</h1>

<ul>
<li>Visit our website: https://perlconference.us/</li>
<li>Follow us on Twitter: <a href="https://twitter.com/PerlConferences">@PerlConferences</a></li>
<li>Like us on Facebook: The Perl Foundation (<a href="https://www.facebook.com/tpf.perl">@tpf.perl</a>)</li>
<li>Subscribe to the mailing list: https://perlconference.us/tprc-2021-cloud/keep-in-touch/</li>
<li>Send any questions about The Perl Conference to <a href="https://perlconference.us/tprc-2021-cloud/contact-us/">admin@perlconference.us</a>. An organizer will get back to you.</li>
</ul>

    ]]>
  </content>
</entry>
  <entry>
    <title>A Perl Community Dashboard</title>
    <link rel="alternate" href="http://blogs.perl.org/users/dean/2021/05/a-perl-community-dashboard.html"/>
    <id>tag:blogs.perl.org,2021:/users/dean//558.10220</id>
    <published>2021-05-13T16:09:07Z</published>
    <updated>2021-05-13T21:39:13Z</updated>
    <author>
        <name>Dean</name>
        <uri>http://perl.sydney</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/dean/">
        <![CDATA[<p>In this weeks <a href="https://www.perlfoundation.org/marketing-committee.html">TPF Marketing Committee</a> meeting I made an elevator pitch for a "Perl Community Dashboard". It was well received so I have taken the action item to expound upon the idea here to gather more input. Understand this then as the minimum viable product to go from 0 to 1, something achievable that we can build upon.</p>

<p><strong>The Goal:</strong> </p>

<p>Create a central web based "Dashboard" (think Grafana-ish) the brings together metrics from key Perl related websites (hereafter, mastheads) and potentially other channels such as social media or irc. </p>

<p><strong>What is the "Business Outcome"?</strong></p>

<p>The marketing committee can use those metrics to set goals and measure the effectiveness of marketing activities. By including many mastheads we can get a picture of activity levels over time, how people move between the content, and which content is the most important. </p>

<p>Being able to dive & explore this data will also be valuable to the marketing committee and to other TPF committees. This could guide everything from blog posts, to conference talks, to book ideas, to training classes.</p>

<p><strong>What would be included:</strong></p>

<p>Acknowledging many of these are not "owned" by TPF, the mastheads I want to be included initially would include:</p>

<ul>
	<li>perlfoundation.org</li>
	<li>news.perlfoundation.org</li>
       <li>perl.com</li>
	<li>perl.org</li>
	<li>blogs.perl.org</li>
	<li>jobs.perl.org</li>
        <li>perldoc.perl.org</li>
	<li>metacpan.org</li>
	<li>cpan.org</li>
        <li>rt.cpan.org</li>
       <li>perlconference.us</li>
</ul>

<p><strong>What is needed from each website?</strong></p>

<p>Initially this would just be a javascript snippet to instruct web browsers to send the various metric data. </p>

<p>More detailed analytics could later be added, for example I am very interested to learn more about what people are searching for and downloading from (meta)cpan.</p>

<p>This is far less complicated and gives richer data than shipping http access logs.</p>

<p><strong>What analytics platform would we use?</strong></p>

<p>We should use something off the shelf, ideally something SaaS so we don't have the overheads of running the infrastructure. The downside of someone else's cloud analytics platform is there may be resistance to it, compared to self hosting the data.</p>

<p>Without getting lost entirely in selecting a solution, a brief taxonomy of key products:</p>

<ul>
	<li>Adobe Marketing Cloud (once Omniture) is the market leader and is consumed as a cloud SaaS product. Adobe offers discounts for 501c3's like TPF (YAS) although pricing isn't public</li>
<li>Matomo (was Piwik) is a very capable FOSS alternative with a Freemium business model that offers both cloud and self hosting. Paid add-on features add up quickly compared to the nominal fee for their cloud offering.</li>
<li>Others that community members suggest in the comments</li>
</ul>

<p>Adobe as the market leader would allow us to most easily engage someone to assist, I can't find modules in CPAN for it and having used it in past $work we just used our own client API.</p>

<p>Matomo has modules on CPAN and some of them look recent.</p>

<p>No matter what we select, hopefully we can help create, publish, and enhance the client API modules for the various Perl frameworks.</p>

<p><strong>Prior Art?</strong></p>

<p>I have not seen any other FOSS project or foundation do something similar, though no doubt they use Google Analytics.</p>

<p><br />
<strong>Pre-emptively addressing concerns</strong></p>

<ul>
	<li><em>I don't like tracking people.</em> You should use browser features or plugins to block it, as you would on other websites.</li>
        <li><em>You should just use access logs.</em> Shipping access logs is far more complicated and gives very few details, referrers especially are removed by search engines.</li>
        <li><em>Privacy Concerns.</em> Using an existing platform with GDPR already sorted is a good start. We absolutely must respect peoples privacy</li>
        <li><em>This is pointless.</em> Hopefully people can see that having metrics to measure the outcomes of marketing activities is of benefit. A reward of all work (paid or volunteer) is being able to see clearly that we (you) did something and people responded positively - let's provide that.</li>
<li><em>Platform X is stupid, use platform Y.</em> Please note your preferred products in the comments, it would be great to learn more</li>
<li><em>This is great! I want to get involved!</em> Let us know in the comments or contact the <a href="mailto:hello@perlfoundation.org">marketing committee</a></li>
</ul>

<p><strong>Whats next?</strong></p>

<p>For me is sharing this pitch with more people in the community and fleshing it out in to a proposal - So please share your thoughts in the comments.</p>

<p>I am very interested in your experiences with different platforms and successes you have had using them with the various Perl frameworks.</p>

<p>It is my hope that many people will be able to build on this work in many directions.</p>]]>
        
    </content>
</entry>
  <entry>
    <title>Releases of Perl distribution of Crypt::OpenSSL::X509 1.904 and 1.905 - a story about epic failure </title>
    <link rel="alternate" href="https://dev.to/jonasbn/releases-of-perl-distribution-of-crypt-openssl-x509-1-904-and-1-905-a-story-about-epic-failure-1810" type="text/html"/>
    <content type="html">&lt;p&gt;I have for some time been the maintainer of the Perl distribution: &lt;a href="https://metacpan.org/pod/Crypt::OpenSSL::X509"&gt;Crypt::OpenSSL::X509&lt;/a&gt;. The implementation is a wrapper on the OpenSSL C libraries, relying on XS.&lt;/p&gt;

&lt;p&gt;I took over the maintenance from Dan Sully, because we where using the distribution at work and it need some maitaining. O am not a C-programmer, XS &lt;em&gt;wizard&lt;/em&gt; or compiler expert - anyway I thought I could learn something from taking on the maintainer role.&lt;/p&gt;

&lt;p&gt;Over time I have made releases, when there was something obvious or somebody sent PRs to &lt;a href="https://github.com/dsully/perl-crypt-openssl-x509"&gt;the repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Way too seldom, I would check the CPAN testers reports to see how things were going, but a few weeks ago I was bored and I did.&lt;/p&gt;

&lt;p&gt;The current release at the time was 1.903 and &lt;a href="http://matrix.cpantesters.org/?dist=Crypt-OpenSSL-X509%201.903"&gt;the test results&lt;/a&gt; were not look too impressive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6ab5gzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50q88q0oi2mmainbwjbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6ab5gzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50q88q0oi2mmainbwjbp.png" alt="Test reports 1.903"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I checked some of them out and set out to address some of the issues I observed. The first one was a broken build on OpenBSD and FreeBSD.&lt;/p&gt;

&lt;p&gt;As I mentioned:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I am not a compiler expert - check me out&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: nonnull parameter 'pv' will evaluate to 'true' on first encounter [-Werror,-Wpointer-bool-conversion]
if (pv &amp;amp;&amp;amp; len &amp;gt; 1) {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cpantesters.org/cpan/report/119b4298-9e42-11eb-84bc-edd243e66a77"&gt;Example 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cpantesters.org/cpan/report/77bdcdd2-a0e7-11eb-84bc-edd243e66a77"&gt;Example 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cpantesters.org/cpan/report/fd7e66b6-a14b-11eb-84bc-edd243e66a77"&gt;Example 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I read up on the issue and it seemed Perl 5.20 had an issue with this so I wanted to re-categorize it to a warning from an error for Perl versions below 5.20.0&lt;/p&gt;

&lt;p&gt;Believe me, this required a lot of &lt;em&gt;googling&lt;/em&gt;, reading and I did a lot of installation and testing with different Perl versions (luckily the issue was easily reproduced).&lt;/p&gt;

&lt;p&gt;When I understood the issue, I was able to find &lt;a href="https://stackoverflow.com/questions/35797295/clang-how-to-disable-werror-wpointer-bool-conversion"&gt;a good article on StackOverflow&lt;/a&gt;, with what I thought would be a remedy.&lt;/p&gt;

&lt;p&gt;Implemented and shipped release 1.904.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boom, bam, bop Bada-bop-boom, pow!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That did not work out particularly well - I actually made the situation worse and completely broke the build for Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lA9byf2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bz5ss653wdmivh1n6zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lA9byf2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bz5ss653wdmivh1n6zq.png" alt="Test reports 1.904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently GCC and LLVM are very different and I had introduced the use of an option, which is LLVM specific and is not understood by GCC.&lt;/p&gt;

&lt;p&gt;More &lt;em&gt;googling&lt;/em&gt; and reading and I found some good resources on the two compilers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clang.llvm.org/docs/DiagnosticsReference.html"&gt;"Diagnostic flags in Clang"&lt;/a&gt; from Clang 13 documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html"&gt;"3.8 Options to Request or Suppress Warnings"&lt;/a&gt; for GCC&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html"&gt;"3.1 Option Summary"&lt;/a&gt; for GCC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got everything restructurized and got release 1.905 shipped and this time it looked much better...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWsMJqZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ydswe73gpdlhs32ystk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWsMJqZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ydswe73gpdlhs32ystk.png" alt="Test reports 1.905"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are more compiler issues I want to address, but I will most certainly be more careful in the future, just fooling around with the code surrounding your main product can be just as destructive and hence stressful and time consuming.&lt;/p&gt;

&lt;p&gt;We are now back on track and I have since shipped releases 1.9.6 and 1.9.7 and things are back to slowly improving.&lt;/p&gt;

&lt;p&gt;I tend to do micro releases and I am seriously considering extending my toolbox locally with a Linux machine, so I get more perspective on things with a better feedback loop while developing.&lt;/p&gt;

&lt;p&gt;Improving continuous integration for this project is also being worked on. The matrix approach of operating systems, tools/compilers and in this case Perl interpreter versions make a lot of sense and brings a lot of value and it would probably have caught the issue I introduced earlier.&lt;/p&gt;

&lt;p&gt;It is does however require a lot of work to establish and maintain, but I think it is worth the effort. We do learn a lot from our mistakes, but we also need successes to keep motivation up.&lt;/p&gt;

</content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/releases-of-perl-distribution-of-crypt-openssl-x509-1-904-and-1-905-a-story-about-epic-failure-1810</id>
    <published>2021-05-13T15:25:07Z</published>
    <updated>2021-05-13T15:25:07Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="xs"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 112: Canonical Path and Climb Stairs</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-112-canonical-path-and-climb-stairs.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10219</id>
    <published>2021-05-13T14:10:29Z</published>
    <updated>2021-05-13T14:13:54Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 112 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few  days (May 16, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Canonical Path</h2>

<p><em>You are given a string path, starting with a slash ‘/&#8217;.</em></p>

<p><em>Write a script to convert the given absolute path to the simplified canonical path.</em></p>

<p><em>In a Unix-style file system:</em></p>

<p><em>- A period &#8216;.&#8217; refers to the current directory</em></p>

<p><em>- A double period &#8216;..&#8217; refers to the directory up a level</em></p>

<p><em>- Multiple consecutive slashes (&#8216;//&#8217;) are treated as a single slash &#8216;/&#8217;</em></p>

<p><em>The canonical path format:</em></p>

<p><em>- The path starts with a single slash &#8216;/&#8217;.</em></p>

<p><em>- Any two directories are separated by a single slash &#8216;/&#8217;.</em></p>

<p><em>- The path does not end with a trailing &#8216;/&#8217;.</em></p>

<p><em>- The path only contains the directories on the path from the root directory to the target file or directory</em></p>

<p><em>Example:</em></p>

<pre><code>Input: "/a/"
Output: "/a"

Input: "/a/b//c/"
Output: "/a/b/c"

Input: "/a/b/c/../.."
Output: "/a"
</code></pre>

<p>Although it can surely be done differently, this is obviously a job for regular expressions or regexes.</p>

<h3>Canonical Path in Raku</h3>

<p>It would certainly make sense to write a grammar for performing the necessary transformations, but this is simple enough for a few regexes to do the job. It is in fact probably possible to do everything with a single regex, but I usually find it more legible to transform the input string step by step. </p>

<p>Note that I&#8217;m not trying to validate the input paths, with just one exception: if there are too many <code>/../</code> compared to the previous path items, the script dies, rather than printing something incorrect.</p>

<pre><code>use v6

my @tests = &lt;/a/ /a/b//c/ /a/b/c/../.. /a/../../b/&gt;;
for @tests &lt;-&gt; $path {
    my $p = $path;
    $path ~~ s:g|'//'+|/|;
    $path ~~ s:g!^'/' | '/'$!!;
    my @path-items;
    for split /'/'+/, $path -&gt; $item {
        next if $item eq '.';
        if $item eq '..' {
            die "Invalid path $p" unless @path-items;
            pop @path-items;
        } else {
            push @path-items, $item;
        }
    };
    say "$p =&gt; /", @path-items.join('/');
}
</code></pre>

<p>The script displays the following output:</p>

<pre><code>$ raku ./paths.raku
/a/ =&gt; /a
/a/b//c/ =&gt; /a/b/c
/a/b/c/../.. =&gt; /a
Invalid path /a/../../b/
  in block  at ./main.raku line 12
  in block &lt;unit&gt; at ./main.raku line 4
</code></pre>

<h3>Canonical Path in Perl</h3>

<p>This a port to Perl of the Raku program above, except that when there are too many <code>/../</code> compared to the previous path items, the script issues a warning instead of dying, does not print any canonical path and proceeds with the next items.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @tests = ('/a/', '/a/b//c/', '/a/b/c/../..', '/a/../../b/', '/a/././b/');
TEST: for my $path (@tests) {
    my $p = $path;
    $path =~ s|\/\/+|/|g;
    $path =~ s!^\/|\/$!!g;
    my @path_items;
    for my $item (split /\/+/, $path) {
        next if $item eq '.';
        if ($item eq '..') {
            warn "Invalid path $p" and next TEST unless @path_items;
            pop @path_items;
        } else {
            push @path_items, $item;
        }
    };
    say "$p =&gt; /", join '/', @path_items;
}
</code></pre>

<p>The script displays the following output:</p>

<pre><code>$ perl paths.pl
/a/ =&gt; /a
/a/b//c/ =&gt; /a/b/c
/a/b/c/../.. =&gt; /a
Invalid path /a/../../b/ at paths.pl line 14.
/a/././b/ =&gt; /a/b
</code></pre>

<h2>Task 2: Climb Stairs</h2>

<p><em>You are given <code>$n</code> steps to climb.</em></p>

<p><em>Write a script to find out the distinct ways to climb to the top. You are allowed to climb either 1 or 2 steps at a time.</em></p>

<p><em>Example:</em></p>

<pre><code>Input: $n = 3
Output: 3

    Option 1: 1 step + 1 step + 1 step
    Option 2: 1 step + 2 steps
    Option 3: 2 steps + 1 step

Input: $n = 4
Output: 5

    Option 1: 1 step + 1 step + 1 step + 1 step
    Option 2: 1 step + 1 step + 2 steps
    Option 3: 2 steps + 1 step + 1 step
    Option 4: 1 step + 2 steps + 1 step
    Option 5: 2 steps + 2 steps
</code></pre>

<p>It is not clear to me whether the output should contain all the information above, or just the number of possibilities, but since the assignment asks us &#8220;to find out the distinct ways to climb to the top&#8221;, I have decided to output the result in the format given above, although this leads to quite a bit of uninteresting boiler plate code.</p>

<h3>Climb Stairs in Raku</h3>

<p>I&#8217;ve decided to use a <code>try-steps</code> recursive subroutine to explore all possibilities. The script uses a <code>@*result</code> dynamic variable to store the various winning combinations of steps and to print them at the end. </p>

<pre><code>use v6;

sub print-result {
    my $count = 0;  
    for  @*result -&gt; @solution {
        print "\tOption ", ++$count, ": ";
        my @step_list;
        push @step_list, "$_ " ~ ($_ ~~ /1/ ?? "step " !! "steps") for @solution;
        say join " + ", @step_list;
    }
    say "";
}

sub try-steps ($nb-steps, @curr) {
    for 1, 2 -&gt; $new-step {
        my @new-cur = (|@curr, $new-step);
        my $sum = [+] @new-cur;
        next if $sum &gt; $nb-steps;
        if $sum == $nb-steps {
            push @*result, @new-cur;
            last;
        } else {
            try-steps $nb-steps, @new-cur;
        }
    }
}

for 3, 4, 5 -&gt; $target {
    my @*result;
    try-steps $target, [];
    say 'Input: $n = ', $target;
    say "Output: ", @*result.elems;
    # say @*result;
    print-result;
}
</code></pre>

<p>The script displays the following output:</p>

<pre><code>$ raku ./steps.raku
Input: $n = 3
Output: 3
    Option 1: 1 step  + 1 step  + 1 step 
    Option 2: 1 step  + 2 steps
    Option 3: 2 steps + 1 step 

Input: $n = 4
Output: 5
    Option 1: 1 step  + 1 step  + 1 step  + 1 step 
    Option 2: 1 step  + 1 step  + 2 steps
    Option 3: 1 step  + 2 steps + 1 step 
    Option 4: 2 steps + 1 step  + 1 step 
    Option 5: 2 steps + 2 steps

Input: $n = 5
Output: 8
    Option 1: 1 step  + 1 step  + 1 step  + 1 step  + 1 step 
    Option 2: 1 step  + 1 step  + 1 step  + 2 steps
    Option 3: 1 step  + 1 step  + 2 steps + 1 step 
    Option 4: 1 step  + 2 steps + 1 step  + 1 step 
    Option 5: 1 step  + 2 steps + 2 steps
    Option 6: 2 steps + 1 step  + 1 step  + 1 step 
    Option 7: 2 steps + 1 step  + 2 steps
    Option 8: 2 steps + 2 steps + 1 step
</code></pre>

<p>Note that, if you don&#8217;t want this verbose output, you can just remove the <code>print-result</code> subroutine definition, comment out the last line (with the <code>print-result</code> subroutine call), and uncomment the previous code line:</p>

<pre><code>    say @*result;
    # print-result;
</code></pre>

<p>and obtain the following output:</p>

<pre><code>$ raku ./steps.raku
Input: $n = 3
Output: 3
[[1 1 1] [1 2] [2 1]]
Input: $n = 4
Output: 5
[[1 1 1 1] [1 1 2] [1 2 1] [2 1 1] [2 2]]
Input: $n = 5
Output: 8
[[1 1 1 1 1] [1 1 1 2] [1 1 2 1] [1 2 1 1] [1 2 2] [2 1 1 1] [2 1 2] [2 2 1]]
</code></pre>

<h3>Climb Stairs in Perl</h3>

<p>This is a port to Perl of the above Raku program, with a <code>try_steps</code> recursive subroutine:</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @result;

sub print_result {
    my $count = 0;
    for  my $solution (@result) {
        print "\tOption ", ++$count, ": ";
        my @step_list;
        push @step_list, "$_ " . ($_ =~ /1/ ? "step " : "steps") for @$solution;
        say join " + ", @step_list;
    }
    say "";
}

sub try_steps  {
    my ($nb_steps, $sum, @curr) = @_;
    for my $new_step (1, 2) {
        my $new_sum =  $sum + $new_step;
        next if $new_sum &gt; $nb_steps;
        my @new_cur = (@curr, $new_step);
        if ($new_sum == $nb_steps) {
            push @result, \@new_cur;
            last;
        } else {
            try_steps($nb_steps, $new_sum, @new_cur);
        }
    }
}

for my $target (3, 4, 5) {
    @result = ();
    try_steps $target, 0, ();
    say 'Input: $n = ', $target;
    say "Output: ", scalar @result;
    print_result;
}
</code></pre>

<p>This script displays the following output:</p>

<pre><code>$ perl  ./steps.pl
Input: $n = 3
Output: 3
        Option 1: 1 step  + 1 step  + 1 step
        Option 2: 1 step  + 2 steps
        Option 3: 2 steps + 1 step

Input: $n = 4
Output: 5
        Option 1: 1 step  + 1 step  + 1 step  + 1 step
        Option 2: 1 step  + 1 step  + 2 steps
        Option 3: 1 step  + 2 steps + 1 step
        Option 4: 2 steps + 1 step  + 1 step
        Option 5: 2 steps + 2 steps

Input: $n = 5
Output: 8
        Option 1: 1 step  + 1 step  + 1 step  + 1 step  + 1 step
        Option 2: 1 step  + 1 step  + 1 step  + 2 steps
        Option 3: 1 step  + 1 step  + 2 steps + 1 step
        Option 4: 1 step  + 2 steps + 1 step  + 1 step
        Option 5: 1 step  + 2 steps + 2 steps
        Option 6: 2 steps + 1 step  + 1 step  + 1 step
        Option 7: 2 steps + 1 step  + 2 steps
        Option 8: 2 steps + 2 steps + 1 step
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 23, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Release 1.54 of perl-workflow, a minor feature release</title>
    <link rel="alternate" href="https://dev.to/jonasbn/release-1-54-of-perl-workflow-a-minor-feature-release-29ia" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p>Release 1.54 has been released, but I could not find the time to write a proper announcement, so with some delay here goes.</p>

<p>The <a href="https://github.com/jonasbn/perl-workflow/releases/tag/1.54">release</a> is a minor feature release, in adds a few improvements in regard to making some APIs public, promoting these from private APIs (please see the Change log below for details). The private APIs are kept intact for backwards compatibility, in case somebody has implementations relying on these.</p>

<p>Also the documentation has had some improvements, in regard to removal of parts, which made no sense based. It might have been design notes more than actual implementation documentation. Please see PR <a href="https://github.com/jonasbn/perl-workflow/pull/111">#111</a>.</p>

<p>The most significant change is the revisit and improvement of the caching for evaluation of nested conditions. This improvement should not break anything, but should improve the overall caching strategy.</p>

<p>Currently the project is at a cross-road and we are on the brink of moving on with a major release.</p>

<ul>
<li>We want to deprecate the use of <a href="https://metacpan.org/pod/SPOPS">SPOPS</a> (<em>Simple Perl Object Persistence with Security</em>)(see PR: <a href="https://github.com/jonasbn/perl-workflow/pull/117">#117</a>), SPOPS is not actively maintained and it does not seem to <a href="http://matrix.cpantesters.org/?dist=SPOPS+0.87">work with newer Perl versions</a>. We have extracted the SPOPS part so it can be shipped as <a href="https://github.com/jonasbn/perl-workflow-persister-spops">a separate distribution</a>
</li>
<li>We want to change the <code>autorun</code> implementation from recursive to loop-based (see PR: <a href="https://github.com/jonasbn/perl-workflow/pull/110">#110</a>). This will change/<em>break</em> behaviour, but we know, based on an implementation and use that this approach will make more sense</li>
</ul>

<p>There are other activities and work going on, but these are the most significant, so stay tuned for more future release announcements.</p>

<p>Do checkout the release on <a href="https://metacpan.org/pod/Workflow">MetaCPAN</a> or your local CPAN mirror or <a href="https://github.com/jonasbn/perl-workflow">the GitHub repository</a>.</p>

<h2>
  <a href="#change-log">
  </a>
  Change Log
</h2>

<h3>
  <a href="#154-20210425-minor-feature-release-update-not-required">
  </a>
  1.54 2021-04-25 Minor feature release, update not required
</h3>

<ul>
<li><p>The existing private API: <code>Workflow-&gt;_get_action()</code> has been made public as: <code>get_action()</code> via PR <a href="https://github.com/jonasbn/perl-workflow/pull/56">#56</a> addressing issue <a href="https://github.com/jonasbn/perl-workflow/issues/54">#54</a>, a private version is still available as <code>_get_action()</code> ensuring backwards compatibility. The change should improve and ease implementations where actions are consumed</p></li>
<li><p>The existing methods: <code>fields()</code>, <code>optional_fields()</code> and <code>required_fields</code> have all been made public PR <a href="https://github.com/jonasbn/perl-workflow/pull/57">#57</a> addressing issue <a href="https://github.com/jonasbn/perl-workflow/issues/55">#55</a> these methods provide information a UI or other consumer of the workflow could use for user interaction as for issue <a href="https://github.com/jonasbn/perl-workflow/issues/54">#54</a> and PR: <a href="https://github.com/jonasbn/perl-workflow/pull/56">#56</a> mentioned above</p></li>
<li><p>The implementation of caching for evaluation of nested has been revisted and improved via PR <a href="https://github.com/jonasbn/perl-workflow/pull/90">#90</a></p></li>
<li><p>A minor issue has been corrected in the documentation was corrected via PR <a href="https://github.com/jonasbn/perl-workflow/pull/111">#111</a>, it seems some design ideas had snuck into the documentation a long time ago, without ever being implemented</p></li>
</ul>

</div>
    </content>
    <author>
      <name>jonasbn</name>
    </author>
    <id>https://dev.to/jonasbn/release-1-54-of-perl-workflow-a-minor-feature-release-29ia</id>
    <published>2021-05-13T12:19:03Z</published>
    <updated>2021-05-13T12:19:03Z</updated>
    <category term="perl"/>
    <category term="release"/>
    <category term="opensource"/>
  </entry>
  <entry>
  <title>Perl is part of Google's Season of Docs 2021</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/perl-gsod-2021"/>
  <id>tag:news.perlfoundation.org,2021-05-13:/post/perl-gsod-2021</id>
  <published>2021-05-13T12:03:17</published>
  <updated>2021-05-13T12:03:17</updated>
  <summary>
  <![CDATA[
     The Perl Foundation is among the thirty open-source software organizations that Google has chosen to participate in 2021's Season of Docs program. Through this program, Google will fund a comprehensive audit of Perl's core documentation collection, a project proposed by Jason McIntosh earlier this year. For this project a hired expert will perform a gap analysis of the documentation's content and presentation. This work will compare the documentation's present state 
   ]]>
  </summary>
  <author>
    <name>Jason McIntosh</name>
  </author>
  <category term="Perl 5 Development" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Projects" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
       <img src="_ra-rel-mnt_/simplecas/fetch_content/fd69ae08ab064068fd874d76b715168b83a0b6c4/SeasonofDocs_Icon_Grey_300ppi-whitespace-cropped_720.png" style="max-width:100%;max-height:100%;padding:20px;" /><br>
     
     <p>The Perl Foundation is among <a href="https://developers.google.com/season-of-docs/docs/participants/">the thirty open-source software organizations</a> that Google has chosen to participate in 2021's Season of Docs program. Through this program, Google will fund <a href="https://github.com/Perl/perl5/wiki/Google-Season-of-Docs-2021-project-proposals">a comprehensive audit of Perl's core documentation collection</a>, a project proposed by Jason McIntosh earlier this year.</p>

<p>For this project a hired expert will perform a <a href="https://en.wikipedia.org/wiki/Gap_analysis">gap analysis</a> of the documentation's content and presentation. This work will compare the documentation's present state with Perl 7's goal to put a new focus on newcomers--while retaining the docs' role as a thorough reference for all programmers.</p>

<p>The auditing project's core deliverable will be a roadmap of actionable steps that the Perl project can take to bring its documentation closer to these ideals. This report will give Perl's developers a solid foundation for subsequent documentation projects, helping to shape Perl into a more approachable programming language.</p>

<p>To fill this role, TPF has hired <a href="https://www.linkedin.com/in/khawarlatifkhan/">Khawar Latif Khan</a>, a technical writer and communications specialist. Khawar's relevant experience includes performing <a href="https://khawarlatif7.wixsite.com/khawarlatifkhan/gsod-eslint">a content audit for ESLint's documentation</a> as part of 2020's Google Season of Docs.</p>

<p>The project has the approval of the Perl Steering Council, and will be managed by a small team of volunteers, led by Jason McIntosh.</p>

<p>TPF plans to get the project underway in mid-May, and--sticking to <a href="https://developers.google.com/season-of-docs/docs/timeline">Google's required timeline</a>--complete the work by the end of 2021. TPF will announce the publication of the project's final report, as well as any other public deliverables, as they become available.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Weekly Challenge 112</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-112-27l0" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><p><a href="">Challenge</a>, <a href="">My solutions</a></p>

<h1>
  <a href="#task-1-canonical-path">
  </a>
  TASK #1 › Canonical Path
</h1>

<h2>
  <a href="#tasks">
  </a>
  Tasks
</h2>

<p>You are given a string path, starting with a slash <code>/</code>.</p>

<p>Write a script to convert the given absolute path to the simplified canonical path.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>Outside the challenge, I would use the swiss army-knife of <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a> to do this. Regularly readers of my blog post will know that I don't use modules outside Perl core in completing a task.</p>

<p>Therefore I split the supplied path by each forward slash into <code>@parts</code>. I then take three actions depending on the part.</p>

<ul>
<li>If it is empty, do nothing. This handles the first slash, the trailing slash, and any double slashes in the path.</li>
<li>If the part is <code>..</code>, pop the last value from the canonical path. Even if we are already at the root (the canonical path is the root folder) it still has a <code>..</code> file referencing itself.</li>
<li>Any all other cases, push the part into the canonical path.</li>
</ul>

<p>Finally, I join the canonical parts together to generate a string separated by slashes.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-1.pl /a/
/a

» ./ch-1.pl /a/b//c/
/a/b/c

» ./ch-1.pl /a/b/c/../../
/a
</code></pre>

</div>



<h1>
  <a href="#task-2-climb-stairs">
  </a>
  TASK #2 › Climb Stairs
</h1>

<h2>
  <a href="#task">
  </a>
  Task
</h2>

<p>You are given <code>$n</code> steps to climb.</p>

<p>Write a script to find out the distinct ways to climb to the top. You are allowed to climb either 1 or 2 steps at a time.</p>

<h2>
  <a href="#my-solution">
  </a>
  My solution
</h2>

<p>This one got me thinking about the best way to code it. And like other challenges, I'll be very interesting to see how other Team PWC members do it.</p>

<p>My first though was a recursive function, but I have been criticised in the past for using it. Then I though about some binary function where false (0) representing one step, and true (1) represented two steps.</p>

<p>However in the end I went with the good old recursive function called <code>_climb</code>. It has three arguments, the steps remaining, the current climb, and an array of arrays of all climbs. Like with the first tasks, I take different action depending on the remaining steps.</p>

<ul>
<li>If there is only one step remaining, add the current climb + 1 to the list of climbs.</li>
<li>If there are two steps remaining, add the current climb + 2 × 1 step, and the current_climb + 2 steps to the list of climbs.</li>
<li>If there are more than two steps remaining, call the recursive function again twice. The first call is with one step and the second call is with two steps.</li>
</ul>

<p>Finally I output the number of possible steps there are and each way the stairs can be climbed.</p>

<p>Interesting fact (assuming my code is correct): With 20 steps, there are 10,946 ways to climb them. And there are 121,393 ways to climb 25 steps.</p>

<h2>
  <a href="#examples">
  </a>
  Examples
</h2>



<div class="highlight js-code-highlight">
<pre class="highlight plaintext"><code>» ./ch-2.pl 3
Output: 3

Option 1: 1 step + 1 step + 1 step
Option 2: 1 step + 2 steps
Option 3: 2 steps + 1 step

» ./ch-2.pl 4
Output: 5

Option 1: 1 step + 1 step + 1 step + 1 step
Option 2: 1 step + 1 step + 2 steps
Option 3: 1 step + 2 steps + 1 step
Option 4: 2 steps + 1 step + 1 step
Option 5: 2 steps + 2 steps
</code></pre>

</div>



</div>
    </content>
    <author>
      <name>Simon Green</name>
    </author>
    <id>https://dev.to/simongreennet/weekly-challenge-112-27l0</id>
    <published>2021-05-12T12:31:40Z</published>
    <updated>2021-05-12T12:31:40Z</updated>
    <category term="perl"/>
    <category term="perlweeklychallenge"/>
  </entry>
  <entry>
    <title>Perl / Unix One-liner Cage Match, Part 1</title>
    <link rel="alternate" href="https://perl.com/article/perl-one-liners-part-1/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;A shell (like Bash) provides built-in commands and scripting features to easily solve and automate various tasks. External commands like grep, sed, Awk, sort, find, or parallel can be combined to work with each other. Sometimes you can use Perl either as a single replacement or a complement to them for specific use cases.&lt;/p&gt;

&lt;p&gt;Perl is the most robust portable option for text processing needs. Perl has a feature rich regular expression engine, built-in functions, an extensive ecosystem, and is quite portable. However, Perl may have slower performance compared to specialized tools and can be more verbose.&lt;/p&gt;

&lt;h2 id="one-liners-or-scripts"&gt;One-liners or scripts?&lt;/h2&gt;

&lt;p&gt;For assembly-level testing of a digital signal processing (DSP) chip, I had to replicate the same scenario for multiple address ranges. My working knowledge of Linux command line was limited at that time and I didn&amp;rsquo;t know how to use sed or Awk. I used Vim and Perl for all sorts of text processing needs.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t know about Perl&amp;rsquo;s options for one-liners, so I used to modify a script whenever I had to do substitutions for multiple files. Once, I even opened the files as Vim buffers and applied a &lt;code&gt;bufdo&lt;/code&gt; command to see if that would make my workflow simpler. If I had known about Perl one-liners, I could have easily utilized find and Bash globs to make my life easier, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -i -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/0xABCD;/0x1234;/; s/0xDEAD;/0xBEEF;/&amp;#39;&lt;/span&gt; *.tests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; option will write back the changes to the source files. If needed, I can pass an argument to create a backup of the original files. For example, &lt;code&gt;-i.bkp&lt;/code&gt; will create &lt;em&gt;ip.txt.bkp&lt;/em&gt; as the backup for &lt;em&gt;ip.txt&lt;/em&gt; passed as the input file. I can also put the backups in another existing directory. The &lt;code&gt;*&lt;/code&gt; gets expanded to original filename:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ mkdir backups
$ perl -i&lt;span style="color:#e6db74"&gt;&amp;#39;backups/*&amp;#39;&lt;/span&gt; -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/SEARCH/REPLACE/g&amp;#39;&lt;/span&gt; *.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="powerful-regexp-features"&gt;Powerful regexp features&lt;/h2&gt;

&lt;p&gt;Perl regexps are much more powerful than either basic or extended regular expressions used by utilities. The common features I often use are non-greedy and possessive quantifiers, lookarounds, the &lt;code&gt;/e&lt;/code&gt; flag, subexpression calls, and &lt;code&gt;(*SKIP)(*FAIL)&lt;/code&gt;. Here are some examples from StackOverflow threads that I have answered over the years.&lt;/p&gt;

&lt;h3 id="skip-some-matches"&gt;Skip some matches&lt;/h3&gt;

&lt;p&gt;This question needed &lt;a href="https://stackoverflow.com/q/64368280/4082052"&gt;to convert avr-asm to arm-gnu comments&lt;/a&gt;. The starting file looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#34;;&amp;#34;&lt;/span&gt; ; comment
  ;;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I need to change &lt;code&gt;;&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt;, but &lt;code&gt;;&lt;/code&gt; within single or double quotes shouldn&amp;rsquo;t be affected. I can match quoted &lt;code&gt;;&lt;/code&gt; in the first branch of the alternation and use &lt;code&gt;(*SKIP)(*F)&lt;/code&gt; to not replace those:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/(?:\x27;\x27|&amp;#34;;&amp;#34;)(*SKIP)(*F)|;/@/&amp;#39;&lt;/span&gt; ip.txt
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
ABC r1,&lt;span style="color:#e6db74"&gt;&amp;#34;;&amp;#34;&lt;/span&gt; @ comment
  @;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use &lt;code&gt;(*SKIP)(*F)&lt;/code&gt; so often that I wish it had a shorter syntax, &lt;code&gt;(*SF)&lt;/code&gt; for example.&lt;/p&gt;

&lt;h3 id="replace-a-string-with-an-incrementing-value"&gt;Replace a string with an incrementing value&lt;/h3&gt;

&lt;p&gt;I can &lt;a href="https://stackoverflow.com/q/42554684/4082052"&gt;replace strings with incrementing value&lt;/a&gt;. The &lt;code&gt;/e&lt;/code&gt; on a substitution allows me to treat the replacement side as Perl code. Whatever that code evaluates to is the replacement. That can be a variable that I increment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;a | a | a | a | a | a | a | a&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/ *\| */$i++/ge&amp;#39;&lt;/span&gt;
a0a1a2a3a4a5a6a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="reverse-a-substring"&gt;Reverse a substring&lt;/h3&gt;

&lt;p&gt;I also used the &lt;code&gt;/e&lt;/code&gt; trick &lt;a href="https://stackoverflow.com/q/63681983/4082052"&gt;to reverse the text matched by a pattern&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;romarana789:qwerty12543&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/\d+$/reverse $&amp;amp;/e&amp;#39;&lt;/span&gt;
romarana789:qwerty34521&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="do-some-arithmetic"&gt;Do some arithmetic&lt;/h3&gt;

&lt;p&gt;Adding another &lt;code&gt;/e&lt;/code&gt; to get &lt;code&gt;/ee&lt;/code&gt; means there are two rounds of Perl code. I evaluate the replacement side to get the string that I&amp;rsquo;ll evaluate as Perl code. In &lt;a href="https://stackoverflow.com/q/62241101/4082052"&gt;Arithmetic replacement in a text file&lt;/a&gt;, I need to find simple arithmetic, like &lt;code&gt;25100+10&lt;/code&gt;, and replace that with its arithmetic result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25100&lt;/span&gt;+10
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25100+1,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can do that with one &lt;code&gt;/e&lt;/code&gt; by matching the numbers and doing some Perl on the replacement side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/(\d+)\+(\d+)/$1+$2/ge&amp;#39;&lt;/span&gt; ip.txt
id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25110&lt;/span&gt;
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25101,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But instead of matching the numbers separately, I can match the whole expression. The match is in &lt;code&gt;$&amp;amp;&lt;/code&gt;, so the first &lt;code&gt;/e&lt;/code&gt; interpolates that to &lt;code&gt;25100+10&lt;/code&gt;. The second round runs that as Perl, which is addition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/\d+\+\d+/$&amp;amp;/gee&amp;#39;&lt;/span&gt; ip.txt
id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25110&lt;/span&gt;
xyz&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;+
abc&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;
conf_string&lt;span style="color:#f92672"&gt;=&lt;/span&gt;LMN,J,IP,25101,0,3,1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That would also make it easier to handle a set of operators:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;2+3 10-3 8*8 11/5&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s|\d+[+/*-]\d+|$&amp;amp;|gee&amp;#39;&lt;/span&gt;
&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;64&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="handling-the-newline"&gt;Handling the newline&lt;/h2&gt;

&lt;p&gt;I want to un-hypenate this text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;Hello there.
It will rain to-
day. Have a safe
and pleasant jou-
rney.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlike sed and Awk, you can choose to preserve the record separator in Perl. That makes it easier to solve this problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/-\n//&amp;#39;&lt;/span&gt; msg.txt
Hello there.
It will rain today. Have a safe
and pleasant journey.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a href="https://unix.stackexchange.com/q/647648/109046"&gt;remove dashes and replace newlines with spaces&lt;/a&gt; for a similar problem and to compare the Perl solution with sed/Awk.&lt;/p&gt;

&lt;h2 id="multiline-fixed-string-substitution"&gt;Multiline fixed-string substitution&lt;/h2&gt;

&lt;p&gt;Escaping regexp metacharacters is simpler with built-in features in Perl. Combined with slurping entire input file as a single string, I can easily perform multiline fixed-string substitutions. Consider this sample input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;This is a multiline
sample input with lots
of special characters
like . &lt;span style="color:#f92672"&gt;()&lt;/span&gt; * &lt;span style="color:#f92672"&gt;[]&lt;/span&gt; $ &lt;span style="color:#f92672"&gt;{}&lt;/span&gt;
^ + ? &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;and &lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Say you have a file containing the lines you wish to match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;like . &lt;span style="color:#f92672"&gt;()&lt;/span&gt; * &lt;span style="color:#f92672"&gt;[]&lt;/span&gt; $ &lt;span style="color:#f92672"&gt;{}&lt;/span&gt;
^ + ? &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;and &lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#39;&lt;/span&gt; and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And a file containing the replacement string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;---------------------
$&amp;amp; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $1 + $2 / &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;4
&lt;span style="color:#f92672"&gt;=====================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s one way to do it with Perl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -0777 -ne &lt;span style="color:#e6db74"&gt;&amp;#39;$#ARGV==1 ? $s=$_ : $#ARGV==0 ? $r=$_ :
&lt;/span&gt;&lt;span style="color:#e6db74"&gt;                  print s/\Q$s/$r/gr&amp;#39;&lt;/span&gt; search.txt replace.txt ip.txt
This is a multiline
sample input with lots
of special characters
---------------------
$&amp;amp; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; $1 + $2 / &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\ &lt;/span&gt;4
&lt;span style="color:#f92672"&gt;=====================&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in the above solution, contents of &lt;code&gt;search.txt&lt;/code&gt; and &lt;code&gt;replace.txt&lt;/code&gt; are also processed by the Perl command. Avoid using shell variables to save their contents, since trailing newlines and ASCII NUL characters will require special attention.&lt;/p&gt;

&lt;p&gt;Awk and sed do not have an equivalent option to slurp the entire input file content. Sed is Turing complete and Awk is a programming language, so you can write code for it if you wish, in addition to the code you&amp;rsquo;d need for escaping the metacharacters.&lt;/p&gt;

&lt;h2 id="better-regexp-support"&gt;Better regexp support&lt;/h2&gt;

&lt;p&gt;Some other regexp libraries have problems tied to whatever they use to implement them. GNU versions, for example, may have some bugs that other implementations may not have. Which version you use can give different results. Perl, however, has the same bugs everywhere.&lt;/p&gt;

&lt;h3 id="back-references"&gt;Back references&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=25322"&gt;problem with backreferences in glibc&lt;/a&gt; that I found and &lt;a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=26864"&gt;reported for grep&lt;/a&gt;. This bug is seen in at least GNU implementations of grep and sed. As far as I know, no implementation of Awk supports backreferences within regexp definition.&lt;/p&gt;

&lt;p&gt;I wanted to get words having two occurrences of consecutive repeated characters. This example takes some time and results in no output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ grep -xiE &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39;&lt;/span&gt; /usr/share/dict/words&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does work when the nesting is unrolled or PCRE is used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ grep -xiE &lt;span style="color:#e6db74"&gt;&amp;#39;[a-z]*([a-z])\1[a-z]*([a-z])\2[a-z]*&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...

$ grep -xiP &lt;span style="color:#e6db74"&gt;&amp;#39;([a-z]*([a-z])\2[a-z]*){2}&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s the Perl, which is the original regexp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /^([a-z]*([a-z])\2[a-z]*){2}$/i&amp;#39;&lt;/span&gt; /usr/share/dict/words
Abbott
Annabelle
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="word-boundaries"&gt;Word boundaries&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/579889/109046"&gt;Why doesn&amp;rsquo;t this sed command replace the 3rd-to-last &amp;ldquo;and&amp;rdquo;?&lt;/a&gt; shows another interesting bug when word boundaries and group repetition are involved. This bug is seen in anything using the regexp stuff from glibc (as you would on Linux):&lt;/p&gt;

&lt;p&gt;This incorrectly matches because there is no word boundary in the middle of &amp;ldquo;cocoa&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ sed --version
sed &lt;span style="color:#f92672"&gt;(&lt;/span&gt;GNU sed&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;.8
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | sed -nE &lt;span style="color:#e6db74"&gt;&amp;#39;/(\bco){2}/p&amp;#39;&lt;/span&gt;
cocoa&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without the quantifier, there&amp;rsquo;s no problem and no matches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | sed -nE &lt;span style="color:#e6db74"&gt;&amp;#39;/\bco\bco/p&amp;#39;&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;cocoa&amp;#39;&lt;/span&gt; | perl -ne &lt;span style="color:#e6db74"&gt;&amp;#39;print if /(\bco){2}/&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;rsquo;s another example from GNU sed. This modifies the line because it thinks it finds &amp;ldquo;it&amp;rdquo; as a separate word two times after &amp;ldquo;with&amp;rdquo;, but the second is really in the middle of &amp;ldquo;sit&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ too&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the pattern to get rid of the quantifier and it works correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with.*\bit\b.*\bit\b/XYZ/&amp;#39;&lt;/span&gt;
it line with it here sit too
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too it a&amp;#39;&lt;/span&gt; | sed -E &lt;span style="color:#e6db74"&gt;&amp;#39;s/with.*\bit\b.*\bit\b/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ a

&lt;span style="color:#75715e"&gt;# Perl doesn&amp;#39;t need such workarounds&lt;/span&gt;
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line with it here sit too
$ echo &lt;span style="color:#e6db74"&gt;&amp;#39;it line with it here sit too it a&amp;#39;&lt;/span&gt; | perl -pe &lt;span style="color:#e6db74"&gt;&amp;#39;s/with(.*\bit\b){2}/XYZ/&amp;#39;&lt;/span&gt;
it line XYZ a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="stay-tuned"&gt;Stay tuned&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ll have more in Part 2, where I&amp;rsquo;ll delve into XML, JSON, and CSV.&lt;/p&gt;

&lt;h2 id="other-things-to-read"&gt;Other things to read&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/303044/109046"&gt;When to use grep, sed, Awk, Perl, etc&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dave Cross&amp;rsquo;s &lt;a href="https://www.perl.com/pub/2004/08/09/commandline.html/"&gt;Perl Command-Line Options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/q/7427262/4082052"&gt;Pitfalls of reading file into shell variable&lt;/a&gt; and my blog post on &lt;a href="https://learnbyexample.github.io/multiline-search-and-replace/"&gt;multiline fixed-string search and replace with cli tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Known bugs section in the &lt;a href="https://www.gnu.org/software/grep/manual/grep.html#Known-Bugs"&gt;GNU grep manual&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/q/24275070/4082052"&gt;BSD/macOS sed vs GNU sed vs the POSIX sed specification&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href="https://unix.stackexchange.com/q/13711/109046"&gt;Differences between sed on Mac OSX and other standard sed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;em&gt;[image from &lt;a href="https://www.flickr.com/photos/ppetrovic72/3981925030/in/photolist-74SpzQ-bU41RP-2kNaLcQ-nxdaVA-bKtznV-bwyLmq-beJniM-58jr5R-2kNakh3-6fxhGR-nxtfo6-xDEB2-2hdZdFv-XPjLeQ-6nGeoM-29v1fwo-puR1K-2kNaM6P-nxtgeK-a2nLuc-qvDmkw-nfYDTu-6R6FQB-2i1Psj2-74Nwsu-2kNam6c-c2EsqS-2i1PsgB-nvqjK1-2i1RTpS-2i1T2RR-2i1S2Wr-2i1Psik-2gcee9c-2i1PHci-23p4pKV-2i4eukR-urRBFS-nzf35k-6R6Fmp-nvqicm-pvqAaK-6RaKuU-2i1S8S9-2i1Tbr1-2i1Psd5-2i1S9WP-2i1T2LL-nfYwEo-2i1RTnx"&gt;Dim Sum!&lt;/a&gt; on Flickr, (CC BY-NC-ND 2.0)]&lt;/em&gt;&lt;/p&gt;
</content>
    <id>https://perl.com/article/perl-one-liners-part-1/</id>
    <published>2021-05-12T02:54:23Z</published>
    <updated>2021-05-12T02:54:23Z</updated>
  </entry>
  <entry>
    <title>Testing Perl: To plan or not to plan</title>
    <link rel="alternate" href="https://dev.to/mjgardner/testing-perl-to-plan-or-not-to-plan-3plb" type="text/html"/>
    <content type="html">&lt;p&gt;Let’s assume for the moment that you’re writing a Perl module or application. You’d like to maintain some level of software quality (or &lt;a href="https://qa.perl.org/phalanx/kwalitee.html"&gt;kwalitee&lt;/a&gt;), so you’re writing a suite of test scripts. Whether you’re writing them first (good for you for practicing &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;test-driven development&lt;/a&gt;!) or the application code is already there, you’ll probably be reaching for &lt;a href="https://metacpan.org/pod/Test::Simple"&gt;Test::Simple&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Test::More"&gt;Test::More&lt;/a&gt;, or one of the &lt;a href="https://metacpan.org/pod/Test2::Suite"&gt;Test2::Suite&lt;/a&gt; bundles. With the latter two &lt;strong&gt;you’re immediately confronted with a choice:&lt;/strong&gt; do you count up the number of tests into a plan, or do you forsake that in favor of leaving a &lt;code&gt;done_testing()&lt;/code&gt; call at the end of your test script(s)?&lt;/p&gt;

&lt;p&gt;There are good arguments for both approaches. When you first start, you probably have no idea how many tests your scripts will contain. After all, a test script can be a useful tool for designing a module’s interface by writing example code that will use it. Your exploratory code would be written as if the module or application was already done, testing it in the way you’d like it to work. &lt;strong&gt;Not declaring a plan makes perfect sense in this case;&lt;/strong&gt; just put &lt;code&gt;done_testing()&lt;/code&gt; at the end and get back to defining your tests.&lt;/p&gt;

&lt;p&gt;You don’t have that option when using Test::Simple, of course—it’s so basic it only has one function (&lt;code&gt;ok()&lt;/code&gt;), and you have to pre-declare how many tests you plan to run when &lt;code&gt;use&lt;/code&gt;ing the module, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Test::&lt;/span&gt;&lt;span class="nv"&gt;Simple&lt;/span&gt; &lt;span class="s"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test::More also &lt;a href="https://metacpan.org/pod/Test::More#I-love-it-when-a-plan-comes-together"&gt;supports this form of plan&lt;/a&gt;, or you can opt to use its &lt;code&gt;plan&lt;/code&gt; function to state the number of tests in your script or &lt;code&gt;subtest&lt;/code&gt;. With Test2 you have to use &lt;code&gt;plan&lt;/code&gt;. Either way, &lt;strong&gt;the plan acts as a sort of meta-test,&lt;/strong&gt; making sure that you executed exactly what you intended: no more, no less. While there are situations where it’s not possible to predict how many times a given set of tests should run, I would highly suggest that in all other cases you should “clean up” your tests and declare a plan. Later on, if you add or remove tests you’ll immediately be aware that something has changed and it’s time to tally up a new plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about other Perl testing frameworks?&lt;/strong&gt; They can use plans, too. Here are two examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Test::Class"&gt;Test::Class&lt;/a&gt; declares its plans as part of the method’s &lt;a href="https://metacpan.org/pod/Test::Class#Test"&gt;Test attribute&lt;/a&gt;, and uses helper methods called &lt;code&gt;fail_if_returned_early&lt;/code&gt; and &lt;code&gt;fail_if_returned_late&lt;/code&gt; to indicate that an unfollowed plan should trigger failure.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://metacpan.org/pod/Test::Class::Moose"&gt;Test::Class::Moose&lt;/a&gt; says &lt;a href="https://metacpan.org/pod/Test::Class::Moose#Plans"&gt;“no plans needed”&lt;/a&gt; but also supports declaring plans either in an attribute or via a method call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thoughts? Does declaring a test plan make writing tests too inflexible? Does not having a plan encourage bad behavior? Tell me what you think in the comments below.&lt;/p&gt;

</content>
    <author>
      <name>Mark Gardner</name>
    </author>
    <id>https://dev.to/mjgardner/testing-perl-to-plan-or-not-to-plan-3plb</id>
    <published>2021-05-11T14:00:00Z</published>
    <updated>2021-05-11T14:00:00Z</updated>
    <category term="perl"/>
    <category term="testing"/>
    <category term="qa"/>
    <category term="codequality"/>
  </entry>
  <entry>
    <title>Perl modules loading, calling or returning</title>
    <link rel="alternate" href="https://dev.to/thibaultduponchelle/perl-modules-importing-calling-or-returning-l5o" type="text/html"/>
    <content type="html">&lt;p&gt;Modules (and CPAN) are one of the "killer feature" of Perl, this article will discuss module loading/calling and some subtleties around this topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-modules-live-do-not-dictate-how-they-are-called"&gt;
  &lt;/a&gt;
  Where modules live do not dictate how they are called.
&lt;/h2&gt;

&lt;p&gt;It is something important to understand early when you learn Perl programming, how you will load a module does not dictate its future package name (how it will be called). &lt;/p&gt;

&lt;p&gt;Let's start with a simple example with a empty module stored in a &lt;code&gt;File.pm&lt;/code&gt; in a subdirectory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Directory
└── Directory
    └── File.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;File.pm&lt;/code&gt; contains nothing but a &lt;code&gt;true&lt;/code&gt; return value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The import is done by pointing to the &lt;strong&gt;path&lt;/strong&gt; of the &lt;strong&gt;pm&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, all good! :D&lt;/p&gt;

&lt;p&gt;But it is too simple, so let's continue with a more real world example that actually &lt;em&gt;calls something&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Foo Bar!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is imported and called like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="c1"&gt;# Import &lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Call&lt;/span&gt;
&lt;span class="nn"&gt;Directory::Directory::File::&lt;/span&gt;&lt;span class="nv"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that &lt;code&gt;Directory::Directory::File::foobar();&lt;/code&gt; matches the package declaration in the module file... Where actually when &lt;em&gt;calling&lt;/em&gt; the modules functions/variables, we have to follow the package name decided by the author for its module (read the doc).&lt;/p&gt;

&lt;p&gt;It could be &lt;code&gt;Directory::Directory::File::foobar()&lt;/code&gt; or something totally different from the &lt;strong&gt;path&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Look at this new example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Directory
└── Directory
    └── File.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The module is stored in &lt;code&gt;Directory/Directory/File.pm&lt;/code&gt; but belongs to package &lt;strong&gt;"Misleading"&lt;/strong&gt; and declares/defines once again a function &lt;code&gt;foobar&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Misleading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Foo Bar!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On importer side, the &lt;code&gt;use&lt;/code&gt; and later the function call are not using the same "id" name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="c1"&gt;# Import &lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# But package is actually named "Misleading" !!!&lt;/span&gt;
&lt;span class="nn"&gt;Misleading::&lt;/span&gt;&lt;span class="nv"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# WON'T WORK!&lt;/span&gt;
&lt;span class="c1"&gt;# Directory::Directory::File::foobar();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;N.B.: Please note that the good practice is to make match path and package name. But you can meet &lt;a href="https://metacpan.org/pod/DDP"&gt;aliases&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-vs-require"&gt;
  &lt;/a&gt;
  use vs require
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; are doing &lt;em&gt;almost&lt;/em&gt; the same thing but at different phases.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/functions/require"&gt;require documentation&lt;/a&gt; ends with "For a yet-more-powerful import facility, see &lt;code&gt;use&lt;/code&gt; and perlmod."&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; keyword executes at compilation phase means before execution even if it's the last line of your program.&lt;/p&gt;

&lt;p&gt;Here is my sample "Bazinga" module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bazinga!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And trying to call the function &lt;code&gt;joke&lt;/code&gt; before to actually load it works very well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'Bazinga::joke(); use Bazinga;'
Bazinga!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would not be the same with imports at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'Bazinga::joke(); require Bazinga;'
Undefined subroutine &amp;amp;Bazinga::joke called at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With runtime imports, I can also import conditionally a module.&lt;/p&gt;

&lt;p&gt;The following example will reload a module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# Is it already loaded?&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$INC&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;Bazinga.pm&lt;/span&gt;&lt;span class="p"&gt;"})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Press ENTER to reload module:&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;STDIN&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;delete&lt;/span&gt; &lt;span class="nv"&gt;$INC&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;Bazinga.pm&lt;/span&gt;&lt;span class="p"&gt;"};&lt;/span&gt; &lt;span class="c1"&gt;# Remove it from list&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# Reload it&lt;/span&gt;
    &lt;span class="nv"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this code, it will import and execute &lt;code&gt;joke&lt;/code&gt; then reload the module on "Enter" (and run &lt;code&gt;joke&lt;/code&gt; again).&lt;br&gt;
Since it reloads the module, I can even change the module (the content of the &lt;code&gt;joke&lt;/code&gt; function) during the execution of the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Knock Knock Knock Penny!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Knock Knock Knock Penny!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Knock Knock Knock Penny!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And everything becomes more &lt;em&gt;dynamic&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Press&lt;/span&gt; &lt;span class="nv"&gt;ENTER&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;reload&lt;/span&gt; &lt;span class="nv"&gt;module:&lt;/span&gt;    
&lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Penny&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Penny&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Penny&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#perl-module-return-value"&gt;
  &lt;/a&gt;
  Perl module return value
&lt;/h2&gt;

&lt;p&gt;Modules have to return a "true" value, it sometimes confuse beginners, but I read somewhere that it comes from &lt;code&gt;Perl 4&lt;/code&gt; where importing a module was much more like executing a subscript. &lt;/p&gt;

&lt;p&gt;So what if we try to return a "false" value?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When importing it, we get in trouble:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'use Boom;'
Boom.pm did not return a true value at -e line.
BEGIN failed--compilation aborted at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why are there is 2 messages here? &lt;br&gt;
There is one about importing and one about compilation because of the "phases" I mentioned just above.&lt;/p&gt;

&lt;p&gt;Just replace &lt;code&gt;use&lt;/code&gt; per &lt;code&gt;require&lt;/code&gt; to change the phase where the import is processed and it will now only print the import failure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'require Boom;'
Boom.pm did not return a true value at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some people are playing with modules return codes like &lt;a href="https://github.com/schwern"&gt;Michael G Schwern&lt;/a&gt; see &lt;a href="https://stackoverflow.com/a/1864035"&gt;his stackoverflow response&lt;/a&gt; or more recently &lt;strong&gt;PEVANS&lt;/strong&gt; with a &lt;code&gt;0x55AA&lt;/code&gt; in its &lt;a href="https://metacpan.org/release/Faster-Maths/source/lib/Faster/Maths.pm#L104"&gt;Faster::Math&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more example of return values thanks to &lt;a href="https://returnvalues.plix.at/values.html"&gt;Acme::ReturnValue&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m"&gt;
  &lt;/a&gt;
  -M
&lt;/h2&gt;

&lt;p&gt;You can import a module with command line switch &lt;code&gt;-M&lt;/code&gt; like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -MBazinga -e 'joke()'
Bazinga!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visibility"&gt;
  &lt;/a&gt;
  Visibility
&lt;/h2&gt;

&lt;p&gt;Namespace pollution and symbols export is an important topic that I will not discuss today but I leave you in &lt;a href="https://perldoc.perl.org/Exporter#Selecting-What-to-Export"&gt;a good company&lt;/a&gt; 😀&lt;/p&gt;

</content>
    <author>
      <name>Tib</name>
    </author>
    <id>https://dev.to/thibaultduponchelle/perl-modules-importing-calling-or-returning-l5o</id>
    <published>2021-05-11T11:58:41Z</published>
    <updated>2021-05-11T11:58:41Z</updated>
    <category term="perl"/>
    <category term="cpan"/>
    <category term="modules"/>
  </entry>
  <entry>
    <title>Grow Your Karma with a Job that Does Good! Perl role in Canberra, Australia</title>
    <link rel="alternate" href="https://job.perl.careers/15f" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">This organization is on the cutting edge of developing and delivering genomics and IT tools to improve crop performance and natural resource utilization. With their help, food security can be established around the world through the creation of new, pest-resistant crops and plant strains so basically, you’re contributing to curing world hunger!</div>
    </content>
    <id>https://job.perl.careers/15f</id>
    <published>2021-05-10T10:00:53Z</published>
    <updated>2021-05-10T10:00:53Z</updated>
  </entry>
  <entry>
    <title>Big Dividends, Bigger Opportunity! Perl role with multiple location options</title>
    <link rel="alternate" href="https://job.perl.careers/vcr" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online trading is big. Big dividends, big excitement, and big barriers for most people. Enter our client, an international financial company who believe online trading should be open and accessible to all. With a brand that enjoys global recognition and the kind of growth that stokes envy in their competitors, they’re looking to add a few good Perl developers to their expansive team.</div>
    </content>
    <id>https://job.perl.careers/vcr</id>
    <published>2021-05-10T10:00:52Z</published>
    <updated>2021-05-10T10:00:52Z</updated>
  </entry>
  <entry>
    <title>Vienna Does it Best. Perl Developer role in Vienna</title>
    <link rel="alternate" href="https://job.perl.careers/dzt" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">After almost twenty years in business, our client has proven their success in the Austrian and German markets and are now expanding into the UK and Poland. With a corporate belief system that promotes transparency, quality content, and a user-friendly experience, it’s no wonder they’re breaking into new markets and have an opening for a Perl programmer.</div>
    </content>
    <id>https://job.perl.careers/dzt</id>
    <published>2021-05-10T10:00:51Z</published>
    <updated>2021-05-10T10:00:51Z</updated>
  </entry>
  <entry>
    <title>A New Adventure is only a Click Away. Perl Developer role, remote within UK</title>
    <link rel="alternate" href="https://job.perl.careers/3uu" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Our client knows all about what drives a person to move on from a stagnant job. An international company whose servers are home to more than 80% of the UK’s job ads, they are the first and last stop for many recruiters, employers, and workers. Looking for a perl developer to join their team. Remote role within the UK.</div>
    </content>
    <id>https://job.perl.careers/3uu</id>
    <published>2021-05-10T10:00:50Z</published>
    <updated>2021-05-10T10:00:50Z</updated>
  </entry>
  <entry>
    <title>A Role that Makes Dollars (and Cents). Perl Developer Role in London</title>
    <link rel="alternate" href="https://job.perl.careers/8o4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As one of the leading providers of premium native advertising for the financial services, technology, corporate, and lifestyle sectors, our clients develop the targeted advertising that makes their online users sit up and take notice. This role makes good dollars and cents for one dedicated senior Perl/JS programmer.</div>
    </content>
    <id>https://job.perl.careers/8o4</id>
    <published>2021-05-10T10:00:49Z</published>
    <updated>2021-05-10T10:00:49Z</updated>
  </entry>
  <entry>
    <title>The Perl and Raku Conference in the Cloud 2021</title>
    <link rel="alternate" href="https://perlconference.us/tprc-2021-cloud/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Online 8-10 June 2021.</div>
    </content>
    <id>https://perlconference.us/tprc-2021-cloud/</id>
    <published>2021-05-10T10:00:48Z</published>
    <updated>2021-05-10T10:00:48Z</updated>
  </entry>
  <entry>
    <title>Washington, DC Perl (DCPM)</title>
    <link rel="alternate" href="http://dc.pm.org/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Tuesday, 1st June, 2021; 07:00 PM Eastern Time (US and Canada)</div>
    </content>
    <id>http://dc.pm.org/</id>
    <published>2021-05-10T10:00:47Z</published>
    <updated>2021-05-10T10:00:47Z</updated>
  </entry>
  <entry>
    <title>Toronto Perl Mongers Online Meeting</title>
    <link rel="alternate" href="https://www.meetup.com/Toronto-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 27, 2021</div>
    </content>
    <id>https://www.meetup.com/Toronto-Perl-Mongers/</id>
    <published>2021-05-10T10:00:46Z</published>
    <updated>2021-05-10T10:00:46Z</updated>
  </entry>
  <entry>
    <title>Berlin Perl Mongers</title>
    <link rel="alternate" href="https://www.meetup.com/Berlin-Perl-Mongers/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, May 26, 2021</div>
    </content>
    <id>https://www.meetup.com/Berlin-Perl-Mongers/</id>
    <published>2021-05-10T10:00:45Z</published>
    <updated>2021-05-10T10:00:45Z</updated>
  </entry>
  <entry>
    <title>Silicon Valley Perl - Git Hooks(Client-side)</title>
    <link rel="alternate" href="https://www.meetup.com/SVPerl/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Thursday, May 22, 2021</div>
    </content>
    <id>https://www.meetup.com/SVPerl/</id>
    <published>2021-05-10T10:00:44Z</published>
    <updated>2021-05-10T10:00:44Z</updated>
  </entry>
  <entry>
    <title>Houston Perl Mongers Online Meeting: OpenMP &amp; Perl &amp; perl</title>
    <link rel="alternate" href="https://houston.pm.org/announce_meeting.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">May 13th, 2021 06:00 PM Central Time (US and Canada)</div>
    </content>
    <id>https://houston.pm.org/announce_meeting.html</id>
    <published>2021-05-10T10:00:43Z</published>
    <updated>2021-05-10T10:00:43Z</updated>
  </entry>
  <entry>
    <title>Purdue Perl Mongers - HackLafayette</title>
    <link rel="alternate" href="https://www.meetup.com/hacklafayette/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Wednesday, May 12, 2021</div>
    </content>
    <id>https://www.meetup.com/hacklafayette/</id>
    <published>2021-05-10T10:00:42Z</published>
    <updated>2021-05-10T10:00:42Z</updated>
  </entry>
  <entry>
    <title>Upcoming live events</title>
    <link rel="alternate" href="https://code-maven.com/live" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">There is one today and one tomorrow and more are planned.</div>
    </content>
    <id>https://code-maven.com/live</id>
    <published>2021-05-10T10:00:41Z</published>
    <updated>2021-05-10T10:00:41Z</updated>
  </entry>
  <entry>
    <title>Working on PyDigger with Upasana Shukla</title>
    <link rel="alternate" href="https://code-maven.com/pydigger-1" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Project of Gabor Szabo - Python</div>
    </content>
    <id>https://code-maven.com/pydigger-1</id>
    <published>2021-05-10T10:00:40Z</published>
    <updated>2021-05-10T10:00:40Z</updated>
  </entry>
  <entry>
    <title>Working on the workout-app</title>
    <link rel="alternate" href="https://code-maven.com/workout-app" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Project of Rachel Normand - ReactJS front-end, Flask Python back-end</div>
    </content>
    <id>https://code-maven.com/workout-app</id>
    <published>2021-05-10T10:00:39Z</published>
    <updated>2021-05-10T10:00:39Z</updated>
  </entry>
  <entry>
    <title>Developing an application for organising online self knowledge workshops</title>
    <link rel="alternate" href="https://code-maven.com/online-self-knowledge-workshop" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Project of Ivett Ördög (aka. devil) - ReactJS (back-end will be in NodeJS)</div>
    </content>
    <id>https://code-maven.com/online-self-knowledge-workshop</id>
    <published>2021-05-10T10:00:38Z</published>
    <updated>2021-05-10T10:00:38Z</updated>
  </entry>
  <entry>
    <title>NICEPERL's lists</title>
    <link rel="alternate" href="http://niceperl.blogspot.com/" type="text/html"/>
    <content type="html">&lt;a href="https://niceperl.blogspot.com/2021/05/cccxl-17-great-cpan-modules-released.html"&gt;Great modules released last week&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdlxvi-metacpan-weekly-report.html"&gt;MetaCPAN weekly report&lt;/a&gt;;&lt;br&gt;&lt;a href="https://niceperl.blogspot.com/2021/05/cdlxxxix-stackoverflow-perl-report.html"&gt;StackOverflow Perl report&lt;/a&gt;.</content>
    <id>http://niceperl.blogspot.com/</id>
    <published>2021-05-10T10:00:37Z</published>
    <updated>2021-05-10T10:00:37Z</updated>
  </entry>
  <entry>
    <title>Self reporting for 2021.04</title>
    <link rel="alternate" href="https://szabgab.com/report-2021-04.html" type="text/html"/>
    <id>https://szabgab.com/report-2021-04.html</id>
    <published>2021-05-10T10:00:36Z</published>
    <updated>2021-05-10T10:00:36Z</updated>
  </entry>
  <entry>
    <title>Monthly Report - April</title>
    <link rel="alternate" href="http://blogs.perl.org/users/mohammad_s_anwar/2021/05/monthly-report---april-2.html" type="text/html"/>
    <id>http://blogs.perl.org/users/mohammad_s_anwar/2021/05/monthly-report---april-2.html</id>
    <published>2021-05-10T10:00:35Z</published>
    <updated>2021-05-10T10:00:35Z</updated>
  </entry>
  <entry>
    <title>Weekly Challenge 111</title>
    <link rel="alternate" href="https://dev.to/simongreennet/weekly-challenge-111-291m" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Simply loved the creativity in accepting the matrix and target. Nice discussion about his approach.</div>
    </content>
    <id>https://dev.to/simongreennet/weekly-challenge-111-291m</id>
    <published>2021-05-10T10:00:34Z</published>
    <updated>2021-05-10T10:00:34Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Search Letters</title>
    <link rel="alternate" href="https://blog.firedrake.org/archive/2021/05/Perl_Weekly_Challenge_111__Search_Letters.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Roger shared some very interesting ideas dealing with Ordered Letters task. Please go check out yourself.</div>
    </content>
    <id>https://blog.firedrake.org/archive/2021/05/Perl_Weekly_Challenge_111__Search_Letters.html</id>
    <published>2021-05-10T10:00:33Z</published>
    <updated>2021-05-10T10:00:33Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Words and Matrix</title>
    <link rel="alternate" href="https://fluca1978.github.io/2021/05/03/PerlWeeklyChallenge111.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luca showed the power of Raku when dealing with the weekly challenge. He made it look so simple.</div>
    </content>
    <id>https://fluca1978.github.io/2021/05/03/PerlWeeklyChallenge111.html</id>
    <published>2021-05-10T10:00:32Z</published>
    <updated>2021-05-10T10:00:32Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111</title>
    <link rel="alternate" href="https://wlmb.github.io/2021/05/03/PWC111/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Luis shared a unique solution to the Ordered Letters task in Perl. Thanks for sharing.</div>
    </content>
    <id>https://wlmb.github.io/2021/05/03/PWC111/</id>
    <published>2021-05-10T10:00:31Z</published>
    <updated>2021-05-10T10:00:31Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Search Matrix and Ordered Letters</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-111-search-matrix-and-ordered-letters.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As always Lauarent came up a with detailed analysis and presented his solutions in Perl and Raku.</div>
    </content>
    <id>http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-111-search-matrix-and-ordered-letters.html</id>
    <published>2021-05-10T10:00:30Z</published>
    <updated>2021-05-10T10:00:30Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge #111Perl Weekly Challenge #111</title>
    <link rel="alternate" href="https://github.com/drbaggy/perlweeklychallenge-club/blob/master/challenge-111/james-smith/README.md" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">James presented us with an exceptional performance matrix with analysis. Thanks for sharing.</div>
    </content>
    <id>https://github.com/drbaggy/perlweeklychallenge-club/blob/master/challenge-111/james-smith/README.md</id>
    <published>2021-05-10T10:00:29Z</published>
    <updated>2021-05-10T10:00:29Z</updated>
  </entry>
  <entry>
    <title>PWC111 - Ordered Letters</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/06/pwc111-ordered-letters/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Flavio always surprises me with his analysis. This time we get a Unicode lesson.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/06/pwc111-ordered-letters/</id>
    <published>2021-05-10T10:00:28Z</published>
    <updated>2021-05-10T10:00:28Z</updated>
  </entry>
  <entry>
    <title>PWC111 - Search Matrix</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/05/pwc111-search-matrix/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">I am amazed how algorithm complexity is calculated. I still don't understand it, sorry.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/05/pwc111-search-matrix/</id>
    <published>2021-05-10T10:00:27Z</published>
    <updated>2021-05-10T10:00:27Z</updated>
  </entry>
  <entry>
    <title>Efficient Ones: Perl Challenge #111</title>
    <link rel="alternate" href="https://jacoby.github.io/2021/05/03/efficient-ones-perl-challenge-111.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Dave's discussion on the performance matrix is the highlight. You don't want to miss it.</div>
    </content>
    <id>https://jacoby.github.io/2021/05/03/efficient-ones-perl-challenge-111.html</id>
    <published>2021-05-10T10:00:26Z</published>
    <updated>2021-05-10T10:00:26Z</updated>
  </entry>
  <entry>
    <title>Are We in the Matrix? Get in Line, Friend, Get in Line.</title>
    <link rel="alternate" href="https://colincrain.com/2021/05/09/are-we-in-the-matrix-get-in-line-friend-get-in-line/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">We are presented a couple of implementations for Search Matrix task. We even have benchmarks to compare the performance.</div>
    </content>
    <id>https://colincrain.com/2021/05/09/are-we-in-the-matrix-get-in-line-friend-get-in-line/</id>
    <published>2021-05-10T10:00:25Z</published>
    <updated>2021-05-10T10:00:25Z</updated>
  </entry>
  <entry>
    <title>Ordered Search for Raku</title>
    <link rel="alternate" href="https://raku-musings.com/ordered-search.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Arne presented a complete commnad line solution. Cool, he even tried against German dictionary.</div>
    </content>
    <id>https://raku-musings.com/ordered-search.html</id>
    <published>2021-05-10T10:00:24Z</published>
    <updated>2021-05-10T10:00:24Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Ordered Letters</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-111-2.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Abigail is the master of regexes. He came up with another gem of regex in Perl. Highly Recommended.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-111-2.html</id>
    <published>2021-05-10T10:00:23Z</published>
    <updated>2021-05-10T10:00:23Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Search Matrix</title>
    <link rel="alternate" href="https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-111-1.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">As always, Abigail, shows the powers of various languages while dealing with the Search Matrix task. Worth checking.</div>
    </content>
    <id>https://abigail.github.io/HTML/Perl-Weekly-Challenge/week-111-1.html</id>
    <published>2021-05-10T10:00:22Z</published>
    <updated>2021-05-10T10:00:22Z</updated>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111</title>
    <link rel="alternate" href="https://aaronreidsmith.github.io/blog/perl-weekly-challenge-111/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Cool demonstration of fetching data over the web in Raku. Thanks for sharing.</div>
    </content>
    <id>https://aaronreidsmith.github.io/blog/perl-weekly-challenge-111/</id>
    <published>2021-05-10T10:00:21Z</published>
    <updated>2021-05-10T10:00:21Z</updated>
  </entry>
  <entry>
    <title>RECAP - The Weekly Challenge - 111</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/recap-challenge-111" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Enjoy a quick recap of last week contributions by Team PWC dealing with the "Search Matrix" and "Ordered Letters" tasks in Perl and Raku. You will find plenty of solutions to keep you busy.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/recap-challenge-111</id>
    <published>2021-05-10T10:00:20Z</published>
    <updated>2021-05-10T10:00:20Z</updated>
  </entry>
  <entry>
    <title>The Weekly Challenge - 112</title>
    <link rel="alternate" href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-112" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Welcome to a new week with couple of fun tasks "Canonical Path" and "Climb Stairs". If you are new to the weekly challenge then why not join us and have fun every week. For more information, please read <a href="https://perlweeklychallenge.org/faq">FAQ</a> page.</div>
    </content>
    <id>https://perlweeklychallenge.org/blog/perl-weekly-challenge-112</id>
    <published>2021-05-10T10:00:19Z</published>
    <updated>2021-05-10T10:00:19Z</updated>
  </entry>
  <entry>
    <title>Raku CI Bot Grant Report 2021-04</title>
    <link rel="alternate" href="https://news.perlfoundation.org/post/raku-ci-bot-grant-2021-04" type="text/html"/>
    <id>https://news.perlfoundation.org/post/raku-ci-bot-grant-2021-04</id>
    <published>2021-05-10T10:00:18Z</published>
    <updated>2021-05-10T10:00:18Z</updated>
  </entry>
  <entry>
    <title>Mejorar una librería, Utilizar GitHub Actions</title>
    <link rel="alternate" href="https://dev.to/szabgab/mejorar-una-libreria-utilizar-github-actions-3ado" type="text/html"/>
    <id>https://dev.to/szabgab/mejorar-una-libreria-utilizar-github-actions-3ado</id>
    <published>2021-05-10T10:00:17Z</published>
    <updated>2021-05-10T10:00:17Z</updated>
  </entry>
  <entry>
    <title>Easier web sites for CPAN modules </title>
    <link rel="alternate" href="https://dev.to/davorg/easier-web-sites-for-cpan-modules-1nn4" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">When you set up a site for your module, please post a link to it somewhere visible. (e.g. <a href="https://dev.to/t/perl">dev.to</a> or <a href="https://www.reddit.com/r/perl">Reddit</a> just to give two examples). Actually I have another suggestion. If you'd like to set up such a web site and you are not sure how, let's have a <a href="https://code-maven.com/live">live pair setup session</a> where we explore this module.</div>
    </content>
    <id>https://dev.to/davorg/easier-web-sites-for-cpan-modules-1nn4</id>
    <published>2021-05-10T10:00:16Z</published>
    <updated>2021-05-10T10:00:16Z</updated>
  </entry>
  <entry>
    <title>Getting ready for production </title>
    <link rel="alternate" href="https://dev.to/raigaurav/getting-ready-for-production-jio" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Mojolicious - Apache2 Server - uWSGI - Docker</div>
    </content>
    <id>https://dev.to/raigaurav/getting-ready-for-production-jio</id>
    <published>2021-05-10T10:00:15Z</published>
    <updated>2021-05-10T10:00:15Z</updated>
  </entry>
  <entry>
    <title>Show dates in the timezone of the reader using JavaScript</title>
    <link rel="alternate" href="https://code-maven.com/dates-in-the-timezone-of-the-reader-javascript" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">Front-end solution only based on the post of Mark Gardner.</div>
    </content>
    <id>https://code-maven.com/dates-in-the-timezone-of-the-reader-javascript</id>
    <published>2021-05-10T10:00:14Z</published>
    <updated>2021-05-10T10:00:14Z</updated>
  </entry>
  <entry>
    <title>Localizing dates in a Perl web application with JavaScript</title>
    <link rel="alternate" href="https://phoenixtrap.com/2021/05/04/localizing-dates-in-a-perl-web-application-with-javascript/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A Mojolicious-based web application with some light JavaScript code to show the localized version of the dates. Discuss it on <a href="https://dev.to/mjgardner/localizing-dates-in-a-perl-web-application-with-javascript-1n24">dev.to</a>.</div>
    </content>
    <id>https://phoenixtrap.com/2021/05/04/localizing-dates-in-a-perl-web-application-with-javascript/</id>
    <published>2021-05-10T10:00:13Z</published>
    <updated>2021-05-10T10:00:13Z</updated>
  </entry>
  <entry>
    <title>Open Letter to the Perl Foundation Board</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/05/open-letter-to-the-perl-foundation-board.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">In a nutshell: The behaviour of Individual 1 and Individual 2 were unacceptable to some of the signatories, but this not the way to punish them. See also the discussion on <a href="https://www.reddit.com/r/perl/comments/n7z7zy/open_letter_to_the_perl_foundation_board/">Reddit</a>.</div>
    </content>
    <id>http://blogs.perl.org/users/neilb/2021/05/open-letter-to-the-perl-foundation-board.html</id>
    <published>2021-05-10T10:00:12Z</published>
    <updated>2021-05-10T10:00:12Z</updated>
  </entry>
  <entry>
    <title>Substring DWIMmery</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/09/substring-dwimmery/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/09/substring-dwimmery/</id>
    <published>2021-05-10T10:00:11Z</published>
    <updated>2021-05-10T10:00:11Z</updated>
  </entry>
  <entry>
    <title>Avoid the 'butterfly operator' with command-line options</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/08/perlrun-no-butterfly/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/08/perlrun-no-butterfly/</id>
    <published>2021-05-10T10:00:10Z</published>
    <updated>2021-05-10T10:00:10Z</updated>
  </entry>
  <entry>
    <title>The problem learning Perl using Google</title>
    <link rel="alternate" href="https://blog.geekuni.com/2021/05/google-perl-problem.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">There were several earlier attempts to get people to link to modern Perl resources without a lot of success. Let's see if Andrew can get the community to <a href="https://andrewsolomon.github.io/influence-google-search-results">influence Google search results</a>.</div>
    </content>
    <id>https://blog.geekuni.com/2021/05/google-perl-problem.html</id>
    <published>2021-05-10T10:00:09Z</published>
    <updated>2021-05-10T10:00:09Z</updated>
  </entry>
  <entry>
    <title>Perl changes dev's permaban for 'unacceptable' behaviour to a year-long lockout after community response</title>
    <link rel="alternate" href="https://www.theregister.com/2021/05/07/perl_permaban/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">An article in The Register. So now we know what is needed for newpapers to start talking about Perl. Is this really what the Perl community needs?</div>
    </content>
    <id>https://www.theregister.com/2021/05/07/perl_permaban/</id>
    <published>2021-05-10T10:00:08Z</published>
    <updated>2021-05-10T10:00:08Z</updated>
  </entry>
  <entry>
    <title>Perl evangelism project I've been working on</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/n6hwyd/perl_evangelism_project_ive_been_working_on/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">A discussion on Reddit and a website. Do you like it? Comment on Reddit.</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/n6hwyd/perl_evangelism_project_ive_been_working_on/</id>
    <published>2021-05-10T10:00:07Z</published>
    <updated>2021-05-10T10:00:07Z</updated>
  </entry>
  <entry>
    <title>Perling and Curling </title>
    <link rel="alternate" href="https://dev.to/fgasper/perling-and-curling-2i10" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">The fun in using Net::Curl::Easier</div>
    </content>
    <id>https://dev.to/fgasper/perling-and-curling-2i10</id>
    <published>2021-05-10T10:00:06Z</published>
    <updated>2021-05-10T10:00:06Z</updated>
  </entry>
  <entry>
    <title>All partitions of a set - W. Luis Mochán style</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/07/all-partitions-wlm-style/" type="text/html"/>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/07/all-partitions-wlm-style/</id>
    <published>2021-05-10T10:00:05Z</published>
    <updated>2021-05-10T10:00:05Z</updated>
  </entry>
  <entry>
    <title>Paws anyone?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/byterock/2021/05/paws-anyone.html" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">John is back blogging. We hope.</div>
    </content>
    <id>http://blogs.perl.org/users/byterock/2021/05/paws-anyone.html</id>
    <published>2021-05-10T10:00:04Z</published>
    <updated>2021-05-10T10:00:04Z</updated>
  </entry>
  <entry>
    <title>CPANdeps end of life</title>
    <link rel="alternate" href="https://dev.to/drhyde/cpandeps-end-of-life-1pdf" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">One of the constant debates among CPAN developers is what's the oldest version of Perl their modules should support. CPANdeps could have made the decision to stop supporting old modules easier as it provided a way for anyone to download the most recent version of a module that can still be used on their ancient version of Perl. David tells us there is an alternative tool for that and so he plans to shut down his site.</div>
    </content>
    <id>https://dev.to/drhyde/cpandeps-end-of-life-1pdf</id>
    <published>2021-05-10T10:00:03Z</published>
    <updated>2021-05-10T10:00:03Z</updated>
  </entry>
  <entry>
    <title>xmpl - the page configuration API</title>
    <link rel="alternate" href="https://github.polettix.it/ETOOBUSY/2021/05/03/xmpl-page-config/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">xmpl allows you to set up a quick webbish example application that provides, at its basic level, a key-value store. With time, it has grown to support a few additional integrations, e.g. it supports Prometheus-compatible metrics and Kubernetes-compatible 'healtz' endpoints.</div>
    </content>
    <id>https://github.polettix.it/ETOOBUSY/2021/05/03/xmpl-page-config/</id>
    <published>2021-05-10T10:00:02Z</published>
    <updated>2021-05-10T10:00:02Z</updated>
  </entry>
  <entry>
    <title>Anybody hacking on anything cool this week?</title>
    <link rel="alternate" href="https://www.reddit.com/r/perl/comments/n5ceq1/anybody_hacking_on_anything_cool_this_week/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">An excellent list of stuff people have been doing. Are you inspired yet?</div>
    </content>
    <id>https://www.reddit.com/r/perl/comments/n5ceq1/anybody_hacking_on_anything_cool_this_week/</id>
    <published>2021-05-10T10:00:01Z</published>
    <updated>2021-05-10T10:00:01Z</updated>
  </entry>
  <entry>
    <title>#511 - I am exhausted</title>
    <link rel="alternate" href="http://perlweekly.com/archive/511.html" type="text/html"/>
    <content type="html">&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;There have now been more words spent on the improper way TPF in general and CAT in particular handled the abusive behavior than the decade-long harassment and abuse by - let's keep to the tradition - Individual 1. Some of the lieutenants of the abuser demand evidence, but this is just a well known tactic for silencing them. As we all know abused and harassed people rarely speak up. Partially because they know the lieutenants will then try to discredit them and they will receive further harassment and abuse. I am not suprised that many people leave their active role in Perl or withdraw from certain parts of the Perl community and I am not surprised that most of them do it silently. After publishing this I fully expect the team will now restart harassing me as well or will just keep spreading lies about me.&lt;/p&gt;
&lt;p&gt;This whole 'discussion' is really exhausting and I can understand that most of the reasonable people will want to keep a distance from it. So let's see what positive went on the last week and let me point out two:&lt;/p&gt;
&lt;p&gt;The question &lt;a href="https://www.reddit.com/r/perl/comments/n5ceq1/anybody_hacking_on_anything_cool_this_week/"&gt;Anybody hacking on anything cool this week?&lt;/a&gt; and the answers to it were excellent. This is what we need.  So do this: Write a 5-line entry on that Reddit-post or on &lt;a href"https://dev.to/t/perl"&gt;dev.to&lt;/a&gt; (or any other visible place) about a cool project you worked on in the last week. Then send the link to me!&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://dev.to/davorg/easier-web-sites-for-cpan-modules-1nn4"&gt;Easier web sites for CPAN modules&lt;/a&gt; project is another example of Dave Cross moving things forward. If you are a CPAN author, pick one of your modules and set up a website for it using this module. Then send me the link!&lt;/p&gt;
&lt;p&gt;Enjoy your week!&lt;/p&gt;</content>
    <id>http://perlweekly.com/archive/511.html</id>
    <published>2021-05-10T10:00:00Z</published>
    <updated>2021-05-10T10:00:00Z</updated>
    <category term="list of tags?"/>
  </entry>
  <entry>
  <title>The support developers need - survey results and actions taken</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/newcomer-survey-results-actions"/>
  <id>tag:news.perlfoundation.org,2021-05-10:/post/newcomer-survey-results-actions</id>
  <published>2021-05-10T06:47:45</published>
  <updated>2021-05-10T06:47:45</updated>
  <summary>
  <![CDATA[
     **Author: Andrew Solomon.** The Perl Foundation kicked off 2021 with a survey to find out how we can make Perl more welcoming to beginners. In this blog we: Describe who responded to the survey. Summarise the types of support they need. Explain the work TPF is now undertaking to address these needs. Explain how you can help, and how the TPF can support you. A link to the raw data 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p><strong>Author: Andrew Solomon.</strong> </p>

<p>The Perl Foundation kicked off 2021 with a survey to find out how we (both the Perl Foundation and the broader Perl community) can make Perl more welcoming to beginners. In this blog we:
* Describe who responded to the survey.
* Summarise the types of support they need.
* Explain the work TPF is now undertaking to address these needs.
* Explain how you can help, and how the TPF can support you.
* A <a href="https://docs.google.com/spreadsheets/d/1tRd6nAscQjtZhg5ax9BY_wufP27oPvJREg6KgCKKM44/edit?usp=sharing">link to the raw data</a> (minus email addresses).</p>

<h2>Who responded</h2>

<p>Of the 513 respondents, 454 (88.5%) said they would welcome more support. For the purposes of this blog, we’re responding to their requirements. </p>

<p>60% of respondents had over 10 years of experience with Perl, while just over 20% had less than 2 years experience.</p>

<p>Respondents could select multiple descriptions of themselves. 70% would label themselves "software developers" while each of "hobbyists", "devops", and "system administrators" got more than 30%.</p>

<p>Almost 60% of respondents are developing Perl on their own while just over 20% are in a team of supportive developers with Perl experience.</p>

<p>Over 70% were coding in Perl several times per week.</p>

<h2>What they need</h2>

<p>The results highlighted four key themes that require action: 
* Visibility; 
* IDE (<a href="https://en.wikipedia.org/wiki/Integrated_development_environment">Integrated Development Environment</a>); 
* CPAN recommendations; and 
* Civility.</p>

<h3>Visibility</h3>

<p>Ideally respondents want to be able to find answers to their questions by typing them into a search engine like Google. The fallback option is asking questions in a discussion forum. </p>

<h3>IDE (Integrated Development Environment)</h3>

<p>Respondents want a modern IDE - not just Vim and Emacs which were common when Perl came about.</p>

<h3>CPAN Recommendations</h3>

<p>Respondents want a "standard" set of modules to use for common application types. It's hard to know what's robust, well maintained and commonly accepted just by navigating <a href="https://metacpan.org/">MetaCPAN</a> or doing a Google search.</p>

<h3>Civility</h3>

<p>Respondents want discussion forums to be polite, welcoming and supportive. They want to feel comfortable asking questions.</p>

<h2>TPF's response to addressing these needs</h2>

<h3>Visibility</h3>

<p>For technical content, Stack Overflow is like SEO on steroids. There are already a number of people in the community <a href="https://stackoverflow.com/questions/tagged/perl">answering Perl questions there</a>. If you're keen to help out, go ahead and answer questions. But for the most part, people don't ask - they just google [ed. that's "google" the verb] and hope to find the answer. A real contribution would be to add questions and their answers to Stack Overflow so that beginners can just search for them rather than struggle with articulating their problems. For an explanation of how Stack Exchange regards these activities, <a href="https://stackoverflow.com/help/self-answer">see here</a>. Apart from that, please just show your up-arrow approval of good questions and answers you find on Stack Overflow - it helps the beginners (and google search) work out which ones to focus on.</p>

<h3>IDE</h3>

<p>There is already <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a> support for Perl - but feedback in the survey shows that we need a page on https://www.perl.org/ (regularly updated) which lists all relevant tools and puts them in context, whether they're being actively maintained, a brief summary of their functionality, and links to where you can learn more. <a href="https://github.com/tpf/grants-perlfoundation-org#a-regularly-updated-compendium-of-perl-ides-to-be-hosted-on-perlorg">Here</a> are the requirements. If you'd like to bring it about, please apply for a TPF grant <a href="https://www.perlfoundation.org/how-to-write-a-proposal.html">here</a>.</p>

<h3>CPAN Recommendations</h3>

<p>"There Is More Than One Way To Do It" (TIMTOWTDI, pronounced "Tim Toady") is at the core of Perl culture. First of all, TPF would like to encourage the community to keep blogging and lecturing about the good modules they have found in CPAN. This is supported by TPF and the wider Perl community through events and community groups.</p>

<p>After many discussions on how to ensure the "right" CPAN modules show up in search engine results, we realised both the decision of the content and the page ranking is in the hands of the whole community. To make this easier for everyone to get involved, we've put together instructions on helping Google's search engine give people the most useful links. <a href="https://andrewsolomon.github.io/influence-google-search-results.html">Please throw your weight behind this with your own set of links!</a></p>

<h3>Civility</h3>

<p>It has been known for some time that there are some issues in this area. TPF's Community Affairs Team (CAT) was established to create a safe environment for participants in TPF spaces (online or in person) where everyone can participate. It also aims to protect and uphold the reputation of The Perl Foundation as well as the Perl and Raku community. The CAT is putting together a carefully articulated Code of Conduct, a team to administer it and a charter of their roles and responsibilities.</p>

<h2>I want to help - where do I start?</h2>

<p>We need you - the experts - to start chipping away at the epics above, doing the bits for which you have something to contribute. </p>

<p>Throughout the community, there has been a great deal of interest in addressing the needs highlighted by this survey. However, for the majority of community members who haven't been undertaking these activities in the past, it's been unclear how to get the support needed to achieve these goals.</p>

<p>In response to this observation, Jason Crome - organizer of the TPF's Grants Committee - has put together a clear explanation of how to go about <a href="https://www.perlfoundation.org/grants.html">proposing a project and applying for funding</a>.</p>

    ]]>
  </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-3283954356437794617.post-941270258783630818</id>
    <published>2021-05-09T21:29:00.006-07:00</published>
    <updated>2021-05-09T21:29:59.578-07:00</updated>
    <title type="text">Weekend Outage</title>
    <content type="html">&lt;p&gt;You may have noticed that some perl.org services were unavailable this weekend.&amp;nbsp; Email continued to flow, and no data was lost.&lt;/p&gt;&lt;p&gt;The short version of the story is that we were bitten by&amp;nbsp;&lt;a href="https://github.com/containerd/containerd/issues/5280#issuecomment-813707613" target="_blank"&gt;this bug.&lt;/a&gt;&amp;nbsp;and&amp;nbsp;learned a &lt;b&gt;lot&lt;/b&gt; about how Kubernetes works while we figured out what the issue was.&lt;/p&gt;&lt;p&gt;Sorry for any inconvenience!&lt;/p&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://log.perl.org/feeds/941270258783630818/comments/default" title="Post Comments"/>
    <link rel="replies" type="text/html" href="https://log.perl.org/2021/05/weekend-outage.html#comment-form" title="0 Comments"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/941270258783630818"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/3283954356437794617/posts/default/941270258783630818"/>
    <link rel="alternate" type="text/html" href="https://log.perl.org/2021/05/weekend-outage.html" title="Weekend Outage"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Efficient Matrix Search: The Weekly Challenge 111</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/09#pwc111" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given 5x5 matrix filled with integers such that each row is sorted from left to right and the first integer of each row is greater than the last integer of the previous row. Write a script to find a given integer in the matrix using an efficient search algorithm.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

use boolean;      
use constant MATRIX_SIZE =&gt; 5;   

sub matrix_search{
    my($matrix, $search) = @_;
    unless(@{$matrix} == 1){  
        my $half = int(@{$matrix} / 2);      
        if($matrix-&gt;[$half]-&gt;[0] &gt; $search){
            my @matrix_reduced = @{$matrix}[0 .. $half - 1];
            matrix_search(\@matrix_reduced, $search);    
        }  
        elsif($matrix-&gt;[$half]-&gt;[0] &lt; $search){
            my @matrix_reduced = @{$matrix}[$half .. @{$matrix} - 1];
            matrix_search(\@matrix_reduced, $search);    
        }  
        elsif($matrix-&gt;[$half]-&gt;[0] == $search){
            return true;  
        } 
    }
    else{
        return row_search($matrix-&gt;[0], $search);  
    }    
}

sub row_search{
    my ($row, $search) = @_; 
    unless(@{$row} == 1){
        my $half = int(@{$row} / 2);  
        if($row-&gt;[$half] &gt; $search){
            my @row_reduced = @{$row}[0 .. $half - 1];
            row_search(\@row_reduced, $search);    
        }  
        elsif($row-&gt;[$half] &lt; $search){
            my @row_reduced = @{$row}[$half .. @{$row} - 1];
            row_search(\@row_reduced, $search);    
        }  
        elsif($row-&gt;[$half] == $search){
            return true;
        }  
    } 
    else{
        return false;
    }   
} 

MAIN:{
    my $N = [[  1,  2,  3,  5,  7 ],  
             [  9, 11, 15, 19, 20 ],   
             [ 23, 24, 25, 29, 31 ],    
             [ 32, 33, 39, 40, 42 ],   
             [ 45, 47, 48, 49, 50 ]];
    my $search = 35;
    print matrix_search($N, $search) . "\n";
    $search = 39;
    print matrix_search($N, $search) . "\n";
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0
1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;The most efficient way to search through this sorted matrix is with a binary search. Here the binary search is implemented recursively and split into two subroutines. The first search for the right row, the second performs a binary search within the row.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to find the longest English words that don’t change when their letters are sorted.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub max_sorted{
    my($words) = @_;
    my $max = -1;
    my @length_words; 
    for my $word (@{$words}){
        my $sorted_word = join("", sort { $a cmp $b } split(//, $word));   
        if($word eq $sorted_word &amp;&amp; length($word) &gt;= $max){
            $length_words[length($word)] = [] if(!$length_words[length($word)]); 
            push @{$length_words[length($word)]}, $word;  
            $max = length($word);   
        }   
    }
    return $length_words[$max];  
}

MAIN:{
    my @words;
    while(&lt;&gt;){
        chomp;
        push @words, lc($_);  
    }  
    print join("\n", @{max_sorted(\@words)}) . "\n";    
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl &lt; /usr/share/dict/words
adelops
alloquy
beefily
begorry
billowy
egilops
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code expects input on STDIN. Here the system dictionary is used. For this file the maximum length of words meeting the criteria is seven. There are six such words, as shown in the output.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111/"&gt;Challenge 111&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;Binary Search&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc111</id>
    <published>2021-05-09T23:58:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
    <title>Perl Weekly Challenge 111: Search Matrix and Ordered Letters</title>
    <link rel="alternate" href="http://blogs.perl.org/users/laurent_r/2021/05/perl-weekly-challenge-111-search-matrix-and-ordered-letters.html"/>
    <id>tag:blogs.perl.org,2021:/users/laurent_r//3226.10205</id>
    <published>2021-05-05T22:48:19Z</published>
    <updated>2021-05-10T02:51:16Z</updated>
    <author>
        <name>laurent_r</name>
        <uri>https://laurent-rosenfeld.developpez.com/</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/laurent_r/">
        <![CDATA[<p>These are some answers to the Week 111 of the <a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-111/">Perl Weekly Challenge</a> organized by <a href="http://blogs.perl.org/users/mohammad_s_anwar/">Mohammad S. Anwar</a>.</p>

<p><em>Spoiler Alert:</em> This weekly challenge deadline is due in a few  days (May 9, 2021). This blog post offers some solutions to this challenge, please don’t read on if you intend to complete the challenge on your own.</p>

<h2>Task 1: Search Matrix</h2>

<p><em>You are given 5x5 matrix filled with integers such that each row is sorted from left to right and the first integer of each row is greater than the last integer of the previous row.</em></p>

<p><em>Write a script to find a given integer in the matrix using an efficient search algorithm.</em></p>

<p><em>Example:</em></p>

<pre><code>Matrix: [  1,  2,  3,  5,  7 ]
        [  9, 11, 15, 19, 20 ]
        [ 23, 24, 25, 29, 31 ]
        [ 32, 33, 39, 40, 42 ]
        [ 45, 47, 48, 49, 50 ]

Input: 35
Output: 0 since it is missing in the matrix

Input: 39
Output: 1 as it exists in the matrix
</code></pre>

<p>We&#8217;re only trying to know whether an integer exists in the matrix. What I would normally do in such case is transform the data structure, i.e. store all the matrix items into a hash and then simply look whether an item exists in the hash. And I&#8217;ll also present such a solution.</p>

<p>However, looking carefully at the working of the task, we can see that the task insists on the fact that the integers are in ascending order from left to right and from top to bottom. The task further tells us that we should use an efficient algorithm. Although this is not explicitly specified, it is quite clear that we&#8217;re expected to implement a binary search algorithm, which is an efficient algorithm with sorted data.</p>

<p>The first idea might be to flatten the matrix into a one-dimension array, making the dataset much easier to use with a canonical binary search algorithm. But, obviously, that&#8217;s also not really what we&#8217;re expected to do. The task author wants us to implement a binary search algorithm on a 2-D matrix. We could come up with an &#8220;approximate&#8221; binary search, i.e. an heuristic looking for the approximate mid-point between two values. For example, we could start by testing any item on the third row and then goto the 2nd or 4th row depending on the result of the test. But that&#8217;s not satisfactory: that would not scale easily to other dimensions.</p>

<p>So I decided to perform the binary search on a list of consecutive integers between 0 and 24, and to provide a subroutine to convert these integers into 2-D indices. For example, the sixth item in that range corresponds to indices <code>[1][0]</code>.</p>

<h3>Search Matrix in Raku</h3>

<h4>Using Binary Search</h4>

<p>The <code>A2AoA</code> subroutine converts a flat rank into 2-D indices. We simply run a binary search on the <code>0..24</code> range and use the <code>A2AoA</code> subroutine to find out the correspond values in the matrix. Our test cases will be quite exhaustive, since we&#8217;ll be searching the matrix for every integer between 0 and 54.</p>

<pre><code>use v6;

my @matrix = (  1,  2,  3,  5,  7 ),
             (  9, 11, 15, 19, 20 ),
             ( 23, 24, 25, 29, 31 ),
             ( 32, 33, 39, 40, 42 ),
             ( 45, 47, 48, 49, 50 );

sub A2AoA ($index) {
    my ($i, $j) = $index.polymod(5).reverse;
}
sub binary ($in) {
    my ($min, $max) = 0, 24;
    while $max &gt; $min {
        my $pivot = (($max + $min) /2).Int;
        my ($i, $j) = A2AoA $pivot;
        my $val = @matrix[$i][$j];
        # say "val = $val, $i, $j";
        return 1 if $val == $in;
        if $in &gt; $val {
            $min = $pivot + 1;
        } else {
            $max = $pivot;
        }
    }
    return 0;
}
say "$_ =&gt; ", binary $_ for 0..54;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>$ raku ./search_item.raku
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
8 =&gt; 0
9 =&gt; 1
10 =&gt; 0
11 =&gt; 1
12 =&gt; 0
13 =&gt; 0
14 =&gt; 0
15 =&gt; 1
16 =&gt; 0
17 =&gt; 0
18 =&gt; 0
19 =&gt; 1
20 =&gt; 1
21 =&gt; 0
22 =&gt; 0
23 =&gt; 1
24 =&gt; 1
25 =&gt; 1
26 =&gt; 0
27 =&gt; 0
28 =&gt; 0
29 =&gt; 1
30 =&gt; 0
31 =&gt; 1
32 =&gt; 1
33 =&gt; 1
34 =&gt; 0
35 =&gt; 0
36 =&gt; 0
37 =&gt; 0
38 =&gt; 0
39 =&gt; 1
40 =&gt; 1
41 =&gt; 0
42 =&gt; 1
43 =&gt; 0
44 =&gt; 0
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 0
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<p>Note that I&#8217;m happy that I used such exhaustive test cases, since my original implementation had a relatively rare bug that I had not seen with the six or seven values I initially tested.</p>

<h4>Using a Hash</h4>

<p>As I said in the introduction, in the real life, I would transform the input data into a hash and simply perform hash lookup.</p>

<pre><code>use v6;

my @matrix = (  1,  2,  3,  5,  7 ),
             (  9, 11, 15, 19, 20 ),
             ( 23, 24, 25, 29, 31 ),
             ( 32, 33, 39, 40, 42 ),
             ( 45, 47, 48, 49, 50 );

my %hash;
for @matrix -&gt; @row {
    %hash{$_} = 1 for @row;
}
say "$_ =&gt; ", %hash{$_} ?? 1 !! 0 for 0..54;
</code></pre>

<p>As it can be seen, the code is much shorter, much simpler and much less prone to errors. It produces the same output:</p>

<pre><code>$ raku ./search_item2.raku
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
8 =&gt; 0
9 =&gt; 1
... Lines omitted for brevity...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 1
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h3>Search Matrix in Perl</h3>

<h4>Using Binary Search</h4>

<p>This is a port to Perl of the binary search algorithm explained in the introduction above. The <code>A2AoA</code> subroutine converts a flat rank into 2-D indices. We simply run a binary search on the <code>0..24</code> range and use the <code>A2AoA</code> subroutine to find out the correspond values in the matrix. Our test cases will be quite exhaustive, since we&#8217;ll be searching the matrix for every integer between 0 and 54.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @matrix = ( [  1,  2,  3,  5,  7 ],
               [  9, 11, 15, 19, 20 ],
               [ 23, 24, 25, 29, 31 ],
               [ 32, 33, 39, 40, 42 ],
               [ 45, 47, 48, 49, 50 ]
             );

sub A2AoA {
    my $index = shift;
    my ($i, $j) = (int $index / 5, $index % 5);
}
sub bin_search {
    my $in = shift;
    my ($min, $max) = (0, 24);
    while ($max &gt; $min) {
        my $pivot =  int (($max + $min) /2);
        my ($i, $j) = A2AoA $pivot;
        my $val = $matrix[$i][$j];
        # say "val = $val, $i, $j";
        return 1 if $val == $in;
        if ($in &gt; $val) {
            $min = $pivot + 1;
        } else {
            $max = $pivot;
        }
    }
    return 0;
}
say "$_ =&gt; ", bin_search $_ for 0..54;
</code></pre>

<p>This program displays the following output:</p>

<pre><code>perl  ./search_item.pl
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
5 =&gt; 1
6 =&gt; 0
7 =&gt; 1
... lines omitted for brevity ...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 0
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h4>Using a Hash</h4>

<p>As mentioned above, in the real life, I would transform the input data into a hash and simply perform hash lookup. In Raku, I had to use nested <code>for</code> loops to populate the hash because my attempts using chained <code>map</code>s did not work as expected. There is certainly a way to do it with chained <code>map</code>s, but it is not easy to find the right syntax. No such problem with Perl where my chained <code>map</code>s worked perfectly on my first attempt (see below). There has to be something for which Perl is better or (more convenient) than Raku.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @matrix = ( [  1,  2,  3,  5,  7 ],
               [  9, 11, 15, 19, 20 ],
               [ 23, 24, 25, 29, 31 ],
               [ 32, 33, 39, 40, 42 ],
               [ 45, 47, 48, 49, 50 ]
             );

my %hash = map { $_ =&gt; 1 } map { @$_ } @matrix;
say "$_ =&gt; ", exists $hash{$_} ? 1 : 0 for 0..54;
</code></pre>

<p>This displays the same output as before:</p>

<pre><code>$ perl search_item2.pl
0 =&gt; 0
1 =&gt; 1
2 =&gt; 1
3 =&gt; 1
4 =&gt; 0
... Lines omitted for brevity ...
45 =&gt; 1
46 =&gt; 0
47 =&gt; 1
48 =&gt; 1
49 =&gt; 1
50 =&gt; 1
51 =&gt; 0
52 =&gt; 0
53 =&gt; 0
54 =&gt; 0
</code></pre>

<h3>Search Matrix in Other Languages</h3>

<p>In Scala and Python, I&#8217;ll implement only the hash lookup strategy.</p>

<h4>Search Matrix in Scala</h4>

<p>In Scala, hashes are called &#8220;maps&#8221; but they behave essentuially the same way.</p>

<pre><code>object SearchItem extends App {
  val matrix = Array(
    Array(1, 2, 3, 5, 7),
    Array(9, 11, 15, 19, 20),
    Array(23, 24, 25, 29, 31),
    Array(32, 33, 39, 40, 42),
    Array(45, 47, 48, 49, 50)
  )

  var hash = scala.collection.mutable.Map[Int, Int]()
  for (row &lt;- matrix) {
    for (item &lt;- row) {
      hash(item) = 1
    }
  }

  for (i &lt;- 0 to 54) {
    if (hash.contains(i)) {
      println(s"$i =&gt; 1")
    } else {
      println(s"$i =&gt; 0")
    }
  }
}
</code></pre>

<p>Output:</p>

<p>0 => 0
1 => 1
2 => 1
3 => 1
4 => 0
&#8230; Lines omitted for brevity &#8230;
46 => 0
47 => 1
48 => 1
49 => 1
50 => 1
51 => 0
52 => 0
53 => 0
54 => 0</p>

<h4>Search Matrix in Python</h4>

<p>In Python, hashes are called dictionaries, and can be used the same way.</p>

<pre><code>matrix = ( [  1,  2,  3,  5,  7 ],
           [  9, 11, 15, 19, 20 ],
           [ 23, 24, 25, 29, 31 ],
           [ 32, 33, 39, 40, 42 ],
           [ 45, 47, 48, 49, 50 ]
         );

hash = {}
for row in matrix:
    for item in row:
        hash[item] = 1

for i in range(55):
    if i in hash:
        print(i, " =&gt; 1")
    else:
        print(i, " =&gt; 0")
</code></pre>

<p>Output:</p>

<pre><code>$ python3 ./search_item.py
0  =&gt; 0
1  =&gt; 1
2  =&gt; 1
3  =&gt; 1
4  =&gt; 0
5  =&gt; 1
... Lines omitted for brevity ...
45  =&gt; 1
46  =&gt; 0
47  =&gt; 1
48  =&gt; 1
49  =&gt; 1
50  =&gt; 1
51  =&gt; 0
52  =&gt; 0
53  =&gt; 0
54  =&gt; 0
</code></pre>

<h2>Task 2: Ordered Letters</h2>

<p><em>Given a word, you can sort its letters alphabetically (case insensitive). For example, “beekeeper” becomes “beeeeekpr” and “dictionary” becomes “acdiinorty”.</em></p>

<p><em>Write a script to find the longest English words that don’t change when their letters are sorted.</em></p>

<p>For this, I&#8217;ll use an English word list contributed to the public domain by Grady Ward as part of the <a href="https://en.wikipedia.org/wiki/Moby_Project">Moby Lexicon</a> project. It is a list of 113,809 crosswords, that is words that are considered valid in crossword puzzles and other word games. The list can be found on my <a href="https://github.com/LaurentRosenfeld/think_raku/blob/master/Supplementary/words.txt">github repository</a>.</p>

<h3>Ordered Letters in Raku</h3>

<p>We don&#8217;t really need to sort the letters: we only need to know whether they are already in the alphabetical order. In Raku, we can use the <code>[...]</code> reduce metaoperator together with the <code>le</code> less than or equal to operator on the letters of the word. Checking whether a list is sorted has a smaller computational complexity than sorting the list, so this should presumably be faster (although it is so fast with my 113-k word list that it doesn&#8217;t really matter).</p>

<pre><code>use v6;

my @long-words;
my $max-length = 0;

for './words.txt'.IO.lines -&gt; $word {
    next unless [le] $word.comb;
    my $length = $word.chars;
    if  $length &gt; $max-length {
        @long-words = $word,;
        $max-length = $length;
    } elsif $length == $max-length {
        push @long-words, $word;
    }
}
say @long-words.join(", ");
</code></pre>

<p>This program finds two 7-letter words satisfying the task&#8217;s criteria and displays the following output:</p>

<pre><code>$ raku ./ordered-letters.raku
beefily, billowy
</code></pre>

<p>I do not know what these two words mean, but they are in the input list and they satisfy the criteria.</p>

<h3>Ordered Letters in Perl</h3>

<p>It is slightly less convenient in Perl than in Raku to check that the letters are already in the proper order, so I&#8217;ll simply sort the letters and compare the output with the input word.</p>

<pre><code>use strict;
use warnings;
use feature "say";

my @long_words;
my $max_length = 0;

my $word_list = "./words.txt";
open my $IN, "&lt;", $word_list or die "Cannot open $word_list $!";
while (my $word = &lt;$IN&gt;) {
    chomp $word;
    next unless $word eq join '', sort split //, $word;
    my $length = length $word;
    if  ($length &gt; $max_length) {
        @long_words = ($word);
        $max_length = $length;
    } elsif ($length == $max_length) {
        push @long_words, $word;
    }
}
say "@long_words";
</code></pre>

<p>This program produces the same two words:</p>

<pre><code>$ perl ordered-letters.pl
beefily billowy
</code></pre>

<h2>Wrapping up</h2>

<p>The next week Perl Weekly Challenge will start soon. If you want to participate in this challenge, please check <a href="https://perlweeklychallenge.org/">https://perlweeklychallenge.org/</a> and make sure you answer the challenge before 23:59 BST (British summer time) on Sunday, May 16, 2021. And, please, also spread the word about the Perl Weekly Challenge if you can.</p>
]]>
        

    </content>
</entry>
  <entry>
    <title>Open Letter to the Perl Foundation Board</title>
    <link rel="alternate" href="http://blogs.perl.org/users/neilb/2021/05/open-letter-to-the-perl-foundation-board.html"/>
    <id>tag:blogs.perl.org,2021:/users/neilb//846.10213</id>
    <published>2021-05-09T02:42:00Z</published>
    <updated>2021-05-10T01:31:32Z</updated>
    <author>
        <name>Neil Bowers</name>
        <uri>http://neilb.org/reviews</uri>
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/neilb/">
        <![CDATA[<p>Dear TPF Board members,</p>

<p>We want to express our disappointment with the recent transparency reports and associated actions from the Community Affairs Team (CAT).</p>

<p>On Monday 19th March, a <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">first Transparency Report</a> was issued, which said that an individual had been investigated for (1) behaviour on IRC and Twitter, and (2) behaviour at a Perl event in 2019. The report also reported that they had "found many instances of communication which alone may not have constituted unacceptable behavior, but when taken together did constitute unacceptable behavior", but no further details were given on those. The report issued a ban from all TPF events "in perpetuity", and furthermore issued a ban on the individual’s participation on irc.perl.org and any perl.org mailing lists. A second individual was issued a warning.</p>

<p>Prior to the 19th, one of the Perl Steering Council (PSC) members explicitly asked you not to issue a ban, saying that the PSC were already starting work on <a href="https://www.nntp.perl.org/group/perl.perl5.porters/2021/04/msg259909.html">improving discourse in and around p5p</a>. That person felt that a ban would be counterproductive when the PSC were trying to improve things in a more inclusive way. The second event was the Perl Toolchain Summit (PTS). The incident was investigated at the time, resulting in two of the organisers (Philippe Bruhat and Neil Bowers) asking the individual to leave. He left peacefully, expressing regret that he had upset and offended the other party. The PTS is <em>not</em> a TPF event.</p>

<p>Nearly two weeks after the initial report, TPF issued a <a href="https://news.perlfoundation.org/post/cat-transparency-report-updates0">Transparency Report Update</a>, which retracted parts of the first report, but left other parts hazy. For example, the first report mentions other "unacceptable behaviour", but gives no further details in either report. The warning for the second individual was retracted.</p>

<p>The use of "transparency" seems incongruous:</p>

<ul>
<li>No charter for the CAT had been published, nor a common set of guidelines as the basis of triggering investigations or taking corrective actions.</li>
<li>No definition for “unacceptable behavior” was provided.</li>
<li>The CAT did not talk to the relevant communities or their leaders before publishing the initial report.</li>
<li>The CAT had not spoken to either person investigated prior to publishing the first report.</li>
</ul>

<p>These behaviours don't demonstrate the values and behaviours that we could reasonably expect of a body investigating community affairs. As the most visible and official Perl organization, TPF should hold itself to a higher standard.</p>

<p>This felt like a clumsy attempt by TPF to establish control over all Perl communities, and only when you got push-back did you attempt to wind some of that back. You do not have jurisdiction over IRC, email lists, or most other parts of our communities. It is not TPF/CAT’s role  to request that people stop participating. We have not given you consent to unilaterally define policy across our communities, nor impose punishments on behalf of them.</p>

<p>We are all firm supporters of codes of conduct, where the goal is to set expectations for behaviour. Many of our individual communities have long defined and enforced their own guidelines and standards of conduct. That said, we believe that our communities could benefit from harmonising standards. This was an opportunity for TPF/CAT to demonstrate leadership, and start bringing our communities together towards a unified policy. Instead the TPF acted seemingly without consideration for the varied needs and devolved leadership of the communities it purports to represent.</p>

<p>This is not to say that we condone the individual's behaviour. Some signatories to this letter were part of the governing bodies that issued the initial corrective actions on the two incidents the CAT cited. We also do not want to diminish the upset and offence that the individual has caused to a number of people over the years.</p>

<p>We would like to see TPF acknowledge its failings in how this has been handled, and make changes to ensure these aren't repeated, but we're not looking for a blood-letting and further division. We would like to see this debacle as a catalyst for our communities coming together to move things forward. We need to clarify the organisation and governance structures of our communities, and start the process of defining common values and expectations around behaviour. This needs to be a community-led activity: given recent events, we don't feel that TPF/CAT is currently fit for a leadership role in this, but we would absolutely want your participation.</p>

<p>In volunteer communities such as ours, leadership is about doing the hard work of building consensus, not imposing your will on the rest of us. Leadership should be a service we provide to our communities.</p>

<p>Signed</p>

<p>Andreas König, Chief PAUSE Admin, White Camel award recipient<br>
Andrew Shitov, conference organiser, White Camel award recipient<br>
Ask Bjoern-Hansen, Perl NOC, runs perl.org, White Camel award recipient<br>
Chris Prather, Admin for irc.perl.org, White Camel award recipient<br>
Dave Cross, Perl trainer, regular speaker, author, Facebook group admin, White Camel award recipient<br>
Kenichi Ishigaki, CPANTS Admin, PAUSE Admin<br>
Neil Bowers, PAUSE Admin, event organiser, PSC member, White Camel award recipient<br>
Olaf Alders, MetaCPAN founder and project lead<br>
Philippe Bruhat, longtime event organiser, White Camel award recipient<br>
Robert Spier, Perl NOC, runs perl.org/pm.org , White Camel award recipient<br>
Thomas Klausner, event organiser, CPANTS Founder, White Camel award recipient<br>
Tim Bunce, founder of the Module List, PAUSE Admin Emeritus, author of DBI, White Camel award recipient</p>
]]>
        

    </content>
</entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-6079442595421905014</id>
    <published>2021-05-08T19:45:00.000+02:00</published>
    <updated>2021-05-08T19:45:46.871+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cccxl) 17 great CPAN modules released last week</title>
    <content type="html">Updates for &lt;i&gt;great CPAN modules&lt;/i&gt; released last week. A module is considered &lt;i&gt;great&lt;/i&gt; if its favorites count is greater or equal than 12.&lt;br/&gt;&lt;br/&gt;&lt;ol&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEEJO/CGI-4.52' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;CGI&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Handle Common Gateway Interface requests and responses &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;4.52&lt;/strong&gt; on 2021-05-04&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 4.51 was 6 months, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/MIK/Crypt-JWT-0.033' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Crypt::JWT&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - JSON Web Token &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.033&lt;/strong&gt; on 2021-05-01&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 0.032 was 1 month, 14 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/XMATH/Data-Alias-1.24' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Data::Alias&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Comprehensive set of aliasing operations &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.24&lt;/strong&gt; on 2021-05-05&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: 1.23 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/DateTime-Format-Strptime-1.79' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;DateTime::Format::Strptime&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Parse and format strp and strf time patterns &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.79&lt;/strong&gt; on 2021-05-02&lt;/li&gt;  &lt;li&gt;Votes: 22&lt;/li&gt;  &lt;li&gt;Previous version: 1.78 was 4 months, 18 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/JKEENAN/Devel-NYTProf-6.09' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Devel::NYTProf&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Powerful fast feature-rich Perl source code profiler &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.09&lt;/strong&gt; on 2021-05-02&lt;/li&gt;  &lt;li&gt;Votes: 168&lt;/li&gt;  &lt;li&gt;Previous version: 6.08 was 8 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DROLSKY/Exception-Class-1.45' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Exception::Class&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A module that allows you to declare real exception classes in Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.45&lt;/strong&gt; on 2021-05-02&lt;/li&gt;  &lt;li&gt;Votes: 23&lt;/li&gt;  &lt;li&gt;Previous version: 1.44 was 3 years, 4 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/LEONT/experimental-0.024' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;experimental&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Experimental features made easy &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.024&lt;/strong&gt; on 2021-05-01&lt;/li&gt;  &lt;li&gt;Votes: 29&lt;/li&gt;  &lt;li&gt;Previous version: 0.023 was 1 day before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/PLICEASE/File-Which-1.27' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;File::Which&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl implementation of the which utility as an API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.27&lt;/strong&gt; on 2021-05-07&lt;/li&gt;  &lt;li&gt;Votes: 24&lt;/li&gt;  &lt;li&gt;Previous version: 1.24 was 1 month, 19 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/OALDERS/libwww-perl-6.54' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;LWP&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - The World-Wide Web library for Perl &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;6.54&lt;/strong&gt; on 2021-05-06&lt;/li&gt;  &lt;li&gt;Votes: 153&lt;/li&gt;  &lt;li&gt;Previous version: 6.53 was 1 month, 30 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/NLNETLABS/Net-DNS-1.31' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Net::DNS&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Interface to the Domain Name System &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.31&lt;/strong&gt; on 2021-05-02&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.30 was 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/BYTEROCK/Paws-0.43' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Paws::SDK::Config&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A Perl SDK for AWS (Amazon Web Services) APIs &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.43&lt;/strong&gt; on 2021-05-06&lt;/li&gt;  &lt;li&gt;Votes: 48&lt;/li&gt;  &lt;li&gt;Previous version: 0.42 was 1 year, 2 months, 4 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/ETJ/PDL-2.046' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;PDL&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl Data Language &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;2.046&lt;/strong&gt; on 2021-05-04&lt;/li&gt;  &lt;li&gt;Votes: 41&lt;/li&gt;  &lt;li&gt;Previous version: 2.044 was 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/RTKH/Raisin-0.93' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Raisin&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - A REST API microframework for Perl. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.93&lt;/strong&gt; on 2021-05-05&lt;/li&gt;  &lt;li&gt;Votes: 40&lt;/li&gt;  &lt;li&gt;Previous version: 0.91 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/KIMOTO/SPVM-0.0951' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;SPVM&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Static Perl Virtual Machine. Fast Calculation, Fast Array Operation, and Easy C/C++ Binding. &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;0.0951&lt;/strong&gt; on 2021-05-07&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 0.0949 was 7 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/DANBERR/Sys-Virt-v7.3.0' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Sys::Virt&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - libvirt Perl API &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;v7.3.0&lt;/strong&gt; on 2021-05-04&lt;/li&gt;  &lt;li&gt;Votes: 15&lt;/li&gt;  &lt;li&gt;Previous version: v7.2.0 was 1 month, 3 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/HAYASHI/Term-ReadLine-Gnu-1.42' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Term::ReadLine::Gnu&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - Perl extension for the GNU Readline/History Library &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.42&lt;/strong&gt; on 2021-05-07&lt;/li&gt;  &lt;li&gt;Votes: 21&lt;/li&gt;  &lt;li&gt;Previous version: 1.41 was 6 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='https://metacpan.org/release/TOBYINK/Type-Tiny-1.012002' target='_blank'&gt;&lt;b&gt;&lt;span style='font-family: Courier New, Courier, monospace;'&gt;Type::Tiny&lt;/span&gt;&lt;/b&gt;&lt;/a&gt; - tiny, yet Moo(se)-compatible type constraint &lt;ul&gt;  &lt;li&gt;Version: &lt;strong&gt;1.012002&lt;/strong&gt; on 2021-05-02&lt;/li&gt;  &lt;li&gt;Votes: 126&lt;/li&gt;  &lt;li&gt;Previous version: 1.012001 was 3 months, 23 days before&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/6079442595421905014/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxl-17-great-cpan-modules-released.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6079442595421905014"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/6079442595421905014"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cccxl-17-great-cpan-modules-released.html" title="(cccxl) 17 great CPAN modules released last week"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0">
    <id>tag:blogger.com,1999:blog-5910101498857524639.post-4805234308090582106</id>
    <published>2021-05-08T19:42:00.001+02:00</published>
    <updated>2021-05-08T19:42:21.601+02:00</updated>
    <category scheme="http://www.blogger.com/atom/ns#" term="cpan"/>
    <category scheme="http://www.blogger.com/atom/ns#" term="perl"/>
    <title type="text">(cdlxvi) metacpan weekly report - Faster::Maths</title>
    <content type="html">&lt;p&gt;This is the weekly favourites list of CPAN distributions. Votes count: 47&lt;/p&gt;&lt;p&gt;Week's winner: &lt;b&gt;&lt;a href="https://metacpan.org/module/Faster::Maths" target="_blank"&gt;Faster::Maths (+4)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Build date: 2021/05/08 17:39:31 GMT&lt;/p&gt;&lt;br /&gt;&lt;p&gt;Clicked for &lt;u&gt;first time&lt;/u&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::UserAgent" target="_blank"&gt;AnyEvent::UserAgent&lt;/a&gt; - AnyEvent::HTTP OO-wrapper&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::genpw::ind" target="_blank"&gt;App::genpw::ind&lt;/a&gt; - Generate password from combination of Indonesian words&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Crypt::OpenSSL::Guess" target="_blank"&gt;Crypt::OpenSSL::Guess&lt;/a&gt; - Guess OpenSSL include path&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Faster::Maths" target="_blank"&gt;Faster::Maths&lt;/a&gt;&amp;nbsp;(+4=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nasm::X86" target="_blank"&gt;Nasm::X86&lt;/a&gt; - Generate Nasm X86 code from Perl.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;p&gt;&lt;u&gt;Increasing&lt;/u&gt; its reputation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::HTTP" target="_blank"&gt;AnyEvent::HTTP&lt;/a&gt; (+1=30)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/AnyEvent::RabbitMQ" target="_blank"&gt;AnyEvent::RabbitMQ&lt;/a&gt; (+1=10)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/App::githook::perltidy" target="_blank"&gt;App::githook::perltidy&lt;/a&gt; (+1=7)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/C::TinyCompiler" target="_blank"&gt;C::TinyCompiler&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/CPAN::Changes" target="_blank"&gt;CPAN::Changes&lt;/a&gt; (+1=29)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Data::Printer" target="_blank"&gt;Data::Printer&lt;/a&gt; (+1=137)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/DateTime::Format::HTTP" target="_blank"&gt;DateTime::Format::HTTP&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Dotenv" target="_blank"&gt;Dotenv&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/ExtUtils::CBuilder" target="_blank"&gt;ExtUtils::CBuilder&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/IO::Async" target="_blank"&gt;IO::Async&lt;/a&gt; (+1=60)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/MCE" target="_blank"&gt;MCE&lt;/a&gt; (+3=84)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojo::SQLite" target="_blank"&gt;Mojo::SQLite&lt;/a&gt; (+1=24)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious" target="_blank"&gt;Mojolicious&lt;/a&gt; (+1=451)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mojolicious::Plugin::SwaggerUI" target="_blank"&gt;Mojolicious::Plugin::SwaggerUI&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Mozilla::PublicSuffix" target="_blank"&gt;Mozilla::PublicSuffix&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Myriad" target="_blank"&gt;Myriad&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Amazon::S3" target="_blank"&gt;Net::Amazon::S3&lt;/a&gt; (+1=9)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Fastly" target="_blank"&gt;Net::Fastly&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Net::Google::Drive::Simple" target="_blank"&gt;Net::Google::Drive::Simple&lt;/a&gt; (+1=6)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Nice::Try" target="_blank"&gt;Nice::Try&lt;/a&gt; (+1=5)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Paws" target="_blank"&gt;Paws&lt;/a&gt; (+1=48)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/pod/distribution/perl/pod/perl.pod" target="_blank"&gt;perl&lt;/a&gt; (+1=374)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Playwright" target="_blank"&gt;Playwright&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Ref::Util" target="_blank"&gt;Ref::Util&lt;/a&gt; (+1=28)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Set::Light" target="_blank"&gt;Set::Light&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Syntax::Keyword::Defer" target="_blank"&gt;Syntax::Keyword::Defer&lt;/a&gt; (+1=4)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/TAP3::Tap3edit" target="_blank"&gt;TAP3::Tap3edit&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::ReadLine::Gnu" target="_blank"&gt;Term::ReadLine::Gnu&lt;/a&gt; (+1=21)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Term::StatusBar" target="_blank"&gt;Term::StatusBar&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Test::Prereq" target="_blank"&gt;Test::Prereq&lt;/a&gt; (+1=2)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::CSV_XS" target="_blank"&gt;Text::CSV_XS&lt;/a&gt; (+1=92)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Markdown::Hoedown" target="_blank"&gt;Text::Markdown::Hoedown&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Text::Table::Any" target="_blank"&gt;Text::Table::Any&lt;/a&gt; (+1=3)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Throwable" target="_blank"&gt;Throwable&lt;/a&gt; (+1=37)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/Type::Tiny" target="_blank"&gt;Type::Tiny&lt;/a&gt; (+2=126)&lt;/li&gt;&lt;li&gt;&lt;a href="https://metacpan.org/module/WWW::Telegram::BotAPI" target="_blank"&gt;WWW::Telegram::BotAPI&lt;/a&gt; (+1=12)&lt;/li&gt;&lt;/ul&gt;</content>
    <link rel="replies" type="application/atom+xml" href="https://niceperl.blogspot.com/feeds/4805234308090582106/comments/default" title="Enviar comentarios"/>
    <link rel="replies" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxvi-metacpan-weekly-report.html#comment-form" title="0 comentarios"/>
    <link rel="edit" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4805234308090582106"/>
    <link rel="self" type="application/atom+xml" href="https://www.blogger.com/feeds/5910101498857524639/posts/default/4805234308090582106"/>
    <link rel="alternate" type="text/html" href="https://niceperl.blogspot.com/2021/05/cdlxvi-metacpan-weekly-report.html" title="(cdlxvi) metacpan weekly report - Faster::Maths"/>
    <author>
      <name>Unknown</name>
      <email>noreply@blogger.com</email>
      <gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="https://img1.blogblog.com/img/b16-rounded.gif"/>
    </author>
    <thr:total>0</thr:total>
  </entry>
  <entry>
    <title>Paws anyone?</title>
    <link rel="alternate" href="http://blogs.perl.org/users/byterock/2021/05/paws-anyone.html"/>
    <id>tag:blogs.perl.org,2021:/users/byterock//2165.10206</id>
    <published>2021-05-06T22:11:21Z</published>
    <updated>2021-05-07T11:27:14Z</updated>
    <author>
        <name>byterock</name>
        
    </author>
    <content type="html" xml:lang="en" xml:base="http://blogs.perl.org/users/byterock/">
        <![CDATA[<p>Gee almost a year since my lat post.    I better start posting again or Mohammad  will catch up with me ;).</p>

<p>Been quite a year for every one on this big blue marble.  I hope you are all good.</p>

<p>Ok here is the very short post for today.</p>

<p>I just did my first build and upload of <a href="https://metacpan.org/pod/release/BYTEROCK/Paws-0.43/lib/Paws.pm">PAWS</a> to CPAN</p>

<p>Expect Version 0.43 to be up there later today some time.</p>

<p>It was a bit of an epic on my part as this whole releasing thingy, made some real bad goofs (deleting then checking in a folder), thank goodness for 'git revert'  and getting the version number wrong.</p>

<p>Hopefully is comes out ok.</p>

<p>Look for more releases in the future.</p>

<p><a href="http://blogs.perl.org/users/byterock/assets_c/2021/05/judypng-4660.html" onclick="window.open('http://blogs.perl.org/users/byterock/assets_c/2021/05/judypng-4660.html','popup','width=480,height=640,scrollbars=no,resizable=no,toolbar=no,directories=no,location=no,menubar=no,status=no,left=0,top=0'); return false"><img src="http://blogs.perl.org/users/byterock/assets_c/2021/05/judypng-thumb-300x400-4660.png" width="300" height="400" alt="judypng.png" class="mt-image-center" style="text-align: center; display: block; margin: 0 auto 20px;" /></a></p>]]>
        
    </content>
</entry>
  <entry>
  <title>Raku CI Bot Grant Report 2021-04</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/raku-ci-bot-grant-2021-04"/>
  <id>tag:news.perlfoundation.org,2021-05-06:/post/raku-ci-bot-grant-2021-04</id>
  <published>2021-05-06T15:03:39</published>
  <updated>2021-05-06T15:03:39</updated>
  <summary>
  <![CDATA[
     Regarding his Raku CI Bot grant, Patrick writes: In April I didn't find much time to work on the Raku CI Bot grant, because non computer things required my time. I added more API mappings to my clone of In particular I added relevant parts of the Checks, Pulls, OAuth and Issues APIs. I also rebased my changes on the fork of khalid who incidentally also started working on the 
   ]]>
  </summary>
  <author>
    <name>Moritz Lenz</name>
  </author>
  <category term="Grants" scheme="http://www.sixapart.com/ns/types#category"/>
  <category term="Raku Development" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>Regarding his Raku CI Bot grant, Patrick writes:</p>

<hr />

<p>In April I didn't find much time to work on the Raku CI Bot grant, because non 
computer things required my time.</p>

<p>I added more API mappings to my clone of [the GitHub module](https://
github.com/fayland/perl6-WebService-GitHub). In particular I added relevant 
parts of the Checks, Pulls, OAuth and Issues APIs. I also rebased my changes 
on the <a href="https://github.com/khalidelboray/perl6-WebService-GitHub">fork of khalid</a> who incidentally also started working on the GitHub API module. I then 
learned they started working on automatic binding generation based on the API 
description and <a href="https://github.com/khalidelboray/perl6-WebService-GitHub/issues/1#issuecomment-829923786">offered to jump in</a>.</p>

<p>I also cleaned up the architecture scribbles of the core logic of the 
application. I hope to publish a post about it soon.</p>

    ]]>
  </content>
</entry>
  <entry>
    <title>Checking Phone Numbers and Transposing Tabular Data the Hard Way: The Weekly Challenge 110</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/05/02#pwc110" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to display all valid phone numbers in the given text file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use Capture::Tiny q/capture_stdout/;
use PhoneNumberParser;

MAIN:{
    my $parser = new PhoneNumberParser();
    while(my $line = &lt;DATA&gt;){
        $line =~ s/^\s+|\s+$//g;
        my $syntax_error = capture_stdout {
            $parser-&gt;parse($line); 
        };
        print("$line\n") if !$syntax_error;
    }
}   

__DATA__
0044 1148820341
 +44 1148820341
  44-11-4882-0341
(44) 1148820341
 00 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; grammar.&lt;/p&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
%token SPACE DIGIT OPEN CLOSE PLUS
%%

phone_number: prefix SPACE area_exchange_subscriber
;

prefix: DIGIT DIGIT DIGIT DIGIT
    | OPEN DIGIT DIGIT CLOSE
    | PLUS DIGIT DIGIT
;   

area_exchange_subscriber: DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT
;

%%

sub lexer{
    my($parser) = @_;
    $parser-&gt;YYData-&gt;{INPUT} or return('', undef);
    ##
    # send tokens to parser
    ##
    for($parser-&gt;YYData-&gt;{INPUT}){
        s/^(\s)// and return ("SPACE", $1);
        s/^(\d)// and return ("DIGIT", $1);
        s/^(\()// and return ("OPEN", $1);
        s/^(\))// and return ("CLOSE", $1);
        s/^(\+)// and return ("PLUS", $1);
    }  
}

sub error{
    exists $_[0]-&gt;YYData-&gt;{ERRMSG}
    and do{
        print $_[0]-&gt;YYData-&gt;{ERRMSG};
            return;
    };
    print "syntax error\n"; 
}

sub parse{
    my($self, $input) = @_;
    $self-&gt;YYData-&gt;{INPUT} = $input;
    my $result = $self-&gt;YYParse(yylex =&gt; \&amp;lexer, yyerror =&gt; \&amp;error);
    return $result;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ yapp perl/PhoneNumberParser.yp
$ perl -Iperl perl/ch-1.pl
0044 1148820341
+44 1148820341
(44) 1148820341
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;While a set of regular expression would have done the job quite nicely I figured I’d use this problem as a reason to shake the rust off my grammar writing skills. Not that I am a master parser writer or anything, but &lt;a href="https://metacpan.org/pod/Parse::Yapp"&gt;Parse::Yapp&lt;/a&gt; makes it easy enough!&lt;/p&gt;
&lt;p&gt;Well, easy is a bit relative I suppose. This is definitely not the simplest way of performing this task.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You are given a text file. Write a script to transpose the contents of the given file.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
sub transpose{
    my @columns = @_;
    return transpose_r([], \@columns);  
}

sub transpose_r{
    my($transposed, $remaining) = @_;
    return $transposed if(@{$remaining} == 0);   
    $transposed = transpose_row_r($transposed, $remaining-&gt;[0]);  
    shift @{$remaining}; 
    transpose_r($transposed, $remaining);  
}

sub transpose_row_r{
    my($transposed, $row) = @_;
    return $transposed if(@{$row} == 0); 
    my $index = @{$row} - 1;
    push @{$transposed-&gt;[$index]}, pop @{$row};  
    transpose_row_r($transposed, $row);    
}

MAIN:{
    my @columns;
    while(my $line = &lt;DATA&gt;){
        chomp($line);
        my @fields = split(/,/, $line);   
        push @columns, \@fields; 
    }
    my $transposed = transpose(@columns);   
    for my $i (0 .. @{$transposed} - 1){
        print join(",", @{$transposed-&gt;[$i]}) . "\n";       
    }    
}

__DATA__
name,age,sex
Mohammad,45,m
Joe,20,m
Julie,35,f
Cristina,10,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
name,Mohammad,Joe,Julie,Cristina
age,45,20,35,10
sex,m,m,f,f
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;Similar to Part 1 this is also not the easiest way to perform this task. Here the same sort of recursion is used that is used in the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/05/02"&gt;Prolog version&lt;/a&gt; of the solution to this part. That is, we recurse over the table itself and then for each row perform a separate recursion to perform the transpostion.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-110/"&gt;Challenge 110&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc110</id>
    <published>2021-05-02T19:03:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 5</title>
  <summary type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-05-02T22:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-5"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-5</id>
  <content type="html"><![CDATA[<p>
The fifth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Community Affairs Team Transparency Report Update</title>
  <link rel="alternate" type="text/html" href="https://news.perlfoundation.org/post/cat-transparency-report-updates0"/>
  <id>tag:news.perlfoundation.org,2021-05-02:/post/cat-transparency-report-updates0</id>
  <published>2021-05-02T02:45:44</published>
  <updated>2021-05-02T02:45:44</updated>
  <summary>
  <![CDATA[
     The CAT would like to make some corrections, as well as address some of the comments and questions we received to the initial transparency report. The CAT plans to publish a separate statement in the coming days relating to general changes and improvements to the process. The subject of investigations #1 and #2, as referenced in the previous transparency report and below in this document, is the same and therefore 
   ]]>
  </summary>
  <author>
    <name>Nic Evans</name>
  </author>
  <category term="Perl Foundation" scheme="http://www.sixapart.com/ns/types#category"/>  <content type="html" xml:lang="en-us" xml:base="http://news.perlfoundation.org/">
   <![CDATA[
     
     <p>The CAT would like to make some corrections, as well as address some of the comments and questions we received to the <a href="https://news.perlfoundation.org/post/cat-transparency-repor-19-april-2021">initial transparency report</a>. The CAT plans to publish a separate statement in the coming days relating to general changes and improvements to the process.</p>

<p>The subject of investigations #1 and #2, as referenced in the previous transparency report and below in this document, is the same and therefore will be known as the Subject throughout this document. The other individual mentioned in the previous transparency report is not mentioned except under the Corrections section.</p>

<p>There have been questions and concerns raised by members of the community regarding TPF CAT’s process in handling the incidents in question and our authority to sanction someone in response. We believe that this is within our authority for several reasons.</p>

<p>First, while TPF has never published a “year round” Standards of Conduct document, all TPF conferences have had a Standards of Conduct document (or equivalent) since YAPC in 2012 (Madison). The exact content of that document has varied over the years, though it’s been in something close to its current form for quite a number of years. The Subject has attended many of these conferences, and has agreed to these Standards of Conduct in the past as a matter of attending.</p>

<p>Second, the investigations we conducted and the sanctions we imposed in response are based on reports of harmful behavior by the Subject in multiple forums across a number of years. A subset of these were investigated in detail and reported on as investigation #1 and #2. While there are other reports, the results of both investigations combined were enough to take action.</p>

<p>Third, while some of the most recent behavior did not occur at a TPF event or in a TPF-controlled online space, we believe that the purpose of the CAT is primarily to protect people from harm in the spaces we do control. If someone demonstrates through their behavior that they are overwhelmingly likely to cause harm to the community in our events and spaces, we believe it is within our authority to impose sanctions on them because of that behavior in order to prevent future harm.</p>

<p>However, we do have a significant correction we want to make to the previous report in regards to authority. The initial report stated: “The CAT has instructed the Subject to leave and cease participation...” and went on to mention various online spaces that TPF <em>does not</em> control. This was not intended to be an instruction to take technical measures, but a request for the Subject to cease participation, and was done to prevent any further harm from occurring. However, we recognize that this was poorly worded, and we never intended to assert any control over these spaces. We recognize that these spaces are operated independently by various communities and each community must decide for themselves how to manage their community. The initial report further stated the CAT “may: explicitly extend the scope of the ban, take further technical measures”. TPF recognizes that this is out of scope.</p>

<p>In addition, there are a number of other corrections and clarifications we would like to make.</p>

<h2>Corrections</h2>

<ol>
<li>The ban from attending TPF conferences, events, and using TPF online chat platforms (Slack) stands. However:
<ol>
<li>This is modified to a minimum duration of 1 year.</li>
<li>The length of the ban is modified because having a year round Standards of Conduct is new, as is the CAT. Given all this, we felt it was fairer to start with a more limited sanction.</li>
<li>For the ban to be lifted, the Subject must agree to not repeat their past unacceptable behavior and agree to abide by the Standards of Conduct going forward.</li>
<li>Unacceptable behavior within that 1 year period could lead to an extension or modification of the length or the terms of the ban. This includes interactions between the Subject and others in the Perl and Raku communities, even outside of TPF events and online platforms.</li>
<li>For examples of unacceptable behavior, please see the current <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Standards of Conduct for the 2021 Conference in the Cloud</a>.</li>
</ol></li>
<li>The initial transparency report stated that warning would be issued to the second individual investigated as part of “investigation #1”.
<ol>
<li>The CAT apologizes and recognizes that this individual should not have been mentioned in the transparency report.</li>
<li>After reconsideration, it was decided that the warning is not appropriate based on the evidence in “investigation #1” and therefore will not be issued.</li>
<li>The CAT had a conversation with the second individual to discuss this.</li>
</ol></li>
<li>The CAT acknowledges it should have delayed the publication of the transparency report to give the Subject more time to respond.
<ol>
<li>The Subject disagrees with the extent of CAT’s assertion that the events of investigation #1 and #2 are part of a pattern of bad behavior.</li>
<li>The Subject disagrees with the level of harm this pattern of bad behavior causes the community.</li>
<li>The Subject is willing to leave or step down from their responsibilities within various online spaces, communities, and subcommunities if asked by the leaders or committees responsible for those online spaces, communities, or subcommunities.</li>
<li>The Subject does not commit to leaving other online spaces, communities, or subcommunities, except those which they have since been banned from.</li>
<li>The Subject accepts the ban on attending TPF conferences and events.</li>
</ol></li>
</ol>

<h2>Clarifications and responses to specific questions</h2>

<p>The CAT would like to address a few of the questions and comments it received on the last transparency report:</p>

<ol>
<li>The CAT wants to be clear that the behavior from investigation #1 alone would not have resulted in the CAT’s decision.
<ol>
<li>The events of “investigation #1” and “investigation #2” were investigated as a pattern of behavior which extends beyond the events of either investigation.</li>
<li>The CAT found that there was a pattern of bad behavior.</li>
</ol></li>
<li>Regarding the event from “investigation #2”: whether the Subject willingly left or was given an ultimatum did not have any bearing on the CAT’s decision.</li>
<li>The community member who was harmed in investigation #1 is a different person than the community member harmed in investigation #2.</li>
<li>The second investigation was opened due to reports that there was a pattern of bad behavior. Aside from that, the investigations are not related.</li>
<li>Discriminatory statements need not be intended to attack nor directed at a specific person to cause harm.</li>
<li>As part of investigation #2, the CAT talked to multiple people who attended the event.</li>
<li>The CAT has subsequently provided a more detailed transparency report to the board of directors whilst respecting privacy of the subjects.
<ol>
<li>This more detailed version does not share the names of any parties of the investigations, but was deemed too detailed for public release.</li>
</ol></li>
</ol>

<h2>Conclusion</h2>

<p>The Community Affairs Team is committed to a safe environment, at conferences and physical events as well as online between members of the Perl and Raku community. If you have comments regarding this public statement you can send them to <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a> with the word “comment” in the subject.</p>

<p>If you want to report: discriminatory, harassing, or otherwise unacceptable behavior, please contact <a href="mail:cat@perlfoundation.org">cat@perlfoundation.org</a>. For examples of what may constitute unacceptable behavior, please see the Standards of Conduct for this year’s <a href="https://perlconference.us/tprc-2021-cloud/standards-of-conduct/">Conference in the Cloud</a>.</p>

<h2>Addenda</h2>

<p><strong>Update, 2021-05-07</strong>:  We've had a few people say that the paragraph about online spaces that TPF doesn't control was unclear.  We agree!  To clarify, the CAT doesn't provide unsolicited advice on how other spaces should run things, and the statement above should not be read as reserving the right to do so.</p>

    ]]>
  </content>
</entry>
  <entry>
  <title>Course Management Application in Mojolicious</title>
  <summary type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></summary>
  <updated>2021-05-01T21:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious</id>
  <content type="html"><![CDATA[<p>
In my <a href="https://code-maven.com/courses">training course</a> I give exercises to my students. They can (and in some of these course they must) submit them.
I can then review them and give comments. I would like to have a web application to keep track of all the exercises and the submission.
<p>
In this experimental project <a href="https://phoenixtrap.com/">Mark Gardner</a> and myself will develop this application using live pair programming.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>List of new CPAN distributions – Apr 2021</title>
    <link rel="alternate" href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" type="text/html"/>
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml"><table>
<tr>
<th>dist</th>
<th>author</th>
<th>version</th>
<th>abstract</th>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BRAINBUZ/Acme-Brainbuz-markdown-0.001-TRIAL">Acme-Brainbuz-markdown</a></td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>0.001</td>
<td>turns baubles into trinkets</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-BrowsingTableInteractively-0.001">Acme-CPANModules-BrowsingTableInteractively</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors-0.001">Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Creating a palette of visually distinct colors</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CONTRA/Acme-Markdown-Embarrassing-0.01">Acme-Markdown-Embarrassing</a></td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>0.01</td>
<td>Testing the MetaCPAN Markdown converter</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ETJ/Alien-OpenMP-0.001">Alien-OpenMP</a></td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>0.001</td>
<td>Encapsulate system info for OpenMP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTASHIRO/App-Greple-ical-0.01">App-Greple-ical</a></td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>0.01</td>
<td>Module to support Apple OS X Calendar data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/UTGWKK/App-MigrateToTest2V0-0.01">App-MigrateToTest2V0</a></td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>0.01</td>
<td>Migrate your tests from Test::More to Test2::V0</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SIMBABQUE/App-ProxyThat-0.001">App-ProxyThat</a></td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>0.001</td>
<td>Proxy an URL from the command line</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-SQLiteUtils-0.001">App-SQLiteUtils</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Utilities related to SQLite</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/App-dateseq-idn-0.003">App-dateseq-idn</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.003</td>
<td>Like dateseq, but with built-in support for Indonesian holidays</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OALDERS/App-perlimports-0.000001">App-perlimports</a></td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>0.000001</td>
<td>Make implicit imports explicit</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayData-0.1.0">ArrayData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.0</td>
<td>Specification for ArrayData::*, modules that contains array data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/ArrayDataRoles-Standard-0.001">ArrayDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Standard set of roles for ArrayData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Constellations-0.01">Astro-Coord-Constellations</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Identify the constellation for position (RA, Dec)</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DKECHAG/Astro-Coord-Precession-0.01">Astro-Coord-Precession</a></td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>0.01</td>
<td>Precess coordinates between 2 epochs</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/JMICO/Beekeeper-0.01">Beekeeper</a></td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>0.01</td>
<td>Framework for building applications with a microservices architecture</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/GROUSSE/BigIP-REST-0.1">BigIP-REST</a></td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>0.1</td>
<td>REST interface for BigIP</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Book-Bilingual-v0.001">Book-Bilingual</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.001</td>
<td>Data structure for a bilingual book</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BOD/Business-Stripe-WebCheckout-0.1_1">Business-Stripe-WebCheckout</a></td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>0.1_1</td>
<td>Simple way to implement payments using Stripe hosted checkout</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DBOOK/CGI-Tiny-0.001">CGI-Tiny</a></td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>0.001</td>
<td>Common Gateway Interface, with no frills</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DJERIUS/CXC-Number-0.03">CXC-Number</a></td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>0.03</td>
<td>A namespace for modules which deal with numbers.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OVID/CodeGen-Protection-0.01">CodeGen-Protection</a></td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>0.01</td>
<td>Safely rewrite parts of generated code</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-API-0.01">Crypto-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-API-0.01">Crypto-Exchange-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-0.01">Crypto-Exchange-Binance</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/MICVU/Crypto-Exchange-Binance-Spot-API-0.01">Crypto-Exchange-Binance-Spot-API</a></td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>0.01</td>
<td>Crypto Exchange Binance Spot API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RRWO/Data-Enum-v0.1.0">Data-Enum</a></td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>v0.1.0</td>
<td>fast, immutable enumeration classes</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Lookup-0.002">Data-TableData-Lookup</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.002</td>
<td>Lookup value in a table data structure</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Data-TableData-Object-0.112">Data-TableData-Object</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.112</td>
<td>Manipulate data structure via table object</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Devel-GlobalSub-0.01">Devel-GlobalSub</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.01</td>
<td>Automagically import a subroutine into all namespaces</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CCM/File-Codeowners-0.50">File-Codeowners</a></td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>0.50</td>
<td>Read and write CODEOWNERS files</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/File-Edit-0.0.1">File-Edit</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>v0.0.1</td>
<td>A naive, probably buggy, file editor.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/File-SortedSeek-PERLANCAR-0.015.0">File-SortedSeek-PERLANCAR</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.015.0</td>
<td>A fork of File::SortedSeek with some more options</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SANKO/Finance-Alpaca-0.9900">Finance-Alpaca</a></td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>0.9900</td>
<td>Perl Wrapper for Alpaca's Commission-free Stock Trading API</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CHROMATIC/Finance-Dogechain-1.20210418.2306">Finance-Dogechain</a></td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1.20210418.2306</td>
<td>use the dogecoin.info API from Perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CDN/Fork-Utils-0.01">Fork-Utils</a></td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>0.01</td>
<td>set of usefull methods to work with processes and signals</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HOEKIT/Function-Version-0.0001">Function-Version</a></td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>0.0001</td>
<td>Define and use different function versions</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FAYLAND/Google-UULE-Generator-0.01">Google-UULE-Generator</a></td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>0.01</td>
<td>Generate Google UULE param</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-ExtendedKeys-0.01">Hash-ExtendedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>Hash Keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LNATION/Hash-RestrictedKeys-0.01">Hash-RestrictedKeys</a></td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>0.01</td>
<td>restricted hash keys</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/VRAG/JSON-Pointer-Extend-0.01">JSON-Pointer-Extend</a></td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>0.01</td>
<td>JSON::Pointer extension module</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/TOBYINK/LINQ-Database-0.000_001">LINQ-Database</a></td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>0.000_001</td>
<td>LINQ extension for working with databases</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Lagrange-0.1.3">Lagrange</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>Perl extension for Lagrange Theory and Applications</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-CPUInfo-0.001">Lib-CPUInfo</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to PyTorch's libcpuinfo C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/XSAWYERX/Lib-PWQuality-0.001">Lib-PWQuality</a></td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>0.001</td>
<td>Perl interface to the libpwquality C library</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/NATARAJ/Lingua-StarDict-Writer-0.01">Lingua-StarDict-Writer</a></td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>0.01</td>
<td>A module that allows to create a StarDict dictionary</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ERICLEE/Linux-MCELog-0.01">Linux-MCELog</a></td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>0.01</td>
<td>Perl extensions to extract memory failure information from MCELog UNIX domain socket on Linux.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/List-AllUtils-Null-0.001">List-AllUtils-Null</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>List subroutines that treat undef as contagious unknown, like null in SQL</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/List-Keywords-0.01">List-Keywords</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a selection of list utility keywords</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/RVOSA/MIDI-SP404sx-v1.0.0">MIDI-SP404sx</a></td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>v1.0.0</td>
<td>Convert between MIDI files and SP404sx patterns</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DFUG/Minion-Backend-Redis-0.002">Minion-Backend-Redis</a></td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>0.002</td>
<td>Redis backend for Minion job queue</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Mojo-OBS-Client-0.01">Mojo-OBS-Client</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>Mojolicious client for the OBS WebSocket remote plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KARASIK/Mojo-Reactor-Prima-1.00">Mojo-Reactor-Prima</a></td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1.00</td>
<td>Prima event loop backend for Mojo::Reactor</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DERIV/Myriad-0.001">Myriad</a></td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>0.001</td>
<td>async microservice framework</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/CORION/Net-Protocol-OBSRemote-0.01">Net-Protocol-OBSRemote</a></td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>0.01</td>
<td>event-loop agnostic protocol to control OBS via the WebSocket plugin</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ABIGAIL/OEIS-2021041201">OEIS</a></td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>2021041201</td>
<td>Fetch values from sequences of the OEIS.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/DOOJONIO/OpenAPI-Generator-0.01">OpenAPI-Generator</a></td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>0.01</td>
<td>generate openapi definition</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/OpenMP-Environment-1.0.0">OpenMP-Environment</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>1.0.0</td>
<td>Perl extension managing OpenMP variables in %ENV within a script.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PLICEASE/Package-Checkpoint-0.01">Package-Checkpoint</a></td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>0.01</td>
<td>Checkpoint the scalar, array and hash values in a package for later restoration</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Perl-Oberon-0.1.3">Perl-Oberon</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.3</td>
<td>an Oberon compiler system written in Perl 5</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ASDAGO/Perl-PrereqScanner-Scanner-DistZilla-PluginBundle-0.001">Perl-PrereqScanner-Scanner-DistZilla-PluginBundle</a></td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>0.001</td>
<td>scan for required plugins in Dist::Zilla plugin bundles</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/LTM/Plack-App-WWW-0.01">Plack-App-WWW</a></td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>0.01</td>
<td>Serve cgi-bin and static files from root directory</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/HAARG/Pod-Coverage-TrustMe-0.001_001">Pod-Coverage-TrustMe</a></td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>0.001_001</td>
<td>Pod::Coverage but more powerful</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Collection-0.001">Role-TinyCommons-Collection</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Roles related to collections</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Role-TinyCommons-Iterator-0.001">Role-TinyCommons-Iterator</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>A basic iterator</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KEEDI/SMS-Send-KR-Aligo-0.004">SMS-Send-KR-Aligo</a></td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>0.004</td>
<td>An SMS::Send driver for the smartsms.aligo.in SMS service</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Sah-Schemas-Finance-SE-IDX-0.001">Sah-Schemas-Finance-SE-IDX</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>Schemas related to the Indonesian Stock Exchange</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/INA/See-0.01">See</a></td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>0.01</td>
<td>Debug See</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Fermi-0.1.2">Stats-Fermi</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.2</td>
<td>Perl extension for Fermi, Boltzmann potentials</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/KOBOLDWIZ/Stats-Hawking-0.1.1">Stats-Hawking</a></td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>v0.1.1</td>
<td>Perl extension for a Hawking Boltzmann Model</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-0.05-TRIAL">Sub-Genius</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.05</td>
<td>manage concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/OODLER/Sub-Genius-TRIAL-0.01">Sub-Genius-TRIAL</a></td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>0.01</td>
<td>module for managing concurrent Perl semantics in the uniprocess execution model of perl.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/Syntax-Keyword-Match-0.01">Syntax-Keyword-Match</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>a match/case syntax for perl</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/FELIPE/TOML-XS-0.01">TOML-XS</a></td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>0.01</td>
<td>Parse TOML with XS</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableData-0.1.3">TableData</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.1.3</td>
<td>Specification for TableData::*, modules that contains table data</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/TableDataRoles-Standard-0.007">TableDataRoles-Standard</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.007</td>
<td>Standard set of roles for TableData</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PERLANCAR/Text-Table-TickitWidget-0.001">Text-Table-TickitWidget</a></td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>0.001</td>
<td>View table data on the terminal using Tickit::Widget::Table</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Tree-Trek-20210424">Tree-Trek</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210424</td>
<td>Trek through a tree one character at a time.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PRBRENAN/Trim-20210401">Trim</a></td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>20210401</td>
<td>Trim various things by removing leading and trailing whitespace.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/SYBER/UniEvent-Socks-0.1.0">UniEvent-Socks</a></td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>v0.1.0</td>
<td>Socks support for UniEvent's tcp handles.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/BKB/Unicode-Confuse-0.01">Unicode-Confuse</a></td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>0.01</td>
<td>abstract here.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/ZARABOZO/Win32-Symlinks-0.03">Win32-Symlinks</a></td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>0.03</td>
<td>A maintained, working implementation of Perl symlink built in features for Windows.</td>
</tr>
<tr>
<td><a href="https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.01">XS-Parse-Keyword</a></td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>0.01</td>
<td>XS functions to assist in parsing keyword syntax</td>
</tr>
</table>
<h3>Stats</h3>
<p>Number of new CPAN distributions this period: <b>83</b></p>
<p>Number of authors releasing new CPAN distributions this period: <b>50</b></p>
<p>Authors by number of new CPAN distributions this period: </p>
<table>
<tr>
<th>No</th>
<th>Author</th>
<th>Distributions</th>
</tr>
<tr>
<td>1</td>
<td><a href="https://metacpan.org/author/PERLANCAR">PERLANCAR</a></td>
<td>16</td>
</tr>
<tr>
<td>2</td>
<td><a href="https://metacpan.org/author/KOBOLDWIZ">KOBOLDWIZ</a></td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td><a href="https://metacpan.org/author/MICVU">MICVU</a></td>
<td>4</td>
</tr>
<tr>
<td>4</td>
<td><a href="https://metacpan.org/author/HOEKIT">HOEKIT</a></td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td><a href="https://metacpan.org/author/OODLER">OODLER</a></td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td><a href="https://metacpan.org/author/PEVANS">PEVANS</a></td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td><a href="https://metacpan.org/author/PRBRENAN">PRBRENAN</a></td>
<td>2</td>
</tr>
<tr>
<td>8</td>
<td><a href="https://metacpan.org/author/DKECHAG">DKECHAG</a></td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td><a href="https://metacpan.org/author/ZARABOZO">ZARABOZO</a></td>
<td>2</td>
</tr>
<tr>
<td>10</td>
<td><a href="https://metacpan.org/author/XSAWYERX">XSAWYERX</a></td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td><a href="https://metacpan.org/author/LNATION">LNATION</a></td>
<td>2</td>
</tr>
<tr>
<td>12</td>
<td><a href="https://metacpan.org/author/CORION">CORION</a></td>
<td>2</td>
</tr>
<tr>
<td>13</td>
<td><a href="https://metacpan.org/author/SYBER">SYBER</a></td>
<td>1</td>
</tr>
<tr>
<td>14</td>
<td><a href="https://metacpan.org/author/SIMBABQUE">SIMBABQUE</a></td>
<td>1</td>
</tr>
<tr>
<td>15</td>
<td><a href="https://metacpan.org/author/DBOOK">DBOOK</a></td>
<td>1</td>
</tr>
<tr>
<td>16</td>
<td><a href="https://metacpan.org/author/LTM">LTM</a></td>
<td>1</td>
</tr>
<tr>
<td>17</td>
<td><a href="https://metacpan.org/author/CDN">CDN</a></td>
<td>1</td>
</tr>
<tr>
<td>18</td>
<td><a href="https://metacpan.org/author/BOD">BOD</a></td>
<td>1</td>
</tr>
<tr>
<td>19</td>
<td><a href="https://metacpan.org/author/BKB">BKB</a></td>
<td>1</td>
</tr>
<tr>
<td>20</td>
<td><a href="https://metacpan.org/author/RVOSA">RVOSA</a></td>
<td>1</td>
</tr>
<tr>
<td>21</td>
<td><a href="https://metacpan.org/author/GROUSSE">GROUSSE</a></td>
<td>1</td>
</tr>
<tr>
<td>22</td>
<td><a href="https://metacpan.org/author/NATARAJ">NATARAJ</a></td>
<td>1</td>
</tr>
<tr>
<td>23</td>
<td><a href="https://metacpan.org/author/HAARG">HAARG</a></td>
<td>1</td>
</tr>
<tr>
<td>24</td>
<td><a href="https://metacpan.org/author/CCM">CCM</a></td>
<td>1</td>
</tr>
<tr>
<td>25</td>
<td><a href="https://metacpan.org/author/ETJ">ETJ</a></td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td><a href="https://metacpan.org/author/CONTRA">CONTRA</a></td>
<td>1</td>
</tr>
<tr>
<td>27</td>
<td><a href="https://metacpan.org/author/KARASIK">KARASIK</a></td>
<td>1</td>
</tr>
<tr>
<td>28</td>
<td><a href="https://metacpan.org/author/OVID">OVID</a></td>
<td>1</td>
</tr>
<tr>
<td>29</td>
<td><a href="https://metacpan.org/author/TOBYINK">TOBYINK</a></td>
<td>1</td>
</tr>
<tr>
<td>30</td>
<td><a href="https://metacpan.org/author/ASDAGO">ASDAGO</a></td>
<td>1</td>
</tr>
<tr>
<td>31</td>
<td><a href="https://metacpan.org/author/CHROMATIC">CHROMATIC</a></td>
<td>1</td>
</tr>
<tr>
<td>32</td>
<td><a href="https://metacpan.org/author/VRAG">VRAG</a></td>
<td>1</td>
</tr>
<tr>
<td>33</td>
<td><a href="https://metacpan.org/author/ABIGAIL">ABIGAIL</a></td>
<td>1</td>
</tr>
<tr>
<td>34</td>
<td><a href="https://metacpan.org/author/KEEDI">KEEDI</a></td>
<td>1</td>
</tr>
<tr>
<td>35</td>
<td><a href="https://metacpan.org/author/DOOJONIO">DOOJONIO</a></td>
<td>1</td>
</tr>
<tr>
<td>36</td>
<td><a href="https://metacpan.org/author/DERIV">DERIV</a></td>
<td>1</td>
</tr>
<tr>
<td>37</td>
<td><a href="https://metacpan.org/author/PLICEASE">PLICEASE</a></td>
<td>1</td>
</tr>
<tr>
<td>38</td>
<td><a href="https://metacpan.org/author/FELIPE">FELIPE</a></td>
<td>1</td>
</tr>
<tr>
<td>39</td>
<td><a href="https://metacpan.org/author/INA">INA</a></td>
<td>1</td>
</tr>
<tr>
<td>40</td>
<td><a href="https://metacpan.org/author/JMICO">JMICO</a></td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td><a href="https://metacpan.org/author/FAYLAND">FAYLAND</a></td>
<td>1</td>
</tr>
<tr>
<td>42</td>
<td><a href="https://metacpan.org/author/OALDERS">OALDERS</a></td>
<td>1</td>
</tr>
<tr>
<td>43</td>
<td><a href="https://metacpan.org/author/UTASHIRO">UTASHIRO</a></td>
<td>1</td>
</tr>
<tr>
<td>44</td>
<td><a href="https://metacpan.org/author/DFUG">DFUG</a></td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td><a href="https://metacpan.org/author/BRAINBUZ">BRAINBUZ</a></td>
<td>1</td>
</tr>
<tr>
<td>46</td>
<td><a href="https://metacpan.org/author/RRWO">RRWO</a></td>
<td>1</td>
</tr>
<tr>
<td>47</td>
<td><a href="https://metacpan.org/author/UTGWKK">UTGWKK</a></td>
<td>1</td>
</tr>
<tr>
<td>48</td>
<td><a href="https://metacpan.org/author/ERICLEE">ERICLEE</a></td>
<td>1</td>
</tr>
<tr>
<td>49</td>
<td><a href="https://metacpan.org/author/SANKO">SANKO</a></td>
<td>1</td>
</tr>
<tr>
<td>50</td>
<td><a href="https://metacpan.org/author/DJERIUS">DJERIUS</a></td>
<td>1</td>
</tr>
</table>
</div>
    </content>
    <summary type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">dist author version abstract Acme-Brainbuz-markdown BRAINBUZ 0.001 turns baubles into trinkets Acme-CPANModules-BrowsingTableInteractively PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-CPANModules-CreatingPaletteOfVisuallyDistinctColors PERLANCAR 0.001 Creating a palette of visually distinct colors Acme-Markdown-Embarrassing CONTRA 0.01 Testing the MetaCPAN Markdown converter Alien-OpenMP ETJ 0.001 Encapsulate system info for OpenMP App-Greple-ical UTASHIRO 0.01 Module to support Apple OS … <a href="https://perlancar.wordpress.com/2021/05/01/list-of-new-cpan-distributions-apr-2021/" class="more-link">Continue reading <span class="screen-reader-text">List of new CPAN distributions – Apr 2021</span></a></div>
    </summary>
    <author>
      <name>perlancar</name>
    </author>
    <id>http://perlancar.wordpress.com/?p=1941</id>
    <published>2021-05-01T00:37:07Z</published>
    <updated>2021-05-01T00:37:07Z</updated>
    <category term="cpan"/>
    <category term="perl"/>
  </entry>
  <entry>
    <title>Live coding session with Gabor Szabo</title>
    <link href="http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html"/>
    <id>http://domm.plix.at/perl/2021_04_live_coding_session_with_gabor_szabo.html</id>
    <updated>2021-04-29T20:06:52+00:00</updated>
    <category term="perl"/>
    <summary>Today I was invited to join Gabor Szabo for a live pair programming session, where we worked on adding Docker and CI to his course management application. You can view the video of our informal ...</summary>
    <content type="html">&lt;p&gt;Today I was invited to join &lt;a href="https://szabgab.com/"&gt;Gabor Szabo&lt;/a&gt; for a &lt;a href="https://code-maven.com/setting-up-ci-and-docker-for-course-management-app"&gt;live pair programming session&lt;/a&gt;, where we worked on adding Docker and CI to his &lt;a href="https://github.com/szabgab/course-management"&gt;course management application&lt;/a&gt;. You can view the video of our informal competition who is the worst typist &lt;a href="https://www.youtube.com/watch?v=byugeGi1cNc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first I was bit skeptical about the concept of live coding (who wants to watch people google^w code for two hours?), but in the end it was a funny and informative (for me) session. Maybe I'm just totally deprived of live human interaction (thanks, Corona), but I think I'd enjoy similar sessions also under normal circumstances.&lt;/p&gt;

&lt;h4&gt;Things I learned&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I forgot a lot of docker command line options after mostly using docker-compose.&lt;/li&gt;
&lt;li&gt;There is no really smooth way to &lt;code&gt;COPY&lt;/code&gt; a lot of dirs into the container.&lt;/li&gt;
&lt;li&gt;Adding a &lt;code&gt;.dockerignore&lt;/code&gt; file (to ignore at least &lt;code&gt;~/.git/&lt;/code&gt;) saves some time and network, because docker will not send the ignored files to the docker daemon in the famous &lt;code&gt;sending build context to docker daemon&lt;/code&gt; step at the start of each build.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;/code&gt; exposes the ports listed in &lt;code&gt;EXPOSE&lt;/code&gt;, but maps them to random ports on the host (which makes no sense during dev, but probably when deploying to clouds)&lt;/li&gt;
&lt;li&gt;Some people prefer &lt;code&gt;-ti&lt;/code&gt;, some prefer &lt;code&gt;-it&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I'm a bit rusty on using the github pull request workflow (esp. the part where you have to fetch upgrades from upstream), due to mostly working on repos where several devs have direct write access.&lt;/li&gt;
&lt;li&gt;Setting up github CI is really not a lot of work (at least to only run the basic tests). Only &lt;a href="https://github.com/szabgab/course-management/commit/2bfb424f8e1b14481def0886a198f4715cff5f8a"&gt;16 lines of &lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt;. I will try to add this to my &lt;span class="caps"&gt;CPAN &lt;/span&gt;github repos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're interested in the Dockerfile aspect of this session, may I point you to my talk &lt;a href="/talks/writing_a_good_dockerfile_for_perl_app.html"&gt;Writing a good Dockerfile for a (Perl) app&lt;/a&gt; from the 2020 Perl Conference, where I elaborate on some of the finer points, and with better preparation than today :-)&lt;/p&gt;

&lt;p&gt;Oh, and this reminds me that I should submit a talk (maybe on docker-compose?) for &lt;a href="https://perlconference.us/tprc-2021-cloud/"&gt;this years Perl &amp;amp; Raku conference&lt;/a&gt;. The CfP runs until tomorrow, so I better hurry.&lt;/p&gt;</content>
    <category term="docker"/>
    <category term="CI"/>
  </entry>
  <entry>
    <title>Downloading and Installing Perl in 2021</title>
    <link rel="alternate" href="https://perl.com/article/downloading-and-installing-perl-in-2021/" type="text/html"/>
    <content type="html">

&lt;p&gt;&lt;em&gt;[This article is part of our &lt;a href="https://github.com/tpf/perldotcom/projects/1"&gt;Popular articles&lt;/a&gt; project to update
Perl.com for contemporary practices]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re reading this article, you&amp;rsquo;re likely looking for a simple way
to download and install the Perl programming language. Or you already
have Perl installed as part of your operating system, but it&amp;rsquo;s older
than the currently-supported versions (5.32.1 or 5.30.3) and you&amp;rsquo;d
like to use the latest and greatest features. &lt;a href="https://www.perl.org/get.html"&gt;The download
options&lt;/a&gt; may seem daunting, especially
if you&amp;rsquo;re new to computers or programming. We&amp;rsquo;ll take things step by
step, and soon you&amp;rsquo;ll be on your way to writing your first Perl
program.&lt;/p&gt;

&lt;p&gt;A word of warning, though: Several of these steps (and usually Perl
itself) require using your computer&amp;rsquo;s command-line or terminal
interface.&lt;/p&gt;

&lt;h2 id="the-first-step-download-pre-built"&gt;The first step: Download pre-built&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re getting started in Perl development, you may only need a
pre-built binary distribution. Further on, though, you might want to
consider building your own, especially if you need to juggle different
versions to support different environments or want to use a later
version than is available pre-made.&lt;/p&gt;

&lt;p&gt;For now, though, let&amp;rsquo;s consider the pre-built options. You have
several, depending on what computer operating system you&amp;rsquo;re using.&lt;/p&gt;

&lt;h3 id="microsoft-windows"&gt;Microsoft Windows&lt;/h3&gt;

&lt;p&gt;The two main &amp;ldquo;flavors&amp;rdquo; of Perl for Windows are
&lt;a href="https://www.activestate.com/products/perl/"&gt;ActiveState Perl&lt;/a&gt; and
&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;. Which one you choose depends
on what you plan to use it for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveState&lt;/strong&gt; provides a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition of ActivePerl&lt;/a&gt;
licensed only for development purposes. If you intend to do
commercial work or want technical support beyond community forums, you&amp;rsquo;ll
need to
&lt;a href="https://www.activestate.com/solutions/pricing/"&gt;subscribe to a team plan or higher&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The free community edition is also 64-bit only, and as of this writing, only
the earlier versions 5.28 (2018) and 5.26 (2017) are available, with an
experimental 5.32 (2020) release licensed for any purpose. The latter is
also currently only installable via the Windows command line; earlier
versions use a standard Windows setup wizard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://strawberryperl.com/"&gt;Strawberry Perl&lt;/a&gt;&lt;/strong&gt; is a Perl environment for
Windows that strives to be as close as possible to Perl on Unix and Linux
systems, where the language got its start. Besides the Perl binaries, it
also includes a compiler, related tools, external libraries, and database
clients. This is important as many modules for extending Perl&amp;rsquo;s
functionality need a compiler. It&amp;rsquo;s also available in both 64-bit and
32-bit editions of the current 5.32 version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do I recommend?&lt;/strong&gt; There&amp;rsquo;s no escaping Perl&amp;rsquo;s Unix heritage, so you&amp;rsquo;ll
have an easier time with Strawberry Perl. That said, if you think you&amp;rsquo;ll be
taking advantage of ActiveState&amp;rsquo;s commercial offerings of support and their
&lt;a href="https://www.activestate.com/products/platform/"&gt;ActiveState Platform&lt;/a&gt; for
managing different language runtimes, you may want to give them a try.&lt;/p&gt;

&lt;p&gt;Windows also has two Linux-like environments in the form of
&lt;a href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; and
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/"&gt;Windows Subsystem for Linux&lt;/a&gt;.
Follow the Linux directions below to install Perl in one of these.&lt;/p&gt;

&lt;p&gt;There is also the &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; package manager for
Windows, which provides an option for installing either ActiveState or
Strawberry Perl.&lt;/p&gt;

&lt;h3 id="apple-macos"&gt;Apple macOS&lt;/h3&gt;

&lt;p&gt;macOS comes with Perl pre-installed: version
5.18 (2013) on macOS Catalina 10.15 and 5.28 (2018) on Big Sur 11. But,
&lt;a href="https://developer.apple.com/documentation/macos-release-notes/macos-catalina-10_15-release-notes#Scripting-Language-Runtimes"&gt;Apple has said that scripting language runtimes are deprecated&lt;/a&gt;,
and are only &amp;ldquo;included &amp;hellip; for compatibility with legacy software.&amp;rdquo; You
should consider installing your own.&lt;/p&gt;

&lt;p&gt;Like Windows, ActiveState has a
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;free community edition&lt;/a&gt;
for developers. The Windows caveats above apply, except for a current Perl
version 5.32—it&amp;rsquo;s &amp;ldquo;coming soon&amp;rdquo; as of this writing.&lt;/p&gt;

&lt;p&gt;Your best bet is to &lt;a href="https://brew.sh/"&gt;install the Homebrew package manager&lt;/a&gt;
in the macOS Terminal application (after
&lt;a href="https://docs.brew.sh/Installation#macos-requirements"&gt;installing its requirements&lt;/a&gt;),
and then issue the command &lt;code&gt;brew install perl&lt;/code&gt;. This will install the latest
version of Perl, as well as give you instructions for making sure that
installed Perl modules stay that way across updates by Homebrew.&lt;/p&gt;

&lt;h3 id="linux-or-another-unix-like-system"&gt;Linux or another Unix-like system&lt;/h3&gt;

&lt;p&gt;Like macOS, most Linux and Unix
systems come with Perl pre-installed, or installable using the operating
system&amp;rsquo;s software package manager. Also like macOS, these are usually older
versions provided for compatibility with other software provided by the
OS.&lt;/p&gt;

&lt;p&gt;To install your own on Linux, you can
&lt;a href="https://www.activestate.com/products/perl/downloads/"&gt;go the ActiveState route&lt;/a&gt;
as above, or also use the
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux"&gt;Homebrew package manager&lt;/a&gt;. There are
&lt;a href="https://docs.brew.sh/Homebrew-on-Linux#requirements"&gt;several requirements to install first&lt;/a&gt;,
and then you can
&lt;a href="https://brew.sh/"&gt;follow the directions for installing Homebrew&lt;/a&gt; and issue
the command &lt;code&gt;brew install perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For other Unix systems with an older version of Perl, I&amp;rsquo;m afraid you&amp;rsquo;re going
to have to build from source as detailed below.&lt;/p&gt;

&lt;h2 id="next-steps-building-your-own-with-perlbrew-or-plenv"&gt;Next steps: Building your own with perlbrew or plenv&lt;/h2&gt;

&lt;p&gt;Perl&amp;rsquo;s source code (the instructions that build a program) is freely
available and compiles on &lt;a href="https://perldoc.pl/perlport#PLATFORMS"&gt;over 100
platforms&lt;/a&gt;. You can &lt;a href="https://www.perl.org/get.html"&gt;download
it directly&lt;/a&gt; and build a version
yourself, after installing any prerequisite packages used to build
software on your operating system (see below). However, most Perl
developers choose to use a tool to automate that process and manage
different versions of Perl side-by-side. Enter
&lt;a href="https://perlbrew.pl/"&gt;perlbrew&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perlbrew requires an already-installed system version of Perl, but it
can be as old as 5.8 (2002), which should cover most Linux and Unix
systems in use today. Once you&amp;rsquo;ve installed your operating system&amp;rsquo;s
build tools and followed the directions on &lt;a href="https://perlbrew.pl/"&gt;the perlbrew home
page&lt;/a&gt;, typing &lt;code&gt;perlbrew install 5.32.1&lt;/code&gt; followed
by &lt;code&gt;perlbrew switch 5.32.1&lt;/code&gt; will install and switch to the latest
version of Perl as of this writing. Installing older versions of Perl
and switching between them use the same steps, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perlbrew install &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;.30.3 --as older-perl
perlbrew switch older-perl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use an alternative, &lt;a href="https://github.com/tokuhirom/plenv"&gt;plenv&lt;/a&gt;,
which uses a different mechanism to manage versions of Perl using the &lt;code&gt;bash&lt;/code&gt;
command shell. It also enables you to use different versions of Perl depending
on which file system directory you&amp;rsquo;re working in. It&amp;rsquo;s
&lt;a href="https://github.com/tokuhirom/plenv/blob/master/README.md#installation"&gt;set up&lt;/a&gt;
using either Homebrew or &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Windows users have the option of
&lt;a href="https://github.com/stevieb9/berrybrew"&gt;berrybrew&lt;/a&gt;, which acts much like
perlbrew for Strawberry Perl with slightly different
&lt;a href="https://github.com/stevieb9/berrybrew#commands"&gt;options&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="building-from-the-source-directly"&gt;Building from the source directly&lt;/h2&gt;

&lt;p&gt;If you feel you don&amp;rsquo;t need to manage multiple installations of Perl or you
want to do things old-school, you can always download and build directly from
the source code. Select &amp;ldquo;Download Latest Stable Source&amp;rdquo; from the
&lt;a href="https://www.perl.org/get.html"&gt;Perl Download&lt;/a&gt; web page, then
&lt;a href="https://opensource.com/article/17/7/how-unzip-targz-file"&gt;unarchive it&lt;/a&gt;
into a directory.&lt;/p&gt;

&lt;p&gt;You should always check the included &lt;code&gt;README&lt;/code&gt; files for information on how to
build on your system; there&amp;rsquo;s a generic one as well as specific &lt;code&gt;README&lt;/code&gt;s for
various platforms (&lt;code&gt;README.linux&lt;/code&gt;, &lt;code&gt;README.macosx&lt;/code&gt;, &lt;code&gt;README.win32&lt;/code&gt;, etc.).
Note that the &lt;code&gt;README.macosx&lt;/code&gt; document applies to current versions of macOS,
which was previously called Mac OS X; &lt;code&gt;README.macos&lt;/code&gt; is for the &amp;ldquo;Classic&amp;rdquo;
Macintosh operating system, unsupported since 2004.&lt;/p&gt;

&lt;p&gt;On most Unix-like systems (including macOS), you can then configure, build,
test, and install Perl by issuing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;./Configure -des -Dprefix&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/
make
make test
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will build Perl with all default options for your system and install it
in the &lt;code&gt;/usr/local&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id="up-and-running"&gt;Up and running&lt;/h2&gt;

&lt;p&gt;Regardless of whether you&amp;rsquo;ve chosen to install a pre-built package or roll
your own, you should now be able to issue the following at your command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"&gt;&lt;code class="language-bash" data-lang="bash"&gt;perl -v&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;hellip;and receive a reply that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is perl 5, version 32, subversion 1 (v5.32.1) built for darwin-2level
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2021, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using &amp;quot;man perl&amp;quot; or &amp;quot;perldoc perl&amp;quot;.  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, you&amp;rsquo;re now using the latest version of Perl on your computer!
Now head on over to &lt;a href="https://perl.org"&gt;Perl.org&lt;/a&gt; and start learning!&lt;/p&gt;
</content>
    <id>https://perl.com/article/downloading-and-installing-perl-in-2021/</id>
    <published>2021-04-27T04:05:40Z</published>
    <updated>2021-04-27T04:05:40Z</updated>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 4</title>
  <summary type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-26T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-4"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-4</id>
  <content type="html"><![CDATA[<p>
The fourth part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Chowla Numbers and Numbers in Boxes: The Weekly Challenge 109</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/25#pwc109" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 20 Chowla Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use constant CHOWLA_COUNT =&gt; 20;
sub factor{
    my($n) = @_;
    my @factors = ();
    foreach my $j (2..sqrt($n)){
        push @factors, $j if $n % $j == 0;
        push @factors, ($n / $j) if $n % $j == 0 &amp;&amp; $j ** 2 != $n;
    }    
    return @factors;  
}

sub chowla{
    my(@factors) = @_;
    my $sum = unpack("%32I*", pack("I*", @factors)); 
}

MAIN:{
    my @chowla_numbers;
    for my $n (1 .. CHOWLA_COUNT){
        push @chowla_numbers, chowla(factor($n));
    }
    print join(", ", @chowla_numbers) . "\n"; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
0, 0, 0, 2, 0, 5, 0, 6, 3, 7, 0, 15, 0, 9, 8, 14, 0, 20, 0, 21
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This code borrowed quite a bit a previous challenge involving &lt;a href="https://adamcrussell.livejournal.com/2607.html"&gt;Perfect Numbers&lt;/a&gt;. Indeed, the code is nearly identical! After we get the factors there is only the matter of summing them and displaying them.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Place the given unique numbers in the square box so that sum of numbers in each box is the same.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
##
# You are given four squares as below with numbers named a,b,c,d,e,f,g.
# to place the given unique numbers in the square box so that sum of 
# numbers in each box is the same. 
#               (1)                    (3)
#        +--------------+      +--------------+
#        ?              ?      ?              ?
#        ?      a       ?      ?      e       ?
#        ?              ? (2)  ?              ?  (4)
#        ?          +---+------+---+      +---+---------+
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ? b ?      ? d ?      ? f ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        ?          ?   ?      ?   ?      ?   ?         ?
#        +----------+---+      +---+------+---+         ?
#                   ?       c      ?      ?      g      ?
#                   ?              ?      ?             ?
#                   ?              ?      ?             ?
#                   +--------------+      +-------------+
##
use AI::Prolog;

my $prolog = do{
    local $/;
    &lt;DATA&gt;;
}; 
$prolog = new AI::Prolog($prolog); 
$prolog-&gt;query("sums_in_squares([1,2,3,4,5,6,7], Squares).");

my $result;
print join("\t", "a" .. "g") . "\n";  
while ($result = $prolog-&gt;results()){
    print join("\t", @{$result-&gt;[2]}) . "\n";
}

__DATA__
member(X,[X|T]).
member(X,[H|T]):- member(X,T).
sums_in_squares(Numbers, [A, B, C, D, E, F, G]):-  
    member(A, Numbers), 
    member(B, Numbers),
    member(C, Numbers),
    member(D, Numbers),
    member(E, Numbers),
    member(F, Numbers),
    member(G, Numbers),
    A \= B, A \= C, A \= D, A \= E, A \= F, A \= G,
    B \= A, B \= C, B \= D, B \= E, B \= F, B \= G,
    C \= A, C \= B, C \= D, C \= E, C \= F, C \= G,
    D \= A, D \= B, D \= C, D \= E, D \= F, D \= G,
    E \= A, E \= B, E \= C, E \= D, E \= F, E \= G,
    F \= A, F \= B, F \= C, F \= D, F \= E, F \= G,
    G \= A, G \= B, G \= C, G \= D, G \= E, G \= F,
    Box1 is A + B,
    Box2 is B + C + D,
    Box3 is D + E + F,
    Box4 is F + G,
    Box1 == Box2,
    Box2 == Box3,
    Box3 == Box4.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
a       b       c       d       e       f       g
3       7       2       1       5       4       6
4       5       3       1       6       2       7
4       7       1       3       2       6       5
5       6       2       3       1       7       4
6       4       1       5       2       3       7
6       4       5       1       2       7       3
7       2       6       1       3       5       4
7       3       2       5       1       4       6
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This sort of problem practically screams out for a Prolog solution! In the interest of keeping with the name, if not the spirit of the weekly challenge, this first part is indeed Perl, albeit using AI::Prolog, a module which offers a pure Perl implementation of a basic Prolog.&lt;/p&gt;
&lt;p&gt;I have used AI::Prolog &lt;a href="https://adamcrussell.livejournal.com/14361.html"&gt;previously&lt;/a&gt; and it’s a neat way to take advantage of Prolog within a Perl based solution. The two main downsides are that (1) it is not a full ISO Prolog and (2) it is slow. So very very slow. I suspect, in fact, there is a serious bug in the implementation. Even accounting for the fact that a pure Perl Prolog would be much slower than one written in C, such as Gnu Prolog, the execution time differences are laughably dramatic. I didn’t bother with precise metrics but the code above takes about an hour to run on fairly current hardware (i.e. my 2018 Mac Mini). Essentially the same code run on the same hardware but with Gnu Prolog completes in mere seconds.&lt;/p&gt;
&lt;p&gt;Still, this is a nice way to incorporate a bit of Symbolic AI in a Perl code base if there is a small search space. Say, for some simple game logic or a small chat bot.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/25"&gt;pure Prolog solution&lt;/a&gt; I did for this uses the same approach, in part, although I also wrote this to take advantage of Gnu Prolog’s FD solver. The FD version of the code completes in about 10ms!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-109/"&gt;Challenge 109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Sarvadaman_Chowla"&gt;Sarvadaman D. S. Chowla&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://metacpan.org/pod/AI::Prolog"&gt;AI::Prolog&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc109</id>
    <published>2021-04-25T16:00:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
  <entry>
  <title>Course Management Application in Mojolicious - part 3</title>
  <summary type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></summary>
  <updated>2021-04-19T09:30:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/course-management-app-in-mojolicious-3"/>  <id>https://perlmaven.com/course-management-app-in-mojolicious-3</id>
  <content type="html"><![CDATA[<p>
The third part of the live development <a href="/course-management-app-in-mojolicious">course management application</a> using Mojolicous together with <a href="https://phoenixtrap.com/">Mark Gardner</a>.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
  <title>Digital Ocean API using Perl</title>
  <summary type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></summary>
  <updated>2021-04-19T07:50:01Z</updated>
  <link rel="alternate" type="text/html" href="https://perlmaven.com/digital-ocean-api"/>  <id>https://perlmaven.com/digital-ocean-api</id>
  <content type="html"><![CDATA[<p>
I've been using <a href="/digitalocean">Digital Ocean</a> for many years for some of my hosting needs. Besides the nice GUI they also have an API
and there is a Perl module called <a href="https://metacpan.org/pod/DigitalOcean">DigitalOcean</a> that can be used to access it.
<p>
]]></content>
    <author>
      <name>Gabor Szabo</name>
    </author>
</entry>
  <entry>
    <title>Memory Addresses and Bell Numbers: The Weekly Challenge 108</title>
    <link rel="alternate" href="http://www.rabbitfarm.com/cgi-bin/blosxom/2021/04/18#pwc108" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;em&gt;The examples used here are from the weekly challenge problem statement and demonstrate the working solution.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="part-1"&gt;Part 1&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to declare a variable or constant and print it’s location in the memory.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;
use Devel::Peek;
use Capture::Tiny q/capture_stderr/;
use constant A =&gt; "test";
my $a = 1;    
my $address;  
my $stderr = capture_stderr {
    Dump(A)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of constant A: $address\n"; 
$stderr = capture_stderr {
    Dump($a)
};
$stderr =~ m/at\s(0x.*\n).*/;
$address = $1;  
chomp($address);
print "Address of \$a: $address\n";
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-1.pl
Address of constant A: 0xfd31ae90
Address of $a: 0xfdb2f770
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is a somewhat unusual challenge for Perl. Sometimes these challenges allow for a certain amount of interpretation. For example, under the hood, the representation of Perl data in memory involves more complicated data structures. I think it is in the spirit of this challenge to demonstrate access to this, without necessarily implementing complete and fully generalized solution.&lt;/p&gt;
&lt;p&gt;Here I use &lt;code&gt;Devel::Peek&lt;/code&gt; in order to get a report on the underlying memory usage of the given variables. The &lt;code&gt;Dump&lt;/code&gt; function only prints a memory report to STDERR, so in order to obtain the information we seek &lt;code&gt;Capture::Tiny&lt;/code&gt; is used to encapsulate the STDERR output and save it to a variable. A regex is then used to pull out the memory address which is then printed.&lt;/p&gt;
&lt;p&gt;The memory address printed here is the &lt;em&gt;reference address&lt;/em&gt;. For additional details on Perl’s core see the perlguts documentation.&lt;/p&gt;
&lt;h2 id="part-2"&gt;Part 2&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Write a script to display the first 10 Bell Numbers.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="solution-1"&gt;Solution&lt;/h3&gt;
&lt;pre&gt;&lt;code class="perl"&gt;
use strict;
use warnings;

sub bell_triangle{
    my($n) = @_; 
    my @bell_numbers = ([]);
    $bell_numbers[0]-&gt;[0] = 1;
    for (my $i=1; $i&lt;=$n; $i++) {
      $bell_numbers[$i]-&gt;[0] = $bell_numbers[$i-1]-&gt;[$i-1];
      for (my $j=1; $j&lt;=$i; $j++){  
          $bell_numbers[$i]-&gt;[$j] = $bell_numbers[$i-1]-&gt;[$j-1] + $bell_numbers[$i]-&gt;[$j-1];
       }
   }
   return $bell_numbers[$n]-&gt;[0];
}

MINA:{
    for my $b (0 .. 9){  
        print "B_$b: " . bell_triangle($b) . "\n";  
    } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sample-run-1"&gt;Sample Run&lt;/h3&gt;
&lt;pre&gt;&lt;code class="shell"&gt;
$ perl perl/ch-2.pl
B_0: 1
B_1: 1
B_2: 2
B_3: 5
B_4: 15
B_5: 52
B_6: 203
B_7: 877
B_8: 4140
B_9: 21147
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="notes-1"&gt;Notes&lt;/h3&gt;
&lt;p&gt;This is an interesting problem. At first glance one might be tempted to proceed and compute the partitions and then take the total number of them all. Instead, it turns out that there is a simpler closed form solution whereby we can compute the &lt;em&gt;Bell Triangle&lt;/em&gt; and then take the values on the leftmost diagonal to be the &lt;em&gt;Bell Numbers&lt;/em&gt; as required.&lt;/p&gt;
&lt;p&gt;For fun the &lt;a href="http://www.rabbitfarm.com/cgi-bin/blosxom/prolog/2021/04/18"&gt;Prolog solution&lt;/a&gt; does indeed compute the partitions instead of simply using the Bell Triangle!&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-108/"&gt;Challenge 108&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://perldoc.perl.org/perlguts"&gt;perlguts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_number"&gt;Bell Numbers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Bell_triangle"&gt;Bell Triangle&lt;/a&gt;&lt;/p&gt;</content>
    <id>http://www.rabbitfarm.com/cgi-bin/blosxom/perl/pwc108</id>
    <published>2021-04-18T15:55:00-04:00Z</published>
    <category term="/perl"/>
  </entry>
</feed>
